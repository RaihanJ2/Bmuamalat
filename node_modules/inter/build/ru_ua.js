function defaults(targetObj) {
    for (var i = 1; i < arguments.length; i += 1) {
        if (arguments[i] && typeof arguments[i] === "object") {
            for (var propertyName in arguments[i]) {
                if (typeof targetObj[propertyName] === "undefined") {
                    targetObj[propertyName] = arguments[i][propertyName];
                }
            }
        }
    }
    return targetObj;
}

var P = require("./ru.js"), inter = defaults({
    renderers: {}
}, P);

var _ilvs1 = {
    displayName: "ДП/ПП"
}, _ilvs2 = {
    all: {
        leap: "{0}bis"
    }
}, _ilvs3 = {
    a: "h a – h a",
    h: "h–h a"
}, _ilvs4 = [ "Before R.O.C.", "Minguo" ], _ilvs5 = {
    displayName: "день недели"
}, _ilvs6 = {
    displayName: "часовой пояс"
}, _ilvs7 = {
    H: "H:mm–H:mm",
    m: "H:mm–H:mm"
}, _ilvs8 = [ "В", "П", "В", "С", "Ч", "П", "С" ], _ilvs9 = {
    a: "h a – h a v",
    h: "h–h a v"
}, _ilvs10 = {
    d: "d–d MMM",
    M: "d MMM – d MMM"
}, _ilvs11 = {
    d: "MMM d–d",
    M: "MMM d – MMM d"
}, _ilvs12 = {
    wide: [ "AH" ],
    abbreviated: [ "AH" ]
}, _ilvs13 = {
    M: "MMM–MMM y",
    y: "MMM y – MMM y"
}, _ilvs14 = {
    H: "H:mm–H:mm v",
    m: "H:mm–H:mm v"
}, _ilvs15 = {
    H: "HH:mm–HH:mm",
    m: "HH:mm–HH:mm"
}, _ilvs16 = {
    M: "y-MM – y-MM",
    y: "y-MM – y-MM"
}, _ilvs17 = {
    M: "U MMM–MMM",
    y: "U MMM – U MMM"
}, _ilvs18 = [ "вс", "пн", "вт", "ср", "чт", "пт", "сб" ], _ilvs19 = {
    M: "LLLL–LLLL y",
    y: "LLLL y – LLLL y"
}, _ilvs20 = {
    d: "dd.MM – dd.MM",
    M: "dd.MM – dd.MM"
}, _ilvs21 = {
    M: "MM.y – MM.y G",
    y: "MM.y – MM.y G"
}, _ilvs22 = {
    H: "HH:mm–HH:mm v",
    m: "HH:mm–HH:mm v"
}, _ilvs23 = {
    d: "MM-dd – MM-dd",
    M: "MM-dd – MM-dd"
}, _ilvs24 = {
    M: "U MMMM–MMMM",
    y: "U MMMM – U MMMM"
}, _ilvs25 = [ "1-й кв.", "2-й кв.", "3-й кв.", "4-й кв." ], _ilvs26 = {
    d: "E, d – E, d MMM",
    M: "E, d MMM – E, d MMM"
}, _ilvs27 = {
    "0": "тек. кв.",
    "1": "след. кв.",
    "-1": "посл. кв."
}, _ilvs28 = {
    d: "E, dd.MM – E, dd.MM",
    M: "E, dd.MM – E, dd.MM"
}, _ilvs29 = [ "Я", "Ф", "М", "А", "М", "И", "И", "А", "С", "О", "Н", "Д" ], _ilvs30 = {
    d: "MM-dd, E – MM-dd, E",
    M: "MM-dd, E – MM-dd, E"
}, _ilvs31 = {
    d: "MMM d, E – MMM d, E",
    M: "MMM d, E – MMM d, E"
}, _ilvs32 = {
    "0": "в это вс.",
    "1": "в след. вс.",
    "-1": "в прош. вс."
}, _ilvs33 = {
    "0": "в эту ср.",
    "1": "в след. ср.",
    "-1": "в прош. ср."
}, _ilvs34 = {
    "0": "в эту пт.",
    "1": "в след. пт.",
    "-1": "в прош. пт."
}, _ilvs35 = {
    "0": "в эту сб.",
    "1": "в след. сб.",
    "-1": "в прош. сб."
}, _ilvs36 = {
    wide: [ "ERA0", "ERA1" ],
    abbreviated: [ "ERA0", "ERA1" ]
}, _ilvs37 = {
    "0": "в этот пн.",
    "1": "в след. пн.",
    "-1": "в прош. пн."
}, _ilvs38 = {
    "0": "в этот вт.",
    "1": "в след. вт.",
    "-1": "в прош. вт."
}, _ilvs39 = {
    "0": "в этот чт.",
    "1": "в след. чт.",
    "-1": "в прош. чт."
}, _ilvs40 = [ "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" ], _ilvs41 = {
    a: "h:mm a – h:mm a",
    h: "h:mm–h:mm a",
    m: "h:mm–h:mm a"
}, _ilvs42 = {
    "0": "текущий кв.",
    "1": "следующий кв.",
    "-1": "последний кв."
}, _ilvs43 = {
    d: "d–d MMM y",
    M: "d MMM – d MMM y",
    y: "d MMM y – d MMM y"
}, _ilvs44 = [ "1-й квартал", "2-й квартал", "3-й квартал", "4-й квартал" ], _ilvs45 = {
    d: "U MMM d–d",
    M: "U MMM d – MMM d",
    y: "U MMM d – U MMM d"
}, _ilvs46 = [ "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13" ], _ilvs47 = {
    a: "h:mm a – h:mm a v",
    h: "h:mm–h:mm a v",
    m: "h:mm–h:mm a v"
}, _ilvs48 = {
    "0": "в этом году",
    "1": "в следующем году",
    "-1": "в прошлом году"
}, _ilvs49 = {
    one: "+{0} г.",
    few: "+{0} г.",
    many: "+{0} л.",
    other: "+{0} г."
}, _ilvs50 = {
    one: "-{0} г.",
    few: "-{0} г.",
    many: "-{0} л.",
    other: "-{0} г."
}, _ilvs51 = {
    one: "+{0} д.",
    few: "+{0} д.",
    many: "+{0} д.",
    other: "+{0} д."
}, _ilvs52 = {
    one: "-{0} д.",
    few: "-{0} д.",
    many: "-{0} д.",
    other: "-{0} д."
}, _ilvs53 = {
    one: "+{0} ч.",
    few: "+{0} ч.",
    many: "+{0} ч.",
    other: "+{0} ч."
}, _ilvs54 = {
    one: "-{0} ч.",
    few: "-{0} ч.",
    many: "-{0} ч.",
    other: "-{0} ч."
}, _ilvs55 = {
    relative: _ilvs32
}, _ilvs56 = {
    relative: _ilvs33
}, _ilvs57 = {
    relative: _ilvs34
}, _ilvs58 = {
    relative: _ilvs35
}, _ilvs59 = {
    relative: _ilvs37
}, _ilvs60 = {
    relative: _ilvs38
}, _ilvs61 = {
    "0": "в эту среду",
    "1": "в следующую среду",
    "-1": "в прошлую среду"
}, _ilvs62 = {
    relative: _ilvs39
}, _ilvs63 = {
    one: "+{0} кв.",
    few: "+{0} кв.",
    many: "+{0} кв.",
    other: "+{0} кв."
}, _ilvs64 = {
    one: "-{0} кв.",
    few: "-{0} кв.",
    many: "-{0} кв.",
    other: "-{0} кв."
}, _ilvs65 = {
    "0": "в этом месяце",
    "1": "в следующем месяце",
    "-1": "в прошлом месяце"
}, _ilvs66 = {
    d: "y-MM-dd – y-MM-dd",
    M: "y-MM-dd – y-MM-dd",
    y: "y-MM-dd – y-MM-dd"
}, _ilvs67 = {
    "0": "текущий квартал",
    "1": "следующий квартал",
    "-1": "последний квартал"
}, _ilvs68 = {
    one: "+{0} мес.",
    few: "+{0} мес.",
    many: "+{0} мес.",
    other: "+{0} мес."
}, _ilvs69 = {
    one: "-{0} мес.",
    few: "-{0} мес.",
    many: "-{0} мес.",
    other: "-{0} мес."
}, _ilvs70 = {
    one: "+{0} нед.",
    few: "+{0} нед.",
    many: "+{0} нед.",
    other: "+{0} нед."
}, _ilvs71 = {
    one: "+{0} мин.",
    few: "+{0} мин.",
    many: "+{0} мин.",
    other: "+{0} мин."
}, _ilvs72 = {
    one: "-{0} мин.",
    few: "-{0} мин.",
    many: "-{0} мин.",
    other: "-{0} мин."
}, _ilvs73 = {
    "0": "в эту пятницу",
    "1": "в следующую пятницу",
    "-1": "в прошлую пятницу"
}, _ilvs74 = {
    "0": "в эту субботу",
    "1": "в следующую субботу",
    "-1": "в прошлую субботу"
}, _ilvs75 = {
    "0": "на этой неделе",
    "1": "на следующей неделе",
    "-1": "на прошлой неделе"
}, _ilvs76 = {
    "0": "в этот вторник",
    "1": "в следующий вторник",
    "-1": "в прошлый вторник"
}, _ilvs77 = {
    "0": "в этот четверг",
    "1": "в следующий четверг",
    "-1": "в прошлый четверг"
}, _ilvs78 = {
    "0": "сегодня",
    "1": "завтра",
    "2": "послезавтра",
    "-2": "позавчера",
    "-1": "вчера"
}, _ilvs79 = {
    abbreviated: {
        leap: "{0}bis"
    },
    narrow: {
        leap: "{0}b"
    },
    wide: {
        leap: "{0}bis"
    }
}, _ilvs80 = {
    d: "dd.MM.y – dd.MM.y G",
    M: "dd.MM.y – dd.MM.y G",
    y: "dd.MM.y – dd.MM.y G"
}, _ilvs81 = {
    relative: _ilvs61
}, _ilvs82 = [ "M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12" ], _ilvs83 = {
    one: "через {0} с",
    few: "через {0} с",
    many: "через {0} с",
    other: "через {0} с"
}, _ilvs84 = {
    one: "{0} с назад",
    few: "{0} с назад",
    many: "{0} с назад",
    other: "{0} с назад"
}, _ilvs85 = [ undefined, "zi", "chou", "yin", "mao", "chen", "si", "wu", "wei", "shen", "you", "xu" ], _ilvs86 = [ "воскресенье", "понедельник", "вторник", "среда", "четверг", "пятница", "суббота" ], _ilvs87 = {
    relative: _ilvs73
}, _ilvs88 = {
    relative: _ilvs74
}, _ilvs89 = {
    one: "через {0} г.",
    few: "через {0} г.",
    many: "через {0} л.",
    other: "через {0} г."
}, _ilvs90 = {
    one: "{0} г. назад",
    few: "{0} г. назад",
    many: "{0} л. назад",
    other: "{0} г. назад"
}, _ilvs91 = {
    one: "через {0} д.",
    few: "через {0} д.",
    many: "через {0} д.",
    other: "через {0} д."
}, _ilvs92 = {
    one: "{0} д. назад",
    few: "{0} д. назад",
    many: "{0} д. назад",
    other: "{0} д. назад"
}, _ilvs93 = {
    one: "через {0} ч.",
    few: "через {0} ч.",
    many: "через {0} ч.",
    other: "через {0} ч."
}, _ilvs94 = {
    one: "{0} ч. назад",
    few: "{0} ч. назад",
    many: "{0} ч. назад",
    other: "{0} ч. назад"
}, _ilvs95 = {
    "0": "в это воскресенье",
    "1": "в следующее воскресенье",
    "-1": "в прошлое воскресенье"
}, _ilvs96 = {
    relative: _ilvs76
}, _ilvs97 = {
    relative: _ilvs77
}, _ilvs98 = {
    "0": "в этот понедельник",
    "1": "в следующий понедельник",
    "-1": "в прошлый понедельник"
}, _ilvs99 = {
    d: "U MMM d, E – MMM d, E",
    M: "U MMM d, E – MMM d, E",
    y: "U MMM d, E – U MMM d, E"
}, _ilvs100 = {
    one: "через {0} кв.",
    few: "через {0} кв.",
    many: "через {0} кв.",
    other: "через {0} кв."
}, _ilvs101 = {
    one: "{0} кв. назад",
    few: "{0} кв. назад",
    many: "{0} кв. назад",
    other: "{0} кв. назад"
}, _ilvs102 = {
    d: "E, dd.MM.y – E, dd.MM.y",
    M: "E, dd.MM.y – E, dd.MM.y",
    y: "E, dd.MM.y – E, dd.MM.y"
}, _ilvs103 = {
    d: "y-MM-dd, E – y-MM-dd, E",
    M: "y-MM-dd, E – y-MM-dd, E",
    y: "y-MM-dd, E – y-MM-dd, E"
}, _ilvs104 = {
    one: "через {0} год",
    few: "через {0} года",
    many: "через {0} лет",
    other: "через {0} года"
}, _ilvs105 = {
    one: "{0} год назад",
    few: "{0} года назад",
    many: "{0} лет назад",
    other: "{0} года назад"
}, _ilvs106 = {
    one: "{0} день назад",
    few: "{0} дня назад",
    many: "{0} дней назад",
    other: "{0} дня назад"
}, _ilvs107 = [ "янв.", "февр.", "мар.", "апр.", "мая", "июн.", "июл.", "авг.", "сент.", "окт.", "нояб.", "дек." ], _ilvs108 = [ "янв.", "февр.", "март", "апр.", "май", "июнь", "июль", "авг.", "сент.", "окт.", "нояб.", "дек." ], _ilvs109 = {
    one: "через {0} день",
    few: "через {0} дня",
    many: "через {0} дней",
    other: "через {0} дней"
}, _ilvs110 = {
    one: "через {0} мес.",
    few: "через {0} мес.",
    many: "через {0} мес.",
    other: "через {0} мес."
}, _ilvs111 = {
    one: "{0} мес. назад",
    few: "{0} мес. назад",
    many: "{0} мес. назад",
    other: "{0} мес. назад"
}, _ilvs112 = {
    one: "через {0} нед.",
    few: "через {0} нед.",
    many: "через {0} нед.",
    other: "через {0} нед."
}, _ilvs113 = {
    one: "{0} нед. назад",
    few: "{0} нед. назад",
    many: "{0} нед. назад",
    other: "{0} нед. назад"
}, _ilvs114 = {
    one: "через {0} час",
    few: "через {0} часа",
    many: "через {0} часов",
    other: "через {0} часа"
}, _ilvs115 = {
    one: "{0} час назад",
    few: "{0} часа назад",
    many: "{0} часов назад",
    other: "{0} часа назад"
}, _ilvs116 = {
    one: "через {0} мин.",
    few: "через {0} мин.",
    many: "через {0} мин.",
    other: "через {0} мин."
}, _ilvs117 = {
    one: "{0} мин. назад",
    few: "{0} мин. назад",
    many: "{0} мин. назад",
    other: "{0} мин. назад"
}, _ilvs118 = {
    one: "через {0} сек.",
    few: "через {0} сек.",
    many: "через {0} сек.",
    other: "через {0} сек."
}, _ilvs119 = {
    one: "{0} сек. назад",
    few: "{0} сек. назад",
    many: "{0} сек. назад",
    other: "{0} сек. назад"
}, _ilvs120 = {
    relative: _ilvs95
}, _ilvs121 = {
    d: "E, d – E, d MMM y 'г'.",
    M: "E, d MMM – E, d MMM y 'г'.",
    y: "E, d MMM y – E, d MMM y 'г'."
}, _ilvs122 = {
    relative: _ilvs98
}, _ilvs123 = {
    one: "через {0} минуту",
    few: "через {0} минуты",
    many: "через {0} минут",
    other: "через {0} минуты"
}, _ilvs124 = {
    one: "{0} минуту назад",
    few: "{0} минуты назад",
    many: "{0} минут назад",
    other: "{0} минуты назад"
}, _ilvs125 = {
    one: "через {0} месяц",
    few: "через {0} месяца",
    many: "через {0} месяцев",
    other: "через {0} месяца"
}, _ilvs126 = {
    one: "{0} месяц назад",
    few: "{0} месяца назад",
    many: "{0} месяцев назад",
    other: "{0} месяца назад"
}, _ilvs127 = {
    one: "через {0} неделю",
    few: "через {0} недели",
    many: "через {0} недель",
    other: "через {0} недели"
}, _ilvs128 = {
    one: "{0} неделю назад",
    few: "{0} недели назад",
    many: "{0} недель назад",
    other: "{0} недели назад"
}, _ilvs129 = {
    one: "через {0} секунду",
    few: "через {0} секунды",
    many: "через {0} секунд",
    other: "через {0} секунды"
}, _ilvs130 = {
    one: "{0} секунду назад",
    few: "{0} секунды назад",
    many: "{0} секунд назад",
    other: "{0} секунды назад"
}, _ilvs131 = [ "Тишрей", "Хешван", "Кислев", "Тевет", "Шеват", "Адар I", "Адар", "Нисан", "Ияр", "Сиван", "Таммуз", "Ав", "Элул" ], _ilvs132 = {
    one: "через {0} квартал",
    few: "через {0} квартала",
    many: "через {0} кварталов",
    other: "через {0} квартала"
}, _ilvs133 = {
    one: "{0} квартал назад",
    few: "{0} квартала назад",
    many: "{0} кварталов назад",
    other: "{0} квартала назад"
}, _ilvs134 = [ "январь", "февраль", "март", "апрель", "май", "июнь", "июль", "август", "сентябрь", "октябрь", "ноябрь", "декабрь" ], _ilvs135 = [ "Тот", "Бабэ", "Хатур", "Кихак", "Тубэ", "Амшир", "Барамхат", "Бармуда", "Башнас", "Бауна", "Абиб", "Мисра", "Наси" ], _ilvs136 = [ "Фарвардин", "Ордибехешт", "Хордад", "Тир", "Мордад", "Шахривер", "Мехр", "Абан", "Азер", "Дей", "Бахман", "Эсфанд" ], _ilvs137 = [ "января", "февраля", "марта", "апреля", "мая", "июня", "июля", "августа", "сентября", "октября", "ноября", "декабря" ], _ilvs138 = {
    midnight: "полн.",
    am: "ДП",
    noon: "полд.",
    pm: "ПП",
    morning1: "утро",
    afternoon1: "день",
    evening1: "веч.",
    night1: "ночь"
}, _ilvs139 = {
    midnight: "полночь",
    am: "ДП",
    noon: "полдень",
    pm: "ПП",
    morning1: "утра",
    afternoon1: "дня",
    evening1: "вечера",
    night1: "ночи"
}, _ilvs140 = {
    midnight: "полночь",
    am: "ДП",
    noon: "полдень",
    pm: "ПП",
    morning1: "утро",
    afternoon1: "день",
    evening1: "вечер",
    night1: "ночь"
}, _ilvs141 = [ "Мескерем", "Текемт", "Хедар", "Тахсас", "Тер", "Якатит", "Магабит", "Миазия", "Генбот", "Сэнэ", "Хамлэ", "Нахасэ", "Эпагомен" ], _ilvs142 = [ "Чайтра", "Ваисакха", "Джанштха", "Асадха", "Сравана", "Бхадра", "Азвина", "Картика", "Аграхайана", "Пауза", "Магха", "Пхалгуна" ], _ilvs143 = {
    future: _ilvs49,
    past: _ilvs50
}, _ilvs144 = {
    future: _ilvs51,
    past: _ilvs52
}, _ilvs145 = {
    future: _ilvs53,
    past: _ilvs54
}, _ilvs146 = {
    abbreviated: _ilvs25,
    narrow: [ "1", "2", "3", "4" ],
    wide: _ilvs44
}, _ilvs147 = {
    future: _ilvs63,
    past: _ilvs64
}, _ilvs148 = {
    future: _ilvs68,
    past: _ilvs69
}, _ilvs149 = {
    future: _ilvs71,
    past: _ilvs72
}, _ilvs150 = [ "Мухаррам", "Сафар", "Раби-уль-авваль", "Раби-уль-ахир", "Джумад-уль-авваль", "Джумад-уль-ахир", "Раджаб", "Шаабан", "Рамадан", "Шавваль", "Зуль-Каада", "Зуль-Хиджжа" ], _ilvs151 = {
    displayName: "г.",
    relativeTime: _ilvs143
}, _ilvs152 = {
    displayName: "ч.",
    relativeTime: _ilvs145
}, _ilvs153 = {
    future: _ilvs83,
    past: _ilvs84
}, _ilvs154 = {
    displayName: "дн.",
    relativeTime: _ilvs144
}, _ilvs155 = {
    future: _ilvs70,
    past: _ilvs113
}, _ilvs156 = {
    future: _ilvs89,
    past: _ilvs90
}, _ilvs157 = {
    future: _ilvs91,
    past: _ilvs92
}, _ilvs158 = {
    future: _ilvs93,
    past: _ilvs94
}, _ilvs159 = {
    future: _ilvs100,
    past: _ilvs101
}, _ilvs160 = {
    abbreviated: _ilvs40,
    narrow: _ilvs40,
    wide: _ilvs40
}, _ilvs161 = {
    displayName: "мес.",
    relativeTime: _ilvs148
}, _ilvs162 = {
    displayName: "мин.",
    relativeTime: _ilvs149
}, _ilvs163 = {
    future: _ilvs104,
    past: _ilvs105
}, _ilvs164 = {
    future: _ilvs109,
    past: _ilvs106
}, _ilvs165 = {
    future: _ilvs110,
    past: _ilvs111
}, _ilvs166 = {
    future: _ilvs112,
    past: _ilvs113
}, _ilvs167 = {
    future: _ilvs114,
    past: _ilvs115
}, _ilvs168 = {
    future: _ilvs116,
    past: _ilvs117
}, _ilvs169 = {
    future: _ilvs118,
    past: _ilvs119
}, _ilvs170 = {
    format: _ilvs79,
    numeric: _ilvs2,
    standAlone: _ilvs79
}, _ilvs171 = {
    displayName: "с",
    relativeTime: _ilvs153
}, _ilvs172 = {
    displayName: "нед.",
    relativeTime: _ilvs155
}, _ilvs173 = {
    future: _ilvs123,
    past: _ilvs124
}, _ilvs174 = {
    abbreviated: _ilvs40,
    narrow: _ilvs40,
    wide: _ilvs82
}, _ilvs175 = {
    displayName: "г.",
    relativeTime: _ilvs156
}, _ilvs176 = {
    future: _ilvs125,
    past: _ilvs126
}, _ilvs177 = {
    future: _ilvs127,
    past: _ilvs128
}, _ilvs178 = {
    displayName: "ч.",
    relativeTime: _ilvs158
}, _ilvs179 = {
    displayName: "дн.",
    relativeTime: _ilvs157
}, _ilvs180 = {
    future: _ilvs129,
    past: _ilvs130
}, _ilvs181 = {
    abbreviated: _ilvs18,
    narrow: _ilvs8,
    wide: _ilvs86,
    "short": _ilvs18
}, _ilvs182 = {
    abbreviated: _ilvs18,
    narrow: _ilvs18,
    wide: _ilvs86,
    "short": _ilvs18
}, _ilvs183 = {
    future: _ilvs132,
    past: _ilvs133
}, _ilvs184 = {
    displayName: "час",
    relativeTime: _ilvs167
}, _ilvs185 = {
    displayName: "мес.",
    relativeTime: _ilvs165
}, _ilvs186 = {
    displayName: "нед.",
    relativeTime: _ilvs166
}, _ilvs187 = {
    displayName: "мин.",
    relativeTime: _ilvs168
}, _ilvs188 = {
    displayName: "сек.",
    relativeTime: _ilvs169
}, _ilvs189 = {
    displayName: "кв.",
    relative: _ilvs27,
    relativeTime: _ilvs147
}, _ilvs190 = {
    displayName: "минута",
    relativeTime: _ilvs173
}, _ilvs191 = {
    abbreviated: _ilvs85,
    narrow: _ilvs85,
    wide: _ilvs85
}, _ilvs192 = {
    format: _ilvs191
}, _ilvs193 = {
    abbreviated: _ilvs108,
    narrow: _ilvs29,
    wide: _ilvs134
}, _ilvs194 = {
    displayName: "секунда",
    relative: [ "сейчас" ],
    relativeTime: _ilvs180
}, _ilvs195 = {
    abbreviated: _ilvs107,
    narrow: _ilvs29,
    wide: _ilvs137
}, _ilvs196 = {
    displayName: "кв.",
    relative: _ilvs42,
    relativeTime: _ilvs159
}, _ilvs197 = {
    displayName: "год",
    relative: _ilvs48,
    relativeTime: _ilvs163
}, _ilvs198 = {
    abbreviated: _ilvs131,
    narrow: _ilvs46,
    wide: _ilvs131
}, _ilvs199 = {
    abbreviated: _ilvs136,
    narrow: _ilvs40,
    wide: _ilvs136
}, _ilvs200 = {
    abbreviated: _ilvs135,
    narrow: _ilvs46,
    wide: _ilvs135
}, _ilvs201 = {
    displayName: "день",
    relative: _ilvs78,
    relativeTime: _ilvs164
}, _ilvs202 = {
    format: _ilvs146,
    standAlone: _ilvs146
}, _ilvs203 = {
    abbreviated: _ilvs141,
    narrow: _ilvs46,
    wide: _ilvs141
}, _ilvs204 = {
    displayName: "месяц",
    relative: _ilvs65,
    relativeTime: _ilvs176
}, _ilvs205 = {
    fullDate: "EEEE, d MMMM U",
    longDate: "d MMMM U",
    mediumDate: "dd.MM U",
    shortDate: "dd.MM.y",
    fullTime: "HH:mm:ss zzzz",
    longTime: "HH:mm:ss z",
    mediumTime: "HH:mm:ss",
    shortTime: "HH:mm",
    shortDateTime: "dd.MM.y HH:mm",
    mediumDateTime: "dd.MM U HH:mm:ss",
    longDateTime: "d MMMM U HH:mm:ss z",
    fullDateTime: "EEEE, d MMMM U HH:mm:ss zzzz"
}, _ilvs206 = {
    abbreviated: _ilvs142,
    narrow: _ilvs40,
    wide: _ilvs142
}, _ilvs207 = {
    displayName: "неделя",
    relative: _ilvs75,
    relativeTime: _ilvs177
}, _ilvs208 = {
    displayName: "квартал",
    relative: _ilvs67,
    relativeTime: _ilvs183
}, _ilvs209 = {
    abbreviated: _ilvs138,
    narrow: _ilvs138,
    wide: _ilvs140
}, _ilvs210 = {
    fullDate: "EEEE, d MMMM y 'г'. G",
    longDate: "d MMMM y 'г'. G",
    mediumDate: "d MMM y 'г'. G",
    shortDate: "dd.MM.y G",
    fullTime: "HH:mm:ss zzzz",
    longTime: "HH:mm:ss z",
    mediumTime: "HH:mm:ss",
    shortTime: "HH:mm",
    shortDateTime: "dd.MM.y G, HH:mm",
    mediumDateTime: "d MMM y 'г'. G, HH:mm:ss",
    longDateTime: "d MMMM y 'г'. G, HH:mm:ss z",
    fullDateTime: "EEEE, d MMMM y 'г'. G, HH:mm:ss zzzz"
}, _ilvs211 = {
    abbreviated: _ilvs139,
    narrow: _ilvs139,
    wide: _ilvs139
}, _ilvs212 = {
    abbreviated: _ilvs150,
    narrow: _ilvs40,
    wide: _ilvs150
}, _ilvs213 = {
    format: _ilvs174,
    standAlone: _ilvs160
}, _ilvs214 = {
    basic: _ilvs210,
    cldr: P.calendars.buddhist.dateFormats
}, _ilvs215 = {
    format: _ilvs182,
    standAlone: _ilvs181
}, _ilvs216 = {
    d: "d",
    E: "ccc",
    Ed: "E, d",
    Gy: "U",
    GyMMM: "LLL U",
    GyMMMd: "d MMM U",
    GyMMMEd: "E, d MMM U",
    h: "h a",
    H: "H",
    hm: "h:mm a",
    Hm: "H:mm",
    hms: "h:mm:ss a",
    Hms: "H:mm:ss",
    M: "L",
    Md: "dd.MM",
    MEd: "E, dd.MM",
    MMM: "LLL",
    MMMd: "d MMM",
    MMMEd: "ccc, d MMM",
    ms: "mm:ss",
    y: "U",
    yyyy: "U",
    yyyyM: "MM.y",
    yyyyMd: "dd.MM.y",
    yyyyMEd: "E, dd.MM.y",
    yyyyMMM: "LLL U",
    yyyyMMMd: "d MMM U",
    yyyyMMMEd: "E, d MMM U",
    yyyyMMMM: "LLLL U",
    yyyyQQQ: "QQQ U",
    yyyyQQQQ: "QQQQ U",
    MMMMd: "MMMM d",
    UM: "U MM",
    UMd: "U MM-d",
    UMMM: "U MMM",
    UMMMd: "U MMM d",
    yMd: "r-MM-dd"
}, _ilvs217 = {
    format: _ilvs195,
    standAlone: _ilvs193
}, _ilvs218 = [ undefined, "jia-zi", "yi-chou", "bing-yin", "ding-mao", "wu-chen", "ji-si", "geng-wu", "xin-wei", "ren-shen", "gui-you", "jia-xu", "yi-hai", "bing-zi", "ding-chou", "wu-yin", "ji-mao", "geng-chen", "xin-si", "ren-wu", "gui-wei", "jia-shen", "yi-you", "bing-xu", "ding-hai", "wu-zi", "ji-chou", "geng-yin", "xin-mao", "ren-chen", "gui-si", "jia-wu", "yi-wei", "bing-shen", "ding-you", "wu-xu", "ji-hai", "geng-zi", "xin-chou", "ren-yin", "gui-mao", "jia-chen", "yi-si", "bing-wu", "ding-wei", "wu-shen", "ji-you", "geng-xu", "xin-hai", "ren-zi", "gui-chou", "jia-yin", "yi-mao", "bing-chen", "ding-si", "wu-wu", "ji-wei", "geng-shen", "xin-you", "ren-xu" ], _ilvs219 = {
    format: _ilvs211,
    standAlone: _ilvs209
}, _ilvs220 = {
    format: _ilvs212,
    standAlone: _ilvs212
}, _ilvs221 = {
    basic: _ilvs205,
    cldr: _ilvs216
}, _ilvs222 = {
    d: {
        d: "d–d"
    },
    h: _ilvs3,
    H: {
        H: "HH–HH"
    },
    hm: _ilvs41,
    Hm: _ilvs15,
    hmv: _ilvs47,
    Hmv: _ilvs22,
    hv: _ilvs9,
    Hv: {
        H: "HH–HH v"
    },
    M: {
        M: "MM–MM"
    },
    Md: _ilvs23,
    MEd: _ilvs30,
    MMM: {
        M: "LLL–LLL"
    },
    MMMd: _ilvs11,
    MMMEd: _ilvs31,
    y: {
        y: "U–U"
    },
    yM: _ilvs16,
    yMd: _ilvs66,
    yMEd: _ilvs103,
    yMMM: _ilvs17,
    yMMMd: _ilvs45,
    yMMMEd: _ilvs99,
    yMMMM: _ilvs24
}, _ilvs223 = {
    h: {
        h: "h–h 'ч'. a"
    },
    H: {
        H: "HH–HH 'ч'."
    },
    hv: {
        h: "h–h 'ч'. a, v"
    },
    Hv: {
        H: "HH–HH 'ч'., v"
    },
    MMMEd: _ilvs26,
    yMEd: _ilvs102,
    yMMM: _ilvs13,
    yMMMd: _ilvs43,
    yMMMEd: _ilvs121,
    yMMMM: _ilvs19,
    d: {
        d: "d–d"
    },
    hm: _ilvs41,
    Hm: _ilvs7,
    hmv: _ilvs47,
    Hmv: _ilvs14,
    M: {
        M: "M–M"
    },
    Md: _ilvs20,
    MEd: _ilvs28,
    MMM: {
        M: "LLL–LLL"
    },
    MMMd: _ilvs10,
    MMMM: {
        M: "LLLL–LLLL"
    },
    y: {
        y: "y–y G"
    },
    yM: _ilvs21,
    yMd: _ilvs80
}, _ilvs224 = {
    abbreviated: _ilvs218,
    narrow: _ilvs218,
    wide: _ilvs218
}, _ilvs225 = {
    format: _ilvs224
}, _ilvs226 = [ "Эпоха Тайка (645–650)", "Эпоха Хакути (650–671)", "Эпоха Хакухо (672–686)", "Эпоха Сючё (686–701)", "Эпоха Тайхо (701–704)", "Эпоха Кёюн (704–708)", "Эпоха Вадо (708–715)", "Эпоха Рэйки (715–717)", "Эпоха Ёро (717–724)", "Эпоха Дзинки (724–729)", "Эпоха Темпьё (729–749)", "Эпоха Темпьё (749–749)", "Эпоха Темпьё-Сьохо (749-757)", "Эпоха Темпьё-Ходзи (757-765)", "Эпоха Темпьё-Ходзи (765-767)", "Эпоха Джинго-Кёюн (767-770)", "Эпоха Хоки (770–780)", "Эпоха Теньё (781–782)", "Эпоха Енряку (782–806)", "Эпоха Дайдо (806–810)", "Эпоха Конин (810–824)", "Эпоха Тентьо (824–834)", "Эпоха Шова (834–848)", "Эпоха Кайо (848–851)", "Эпоха Ниндзю (851–854)", "Эпоха Сайко (854–857)", "Эпоха Теннан (857–859)", "Эпоха Йоган (859–877)", "Эпоха Генкей (877–885)", "Эпоха Нинна (885–889)", "Эпоха Кампьё (889–898)", "Эпоха Сьотай (898–901)", "Эпоха Энги (901–923)", "Эпоха Ентьо (923–931)", "Эпоха Сьёхэй (931–938)", "Эпоха Тенгьо (938–947)", "Эпоха Тенрияку (947–957)", "Эпоха Тентоку (957–961)", "Эпоха Ова (961–964)", "Эпоха Кохо (964–968)", "Эпоха Анна (968–970)", "Эпоха Тенроку (970–973)", "Эпоха Теньен (973–976)", "Эпоха Дзьоген (976–978)", "Эпоха Тенген (978–983)", "Эпоха Ейкан (983–985)", "Эпоха Канна (985–987)", "Эпоха Ейен (987–989)", "Эпоха Ейсо (989–990)", "Эпоха Сёряку (990–995)", "Эпоха Тётоку (995–999)", "Эпоха Тёхо (999–1004)", "Эпоха Канко (1004–1012)", "Эпоха Тёва (1012–1017)", "Эпоха Каннин (1017–1021)", "Эпоха Дзиан (1021–1024)", "Эпоха Мандзю (1024–1028)", "Эпоха Тёгэн (1028–1037)", "Эпоха Тёряку (1037–1040)", "Эпоха Тёкю (1040–1044)", "Эпоха Катоку (1044–1046)", "Эпоха Эйсо (1046–1053)", "Эпоха Тэнги (1053–1058)", "Эпоха Кохэй (1058–1065)", "Эпоха Дзиряку (1065–1069)", "Эпоха Энкю (1069–1074)", "Эпоха Сёхо (1074–1077)", "Эпоха Сёряку (1077–1081)", "Эпоха Эйхо (1081–1084)", "Эпоха Отоку (1084–1087)", "Эпоха Кандзи (1087–1094)", "Эпоха Кахо (1094–1096)", "Эпоха Эйтё (1096–1097)", "Эпоха Сётоку (1097–1099)", "Эпоха Кова (1099–1104)", "Эпоха Тёдзи (1104–1106)", "Эпоха Касё (1106–1108)", "Эпоха Тэннин (1108–1110)", "Эпоха Тэнъэй (1110–1113)", "Эпоха Эйкю (1113–1118)", "Эпоха Гэнъэй (1118–1120)", "Эпоха Хоан (1120–1124)", "Эпоха Тэндзи (1124–1126)", "Эпоха Дайдзи (1126–1131)", "Эпоха Тэнсё (1131–1132)", "Эпоха Тёсё (1132–1135)", "Эпоха Хоэн (1135–1141)", "Эпоха Эйдзи (1141–1142)", "Эпоха Кодзи (1142–1144)", "Эпоха Тэнё (1144–1145)", "Эпоха Кюан (1145–1151)", "Эпоха Нимпэй (1151–1154)", "Эпоха Кюдзю (1154–1156)", "Эпоха Хогэн (1156–1159)", "Эпоха Хэйдзи (1159–1160)", "Эпоха Эйряку (1160–1161)", "Эпоха Охо (1161–1163)", "Эпоха Тёкан (1163–1165)", "Эпоха Эйман (1165–1166)", "Эпоха Нинъан (1166–1169)", "Эпоха Као (1169–1171)", "Эпоха Сёан (1171–1175)", "Эпоха Ангэн (1175–1177)", "Эпоха Дзисё (1177–1181)", "Эпоха Ёва (1181–1182)", "Эпоха Дзюэй (1182–1184)", "Эпоха Гэнрюку (1184–1185)", "Эпоха Бундзи (1185–1190)", "Эпоха Кэнкю (1190–1199)", "Эпоха Сёдзи (1199–1201)", "Эпоха Кэннин (1201–1204)", "Эпоха Гэнкю (1204–1206)", "Эпоха Кэнъэй (1206–1207)", "Эпоха Сёгэн (1207–1211)", "Эпоха Кэнряку (1211–1213)", "Эпоха Кэмпо (1213–1219)", "Эпоха Сёкю (1219–1222)", "Эпоха Дзёо (1222–1224)", "Эпоха Гэннин (1224–1225)", "Эпоха Кароку (1225–1227)", "Эпоха Антэй (1227–1229)", "Эпоха Канки (1229–1232)", "Эпоха Дзёэй (1232–1233)", "Эпоха Тэмпуку (1233–1234)", "Эпоха Бунряку (1234–1235)", "Эпоха Катэй (1235–1238)", "Эпоха Рякунин (1238–1239)", "Эпоха Энъо (1239–1240)", "Эпоха Ниндзи (1240–1243)", "Эпоха Кангэн (1243–1247)", "Эпоха Ходзи (1247–1249)", "Эпоха Кэнтё (1249–1256)", "Эпоха Когэн (1256–1257)", "Эпоха Сёка (1257–1259)", "Эпоха Сёгэн (1259–1260)", "Эпоха Бунъо (1260–1261)", "Эпоха Котё (1261–1264)", "Эпоха Бунъэй (1264–1275)", "Эпоха Кэндзи (1275–1278)", "Эпоха Коан (1278–1288)", "Эпоха Сёо (1288–1293)", "Эпоха Эйнин (1293–1299)", "Эпоха Сёан (1299–1302)", "Эпоха Кэнгэн (1302–1303)", "Эпоха Кагэн (1303–1306)", "Эпоха Токудзи (1306–1308)", "Эпоха Энкэй (1308–1311)", "Эпоха Отё (1311–1312)", "Эпоха Сёва (1312–1317)", "Эпоха Бумпо (1317–1319)", "Эпоха Гэно (1319–1321)", "Эпоха Гэнкё (1321–1324)", "Эпоха Сётю (1324–1326)", "Эпоха Карэки (1326–1329)", "Эпоха Гэнтоку (1329–1331)", "Эпоха Гэнко (1331–1334)", "Эпоха Кэмму (1334–1336)", "Эпоха Энгэн (1336–1340)", "Эпоха Кококу (1340–1346)", "Эпоха Сёхэй (1346–1370)", "Эпоха Кэнтоку (1370–1372)", "Эпоха Бунтю (1372–1375)", "Эпоха Иэндзю (1375–1379)", "Эпоха Коряку (1379–1381)", "Эпоха Кова (1381–1384)", "Эпоха Гэнтю (1384–1392)", "Эпоха Мэйтоку (1384–1387)", "Эпоха Какэй (1387–1389)", "Эпоха Коо (1389–1390)", "Эпоха Мэйтоку (1390–1394)", "Эпоха Оэй (1394–1428)", "Эпоха Сётё (1428–1429)", "Эпоха Эйкё (1429–1441)", "Эпоха Какицу (1441–1444)", "Эпоха Банъан (1444–1449)", "Эпоха Хотоку (1449–1452)", "Эпоха Кётоку (1452–1455)", "Эпоха Косё (1455–1457)", "Эпоха Тёроку (1457–1460)", "Эпоха Кансё (1460–1466)", "Эпоха Бунсё (1466–1467)", "Эпоха Онин (1467–1469)", "Эпоха Буммэй (1469–1487)", "Эпоха Тёкё (1487–1489)", "Эпоха Энтоку (1489–1492)", "Эпоха Мэйо (1492–1501)", "Эпоха Бунки (1501–1504)", "Эпоха Эйсё (1504–1521)", "Эпоха Тайэй (1521–1528)", "Эпоха Кёроку (1528–1532)", "Эпоха Тэммон (1532–1555)", "Эпоха Кодзи (1555–1558)", "Эпоха Эйроку (1558–1570)", "Эпоха Гэнки (1570–1573)", "Эпоха Тэнсё (1573–1592)", "Эпоха Бунроку (1592–1596)", "Эпоха Кэйтё (1596–1615)", "Эпоха Гэнва (1615–1624)", "Эпоха Канъэй (1624–1644)", "Эпоха Сёхо (1644–1648)", "Эпоха Кэйан (1648–1652)", "Эпоха Сё (1652–1655)", "Эпоха Мэйряку (1655–1658)", "Эпоха Мандзи (1658–1661)", "Эпоха Камбун (1661–1673)", "Эпоха Эмпо (1673–1681)", "Эпоха Тэнва (1681–1684)", "Эпоха Дзёкё (1684–1688)", "Эпоха Гэнроку (1688–1704)", "Эпоха Хоэй (1704–1711)", "Эпоха Сётоку (1711–1716)", "Эпоха Кёхо (1716–1736)", "Эпоха Гэмбун (1736–1741)", "Эпоха Кампо (1741–1744)", "Эпоха Энкё (1744–1748)", "Эпоха Канъэн (1748–1751)", "Эпоха Хоряку (1751–1764)", "Эпоха Мэйва (1764–1772)", "Эпоха Анъэй (1772–1781)", "Эпоха Тэммэй (1781–1789)", "Эпоха Кансэй (1789–1801)", "Эпоха Кёва (1801–1804)", "Эпоха Бунка (1804–1818)", "Эпоха Бунсэй (1818–1830)", "Эпоха Тэмпо (1830–1844)", "Эпоха Кока (1844–1848)", "Эпоха Каэй (1848–1854)", "Эпоха Ансэй (1854–1860)", "Эпоха Манъэн (1860–1861)", "Эпоха Бункю (1861–1864)", "Эпоха Гендзи (1864–1865)", "Эпоха Кейо (1865–1868)", "Эпоха Мэйдзи", "Эпоха Тайсьо", "Сьова", "Эпоха Хэйсэй" ], _ilvs227 = {
    dayParts: _ilvs192,
    days: _ilvs225,
    months: _ilvs225,
    years: _ilvs225,
    zodiacs: _ilvs192
}, _ilvs228 = {
    era: {
        displayName: "эра"
    },
    year: _ilvs197,
    "year-short": _ilvs175,
    "year-narrow": _ilvs151,
    quarter: _ilvs208,
    "quarter-short": _ilvs196,
    "quarter-narrow": _ilvs189,
    month: _ilvs204,
    "month-short": _ilvs185,
    "month-narrow": _ilvs161,
    week: _ilvs207,
    "week-short": _ilvs186,
    "week-narrow": _ilvs172,
    day: _ilvs201,
    "day-short": _ilvs179,
    "day-narrow": _ilvs154,
    weekday: _ilvs5,
    dayperiod: _ilvs1,
    hour: _ilvs184,
    "hour-short": _ilvs178,
    "hour-narrow": _ilvs152,
    minute: _ilvs190,
    "minute-short": _ilvs187,
    "minute-narrow": _ilvs162,
    second: _ilvs194,
    "second-short": _ilvs188,
    "second-narrow": _ilvs171,
    zone: _ilvs6,
    sun: _ilvs120,
    "sun-short": _ilvs55,
    "sun-narrow": _ilvs55,
    mon: _ilvs122,
    "mon-short": _ilvs59,
    "mon-narrow": _ilvs59,
    tue: _ilvs96,
    "tue-short": _ilvs60,
    "tue-narrow": _ilvs60,
    wed: _ilvs81,
    "wed-short": _ilvs56,
    "wed-narrow": _ilvs56,
    thu: _ilvs97,
    "thu-short": _ilvs62,
    "thu-narrow": _ilvs62,
    fri: _ilvs87,
    "fri-short": _ilvs57,
    "fri-narrow": _ilvs57,
    sat: _ilvs88,
    "sat-short": _ilvs58,
    "sat-narrow": _ilvs58
}, _ilvs229 = {
    dateFormats: {
        basic: {},
        cldr: {}
    },
    fields: _ilvs228
}, _ilvs230 = {
    dateFormats: _ilvs214,
    datePartsOrder: "dmy",
    dateIntervalFormats: _ilvs223,
    dateIntervalFallbackFormat: "{0} - {1}",
    dayNames: _ilvs215,
    dayPeriods: _ilvs219,
    monthNames: _ilvs220,
    eraNames: _ilvs12,
    quarterNames: _ilvs202,
    fields: _ilvs228
}, _ilvs231 = {
    dateFormats: _ilvs221,
    datePartsOrder: "dmy",
    dateIntervalFormats: _ilvs222,
    dateIntervalFallbackFormat: "{0} – {1}",
    dayNames: _ilvs215,
    dayPeriods: _ilvs219,
    cyclicNames: _ilvs227,
    monthNames: _ilvs213,
    monthPatterns: _ilvs170,
    quarterNames: _ilvs202,
    fields: _ilvs228
};

inter.id = "ru_ua";

inter.calendars = {
    buddhist: {
        dateFormats: _ilvs214,
        datePartsOrder: "dmy",
        dateIntervalFormats: _ilvs223,
        dateIntervalFallbackFormat: "{0} - {1}",
        dayNames: _ilvs215,
        dayPeriods: _ilvs219,
        monthNames: _ilvs217,
        eraNames: {
            wide: [ "BE" ],
            abbreviated: [ "BE" ]
        },
        quarterNames: _ilvs202,
        fields: _ilvs228
    },
    chinese: _ilvs231,
    coptic: {
        dateFormats: _ilvs214,
        datePartsOrder: "dmy",
        dateIntervalFormats: _ilvs223,
        dateIntervalFallbackFormat: "{0} - {1}",
        dayNames: _ilvs215,
        dayPeriods: _ilvs219,
        monthNames: {
            format: _ilvs200,
            standAlone: _ilvs200
        },
        eraNames: _ilvs36,
        quarterNames: _ilvs202,
        fields: _ilvs228
    },
    dangi: _ilvs231,
    ethioaa: _ilvs229,
    ethiopic: {
        dateFormats: _ilvs214,
        datePartsOrder: "dmy",
        dateIntervalFormats: _ilvs223,
        dateIntervalFallbackFormat: "{0} - {1}",
        dayNames: _ilvs215,
        dayPeriods: _ilvs219,
        monthNames: {
            format: _ilvs203,
            standAlone: _ilvs203
        },
        eraNames: _ilvs36,
        quarterNames: _ilvs202,
        fields: _ilvs228
    },
    gregorian: {
        dateFormats: {
            basic: {
                fullDate: "EEEE, d MMMM y 'г'.",
                longDate: "d MMMM y 'г'.",
                mediumDate: "d MMM y 'г'.",
                shortDate: "dd.MM.yy",
                fullTime: "HH:mm:ss zzzz",
                longTime: "HH:mm:ss z",
                mediumTime: "HH:mm:ss",
                shortTime: "HH:mm",
                shortDateTime: "dd.MM.yy, HH:mm",
                mediumDateTime: "d MMM y 'г'., HH:mm:ss",
                longDateTime: "d MMMM y 'г'., HH:mm:ss z",
                fullDateTime: "EEEE, d MMMM y 'г'., HH:mm:ss zzzz"
            },
            cldr: {
                d: "d",
                E: "ccc",
                Ed: "ccc, d",
                Ehm: "E h:mm a",
                EHm: "E HH:mm",
                Ehms: "E h:mm:ss a",
                EHms: "E HH:mm:ss",
                Gy: "y 'г'. G",
                GyMMM: "LLL y G",
                GyMMMd: "d MMM y 'г'. G",
                GyMMMEd: "E, d MMM y 'г'. G",
                h: "h a",
                H: "H",
                hm: "h:mm a",
                Hm: "H:mm",
                hms: "h:mm:ss a",
                Hms: "H:mm:ss",
                hmsv: "h:mm:ss a v",
                Hmsv: "H:mm:ss v",
                hmv: "h:mm a v",
                Hmv: "H:mm v",
                M: "L",
                Md: "dd.MM",
                MEd: "E, dd.MM",
                MMdd: "dd.MM",
                MMM: "LLL",
                MMMd: "d MMM",
                MMMEd: "ccc, d MMM",
                MMMMd: "d MMMM",
                ms: "mm:ss",
                y: "y",
                yM: "MM.y",
                yMd: "dd.MM.y",
                yMEd: "ccc, d.MM.y 'г'.",
                yMM: "MM.y",
                yMMM: "LLL y 'г'.",
                yMMMd: "d MMM y 'г'.",
                yMMMEd: "E, d MMM y 'г'.",
                yMMMM: "LLLL y 'г'.",
                yQQQ: "QQQ y 'г'.",
                yQQQQ: "QQQQ y 'г'."
            }
        },
        datePartsOrder: "dmy",
        dateIntervalFormats: {
            h: {
                h: "h–h 'ч'. a"
            },
            H: {
                H: "HH–HH 'ч'."
            },
            hv: {
                h: "h–h 'ч'. a, v"
            },
            Hv: {
                H: "HH–HH 'ч'., v"
            },
            MMMEd: {
                d: "E, d – E, d MMM"
            },
            yMEd: _ilvs102,
            yMMM: _ilvs13,
            yMMMd: _ilvs43,
            yMMMEd: _ilvs121,
            yMMMM: _ilvs19,
            d: {
                d: "d–d"
            },
            hm: _ilvs41,
            Hm: _ilvs7,
            hmv: _ilvs47,
            Hmv: _ilvs14,
            M: {
                M: "M–M"
            },
            Md: _ilvs20,
            MEd: _ilvs28,
            MMM: {
                M: "LLL – LLL"
            },
            MMMd: _ilvs10,
            MMMM: {
                M: "LLLL – LLLL"
            },
            y: {
                y: "y–y"
            },
            yM: {
                M: "MM.y – MM.y",
                y: "MM.y – MM.y"
            },
            yMd: {
                d: "dd.MM.y – dd.MM.y",
                M: "dd.MM.y – dd.MM.y",
                y: "dd.MM.y – dd.MM.y"
            }
        },
        dateIntervalFallbackFormat: "{0} - {1}",
        dayNames: _ilvs215,
        dayPeriods: _ilvs219,
        monthNames: _ilvs217,
        eraNames: {
            wide: [ "до Рождества Христова", "от Рождества Христова" ],
            abbreviated: [ "до н. э.", "н. э." ]
        },
        quarterNames: _ilvs202,
        fields: _ilvs228
    },
    hebrew: {
        dateFormats: _ilvs214,
        datePartsOrder: "dmy",
        dateIntervalFormats: _ilvs223,
        dateIntervalFallbackFormat: "{0} - {1}",
        dayNames: _ilvs215,
        dayPeriods: _ilvs219,
        monthNames: {
            format: _ilvs198,
            standAlone: _ilvs198
        },
        eraNames: {
            wide: [ "AM" ],
            abbreviated: [ "AM" ]
        },
        quarterNames: _ilvs202,
        fields: _ilvs228
    },
    indian: {
        dateFormats: _ilvs214,
        datePartsOrder: "dmy",
        dateIntervalFormats: _ilvs223,
        dateIntervalFallbackFormat: "{0} - {1}",
        dayNames: _ilvs215,
        dayPeriods: _ilvs219,
        monthNames: {
            format: _ilvs206,
            standAlone: _ilvs206
        },
        eraNames: {
            wide: [ "Saka" ],
            abbreviated: [ "Saka" ]
        },
        quarterNames: _ilvs202,
        fields: _ilvs228
    },
    islamic: _ilvs230,
    "islamic-umalqura": _ilvs230,
    "islamic-tbla": _ilvs230,
    "islamic-civil": _ilvs230,
    "islamic-rgsa": _ilvs230,
    iso8601: _ilvs229,
    japanese: {
        dateFormats: _ilvs214,
        datePartsOrder: "dmy",
        dateIntervalFormats: _ilvs223,
        dateIntervalFallbackFormat: "{0} - {1}",
        dayNames: _ilvs215,
        dayPeriods: _ilvs219,
        monthNames: _ilvs217,
        eraNames: {
            wide: _ilvs226,
            abbreviated: _ilvs226
        },
        quarterNames: _ilvs202,
        fields: _ilvs228
    },
    persian: {
        dateFormats: _ilvs214,
        datePartsOrder: "dmy",
        dateIntervalFormats: _ilvs223,
        dateIntervalFallbackFormat: "{0} - {1}",
        dayNames: _ilvs215,
        dayPeriods: _ilvs219,
        monthNames: {
            format: _ilvs199,
            standAlone: _ilvs199
        },
        eraNames: {
            wide: [ "AP" ],
            abbreviated: [ "AP" ]
        },
        quarterNames: _ilvs202,
        fields: _ilvs228
    },
    roc: {
        dateFormats: _ilvs214,
        datePartsOrder: "dmy",
        dateIntervalFormats: _ilvs223,
        dateIntervalFallbackFormat: "{0} - {1}",
        dayNames: _ilvs215,
        dayPeriods: _ilvs219,
        monthNames: _ilvs217,
        eraNames: {
            wide: _ilvs4,
            abbreviated: _ilvs4
        },
        quarterNames: _ilvs202,
        fields: _ilvs228
    },
    islamicc: _ilvs229
};

inter.pluralRule = function(n) {
    var i = Math.floor(Math.abs(n)), v = n.toString().replace(/^[^.]*\.?/, "").length;
    if (typeof n === "string") n = parseInt(n, 10);
    if (v === 0 && i % 10 === 1 && !(i % 100 === 11)) return "one";
    if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 && !(i % 100 >= 12 && i % 100 <= 14)) return "few";
    if (v === 0 && (i % 10 === 0 || v === 0 && (i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 || v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 11 && i % 100 <= 14))) return "many";
    return "other";
};

inter.renderDigitsOrdinal = function(n) {
    if (n < 0) return "−" + this.renderDigitsOrdinal(-n);
    if (n >= 0) return this.renderNumber(n, "#,##0") + ".";
};

inter.renderSpelloutNumbering = function(n) {
    if (n < 0) return "−" + this.renderSpelloutNumbering(-n);
    if (n >= 0) return this.renderSpelloutCardinalMasculine(n);
};

inter.renderArmenianUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderArmenianUpper(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e4) return this.renderNumber(n, "#,##0");
    if (n >= 9e3) return "Ք" + (n === 9e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 8e3) return "Փ" + (n === 8e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 7e3) return "Ւ" + (n === 7e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 6e3) return "Ց" + (n === 6e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 5e3) return "Ր" + (n === 5e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 4e3) return "Տ" + (n === 4e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 3e3) return "Վ" + (n === 3e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 2e3) return "Ս" + (n === 2e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 1e3) return "Ռ" + (n === 1e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 900) return "Ջ" + (n === 900 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 800) return "Պ" + (n === 800 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 700) return "Չ" + (n === 700 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 600) return "Ո" + (n === 600 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 500) return "Շ" + (n === 500 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 400) return "Ն" + (n === 400 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 300) return "Յ" + (n === 300 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 200) return "Մ" + (n === 200 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 100) return "Ճ" + (n === 100 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 90) return "Ղ" + (n === 90 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 80) return "Ձ" + (n === 80 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 70) return "Հ" + (n === 70 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 60) return "Կ" + (n === 60 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 50) return "Ծ" + (n === 50 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 40) return "Խ" + (n === 40 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 30) return "Լ" + (n === 30 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 20) return "Ի" + (n === 20 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 10) return "Ժ" + (n === 10 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 9) return "Թ";
    if (n >= 8) return "Ը";
    if (n >= 7) return "Է";
    if (n >= 6) return "Զ";
    if (n >= 5) return "Ե";
    if (n >= 4) return "Դ";
    if (n >= 3) return "Գ";
    if (n >= 2) return "Բ";
    if (n >= 1) return "Ա";
    if (n >= 0) return "0";
};

inter.renderArmenianLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderArmenianLower(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e4) return this.renderNumber(n, "#,##0");
    if (n >= 9e3) return "ք" + (n === 9e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 8e3) return "փ" + (n === 8e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 7e3) return "ւ" + (n === 7e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 6e3) return "ց" + (n === 6e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 5e3) return "ր" + (n === 5e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 4e3) return "տ" + (n === 4e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 3e3) return "վ" + (n === 3e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 2e3) return "ս" + (n === 2e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 1e3) return "ռ" + (n === 1e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 900) return "ջ" + (n === 900 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 800) return "պ" + (n === 800 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 700) return "չ" + (n === 700 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 600) return "ո" + (n === 600 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 500) return "շ" + (n === 500 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 400) return "ն" + (n === 400 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 300) return "յ" + (n === 300 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 200) return "մ" + (n === 200 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 100) return "ճ" + (n === 100 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 90) return "ղ" + (n === 90 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 80) return "ձ" + (n === 80 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 70) return "հ" + (n === 70 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 60) return "կ" + (n === 60 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 50) return "ծ" + (n === 50 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 40) return "խ" + (n === 40 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 30) return "լ" + (n === 30 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 20) return "ի" + (n === 20 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 10) return "ժ" + (n === 10 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 9) return "թ";
    if (n >= 8) return "ը";
    if (n >= 7) return "է";
    if (n >= 6) return "զ";
    if (n >= 5) return "ե";
    if (n >= 4) return "դ";
    if (n >= 3) return "գ";
    if (n >= 2) return "բ";
    if (n >= 1) return "ա";
    if (n >= 0) return "0";
};

inter.renderCyrillicLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderCyrillicLower(-n);
    if (isFractional && n > 1) return this.renderCyrillicLower(Math.floor(n)) + "." + this.renderCyrillicLower(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e15) return "҂҂҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e15)) + (n === 1e15 ? "" : " " + this.renderCyrillicLower(n % 1e15));
    if (n >= 1e12) return "҂҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e12)) + (n === 1e12 ? "" : " " + this.renderCyrillicLower(n % 1e12));
    if (n >= 1e9) return "҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e9)) + (n === 1e9 ? "" : " " + this.renderCyrillicLower(n % 1e9));
    if (n >= 1e6) return "҂҂" + this.renderCyrillicLower(Math.floor(n / 1e6)) + (n === 1e6 ? "" : " " + this.renderCyrillicLower(n % 1e6));
    if (n >= 11e3) return this.renderCyrillicLowerThousands(Math.floor(n / 1e4)) + (n === 11e3 ? "" : " " + this.renderCyrillicLower(n % 1e4));
    if (n >= 1e4) return "҂" + this.renderCyrillicLower(Math.floor(n / 1e4)) + (n === 1e4 ? "" : " " + this.renderCyrillicLower(n % 1e4));
    if (n >= 1e3) return "҂" + this.renderCyrillicLower110(Math.floor(n / 1e3)) + this.renderCyrillicLowerPost(n % 1e3);
    if (n >= 900) return "ц" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 801) return "ѿ" + this.renderCyrillicLower(n % 100);
    if (n >= 800) return "ѿ҃";
    if (n >= 700) return "ѱ" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 600) return "х" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 500) return "ф" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 400) return "у" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 300) return "т" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 200) return "с" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 100) return "р" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 90) return "ч" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 80) return "п" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 70) return "ѻ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 60) return "ѯ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 50) return "н" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 40) return "м" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 30) return "л" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 20) return "к" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 19) return "ѳ҃і";
    if (n >= 18) return "и҃і";
    if (n >= 17) return "з҃і";
    if (n >= 16) return "ѕ҃і";
    if (n >= 15) return "є҃і";
    if (n >= 14) return "д҃і";
    if (n >= 13) return "г҃і";
    if (n >= 12) return "в҃і";
    if (n >= 11) return "а҃і";
    if (n >= 1) return this.renderCyrillicLower110(n) + "҃";
    if (n >= 0) return "0҃";
};

inter.renderEthiopic = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderEthiopic(-n);
    if (isFractional && n > 1) return this.renderEthiopic(Math.floor(n)) + "፡" + this.renderEthiopic(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,###0");
    if (n >= 2e16) return this.renderEthiopic(Math.floor(n / 1e16)) + "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 1e16) return "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 2e12) return this.renderEthiopic(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1e12) return "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 2e8) return this.renderEthiopic(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1e8) return "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 2e4) return this.renderEthiopic(Math.floor(n / 1e4)) + "፼" + (n === 2e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 1e4) return "፼" + (n === 1e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 200) return this.renderEthiopic(Math.floor(n / 100)) + "፻" + (n === 200 ? "" : this.renderEthiopic(n % 100));
    if (n >= 100) return "፻" + (n === 100 ? "" : this.renderEthiopic(n % 100));
    if (n >= 90) return "፺" + (n === 90 ? "" : this.renderEthiopic(n % 10));
    if (n >= 80) return "፹" + (n === 80 ? "" : this.renderEthiopic(n % 10));
    if (n >= 70) return "፸" + (n === 70 ? "" : this.renderEthiopic(n % 10));
    if (n >= 60) return "፷" + (n === 60 ? "" : this.renderEthiopic(n % 10));
    if (n >= 50) return "፶" + (n === 50 ? "" : this.renderEthiopic(n % 10));
    if (n >= 40) return "፵" + (n === 40 ? "" : this.renderEthiopic(n % 10));
    if (n >= 30) return "፴" + (n === 30 ? "" : this.renderEthiopic(n % 10));
    if (n >= 20) return "፳" + (n === 20 ? "" : this.renderEthiopic(n % 10));
    if (n >= 10) return "፲" + (n === 10 ? "" : this.renderEthiopic(n % 10));
    if (n >= 9) return "፱";
    if (n >= 8) return "፰";
    if (n >= 7) return "፯";
    if (n >= 6) return "፮";
    if (n >= 5) return "፭";
    if (n >= 4) return "፬";
    if (n >= 3) return "፫";
    if (n >= 2) return "፪";
    if (n >= 1) return "፩";
    if (n >= 0) return "ባዶ";
};

inter.renderGeorgian = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGeorgian(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 2e4) return this.renderNumber(n, "#,##0");
    if (n >= 1e4) return "ჯ" + (n === 1e4 ? "" : this.renderGeorgian(n % 1e4));
    if (n >= 9e3) return "ჵ" + (n === 9e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 8e3) return "ჴ" + (n === 8e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 7e3) return "ხ" + (n === 7e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 6e3) return "ჭ" + (n === 6e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 5e3) return "წ" + (n === 5e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 4e3) return "ძ" + (n === 4e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 3e3) return "ც" + (n === 3e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 2e3) return "ჩ" + (n === 2e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 1e3) return "შ" + (n === 1e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 900) return "ყ" + (n === 900 ? "" : this.renderGeorgian(n % 100));
    if (n >= 800) return "ღ" + (n === 800 ? "" : this.renderGeorgian(n % 100));
    if (n >= 700) return "ქ" + (n === 700 ? "" : this.renderGeorgian(n % 100));
    if (n >= 600) return "ფ" + (n === 600 ? "" : this.renderGeorgian(n % 100));
    if (n >= 500) return "ჳ" + (n === 500 ? "" : this.renderGeorgian(n % 100));
    if (n >= 400) return "უ" + (n === 400 ? "" : this.renderGeorgian(n % 100));
    if (n >= 300) return "ტ" + (n === 300 ? "" : this.renderGeorgian(n % 100));
    if (n >= 200) return "ს" + (n === 200 ? "" : this.renderGeorgian(n % 100));
    if (n >= 100) return "რ" + (n === 100 ? "" : this.renderGeorgian(n % 100));
    if (n >= 90) return "ჟ" + (n === 90 ? "" : this.renderGeorgian(n % 10));
    if (n >= 80) return "პ" + (n === 80 ? "" : this.renderGeorgian(n % 10));
    if (n >= 70) return "ო" + (n === 70 ? "" : this.renderGeorgian(n % 10));
    if (n >= 60) return "ჲ" + (n === 60 ? "" : this.renderGeorgian(n % 10));
    if (n >= 50) return "ნ" + (n === 50 ? "" : this.renderGeorgian(n % 10));
    if (n >= 40) return "მ" + (n === 40 ? "" : this.renderGeorgian(n % 10));
    if (n >= 30) return "ლ" + (n === 30 ? "" : this.renderGeorgian(n % 10));
    if (n >= 20) return "კ" + (n === 20 ? "" : this.renderGeorgian(n % 10));
    if (n >= 10) return "ი" + (n === 10 ? "" : this.renderGeorgian(n % 10));
    if (n >= 9) return "თ";
    if (n >= 8) return "ჱ";
    if (n >= 7) return "ზ";
    if (n >= 6) return "ვ";
    if (n >= 5) return "ე";
    if (n >= 4) return "დ";
    if (n >= 3) return "გ";
    if (n >= 2) return "ბ";
    if (n >= 1) return "ა";
    if (n >= 0) return this.renderNumber(n, "#,##0");
};

inter.renderGreekUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGreekUpper(-n);
    if (isFractional && n > 1) return this.renderGreekUpper(Math.floor(n)) + "." + this.renderGreekUpper(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 0) return this.renderGreekNumeralMajuscules(n) + "´";
};

inter.renderGreekLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGreekLower(-n);
    if (isFractional && n > 1) return this.renderGreekLower(Math.floor(n)) + "." + this.renderGreekLower(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 0) return this.renderGreekNumeralMinuscules(n) + "´";
};

inter.renderSpelloutCardinal = function(n) {
    if (n < 0) return "−" + this.renderSpelloutCardinal(-n);
    if (n >= 0) return this.renderNumber(n, "#,##0.#");
};

inter.renderHebrew = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderHebrew(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1000001) return this.renderNumber(n, "#,##0");
    if (n >= 1e6) return "אלף אלפים";
    if (n >= 3001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 3001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 3e3) return this.renderHebrew(Math.floor(n / 1e3)) + " אלפים";
    if (n >= 2001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 2001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 2e3) return "אלפיים";
    if (n >= 1001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 1001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 1e3) return "אלף";
    if (n >= 901) return "תתק" + this.renderHebrew099(n % 100);
    if (n >= 900) return "תת״ק";
    if (n >= 801) return "תת" + this.renderHebrew099(n % 100);
    if (n >= 800) return "ת״ת";
    if (n >= 745) return "תש" + this.renderHebrew099(n % 100);
    if (n >= 744) return "תשד״מ";
    if (n >= 701) return "תש" + this.renderHebrew099(n % 100);
    if (n >= 700) return "ת״ש";
    if (n >= 699) return "תר" + this.renderHebrew099(n % 100);
    if (n >= 698) return "תרח״צ";
    if (n >= 601) return "תר" + this.renderHebrew099(n % 100);
    if (n >= 600) return "ת״ר";
    if (n >= 501) return "תק" + this.renderHebrew099(n % 100);
    if (n >= 500) return "ת״ק";
    if (n >= 400) return "ת" + this.renderHebrew099(n % 100);
    if (n >= 345) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 344) return "שד״מ";
    if (n >= 305) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 304) return "ד״ש";
    if (n >= 300) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 299) return "ר" + this.renderHebrew099(n % 100);
    if (n >= 298) return "רח״צ";
    if (n >= 200) return "ר" + this.renderHebrew099(n % 100);
    if (n >= 100) return "ק" + this.renderHebrew099(n % 100);
    if (n >= 91) return "צ״" + this.renderHebrewItem(n % 10);
    if (n >= 90) return "צ׳";
    if (n >= 81) return "פ״" + this.renderHebrewItem(n % 10);
    if (n >= 80) return "פ׳";
    if (n >= 71) return "ע״" + this.renderHebrewItem(n % 10);
    if (n >= 70) return "ע׳";
    if (n >= 61) return "ס״" + this.renderHebrewItem(n % 10);
    if (n >= 60) return "ס׳";
    if (n >= 51) return "נ״" + this.renderHebrewItem(n % 10);
    if (n >= 50) return "נ׳";
    if (n >= 41) return "מ״" + this.renderHebrewItem(n % 10);
    if (n >= 40) return "מ׳";
    if (n >= 31) return "ל״" + this.renderHebrewItem(n % 10);
    if (n >= 30) return "ל׳";
    if (n >= 21) return "כ״" + this.renderHebrewItem(n % 10);
    if (n >= 20) return "כ׳";
    if (n >= 17) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "ט״ז";
    if (n >= 15) return "ט״ו";
    if (n >= 11) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 0) return this.renderHebrewItem(n) + "׳";
};

inter.renderRomanUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderRomanUpper(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 4e5) return this.renderNumber(n, "#,##0");
    if (n >= 3e5) return "ↈↈↈ" + (n === 3e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 2e5) return "ↈↈ" + (n === 2e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 1e5) return "ↈ" + (n === 1e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 9e4) return "ↂↈ" + (n === 9e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 8e4) return "ↇↂↂↂ" + (n === 8e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 7e4) return "ↇↂↂ" + (n === 7e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 6e4) return "ↇↂ" + (n === 6e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 5e4) return "ↇ" + (n === 5e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 4e4) return "ↂↇ" + (n === 4e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 3e4) return "ↂↂↂ" + (n === 3e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 2e4) return "ↂↂ" + (n === 2e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 1e4) return "ↂ" + (n === 1e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 9e3) return "Mↂ" + (n === 9e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 8e3) return "ↁMMM" + (n === 8e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 7e3) return "ↁMM" + (n === 7e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 6e3) return "ↁM" + (n === 6e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 5e3) return "ↁ" + (n === 5e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 4e3) return "Mↁ" + (n === 4e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 3e3) return "MMM" + (n === 3e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 2e3) return "MM" + (n === 2e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 1e3) return "M" + (n === 1e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 900) return "CM" + (n === 900 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 800) return "DCCC" + (n === 800 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 700) return "DCC" + (n === 700 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 600) return "DC" + (n === 600 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 500) return "D" + (n === 500 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 400) return "CD" + (n === 400 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 300) return "CCC" + (n === 300 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 200) return "CC" + (n === 200 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 100) return "C" + (n === 100 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 90) return "XC" + (n === 90 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 80) return "LXXX" + (n === 80 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 70) return "LXX" + (n === 70 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 60) return "LX" + (n === 60 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 50) return "L" + (n === 50 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 40) return "XL" + (n === 40 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 30) return "XXX" + (n === 30 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 20) return "XX" + (n === 20 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 10) return "X" + (n === 10 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 9) return "IX";
    if (n >= 8) return "VIII";
    if (n >= 7) return "VII";
    if (n >= 6) return "VI";
    if (n >= 5) return "V";
    if (n >= 4) return "IV";
    if (n >= 3) return "III";
    if (n >= 2) return "II";
    if (n >= 1) return "I";
    if (n >= 0) return "N";
};

inter.renderRomanLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderRomanLower(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 5e3) return this.renderNumber(n, "#,##0");
    if (n >= 4e3) return "mmmm" + (n === 4e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 3e3) return "mmm" + (n === 3e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 2e3) return "mm" + (n === 2e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 1e3) return "m" + (n === 1e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 900) return "cm" + (n === 900 ? "" : this.renderRomanLower(n % 100));
    if (n >= 800) return "dccc" + (n === 800 ? "" : this.renderRomanLower(n % 100));
    if (n >= 700) return "dcc" + (n === 700 ? "" : this.renderRomanLower(n % 100));
    if (n >= 600) return "dc" + (n === 600 ? "" : this.renderRomanLower(n % 100));
    if (n >= 500) return "d" + (n === 500 ? "" : this.renderRomanLower(n % 100));
    if (n >= 400) return "cd" + (n === 400 ? "" : this.renderRomanLower(n % 100));
    if (n >= 300) return "ccc" + (n === 300 ? "" : this.renderRomanLower(n % 100));
    if (n >= 200) return "cc" + (n === 200 ? "" : this.renderRomanLower(n % 100));
    if (n >= 100) return "c" + (n === 100 ? "" : this.renderRomanLower(n % 100));
    if (n >= 90) return "xc" + (n === 90 ? "" : this.renderRomanLower(n % 10));
    if (n >= 80) return "lxxx" + (n === 80 ? "" : this.renderRomanLower(n % 10));
    if (n >= 70) return "lxx" + (n === 70 ? "" : this.renderRomanLower(n % 10));
    if (n >= 60) return "lx" + (n === 60 ? "" : this.renderRomanLower(n % 10));
    if (n >= 50) return "l" + (n === 50 ? "" : this.renderRomanLower(n % 10));
    if (n >= 40) return "xl" + (n === 40 ? "" : this.renderRomanLower(n % 10));
    if (n >= 30) return "xxx" + (n === 30 ? "" : this.renderRomanLower(n % 10));
    if (n >= 20) return "xx" + (n === 20 ? "" : this.renderRomanLower(n % 10));
    if (n >= 10) return "x" + (n === 10 ? "" : this.renderRomanLower(n % 10));
    if (n >= 9) return "ix";
    if (n >= 8) return "viii";
    if (n >= 7) return "vii";
    if (n >= 6) return "vi";
    if (n >= 5) return "v";
    if (n >= 4) return "iv";
    if (n >= 3) return "iii";
    if (n >= 2) return "ii";
    if (n >= 1) return "i";
    if (n >= 0) return "n";
};

inter.renderTamil = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderTamil(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e8) return this.renderNumber(n, "#,##,##0");
    if (n >= 1e6) return this.renderTamil(Math.floor(n / 1e6)) + "௱௲" + (n === 1e6 ? "" : this.renderTamilThousands(n % 1e6));
    if (n >= 2e3) return this.renderTamil(Math.floor(n / 1e3)) + "௲" + (n === 2e3 ? "" : this.renderTamil(n % 1e3));
    if (n >= 1e3) return "௲" + (n === 1e3 ? "" : this.renderTamil(n % 1e3));
    if (n >= 200) return this.renderTamil(Math.floor(n / 100)) + "௱" + (n === 200 ? "" : this.renderTamil(n % 100));
    if (n >= 100) return "௱" + (n === 100 ? "" : this.renderTamil(n % 100));
    if (n >= 20) return this.renderTamil(Math.floor(n / 10)) + "௰" + (n === 20 ? "" : this.renderTamil(n % 10));
    if (n >= 10) return "௰" + (n === 10 ? "" : this.renderTamil(n % 10));
    if (n >= 9) return "௯";
    if (n >= 8) return "௮";
    if (n >= 7) return "௭";
    if (n >= 6) return "௬";
    if (n >= 5) return "௫";
    if (n >= 4) return "௪";
    if (n >= 3) return "௩";
    if (n >= 2) return "௨";
    if (n >= 1) return "௧";
    if (n >= 0) return "௦";
};

inter.renderSpelloutCardinalMasculine = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "минус " + this.renderSpelloutCardinalMasculine(-n);
    if (isFractional && n > 1) return (n === NaN ? "" : this.renderSpelloutCardinalFeminine(Math.floor(n)) + " " + "cardinal" + "one" + "целый" + "other" + "целых" + " ") + this.renderFractionsFeminine(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e15) return this.renderSpelloutCardinalMasculine(Math.floor(n / 1e15)) + " " + "cardinal" + "one" + "квадриллион" + "few" + "квадриллиона" + "other" + "квадриллионов" + (n === 1e15 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e15));
    if (n >= 1e12) return this.renderSpelloutCardinalMasculine(Math.floor(n / 1e12)) + " " + "cardinal" + "one" + "триллион" + "few" + "триллиона" + "other" + "триллионов" + (n === 1e12 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e12));
    if (n >= 1e9) return this.renderSpelloutCardinalMasculine(Math.floor(n / 1e9)) + " " + "cardinal" + "one" + "миллиард" + "few" + "миллиарда" + "other" + "миллиардов" + (n === 1e9 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e9));
    if (n >= 1e6) return this.renderSpelloutCardinalMasculine(Math.floor(n / 1e6)) + " " + "cardinal" + "one" + "миллион" + "few" + "миллиона" + "other" + "миллионов" + (n === 1e6 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e6));
    if (n >= 1e3) return this.renderSpelloutCardinalFeminine(Math.floor(n / 1e3)) + " " + "cardinal" + "one" + "тысяча" + "few" + "тысячи" + "other" + "тысяч" + (n === 1e3 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e3));
    if (n >= 500) return this.renderSpelloutCardinalFeminine(Math.floor(n / 100)) + "сот" + (n === 500 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 100));
    if (n >= 300) return this.renderSpelloutCardinalFeminine(Math.floor(n / 100)) + "ста" + (n === 300 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 100));
    if (n >= 200) return this.renderSpelloutCardinalFeminine(Math.floor(n / 100)) + "сти" + (n === 200 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 100));
    if (n >= 100) return "сто" + (n === 100 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 100));
    if (n >= 90) return "девяносто" + (n === 90 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 10));
    if (n >= 80) return "восемьдесят" + (n === 80 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 10));
    if (n >= 70) return "семьдесят" + (n === 70 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 10));
    if (n >= 60) return "шестьдесят" + (n === 60 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 10));
    if (n >= 50) return "пятьдесят" + (n === 50 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 10));
    if (n >= 40) return "сорок" + (n === 40 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 10));
    if (n >= 30) return "тридцать" + (n === 30 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 10));
    if (n >= 20) return "двадцать" + (n === 20 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 10));
    if (n >= 19) return "девятнадцать";
    if (n >= 18) return "восемнадцать";
    if (n >= 17) return "семнадцать";
    if (n >= 16) return "шестнадцать";
    if (n >= 15) return "пятнадцать";
    if (n >= 14) return "четырнадцать";
    if (n >= 13) return "тринадцать";
    if (n >= 12) return "двенадцать";
    if (n >= 11) return "одиннадцать";
    if (n >= 10) return "десять";
    if (n >= 9) return "девять";
    if (n >= 8) return "восемь";
    if (n >= 7) return "семь";
    if (n >= 6) return "шесть";
    if (n >= 5) return "пять";
    if (n >= 4) return "четыре";
    if (n >= 3) return "три";
    if (n >= 2) return "два";
    if (n >= 1) return "один";
    if (n >= 0) return "ноль";
};

inter.renderCyrillicLowerThousands = function(n) {
    if (n >= 900) return "҂ц" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 800) return "҂ѿ" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 700) return "҂ѱ" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 600) return "҂х" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 500) return "҂ф" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 400) return "҂у" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 300) return "҂т" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 200) return "҂с" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 100) return "҂р" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 90) return "҂ч" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 80) return "҂п" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 70) return "҂ѻ" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 60) return "҂ѯ" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 50) return "҂н" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 40) return "҂м" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 30) return "҂л" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 20) return "҂к" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 19) return "҂ѳ҃҂і";
    if (n >= 18) return "҂и҃҂і";
    if (n >= 17) return "҂з҃҂і";
    if (n >= 16) return "҂ѕ҃҂і";
    if (n >= 15) return "҂є҃҂і";
    if (n >= 14) return "҂д҃҂і";
    if (n >= 13) return "҂г҃҂і";
    if (n >= 12) return "҂в҃҂і";
    if (n >= 11) return "҂а҃҂і";
    if (n >= 10) return "҃҂і";
    if (n >= 9) return "҃҂ѳ";
    if (n >= 8) return "҃҂и";
    if (n >= 7) return "҃҂з";
    if (n >= 6) return "҃҂ѕ";
    if (n >= 5) return "҃҂є";
    if (n >= 4) return "҃҂д";
    if (n >= 3) return "҃҂г";
    if (n >= 2) return "҃҂в";
    if (n >= 1) return "҃҂а";
    if (n >= 0) return "҃";
};

inter.renderCyrillicLower110 = function(n) {
    if (n >= 10) return "і";
    if (n >= 9) return "ѳ";
    if (n >= 8) return "и";
    if (n >= 7) return "з";
    if (n >= 6) return "ѕ";
    if (n >= 5) return "є";
    if (n >= 4) return "д";
    if (n >= 3) return "г";
    if (n >= 2) return "в";
    if (n >= 1) return "а";
};

inter.renderCyrillicLowerPost = function(n) {
    if (n >= 1) return this.renderCyrillicLower(n);
    if (n >= 0) return "҃";
};

inter.renderCyrillicLowerFinal = function(n) {
    if (n >= 91) return "ч" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 90) return "҃ч";
    if (n >= 81) return "п" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 80) return "҃п";
    if (n >= 71) return "ѻ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 70) return "҃ѻ";
    if (n >= 61) return "ѯ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 60) return "҃ѯ";
    if (n >= 51) return "н" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 50) return "҃н";
    if (n >= 41) return "м" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 40) return "҃м";
    if (n >= 31) return "л" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 30) return "҃л";
    if (n >= 21) return "к" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 20) return "҃к";
    if (n >= 19) return "ѳ҃і";
    if (n >= 18) return "и҃і";
    if (n >= 17) return "з҃і";
    if (n >= 16) return "ѕ҃і";
    if (n >= 15) return "є҃і";
    if (n >= 14) return "д҃і";
    if (n >= 13) return "г҃і";
    if (n >= 12) return "в҃і";
    if (n >= 11) return "а҃і";
    if (n >= 1) return "҃" + this.renderCyrillicLower110(n);
    if (n >= 0) return "҃";
};

inter.renderEthiopicP3 = function(n) {
    if (n >= 1e12) return this.renderEthiopic(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1) return "፼፼፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼፼፼";
};

inter.renderEthiopicP2 = function(n) {
    if (n >= 1e8) return this.renderEthiopic(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1) return "፼፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼፼";
};

inter.renderEthiopicP1 = function(n) {
    if (n >= 1e4) return this.renderEthiopic(Math.floor(n / 1e4)) + "፼" + (n === 1e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 1) return "፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼";
};

inter.renderGreekNumeralMajuscules = function(n) {
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e16) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e16)) + "ΜΜΜΜ" + (n === 1e16 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e16));
    if (n >= 1e12) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e12)) + "ΜΜΜ" + (n === 1e12 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e12));
    if (n >= 1e8) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e8)) + "ΜΜ" + (n === 1e8 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e8));
    if (n >= 1e4) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e4)) + "Μ" + (n === 1e4 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e4));
    if (n >= 1e3) return "͵" + this.renderGreekNumeralMajuscules(Math.floor(n / 1e3)) + (n === 1e3 ? "" : this.renderGreekNumeralMajuscules(n % 1e3));
    if (n >= 900) return "Ϡ" + (n === 900 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 800) return "Ω" + (n === 800 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 700) return "Ψ" + (n === 700 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 600) return "Χ" + (n === 600 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 500) return "Φ" + (n === 500 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 400) return "Υ" + (n === 400 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 300) return "Τ" + (n === 300 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 200) return "Σ" + (n === 200 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 100) return "Ρ" + (n === 100 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 90) return "Ϟ" + (n === 90 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 80) return "Π" + (n === 80 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 70) return "Ο" + (n === 70 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 60) return "Ξ" + (n === 60 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 50) return "Ν" + (n === 50 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 40) return "Μ" + (n === 40 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 30) return "Λ" + (n === 30 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 20) return "Κ" + (n === 20 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 10) return "Ι" + (n === 10 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 9) return "Θ";
    if (n >= 8) return "Η";
    if (n >= 7) return "Ζ";
    if (n >= 6) return "Ϝ";
    if (n >= 5) return "Ε";
    if (n >= 4) return "Δ";
    if (n >= 3) return "Γ";
    if (n >= 2) return "Β";
    if (n >= 1) return "Α";
    if (n >= 0) return "𐆊";
};

inter.renderGreekNumeralMinuscules = function(n) {
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e16) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e16)) + "μμμμ" + (n === 1e16 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e16));
    if (n >= 1e12) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e12)) + "μμμ" + (n === 1e12 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e12));
    if (n >= 1e8) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e8)) + "μμ" + (n === 1e8 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e8));
    if (n >= 1e4) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e4)) + "μ" + (n === 1e4 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e4));
    if (n >= 1e3) return "͵" + this.renderGreekNumeralMinuscules(Math.floor(n / 1e3)) + (n === 1e3 ? "" : this.renderGreekNumeralMinuscules(n % 1e3));
    if (n >= 900) return "ϡ" + (n === 900 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 800) return "ω" + (n === 800 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 700) return "ψ" + (n === 700 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 600) return "χ" + (n === 600 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 500) return "φ" + (n === 500 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 400) return "υ" + (n === 400 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 300) return "τ" + (n === 300 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 200) return "σ" + (n === 200 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 100) return "ρ" + (n === 100 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 90) return "ϟ" + (n === 90 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 80) return "π" + (n === 80 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 70) return "ο" + (n === 70 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 60) return "ξ" + (n === 60 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 50) return "ν" + (n === 50 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 40) return "μ" + (n === 40 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 30) return "λ" + (n === 30 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 20) return "κ" + (n === 20 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 10) return "ι" + (n === 10 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 9) return "θ";
    if (n >= 8) return "η";
    if (n >= 7) return "ζ";
    if (n >= 6) return "ϝ";
    if (n >= 5) return "ε";
    if (n >= 4) return "δ";
    if (n >= 3) return "γ";
    if (n >= 2) return "β";
    if (n >= 1) return "α";
    if (n >= 0) return "𐆊";
};

inter.renderHebrewThousands = function(n) {
    if (n >= 401) return this.renderHebrew(n) + "׳";
    if (n >= 100) return this.renderHebrew(n) + (n === 100 ? "" : "׳");
    if (n >= 10) return this.renderHebrew(n) + (n === 10 ? "" : "׳");
    if (n >= 0) return this.renderHebrew(n);
};

inter.renderHebrew099 = function(n) {
    if (n >= 91) return "צ״" + this.renderHebrewItem(n % 10);
    if (n >= 90) return "״צ";
    if (n >= 81) return "פ״" + this.renderHebrewItem(n % 10);
    if (n >= 80) return "״פ";
    if (n >= 71) return "ע״" + this.renderHebrewItem(n % 10);
    if (n >= 70) return "״ע";
    if (n >= 61) return "ס״" + this.renderHebrewItem(n % 10);
    if (n >= 60) return "״ס";
    if (n >= 51) return "נ״" + this.renderHebrewItem(n % 10);
    if (n >= 50) return "״נ";
    if (n >= 41) return "מ״" + this.renderHebrewItem(n % 10);
    if (n >= 40) return "״מ";
    if (n >= 31) return "ל״" + this.renderHebrewItem(n % 10);
    if (n >= 30) return "״ל";
    if (n >= 21) return "כ״" + this.renderHebrewItem(n % 10);
    if (n >= 20) return "״כ";
    if (n >= 17) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "ט״ז";
    if (n >= 15) return "ט״ו";
    if (n >= 11) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 1) return "״" + this.renderHebrewItem(n);
    if (n >= 0) return "׳";
};

inter.renderHebrewItem = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderHebrewItem(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 2100) return this.renderNumber(n, "#,##0");
    if (n >= 2e3) return "תתתתת" + (n === 2e3 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1900) return "תתתתש" + (n === 1900 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1800) return "תתתתר" + (n === 1800 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1700) return "תתתתק" + (n === 1700 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1600) return "תתתת" + (n === 1600 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1500) return "תתתש" + (n === 1500 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1400) return "תתתר" + (n === 1400 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1300) return "תתתק" + (n === 1300 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1200) return "תתת" + (n === 1200 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1100) return "תתש" + (n === 1100 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1e3) return "תתר" + (n === 1e3 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 900) return "תתק" + (n === 900 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 800) return "תת" + (n === 800 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 745) return "תש" + this.renderHebrewItem(n % 100);
    if (n >= 744) return "תשדמ";
    if (n >= 700) return "תש" + (n === 700 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 699) return "תר" + this.renderHebrewItem(n % 100);
    if (n >= 698) return "תרחצ";
    if (n >= 600) return "תר" + (n === 600 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 500) return "תק" + (n === 500 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 400) return "ת" + (n === 400 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 345) return "ש" + this.renderHebrewItem(n % 100);
    if (n >= 344) return "שדמ";
    if (n >= 305) return "ש" + this.renderHebrewItem(n % 100);
    if (n >= 304) return "דש";
    if (n >= 300) return "ש" + (n === 300 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 299) return "ר" + this.renderHebrewItem(n % 100);
    if (n >= 298) return "רחצ";
    if (n >= 200) return "ר" + (n === 200 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 100) return "ק" + (n === 100 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 90) return "צ" + (n === 90 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 80) return "פ" + (n === 80 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 70) return "ע" + (n === 70 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 60) return "ס" + (n === 60 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 50) return "נ" + (n === 50 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 40) return "מ" + (n === 40 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 30) return "ל" + (n === 30 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 20) return "כ" + (n === 20 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 17) return "י" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "טז";
    if (n >= 15) return "טו";
    if (n >= 10) return "י" + (n === 10 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 9) return "ט";
    if (n >= 8) return "ח";
    if (n >= 7) return "ז";
    if (n >= 6) return "ו";
    if (n >= 5) return "ה";
    if (n >= 4) return "ד";
    if (n >= 3) return "ג";
    if (n >= 2) return "ב";
    if (n >= 1) return "א";
    if (n >= 0) return "״";
};

inter.renderTamilThousands = function(n) {
    if (n >= 1e3) return this.renderTamilThousands(Math.floor(n / 1e3)) + "௲" + (n === 1e3 ? "" : this.renderTamilThousands(n % 1e3));
    if (n >= 0) return this.renderTamil(n);
};

inter.renderSpelloutCardinalFeminine = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "минус " + this.renderSpelloutCardinalFeminine(-n);
    if (isFractional && n > 1) return (n === NaN ? "" : this.renderSpelloutCardinalFeminine(Math.floor(n)) + " " + "cardinal" + "one" + "целая" + "other" + "целых" + " ") + this.renderFractionsFeminine(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e15) return this.renderSpelloutCardinalMasculine(Math.floor(n / 1e15)) + " " + "cardinal" + "one" + "квадриллион" + "few" + "квадриллиона" + "other" + "квадриллионов" + (n === 1e15 ? "" : " " + this.renderSpelloutCardinalFeminine(n % 1e15));
    if (n >= 1e12) return this.renderSpelloutCardinalMasculine(Math.floor(n / 1e12)) + " " + "cardinal" + "one" + "триллион" + "few" + "триллиона" + "other" + "триллионов" + (n === 1e12 ? "" : " " + this.renderSpelloutCardinalFeminine(n % 1e12));
    if (n >= 1e9) return this.renderSpelloutCardinalMasculine(Math.floor(n / 1e9)) + " " + "cardinal" + "one" + "миллиард" + "few" + "миллиарда" + "other" + "миллиардов" + (n === 1e9 ? "" : " " + this.renderSpelloutCardinalFeminine(n % 1e9));
    if (n >= 1e6) return this.renderSpelloutCardinalMasculine(Math.floor(n / 1e6)) + " " + "cardinal" + "one" + "миллион" + "few" + "миллиона" + "other" + "миллионов" + (n === 1e6 ? "" : " " + this.renderSpelloutCardinalFeminine(n % 1e6));
    if (n >= 1e3) return this.renderSpelloutCardinalFeminine(Math.floor(n / 1e3)) + " " + "cardinal" + "one" + "тысяча" + "few" + "тысячи" + "other" + "тысяч" + (n === 1e3 ? "" : " " + this.renderSpelloutCardinalFeminine(n % 1e3));
    if (n >= 500) return this.renderSpelloutCardinalFeminine(Math.floor(n / 100)) + "сот" + (n === 500 ? "" : " " + this.renderSpelloutCardinalFeminine(n % 100));
    if (n >= 300) return this.renderSpelloutCardinalFeminine(Math.floor(n / 100)) + "ста" + (n === 300 ? "" : " " + this.renderSpelloutCardinalFeminine(n % 100));
    if (n >= 200) return this.renderSpelloutCardinalFeminine(Math.floor(n / 100)) + "сти" + (n === 200 ? "" : " " + this.renderSpelloutCardinalFeminine(n % 100));
    if (n >= 100) return "сто" + (n === 100 ? "" : " " + this.renderSpelloutCardinalFeminine(n % 100));
    if (n >= 90) return "девяносто" + (n === 90 ? "" : " " + this.renderSpelloutCardinalFeminine(n % 10));
    if (n >= 80) return "восемьдесят" + (n === 80 ? "" : " " + this.renderSpelloutCardinalFeminine(n % 10));
    if (n >= 70) return "семьдесят" + (n === 70 ? "" : " " + this.renderSpelloutCardinalFeminine(n % 10));
    if (n >= 60) return "шестьдесят" + (n === 60 ? "" : " " + this.renderSpelloutCardinalFeminine(n % 10));
    if (n >= 50) return "пятьдесят" + (n === 50 ? "" : " " + this.renderSpelloutCardinalFeminine(n % 10));
    if (n >= 40) return "сорок" + (n === 40 ? "" : " " + this.renderSpelloutCardinalFeminine(n % 10));
    if (n >= 30) return "тридцать" + (n === 30 ? "" : " " + this.renderSpelloutCardinalFeminine(n % 10));
    if (n >= 20) return "двадцать" + (n === 20 ? "" : " " + this.renderSpelloutCardinalFeminine(n % 10));
    if (n >= 3) return this.renderSpelloutCardinalMasculine(n);
    if (n >= 2) return "две";
    if (n >= 1) return "одна";
    if (n >= 0) return "ноль";
};

inter.renderFractionsFeminine = function(n) {
    if (n >= 1e12) return this.renderNumber(Math.floor(n / 1e12), "0");
    if (n >= 1e11) return this.renderSpelloutCardinalFeminine(Math.floor(n / 1e11)) + " " + "cardinal" + "one" + "стомиллиардная" + "other" + "стомиллиардных";
    if (n >= 1e10) return this.renderSpelloutCardinalFeminine(Math.floor(n / 1e10)) + " " + "cardinal" + "one" + "десятимиллиардная" + "other" + "десятимиллиардных";
    if (n >= 1e9) return this.renderSpelloutCardinalFeminine(Math.floor(n / 1e9)) + " " + "cardinal" + "one" + "миллиардная" + "other" + "миллиардных";
    if (n >= 1e8) return this.renderSpelloutCardinalFeminine(Math.floor(n / 1e8)) + " " + "cardinal" + "one" + "стомиллионная" + "other" + "стомиллионных";
    if (n >= 1e7) return this.renderSpelloutCardinalFeminine(Math.floor(n / 1e7)) + " " + "cardinal" + "one" + "десятимиллионная" + "other" + "десятимиллионных";
    if (n >= 1e6) return this.renderSpelloutCardinalFeminine(Math.floor(n / 1e6)) + " " + "cardinal" + "one" + "миллионная" + "other" + "миллионных";
    if (n >= 1e5) return this.renderSpelloutCardinalFeminine(Math.floor(n / 1e5)) + " " + "cardinal" + "one" + "стотысячная" + "other" + "стотысячных";
    if (n >= 1e4) return this.renderSpelloutCardinalFeminine(Math.floor(n / 1e4)) + " " + "cardinal" + "one" + "десятитысячная" + "other" + "десятитысячных";
    if (n >= 1e3) return this.renderSpelloutCardinalFeminine(Math.floor(n / 1e3)) + " " + "cardinal" + "one" + "тысячная" + "other" + "тысячных";
    if (n >= 100) return this.renderSpelloutCardinalFeminine(Math.floor(n / 100)) + " " + "cardinal" + "one" + "сотая" + "other" + "сотых";
    if (n >= 10) return this.renderSpelloutCardinalFeminine(Math.floor(n / 10)) + " " + "cardinal" + "one" + "десятая" + "other" + "десятых";
};

inter.renderEthiopicP = function(n) {
    if (n >= 1e16) return this.renderEthiopicP(Math.floor(n / 1e16)) + "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 1e12) return this.renderEthiopicP(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1e8) return this.renderEthiopicP(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1e4) return this.renderEthiopicP(Math.floor(n / 1e4)) + "፼" + (n === 1e4 ? "" : this.renderEthiopicP(n % 1e4));
    if (n >= 1) return this.renderEthiopic(n);
};

module.exports = inter;