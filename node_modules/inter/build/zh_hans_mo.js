function defaults(targetObj) {
    for (var i = 1; i < arguments.length; i += 1) {
        if (arguments[i] && typeof arguments[i] === "object") {
            for (var propertyName in arguments[i]) {
                if (typeof targetObj[propertyName] === "undefined") {
                    targetObj[propertyName] = arguments[i][propertyName];
                }
            }
        }
    }
    return targetObj;
}

var P = require("./zh_hans.js"), inter = defaults({
    renderers: {}
}, P);

var _2oqw1 = {
    other: "{0}斯堪的纳维亚英里"
}, _2oqw2 = {
    displayName: "上午/下午"
}, _2oqw3 = {
    a: "ah至ah时",
    h: "ah至h时"
}, _2oqw4 = {
    a: "ah时至ah时",
    h: "ah时至h时"
}, _2oqw5 = {
    a: "vah至ah时",
    h: "vah至h时"
}, _2oqw6 = {
    d: "M-d至M-d",
    M: "M-d至M-d"
}, _2oqw7 = [ "1季度", "2季度", "3季度", "4季度" ], _2oqw8 = {
    "0": "今年",
    "1": "明年",
    "-1": "去年"
}, _2oqw9 = {
    "0": "本周",
    "1": "下周",
    "-1": "上周"
}, _2oqw10 = {
    M: "r-M至r-M",
    y: "r-M至r-M"
}, _2oqw11 = {
    a: "vah时至ah时",
    h: "vah时至h时"
}, _2oqw12 = {
    d: "M月d日至d日",
    M: "M月d日至M月d日"
}, _2oqw13 = {
    "0": "本月",
    "1": "下个月",
    "-1": "上个月"
}, _2oqw14 = {
    M: "y年M月至M月",
    y: "y年M月至y年M月"
}, _2oqw15 = {
    "0": "本周日",
    "1": "下周日",
    "-1": "上周日"
}, _2oqw16 = {
    "0": "本周一",
    "1": "下周一",
    "-1": "上周一"
}, _2oqw17 = {
    "0": "本周二",
    "1": "下周二",
    "-1": "上周二"
}, _2oqw18 = {
    "0": "本周三",
    "1": "下周三",
    "-1": "上周三"
}, _2oqw19 = {
    "0": "本周四",
    "1": "下周四",
    "-1": "上周四"
}, _2oqw20 = {
    "0": "本周五",
    "1": "下周五",
    "-1": "上周五"
}, _2oqw21 = {
    "0": "本周六",
    "1": "下周六",
    "-1": "上周六"
}, _2oqw22 = {
    d: "M-dE至M-dE",
    M: "M-dE至M-dE"
}, _2oqw23 = {
    M: "Gy年M月至M月",
    y: "Gy年M月至y年M月"
}, _2oqw24 = [ "日", "一", "二", "三", "四", "五", "六" ], _2oqw25 = [ "第一季度", "第二季度", "第三季度", "第四季度" ], _2oqw26 = {
    d: "MMMd日至d日",
    M: "MMMd日至MMMd日"
}, _2oqw27 = {
    H: "HH:mm–HH:mm",
    m: "HH:mm–HH:mm"
}, _2oqw28 = {
    d: "MMMd日E至d日E",
    M: "MMMd日E至MMMd日E"
}, _2oqw29 = {
    M: "rU年MMM至MMM",
    y: "rU年MMM至rU年MMM"
}, _2oqw30 = {
    H: "vHH:mm–HH:mm",
    m: "vHH:mm–HH:mm"
}, _2oqw31 = [ "周日", "周一", "周二", "周三", "周四", "周五", "周六" ], _2oqw32 = {
    wide: [ "伊斯兰历" ],
    abbreviated: [ "伊斯兰历" ]
}, _2oqw33 = {
    H: "HH:mm–HH:mm v",
    m: "HH:mm–HH:mm v"
}, _2oqw34 = {
    M: "rU年MMMM至MMMM",
    y: "rU年MMMM至rU年MMMM"
}, _2oqw35 = {
    relative: _2oqw15
}, _2oqw36 = {
    relative: _2oqw16
}, _2oqw37 = {
    relative: _2oqw17
}, _2oqw38 = {
    relative: _2oqw18
}, _2oqw39 = {
    relative: _2oqw19
}, _2oqw40 = {
    relative: _2oqw20
}, _2oqw41 = {
    relative: _2oqw21
}, _2oqw42 = {
    "0": "今天",
    "1": "明天",
    "2": "后天",
    "-2": "前天",
    "-1": "昨天"
}, _2oqw43 = [ "星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六" ], _2oqw44 = {
    future: {
        other: "{0}年后"
    },
    past: {
        other: "{0}年前"
    }
}, _2oqw45 = {
    future: {
        other: "{0}周后"
    },
    past: {
        other: "{0}周前"
    }
}, _2oqw46 = {
    future: {
        other: "{0}天后"
    },
    past: {
        other: "{0}天前"
    }
}, _2oqw47 = {
    future: {
        other: "{0}秒后"
    },
    past: {
        other: "{0}秒前"
    }
}, _2oqw48 = {
    a: "ah:mm至ah:mm",
    h: "ah:mm至h:mm",
    m: "ah:mm至h:mm"
}, _2oqw49 = {
    future: {
        other: "{0}季度后"
    },
    past: {
        other: "{0}季度前"
    }
}, _2oqw50 = {
    future: {
        other: "{0}个月后"
    },
    past: {
        other: "{0}个月前"
    }
}, _2oqw51 = {
    future: {
        other: "{0}小时后"
    },
    past: {
        other: "{0}小时前"
    }
}, _2oqw52 = {
    future: {
        other: "{0}分钟后"
    },
    past: {
        other: "{0}分钟前"
    }
}, _2oqw53 = {
    d: "r年MMMd至d",
    M: "r年MMMd至MMMd",
    y: "r年MMMd至r年MMMd"
}, _2oqw54 = {
    d: "d/M/y至d/M/y",
    M: "d/M/y至d/M/y",
    y: "d/M/y至d/M/y"
}, _2oqw55 = {
    d: "r-M-d至r-M-d",
    M: "r-M-d至r-M-d",
    y: "r-M-d至r-M-d"
}, _2oqw56 = [ "正", "二", "三", "四", "五", "六", "七", "八", "九", "十", "冬", "腊" ], _2oqw57 = {
    a: "vah:mm至ah:mm",
    h: "vah:mm至h:mm",
    m: "vah:mm至h:mm"
}, _2oqw58 = {
    wide: [ "ERA0", "ERA1" ],
    abbreviated: [ "ERA0", "ERA1" ]
}, _2oqw59 = {
    d: "Gy年M月d日至d日",
    M: "Gy年M月d日至M月d日",
    y: "Gy年M月d日至y年M月d日"
}, _2oqw60 = [ "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" ], _2oqw61 = {
    d: "d/M/yE至d/M/yE",
    M: "d/M/yE至d/M/yE",
    y: "d/M/yE至d/M/yE"
}, _2oqw62 = {
    "0": "this quarter",
    "1": "next quarter",
    "-1": "last quarter"
}, _2oqw63 = {
    d: "r-M-dE至r-M-dE",
    M: "r-M-dE至r-M-dE",
    y: "r-M-dE至r-M-dE"
}, _2oqw64 = [ undefined, "子", "丑", "寅", "卯", "辰", "巳", "午", "未", "申", "酉", "戌" ], _2oqw65 = [ undefined, "鼠", "牛", "虎", "兔", "龙", "蛇", "马", "羊", "猴", "鸡", "狗" ], _2oqw66 = [ "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13" ], _2oqw67 = {
    d: "rU年MMMdE至dE",
    M: "rU年MMMdE至MMMdE",
    y: "rU年MMMdE至rU年MMMdE"
}, _2oqw68 = [ "正月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "冬月", "腊月" ], _2oqw69 = [ "一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月" ], _2oqw70 = [ "1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月" ], _2oqw71 = {
    abbreviated: {
        leap: "闰{0}"
    },
    narrow: {
        leap: "闰{0}"
    },
    wide: {
        leap: "闰{0}"
    }
}, _2oqw72 = [ "一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", "十三月" ], _2oqw73 = [ "1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", "13月" ], _2oqw74 = {
    displayName: "年",
    relativeTime: _2oqw44
}, _2oqw75 = {
    displayName: "周",
    relativeTime: _2oqw45
}, _2oqw76 = {
    displayName: "日",
    relativeTime: _2oqw46
}, _2oqw77 = {
    displayName: "秒钟",
    relativeTime: _2oqw47
}, _2oqw78 = {
    displayName: "季",
    relativeTime: _2oqw49
}, _2oqw79 = {
    displayName: "月",
    relativeTime: _2oqw50
}, _2oqw80 = {
    displayName: "小时",
    relativeTime: _2oqw51
}, _2oqw81 = {
    displayName: "分钟",
    relativeTime: _2oqw52
}, _2oqw82 = {
    displayName: "秒钟",
    relative: [ "现在" ],
    relativeTime: _2oqw47
}, _2oqw83 = {
    abbreviated: _2oqw7,
    narrow: [ "1", "2", "3", "4" ],
    wide: _2oqw25
}, _2oqw84 = {
    displayName: "年",
    relative: _2oqw8,
    relativeTime: _2oqw44
}, _2oqw85 = {
    displayName: "周",
    relative: _2oqw9,
    relativeTime: _2oqw45
}, _2oqw86 = {
    displayName: "月",
    relative: _2oqw13,
    relativeTime: _2oqw50
}, _2oqw87 = {
    midnight: "午夜",
    am: "上午",
    pm: "下午",
    morning1: "清晨",
    morning2: "上午",
    afternoon1: "下午",
    afternoon2: "下午",
    evening1: "晚上",
    night1: "凌晨"
}, _2oqw88 = {
    midnight: "午夜",
    am: "上午",
    pm: "下午",
    morning1: "清晨",
    morning2: "上午",
    afternoon1: "中午",
    afternoon2: "下午",
    evening1: "晚上",
    night1: "凌晨"
}, _2oqw89 = {
    midnight: "午夜",
    am: "上午",
    pm: "下午",
    morning1: "早上",
    morning2: "上午",
    afternoon1: "中午",
    afternoon2: "下午",
    evening1: "晚上",
    night1: "凌晨"
}, _2oqw90 = {
    displayName: "日",
    relative: _2oqw42,
    relativeTime: _2oqw46
}, _2oqw91 = {
    displayName: "季",
    relative: _2oqw62,
    relativeTime: _2oqw49
}, _2oqw92 = {
    decimal: ".",
    group: ",",
    list: ";",
    percentSign: "%",
    plusSign: "+",
    minusSign: "-",
    exponential: "E",
    superscriptingExponent: "×",
    perMille: "‰",
    infinity: "∞",
    nan: "NaN",
    timeSeparator: ":"
}, _2oqw93 = {
    abbreviated: _2oqw31,
    narrow: _2oqw24,
    wide: _2oqw43,
    "short": _2oqw31
}, _2oqw94 = {
    symbols: _2oqw92
}, _2oqw95 = {
    format: _2oqw71,
    numeric: {
        all: {
            leap: "闰{0}"
        }
    },
    standAlone: _2oqw71
}, _2oqw96 = {
    abbreviated: _2oqw64,
    narrow: _2oqw64,
    wide: _2oqw64
}, _2oqw97 = {
    abbreviated: _2oqw65,
    narrow: _2oqw65,
    wide: _2oqw65
}, _2oqw98 = {
    abbreviated: _2oqw68,
    narrow: _2oqw56,
    wide: _2oqw68
}, _2oqw99 = {
    format: _2oqw96
}, _2oqw100 = {
    format: _2oqw97
}, _2oqw101 = {
    abbreviated: _2oqw70,
    narrow: _2oqw60,
    wide: _2oqw69
}, _2oqw102 = {
    symbols: _2oqw92,
    digits: "renderSpelloutCardinal"
}, _2oqw103 = {
    format: _2oqw83,
    standAlone: _2oqw83
}, _2oqw104 = {
    symbols: _2oqw92,
    digits: "renderSpelloutCardinalFinancial"
}, _2oqw105 = {
    "1000": {
        other: "0"
    },
    "10000": {
        other: "0万"
    },
    "100000": {
        other: "00万"
    },
    "1000000": {
        other: "000万"
    },
    "10000000": {
        other: "0000万"
    },
    "100000000": {
        other: "0亿"
    },
    "1000000000": {
        other: "00亿"
    },
    "10000000000": {
        other: "000亿"
    },
    "100000000000": {
        other: "0000亿"
    },
    "1000000000000": {
        other: "0兆"
    },
    "10000000000000": {
        other: "00兆"
    },
    "100000000000000": {
        other: "000兆"
    }
}, _2oqw106 = {
    abbreviated: _2oqw73,
    narrow: _2oqw66,
    wide: _2oqw72
}, _2oqw107 = {
    "1000": {
        other: "0"
    },
    "10000": {
        other: "¤0万"
    },
    "100000": {
        other: "¤00万"
    },
    "1000000": {
        other: "¤000万"
    },
    "10000000": {
        other: "¤0000万"
    },
    "100000000": {
        other: "¤0亿"
    },
    "1000000000": {
        other: "¤00亿"
    },
    "10000000000": {
        other: "¤000亿"
    },
    "100000000000": {
        other: "¤0000亿"
    },
    "1000000000000": {
        other: "¤0兆"
    },
    "10000000000000": {
        other: "¤00兆"
    },
    "100000000000000": {
        other: "¤000兆"
    }
}, _2oqw108 = {
    fullDate: "U年MMMd日EEEE",
    longDate: "U年MMMd日",
    mediumDate: "U年MMMd日",
    shortDate: "r-M-d",
    fullTime: "zzzz ah:mm:ss",
    longTime: "z ah:mm:ss",
    mediumTime: "ah:mm:ss",
    shortTime: "ah:mm",
    shortDateTime: "r-M-d ah:mm",
    mediumDateTime: "U年MMMd日 ah:mm:ss",
    longDateTime: "U年MMMd日 z ah:mm:ss",
    fullDateTime: "U年MMMd日EEEE zzzz ah:mm:ss"
}, _2oqw109 = [ undefined, "甲子", "乙丑", "丙寅", "丁卯", "戊辰", "己巳", "庚午", "辛未", "壬申", "癸酉", "甲戌", "乙亥", "丙子", "丁丑", "戊寅", "己卯", "庚辰", "辛巳", "壬午", "癸未", "甲申", "乙酉", "丙戌", "丁亥", "戊子", "己丑", "庚寅", "辛卯", "壬辰", "癸巳", "甲午", "乙未", "丙申", "丁酉", "戊戌", "己亥", "庚子", "辛丑", "壬寅", "癸卯", "甲辰", "乙巳", "丙午", "丁未", "戊申", "己酉", "庚戌", "辛亥", "壬子", "癸丑", "甲寅", "乙卯", "丙辰", "丁巳", "戊午", "己未", "庚申", "辛酉", "壬戌" ], _2oqw110 = {
    fullDate: "Gy年M月d日EEEE",
    longDate: "Gy年M月d日",
    mediumDate: "Gy年M月d日",
    shortDate: "Gy-M-d",
    fullTime: "zzzz ah:mm:ss",
    longTime: "z ah:mm:ss",
    mediumTime: "ah:mm:ss",
    shortTime: "ah:mm",
    shortDateTime: "Gy-M-d ah:mm",
    mediumDateTime: "Gy年M月d日 ah:mm:ss",
    longDateTime: "Gy年M月d日 z ah:mm:ss",
    fullDateTime: "Gy年M月d日EEEE zzzz ah:mm:ss"
}, _2oqw111 = {
    shortDate: "Gd/M/yy",
    fullDate: "Gy年M月d日EEEE",
    longDate: "Gy年M月d日",
    mediumDate: "Gy年M月d日",
    fullTime: "zzzz ah:mm:ss",
    longTime: "z ah:mm:ss",
    mediumTime: "ah:mm:ss",
    shortTime: "ah:mm",
    shortDateTime: "Gd/M/yy ah:mm",
    mediumDateTime: "Gy年M月d日 ah:mm:ss",
    longDateTime: "Gy年M月d日 z ah:mm:ss",
    fullDateTime: "Gy年M月d日EEEE zzzz ah:mm:ss"
}, _2oqw112 = {
    shortDate: "d/M/yyGGGGG",
    fullDate: "Gy年M月d日EEEE",
    longDate: "Gy年M月d日",
    mediumDate: "Gy年M月d日",
    fullTime: "zzzz ah:mm:ss",
    longTime: "z ah:mm:ss",
    mediumTime: "ah:mm:ss",
    shortTime: "ah:mm",
    shortDateTime: "d/M/yyGGGGG ah:mm",
    mediumDateTime: "Gy年M月d日 ah:mm:ss",
    longDateTime: "Gy年M月d日 z ah:mm:ss",
    fullDateTime: "Gy年M月d日EEEE zzzz ah:mm:ss"
}, _2oqw113 = {
    abbreviated: _2oqw87,
    narrow: _2oqw88,
    wide: _2oqw87
}, _2oqw114 = {
    abbreviated: _2oqw89,
    narrow: _2oqw89,
    wide: _2oqw89
}, _2oqw115 = {
    format: _2oqw93,
    standAlone: _2oqw93
}, _2oqw116 = {
    format: _2oqw98,
    standAlone: _2oqw98
}, _2oqw117 = {
    format: _2oqw101,
    standAlone: _2oqw101
}, _2oqw118 = {
    format: _2oqw106,
    standAlone: _2oqw106
}, _2oqw119 = {
    "long": _2oqw105,
    "short": _2oqw105,
    "default": "#,##0.###"
}, _2oqw120 = {
    d: "d日",
    Ed: "d日E",
    Gy: "rU年",
    GyMMM: "rU年MMM",
    GyMMMd: "r年MMMd",
    GyMMMEd: "rU年MMMdE",
    M: "MMM",
    Md: "M-d",
    MEd: "M-dE",
    MMMd: "MMMd日",
    MMMEd: "MMMd日E",
    MMMMd: "MMMMd日",
    UM: "U年MMM",
    UMd: "U年MMMd",
    UMMM: "U年MMM",
    UMMMd: "U年MMMd",
    y: "rU年",
    yMd: "r年MMMd",
    yyyy: "rU年",
    yyyyM: "rU年MMM",
    yyyyMd: "r年MMMd",
    yyyyMEd: "rU年MMMd，E",
    yyyyMMM: "rU年MMM",
    yyyyMMMd: "r年MMMd",
    yyyyMMMEd: "rU年MMMdE",
    yyyyMMMM: "rU年MMMM",
    yyyyQQQ: "rU年QQQQ",
    yyyyQQQQ: "rU年QQQQ",
    E: "ccc",
    h: "h a",
    H: "HH",
    hm: "h:mm a",
    Hm: "HH:mm",
    hms: "h:mm:ss a",
    Hms: "HH:mm:ss",
    MMM: "LLL",
    ms: "mm:ss"
}, _2oqw121 = {
    Md: "M-d",
    MEd: "M-dE",
    MMdd: "MM-dd",
    MMMMdd: "M月d日",
    yyyyMd: "Gy年M月d日",
    yyyyMEd: "Gy年M月d日，E",
    d: "d日",
    E: "ccc",
    Ed: "d日E",
    Gy: "Gy年",
    GyMMM: "Gy年M月",
    GyMMMd: "Gy年M月d日",
    GyMMMEd: "Gy年M月d日E",
    h: "ah时",
    H: "H时",
    hm: "ah:mm",
    Hm: "HH:mm",
    hms: "ah:mm:ss",
    Hms: "HH:mm:ss",
    M: "M月",
    MMM: "LLL",
    MMMd: "M月d日",
    MMMEd: "M月d日E",
    MMMMd: "M月d日",
    ms: "mm:ss",
    y: "Gy年",
    yyyy: "Gy年",
    yyyyM: "Gy年M月",
    yyyyMMM: "Gy年M月",
    yyyyMMMd: "Gy年M月d日",
    yyyyMMMEd: "Gy年M月d日E",
    yyyyMMMM: "Gy年M月",
    yyyyQQQ: "Gy年第Q季度",
    yyyyQQQQ: "Gy年第Q季度",
    Ehm: "E h:mm a",
    EHm: "E HH:mm",
    Ehms: "E h:mm:ss a",
    EHms: "E HH:mm:ss"
}, _2oqw122 = {
    d: "d日",
    M: "M月",
    Md: "M-d",
    MEd: "M-dE",
    MMM: "LLL",
    MMMd: "M月d日",
    MMMEd: "M月d日E",
    MMMMd: "M月d日",
    MMdd: "MM-dd",
    MMMMdd: "M月d日",
    yyyyMd: "Gy年M月d日",
    yyyyMEd: "Gy年M月d日，E",
    E: "ccc",
    Ed: "d日E",
    Gy: "Gy年",
    GyMMM: "Gy年M月",
    GyMMMd: "Gy年M月d日",
    GyMMMEd: "Gy年M月d日E",
    h: "ah时",
    H: "H时",
    hm: "ah:mm",
    Hm: "HH:mm",
    hms: "ah:mm:ss",
    Hms: "HH:mm:ss",
    ms: "mm:ss",
    y: "Gy年",
    yyyy: "Gy年",
    yyyyM: "Gy年M月",
    yyyyMMM: "Gy年M月",
    yyyyMMMd: "Gy年M月d日",
    yyyyMMMEd: "Gy年M月d日E",
    yyyyMMMM: "Gy年M月",
    yyyyQQQ: "Gy年第Q季度",
    yyyyQQQQ: "Gy年第Q季度",
    Ehm: "E h:mm a",
    EHm: "E HH:mm",
    Ehms: "E h:mm:ss a",
    EHms: "E HH:mm:ss"
}, _2oqw123 = {
    currencyMatch: /[^\u0024+<->\u005E`\u007C~¢-¦¨©¬®-±´¸×÷˂-˅˒-˟˥-˫˭˯-˿͵΄΅϶҂֏؆-؈؋؎؏۞۩۽۾߶৲৳৺৻૱୰௳-௺౿൹฿༁-༃༓༕-༗༚-༟༴༶༸྾-࿅࿇-࿌࿎࿏࿕-࿘႞႟᎐-᎙៛᥀᧞-᧿᭡-᭪᭴-᭼᾽᾿-῁῍-῏῝-῟῭-`´῾⁄⁒⁺-⁼₊-₌₠-₹℀℁℃-℆℈℉℔№-℘℞-℣℥℧℩℮℺℻⅀-⅄⅊-⅍⅏←-⌨⌫-⏳␀-␦⑀-⑊⒜-ⓩ─-⛿✁-❧➔-⟄⟇-⟥⟰-⦂⦙-⧗⧜-⧻⧾-⭌⭐-⭙⳥-⳪⺀-⺙⺛-⻳⼀-⿕⿰-⿻〄〒〓〠〶〷〾〿゛゜㆐㆑㆖-㆟㇀-㇣㈀-㈞㈪-㉇㉐㉠-㉿㊊-㊰㋀-㋾㌀-㏿䷀-䷿꒐-꓆꜀-꜖꜠꜡꞉꞊꠨-꠫꠶-꠹꩷-꩹﬩﮲-﯁﷼﷽﹢﹤-﹦﹩＄＋＜-＞＾｀｜～￠-￦￨-￮￼�]/,
    surroundingMatch: /[0-9²³¹¼-¾٠-٩۰-۹߀-߉०-९০-৯৴-৹੦-੯૦-૯୦-୯୲-୷௦-௲౦-౯౸-౾೦-೯൦-൵๐-๙໐-໙༠-༳၀-၉႐-႙፩-፼ᛮ-ᛰ០-៩៰-៹᠐-᠙᥆-᥏᧐-᧚᪀-᪉᪐-᪙᭐-᭙᮰-᮹᱀-᱉᱐-᱙⁰⁴-⁹₀-₉⅐-ↂↅ-↉①-⒛⓪-⓿❶-➓⳽〇〡-〩〸-〺㆒-㆕㈠-㈩㉈-㉏㉑-㉟㊀-㊉㊱-㊿꘠-꘩ꛦ-ꛯ꠰-꠵꣐-꣙꤀-꤉꧐-꧙꩐-꩙꯰-꯹０-９]/,
    insertBetween: " "
}, _2oqw124 = {
    Hmv: _2oqw30,
    Hv: {
        H: "vHH–HH"
    },
    Md: _2oqw6,
    MEd: _2oqw22,
    MMMEd: {
        d: "M月d日E至M月d日E"
    },
    yM: {
        M: "y年M月至y年M月"
    },
    yMd: _2oqw54,
    yMEd: _2oqw61,
    yMMMEd: {
        d: "y年M月d日E至M月d日E"
    },
    d: {
        d: "d日至d日"
    },
    h: _2oqw4,
    H: {
        H: "HH–HH"
    },
    hm: _2oqw48,
    Hm: _2oqw27,
    hmv: _2oqw57,
    hv: _2oqw11,
    M: {
        M: "M–M月"
    },
    MMM: {
        M: "LLL至LLL"
    },
    MMMd: _2oqw12,
    y: {
        y: "Gy–y年"
    },
    yMMM: _2oqw23,
    yMMMd: _2oqw59,
    yMMMM: _2oqw23
}, _2oqw125 = {
    format: _2oqw113,
    standAlone: _2oqw114
}, _2oqw126 = {
    basic: _2oqw108,
    cldr: _2oqw120
}, _2oqw127 = {
    d: {
        d: "d日至d日"
    },
    h: _2oqw3,
    hm: _2oqw48,
    hmv: _2oqw57,
    hv: _2oqw5,
    Hv: {
        H: "HH–HH v"
    },
    M: {
        M: "L至L"
    },
    Md: _2oqw6,
    MEd: _2oqw22,
    MMM: {
        M: "LLL至LLL"
    },
    MMMd: _2oqw26,
    MMMEd: _2oqw28,
    y: {
        y: "rU至rU"
    },
    yM: _2oqw10,
    yMd: _2oqw55,
    yMEd: _2oqw63,
    yMMM: _2oqw29,
    yMMMd: _2oqw53,
    yMMMEd: _2oqw67,
    yMMMM: _2oqw34,
    H: {
        H: "HH–HH"
    },
    Hm: _2oqw27,
    Hmv: _2oqw33
}, _2oqw128 = {
    basic: _2oqw111,
    cldr: _2oqw122
}, _2oqw129 = {
    basic: _2oqw112,
    cldr: _2oqw121
}, _2oqw130 = {
    abbreviated: _2oqw109,
    narrow: _2oqw109,
    wide: _2oqw109
}, _2oqw131 = {
    format: _2oqw130
}, _2oqw132 = {
    beforeCurrency: _2oqw123,
    afterCurrency: _2oqw123
}, _2oqw133 = {
    "short": _2oqw107,
    "default": "¤#,##0.00",
    other: "{0} {1}",
    currencySpacing: _2oqw132
}, _2oqw134 = {
    scientific: {
        "default": "#E0"
    },
    decimal: _2oqw119,
    currency: _2oqw133,
    percent: {
        "default": "#,##0%"
    }
}, _2oqw135 = {
    dayParts: _2oqw99,
    days: _2oqw131,
    months: _2oqw131,
    years: _2oqw131,
    zodiacs: _2oqw100
}, _2oqw136 = {
    era: {
        displayName: "纪元"
    },
    year: _2oqw84,
    "year-short": _2oqw74,
    "year-narrow": _2oqw74,
    quarter: _2oqw91,
    "quarter-short": _2oqw78,
    "quarter-narrow": _2oqw78,
    month: _2oqw86,
    "month-short": _2oqw79,
    "month-narrow": _2oqw79,
    week: _2oqw85,
    "week-short": _2oqw75,
    "week-narrow": _2oqw75,
    day: _2oqw90,
    "day-short": _2oqw76,
    "day-narrow": _2oqw76,
    weekday: {
        displayName: "工作日"
    },
    dayperiod: _2oqw2,
    hour: _2oqw80,
    "hour-short": _2oqw80,
    "hour-narrow": _2oqw80,
    minute: _2oqw81,
    "minute-short": _2oqw81,
    "minute-narrow": _2oqw81,
    second: _2oqw82,
    "second-short": _2oqw77,
    "second-narrow": _2oqw77,
    zone: {
        displayName: "时区"
    },
    sun: _2oqw35,
    "sun-short": _2oqw35,
    "sun-narrow": _2oqw35,
    mon: _2oqw36,
    "mon-short": _2oqw36,
    "mon-narrow": _2oqw36,
    tue: _2oqw37,
    "tue-short": _2oqw37,
    "tue-narrow": _2oqw37,
    wed: _2oqw38,
    "wed-short": _2oqw38,
    "wed-narrow": _2oqw38,
    thu: _2oqw39,
    "thu-short": _2oqw39,
    "thu-narrow": _2oqw39,
    fri: _2oqw40,
    "fri-short": _2oqw40,
    "fri-narrow": _2oqw40,
    sat: _2oqw41,
    "sat-short": _2oqw41,
    "sat-narrow": _2oqw41
}, _2oqw137 = {
    dateFormats: {
        basic: {},
        cldr: {}
    },
    fields: _2oqw136
}, _2oqw138 = [ "大化 (645–650)", "白雉 (650–671)", "白凤 (672–686)", "朱鸟 (686–701)", "大宝 (701–704)", "庆云 (704–708)", "和铜 (708–715)", "灵龟 (715–717)", "养老 (717–724)", "神龟 (724–729)", "天平 (729–749)", "天平感宝 (749–749)", "天平胜宝 (749–757)", "天平宝字 (757–765)", "天平神护 (765–767)", "神护景云 (767–770)", "宝龟 (770–780)", "天应 (781–782)", "延历 (782–806)", "大同 (806–810)", "弘仁 (810–824)", "天长 (824–834)", "承和 (834–848)", "嘉祥 (848–851)", "仁寿 (851–854)", "齐衡 (854–857)", "天安 (857–859)", "贞观 (859–877)", "元庆 (877–885)", "仁和 (885–889)", "宽平 (889–898)", "昌泰 (898–901)", "延喜 (901–923)", "延长 (923–931)", "承平 (931–938)", "天庆 (938–947)", "天历 (947–957)", "天德 (957–961)", "应和 (961–964)", "康保 (964–968)", "安和 (968–970)", "天禄 (970–973)", "天延 (973–976)", "贞元 (976–978)", "天元 (978–983)", "永观 (983–985)", "宽和 (985–987)", "永延 (987–989)", "永祚 (989–990)", "正历 (990–995)", "长德 (995–999)", "长保 (999–1004)", "宽弘 (1004–1012)", "长和 (1012–1017)", "宽仁 (1017–1021)", "治安 (1021–1024)", "万寿 (1024–1028)", "长元 (1028–1037)", "长历 (1037–1040)", "长久 (1040–1044)", "宽德 (1044–1046)", "永承 (1046–1053)", "天喜 (1053–1058)", "康平 (1058–1065)", "治历 (1065–1069)", "延久 (1069–1074)", "承保 (1074–1077)", "正历 (1077–1081)", "永保 (1081–1084)", "应德 (1084–1087)", "宽治 (1087–1094)", "嘉保 (1094–1096)", "永长 (1096–1097)", "承德 (1097–1099)", "康和 (1099–1104)", "长治 (1104–1106)", "嘉承 (1106–1108)", "天仁 (1108–1110)", "天永 (1110–1113)", "永久 (1113–1118)", "元永 (1118–1120)", "保安 (1120–1124)", "天治 (1124–1126)", "大治 (1126–1131)", "天承 (1131–1132)", "长承 (1132–1135)", "保延 (1135–1141)", "永治 (1141–1142)", "康治 (1142–1144)", "天养 (1144–1145)", "久安 (1145–1151)", "仁平 (1151–1154)", "久寿 (1154–1156)", "保元 (1156–1159)", "平治 (1159–1160)", "永历 (1160–1161)", "应保 (1161–1163)", "长宽 (1163–1165)", "永万 (1165–1166)", "仁安 (1166–1169)", "嘉应 (1169–1171)", "承安 (1171–1175)", "安元 (1175–1177)", "治承 (1177–1181)", "养和 (1181–1182)", "寿永 (1182–1184)", "元历 (1184–1185)", "文治 (1185–1190)", "建久 (1190–1199)", "正治 (1199–1201)", "建仁 (1201–1204)", "元久 (1204–1206)", "建永 (1206–1207)", "承元 (1207–1211)", "建历 (1211–1213)", "建保 (1213–1219)", "承久 (1219–1222)", "贞应 (1222–1224)", "元仁 (1224–1225)", "嘉禄 (1225–1227)", "安贞 (1227–1229)", "宽喜 (1229–1232)", "贞永 (1232–1233)", "天福 (1233–1234)", "文历 (1234–1235)", "嘉祯 (1235–1238)", "历仁 (1238–1239)", "延应 (1239–1240)", "仁治 (1240–1243)", "宽元 (1243–1247)", "宝治 (1247–1249)", "建长 (1249–1256)", "康元 (1256–1257)", "正嘉 (1257–1259)", "正元 (1259–1260)", "文应 (1260–1261)", "弘长 (1261–1264)", "文永 (1264–1275)", "建治 (1275–1278)", "弘安 (1278–1288)", "正应 (1288–1293)", "永仁 (1293–1299)", "正安 (1299–1302)", "干元 (1302–1303)", "嘉元 (1303–1306)", "德治 (1306–1308)", "延庆 (1308–1311)", "应长 (1311–1312)", "正和 (1312–1317)", "文保 (1317–1319)", "元应 (1319–1321)", "元亨 (1321–1324)", "正中 (1324–1326)", "嘉历 (1326–1329)", "元德 (1329–1331)", "元弘 (1331–1334)", "建武 (1334–1336)", "延元 (1336–1340)", "兴国 (1340–1346)", "正平 (1346–1370)", "建德 (1370–1372)", "文中 (1372–1375)", "天授 (1375–1379)", "康历 (1379–1381)", "弘和 (1381–1384)", "元中 (1384–1392)", "至德 (1384–1387)", "嘉庆 (1387–1389)", "康应 (1389–1390)", "明德 (1390–1394)", "应永 (1394–1428)", "正长 (1428–1429)", "永享 (1429–1441)", "嘉吉 (1441–1444)", "文安 (1444–1449)", "宝德 (1449–1452)", "享德 (1452–1455)", "康正 (1455–1457)", "长禄 (1457–1460)", "宽正 (1460–1466)", "文正 (1466–1467)", "应仁 (1467–1469)", "文明 (1469–1487)", "长享 (1487–1489)", "延德 (1489–1492)", "明应 (1492–1501)", "文龟 (1501–1504)", "永正 (1504–1521)", "大永 (1521–1528)", "享禄 (1528–1532)", "天文 (1532–1555)", "弘治 (1555–1558)", "永禄 (1558–1570)", "元龟 (1570–1573)", "天正 (1573–1592)", "文禄 (1592–1596)", "庆长 (1596–1615)", "元和 (1615–1624)", "宽永 (1624–1644)", "正保 (1644–1648)", "庆安 (1648–1652)", "承应 (1652–1655)", "明历 (1655–1658)", "万治 (1658–1661)", "宽文 (1661–1673)", "延宝 (1673–1681)", "天和 (1681–1684)", "贞享 (1684–1688)", "元禄 (1688–1704)", "宝永 (1704–1711)", "正德 (1711–1716)", "享保 (1716–1736)", "元文 (1736–1741)", "宽保 (1741–1744)", "延享 (1744–1748)", "宽延 (1748–1751)", "宝历 (1751–1764)", "明和 (1764–1772)", "安永 (1772–1781)", "天明 (1781–1789)", "宽政 (1789–1801)", "享和 (1801–1804)", "文化 (1804–1818)", "文政 (1818–1830)", "天保 (1830–1844)", "弘化 (1844–1848)", "嘉永 (1848–1854)", "安政 (1854–1860)", "万延 (1860–1861)", "文久 (1861–1864)", "元治 (1864–1865)", "庆应 (1865–1868)", "明治", "大正", "昭和", "平成" ], _2oqw139 = {
    dateFormats: _2oqw128,
    datePartsOrder: "dmy",
    dateIntervalFormats: _2oqw124,
    dateIntervalFallbackFormat: "{0}–{1}",
    dayNames: _2oqw115,
    dayPeriods: _2oqw125,
    monthNames: _2oqw117,
    eraNames: _2oqw32,
    quarterNames: _2oqw103,
    fields: _2oqw136
}, _2oqw140 = {
    dateFormats: _2oqw129,
    datePartsOrder: "dmy",
    dateIntervalFormats: _2oqw124,
    dateIntervalFallbackFormat: "{0}–{1}",
    dayNames: _2oqw115,
    dayPeriods: _2oqw125,
    monthNames: _2oqw118,
    eraNames: _2oqw58,
    quarterNames: _2oqw103,
    fields: _2oqw136
}, _2oqw141 = {
    dateFormats: _2oqw126,
    datePartsOrder: "md",
    dateIntervalFormats: _2oqw127,
    dateIntervalFallbackFormat: "{0}–{1}",
    dayNames: _2oqw115,
    dayPeriods: _2oqw125,
    cyclicNames: _2oqw135,
    monthNames: _2oqw116,
    monthPatterns: _2oqw95,
    quarterNames: _2oqw103,
    fields: _2oqw136
};

inter.id = "zh_hans_mo";

inter.unitPatterns = {
    "long": {
        unit: {
            concentrKarat: {
                other: "{0}开"
            },
            durationSecond: {
                other: "{0}秒"
            },
            temperatureKelvin: {
                other: "{0}开氏度"
            },
            accelerationGForce: {
                other: "{0}G力"
            },
            accelerationMeterPerSecondSquared: {
                other: "{0}米/秒²"
            },
            angleRevolution: {
                other: "{0}转"
            },
            angleRadian: {
                other: "{0}弧度"
            },
            angleDegree: {
                other: "{0}度"
            },
            angleArcMinute: {
                other: "{0}弧分"
            },
            angleArcSecond: {
                other: "{0}弧秒"
            },
            areaSquareKilometer: {
                other: "{0}平方公里"
            },
            areaHectare: {
                other: "{0}公顷"
            },
            areaSquareMeter: {
                other: "{0}平方米"
            },
            areaSquareCentimeter: {
                other: "{0}平方厘米"
            },
            areaSquareMile: {
                other: "{0}平方英里"
            },
            areaAcre: {
                other: "{0}英亩"
            },
            areaSquareYard: {
                other: "{0}平方码"
            },
            areaSquareFoot: {
                other: "{0}平方英尺"
            },
            areaSquareInch: {
                other: "{0}平方英寸"
            },
            consumptionLiterPerKilometer: {
                other: "每公里{0}升"
            },
            "consumptionLiterPer-100kilometers": {
                other: "{0}升/100千米"
            },
            consumptionMilePerGallon: {
                other: "每加仑{0}英里"
            },
            digitalTerabyte: {
                other: "{0}太字节"
            },
            digitalTerabit: {
                other: "{0}太比特"
            },
            digitalGigabyte: {
                other: "{0}吉字节"
            },
            digitalGigabit: {
                other: "{0}吉比特"
            },
            digitalMegabyte: {
                other: "{0}兆字节"
            },
            digitalMegabit: {
                other: "{0}兆比特"
            },
            digitalKilobyte: {
                other: "{0}千字节"
            },
            digitalKilobit: {
                other: "{0}千比特"
            },
            digitalByte: {
                other: "{0}字节"
            },
            digitalBit: {
                other: "{0}比特"
            },
            durationCentury: {
                other: "{0}世纪"
            },
            durationYear: {
                other: "{0}年"
            },
            durationMonth: {
                other: "{0}个月"
            },
            durationWeek: {
                other: "{0}周"
            },
            durationDay: {
                other: "{0}天"
            },
            durationHour: {
                other: "{0}小时"
            },
            durationMinute: {
                other: "{0}分钟"
            },
            durationMillisecond: {
                other: "{0}毫秒"
            },
            durationMicrosecond: {
                other: "{0}微秒"
            },
            durationNanosecond: {
                other: "{0}纳秒"
            },
            electricAmpere: {
                other: "{0}安培"
            },
            electricMilliampere: {
                other: "{0}毫安"
            },
            electricOhm: {
                other: "{0}欧姆"
            },
            electricVolt: {
                other: "{0}伏特"
            },
            energyKilocalorie: {
                other: "{0}千卡"
            },
            energyCalorie: {
                other: "{0}卡路里"
            },
            energyFoodcalorie: {
                other: "{0}卡路里"
            },
            energyKilojoule: {
                other: "{0}千焦"
            },
            energyJoule: {
                other: "{0}焦耳"
            },
            energyKilowattHour: {
                other: "{0}千瓦时"
            },
            frequencyGigahertz: {
                other: "{0}吉赫"
            },
            frequencyMegahertz: {
                other: "{0}兆赫"
            },
            frequencyKilohertz: {
                other: "{0}千赫"
            },
            frequencyHertz: {
                other: "{0}赫兹"
            },
            lengthKilometer: {
                other: "{0}公里"
            },
            lengthMeter: {
                other: "{0}米"
            },
            lengthDecimeter: {
                other: "{0}分米"
            },
            lengthCentimeter: {
                other: "{0}厘米"
            },
            lengthMillimeter: {
                other: "{0}毫米"
            },
            lengthMicrometer: {
                other: "{0}微米"
            },
            lengthNanometer: {
                other: "{0}纳米"
            },
            lengthPicometer: {
                other: "{0}皮米"
            },
            lengthMile: {
                other: "{0}英里"
            },
            lengthYard: {
                other: "{0}码"
            },
            lengthFoot: {
                other: "{0}英尺"
            },
            lengthInch: {
                other: "{0}英寸"
            },
            lengthParsec: {
                other: "{0}秒差距"
            },
            lengthLightYear: {
                other: "{0}光年"
            },
            lengthAstronomicalUnit: {
                other: "{0}天文单位"
            },
            lengthNauticalMile: {
                other: "{0}海里"
            },
            lengthMileScandinavian: _2oqw1,
            lightLux: {
                other: "{0}勒克斯"
            },
            massMetricTon: {
                other: "{0}公吨"
            },
            massKilogram: {
                other: "{0}千克"
            },
            massGram: {
                other: "{0}克"
            },
            massMilligram: {
                other: "{0}毫克"
            },
            massMicrogram: {
                other: "{0}微克"
            },
            massTon: {
                other: "{0}吨"
            },
            massPound: {
                other: "{0}磅"
            },
            massOunce: {
                other: "{0}盎司"
            },
            massOunceTroy: {
                other: "{0}金衡制盎司"
            },
            massCarat: {
                other: "{0}克拉"
            },
            powerGigawatt: {
                other: "{0}吉瓦"
            },
            powerMegawatt: {
                other: "{0}兆瓦"
            },
            powerKilowatt: {
                other: "{0}千瓦"
            },
            powerWatt: {
                other: "{0}瓦特"
            },
            powerMilliwatt: {
                other: "{0}毫瓦"
            },
            powerHorsepower: {
                other: "{0}马力"
            },
            pressureHectopascal: {
                other: "{0}百帕斯卡"
            },
            pressureMillimeterOfMercury: {
                other: "{0}毫米汞柱"
            },
            pressurePoundPerSquareInch: {
                other: "每平方英寸{0}磅"
            },
            pressureInchHg: {
                other: "{0}英寸汞柱"
            },
            pressureMillibar: {
                other: "{0}毫巴"
            },
            speedKilometerPerHour: {
                other: "每小时{0}公里"
            },
            speedMeterPerSecond: {
                other: "每秒{0}米"
            },
            speedMilePerHour: {
                other: "每小时{0}英里"
            },
            speedKnot: {
                other: "{0}海里/小时"
            },
            temperatureGeneric: {
                other: "{0}°"
            },
            temperatureCelsius: {
                other: "{0}摄氏度"
            },
            temperatureFahrenheit: {
                other: "{0}华氏度"
            },
            volumeCubicKilometer: {
                other: "{0}立方公里"
            },
            volumeCubicMeter: {
                other: "{0}立方米"
            },
            volumeCubicCentimeter: {
                other: "{0}立方厘米"
            },
            volumeCubicMile: {
                other: "{0}立方英里"
            },
            volumeCubicYard: {
                other: "{0}立方码"
            },
            volumeCubicFoot: {
                other: "{0}立方英尺"
            },
            volumeCubicInch: {
                other: "{0}立方英寸"
            },
            volumeMegaliter: {
                other: "{0}兆升"
            },
            volumeHectoliter: {
                other: "{0}公石"
            },
            volumeLiter: {
                other: "{0}公升"
            },
            volumeDeciliter: {
                other: "{0}分升"
            },
            volumeCentiliter: {
                other: "{0}厘升"
            },
            volumeMilliliter: {
                other: "{0}毫升"
            },
            volumePintMetric: {
                other: "{0}公制品脱"
            },
            volumeCupMetric: {
                other: "{0}公制杯"
            },
            volumeAcreFoot: {
                other: "{0}英亩英尺"
            },
            volumeGallon: {
                other: "{0}加仑"
            },
            volumeQuart: {
                other: "{0}夸脱"
            },
            volumePint: {
                other: "{0}品脱"
            },
            volumeCup: {
                other: "{0}杯"
            },
            volumeFluidOunce: {
                other: "{0}液盎司"
            },
            volumeTablespoon: {
                other: "{0}汤匙"
            },
            volumeTeaspoon: {
                other: "{0}茶匙"
            }
        },
        compoundUnit: {
            per: "{0}每{1}"
        }
    },
    "short": {
        unit: {
            accelerationGForce: {
                other: "{0}G力"
            },
            concentrKarat: {
                other: "{0}开"
            },
            lengthPicometer: {
                other: "{0}皮米"
            },
            lengthYard: {
                other: "{0}码"
            },
            temperatureKelvin: {
                other: "{0}°K"
            },
            accelerationMeterPerSecondSquared: {
                other: "{0}米/秒²"
            },
            angleRevolution: {
                other: "{0}转"
            },
            angleRadian: {
                other: "{0}弧度"
            },
            angleDegree: {
                other: "{0}°"
            },
            angleArcMinute: {
                other: "{0}弧分"
            },
            angleArcSecond: {
                other: "{0}弧秒"
            },
            areaSquareKilometer: {
                other: "{0}平方公里"
            },
            areaHectare: {
                other: "{0}公顷"
            },
            areaSquareMeter: {
                other: "{0}平方米"
            },
            areaSquareCentimeter: {
                other: "{0}平方厘米"
            },
            areaSquareMile: {
                other: "{0}平方英里"
            },
            areaAcre: {
                other: "{0}英亩"
            },
            areaSquareYard: {
                other: "{0}平方码"
            },
            areaSquareFoot: {
                other: "{0}平方英尺"
            },
            areaSquareInch: {
                other: "{0}平方英寸"
            },
            consumptionLiterPerKilometer: {
                other: "每公里{0}升"
            },
            "consumptionLiterPer-100kilometers": {
                other: "{0}升/100千米"
            },
            consumptionMilePerGallon: {
                other: "每加仑{0}英里"
            },
            digitalTerabyte: {
                other: "{0}太字节"
            },
            digitalTerabit: {
                other: "{0}太比特"
            },
            digitalGigabyte: {
                other: "{0}吉字节"
            },
            digitalGigabit: {
                other: "{0}吉比特"
            },
            digitalMegabyte: {
                other: "{0}兆字节"
            },
            digitalMegabit: {
                other: "{0}兆比特"
            },
            digitalKilobyte: {
                other: "{0}千字节"
            },
            digitalKilobit: {
                other: "{0}千比特"
            },
            digitalByte: {
                other: "{0}字节"
            },
            digitalBit: {
                other: "{0}比特"
            },
            durationCentury: {
                other: "{0}世纪"
            },
            durationYear: {
                other: "{0}年"
            },
            durationMonth: {
                other: "{0}个月"
            },
            durationWeek: {
                other: "{0}周"
            },
            durationDay: {
                other: "{0}天"
            },
            durationHour: {
                other: "{0}小时"
            },
            durationMinute: {
                other: "{0}分钟"
            },
            durationSecond: {
                other: "{0}秒"
            },
            durationMillisecond: {
                other: "{0}毫秒"
            },
            durationMicrosecond: {
                other: "{0}微秒"
            },
            durationNanosecond: {
                other: "{0}纳秒"
            },
            electricAmpere: {
                other: "{0}安"
            },
            electricMilliampere: {
                other: "{0}毫安"
            },
            electricOhm: {
                other: "{0}欧"
            },
            electricVolt: {
                other: "{0}伏"
            },
            energyKilocalorie: {
                other: "{0}千卡"
            },
            energyCalorie: {
                other: "{0}卡"
            },
            energyFoodcalorie: {
                other: "{0}卡"
            },
            energyKilojoule: {
                other: "{0}千焦"
            },
            energyJoule: {
                other: "{0}焦耳"
            },
            energyKilowattHour: {
                other: "{0}千瓦时"
            },
            frequencyGigahertz: {
                other: "{0}吉赫"
            },
            frequencyMegahertz: {
                other: "{0}兆赫"
            },
            frequencyKilohertz: {
                other: "{0}千赫"
            },
            frequencyHertz: {
                other: "{0}赫"
            },
            lengthKilometer: {
                other: "{0}公里"
            },
            lengthMeter: {
                other: "{0}米"
            },
            lengthDecimeter: {
                other: "{0}分米"
            },
            lengthCentimeter: {
                other: "{0}厘米"
            },
            lengthMillimeter: {
                other: "{0}毫米"
            },
            lengthMicrometer: {
                other: "{0}微米"
            },
            lengthNanometer: {
                other: "{0}纳米"
            },
            lengthMile: {
                other: "{0}英里"
            },
            lengthFoot: {
                other: "{0}英尺"
            },
            lengthInch: {
                other: "{0}英寸"
            },
            lengthParsec: {
                other: "{0}秒差距"
            },
            lengthLightYear: {
                other: "{0}光年"
            },
            lengthAstronomicalUnit: {
                other: "{0}天文单位"
            },
            lengthNauticalMile: {
                other: "{0}海里"
            },
            lengthMileScandinavian: _2oqw1,
            lightLux: {
                other: "{0}勒克斯"
            },
            massMetricTon: {
                other: "{0}公吨"
            },
            massKilogram: {
                other: "{0}千克"
            },
            massGram: {
                other: "{0}克"
            },
            massMilligram: {
                other: "{0}毫克"
            },
            massMicrogram: {
                other: "{0}微克"
            },
            massTon: {
                other: "{0}吨"
            },
            massPound: {
                other: "{0}磅"
            },
            massOunce: {
                other: "{0}盎司"
            },
            massOunceTroy: {
                other: "{0}金衡制盎司"
            },
            massCarat: {
                other: "{0}克拉"
            },
            powerGigawatt: {
                other: "{0}吉瓦"
            },
            powerMegawatt: {
                other: "{0}兆瓦"
            },
            powerKilowatt: {
                other: "{0}千瓦"
            },
            powerWatt: {
                other: "{0}瓦"
            },
            powerMilliwatt: {
                other: "{0}毫瓦"
            },
            powerHorsepower: {
                other: "{0}马力"
            },
            pressureHectopascal: {
                other: "{0}百帕"
            },
            pressureMillimeterOfMercury: {
                other: "{0}毫米汞柱"
            },
            pressurePoundPerSquareInch: {
                other: "每平方英寸{0}磅"
            },
            pressureInchHg: {
                other: "{0}英寸汞柱"
            },
            pressureMillibar: {
                other: "{0}毫巴"
            },
            speedKilometerPerHour: {
                other: "每小时{0}公里"
            },
            speedMeterPerSecond: {
                other: "每秒{0}米"
            },
            speedMilePerHour: {
                other: "每小时{0}英里"
            },
            speedKnot: {
                other: "{0}海里/小时"
            },
            temperatureGeneric: {
                other: "{0}°"
            },
            temperatureCelsius: {
                other: "{0}°C"
            },
            temperatureFahrenheit: {
                other: "{0}°F"
            },
            volumeCubicKilometer: {
                other: "{0}立方公里"
            },
            volumeCubicMeter: {
                other: "{0}立方米"
            },
            volumeCubicCentimeter: {
                other: "{0}立方厘米"
            },
            volumeCubicMile: {
                other: "{0}立方英里"
            },
            volumeCubicYard: {
                other: "{0}立方码"
            },
            volumeCubicFoot: {
                other: "{0}立方英尺"
            },
            volumeCubicInch: {
                other: "{0}立方英寸"
            },
            volumeMegaliter: {
                other: "{0}兆升"
            },
            volumeHectoliter: {
                other: "{0}公石"
            },
            volumeLiter: {
                other: "{0}升"
            },
            volumeDeciliter: {
                other: "{0}分升"
            },
            volumeCentiliter: {
                other: "{0}厘升"
            },
            volumeMilliliter: {
                other: "{0}毫升"
            },
            volumePintMetric: {
                other: "{0}公制品脱"
            },
            volumeCupMetric: {
                other: "{0}公制杯"
            },
            volumeAcreFoot: {
                other: "{0}英亩英尺"
            },
            volumeGallon: {
                other: "{0}加仑"
            },
            volumeQuart: {
                other: "{0}夸脱"
            },
            volumePint: {
                other: "{0}品脱"
            },
            volumeCup: {
                other: "{0}杯"
            },
            volumeFluidOunce: {
                other: "{0}液盎司"
            },
            volumeTablespoon: {
                other: "{0}汤匙"
            },
            volumeTeaspoon: {
                other: "{0}茶匙"
            },
            concentrMilligramPerDeciliter: {
                other: "{0} mg/dL"
            },
            concentrMillimolePerLiter: {
                other: "{0} mmol/L"
            },
            concentrPartPerMillion: {
                other: "{0} ppm"
            },
            consumptionMilePerGallonImperial: {
                other: "{0} mpg Imp."
            },
            lengthFurlong: {
                other: "{0} fur"
            },
            lengthFathom: {
                other: "{0} fm"
            },
            massStone: {
                other: "{0} st"
            },
            volumeBushel: {
                other: "{0} bu"
            },
            volumeGallonImperial: {
                other: "{0} gal Imp."
            }
        },
        compoundUnit: {
            per: "{0}/{1}"
        }
    },
    narrow: {
        unit: {
            lengthPicometer: {
                other: "{0}皮米"
            },
            lengthMile: {
                other: "{0}英里"
            },
            lengthYard: {
                other: "{0}码"
            },
            lengthFoot: {
                other: "{0}英尺"
            },
            lengthInch: {
                other: "{0}英寸"
            },
            lengthLightYear: {
                other: "{0}光年"
            },
            temperatureCelsius: {
                other: "{0}°C"
            },
            accelerationGForce: {
                other: "{0}G"
            },
            angleDegree: {
                other: "{0}°"
            },
            angleArcMinute: {
                other: "{0}′"
            },
            angleArcSecond: {
                other: "{0}″"
            },
            areaSquareKilometer: {
                other: "{0}km²"
            },
            areaHectare: {
                other: "{0}ha"
            },
            areaSquareMeter: {
                other: "{0}m²"
            },
            areaSquareMile: {
                other: "{0}mi²"
            },
            areaAcre: {
                other: "{0}ac"
            },
            areaSquareFoot: {
                other: "{0}ft²"
            },
            "consumptionLiterPer-100kilometers": {
                other: "{0}L/100km"
            },
            durationYear: {
                other: "{0}年"
            },
            durationMonth: {
                other: "{0}个月"
            },
            durationWeek: {
                other: "{0}周"
            },
            durationDay: {
                other: "{0}天"
            },
            durationHour: {
                other: "{0}小时"
            },
            durationMinute: {
                other: "{0}分钟"
            },
            durationSecond: {
                other: "{0}秒"
            },
            durationMillisecond: {
                other: "{0}毫秒"
            },
            lengthKilometer: {
                other: "{0}公里"
            },
            lengthMeter: {
                other: "{0}米"
            },
            lengthCentimeter: {
                other: "{0}厘米"
            },
            lengthMillimeter: {
                other: "{0}毫米"
            },
            massKilogram: {
                other: "{0}千克"
            },
            massGram: {
                other: "{0}克"
            },
            massPound: {
                other: "{0}磅"
            },
            massOunce: {
                other: "{0}盎司"
            },
            powerKilowatt: {
                other: "{0}kW"
            },
            powerWatt: {
                other: "{0}W"
            },
            powerHorsepower: {
                other: "{0}hp"
            },
            pressureHectopascal: {
                other: "{0}hPa"
            },
            pressureInchHg: {
                other: '{0}" Hg'
            },
            pressureMillibar: {
                other: "{0}mb"
            },
            speedKilometerPerHour: {
                other: "每小时{0}公里"
            },
            speedMeterPerSecond: {
                other: "{0}m/s"
            },
            speedMilePerHour: {
                other: "{0}mi/h"
            },
            temperatureFahrenheit: {
                other: "{0}°F"
            },
            volumeCubicKilometer: {
                other: "{0}km³"
            },
            volumeCubicMile: {
                other: "{0}mi³"
            },
            volumeLiter: {
                other: "{0}升"
            }
        },
        compoundUnit: {
            per: "{0}/{1}"
        }
    }
};

inter.numbers = {
    ahom: {
        symbols: _2oqw92,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    arab: {
        symbols: {
            decimal: "٫",
            group: "٬",
            list: "؛",
            percentSign: "٪",
            plusSign: "‏+",
            minusSign: "‏-",
            exponential: "اس",
            superscriptingExponent: "×",
            perMille: "؉",
            infinity: "∞",
            nan: "NaN",
            timeSeparator: ":"
        },
        formats: _2oqw134,
        digits: [ "٠", "١", "٢", "٣", "٤", "٥", "٦", "٧", "٨", "٩" ]
    },
    arabext: {
        symbols: {
            decimal: "٫",
            group: "٬",
            list: "؛",
            percentSign: "٪",
            plusSign: "‎+‎",
            minusSign: "‎-‎",
            exponential: "×۱۰^",
            superscriptingExponent: "×",
            perMille: "؉",
            infinity: "∞",
            nan: "NaN",
            timeSeparator: "٫"
        },
        formats: _2oqw134,
        digits: [ "۰", "۱", "۲", "۳", "۴", "۵", "۶", "۷", "۸", "۹" ]
    },
    armn: {
        symbols: _2oqw92,
        digits: "renderArmenianUpper"
    },
    armnlow: {
        symbols: _2oqw92,
        digits: "renderArmenianLower"
    },
    bali: {
        symbols: _2oqw92,
        formats: _2oqw134,
        digits: [ "᭐", "᭑", "᭒", "᭓", "᭔", "᭕", "᭖", "᭗", "᭘", "᭙" ]
    },
    beng: {
        symbols: _2oqw92,
        formats: _2oqw134,
        digits: [ "০", "১", "২", "৩", "৪", "৫", "৬", "৭", "৮", "৯" ]
    },
    brah: {
        symbols: _2oqw92,
        formats: _2oqw134,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    cakm: {
        symbols: _2oqw92,
        formats: _2oqw134,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    cham: {
        symbols: _2oqw92,
        formats: _2oqw134,
        digits: [ "꩐", "꩑", "꩒", "꩓", "꩔", "꩕", "꩖", "꩗", "꩘", "꩙" ]
    },
    cyrl: {
        symbols: _2oqw92,
        digits: "renderCyrillicLower"
    },
    deva: {
        symbols: _2oqw92,
        formats: _2oqw134,
        digits: [ "०", "१", "२", "३", "४", "५", "६", "७", "८", "९" ]
    },
    ethi: {
        symbols: _2oqw92,
        digits: "renderEthiopic"
    },
    finance: _2oqw94,
    fullwide: {
        symbols: _2oqw92,
        formats: _2oqw134,
        digits: [ "０", "１", "２", "３", "４", "５", "６", "７", "８", "９" ]
    },
    geor: {
        symbols: _2oqw92,
        digits: "renderGeorgian"
    },
    grek: {
        symbols: _2oqw92,
        digits: "renderGreekUpper"
    },
    greklow: {
        symbols: _2oqw92,
        digits: "renderGreekLower"
    },
    gujr: {
        symbols: _2oqw92,
        formats: _2oqw134,
        digits: [ "૦", "૧", "૨", "૩", "૪", "૫", "૬", "૭", "૮", "૯" ]
    },
    guru: {
        symbols: _2oqw92,
        formats: _2oqw134,
        digits: [ "੦", "੧", "੨", "੩", "੪", "੫", "੬", "੭", "੮", "੯" ]
    },
    hanidays: {
        symbols: _2oqw92,
        digits: "renderSpelloutNumberingDays"
    },
    hanidec: {
        symbols: _2oqw92,
        formats: _2oqw134,
        digits: [ "〇", "一", "二", "三", "四", "五", "六", "七", "八", "九" ]
    },
    hans: _2oqw102,
    hansfin: _2oqw104,
    hant: _2oqw102,
    hantfin: _2oqw104,
    hebr: {
        symbols: _2oqw92,
        digits: "renderHebrew"
    },
    hmng: {
        symbols: _2oqw92,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    java: {
        symbols: _2oqw92,
        formats: _2oqw134,
        digits: [ "꧐", "꧑", "꧒", "꧓", "꧔", "꧕", "꧖", "꧗", "꧘", "꧙" ]
    },
    jpan: _2oqw102,
    jpanfin: _2oqw104,
    kali: {
        symbols: _2oqw92,
        formats: _2oqw134,
        digits: [ "꤀", "꤁", "꤂", "꤃", "꤄", "꤅", "꤆", "꤇", "꤈", "꤉" ]
    },
    khmr: {
        symbols: _2oqw92,
        formats: _2oqw134,
        digits: [ "០", "១", "២", "៣", "៤", "៥", "៦", "៧", "៨", "៩" ]
    },
    knda: {
        symbols: _2oqw92,
        formats: _2oqw134,
        digits: [ "೦", "೧", "೨", "೩", "೪", "೫", "೬", "೭", "೮", "೯" ]
    },
    lana: {
        symbols: _2oqw92,
        formats: _2oqw134,
        digits: [ "᪀", "᪁", "᪂", "᪃", "᪄", "᪅", "᪆", "᪇", "᪈", "᪉" ]
    },
    lanatham: {
        symbols: _2oqw92,
        formats: _2oqw134,
        digits: [ "᪐", "᪑", "᪒", "᪓", "᪔", "᪕", "᪖", "᪗", "᪘", "᪙" ]
    },
    laoo: {
        symbols: _2oqw92,
        formats: _2oqw134,
        digits: [ "໐", "໑", "໒", "໓", "໔", "໕", "໖", "໗", "໘", "໙" ]
    },
    latn: {
        symbols: _2oqw92,
        formats: _2oqw134,
        digits: [ "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" ]
    },
    lepc: {
        symbols: _2oqw92,
        formats: _2oqw134,
        digits: [ "᱀", "᱁", "᱂", "᱃", "᱄", "᱅", "᱆", "᱇", "᱈", "᱉" ]
    },
    limb: {
        symbols: _2oqw92,
        formats: _2oqw134,
        digits: [ "᥆", "᥇", "᥈", "᥉", "᥊", "᥋", "᥌", "᥍", "᥎", "᥏" ]
    },
    mathbold: {
        symbols: _2oqw92,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathdbl: {
        symbols: _2oqw92,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathmono: {
        symbols: _2oqw92,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathsanb: {
        symbols: _2oqw92,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathsans: {
        symbols: _2oqw92,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mlym: {
        symbols: _2oqw92,
        formats: _2oqw134,
        digits: [ "൦", "൧", "൨", "൩", "൪", "൫", "൬", "൭", "൮", "൯" ]
    },
    modi: {
        symbols: _2oqw92,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mong: {
        symbols: _2oqw92,
        formats: _2oqw134,
        digits: [ "᠐", "᠑", "᠒", "᠓", "᠔", "᠕", "᠖", "᠗", "᠘", "᠙" ]
    },
    mroo: {
        symbols: _2oqw92,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mtei: {
        symbols: _2oqw92,
        formats: _2oqw134,
        digits: [ "꯰", "꯱", "꯲", "꯳", "꯴", "꯵", "꯶", "꯷", "꯸", "꯹" ]
    },
    mymr: {
        symbols: _2oqw92,
        formats: _2oqw134,
        digits: [ "၀", "၁", "၂", "၃", "၄", "၅", "၆", "၇", "၈", "၉" ]
    },
    mymrshan: {
        symbols: _2oqw92,
        formats: _2oqw134,
        digits: [ "႐", "႑", "႒", "႓", "႔", "႕", "႖", "႗", "႘", "႙" ]
    },
    mymrtlng: {
        symbols: _2oqw92,
        digits: [ "꧰", "꧱", "꧲", "꧳", "꧴", "꧵", "꧶", "꧷", "꧸", "꧹" ]
    },
    "native": _2oqw94,
    nkoo: {
        symbols: _2oqw92,
        formats: _2oqw134,
        digits: [ "߀", "߁", "߂", "߃", "߄", "߅", "߆", "߇", "߈", "߉" ]
    },
    olck: {
        symbols: _2oqw92,
        formats: _2oqw134,
        digits: [ "᱐", "᱑", "᱒", "᱓", "᱔", "᱕", "᱖", "᱗", "᱘", "᱙" ]
    },
    orya: {
        symbols: _2oqw92,
        formats: _2oqw134,
        digits: [ "୦", "୧", "୨", "୩", "୪", "୫", "୬", "୭", "୮", "୯" ]
    },
    osma: {
        symbols: _2oqw92,
        formats: _2oqw134,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    roman: {
        symbols: _2oqw92,
        digits: "renderRomanUpper"
    },
    romanlow: {
        symbols: _2oqw92,
        digits: "renderRomanLower"
    },
    saur: {
        symbols: _2oqw92,
        formats: _2oqw134,
        digits: [ "꣐", "꣑", "꣒", "꣓", "꣔", "꣕", "꣖", "꣗", "꣘", "꣙" ]
    },
    shrd: {
        symbols: _2oqw92,
        formats: _2oqw134,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    sind: {
        symbols: _2oqw92,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    sinh: {
        symbols: _2oqw92,
        digits: [ "෦", "෧", "෨", "෩", "෪", "෫", "෬", "෭", "෮", "෯" ]
    },
    sora: {
        symbols: _2oqw92,
        formats: _2oqw134,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    sund: {
        symbols: _2oqw92,
        formats: _2oqw134,
        digits: [ "᮰", "᮱", "᮲", "᮳", "᮴", "᮵", "᮶", "᮷", "᮸", "᮹" ]
    },
    takr: {
        symbols: _2oqw92,
        formats: _2oqw134,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    talu: {
        symbols: _2oqw92,
        formats: _2oqw134,
        digits: [ "᧐", "᧑", "᧒", "᧓", "᧔", "᧕", "᧖", "᧗", "᧘", "᧙" ]
    },
    taml: {
        symbols: _2oqw92,
        digits: "renderTamil"
    },
    tamldec: {
        symbols: _2oqw92,
        formats: _2oqw134,
        digits: [ "௦", "௧", "௨", "௩", "௪", "௫", "௬", "௭", "௮", "௯" ]
    },
    telu: {
        symbols: _2oqw92,
        formats: _2oqw134,
        digits: [ "౦", "౧", "౨", "౩", "౪", "౫", "౬", "౭", "౮", "౯" ]
    },
    thai: {
        symbols: _2oqw92,
        formats: _2oqw134,
        digits: [ "๐", "๑", "๒", "๓", "๔", "๕", "๖", "๗", "๘", "๙" ]
    },
    tirh: {
        symbols: _2oqw92,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    tibt: {
        symbols: _2oqw92,
        formats: _2oqw134,
        digits: [ "༠", "༡", "༢", "༣", "༤", "༥", "༦", "༧", "༨", "༩" ]
    },
    traditio: _2oqw94,
    vaii: {
        symbols: _2oqw92,
        formats: _2oqw134,
        digits: [ "꘠", "꘡", "꘢", "꘣", "꘤", "꘥", "꘦", "꘧", "꘨", "꘩" ]
    },
    wara: {
        symbols: _2oqw92,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    }
};

inter.calendars = {
    buddhist: {
        dateFormats: {
            basic: _2oqw110,
            cldr: {
                d: "d日",
                M: "M月",
                Md: "M-d",
                MEd: "M-dE",
                MMM: "LLL",
                MMMd: "M月d日",
                MMMEd: "M月d日E",
                MMMMd: "M月d日",
                y: "Gy年",
                yyyy: "Gy年",
                yyyyM: "Gy-M",
                yyyyMd: "Gy-M-d",
                yyyyMEd: "Gy-M-d（E）",
                yyyyMMM: "Gy年M月",
                yyyyMMMd: "Gy年M月d日",
                yyyyMMMEd: "Gy年M月d日E",
                yyyyMMMM: "Gy年M月",
                yyyyQQQ: "Gy年第Q季度",
                yyyyQQQQ: "Gy年QQQQ",
                MMdd: "MM-dd",
                MMMMdd: "M月d日",
                E: "ccc",
                Ed: "d日E",
                Gy: "Gy年",
                GyMMM: "Gy年M月",
                GyMMMd: "Gy年M月d日",
                GyMMMEd: "Gy年M月d日E",
                h: "ah时",
                H: "H时",
                hm: "ah:mm",
                Hm: "HH:mm",
                hms: "ah:mm:ss",
                Hms: "HH:mm:ss",
                ms: "mm:ss",
                Ehm: "E h:mm a",
                EHm: "E HH:mm",
                Ehms: "E h:mm:ss a",
                EHms: "E HH:mm:ss"
            }
        },
        datePartsOrder: "ymd",
        dateIntervalFormats: _2oqw124,
        dateIntervalFallbackFormat: "{0}–{1}",
        dayNames: _2oqw115,
        dayPeriods: _2oqw125,
        monthNames: _2oqw117,
        eraNames: {
            wide: [ "佛历" ],
            abbreviated: [ "佛历" ]
        },
        quarterNames: _2oqw103,
        fields: _2oqw136
    },
    chinese: _2oqw141,
    coptic: _2oqw140,
    dangi: _2oqw141,
    ethioaa: _2oqw137,
    ethiopic: _2oqw140,
    gregorian: {
        dateFormats: {
            basic: {
                shortDate: "d/M/yy",
                fullDate: "y年M月d日EEEE",
                longDate: "y年M月d日",
                mediumDate: "y年M月d日",
                fullTime: "zzzz ah:mm:ss",
                longTime: "z ah:mm:ss",
                mediumTime: "ah:mm:ss",
                shortTime: "ah:mm",
                shortDateTime: "d/M/yy ah:mm",
                mediumDateTime: "y年M月d日 ah:mm:ss",
                longDateTime: "y年M月d日 z ah:mm:ss",
                fullDateTime: "y年M月d日EEEE zzzz ah:mm:ss"
            },
            cldr: {
                Md: "d/M",
                MEd: "E, d/M",
                MMdd: "dd/MM",
                MMMMdd: "M月d日",
                yMd: "y年M月d日",
                yMEd: "y年M月d日，E",
                d: "d日",
                E: "ccc",
                Ed: "d日E",
                Ehm: "E ah:mm",
                EHm: "EHH:mm",
                Ehms: "E ah:mm:ss",
                EHms: "EHH:mm:ss",
                Gy: "Gy年",
                GyMMM: "Gy年M月",
                GyMMMd: "Gy年M月d日",
                GyMMMEd: "Gy年M月d日E",
                h: "ah时",
                H: "H时",
                hm: "ah:mm",
                Hm: "HH:mm",
                hms: "ah:mm:ss",
                Hms: "HH:mm:ss",
                hmsv: "v ah:mm:ss",
                Hmsv: "v HH:mm:ss",
                hmv: "v ah:mm",
                Hmv: "v HH:mm",
                M: "M月",
                MMM: "LLL",
                MMMd: "M月d日",
                MMMEd: "M月d日E",
                MMMMd: "M月d日",
                ms: "mm:ss",
                y: "y年",
                yM: "y年M月",
                yMM: "y年M月",
                yMMM: "y年M月",
                yMMMd: "y年M月d日",
                yMMMEd: "y年M月d日E",
                yMMMM: "y年M月",
                yQQQ: "y年第Q季度",
                yQQQQ: "y年第Q季度"
            }
        },
        datePartsOrder: "dmy",
        dateIntervalFormats: {
            d: {
                d: "d日至d日"
            },
            Hmv: _2oqw30,
            Hv: {
                H: "vHH–HH"
            },
            Md: _2oqw6,
            MEd: _2oqw22,
            MMMEd: {
                d: "M月d日E至M月d日E"
            },
            yM: {
                M: "y年M月至y年M月"
            },
            yMd: _2oqw54,
            yMEd: _2oqw61,
            yMMMEd: {
                d: "y年M月d日E至M月d日E"
            },
            h: _2oqw4,
            H: {
                H: "HH–HH"
            },
            hm: _2oqw48,
            Hm: _2oqw27,
            hmv: _2oqw57,
            hv: _2oqw11,
            M: {
                M: "M–M月"
            },
            MMM: {
                M: "LLL至LLL"
            },
            MMMd: _2oqw12,
            y: {
                y: "y–y年"
            },
            yMMM: _2oqw14,
            yMMMd: {
                d: "y年M月d日至d日",
                M: "y年M月d日至M月d日",
                y: "y年M月d日至y年M月d日"
            },
            yMMMM: _2oqw14
        },
        dateIntervalFallbackFormat: "{0}–{1}",
        dayNames: _2oqw115,
        dayPeriods: _2oqw125,
        monthNames: _2oqw117,
        eraNames: {
            wide: [ "公元前", "公元" ],
            abbreviated: [ "公元前", "公元" ]
        },
        quarterNames: _2oqw103,
        fields: _2oqw136
    },
    hebrew: {
        dateFormats: {
            basic: _2oqw110,
            cldr: _2oqw121
        },
        datePartsOrder: "ymd",
        dateIntervalFormats: _2oqw124,
        dateIntervalFallbackFormat: "{0}–{1}",
        dayNames: _2oqw115,
        dayPeriods: _2oqw125,
        monthNames: _2oqw118,
        eraNames: {
            wide: [ "希伯来历" ],
            abbreviated: [ "希伯来历" ]
        },
        quarterNames: _2oqw103,
        fields: _2oqw136
    },
    indian: {
        dateFormats: _2oqw129,
        datePartsOrder: "dmy",
        dateIntervalFormats: _2oqw124,
        dateIntervalFallbackFormat: "{0}–{1}",
        dayNames: _2oqw115,
        dayPeriods: _2oqw125,
        monthNames: _2oqw117,
        eraNames: {
            wide: [ "印度历" ],
            abbreviated: [ "印度历" ]
        },
        quarterNames: _2oqw103,
        fields: _2oqw136
    },
    islamic: _2oqw139,
    "islamic-umalqura": _2oqw139,
    "islamic-tbla": _2oqw139,
    "islamic-civil": _2oqw139,
    "islamic-rgsa": _2oqw139,
    iso8601: _2oqw137,
    japanese: {
        dateFormats: {
            basic: {
                fullDate: "Gy年M月d日EEEE",
                longDate: "Gy年M月d日",
                mediumDate: "Gy年M月d日",
                shortDate: "Gyy-MM-dd",
                fullTime: "zzzz ah:mm:ss",
                longTime: "z ah:mm:ss",
                mediumTime: "ah:mm:ss",
                shortTime: "ah:mm",
                shortDateTime: "Gyy-MM-dd ah:mm",
                mediumDateTime: "Gy年M月d日 ah:mm:ss",
                longDateTime: "Gy年M月d日 z ah:mm:ss",
                fullDateTime: "Gy年M月d日EEEE zzzz ah:mm:ss"
            },
            cldr: {
                d: "d日",
                Ed: "d日E",
                Gy: "Gy年",
                GyMMM: "Gy年M月",
                GyMMMd: "Gy年M月d日",
                GyMMMEd: "Gy年M月d日E",
                h: "ah时",
                H: "H时",
                hm: "ah:mm",
                Hm: "HH:mm",
                hms: "ah:mm:ss",
                Hms: "HH:mm:ss",
                M: "M月",
                Md: "M-d",
                MEd: "M-dE",
                MMM: "LLL",
                MMMd: "M月d日",
                MMMEd: "M月d日E",
                MMMMd: "M月d日",
                ms: "mm:ss",
                y: "Gy年",
                yyyy: "Gy年",
                yyyyM: "Gy-MM",
                yyyyMd: "Gy-MM-dd",
                yyyyMEd: "Gy-M-d（E）",
                yyyyMMM: "Gy年M月",
                yyyyMMMd: "Gy年M月d日",
                yyyyMMMEd: "Gy年M月d日E",
                yyyyMMMM: "Gy年M月",
                yyyyQQQ: "Gy年第Q季度",
                yyyyQQQQ: "Gy年QQQQ",
                MMdd: "MM-dd",
                MMMMdd: "M月d日",
                E: "ccc",
                Ehm: "E h:mm a",
                EHm: "E HH:mm",
                Ehms: "E h:mm:ss a",
                EHms: "E HH:mm:ss"
            }
        },
        datePartsOrder: "ymd",
        dateIntervalFormats: _2oqw124,
        dateIntervalFallbackFormat: "{0}–{1}",
        dayNames: _2oqw115,
        dayPeriods: _2oqw125,
        monthNames: _2oqw117,
        eraNames: {
            wide: _2oqw138,
            abbreviated: _2oqw138
        },
        quarterNames: _2oqw103,
        fields: _2oqw136
    },
    persian: {
        dateFormats: _2oqw129,
        datePartsOrder: "dmy",
        dateIntervalFormats: _2oqw124,
        dateIntervalFallbackFormat: "{0}–{1}",
        dayNames: _2oqw115,
        dayPeriods: _2oqw125,
        monthNames: _2oqw117,
        eraNames: {
            wide: [ "波斯历" ],
            abbreviated: [ "波斯历" ]
        },
        quarterNames: _2oqw103,
        fields: _2oqw136
    },
    roc: {
        dateFormats: {
            basic: _2oqw111,
            cldr: {
                Md: "M-d",
                MEd: "M-dE",
                MMM: "M月",
                d: "d日",
                E: "ccc",
                Ed: "d日E",
                Gy: "Gy年",
                GyMMM: "Gy年M月",
                GyMMMd: "Gy年M月d日",
                GyMMMEd: "Gy年M月d日E",
                M: "M月",
                MMMd: "M月d日",
                MMMEd: "M月d日E",
                MMMMd: "M月d日",
                y: "Gy年",
                yyyy: "Gy年",
                yyyyM: "Gy年M月",
                yyyyMd: "Gy/M/d",
                yyyyMEd: "Gy/M/dE",
                yyyyMMM: "Gy年M月",
                yyyyMMMd: "Gy年M月d日",
                yyyyMMMEd: "Gy年M月d日E",
                yyyyMMMM: "Gy年M月",
                yyyyQQQ: "Gy年第Q季度",
                yyyyQQQQ: "Gy年第Q季度",
                MMdd: "MM-dd",
                MMMMdd: "M月d日",
                h: "ah时",
                H: "H时",
                hm: "ah:mm",
                Hm: "HH:mm",
                hms: "ah:mm:ss",
                Hms: "HH:mm:ss",
                ms: "mm:ss",
                Ehm: "E h:mm a",
                EHm: "E HH:mm",
                Ehms: "E h:mm:ss a",
                EHms: "E HH:mm:ss"
            }
        },
        datePartsOrder: "dmy",
        dateIntervalFormats: _2oqw124,
        dateIntervalFallbackFormat: "{0}–{1}",
        dayNames: _2oqw115,
        dayPeriods: _2oqw125,
        monthNames: _2oqw117,
        eraNames: {
            wide: [ "民国前", "民国" ],
            abbreviated: [ "民国前", "民国" ]
        },
        quarterNames: _2oqw103,
        fields: _2oqw136
    },
    islamicc: _2oqw137
};

inter.pluralRule = function(n) {
    return "other";
};

inter.renderDigitsOrdinal = function(n) {
    if (n < 0) return "第−" + this.renderNumber(-n, "#,###0");
    if (n >= 0) return "第" + this.renderNumber(n, "#,###0");
};

inter.renderSpelloutNumbering = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "负" + this.renderSpelloutNumbering(-n);
    if (isFractional && n > 1) return this.renderSpelloutNumbering(Math.floor(n)) + "点" + this.renderSpelloutNumbering(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,###0");
    if (n >= 1e16) return this.renderSpelloutNumbering(Math.floor(n / 1e16)) + "京" + (n === 1e16 ? "" : this.renderNumber13(n % 1e16));
    if (n >= 1e12) return this.renderSpelloutNumbering(Math.floor(n / 1e12)) + "兆" + (n === 1e12 ? "" : this.renderNumber8(n % 1e12));
    if (n >= 1e8) return this.renderSpelloutNumbering(Math.floor(n / 1e8)) + "亿" + (n === 1e8 ? "" : this.renderNumber5(n % 1e8));
    if (n >= 1e4) return this.renderSpelloutNumbering(Math.floor(n / 1e4)) + "万" + (n === 1e4 ? "" : this.renderNumber4(n % 1e4));
    if (n >= 1e3) return this.renderSpelloutNumbering(Math.floor(n / 1e3)) + "千" + (n === 1e3 ? "" : this.renderNumber3(n % 1e3));
    if (n >= 100) return this.renderSpelloutNumbering(Math.floor(n / 100)) + "百" + (n === 100 ? "" : this.renderNumber2(n % 100));
    if (n >= 20) return this.renderSpelloutNumbering(Math.floor(n / 10)) + "十" + (n === 20 ? "" : this.renderSpelloutNumbering(n % 10));
    if (n >= 10) return "十" + (n === 10 ? "" : this.renderSpelloutNumbering(n % 10));
    if (n >= 9) return "九";
    if (n >= 8) return "八";
    if (n >= 7) return "七";
    if (n >= 6) return "六";
    if (n >= 5) return "五";
    if (n >= 4) return "四";
    if (n >= 3) return "三";
    if (n >= 2) return "二";
    if (n >= 1) return "一";
    if (n >= 0) return "〇";
};

inter.renderArmenianUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderArmenianUpper(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e4) return this.renderNumber(n, "#,##0");
    if (n >= 9e3) return "Ք" + (n === 9e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 8e3) return "Փ" + (n === 8e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 7e3) return "Ւ" + (n === 7e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 6e3) return "Ց" + (n === 6e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 5e3) return "Ր" + (n === 5e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 4e3) return "Տ" + (n === 4e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 3e3) return "Վ" + (n === 3e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 2e3) return "Ս" + (n === 2e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 1e3) return "Ռ" + (n === 1e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 900) return "Ջ" + (n === 900 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 800) return "Պ" + (n === 800 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 700) return "Չ" + (n === 700 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 600) return "Ո" + (n === 600 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 500) return "Շ" + (n === 500 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 400) return "Ն" + (n === 400 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 300) return "Յ" + (n === 300 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 200) return "Մ" + (n === 200 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 100) return "Ճ" + (n === 100 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 90) return "Ղ" + (n === 90 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 80) return "Ձ" + (n === 80 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 70) return "Հ" + (n === 70 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 60) return "Կ" + (n === 60 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 50) return "Ծ" + (n === 50 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 40) return "Խ" + (n === 40 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 30) return "Լ" + (n === 30 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 20) return "Ի" + (n === 20 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 10) return "Ժ" + (n === 10 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 9) return "Թ";
    if (n >= 8) return "Ը";
    if (n >= 7) return "Է";
    if (n >= 6) return "Զ";
    if (n >= 5) return "Ե";
    if (n >= 4) return "Դ";
    if (n >= 3) return "Գ";
    if (n >= 2) return "Բ";
    if (n >= 1) return "Ա";
    if (n >= 0) return "0";
};

inter.renderArmenianLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderArmenianLower(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e4) return this.renderNumber(n, "#,##0");
    if (n >= 9e3) return "ք" + (n === 9e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 8e3) return "փ" + (n === 8e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 7e3) return "ւ" + (n === 7e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 6e3) return "ց" + (n === 6e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 5e3) return "ր" + (n === 5e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 4e3) return "տ" + (n === 4e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 3e3) return "վ" + (n === 3e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 2e3) return "ս" + (n === 2e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 1e3) return "ռ" + (n === 1e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 900) return "ջ" + (n === 900 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 800) return "պ" + (n === 800 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 700) return "չ" + (n === 700 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 600) return "ո" + (n === 600 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 500) return "շ" + (n === 500 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 400) return "ն" + (n === 400 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 300) return "յ" + (n === 300 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 200) return "մ" + (n === 200 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 100) return "ճ" + (n === 100 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 90) return "ղ" + (n === 90 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 80) return "ձ" + (n === 80 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 70) return "հ" + (n === 70 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 60) return "կ" + (n === 60 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 50) return "ծ" + (n === 50 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 40) return "խ" + (n === 40 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 30) return "լ" + (n === 30 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 20) return "ի" + (n === 20 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 10) return "ժ" + (n === 10 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 9) return "թ";
    if (n >= 8) return "ը";
    if (n >= 7) return "է";
    if (n >= 6) return "զ";
    if (n >= 5) return "ե";
    if (n >= 4) return "դ";
    if (n >= 3) return "գ";
    if (n >= 2) return "բ";
    if (n >= 1) return "ա";
    if (n >= 0) return "0";
};

inter.renderCyrillicLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderCyrillicLower(-n);
    if (isFractional && n > 1) return this.renderCyrillicLower(Math.floor(n)) + "." + this.renderCyrillicLower(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e15) return "҂҂҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e15)) + (n === 1e15 ? "" : " " + this.renderCyrillicLower(n % 1e15));
    if (n >= 1e12) return "҂҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e12)) + (n === 1e12 ? "" : " " + this.renderCyrillicLower(n % 1e12));
    if (n >= 1e9) return "҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e9)) + (n === 1e9 ? "" : " " + this.renderCyrillicLower(n % 1e9));
    if (n >= 1e6) return "҂҂" + this.renderCyrillicLower(Math.floor(n / 1e6)) + (n === 1e6 ? "" : " " + this.renderCyrillicLower(n % 1e6));
    if (n >= 11e3) return this.renderCyrillicLowerThousands(Math.floor(n / 1e4)) + (n === 11e3 ? "" : " " + this.renderCyrillicLower(n % 1e4));
    if (n >= 1e4) return "҂" + this.renderCyrillicLower(Math.floor(n / 1e4)) + (n === 1e4 ? "" : " " + this.renderCyrillicLower(n % 1e4));
    if (n >= 1e3) return "҂" + this.renderCyrillicLower110(Math.floor(n / 1e3)) + this.renderCyrillicLowerPost(n % 1e3);
    if (n >= 900) return "ц" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 801) return "ѿ" + this.renderCyrillicLower(n % 100);
    if (n >= 800) return "ѿ҃";
    if (n >= 700) return "ѱ" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 600) return "х" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 500) return "ф" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 400) return "у" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 300) return "т" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 200) return "с" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 100) return "р" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 90) return "ч" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 80) return "п" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 70) return "ѻ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 60) return "ѯ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 50) return "н" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 40) return "м" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 30) return "л" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 20) return "к" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 19) return "ѳ҃і";
    if (n >= 18) return "и҃і";
    if (n >= 17) return "з҃і";
    if (n >= 16) return "ѕ҃і";
    if (n >= 15) return "є҃і";
    if (n >= 14) return "д҃і";
    if (n >= 13) return "г҃і";
    if (n >= 12) return "в҃і";
    if (n >= 11) return "а҃і";
    if (n >= 1) return this.renderCyrillicLower110(n) + "҃";
    if (n >= 0) return "0҃";
};

inter.renderEthiopic = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderEthiopic(-n);
    if (isFractional && n > 1) return this.renderEthiopic(Math.floor(n)) + "፡" + this.renderEthiopic(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,###0");
    if (n >= 2e16) return this.renderEthiopic(Math.floor(n / 1e16)) + "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 1e16) return "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 2e12) return this.renderEthiopic(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1e12) return "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 2e8) return this.renderEthiopic(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1e8) return "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 2e4) return this.renderEthiopic(Math.floor(n / 1e4)) + "፼" + (n === 2e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 1e4) return "፼" + (n === 1e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 200) return this.renderEthiopic(Math.floor(n / 100)) + "፻" + (n === 200 ? "" : this.renderEthiopic(n % 100));
    if (n >= 100) return "፻" + (n === 100 ? "" : this.renderEthiopic(n % 100));
    if (n >= 90) return "፺" + (n === 90 ? "" : this.renderEthiopic(n % 10));
    if (n >= 80) return "፹" + (n === 80 ? "" : this.renderEthiopic(n % 10));
    if (n >= 70) return "፸" + (n === 70 ? "" : this.renderEthiopic(n % 10));
    if (n >= 60) return "፷" + (n === 60 ? "" : this.renderEthiopic(n % 10));
    if (n >= 50) return "፶" + (n === 50 ? "" : this.renderEthiopic(n % 10));
    if (n >= 40) return "፵" + (n === 40 ? "" : this.renderEthiopic(n % 10));
    if (n >= 30) return "፴" + (n === 30 ? "" : this.renderEthiopic(n % 10));
    if (n >= 20) return "፳" + (n === 20 ? "" : this.renderEthiopic(n % 10));
    if (n >= 10) return "፲" + (n === 10 ? "" : this.renderEthiopic(n % 10));
    if (n >= 9) return "፱";
    if (n >= 8) return "፰";
    if (n >= 7) return "፯";
    if (n >= 6) return "፮";
    if (n >= 5) return "፭";
    if (n >= 4) return "፬";
    if (n >= 3) return "፫";
    if (n >= 2) return "፪";
    if (n >= 1) return "፩";
    if (n >= 0) return "ባዶ";
};

inter.renderGeorgian = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGeorgian(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 2e4) return this.renderNumber(n, "#,##0");
    if (n >= 1e4) return "ჯ" + (n === 1e4 ? "" : this.renderGeorgian(n % 1e4));
    if (n >= 9e3) return "ჵ" + (n === 9e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 8e3) return "ჴ" + (n === 8e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 7e3) return "ხ" + (n === 7e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 6e3) return "ჭ" + (n === 6e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 5e3) return "წ" + (n === 5e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 4e3) return "ძ" + (n === 4e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 3e3) return "ც" + (n === 3e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 2e3) return "ჩ" + (n === 2e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 1e3) return "შ" + (n === 1e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 900) return "ყ" + (n === 900 ? "" : this.renderGeorgian(n % 100));
    if (n >= 800) return "ღ" + (n === 800 ? "" : this.renderGeorgian(n % 100));
    if (n >= 700) return "ქ" + (n === 700 ? "" : this.renderGeorgian(n % 100));
    if (n >= 600) return "ფ" + (n === 600 ? "" : this.renderGeorgian(n % 100));
    if (n >= 500) return "ჳ" + (n === 500 ? "" : this.renderGeorgian(n % 100));
    if (n >= 400) return "უ" + (n === 400 ? "" : this.renderGeorgian(n % 100));
    if (n >= 300) return "ტ" + (n === 300 ? "" : this.renderGeorgian(n % 100));
    if (n >= 200) return "ს" + (n === 200 ? "" : this.renderGeorgian(n % 100));
    if (n >= 100) return "რ" + (n === 100 ? "" : this.renderGeorgian(n % 100));
    if (n >= 90) return "ჟ" + (n === 90 ? "" : this.renderGeorgian(n % 10));
    if (n >= 80) return "პ" + (n === 80 ? "" : this.renderGeorgian(n % 10));
    if (n >= 70) return "ო" + (n === 70 ? "" : this.renderGeorgian(n % 10));
    if (n >= 60) return "ჲ" + (n === 60 ? "" : this.renderGeorgian(n % 10));
    if (n >= 50) return "ნ" + (n === 50 ? "" : this.renderGeorgian(n % 10));
    if (n >= 40) return "მ" + (n === 40 ? "" : this.renderGeorgian(n % 10));
    if (n >= 30) return "ლ" + (n === 30 ? "" : this.renderGeorgian(n % 10));
    if (n >= 20) return "კ" + (n === 20 ? "" : this.renderGeorgian(n % 10));
    if (n >= 10) return "ი" + (n === 10 ? "" : this.renderGeorgian(n % 10));
    if (n >= 9) return "თ";
    if (n >= 8) return "ჱ";
    if (n >= 7) return "ზ";
    if (n >= 6) return "ვ";
    if (n >= 5) return "ე";
    if (n >= 4) return "დ";
    if (n >= 3) return "გ";
    if (n >= 2) return "ბ";
    if (n >= 1) return "ა";
    if (n >= 0) return this.renderNumber(n, "#,##0");
};

inter.renderGreekUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGreekUpper(-n);
    if (isFractional && n > 1) return this.renderGreekUpper(Math.floor(n)) + "." + this.renderGreekUpper(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 0) return this.renderGreekNumeralMajuscules(n) + "´";
};

inter.renderGreekLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGreekLower(-n);
    if (isFractional && n > 1) return this.renderGreekLower(Math.floor(n)) + "." + this.renderGreekLower(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 0) return this.renderGreekNumeralMinuscules(n) + "´";
};

inter.renderSpelloutNumberingDays = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "负" + this.renderSpelloutNumberingDays(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.#");
    if (n >= 21) return this.renderNumberingDays(n);
    if (n >= 11) return this.renderSpelloutNumbering(n);
    if (n >= 1) return "初" + this.renderSpelloutNumbering(n);
    if (n >= 0) return "〇";
};

inter.renderSpelloutCardinal = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "负" + this.renderSpelloutCardinal(-n);
    if (isFractional && n > 1) return this.renderSpelloutCardinal(Math.floor(n)) + "点" + this.renderSpelloutCardinal(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,###0");
    if (n >= 1e16) return this.renderSpelloutCardinal(Math.floor(n / 1e16)) + "京" + (n === 1e16 ? "" : this.renderCardinal13(n % 1e16));
    if (n >= 1e12) return this.renderSpelloutCardinal(Math.floor(n / 1e12)) + "兆" + (n === 1e12 ? "" : this.renderCardinal8(n % 1e12));
    if (n >= 1e8) return this.renderSpelloutCardinal(Math.floor(n / 1e8)) + "亿" + (n === 1e8 ? "" : this.renderCardinal5(n % 1e8));
    if (n >= 1e4) return this.renderSpelloutCardinal(Math.floor(n / 1e4)) + "万" + (n === 1e4 ? "" : this.renderCardinal4(n % 1e4));
    if (n >= 1e3) return this.renderSpelloutCardinal(Math.floor(n / 1e3)) + "千" + (n === 1e3 ? "" : this.renderCardinal3(n % 1e3));
    if (n >= 100) return this.renderSpelloutCardinal(Math.floor(n / 100)) + "百" + (n === 100 ? "" : this.renderCardinal2(n % 100));
    if (n >= 10) return this.renderSpelloutNumbering(n);
    if (n >= 9) return "九";
    if (n >= 8) return "八";
    if (n >= 7) return "七";
    if (n >= 6) return "六";
    if (n >= 5) return "五";
    if (n >= 4) return "四";
    if (n >= 3) return "三";
    if (n >= 2) return "二";
    if (n >= 1) return "一";
    if (n >= 0) return "零";
};

inter.renderSpelloutCardinalFinancial = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "负" + this.renderSpelloutCardinalFinancial(-n);
    if (isFractional && n > 1) return this.renderSpelloutCardinalFinancial(Math.floor(n)) + "点" + this.renderSpelloutCardinalFinancial(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,###0");
    if (n >= 1e16) return this.renderSpelloutCardinalFinancial(Math.floor(n / 1e16)) + "京" + (n === 1e16 ? "" : this.renderFinancialnumber13(n % 1e16));
    if (n >= 1e12) return this.renderSpelloutCardinalFinancial(Math.floor(n / 1e12)) + "兆" + (n === 1e12 ? "" : this.renderFinancialnumber8(n % 1e12));
    if (n >= 1e8) return this.renderSpelloutCardinalFinancial(Math.floor(n / 1e8)) + "亿" + (n === 1e8 ? "" : this.renderFinancialnumber5(n % 1e8));
    if (n >= 1e4) return this.renderSpelloutCardinalFinancial(Math.floor(n / 1e4)) + "万" + (n === 1e4 ? "" : this.renderFinancialnumber4(n % 1e4));
    if (n >= 1e3) return this.renderSpelloutCardinalFinancial(Math.floor(n / 1e3)) + "仟" + (n === 1e3 ? "" : this.renderFinancialnumber3(n % 1e3));
    if (n >= 100) return this.renderSpelloutCardinalFinancial(Math.floor(n / 100)) + "佰" + (n === 100 ? "" : this.renderFinancialnumber2(n % 100));
    if (n >= 20) return this.renderSpelloutCardinalFinancial(Math.floor(n / 10)) + "拾" + (n === 20 ? "" : this.renderSpelloutCardinalFinancial(n % 10));
    if (n >= 10) return "拾" + (n === 10 ? "" : this.renderSpelloutCardinalFinancial(n % 10));
    if (n >= 9) return "玖";
    if (n >= 8) return "捌";
    if (n >= 7) return "柒";
    if (n >= 6) return "陆";
    if (n >= 5) return "伍";
    if (n >= 4) return "肆";
    if (n >= 3) return "叁";
    if (n >= 2) return "贰";
    if (n >= 1) return "壹";
    if (n >= 0) return "零";
};

inter.renderHebrew = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderHebrew(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1000001) return this.renderNumber(n, "#,##0");
    if (n >= 1e6) return "אלף אלפים";
    if (n >= 3001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 3001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 3e3) return this.renderHebrew(Math.floor(n / 1e3)) + " אלפים";
    if (n >= 2001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 2001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 2e3) return "אלפיים";
    if (n >= 1001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 1001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 1e3) return "אלף";
    if (n >= 901) return "תתק" + this.renderHebrew099(n % 100);
    if (n >= 900) return "תת״ק";
    if (n >= 801) return "תת" + this.renderHebrew099(n % 100);
    if (n >= 800) return "ת״ת";
    if (n >= 745) return "תש" + this.renderHebrew099(n % 100);
    if (n >= 744) return "תשד״מ";
    if (n >= 701) return "תש" + this.renderHebrew099(n % 100);
    if (n >= 700) return "ת״ש";
    if (n >= 699) return "תר" + this.renderHebrew099(n % 100);
    if (n >= 698) return "תרח״צ";
    if (n >= 601) return "תר" + this.renderHebrew099(n % 100);
    if (n >= 600) return "ת״ר";
    if (n >= 501) return "תק" + this.renderHebrew099(n % 100);
    if (n >= 500) return "ת״ק";
    if (n >= 400) return "ת" + this.renderHebrew099(n % 100);
    if (n >= 345) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 344) return "שד״מ";
    if (n >= 305) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 304) return "ד״ש";
    if (n >= 300) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 299) return "ר" + this.renderHebrew099(n % 100);
    if (n >= 298) return "רח״צ";
    if (n >= 200) return "ר" + this.renderHebrew099(n % 100);
    if (n >= 100) return "ק" + this.renderHebrew099(n % 100);
    if (n >= 91) return "צ״" + this.renderHebrewItem(n % 10);
    if (n >= 90) return "צ׳";
    if (n >= 81) return "פ״" + this.renderHebrewItem(n % 10);
    if (n >= 80) return "פ׳";
    if (n >= 71) return "ע״" + this.renderHebrewItem(n % 10);
    if (n >= 70) return "ע׳";
    if (n >= 61) return "ס״" + this.renderHebrewItem(n % 10);
    if (n >= 60) return "ס׳";
    if (n >= 51) return "נ״" + this.renderHebrewItem(n % 10);
    if (n >= 50) return "נ׳";
    if (n >= 41) return "מ״" + this.renderHebrewItem(n % 10);
    if (n >= 40) return "מ׳";
    if (n >= 31) return "ל״" + this.renderHebrewItem(n % 10);
    if (n >= 30) return "ל׳";
    if (n >= 21) return "כ״" + this.renderHebrewItem(n % 10);
    if (n >= 20) return "כ׳";
    if (n >= 17) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "ט״ז";
    if (n >= 15) return "ט״ו";
    if (n >= 11) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 0) return this.renderHebrewItem(n) + "׳";
};

inter.renderRomanUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderRomanUpper(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 4e5) return this.renderNumber(n, "#,##0");
    if (n >= 3e5) return "ↈↈↈ" + (n === 3e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 2e5) return "ↈↈ" + (n === 2e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 1e5) return "ↈ" + (n === 1e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 9e4) return "ↂↈ" + (n === 9e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 8e4) return "ↇↂↂↂ" + (n === 8e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 7e4) return "ↇↂↂ" + (n === 7e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 6e4) return "ↇↂ" + (n === 6e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 5e4) return "ↇ" + (n === 5e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 4e4) return "ↂↇ" + (n === 4e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 3e4) return "ↂↂↂ" + (n === 3e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 2e4) return "ↂↂ" + (n === 2e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 1e4) return "ↂ" + (n === 1e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 9e3) return "Mↂ" + (n === 9e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 8e3) return "ↁMMM" + (n === 8e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 7e3) return "ↁMM" + (n === 7e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 6e3) return "ↁM" + (n === 6e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 5e3) return "ↁ" + (n === 5e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 4e3) return "Mↁ" + (n === 4e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 3e3) return "MMM" + (n === 3e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 2e3) return "MM" + (n === 2e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 1e3) return "M" + (n === 1e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 900) return "CM" + (n === 900 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 800) return "DCCC" + (n === 800 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 700) return "DCC" + (n === 700 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 600) return "DC" + (n === 600 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 500) return "D" + (n === 500 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 400) return "CD" + (n === 400 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 300) return "CCC" + (n === 300 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 200) return "CC" + (n === 200 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 100) return "C" + (n === 100 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 90) return "XC" + (n === 90 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 80) return "LXXX" + (n === 80 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 70) return "LXX" + (n === 70 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 60) return "LX" + (n === 60 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 50) return "L" + (n === 50 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 40) return "XL" + (n === 40 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 30) return "XXX" + (n === 30 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 20) return "XX" + (n === 20 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 10) return "X" + (n === 10 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 9) return "IX";
    if (n >= 8) return "VIII";
    if (n >= 7) return "VII";
    if (n >= 6) return "VI";
    if (n >= 5) return "V";
    if (n >= 4) return "IV";
    if (n >= 3) return "III";
    if (n >= 2) return "II";
    if (n >= 1) return "I";
    if (n >= 0) return "N";
};

inter.renderRomanLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderRomanLower(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 5e3) return this.renderNumber(n, "#,##0");
    if (n >= 4e3) return "mmmm" + (n === 4e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 3e3) return "mmm" + (n === 3e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 2e3) return "mm" + (n === 2e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 1e3) return "m" + (n === 1e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 900) return "cm" + (n === 900 ? "" : this.renderRomanLower(n % 100));
    if (n >= 800) return "dccc" + (n === 800 ? "" : this.renderRomanLower(n % 100));
    if (n >= 700) return "dcc" + (n === 700 ? "" : this.renderRomanLower(n % 100));
    if (n >= 600) return "dc" + (n === 600 ? "" : this.renderRomanLower(n % 100));
    if (n >= 500) return "d" + (n === 500 ? "" : this.renderRomanLower(n % 100));
    if (n >= 400) return "cd" + (n === 400 ? "" : this.renderRomanLower(n % 100));
    if (n >= 300) return "ccc" + (n === 300 ? "" : this.renderRomanLower(n % 100));
    if (n >= 200) return "cc" + (n === 200 ? "" : this.renderRomanLower(n % 100));
    if (n >= 100) return "c" + (n === 100 ? "" : this.renderRomanLower(n % 100));
    if (n >= 90) return "xc" + (n === 90 ? "" : this.renderRomanLower(n % 10));
    if (n >= 80) return "lxxx" + (n === 80 ? "" : this.renderRomanLower(n % 10));
    if (n >= 70) return "lxx" + (n === 70 ? "" : this.renderRomanLower(n % 10));
    if (n >= 60) return "lx" + (n === 60 ? "" : this.renderRomanLower(n % 10));
    if (n >= 50) return "l" + (n === 50 ? "" : this.renderRomanLower(n % 10));
    if (n >= 40) return "xl" + (n === 40 ? "" : this.renderRomanLower(n % 10));
    if (n >= 30) return "xxx" + (n === 30 ? "" : this.renderRomanLower(n % 10));
    if (n >= 20) return "xx" + (n === 20 ? "" : this.renderRomanLower(n % 10));
    if (n >= 10) return "x" + (n === 10 ? "" : this.renderRomanLower(n % 10));
    if (n >= 9) return "ix";
    if (n >= 8) return "viii";
    if (n >= 7) return "vii";
    if (n >= 6) return "vi";
    if (n >= 5) return "v";
    if (n >= 4) return "iv";
    if (n >= 3) return "iii";
    if (n >= 2) return "ii";
    if (n >= 1) return "i";
    if (n >= 0) return "n";
};

inter.renderTamil = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderTamil(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e8) return this.renderNumber(n, "#,##,##0");
    if (n >= 1e6) return this.renderTamil(Math.floor(n / 1e6)) + "௱௲" + (n === 1e6 ? "" : this.renderTamilThousands(n % 1e6));
    if (n >= 2e3) return this.renderTamil(Math.floor(n / 1e3)) + "௲" + (n === 2e3 ? "" : this.renderTamil(n % 1e3));
    if (n >= 1e3) return "௲" + (n === 1e3 ? "" : this.renderTamil(n % 1e3));
    if (n >= 200) return this.renderTamil(Math.floor(n / 100)) + "௱" + (n === 200 ? "" : this.renderTamil(n % 100));
    if (n >= 100) return "௱" + (n === 100 ? "" : this.renderTamil(n % 100));
    if (n >= 20) return this.renderTamil(Math.floor(n / 10)) + "௰" + (n === 20 ? "" : this.renderTamil(n % 10));
    if (n >= 10) return "௰" + (n === 10 ? "" : this.renderTamil(n % 10));
    if (n >= 9) return "௯";
    if (n >= 8) return "௮";
    if (n >= 7) return "௭";
    if (n >= 6) return "௬";
    if (n >= 5) return "௫";
    if (n >= 4) return "௪";
    if (n >= 3) return "௩";
    if (n >= 2) return "௨";
    if (n >= 1) return "௧";
    if (n >= 0) return "௦";
};

inter.renderNumber13 = function(n) {
    if (n >= 1e12) return this.renderSpelloutNumbering(n);
    if (n >= 20) return "〇" + this.renderSpelloutNumbering(n);
    if (n >= 10) return "〇一" + this.renderSpelloutNumbering(n);
    if (n >= 1) return "〇" + this.renderSpelloutNumbering(n);
};

inter.renderNumber8 = function(n) {
    if (n >= 1e7) return this.renderSpelloutNumbering(n);
    if (n >= 20) return "〇" + this.renderSpelloutNumbering(n);
    if (n >= 10) return "〇一" + this.renderSpelloutNumbering(n);
    if (n >= 1) return "〇" + this.renderSpelloutNumbering(n);
};

inter.renderNumber5 = function(n) {
    if (n >= 1e4) return this.renderSpelloutNumbering(n);
    if (n >= 20) return "〇" + this.renderSpelloutNumbering(n);
    if (n >= 10) return "〇一" + this.renderSpelloutNumbering(n);
    if (n >= 1) return "〇" + this.renderSpelloutNumbering(n);
};

inter.renderNumber4 = function(n) {
    if (n >= 1e3) return this.renderSpelloutNumbering(n);
    if (n >= 20) return "〇" + this.renderSpelloutNumbering(n);
    if (n >= 10) return "〇一" + this.renderSpelloutNumbering(n);
    if (n >= 1) return "〇" + this.renderSpelloutNumbering(n);
};

inter.renderNumber3 = function(n) {
    if (n >= 100) return this.renderSpelloutNumbering(n);
    if (n >= 20) return "〇" + this.renderSpelloutNumbering(n);
    if (n >= 10) return "〇一" + this.renderSpelloutNumbering(n);
    if (n >= 1) return "〇" + this.renderSpelloutNumbering(n);
};

inter.renderNumber2 = function(n) {
    if (n >= 20) return this.renderSpelloutNumbering(n);
    if (n >= 10) return "一" + this.renderSpelloutNumbering(n);
    if (n >= 1) return "〇" + this.renderSpelloutNumbering(n);
};

inter.renderCyrillicLowerThousands = function(n) {
    if (n >= 900) return "҂ц" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 800) return "҂ѿ" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 700) return "҂ѱ" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 600) return "҂х" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 500) return "҂ф" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 400) return "҂у" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 300) return "҂т" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 200) return "҂с" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 100) return "҂р" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 90) return "҂ч" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 80) return "҂п" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 70) return "҂ѻ" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 60) return "҂ѯ" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 50) return "҂н" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 40) return "҂м" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 30) return "҂л" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 20) return "҂к" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 19) return "҂ѳ҃҂і";
    if (n >= 18) return "҂и҃҂і";
    if (n >= 17) return "҂з҃҂і";
    if (n >= 16) return "҂ѕ҃҂і";
    if (n >= 15) return "҂є҃҂і";
    if (n >= 14) return "҂д҃҂і";
    if (n >= 13) return "҂г҃҂і";
    if (n >= 12) return "҂в҃҂і";
    if (n >= 11) return "҂а҃҂і";
    if (n >= 10) return "҃҂і";
    if (n >= 9) return "҃҂ѳ";
    if (n >= 8) return "҃҂и";
    if (n >= 7) return "҃҂з";
    if (n >= 6) return "҃҂ѕ";
    if (n >= 5) return "҃҂є";
    if (n >= 4) return "҃҂д";
    if (n >= 3) return "҃҂г";
    if (n >= 2) return "҃҂в";
    if (n >= 1) return "҃҂а";
    if (n >= 0) return "҃";
};

inter.renderCyrillicLower110 = function(n) {
    if (n >= 10) return "і";
    if (n >= 9) return "ѳ";
    if (n >= 8) return "и";
    if (n >= 7) return "з";
    if (n >= 6) return "ѕ";
    if (n >= 5) return "є";
    if (n >= 4) return "д";
    if (n >= 3) return "г";
    if (n >= 2) return "в";
    if (n >= 1) return "а";
};

inter.renderCyrillicLowerPost = function(n) {
    if (n >= 1) return this.renderCyrillicLower(n);
    if (n >= 0) return "҃";
};

inter.renderCyrillicLowerFinal = function(n) {
    if (n >= 91) return "ч" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 90) return "҃ч";
    if (n >= 81) return "п" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 80) return "҃п";
    if (n >= 71) return "ѻ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 70) return "҃ѻ";
    if (n >= 61) return "ѯ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 60) return "҃ѯ";
    if (n >= 51) return "н" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 50) return "҃н";
    if (n >= 41) return "м" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 40) return "҃м";
    if (n >= 31) return "л" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 30) return "҃л";
    if (n >= 21) return "к" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 20) return "҃к";
    if (n >= 19) return "ѳ҃і";
    if (n >= 18) return "и҃і";
    if (n >= 17) return "з҃і";
    if (n >= 16) return "ѕ҃і";
    if (n >= 15) return "є҃і";
    if (n >= 14) return "д҃і";
    if (n >= 13) return "г҃і";
    if (n >= 12) return "в҃і";
    if (n >= 11) return "а҃і";
    if (n >= 1) return "҃" + this.renderCyrillicLower110(n);
    if (n >= 0) return "҃";
};

inter.renderEthiopicP3 = function(n) {
    if (n >= 1e12) return this.renderEthiopic(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1) return "፼፼፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼፼፼";
};

inter.renderEthiopicP2 = function(n) {
    if (n >= 1e8) return this.renderEthiopic(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1) return "፼፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼፼";
};

inter.renderEthiopicP1 = function(n) {
    if (n >= 1e4) return this.renderEthiopic(Math.floor(n / 1e4)) + "፼" + (n === 1e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 1) return "፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼";
};

inter.renderGreekNumeralMajuscules = function(n) {
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e16) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e16)) + "ΜΜΜΜ" + (n === 1e16 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e16));
    if (n >= 1e12) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e12)) + "ΜΜΜ" + (n === 1e12 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e12));
    if (n >= 1e8) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e8)) + "ΜΜ" + (n === 1e8 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e8));
    if (n >= 1e4) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e4)) + "Μ" + (n === 1e4 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e4));
    if (n >= 1e3) return "͵" + this.renderGreekNumeralMajuscules(Math.floor(n / 1e3)) + (n === 1e3 ? "" : this.renderGreekNumeralMajuscules(n % 1e3));
    if (n >= 900) return "Ϡ" + (n === 900 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 800) return "Ω" + (n === 800 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 700) return "Ψ" + (n === 700 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 600) return "Χ" + (n === 600 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 500) return "Φ" + (n === 500 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 400) return "Υ" + (n === 400 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 300) return "Τ" + (n === 300 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 200) return "Σ" + (n === 200 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 100) return "Ρ" + (n === 100 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 90) return "Ϟ" + (n === 90 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 80) return "Π" + (n === 80 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 70) return "Ο" + (n === 70 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 60) return "Ξ" + (n === 60 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 50) return "Ν" + (n === 50 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 40) return "Μ" + (n === 40 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 30) return "Λ" + (n === 30 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 20) return "Κ" + (n === 20 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 10) return "Ι" + (n === 10 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 9) return "Θ";
    if (n >= 8) return "Η";
    if (n >= 7) return "Ζ";
    if (n >= 6) return "Ϝ";
    if (n >= 5) return "Ε";
    if (n >= 4) return "Δ";
    if (n >= 3) return "Γ";
    if (n >= 2) return "Β";
    if (n >= 1) return "Α";
    if (n >= 0) return "𐆊";
};

inter.renderGreekNumeralMinuscules = function(n) {
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e16) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e16)) + "μμμμ" + (n === 1e16 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e16));
    if (n >= 1e12) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e12)) + "μμμ" + (n === 1e12 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e12));
    if (n >= 1e8) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e8)) + "μμ" + (n === 1e8 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e8));
    if (n >= 1e4) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e4)) + "μ" + (n === 1e4 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e4));
    if (n >= 1e3) return "͵" + this.renderGreekNumeralMinuscules(Math.floor(n / 1e3)) + (n === 1e3 ? "" : this.renderGreekNumeralMinuscules(n % 1e3));
    if (n >= 900) return "ϡ" + (n === 900 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 800) return "ω" + (n === 800 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 700) return "ψ" + (n === 700 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 600) return "χ" + (n === 600 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 500) return "φ" + (n === 500 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 400) return "υ" + (n === 400 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 300) return "τ" + (n === 300 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 200) return "σ" + (n === 200 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 100) return "ρ" + (n === 100 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 90) return "ϟ" + (n === 90 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 80) return "π" + (n === 80 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 70) return "ο" + (n === 70 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 60) return "ξ" + (n === 60 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 50) return "ν" + (n === 50 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 40) return "μ" + (n === 40 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 30) return "λ" + (n === 30 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 20) return "κ" + (n === 20 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 10) return "ι" + (n === 10 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 9) return "θ";
    if (n >= 8) return "η";
    if (n >= 7) return "ζ";
    if (n >= 6) return "ϝ";
    if (n >= 5) return "ε";
    if (n >= 4) return "δ";
    if (n >= 3) return "γ";
    if (n >= 2) return "β";
    if (n >= 1) return "α";
    if (n >= 0) return "𐆊";
};

inter.renderNumberingDays = function(n) {
    if (n >= 50) return this.renderSpelloutNumbering(n);
    if (n >= 41) return "卌" + this.renderNumberingDays(n % 10);
    if (n >= 40) return this.renderNumberingDays(Math.floor(n / 10)) + "十";
    if (n >= 31) return "丗" + this.renderNumberingDays(n % 10);
    if (n >= 30) return this.renderNumberingDays(Math.floor(n / 10)) + "十";
    if (n >= 21) return "廿" + this.renderNumberingDays(n % 10);
    if (n >= 0) return this.renderSpelloutNumbering(n);
};

inter.renderCardinal13 = function(n) {
    if (n >= 1e12) return this.renderSpelloutCardinal(n);
    if (n >= 20) return "零" + this.renderSpelloutCardinal(n);
    if (n >= 10) return "零一" + this.renderSpelloutCardinal(n);
    if (n >= 1) return "零" + this.renderSpelloutNumbering(n);
};

inter.renderCardinal8 = function(n) {
    if (n >= 1e7) return this.renderSpelloutCardinal(n);
    if (n >= 20) return "零" + this.renderSpelloutCardinal(n);
    if (n >= 10) return "零一" + this.renderSpelloutCardinal(n);
    if (n >= 1) return "零" + this.renderSpelloutNumbering(n);
};

inter.renderCardinal5 = function(n) {
    if (n >= 1e4) return this.renderSpelloutCardinal(n);
    if (n >= 20) return "零" + this.renderSpelloutCardinal(n);
    if (n >= 10) return "零一" + this.renderSpelloutCardinal(n);
    if (n >= 1) return "零" + this.renderSpelloutNumbering(n);
};

inter.renderCardinal4 = function(n) {
    if (n >= 1e3) return this.renderSpelloutCardinal(n);
    if (n >= 20) return "零" + this.renderSpelloutCardinal(n);
    if (n >= 10) return "零一" + this.renderSpelloutCardinal(n);
    if (n >= 1) return "零" + this.renderSpelloutNumbering(n);
};

inter.renderCardinal3 = function(n) {
    if (n >= 100) return this.renderSpelloutCardinal(n);
    if (n >= 20) return "零" + this.renderSpelloutCardinal(n);
    if (n >= 10) return "零一" + this.renderSpelloutCardinal(n);
    if (n >= 1) return "零" + this.renderSpelloutNumbering(n);
};

inter.renderCardinal2 = function(n) {
    if (n >= 20) return this.renderSpelloutNumbering(n);
    if (n >= 10) return "一" + this.renderSpelloutNumbering(n);
    if (n >= 1) return "零" + this.renderSpelloutNumbering(n);
};

inter.renderFinancialnumber13 = function(n) {
    if (n >= 1e12) return this.renderSpelloutCardinalFinancial(n);
    if (n >= 20) return "零" + this.renderSpelloutCardinalFinancial(n);
    if (n >= 10) return "零壹" + this.renderSpelloutCardinalFinancial(n);
    if (n >= 1) return "零" + this.renderSpelloutCardinalFinancial(n);
};

inter.renderFinancialnumber8 = function(n) {
    if (n >= 1e7) return this.renderSpelloutCardinalFinancial(n);
    if (n >= 20) return "零" + this.renderSpelloutCardinalFinancial(n);
    if (n >= 10) return "零壹" + this.renderSpelloutCardinalFinancial(n);
    if (n >= 1) return "零" + this.renderSpelloutCardinalFinancial(n);
};

inter.renderFinancialnumber5 = function(n) {
    if (n >= 1e4) return this.renderSpelloutCardinalFinancial(n);
    if (n >= 20) return "零" + this.renderSpelloutCardinalFinancial(n);
    if (n >= 10) return "零壹" + this.renderSpelloutCardinalFinancial(n);
    if (n >= 1) return "零" + this.renderSpelloutCardinalFinancial(n);
};

inter.renderFinancialnumber4 = function(n) {
    if (n >= 1e3) return this.renderSpelloutCardinalFinancial(n);
    if (n >= 20) return "零" + this.renderSpelloutCardinalFinancial(n);
    if (n >= 10) return "零壹" + this.renderSpelloutCardinalFinancial(n);
    if (n >= 1) return "零" + this.renderSpelloutCardinalFinancial(n);
};

inter.renderFinancialnumber3 = function(n) {
    if (n >= 100) return this.renderSpelloutCardinalFinancial(n);
    if (n >= 20) return "零" + this.renderSpelloutCardinalFinancial(n);
    if (n >= 10) return "零壹" + this.renderSpelloutCardinalFinancial(n);
    if (n >= 1) return "零" + this.renderSpelloutCardinalFinancial(n);
};

inter.renderFinancialnumber2 = function(n) {
    if (n >= 20) return this.renderSpelloutCardinalFinancial(n);
    if (n >= 10) return "壹" + this.renderSpelloutCardinalFinancial(n);
    if (n >= 1) return "零" + this.renderSpelloutCardinalFinancial(n);
};

inter.renderHebrewThousands = function(n) {
    if (n >= 401) return this.renderHebrew(n) + "׳";
    if (n >= 100) return this.renderHebrew(n) + (n === 100 ? "" : "׳");
    if (n >= 10) return this.renderHebrew(n) + (n === 10 ? "" : "׳");
    if (n >= 0) return this.renderHebrew(n);
};

inter.renderHebrew099 = function(n) {
    if (n >= 91) return "צ״" + this.renderHebrewItem(n % 10);
    if (n >= 90) return "״צ";
    if (n >= 81) return "פ״" + this.renderHebrewItem(n % 10);
    if (n >= 80) return "״פ";
    if (n >= 71) return "ע״" + this.renderHebrewItem(n % 10);
    if (n >= 70) return "״ע";
    if (n >= 61) return "ס״" + this.renderHebrewItem(n % 10);
    if (n >= 60) return "״ס";
    if (n >= 51) return "נ״" + this.renderHebrewItem(n % 10);
    if (n >= 50) return "״נ";
    if (n >= 41) return "מ״" + this.renderHebrewItem(n % 10);
    if (n >= 40) return "״מ";
    if (n >= 31) return "ל״" + this.renderHebrewItem(n % 10);
    if (n >= 30) return "״ל";
    if (n >= 21) return "כ״" + this.renderHebrewItem(n % 10);
    if (n >= 20) return "״כ";
    if (n >= 17) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "ט״ז";
    if (n >= 15) return "ט״ו";
    if (n >= 11) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 1) return "״" + this.renderHebrewItem(n);
    if (n >= 0) return "׳";
};

inter.renderHebrewItem = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderHebrewItem(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 2100) return this.renderNumber(n, "#,##0");
    if (n >= 2e3) return "תתתתת" + (n === 2e3 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1900) return "תתתתש" + (n === 1900 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1800) return "תתתתר" + (n === 1800 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1700) return "תתתתק" + (n === 1700 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1600) return "תתתת" + (n === 1600 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1500) return "תתתש" + (n === 1500 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1400) return "תתתר" + (n === 1400 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1300) return "תתתק" + (n === 1300 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1200) return "תתת" + (n === 1200 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1100) return "תתש" + (n === 1100 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1e3) return "תתר" + (n === 1e3 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 900) return "תתק" + (n === 900 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 800) return "תת" + (n === 800 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 745) return "תש" + this.renderHebrewItem(n % 100);
    if (n >= 744) return "תשדמ";
    if (n >= 700) return "תש" + (n === 700 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 699) return "תר" + this.renderHebrewItem(n % 100);
    if (n >= 698) return "תרחצ";
    if (n >= 600) return "תר" + (n === 600 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 500) return "תק" + (n === 500 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 400) return "ת" + (n === 400 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 345) return "ש" + this.renderHebrewItem(n % 100);
    if (n >= 344) return "שדמ";
    if (n >= 305) return "ש" + this.renderHebrewItem(n % 100);
    if (n >= 304) return "דש";
    if (n >= 300) return "ש" + (n === 300 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 299) return "ר" + this.renderHebrewItem(n % 100);
    if (n >= 298) return "רחצ";
    if (n >= 200) return "ר" + (n === 200 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 100) return "ק" + (n === 100 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 90) return "צ" + (n === 90 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 80) return "פ" + (n === 80 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 70) return "ע" + (n === 70 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 60) return "ס" + (n === 60 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 50) return "נ" + (n === 50 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 40) return "מ" + (n === 40 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 30) return "ל" + (n === 30 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 20) return "כ" + (n === 20 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 17) return "י" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "טז";
    if (n >= 15) return "טו";
    if (n >= 10) return "י" + (n === 10 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 9) return "ט";
    if (n >= 8) return "ח";
    if (n >= 7) return "ז";
    if (n >= 6) return "ו";
    if (n >= 5) return "ה";
    if (n >= 4) return "ד";
    if (n >= 3) return "ג";
    if (n >= 2) return "ב";
    if (n >= 1) return "א";
    if (n >= 0) return "״";
};

inter.renderTamilThousands = function(n) {
    if (n >= 1e3) return this.renderTamilThousands(Math.floor(n / 1e3)) + "௲" + (n === 1e3 ? "" : this.renderTamilThousands(n % 1e3));
    if (n >= 0) return this.renderTamil(n);
};

inter.renderEthiopicP = function(n) {
    if (n >= 1e16) return this.renderEthiopicP(Math.floor(n / 1e16)) + "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 1e12) return this.renderEthiopicP(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1e8) return this.renderEthiopicP(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1e4) return this.renderEthiopicP(Math.floor(n / 1e4)) + "፼" + (n === 1e4 ? "" : this.renderEthiopicP(n % 1e4));
    if (n >= 1) return this.renderEthiopic(n);
};

inter.currencies = [ P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], {
    id: "CNY",
    displayName: "人民币",
    symbol: "CN¥",
    other: "人民币"
}, P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], {
    id: "NIO",
    displayName: "尼加拉瓜科多巴",
    symbol: "NIO",
    other: "尼加拉瓜金科多巴"
}, P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], {
    id: "MOP",
    displayName: "澳门元",
    symbol: "MOP$",
    other: "澳门元"
}, P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], {
    id: "XAG",
    displayName: "白银"
}, P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], {
    id: "AWG",
    displayName: "阿鲁巴弗罗林",
    symbol: "AWG",
    other: "阿鲁巴基尔德元"
}, P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1], P.currencies[-1] ];

module.exports = inter;