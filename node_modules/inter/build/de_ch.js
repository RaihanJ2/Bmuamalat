function defaults(targetObj) {
    for (var i = 1; i < arguments.length; i += 1) {
        if (arguments[i] && typeof arguments[i] === "object") {
            for (var propertyName in arguments[i]) {
                if (typeof targetObj[propertyName] === "undefined") {
                    targetObj[propertyName] = arguments[i][propertyName];
                }
            }
        }
    }
    return targetObj;
}

var P = require("./de.js"), inter = defaults({
    renderers: {}
}, P);

var _dvdq1 = {
    one: "{0}°",
    other: "{0}°"
}, _dvdq2 = {
    one: "{0}′",
    other: "{0}′"
}, _dvdq3 = {
    one: "{0}″",
    other: "{0}″"
}, _dvdq4 = {
    one: "{0} G",
    other: "{0} G"
}, _dvdq5 = {
    one: "{0} J",
    other: "{0} J"
}, _dvdq6 = {
    one: "{0} A",
    other: "{0} A"
}, _dvdq7 = {
    one: "{0} Ω",
    other: "{0} Ω"
}, _dvdq8 = {
    one: "{0} V",
    other: "{0} V"
}, _dvdq9 = {
    one: "{0} J",
    other: "{0} J"
}, _dvdq10 = {
    one: "{0} m",
    other: "{0} m"
}, _dvdq11 = {
    one: "{0} t",
    other: "{0} t"
}, _dvdq12 = {
    one: "{0} g",
    other: "{0} g"
}, _dvdq13 = {
    one: "{0} W",
    other: "{0} W"
}, _dvdq14 = {
    one: "{0}°F",
    other: "{0}°F"
}, _dvdq15 = {
    one: "{0} K",
    other: "{0} K"
}, _dvdq16 = {
    one: "{0} l",
    other: "{0} l"
}, _dvdq17 = {
    one: "{0} ha",
    other: "{0} ha"
}, _dvdq18 = {
    one: "{0} m²",
    other: "{0} m²"
}, _dvdq19 = {
    one: "{0} ac",
    other: "{0} ac"
}, _dvdq20 = {
    one: "{0} kt",
    other: "{0} kt"
}, _dvdq21 = {
    one: "{0} TB",
    other: "{0} TB"
}, _dvdq22 = {
    one: "{0} Tb",
    other: "{0} Tb"
}, _dvdq23 = {
    one: "{0} GB",
    other: "{0} GB"
}, _dvdq24 = {
    one: "{0} Gb",
    other: "{0} Gb"
}, _dvdq25 = {
    one: "{0} MB",
    other: "{0} MB"
}, _dvdq26 = {
    one: "{0} Mb",
    other: "{0} Mb"
}, _dvdq27 = {
    one: "{0} kB",
    other: "{0} kB"
}, _dvdq28 = {
    one: "{0} kb",
    other: "{0} kb"
}, _dvdq29 = {
    one: "{0} ms",
    other: "{0} ms"
}, _dvdq30 = {
    one: "{0} μs",
    other: "{0} μs"
}, _dvdq31 = {
    one: "{0} ns",
    other: "{0} ns"
}, _dvdq32 = {
    one: "{0} mA",
    other: "{0} mA"
}, _dvdq33 = {
    one: "{0} kJ",
    other: "{0} kJ"
}, _dvdq34 = {
    one: "{0} Hz",
    other: "{0} Hz"
}, _dvdq35 = {
    one: "{0} km",
    other: "{0} km"
}, _dvdq36 = {
    one: "{0} dm",
    other: "{0} dm"
}, _dvdq37 = {
    one: "{0} cm",
    other: "{0} cm"
}, _dvdq38 = {
    one: "{0} mm",
    other: "{0} mm"
}, _dvdq39 = {
    one: "{0} µm",
    other: "{0} µm"
}, _dvdq40 = {
    one: "{0} nm",
    other: "{0} nm"
}, _dvdq41 = {
    one: "{0} pm",
    other: "{0} pm"
}, _dvdq42 = {
    one: "{0} mi",
    other: "{0} mi"
}, _dvdq43 = {
    one: "{0} yd",
    other: "{0} yd"
}, _dvdq44 = {
    one: "{0} ft",
    other: "{0} ft"
}, _dvdq45 = {
    one: "{0} in",
    other: "{0} in"
}, _dvdq46 = {
    one: "{0} pc",
    other: "{0} pc"
}, _dvdq47 = {
    one: "{0} fm",
    other: "{0} fm"
}, _dvdq48 = {
    one: "{0} sm",
    other: "{0} sm"
}, _dvdq49 = {
    one: "{0} lx",
    other: "{0} lx"
}, _dvdq50 = {
    one: "{0} kg",
    other: "{0} kg"
}, _dvdq51 = {
    one: "{0} mg",
    other: "{0} mg"
}, _dvdq52 = {
    one: "{0} µg",
    other: "{0} µg"
}, _dvdq53 = {
    one: "{0} tn",
    other: "{0} tn"
}, _dvdq54 = {
    one: "{0} st",
    other: "{0} st"
}, _dvdq55 = {
    one: "{0} lb",
    other: "{0} lb"
}, _dvdq56 = {
    one: "{0} oz",
    other: "{0} oz"
}, _dvdq57 = {
    one: "{0} Kt",
    other: "{0} Kt"
}, _dvdq58 = {
    one: "{0} GW",
    other: "{0} GW"
}, _dvdq59 = {
    one: "{0} MW",
    other: "{0} MW"
}, _dvdq60 = {
    one: "{0} kW",
    other: "{0} kW"
}, _dvdq61 = {
    one: "{0} mW",
    other: "{0} mW"
}, _dvdq62 = {
    one: "{0} PS",
    other: "{0} PS"
}, _dvdq63 = {
    one: "{0} m³",
    other: "{0} m³"
}, _dvdq64 = {
    one: "{0} Ml",
    other: "{0} Ml"
}, _dvdq65 = {
    one: "{0} hl",
    other: "{0} hl"
}, _dvdq66 = {
    one: "{0} dl",
    other: "{0} dl"
}, _dvdq67 = {
    one: "{0} cl",
    other: "{0} cl"
}, _dvdq68 = {
    one: "{0} ml",
    other: "{0} ml"
}, _dvdq69 = {
    one: "{0} bu",
    other: "{0} bu"
}, _dvdq70 = {
    one: "{0} qt",
    other: "{0} qt"
}, _dvdq71 = {
    one: "{0} pt",
    other: "{0} pt"
}, _dvdq72 = {
    one: "{0} EL",
    other: "{0} EL"
}, _dvdq73 = {
    one: "{0} TL",
    other: "{0} TL"
}, _dvdq74 = {
    one: "{0} rad",
    other: "{0} rad"
}, _dvdq75 = {
    one: "{0} km²",
    other: "{0} km²"
}, _dvdq76 = {
    one: "{0} cm²",
    other: "{0} cm²"
}, _dvdq77 = {
    one: "{0} mi²",
    other: "{0} mi²"
}, _dvdq78 = {
    one: "{0} yd²",
    other: "{0} yd²"
}, _dvdq79 = {
    one: "{0} ft²",
    other: "{0} ft²"
}, _dvdq80 = {
    one: "{0} in²",
    other: "{0} in²"
}, _dvdq81 = {
    one: "{0} mpg",
    other: "{0} mpg"
}, _dvdq82 = {
    one: "{0} cal",
    other: "{0} cal"
}, _dvdq83 = {
    one: "{0} kWh",
    other: "{0} kWh"
}, _dvdq84 = {
    one: "{0} GHz",
    other: "{0} GHz"
}, _dvdq85 = {
    one: "{0} MHz",
    other: "{0} MHz"
}, _dvdq86 = {
    one: "{0} kHz",
    other: "{0} kHz"
}, _dvdq87 = {
    one: "{0} fur",
    other: "{0} fur"
}, _dvdq88 = {
    one: "{0} smi",
    other: "{0} smi"
}, _dvdq89 = {
    one: "{0} hPa",
    other: "{0} hPa"
}, _dvdq90 = {
    one: "{0} psi",
    other: "{0} psi"
}, _dvdq91 = {
    one: "{0} m/s",
    other: "{0} m/s"
}, _dvdq92 = {
    one: "{0} km³",
    other: "{0} km³"
}, _dvdq93 = {
    one: "{0} cm³",
    other: "{0} cm³"
}, _dvdq94 = {
    one: "{0} mi³",
    other: "{0} mi³"
}, _dvdq95 = {
    one: "{0} yd³",
    other: "{0} yd³"
}, _dvdq96 = {
    one: "{0} ft³",
    other: "{0} ft³"
}, _dvdq97 = {
    one: "{0} in³",
    other: "{0} in³"
}, _dvdq98 = {
    one: "{0} gal",
    other: "{0} gal"
}, _dvdq99 = {
    one: "{0} Bit",
    other: "{0} Bits"
}, _dvdq100 = {
    one: "{0} Cup",
    other: "{0} Cups"
}, _dvdq101 = {
    one: "{0} m/s²",
    other: "{0} m/s²"
}, _dvdq102 = {
    one: "{0} l/km",
    other: "{0} l/km"
}, _dvdq103 = {
    one: "{0} Std.",
    other: "{0} Std."
}, _dvdq104 = {
    one: "{0} Min.",
    other: "{0} Min."
}, _dvdq105 = {
    one: "{0} kcal",
    other: "{0} kcal"
}, _dvdq106 = {
    one: "{0} kcal",
    other: "{0} kcal"
}, _dvdq107 = {
    one: "{0} inHg",
    other: "{0} inHg"
}, _dvdq108 = {
    one: "{0} mbar",
    other: "{0} mbar"
}, _dvdq109 = {
    one: "{0} km/h",
    other: "{0} km/h"
}, _dvdq110 = {
    one: "{0} mi/h",
    other: "{0} mi/h"
}, _dvdq111 = {
    one: "0 Tsd'.'",
    other: "0 Tsd'.'"
}, _dvdq112 = {
    one: "0 Mio'.'",
    other: "0 Mio'.'"
}, _dvdq113 = {
    one: "0 Mrd'.'",
    other: "0 Mrd'.'"
}, _dvdq114 = {
    one: "0 Bio'.'",
    other: "0 Bio'.'"
}, _dvdq115 = {
    one: "{0} Byte",
    other: "{0} Bytes"
}, _dvdq116 = {
    one: "{0} Karat",
    other: "{0} Karat"
}, _dvdq117 = {
    one: "{0} mm Hg",
    other: "{0} mm Hg"
}, _dvdq118 = {
    one: "{0} ac ft",
    other: "{0} ac ft"
}, _dvdq119 = {
    one: "{0} fl oz",
    other: "{0} fl oz"
}, _dvdq120 = {
    one: "0 Tausend",
    other: "0 Tausend"
}, _dvdq121 = {
    one: "00 Tsd'.'",
    other: "00 Tsd'.'"
}, _dvdq122 = {
    one: "00 Mio'.'",
    other: "00 Mio'.'"
}, _dvdq123 = {
    one: "00 Mrd'.'",
    other: "00 Mrd'.'"
}, _dvdq124 = {
    one: "00 Bio'.'",
    other: "00 Bio'.'"
}, _dvdq125 = {
    one: "00 Tausend",
    other: "00 Tausend"
}, _dvdq126 = {
    one: "0 Million",
    other: "0 Millionen"
}, _dvdq127 = {
    one: "0 Billion",
    other: "0 Billionen"
}, _dvdq128 = {
    one: "000 Tsd'.'",
    other: "000 Tsd'.'"
}, _dvdq129 = {
    one: "000 Mio'.'",
    other: "000 Mio'.'"
}, _dvdq130 = {
    one: "000 Mrd'.'",
    other: "000 Mrd'.'"
}, _dvdq131 = {
    one: "000 Bio'.'",
    other: "000 Bio'.'"
}, _dvdq132 = {
    one: "0 Tsd'.' ¤",
    other: "0 Tsd'.' ¤"
}, _dvdq133 = {
    one: "0 Mio'.' ¤",
    other: "0 Mio'.' ¤"
}, _dvdq134 = {
    one: "0 Mrd'.' ¤",
    other: "0 Mrd'.' ¤"
}, _dvdq135 = {
    one: "0 Bio'.' ¤",
    other: "0 Bio'.' ¤"
}, _dvdq136 = {
    one: "000 Tausend",
    other: "000 Tausend"
}, _dvdq137 = {
    one: "00 Tsd'.' ¤",
    other: "00 Tsd'.' ¤"
}, _dvdq138 = {
    one: "00 Mio'.' ¤",
    other: "00 Mio'.' ¤"
}, _dvdq139 = {
    one: "00 Mrd'.' ¤",
    other: "00 Mrd'.' ¤"
}, _dvdq140 = {
    one: "00 Bio'.' ¤",
    other: "00 Bio'.' ¤"
}, _dvdq141 = {
    one: "0 Milliarde",
    other: "0 Milliarden"
}, _dvdq142 = {
    one: "{0} L/100 km",
    other: "{0} L/100 km"
}, _dvdq143 = {
    one: "00 Millionen",
    other: "00 Millionen"
}, _dvdq144 = {
    one: "00 Billionen",
    other: "00 Billionen"
}, _dvdq145 = {
    one: "000 Tsd'.' ¤",
    other: "000 Tsd'.' ¤"
}, _dvdq146 = {
    one: "000 Mio'.' ¤",
    other: "000 Mio'.' ¤"
}, _dvdq147 = {
    one: "000 Mrd'.' ¤",
    other: "000 Mrd'.' ¤"
}, _dvdq148 = {
    one: "000 Bio'.' ¤",
    other: "000 Bio'.' ¤"
}, _dvdq149 = {
    one: "000 Millionen",
    other: "000 Millionen"
}, _dvdq150 = {
    one: "00 Milliarden",
    other: "00 Milliarden"
}, _dvdq151 = {
    one: "000 Billionen",
    other: "000 Billionen"
}, _dvdq152 = {
    one: "000 Milliarden",
    other: "000 Milliarden"
}, _dvdq153 = {
    id: "BN",
    displayName: "Brunei",
    regionId: "035",
    hasTimeZones: true
}, _dvdq154 = {
    id: "RW",
    displayName: "Rwanda",
    regionId: "014",
    hasTimeZones: true
}, _dvdq155 = {
    id: "BW",
    displayName: "Botswana",
    regionId: "018",
    hasTimeZones: true
}, _dvdq156 = {
    id: "DJ",
    displayName: "Djibouti",
    regionId: "014",
    hasTimeZones: true
}, _dvdq157 = {
    id: "ZW",
    displayName: "Zimbabwe",
    regionId: "014",
    hasTimeZones: true
}, _dvdq158 = {
    id: "CV",
    displayName: "Kapverden",
    regionId: "011",
    hasTimeZones: true
}, _dvdq159 = {
    id: "BD",
    displayName: "Bangladesh",
    regionId: "034",
    hasTimeZones: true
}, _dvdq160 = {
    id: "BY",
    displayName: "Weissrussland",
    regionId: "151",
    hasTimeZones: true
}, _dvdq161 = {
    id: "SB",
    displayName: "Salomon-Inseln",
    regionId: "054",
    hasTimeZones: true
}, _dvdq162 = {
    id: "GB",
    displayName: "Grossbritannien",
    regionId: "154",
    hasTimeZones: true
}, _dvdq163 = {
    id: "MH",
    displayName: "Marshall-Inseln",
    regionId: "057",
    hasTimeZones: true
}, _dvdq164 = {
    id: "ST",
    displayName: "Sao Tomé und Principe",
    regionId: "017",
    hasTimeZones: true
}, _dvdq165 = {
    decimal: ".",
    group: "'",
    list: ";",
    percentSign: "%",
    plusSign: "+",
    minusSign: "-",
    exponential: "E",
    superscriptingExponent: "·",
    perMille: "‰",
    infinity: "∞",
    nan: "NaN",
    timeSeparator: ":"
}, _dvdq166 = {
    symbols: _dvdq165
}, _dvdq167 = {
    symbols: _dvdq165,
    digits: "renderSpelloutCardinal"
}, _dvdq168 = {
    symbols: _dvdq165,
    digits: "renderSpelloutCardinalFinancial"
}, _dvdq169 = {
    "1000": _dvdq111,
    "10000": _dvdq121,
    "100000": _dvdq128,
    "1000000": _dvdq112,
    "10000000": _dvdq122,
    "100000000": _dvdq129,
    "1000000000": _dvdq113,
    "10000000000": _dvdq123,
    "100000000000": _dvdq130,
    "1000000000000": _dvdq114,
    "10000000000000": _dvdq124,
    "100000000000000": _dvdq131
}, _dvdq170 = {
    "1000": _dvdq132,
    "10000": _dvdq137,
    "100000": _dvdq145,
    "1000000": _dvdq133,
    "10000000": _dvdq138,
    "100000000": _dvdq146,
    "1000000000": _dvdq134,
    "10000000000": _dvdq139,
    "100000000000": _dvdq147,
    "1000000000000": _dvdq135,
    "10000000000000": _dvdq140,
    "100000000000000": _dvdq148
}, _dvdq171 = {
    "1000": _dvdq120,
    "10000": _dvdq125,
    "100000": _dvdq136,
    "1000000": _dvdq126,
    "10000000": _dvdq143,
    "100000000": _dvdq149,
    "1000000000": _dvdq141,
    "10000000000": _dvdq150,
    "100000000000": _dvdq152,
    "1000000000000": _dvdq127,
    "10000000000000": _dvdq144,
    "100000000000000": _dvdq151
}, _dvdq172 = {
    currencyMatch: /[^\u0024+<->\u005E`\u007C~¢-¦¨©¬®-±´¸×÷˂-˅˒-˟˥-˫˭˯-˿͵΄΅϶҂֏؆-؈؋؎؏۞۩۽۾߶৲৳৺৻૱୰௳-௺౿൹฿༁-༃༓༕-༗༚-༟༴༶༸྾-࿅࿇-࿌࿎࿏࿕-࿘႞႟᎐-᎙៛᥀᧞-᧿᭡-᭪᭴-᭼᾽᾿-῁῍-῏῝-῟῭-`´῾⁄⁒⁺-⁼₊-₌₠-₹℀℁℃-℆℈℉℔№-℘℞-℣℥℧℩℮℺℻⅀-⅄⅊-⅍⅏←-⌨⌫-⏳␀-␦⑀-⑊⒜-ⓩ─-⛿✁-❧➔-⟄⟇-⟥⟰-⦂⦙-⧗⧜-⧻⧾-⭌⭐-⭙⳥-⳪⺀-⺙⺛-⻳⼀-⿕⿰-⿻〄〒〓〠〶〷〾〿゛゜㆐㆑㆖-㆟㇀-㇣㈀-㈞㈪-㉇㉐㉠-㉿㊊-㊰㋀-㋾㌀-㏿䷀-䷿꒐-꓆꜀-꜖꜠꜡꞉꞊꠨-꠫꠶-꠹꩷-꩹﬩﮲-﯁﷼﷽﹢﹤-﹦﹩＄＋＜-＞＾｀｜～￠-￦￨-￮￼�]/,
    surroundingMatch: /[0-9²³¹¼-¾٠-٩۰-۹߀-߉०-९০-৯৴-৹੦-੯૦-૯୦-୯୲-୷௦-௲౦-౯౸-౾೦-೯൦-൵๐-๙໐-໙༠-༳၀-၉႐-႙፩-፼ᛮ-ᛰ០-៩៰-៹᠐-᠙᥆-᥏᧐-᧚᪀-᪉᪐-᪙᭐-᭙᮰-᮹᱀-᱉᱐-᱙⁰⁴-⁹₀-₉⅐-ↂↅ-↉①-⒛⓪-⓿❶-➓⳽〇〡-〩〸-〺㆒-㆕㈠-㈩㉈-㉏㉑-㉟㊀-㊉㊱-㊿꘠-꘩ꛦ-ꛯ꠰-꠵꣐-꣙꤀-꤉꧐-꧙꩐-꩙꯰-꯹０-９]/,
    insertBetween: " "
}, _dvdq173 = {
    "long": _dvdq171,
    "short": _dvdq169,
    "default": "#,##0.###"
}, _dvdq174 = {
    beforeCurrency: _dvdq172,
    afterCurrency: _dvdq172
}, _dvdq175 = {
    "short": _dvdq170,
    "default": "¤ #,##0.00;¤-#,##0.00",
    one: "{0} {1}",
    other: "{0} {1}",
    currencySpacing: _dvdq174
}, _dvdq176 = {
    scientific: {
        "default": "#E0"
    },
    decimal: _dvdq173,
    currency: _dvdq175,
    percent: {
        "default": "#,##0%"
    }
};

inter.id = "de_ch";

inter.unitPatterns = {
    "long": {
        unit: {
            areaSquareFoot: {
                one: "{0} Quadratfuss",
                other: "{0} Quadratfuss"
            },
            lengthFoot: {
                one: "{0} Fuss",
                other: "{0} Fuss"
            },
            volumeCubicFoot: {
                one: "{0} Kubikfuss",
                other: "{0} Kubikfuss"
            },
            accelerationGForce: P.unitPatterns.long.unit.accelerationGForce,
            accelerationMeterPerSecondSquared: _dvdq101,
            angleRevolution: {
                one: "{0} Umdrehung",
                other: "{0} Umdrehungen"
            },
            angleRadian: {
                one: "{0} Radiant",
                other: "{0} Radianten"
            },
            angleDegree: {
                one: "{0} Grad",
                other: "{0} Grad"
            },
            angleArcMinute: {
                one: "{0} Winkelminute",
                other: "{0} Winkelminuten"
            },
            angleArcSecond: {
                one: "{0} Winkelsekunde",
                other: "{0} Winkelsekunden"
            },
            areaSquareKilometer: {
                one: "{0} Quadratkilometer",
                other: "{0} Quadratkilometer"
            },
            areaHectare: {
                one: "{0} Hektar",
                other: "{0} Hektar"
            },
            areaSquareMeter: {
                one: "{0} Quadratmeter",
                other: "{0} Quadratmeter"
            },
            areaSquareCentimeter: {
                one: "{0} Quadratzentimeter",
                other: "{0} Quadratzentimeter"
            },
            areaSquareMile: {
                one: "{0} Quadratmeile",
                other: "{0} Quadratmeilen"
            },
            areaAcre: {
                one: "{0} Acre",
                other: "{0} Acres"
            },
            areaSquareYard: {
                one: "{0} Quadratyard",
                other: "{0} Quadratyards"
            },
            areaSquareInch: {
                one: "{0} Quadratzoll",
                other: "{0} Quadratzoll"
            },
            concentrKarat: _dvdq116,
            consumptionLiterPerKilometer: {
                one: "{0} Liter pro Kilometer",
                other: "{0} Liter pro Kilometer"
            },
            "consumptionLiterPer-100kilometers": {
                one: "{0} Liter auf 100 Kilometer",
                other: "{0} Liter auf 100 Kilometer"
            },
            consumptionMilePerGallon: {
                one: "{0} Meile pro Gallone",
                other: "{0} Meilen pro Gallone"
            },
            digitalTerabyte: {
                one: "{0} Terabyte",
                other: "{0} Terabytes"
            },
            digitalTerabit: {
                one: "{0} Terabit",
                other: "{0} Terabits"
            },
            digitalGigabyte: {
                one: "{0} Gigabyte",
                other: "{0} Gigabytes"
            },
            digitalGigabit: {
                one: "{0} Gigabit",
                other: "{0} Gigabits"
            },
            digitalMegabyte: {
                one: "{0} Megabyte",
                other: "{0} Megabytes"
            },
            digitalMegabit: {
                one: "{0} Megabit",
                other: "{0} Megabits"
            },
            digitalKilobyte: {
                one: "{0} Kilobyte",
                other: "{0} Kilobytes"
            },
            digitalKilobit: {
                one: "{0} Kilobit",
                other: "{0} Kilobits"
            },
            digitalByte: _dvdq115,
            digitalBit: _dvdq99,
            durationCentury: {
                one: "{0} Jahrhundert",
                other: "{0} Jahrhunderte"
            },
            durationYear: {
                one: "{0} Jahr",
                other: "{0} Jahre"
            },
            durationMonth: {
                one: "{0} Monat",
                other: "{0} Monate"
            },
            durationWeek: {
                one: "{0} Woche",
                other: "{0} Wochen"
            },
            durationDay: {
                one: "{0} Tag",
                other: "{0} Tage"
            },
            durationHour: {
                one: "{0} Stunde",
                other: "{0} Stunden"
            },
            durationMinute: {
                one: "{0} Minute",
                other: "{0} Minuten"
            },
            durationSecond: {
                one: "{0} Sekunde",
                other: "{0} Sekunden"
            },
            durationMillisecond: {
                one: "{0} Millisekunde",
                other: "{0} Millisekunden"
            },
            durationMicrosecond: {
                one: "{0} Mikrosekunde",
                other: "{0} Mikrosekunden"
            },
            durationNanosecond: {
                one: "{0} Nanosekunde",
                other: "{0} Nanosekunden"
            },
            electricAmpere: {
                one: "{0} Ampere",
                other: "{0} Ampere"
            },
            electricMilliampere: {
                one: "{0} Milliampere",
                other: "{0} Milliampere"
            },
            electricOhm: {
                one: "{0} Ohm",
                other: "{0} Ohm"
            },
            electricVolt: {
                one: "{0} Volt",
                other: "{0} Volt"
            },
            energyKilocalorie: {
                one: "{0} Kilokalorie",
                other: "{0} Kilokalorien"
            },
            energyCalorie: {
                one: "{0} Kalorie",
                other: "{0} Kalorien"
            },
            energyFoodcalorie: {
                one: "{0} Kilokalorien",
                other: "{0} Kilokalorien"
            },
            energyKilojoule: {
                one: "{0} Kilojoule",
                other: "{0} Kilojoule"
            },
            energyJoule: {
                one: "{0} Joule",
                other: "{0} Joule"
            },
            energyKilowattHour: {
                one: "{0} Kilowattstunde",
                other: "{0} Kilowattstunden"
            },
            frequencyGigahertz: {
                one: "{0} Gigahertz",
                other: "{0} Gigahertz"
            },
            frequencyMegahertz: {
                one: "{0} Megahertz",
                other: "{0} Megahertz"
            },
            frequencyKilohertz: {
                one: "{0} Kilohertz",
                other: "{0} Kilohertz"
            },
            frequencyHertz: {
                one: "{0} Hertz",
                other: "{0} Hertz"
            },
            lengthKilometer: {
                one: "{0} Kilometer",
                other: "{0} Kilometer"
            },
            lengthMeter: {
                one: "{0} Meter",
                other: "{0} Meter"
            },
            lengthDecimeter: {
                one: "{0} Dezimeter",
                other: "{0} Dezimeter"
            },
            lengthCentimeter: {
                one: "{0} Zentimeter",
                other: "{0} Zentimeter"
            },
            lengthMillimeter: {
                one: "{0} Millimeter",
                other: "{0} Millimeter"
            },
            lengthMicrometer: {
                one: "{0} Mikrometer",
                other: "{0} Mikrometer"
            },
            lengthNanometer: {
                one: "{0} Nanometer",
                other: "{0} Nanometer"
            },
            lengthPicometer: {
                one: "{0} Pikometer",
                other: "{0} Pikometer"
            },
            lengthMile: {
                one: "{0} Meile",
                other: "{0} Meilen"
            },
            lengthYard: {
                one: "{0} Yard",
                other: "{0} Yards"
            },
            lengthInch: {
                one: "{0} Zoll",
                other: "{0} Zoll"
            },
            lengthParsec: {
                one: "{0} Parsec",
                other: "{0} Parsec"
            },
            lengthLightYear: {
                one: "{0} Lichtjahr",
                other: "{0} Lichtjahre"
            },
            lengthAstronomicalUnit: {
                one: "{0} AE",
                other: "{0} AE"
            },
            lengthFurlong: {
                one: "{0} Furlong",
                other: "{0} Furlong"
            },
            lengthFathom: {
                one: "{0} Faden",
                other: "{0} Faden"
            },
            lengthNauticalMile: {
                one: "{0} Seemeile",
                other: "{0} Seemeilen"
            },
            lengthMileScandinavian: {
                one: "{0} skandinavische Meile",
                other: "{0} skandinavische Meilen"
            },
            lightLux: {
                one: "{0} Lux",
                other: "{0} Lux"
            },
            massMetricTon: {
                one: "{0} Tonne",
                other: "{0} Tonnen"
            },
            massKilogram: {
                one: "{0} Kilogramm",
                other: "{0} Kilogramm"
            },
            massGram: {
                one: "{0} Gramm",
                other: "{0} Gramm"
            },
            massMilligram: {
                one: "{0} Milligramm",
                other: "{0} Milligramm"
            },
            massMicrogram: {
                one: "{0} Mikrogramm",
                other: "{0} Mikrogramm"
            },
            massTon: {
                one: "{0} Short Ton",
                other: "{0} Short Tons"
            },
            massStone: {
                one: "{0} Stone",
                other: "{0} Stones"
            },
            massPound: {
                one: "{0} Pfund",
                other: "{0} Pfund"
            },
            massOunce: {
                one: "{0} Unze",
                other: "{0} Unzen"
            },
            massOunceTroy: {
                one: "{0} Feinunze",
                other: "{0} Feinunzen"
            },
            massCarat: _dvdq116,
            powerGigawatt: {
                one: "{0} Gigawatt",
                other: "{0} Gigawatt"
            },
            powerMegawatt: {
                one: "{0} Megawatt",
                other: "{0} Megawatt"
            },
            powerKilowatt: {
                one: "{0} Kilowatt",
                other: "{0} Kilowatt"
            },
            powerWatt: {
                one: "{0} Watt",
                other: "{0} Watt"
            },
            powerMilliwatt: {
                one: "{0} Milliwatt",
                other: "{0} Milliwatt"
            },
            powerHorsepower: {
                one: "{0} Pferdestärke",
                other: "{0} Pferdestärken"
            },
            pressureHectopascal: {
                one: "{0} Hektopascal",
                other: "{0} Hektopascal"
            },
            pressureMillimeterOfMercury: {
                one: "{0} Millimeter Quecksilbersäule",
                other: "{0} Millimeter Quecksilbersäule"
            },
            pressurePoundPerSquareInch: {
                one: "{0} Pfund pro Quadratzoll",
                other: "{0} Pfund pro Quadratzoll"
            },
            pressureInchHg: {
                one: "{0} Zoll Quecksilbersäule",
                other: "{0} Zoll Quecksilbersäule"
            },
            pressureMillibar: {
                one: "{0} Millibar",
                other: "{0} Millibar"
            },
            speedKilometerPerHour: {
                one: "{0} Kilometer pro Stunde",
                other: "{0} Kilometer pro Stunde"
            },
            speedMeterPerSecond: {
                one: "{0} Meter pro Sekunde",
                other: "{0} Meter pro Sekunde"
            },
            speedMilePerHour: {
                one: "{0} Meile pro Stunde",
                other: "{0} Meilen pro Stunde"
            },
            speedKnot: {
                one: "{0} Knoten",
                other: "{0} Knoten"
            },
            temperatureGeneric: _dvdq1,
            temperatureCelsius: {
                one: "{0} Grad Celsius",
                other: "{0} Grad Celsius"
            },
            temperatureFahrenheit: {
                one: "{0} Grad Fahrenheit",
                other: "{0} Grad Fahrenheit"
            },
            temperatureKelvin: {
                one: "{0} Kelvin",
                other: "{0} Kelvin"
            },
            volumeCubicKilometer: {
                one: "{0} Kubikkilometer",
                other: "{0} Kubikkilometer"
            },
            volumeCubicMeter: {
                one: "{0} Kubikmeter",
                other: "{0} Kubikmeter"
            },
            volumeCubicCentimeter: {
                one: "{0} Kubikzentimeter",
                other: "{0} Kubikzentimeter"
            },
            volumeCubicMile: {
                one: "{0} Kubikmeile",
                other: "{0} Kubikmeilen"
            },
            volumeCubicYard: {
                one: "{0} Kubikyard",
                other: "{0} Kubikyards"
            },
            volumeCubicInch: {
                one: "{0} Kubikzoll",
                other: "{0} Kubikzoll"
            },
            volumeMegaliter: {
                one: "{0} Megaliter",
                other: "{0} Megaliter"
            },
            volumeHectoliter: {
                one: "{0} Hektoliter",
                other: "{0} Hektoliter"
            },
            volumeLiter: {
                one: "{0} Liter",
                other: "{0} Liter"
            },
            volumeDeciliter: {
                one: "{0} Deziliter",
                other: "{0} Deziliter"
            },
            volumeCentiliter: {
                one: "{0} Zentiliter",
                other: "{0} Zentiliter"
            },
            volumeMilliliter: {
                one: "{0} Milliliter",
                other: "{0} Milliliter"
            },
            volumePintMetric: {
                one: "{0} metrisches Pint",
                other: "{0} metrische Pints"
            },
            volumeCupMetric: {
                one: "{0} Tasse",
                other: "{0} Tassen"
            },
            volumeAcreFoot: {
                one: "{0} Acre-Foot",
                other: "{0} Acre-Feet"
            },
            volumeBushel: {
                one: "{0} Bushel",
                other: "{0} Bushel"
            },
            volumeGallon: {
                one: "{0} Gallone",
                other: "{0} Gallonen"
            },
            volumeQuart: {
                one: "{0} Quart",
                other: "{0} Quart"
            },
            volumePint: {
                one: "{0} Pint",
                other: "{0} Pints"
            },
            volumeCup: _dvdq100,
            volumeFluidOunce: {
                one: "{0} Flüssigunze",
                other: "{0} Flüssigunzen"
            },
            volumeTablespoon: {
                one: "{0} Esslöffel",
                other: "{0} Esslöffel"
            },
            volumeTeaspoon: {
                one: "{0} Teelöffel",
                other: "{0} Teelöffel"
            }
        },
        compoundUnit: {
            per: "{0} pro {1}"
        }
    },
    "short": {
        unit: {
            accelerationGForce: _dvdq4,
            accelerationMeterPerSecondSquared: _dvdq101,
            angleRevolution: {
                one: "{0} Umdr.",
                other: "{0} Umdr."
            },
            angleRadian: _dvdq74,
            angleDegree: _dvdq1,
            angleArcMinute: _dvdq2,
            angleArcSecond: _dvdq3,
            areaSquareKilometer: _dvdq75,
            areaHectare: _dvdq17,
            areaSquareMeter: _dvdq18,
            areaSquareCentimeter: _dvdq76,
            areaSquareMile: _dvdq77,
            areaAcre: _dvdq19,
            areaSquareYard: _dvdq78,
            areaSquareFoot: _dvdq79,
            areaSquareInch: _dvdq80,
            concentrKarat: _dvdq20,
            consumptionLiterPerKilometer: _dvdq102,
            "consumptionLiterPer-100kilometers": _dvdq142,
            consumptionMilePerGallon: _dvdq81,
            digitalTerabyte: _dvdq21,
            digitalTerabit: _dvdq22,
            digitalGigabyte: _dvdq23,
            digitalGigabit: _dvdq24,
            digitalMegabyte: _dvdq25,
            digitalMegabit: _dvdq26,
            digitalKilobyte: _dvdq27,
            digitalKilobit: _dvdq28,
            digitalByte: _dvdq115,
            digitalBit: _dvdq99,
            durationCentury: {
                one: "{0} Jh.",
                other: "{0} Jh."
            },
            durationYear: _dvdq5,
            durationMonth: {
                one: "{0} Mon.",
                other: "{0} Mon."
            },
            durationWeek: {
                one: "{0} Wo.",
                other: "{0} Wo."
            },
            durationDay: {
                one: "{0} Tg.",
                other: "{0} Tg."
            },
            durationHour: _dvdq103,
            durationMinute: _dvdq104,
            durationSecond: {
                one: "{0} Sek.",
                other: "{0} Sek."
            },
            durationMillisecond: _dvdq29,
            durationMicrosecond: _dvdq30,
            durationNanosecond: _dvdq31,
            electricAmpere: _dvdq6,
            electricMilliampere: _dvdq32,
            electricOhm: _dvdq7,
            electricVolt: _dvdq8,
            energyKilocalorie: _dvdq105,
            energyCalorie: _dvdq82,
            energyFoodcalorie: _dvdq106,
            energyKilojoule: _dvdq33,
            energyJoule: _dvdq9,
            energyKilowattHour: _dvdq83,
            frequencyGigahertz: _dvdq84,
            frequencyMegahertz: _dvdq85,
            frequencyKilohertz: _dvdq86,
            frequencyHertz: _dvdq34,
            lengthKilometer: _dvdq35,
            lengthMeter: _dvdq10,
            lengthDecimeter: _dvdq36,
            lengthCentimeter: _dvdq37,
            lengthMillimeter: _dvdq38,
            lengthMicrometer: _dvdq39,
            lengthNanometer: _dvdq40,
            lengthPicometer: _dvdq41,
            lengthMile: _dvdq42,
            lengthYard: _dvdq43,
            lengthFoot: _dvdq44,
            lengthInch: _dvdq45,
            lengthParsec: _dvdq46,
            lengthLightYear: {
                one: "{0} Lj",
                other: "{0} Lj"
            },
            lengthAstronomicalUnit: {
                one: "{0} AE",
                other: "{0} AE"
            },
            lengthFurlong: _dvdq87,
            lengthFathom: _dvdq47,
            lengthNauticalMile: _dvdq48,
            lengthMileScandinavian: _dvdq88,
            lightLux: _dvdq49,
            massMetricTon: _dvdq11,
            massKilogram: _dvdq50,
            massGram: _dvdq12,
            massMilligram: _dvdq51,
            massMicrogram: _dvdq52,
            massTon: _dvdq53,
            massStone: _dvdq54,
            massPound: _dvdq55,
            massOunce: _dvdq56,
            massOunceTroy: {
                one: "{0} oz.tr.",
                other: "{0} oz.tr."
            },
            massCarat: _dvdq57,
            powerGigawatt: _dvdq58,
            powerMegawatt: _dvdq59,
            powerKilowatt: _dvdq60,
            powerWatt: _dvdq13,
            powerMilliwatt: _dvdq61,
            powerHorsepower: _dvdq62,
            pressureHectopascal: _dvdq89,
            pressureMillimeterOfMercury: _dvdq117,
            pressurePoundPerSquareInch: _dvdq90,
            pressureInchHg: _dvdq107,
            pressureMillibar: _dvdq108,
            speedKilometerPerHour: _dvdq109,
            speedMeterPerSecond: _dvdq91,
            speedMilePerHour: _dvdq110,
            speedKnot: {
                one: "{0} kn",
                other: "{0} kn"
            },
            temperatureGeneric: _dvdq1,
            temperatureCelsius: {
                one: "{0} °C",
                other: "{0} °C"
            },
            temperatureFahrenheit: _dvdq14,
            temperatureKelvin: _dvdq15,
            volumeCubicKilometer: _dvdq92,
            volumeCubicMeter: _dvdq63,
            volumeCubicCentimeter: _dvdq93,
            volumeCubicMile: _dvdq94,
            volumeCubicYard: _dvdq95,
            volumeCubicFoot: _dvdq96,
            volumeCubicInch: _dvdq97,
            volumeMegaliter: _dvdq64,
            volumeHectoliter: _dvdq65,
            volumeLiter: _dvdq16,
            volumeDeciliter: _dvdq66,
            volumeCentiliter: _dvdq67,
            volumeMilliliter: _dvdq68,
            volumePintMetric: {
                one: "{0} mpt",
                other: "{0} mpt"
            },
            volumeCupMetric: {
                one: "{0} mc",
                other: "{0} mc"
            },
            volumeAcreFoot: _dvdq118,
            volumeBushel: _dvdq69,
            volumeGallon: _dvdq98,
            volumeQuart: _dvdq70,
            volumePint: _dvdq71,
            volumeCup: _dvdq100,
            volumeFluidOunce: _dvdq119,
            volumeTablespoon: _dvdq72,
            volumeTeaspoon: _dvdq73,
            concentrMilligramPerDeciliter: {
                other: "{0} mg/dL"
            },
            concentrMillimolePerLiter: {
                other: "{0} mmol/L"
            },
            concentrPartPerMillion: {
                other: "{0} ppm"
            },
            consumptionMilePerGallonImperial: {
                other: "{0} mpg Imp."
            },
            volumeGallonImperial: {
                other: "{0} gal Imp."
            }
        },
        compoundUnit: {
            per: "{0}/{1}"
        }
    },
    narrow: {
        unit: {
            accelerationGForce: _dvdq4,
            accelerationMeterPerSecondSquared: _dvdq101,
            angleRadian: _dvdq74,
            angleDegree: _dvdq1,
            angleArcMinute: _dvdq2,
            angleArcSecond: _dvdq3,
            areaSquareKilometer: _dvdq75,
            areaHectare: _dvdq17,
            areaSquareMeter: _dvdq18,
            areaSquareCentimeter: _dvdq76,
            areaSquareMile: _dvdq77,
            areaAcre: _dvdq19,
            areaSquareYard: _dvdq78,
            areaSquareFoot: _dvdq79,
            areaSquareInch: _dvdq80,
            concentrKarat: _dvdq20,
            consumptionLiterPerKilometer: _dvdq102,
            "consumptionLiterPer-100kilometers": _dvdq142,
            consumptionMilePerGallon: _dvdq81,
            digitalTerabyte: _dvdq21,
            digitalTerabit: _dvdq22,
            digitalGigabyte: _dvdq23,
            digitalGigabit: _dvdq24,
            digitalMegabyte: _dvdq25,
            digitalMegabit: _dvdq26,
            digitalKilobyte: _dvdq27,
            digitalKilobit: _dvdq28,
            digitalByte: _dvdq115,
            digitalBit: _dvdq99,
            durationCentury: {
                one: "{0} Jahrh.",
                other: "{0} Jahrh."
            },
            durationYear: _dvdq5,
            durationMonth: {
                one: "{0} M",
                other: "{0} M"
            },
            durationWeek: _dvdq13,
            durationDay: {
                one: "{0} T",
                other: "{0} T"
            },
            durationHour: _dvdq103,
            durationMinute: _dvdq104,
            durationSecond: {
                one: "{0} s",
                other: "{0} s"
            },
            durationMillisecond: _dvdq29,
            durationMicrosecond: _dvdq30,
            durationNanosecond: _dvdq31,
            electricAmpere: _dvdq6,
            electricMilliampere: _dvdq32,
            electricOhm: _dvdq7,
            electricVolt: _dvdq8,
            energyKilocalorie: _dvdq105,
            energyCalorie: _dvdq82,
            energyFoodcalorie: _dvdq106,
            energyKilojoule: _dvdq33,
            energyJoule: _dvdq9,
            energyKilowattHour: _dvdq83,
            frequencyGigahertz: _dvdq84,
            frequencyMegahertz: _dvdq85,
            frequencyKilohertz: _dvdq86,
            frequencyHertz: _dvdq34,
            lengthKilometer: _dvdq35,
            lengthMeter: _dvdq10,
            lengthDecimeter: _dvdq36,
            lengthCentimeter: _dvdq37,
            lengthMillimeter: _dvdq38,
            lengthMicrometer: _dvdq39,
            lengthNanometer: _dvdq40,
            lengthPicometer: _dvdq41,
            lengthMile: _dvdq42,
            lengthYard: _dvdq43,
            lengthFoot: _dvdq44,
            lengthInch: _dvdq45,
            lengthParsec: _dvdq46,
            lengthLightYear: {
                one: "{0} ly",
                other: "{0} ly"
            },
            lengthAstronomicalUnit: {
                one: "{0} AE",
                other: "{0} AE"
            },
            lengthFurlong: _dvdq87,
            lengthFathom: _dvdq47,
            lengthNauticalMile: _dvdq48,
            lengthMileScandinavian: _dvdq88,
            lightLux: _dvdq49,
            massMetricTon: _dvdq11,
            massKilogram: _dvdq50,
            massGram: _dvdq12,
            massMilligram: _dvdq51,
            massMicrogram: _dvdq52,
            massTon: _dvdq53,
            massStone: _dvdq54,
            massPound: _dvdq55,
            massOunce: _dvdq56,
            massOunceTroy: {
                one: "{0} oz.tr.",
                other: "{0} oz.tr."
            },
            massCarat: _dvdq57,
            powerGigawatt: _dvdq58,
            powerMegawatt: _dvdq59,
            powerKilowatt: _dvdq60,
            powerWatt: _dvdq13,
            powerMilliwatt: _dvdq61,
            powerHorsepower: _dvdq62,
            pressureHectopascal: _dvdq89,
            pressureMillimeterOfMercury: _dvdq117,
            pressurePoundPerSquareInch: _dvdq90,
            pressureInchHg: _dvdq107,
            pressureMillibar: _dvdq108,
            speedKilometerPerHour: _dvdq109,
            speedMeterPerSecond: _dvdq91,
            speedMilePerHour: _dvdq110,
            temperatureCelsius: _dvdq1,
            temperatureFahrenheit: _dvdq14,
            temperatureKelvin: _dvdq15,
            volumeCubicKilometer: _dvdq92,
            volumeCubicMeter: _dvdq63,
            volumeCubicCentimeter: _dvdq93,
            volumeCubicMile: _dvdq94,
            volumeCubicYard: _dvdq95,
            volumeCubicFoot: _dvdq96,
            volumeCubicInch: _dvdq97,
            volumeMegaliter: _dvdq64,
            volumeHectoliter: _dvdq65,
            volumeLiter: _dvdq16,
            volumeDeciliter: _dvdq66,
            volumeCentiliter: _dvdq67,
            volumeMilliliter: _dvdq68,
            volumeAcreFoot: _dvdq118,
            volumeBushel: _dvdq69,
            volumeGallon: _dvdq98,
            volumeQuart: _dvdq70,
            volumePint: _dvdq71,
            volumeCup: _dvdq100,
            volumeFluidOunce: _dvdq119,
            volumeTablespoon: _dvdq72,
            volumeTeaspoon: _dvdq73
        },
        compoundUnit: {
            per: "{0}/{1}"
        }
    }
};

inter.characters = {
    exemplar: {
        "default": [ "a", "ä", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "ö", "p", "q", "r", "s", "t", "u", "ü", "v", "w", "x", "y", "z" ],
        auxiliary: [ "á", "à", "ă", "â", "å", "ã", "ā", "æ", "ç", "é", "è", "ĕ", "ê", "ë", "ē", "ğ", "í", "ì", "ĭ", "î", "ï", "İ", "ī", "ı", "ñ", "ó", "ò", "ŏ", "ô", "ø", "ō", "œ", "ş", "ß", "ú", "ù", "ŭ", "û", "ū", "ÿ" ],
        index: [ "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z" ],
        punctuation: [ "\\-", "‐", "–", "—", ",", ";", "\\:", "!", "?", ".", "…", "'", "‘", "‚", '"', "“", "„", "«", "»", "(", ")", "\\[", "\\]", "\\{", "\\}", "§", "@", "*", "/", "\\&", "#" ]
    },
    ellipsis: {
        "final": "{0} …",
        initial: "… {0}",
        medial: "{0} … {1}",
        "word-final": "{0} …",
        "word-initial": "… {0}",
        "word-medial": "{0} … {1}"
    },
    moreInformation: "?"
};

inter.numbers = {
    ahom: {
        symbols: _dvdq165,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    arab: {
        symbols: {
            decimal: "٫",
            group: "٬",
            list: "؛",
            percentSign: "٪",
            plusSign: "‏+",
            minusSign: "‏-",
            exponential: "اس",
            superscriptingExponent: "×",
            perMille: "؉",
            infinity: "∞",
            nan: "NaN",
            timeSeparator: ":"
        },
        formats: _dvdq176,
        digits: [ "٠", "١", "٢", "٣", "٤", "٥", "٦", "٧", "٨", "٩" ]
    },
    arabext: {
        symbols: {
            decimal: "٫",
            group: "٬",
            list: "؛",
            percentSign: "٪",
            plusSign: "‎+‎",
            minusSign: "‎-‎",
            exponential: "×۱۰^",
            superscriptingExponent: "×",
            perMille: "؉",
            infinity: "∞",
            nan: "NaN",
            timeSeparator: "٫"
        },
        formats: _dvdq176,
        digits: [ "۰", "۱", "۲", "۳", "۴", "۵", "۶", "۷", "۸", "۹" ]
    },
    armn: {
        symbols: _dvdq165,
        digits: "renderArmenianUpper"
    },
    armnlow: {
        symbols: _dvdq165,
        digits: "renderArmenianLower"
    },
    bali: {
        symbols: _dvdq165,
        formats: _dvdq176,
        digits: [ "᭐", "᭑", "᭒", "᭓", "᭔", "᭕", "᭖", "᭗", "᭘", "᭙" ]
    },
    beng: {
        symbols: _dvdq165,
        formats: _dvdq176,
        digits: [ "০", "১", "২", "৩", "৪", "৫", "৬", "৭", "৮", "৯" ]
    },
    brah: {
        symbols: _dvdq165,
        formats: _dvdq176,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    cakm: {
        symbols: _dvdq165,
        formats: _dvdq176,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    cham: {
        symbols: _dvdq165,
        formats: _dvdq176,
        digits: [ "꩐", "꩑", "꩒", "꩓", "꩔", "꩕", "꩖", "꩗", "꩘", "꩙" ]
    },
    cyrl: {
        symbols: _dvdq165,
        digits: "renderCyrillicLower"
    },
    deva: {
        symbols: _dvdq165,
        formats: _dvdq176,
        digits: [ "०", "१", "२", "३", "४", "५", "६", "७", "८", "९" ]
    },
    ethi: {
        symbols: _dvdq165,
        digits: "renderEthiopic"
    },
    finance: _dvdq166,
    fullwide: {
        symbols: _dvdq165,
        formats: _dvdq176,
        digits: [ "０", "１", "２", "３", "４", "５", "６", "７", "８", "９" ]
    },
    geor: {
        symbols: _dvdq165,
        digits: "renderGeorgian"
    },
    grek: {
        symbols: _dvdq165,
        digits: "renderGreekUpper"
    },
    greklow: {
        symbols: _dvdq165,
        digits: "renderGreekLower"
    },
    gujr: {
        symbols: _dvdq165,
        formats: _dvdq176,
        digits: [ "૦", "૧", "૨", "૩", "૪", "૫", "૬", "૭", "૮", "૯" ]
    },
    guru: {
        symbols: _dvdq165,
        formats: _dvdq176,
        digits: [ "੦", "੧", "੨", "੩", "੪", "੫", "੬", "੭", "੮", "੯" ]
    },
    hanidays: {
        symbols: _dvdq165,
        digits: "renderSpelloutNumberingDays"
    },
    hanidec: {
        symbols: _dvdq165,
        formats: _dvdq176,
        digits: [ "〇", "一", "二", "三", "四", "五", "六", "七", "八", "九" ]
    },
    hans: _dvdq167,
    hansfin: _dvdq168,
    hant: _dvdq167,
    hantfin: _dvdq168,
    hebr: {
        symbols: _dvdq165,
        digits: "renderHebrew"
    },
    hmng: {
        symbols: _dvdq165,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    java: {
        symbols: _dvdq165,
        formats: _dvdq176,
        digits: [ "꧐", "꧑", "꧒", "꧓", "꧔", "꧕", "꧖", "꧗", "꧘", "꧙" ]
    },
    jpan: _dvdq167,
    jpanfin: _dvdq168,
    kali: {
        symbols: _dvdq165,
        formats: _dvdq176,
        digits: [ "꤀", "꤁", "꤂", "꤃", "꤄", "꤅", "꤆", "꤇", "꤈", "꤉" ]
    },
    khmr: {
        symbols: _dvdq165,
        formats: _dvdq176,
        digits: [ "០", "១", "២", "៣", "៤", "៥", "៦", "៧", "៨", "៩" ]
    },
    knda: {
        symbols: _dvdq165,
        formats: _dvdq176,
        digits: [ "೦", "೧", "೨", "೩", "೪", "೫", "೬", "೭", "೮", "೯" ]
    },
    lana: {
        symbols: _dvdq165,
        formats: _dvdq176,
        digits: [ "᪀", "᪁", "᪂", "᪃", "᪄", "᪅", "᪆", "᪇", "᪈", "᪉" ]
    },
    lanatham: {
        symbols: _dvdq165,
        formats: _dvdq176,
        digits: [ "᪐", "᪑", "᪒", "᪓", "᪔", "᪕", "᪖", "᪗", "᪘", "᪙" ]
    },
    laoo: {
        symbols: _dvdq165,
        formats: _dvdq176,
        digits: [ "໐", "໑", "໒", "໓", "໔", "໕", "໖", "໗", "໘", "໙" ]
    },
    latn: {
        symbols: _dvdq165,
        formats: _dvdq176,
        digits: [ "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" ]
    },
    lepc: {
        symbols: _dvdq165,
        formats: _dvdq176,
        digits: [ "᱀", "᱁", "᱂", "᱃", "᱄", "᱅", "᱆", "᱇", "᱈", "᱉" ]
    },
    limb: {
        symbols: _dvdq165,
        formats: _dvdq176,
        digits: [ "᥆", "᥇", "᥈", "᥉", "᥊", "᥋", "᥌", "᥍", "᥎", "᥏" ]
    },
    mathbold: {
        symbols: _dvdq165,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathdbl: {
        symbols: _dvdq165,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathmono: {
        symbols: _dvdq165,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathsanb: {
        symbols: _dvdq165,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathsans: {
        symbols: _dvdq165,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mlym: {
        symbols: _dvdq165,
        formats: _dvdq176,
        digits: [ "൦", "൧", "൨", "൩", "൪", "൫", "൬", "൭", "൮", "൯" ]
    },
    modi: {
        symbols: _dvdq165,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mong: {
        symbols: _dvdq165,
        formats: _dvdq176,
        digits: [ "᠐", "᠑", "᠒", "᠓", "᠔", "᠕", "᠖", "᠗", "᠘", "᠙" ]
    },
    mroo: {
        symbols: _dvdq165,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mtei: {
        symbols: _dvdq165,
        formats: _dvdq176,
        digits: [ "꯰", "꯱", "꯲", "꯳", "꯴", "꯵", "꯶", "꯷", "꯸", "꯹" ]
    },
    mymr: {
        symbols: _dvdq165,
        formats: _dvdq176,
        digits: [ "၀", "၁", "၂", "၃", "၄", "၅", "၆", "၇", "၈", "၉" ]
    },
    mymrshan: {
        symbols: _dvdq165,
        formats: _dvdq176,
        digits: [ "႐", "႑", "႒", "႓", "႔", "႕", "႖", "႗", "႘", "႙" ]
    },
    mymrtlng: {
        symbols: _dvdq165,
        digits: [ "꧰", "꧱", "꧲", "꧳", "꧴", "꧵", "꧶", "꧷", "꧸", "꧹" ]
    },
    "native": _dvdq166,
    nkoo: {
        symbols: _dvdq165,
        formats: _dvdq176,
        digits: [ "߀", "߁", "߂", "߃", "߄", "߅", "߆", "߇", "߈", "߉" ]
    },
    olck: {
        symbols: _dvdq165,
        formats: _dvdq176,
        digits: [ "᱐", "᱑", "᱒", "᱓", "᱔", "᱕", "᱖", "᱗", "᱘", "᱙" ]
    },
    orya: {
        symbols: _dvdq165,
        formats: _dvdq176,
        digits: [ "୦", "୧", "୨", "୩", "୪", "୫", "୬", "୭", "୮", "୯" ]
    },
    osma: {
        symbols: _dvdq165,
        formats: _dvdq176,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    roman: {
        symbols: _dvdq165,
        digits: "renderRomanUpper"
    },
    romanlow: {
        symbols: _dvdq165,
        digits: "renderRomanLower"
    },
    saur: {
        symbols: _dvdq165,
        formats: _dvdq176,
        digits: [ "꣐", "꣑", "꣒", "꣓", "꣔", "꣕", "꣖", "꣗", "꣘", "꣙" ]
    },
    shrd: {
        symbols: _dvdq165,
        formats: _dvdq176,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    sind: {
        symbols: _dvdq165,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    sinh: {
        symbols: _dvdq165,
        digits: [ "෦", "෧", "෨", "෩", "෪", "෫", "෬", "෭", "෮", "෯" ]
    },
    sora: {
        symbols: _dvdq165,
        formats: _dvdq176,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    sund: {
        symbols: _dvdq165,
        formats: _dvdq176,
        digits: [ "᮰", "᮱", "᮲", "᮳", "᮴", "᮵", "᮶", "᮷", "᮸", "᮹" ]
    },
    takr: {
        symbols: _dvdq165,
        formats: _dvdq176,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    talu: {
        symbols: _dvdq165,
        formats: _dvdq176,
        digits: [ "᧐", "᧑", "᧒", "᧓", "᧔", "᧕", "᧖", "᧗", "᧘", "᧙" ]
    },
    taml: {
        symbols: _dvdq165,
        digits: "renderTamil"
    },
    tamldec: {
        symbols: _dvdq165,
        formats: _dvdq176,
        digits: [ "௦", "௧", "௨", "௩", "௪", "௫", "௬", "௭", "௮", "௯" ]
    },
    telu: {
        symbols: _dvdq165,
        formats: _dvdq176,
        digits: [ "౦", "౧", "౨", "౩", "౪", "౫", "౬", "౭", "౮", "౯" ]
    },
    thai: {
        symbols: _dvdq165,
        formats: _dvdq176,
        digits: [ "๐", "๑", "๒", "๓", "๔", "๕", "๖", "๗", "๘", "๙" ]
    },
    tirh: {
        symbols: _dvdq165,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    tibt: {
        symbols: _dvdq165,
        formats: _dvdq176,
        digits: [ "༠", "༡", "༢", "༣", "༤", "༥", "༦", "༧", "༨", "༩" ]
    },
    traditio: _dvdq166,
    vaii: {
        symbols: _dvdq165,
        formats: _dvdq176,
        digits: [ "꘠", "꘡", "꘢", "꘣", "꘤", "꘥", "꘦", "꘧", "꘨", "꘩" ]
    },
    wara: {
        symbols: _dvdq165,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    }
};

inter.pluralRule = function(n) {
    var i = Math.floor(Math.abs(n)), v = n.toString().replace(/^[^.]*\.?/, "").length;
    if (typeof n === "string") n = parseInt(n, 10);
    if (i === 1 && v === 0) return "one";
    return "other";
};

inter.renderDigitsOrdinal = function(n) {
    if (n < 0) return "−" + this.renderDigitsOrdinal(-n);
    if (n >= 0) return this.renderNumber(n, "#,##0") + ".";
};

inter.renderSpelloutNumbering = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "minus " + this.renderSpelloutNumbering(-n);
    if (isFractional && n > 1) return this.renderSpelloutNumbering(Math.floor(n)) + " Komma " + this.renderSpelloutNumbering(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 2e15) return this.renderSpelloutCardinalFeminine(Math.floor(n / 1e15)) + " Billiarden" + (n === 2e15 ? "" : " " + this.renderSpelloutNumbering(n % 1e15));
    if (n >= 1e15) return "eine Billiarde" + (n === 1e15 ? "" : " " + this.renderSpelloutNumbering(n % 1e15));
    if (n >= 2e12) return this.renderSpelloutCardinalFeminine(Math.floor(n / 1e12)) + " Billionen" + (n === 2e12 ? "" : " " + this.renderSpelloutNumbering(n % 1e12));
    if (n >= 1e12) return "eine Billion" + (n === 1e12 ? "" : " " + this.renderSpelloutNumbering(n % 1e12));
    if (n >= 2e9) return this.renderSpelloutCardinalFeminine(Math.floor(n / 1e9)) + " Milliarden" + (n === 2e9 ? "" : " " + this.renderSpelloutNumbering(n % 1e9));
    if (n >= 1e9) return "eine Milliarde" + (n === 1e9 ? "" : " " + this.renderSpelloutNumbering(n % 1e9));
    if (n >= 2e6) return this.renderSpelloutCardinalFeminine(Math.floor(n / 1e6)) + " Millionen" + (n === 2e6 ? "" : " " + this.renderSpelloutNumbering(n % 1e6));
    if (n >= 1e6) return "eine Million" + (n === 1e6 ? "" : " " + this.renderSpelloutNumbering(n % 1e6));
    if (n >= 1e3) return this.renderSpelloutCardinalMasculine(Math.floor(n / 1e3)) + "­tausend" + (n === 1e3 ? "" : "­" + this.renderSpelloutNumbering(n % 1e3));
    if (n >= 100) return this.renderSpelloutCardinalMasculine(Math.floor(n / 100)) + "­hundert" + (n === 100 ? "" : "­" + this.renderSpelloutNumbering(n % 100));
    if (n >= 90) return (n === 90 ? "" : this.renderSpelloutCardinalMasculine(n % 10) + "­und­") + "neunzig";
    if (n >= 80) return (n === 80 ? "" : this.renderSpelloutCardinalMasculine(n % 10) + "­und­") + "achtzig";
    if (n >= 70) return (n === 70 ? "" : this.renderSpelloutCardinalMasculine(n % 10) + "­und­") + "siebzig";
    if (n >= 60) return (n === 60 ? "" : this.renderSpelloutCardinalMasculine(n % 10) + "­und­") + "sechzig";
    if (n >= 50) return (n === 50 ? "" : this.renderSpelloutCardinalMasculine(n % 10) + "­und­") + "fünfzig";
    if (n >= 40) return (n === 40 ? "" : this.renderSpelloutCardinalMasculine(n % 10) + "­und­") + "vierzig";
    if (n >= 30) return (n === 30 ? "" : this.renderSpelloutCardinalMasculine(n % 10) + "­und­") + "dreissig";
    if (n >= 20) return (n === 20 ? "" : this.renderSpelloutCardinalMasculine(n % 10) + "­und­") + "zwanzig";
    if (n >= 18) return this.renderSpelloutNumbering(n % 10) + "zehn";
    if (n >= 17) return "siebzehn";
    if (n >= 16) return "sechzehn";
    if (n >= 13) return this.renderSpelloutNumbering(n % 10) + "zehn";
    if (n >= 12) return "zwölf";
    if (n >= 11) return "elf";
    if (n >= 10) return "zehn";
    if (n >= 9) return "neun";
    if (n >= 8) return "acht";
    if (n >= 7) return "sieben";
    if (n >= 6) return "sechs";
    if (n >= 5) return "fünf";
    if (n >= 4) return "vier";
    if (n >= 3) return "drei";
    if (n >= 2) return "zwei";
    if (n >= 1) return "eins";
    if (n >= 0) return "null";
};

inter.renderArmenianUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderArmenianUpper(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e4) return this.renderNumber(n, "#,##0");
    if (n >= 9e3) return "Ք" + (n === 9e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 8e3) return "Փ" + (n === 8e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 7e3) return "Ւ" + (n === 7e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 6e3) return "Ց" + (n === 6e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 5e3) return "Ր" + (n === 5e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 4e3) return "Տ" + (n === 4e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 3e3) return "Վ" + (n === 3e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 2e3) return "Ս" + (n === 2e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 1e3) return "Ռ" + (n === 1e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 900) return "Ջ" + (n === 900 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 800) return "Պ" + (n === 800 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 700) return "Չ" + (n === 700 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 600) return "Ո" + (n === 600 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 500) return "Շ" + (n === 500 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 400) return "Ն" + (n === 400 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 300) return "Յ" + (n === 300 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 200) return "Մ" + (n === 200 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 100) return "Ճ" + (n === 100 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 90) return "Ղ" + (n === 90 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 80) return "Ձ" + (n === 80 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 70) return "Հ" + (n === 70 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 60) return "Կ" + (n === 60 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 50) return "Ծ" + (n === 50 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 40) return "Խ" + (n === 40 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 30) return "Լ" + (n === 30 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 20) return "Ի" + (n === 20 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 10) return "Ժ" + (n === 10 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 9) return "Թ";
    if (n >= 8) return "Ը";
    if (n >= 7) return "Է";
    if (n >= 6) return "Զ";
    if (n >= 5) return "Ե";
    if (n >= 4) return "Դ";
    if (n >= 3) return "Գ";
    if (n >= 2) return "Բ";
    if (n >= 1) return "Ա";
    if (n >= 0) return "0";
};

inter.renderArmenianLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderArmenianLower(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e4) return this.renderNumber(n, "#,##0");
    if (n >= 9e3) return "ք" + (n === 9e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 8e3) return "փ" + (n === 8e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 7e3) return "ւ" + (n === 7e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 6e3) return "ց" + (n === 6e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 5e3) return "ր" + (n === 5e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 4e3) return "տ" + (n === 4e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 3e3) return "վ" + (n === 3e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 2e3) return "ս" + (n === 2e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 1e3) return "ռ" + (n === 1e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 900) return "ջ" + (n === 900 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 800) return "պ" + (n === 800 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 700) return "չ" + (n === 700 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 600) return "ո" + (n === 600 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 500) return "շ" + (n === 500 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 400) return "ն" + (n === 400 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 300) return "յ" + (n === 300 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 200) return "մ" + (n === 200 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 100) return "ճ" + (n === 100 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 90) return "ղ" + (n === 90 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 80) return "ձ" + (n === 80 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 70) return "հ" + (n === 70 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 60) return "կ" + (n === 60 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 50) return "ծ" + (n === 50 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 40) return "խ" + (n === 40 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 30) return "լ" + (n === 30 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 20) return "ի" + (n === 20 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 10) return "ժ" + (n === 10 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 9) return "թ";
    if (n >= 8) return "ը";
    if (n >= 7) return "է";
    if (n >= 6) return "զ";
    if (n >= 5) return "ե";
    if (n >= 4) return "դ";
    if (n >= 3) return "գ";
    if (n >= 2) return "բ";
    if (n >= 1) return "ա";
    if (n >= 0) return "0";
};

inter.renderCyrillicLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderCyrillicLower(-n);
    if (isFractional && n > 1) return this.renderCyrillicLower(Math.floor(n)) + "." + this.renderCyrillicLower(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e15) return "҂҂҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e15)) + (n === 1e15 ? "" : " " + this.renderCyrillicLower(n % 1e15));
    if (n >= 1e12) return "҂҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e12)) + (n === 1e12 ? "" : " " + this.renderCyrillicLower(n % 1e12));
    if (n >= 1e9) return "҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e9)) + (n === 1e9 ? "" : " " + this.renderCyrillicLower(n % 1e9));
    if (n >= 1e6) return "҂҂" + this.renderCyrillicLower(Math.floor(n / 1e6)) + (n === 1e6 ? "" : " " + this.renderCyrillicLower(n % 1e6));
    if (n >= 11e3) return this.renderCyrillicLowerThousands(Math.floor(n / 1e4)) + (n === 11e3 ? "" : " " + this.renderCyrillicLower(n % 1e4));
    if (n >= 1e4) return "҂" + this.renderCyrillicLower(Math.floor(n / 1e4)) + (n === 1e4 ? "" : " " + this.renderCyrillicLower(n % 1e4));
    if (n >= 1e3) return "҂" + this.renderCyrillicLower110(Math.floor(n / 1e3)) + this.renderCyrillicLowerPost(n % 1e3);
    if (n >= 900) return "ц" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 801) return "ѿ" + this.renderCyrillicLower(n % 100);
    if (n >= 800) return "ѿ҃";
    if (n >= 700) return "ѱ" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 600) return "х" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 500) return "ф" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 400) return "у" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 300) return "т" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 200) return "с" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 100) return "р" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 90) return "ч" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 80) return "п" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 70) return "ѻ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 60) return "ѯ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 50) return "н" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 40) return "м" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 30) return "л" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 20) return "к" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 19) return "ѳ҃і";
    if (n >= 18) return "и҃і";
    if (n >= 17) return "з҃і";
    if (n >= 16) return "ѕ҃і";
    if (n >= 15) return "є҃і";
    if (n >= 14) return "д҃і";
    if (n >= 13) return "г҃і";
    if (n >= 12) return "в҃і";
    if (n >= 11) return "а҃і";
    if (n >= 1) return this.renderCyrillicLower110(n) + "҃";
    if (n >= 0) return "0҃";
};

inter.renderEthiopic = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderEthiopic(-n);
    if (isFractional && n > 1) return this.renderEthiopic(Math.floor(n)) + "፡" + this.renderEthiopic(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,###0");
    if (n >= 2e16) return this.renderEthiopic(Math.floor(n / 1e16)) + "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 1e16) return "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 2e12) return this.renderEthiopic(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1e12) return "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 2e8) return this.renderEthiopic(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1e8) return "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 2e4) return this.renderEthiopic(Math.floor(n / 1e4)) + "፼" + (n === 2e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 1e4) return "፼" + (n === 1e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 200) return this.renderEthiopic(Math.floor(n / 100)) + "፻" + (n === 200 ? "" : this.renderEthiopic(n % 100));
    if (n >= 100) return "፻" + (n === 100 ? "" : this.renderEthiopic(n % 100));
    if (n >= 90) return "፺" + (n === 90 ? "" : this.renderEthiopic(n % 10));
    if (n >= 80) return "፹" + (n === 80 ? "" : this.renderEthiopic(n % 10));
    if (n >= 70) return "፸" + (n === 70 ? "" : this.renderEthiopic(n % 10));
    if (n >= 60) return "፷" + (n === 60 ? "" : this.renderEthiopic(n % 10));
    if (n >= 50) return "፶" + (n === 50 ? "" : this.renderEthiopic(n % 10));
    if (n >= 40) return "፵" + (n === 40 ? "" : this.renderEthiopic(n % 10));
    if (n >= 30) return "፴" + (n === 30 ? "" : this.renderEthiopic(n % 10));
    if (n >= 20) return "፳" + (n === 20 ? "" : this.renderEthiopic(n % 10));
    if (n >= 10) return "፲" + (n === 10 ? "" : this.renderEthiopic(n % 10));
    if (n >= 9) return "፱";
    if (n >= 8) return "፰";
    if (n >= 7) return "፯";
    if (n >= 6) return "፮";
    if (n >= 5) return "፭";
    if (n >= 4) return "፬";
    if (n >= 3) return "፫";
    if (n >= 2) return "፪";
    if (n >= 1) return "፩";
    if (n >= 0) return "ባዶ";
};

inter.renderGeorgian = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGeorgian(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 2e4) return this.renderNumber(n, "#,##0");
    if (n >= 1e4) return "ჯ" + (n === 1e4 ? "" : this.renderGeorgian(n % 1e4));
    if (n >= 9e3) return "ჵ" + (n === 9e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 8e3) return "ჴ" + (n === 8e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 7e3) return "ხ" + (n === 7e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 6e3) return "ჭ" + (n === 6e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 5e3) return "წ" + (n === 5e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 4e3) return "ძ" + (n === 4e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 3e3) return "ც" + (n === 3e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 2e3) return "ჩ" + (n === 2e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 1e3) return "შ" + (n === 1e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 900) return "ყ" + (n === 900 ? "" : this.renderGeorgian(n % 100));
    if (n >= 800) return "ღ" + (n === 800 ? "" : this.renderGeorgian(n % 100));
    if (n >= 700) return "ქ" + (n === 700 ? "" : this.renderGeorgian(n % 100));
    if (n >= 600) return "ფ" + (n === 600 ? "" : this.renderGeorgian(n % 100));
    if (n >= 500) return "ჳ" + (n === 500 ? "" : this.renderGeorgian(n % 100));
    if (n >= 400) return "უ" + (n === 400 ? "" : this.renderGeorgian(n % 100));
    if (n >= 300) return "ტ" + (n === 300 ? "" : this.renderGeorgian(n % 100));
    if (n >= 200) return "ს" + (n === 200 ? "" : this.renderGeorgian(n % 100));
    if (n >= 100) return "რ" + (n === 100 ? "" : this.renderGeorgian(n % 100));
    if (n >= 90) return "ჟ" + (n === 90 ? "" : this.renderGeorgian(n % 10));
    if (n >= 80) return "პ" + (n === 80 ? "" : this.renderGeorgian(n % 10));
    if (n >= 70) return "ო" + (n === 70 ? "" : this.renderGeorgian(n % 10));
    if (n >= 60) return "ჲ" + (n === 60 ? "" : this.renderGeorgian(n % 10));
    if (n >= 50) return "ნ" + (n === 50 ? "" : this.renderGeorgian(n % 10));
    if (n >= 40) return "მ" + (n === 40 ? "" : this.renderGeorgian(n % 10));
    if (n >= 30) return "ლ" + (n === 30 ? "" : this.renderGeorgian(n % 10));
    if (n >= 20) return "კ" + (n === 20 ? "" : this.renderGeorgian(n % 10));
    if (n >= 10) return "ი" + (n === 10 ? "" : this.renderGeorgian(n % 10));
    if (n >= 9) return "თ";
    if (n >= 8) return "ჱ";
    if (n >= 7) return "ზ";
    if (n >= 6) return "ვ";
    if (n >= 5) return "ე";
    if (n >= 4) return "დ";
    if (n >= 3) return "გ";
    if (n >= 2) return "ბ";
    if (n >= 1) return "ა";
    if (n >= 0) return this.renderNumber(n, "#,##0");
};

inter.renderGreekUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGreekUpper(-n);
    if (isFractional && n > 1) return this.renderGreekUpper(Math.floor(n)) + "." + this.renderGreekUpper(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 0) return this.renderGreekNumeralMajuscules(n) + "´";
};

inter.renderGreekLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGreekLower(-n);
    if (isFractional && n > 1) return this.renderGreekLower(Math.floor(n)) + "." + this.renderGreekLower(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 0) return this.renderGreekNumeralMinuscules(n) + "´";
};

inter.renderSpelloutCardinal = function(n) {
    if (n < 0) return "−" + this.renderSpelloutCardinal(-n);
    if (n >= 0) return this.renderNumber(n, "#,##0.#");
};

inter.renderHebrew = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderHebrew(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1000001) return this.renderNumber(n, "#,##0");
    if (n >= 1e6) return "אלף אלפים";
    if (n >= 3001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 3001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 3e3) return this.renderHebrew(Math.floor(n / 1e3)) + " אלפים";
    if (n >= 2001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 2001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 2e3) return "אלפיים";
    if (n >= 1001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 1001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 1e3) return "אלף";
    if (n >= 901) return "תתק" + this.renderHebrew099(n % 100);
    if (n >= 900) return "תת״ק";
    if (n >= 801) return "תת" + this.renderHebrew099(n % 100);
    if (n >= 800) return "ת״ת";
    if (n >= 745) return "תש" + this.renderHebrew099(n % 100);
    if (n >= 744) return "תשד״מ";
    if (n >= 701) return "תש" + this.renderHebrew099(n % 100);
    if (n >= 700) return "ת״ש";
    if (n >= 699) return "תר" + this.renderHebrew099(n % 100);
    if (n >= 698) return "תרח״צ";
    if (n >= 601) return "תר" + this.renderHebrew099(n % 100);
    if (n >= 600) return "ת״ר";
    if (n >= 501) return "תק" + this.renderHebrew099(n % 100);
    if (n >= 500) return "ת״ק";
    if (n >= 400) return "ת" + this.renderHebrew099(n % 100);
    if (n >= 345) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 344) return "שד״מ";
    if (n >= 305) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 304) return "ד״ש";
    if (n >= 300) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 299) return "ר" + this.renderHebrew099(n % 100);
    if (n >= 298) return "רח״צ";
    if (n >= 200) return "ר" + this.renderHebrew099(n % 100);
    if (n >= 100) return "ק" + this.renderHebrew099(n % 100);
    if (n >= 91) return "צ״" + this.renderHebrewItem(n % 10);
    if (n >= 90) return "צ׳";
    if (n >= 81) return "פ״" + this.renderHebrewItem(n % 10);
    if (n >= 80) return "פ׳";
    if (n >= 71) return "ע״" + this.renderHebrewItem(n % 10);
    if (n >= 70) return "ע׳";
    if (n >= 61) return "ס״" + this.renderHebrewItem(n % 10);
    if (n >= 60) return "ס׳";
    if (n >= 51) return "נ״" + this.renderHebrewItem(n % 10);
    if (n >= 50) return "נ׳";
    if (n >= 41) return "מ״" + this.renderHebrewItem(n % 10);
    if (n >= 40) return "מ׳";
    if (n >= 31) return "ל״" + this.renderHebrewItem(n % 10);
    if (n >= 30) return "ל׳";
    if (n >= 21) return "כ״" + this.renderHebrewItem(n % 10);
    if (n >= 20) return "כ׳";
    if (n >= 17) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "ט״ז";
    if (n >= 15) return "ט״ו";
    if (n >= 11) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 0) return this.renderHebrewItem(n) + "׳";
};

inter.renderRomanUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderRomanUpper(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 4e5) return this.renderNumber(n, "#,##0");
    if (n >= 3e5) return "ↈↈↈ" + (n === 3e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 2e5) return "ↈↈ" + (n === 2e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 1e5) return "ↈ" + (n === 1e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 9e4) return "ↂↈ" + (n === 9e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 8e4) return "ↇↂↂↂ" + (n === 8e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 7e4) return "ↇↂↂ" + (n === 7e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 6e4) return "ↇↂ" + (n === 6e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 5e4) return "ↇ" + (n === 5e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 4e4) return "ↂↇ" + (n === 4e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 3e4) return "ↂↂↂ" + (n === 3e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 2e4) return "ↂↂ" + (n === 2e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 1e4) return "ↂ" + (n === 1e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 9e3) return "Mↂ" + (n === 9e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 8e3) return "ↁMMM" + (n === 8e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 7e3) return "ↁMM" + (n === 7e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 6e3) return "ↁM" + (n === 6e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 5e3) return "ↁ" + (n === 5e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 4e3) return "Mↁ" + (n === 4e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 3e3) return "MMM" + (n === 3e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 2e3) return "MM" + (n === 2e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 1e3) return "M" + (n === 1e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 900) return "CM" + (n === 900 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 800) return "DCCC" + (n === 800 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 700) return "DCC" + (n === 700 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 600) return "DC" + (n === 600 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 500) return "D" + (n === 500 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 400) return "CD" + (n === 400 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 300) return "CCC" + (n === 300 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 200) return "CC" + (n === 200 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 100) return "C" + (n === 100 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 90) return "XC" + (n === 90 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 80) return "LXXX" + (n === 80 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 70) return "LXX" + (n === 70 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 60) return "LX" + (n === 60 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 50) return "L" + (n === 50 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 40) return "XL" + (n === 40 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 30) return "XXX" + (n === 30 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 20) return "XX" + (n === 20 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 10) return "X" + (n === 10 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 9) return "IX";
    if (n >= 8) return "VIII";
    if (n >= 7) return "VII";
    if (n >= 6) return "VI";
    if (n >= 5) return "V";
    if (n >= 4) return "IV";
    if (n >= 3) return "III";
    if (n >= 2) return "II";
    if (n >= 1) return "I";
    if (n >= 0) return "N";
};

inter.renderRomanLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderRomanLower(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 5e3) return this.renderNumber(n, "#,##0");
    if (n >= 4e3) return "mmmm" + (n === 4e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 3e3) return "mmm" + (n === 3e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 2e3) return "mm" + (n === 2e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 1e3) return "m" + (n === 1e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 900) return "cm" + (n === 900 ? "" : this.renderRomanLower(n % 100));
    if (n >= 800) return "dccc" + (n === 800 ? "" : this.renderRomanLower(n % 100));
    if (n >= 700) return "dcc" + (n === 700 ? "" : this.renderRomanLower(n % 100));
    if (n >= 600) return "dc" + (n === 600 ? "" : this.renderRomanLower(n % 100));
    if (n >= 500) return "d" + (n === 500 ? "" : this.renderRomanLower(n % 100));
    if (n >= 400) return "cd" + (n === 400 ? "" : this.renderRomanLower(n % 100));
    if (n >= 300) return "ccc" + (n === 300 ? "" : this.renderRomanLower(n % 100));
    if (n >= 200) return "cc" + (n === 200 ? "" : this.renderRomanLower(n % 100));
    if (n >= 100) return "c" + (n === 100 ? "" : this.renderRomanLower(n % 100));
    if (n >= 90) return "xc" + (n === 90 ? "" : this.renderRomanLower(n % 10));
    if (n >= 80) return "lxxx" + (n === 80 ? "" : this.renderRomanLower(n % 10));
    if (n >= 70) return "lxx" + (n === 70 ? "" : this.renderRomanLower(n % 10));
    if (n >= 60) return "lx" + (n === 60 ? "" : this.renderRomanLower(n % 10));
    if (n >= 50) return "l" + (n === 50 ? "" : this.renderRomanLower(n % 10));
    if (n >= 40) return "xl" + (n === 40 ? "" : this.renderRomanLower(n % 10));
    if (n >= 30) return "xxx" + (n === 30 ? "" : this.renderRomanLower(n % 10));
    if (n >= 20) return "xx" + (n === 20 ? "" : this.renderRomanLower(n % 10));
    if (n >= 10) return "x" + (n === 10 ? "" : this.renderRomanLower(n % 10));
    if (n >= 9) return "ix";
    if (n >= 8) return "viii";
    if (n >= 7) return "vii";
    if (n >= 6) return "vi";
    if (n >= 5) return "v";
    if (n >= 4) return "iv";
    if (n >= 3) return "iii";
    if (n >= 2) return "ii";
    if (n >= 1) return "i";
    if (n >= 0) return "n";
};

inter.renderTamil = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderTamil(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e8) return this.renderNumber(n, "#,##,##0");
    if (n >= 1e6) return this.renderTamil(Math.floor(n / 1e6)) + "௱௲" + (n === 1e6 ? "" : this.renderTamilThousands(n % 1e6));
    if (n >= 2e3) return this.renderTamil(Math.floor(n / 1e3)) + "௲" + (n === 2e3 ? "" : this.renderTamil(n % 1e3));
    if (n >= 1e3) return "௲" + (n === 1e3 ? "" : this.renderTamil(n % 1e3));
    if (n >= 200) return this.renderTamil(Math.floor(n / 100)) + "௱" + (n === 200 ? "" : this.renderTamil(n % 100));
    if (n >= 100) return "௱" + (n === 100 ? "" : this.renderTamil(n % 100));
    if (n >= 20) return this.renderTamil(Math.floor(n / 10)) + "௰" + (n === 20 ? "" : this.renderTamil(n % 10));
    if (n >= 10) return "௰" + (n === 10 ? "" : this.renderTamil(n % 10));
    if (n >= 9) return "௯";
    if (n >= 8) return "௮";
    if (n >= 7) return "௭";
    if (n >= 6) return "௬";
    if (n >= 5) return "௫";
    if (n >= 4) return "௪";
    if (n >= 3) return "௩";
    if (n >= 2) return "௨";
    if (n >= 1) return "௧";
    if (n >= 0) return "௦";
};

inter.renderSpelloutCardinalFeminine = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "minus " + this.renderSpelloutCardinalFeminine(-n);
    if (isFractional && n > 1) return this.renderSpelloutCardinalFeminine(Math.floor(n)) + " Komma " + this.renderSpelloutCardinalFeminine(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 2e15) return this.renderSpelloutCardinalFeminine(Math.floor(n / 1e15)) + " Billiarden" + (n === 2e15 ? "" : " " + this.renderSpelloutCardinalFeminine(n % 1e15));
    if (n >= 1e15) return "eine Billiarde" + (n === 1e15 ? "" : " " + this.renderSpelloutCardinalFeminine(n % 1e15));
    if (n >= 2e12) return this.renderSpelloutCardinalFeminine(Math.floor(n / 1e12)) + " Billionen" + (n === 2e12 ? "" : " " + this.renderSpelloutCardinalFeminine(n % 1e12));
    if (n >= 1e12) return "eine Billion" + (n === 1e12 ? "" : " " + this.renderSpelloutCardinalFeminine(n % 1e12));
    if (n >= 2e9) return this.renderSpelloutCardinalFeminine(Math.floor(n / 1e9)) + " Milliarden" + (n === 2e9 ? "" : " " + this.renderSpelloutCardinalFeminine(n % 1e9));
    if (n >= 1e9) return "eine Milliarde" + (n === 1e9 ? "" : " " + this.renderSpelloutCardinalFeminine(n % 1e9));
    if (n >= 2e6) return this.renderSpelloutCardinalFeminine(Math.floor(n / 1e6)) + " Millionen" + (n === 2e6 ? "" : " " + this.renderSpelloutCardinalFeminine(n % 1e6));
    if (n >= 1e6) return "eine Million" + (n === 1e6 ? "" : " " + this.renderSpelloutCardinalFeminine(n % 1e6));
    if (n >= 1e3) return this.renderSpelloutCardinalMasculine(Math.floor(n / 1e3)) + "­tausend" + (n === 1e3 ? "" : "­" + this.renderSpelloutCardinalFeminine(n % 1e3));
    if (n >= 100) return this.renderSpelloutCardinalMasculine(Math.floor(n / 100)) + "­hundert" + (n === 100 ? "" : "­" + this.renderSpelloutCardinalFeminine(n % 100));
    if (n >= 2) return this.renderSpelloutNumbering(n);
    if (n >= 1) return "eine";
    if (n >= 0) return "null";
};

inter.renderSpelloutCardinalMasculine = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "minus " + this.renderSpelloutCardinalMasculine(-n);
    if (isFractional && n > 1) return this.renderSpelloutCardinalMasculine(Math.floor(n)) + " Komma " + this.renderSpelloutCardinalMasculine(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 2e15) return this.renderSpelloutCardinalFeminine(Math.floor(n / 1e15)) + " Billiarden" + (n === 2e15 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e15));
    if (n >= 1e15) return "eine Billiarde" + (n === 1e15 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e15));
    if (n >= 2e12) return this.renderSpelloutCardinalFeminine(Math.floor(n / 1e12)) + " Billionen" + (n === 2e12 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e12));
    if (n >= 1e12) return "eine Billion" + (n === 1e12 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e12));
    if (n >= 2e9) return this.renderSpelloutCardinalFeminine(Math.floor(n / 1e9)) + " Milliarden" + (n === 2e9 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e9));
    if (n >= 1e9) return "eine Milliarde" + (n === 1e9 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e9));
    if (n >= 2e6) return this.renderSpelloutCardinalFeminine(Math.floor(n / 1e6)) + " Millionen" + (n === 2e6 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e6));
    if (n >= 1e6) return "eine Million" + (n === 1e6 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e6));
    if (n >= 1e3) return this.renderSpelloutCardinalMasculine(Math.floor(n / 1e3)) + "­tausend" + (n === 1e3 ? "" : "­" + this.renderSpelloutCardinalMasculine(n % 1e3));
    if (n >= 100) return this.renderSpelloutCardinalMasculine(Math.floor(n / 100)) + "­hundert" + (n === 100 ? "" : "­" + this.renderSpelloutCardinalMasculine(n % 100));
    if (n >= 2) return this.renderSpelloutNumbering(n);
    if (n >= 1) return "ein";
    if (n >= 0) return "null";
};

inter.renderCyrillicLowerThousands = function(n) {
    if (n >= 900) return "҂ц" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 800) return "҂ѿ" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 700) return "҂ѱ" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 600) return "҂х" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 500) return "҂ф" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 400) return "҂у" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 300) return "҂т" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 200) return "҂с" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 100) return "҂р" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 90) return "҂ч" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 80) return "҂п" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 70) return "҂ѻ" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 60) return "҂ѯ" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 50) return "҂н" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 40) return "҂м" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 30) return "҂л" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 20) return "҂к" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 19) return "҂ѳ҃҂і";
    if (n >= 18) return "҂и҃҂і";
    if (n >= 17) return "҂з҃҂і";
    if (n >= 16) return "҂ѕ҃҂і";
    if (n >= 15) return "҂є҃҂і";
    if (n >= 14) return "҂д҃҂і";
    if (n >= 13) return "҂г҃҂і";
    if (n >= 12) return "҂в҃҂і";
    if (n >= 11) return "҂а҃҂і";
    if (n >= 10) return "҃҂і";
    if (n >= 9) return "҃҂ѳ";
    if (n >= 8) return "҃҂и";
    if (n >= 7) return "҃҂з";
    if (n >= 6) return "҃҂ѕ";
    if (n >= 5) return "҃҂є";
    if (n >= 4) return "҃҂д";
    if (n >= 3) return "҃҂г";
    if (n >= 2) return "҃҂в";
    if (n >= 1) return "҃҂а";
    if (n >= 0) return "҃";
};

inter.renderCyrillicLower110 = function(n) {
    if (n >= 10) return "і";
    if (n >= 9) return "ѳ";
    if (n >= 8) return "и";
    if (n >= 7) return "з";
    if (n >= 6) return "ѕ";
    if (n >= 5) return "є";
    if (n >= 4) return "д";
    if (n >= 3) return "г";
    if (n >= 2) return "в";
    if (n >= 1) return "а";
};

inter.renderCyrillicLowerPost = function(n) {
    if (n >= 1) return this.renderCyrillicLower(n);
    if (n >= 0) return "҃";
};

inter.renderCyrillicLowerFinal = function(n) {
    if (n >= 91) return "ч" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 90) return "҃ч";
    if (n >= 81) return "п" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 80) return "҃п";
    if (n >= 71) return "ѻ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 70) return "҃ѻ";
    if (n >= 61) return "ѯ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 60) return "҃ѯ";
    if (n >= 51) return "н" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 50) return "҃н";
    if (n >= 41) return "м" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 40) return "҃м";
    if (n >= 31) return "л" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 30) return "҃л";
    if (n >= 21) return "к" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 20) return "҃к";
    if (n >= 19) return "ѳ҃і";
    if (n >= 18) return "и҃і";
    if (n >= 17) return "з҃і";
    if (n >= 16) return "ѕ҃і";
    if (n >= 15) return "є҃і";
    if (n >= 14) return "д҃і";
    if (n >= 13) return "г҃і";
    if (n >= 12) return "в҃і";
    if (n >= 11) return "а҃і";
    if (n >= 1) return "҃" + this.renderCyrillicLower110(n);
    if (n >= 0) return "҃";
};

inter.renderEthiopicP3 = function(n) {
    if (n >= 1e12) return this.renderEthiopic(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1) return "፼፼፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼፼፼";
};

inter.renderEthiopicP2 = function(n) {
    if (n >= 1e8) return this.renderEthiopic(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1) return "፼፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼፼";
};

inter.renderEthiopicP1 = function(n) {
    if (n >= 1e4) return this.renderEthiopic(Math.floor(n / 1e4)) + "፼" + (n === 1e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 1) return "፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼";
};

inter.renderGreekNumeralMajuscules = function(n) {
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e16) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e16)) + "ΜΜΜΜ" + (n === 1e16 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e16));
    if (n >= 1e12) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e12)) + "ΜΜΜ" + (n === 1e12 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e12));
    if (n >= 1e8) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e8)) + "ΜΜ" + (n === 1e8 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e8));
    if (n >= 1e4) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e4)) + "Μ" + (n === 1e4 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e4));
    if (n >= 1e3) return "͵" + this.renderGreekNumeralMajuscules(Math.floor(n / 1e3)) + (n === 1e3 ? "" : this.renderGreekNumeralMajuscules(n % 1e3));
    if (n >= 900) return "Ϡ" + (n === 900 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 800) return "Ω" + (n === 800 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 700) return "Ψ" + (n === 700 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 600) return "Χ" + (n === 600 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 500) return "Φ" + (n === 500 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 400) return "Υ" + (n === 400 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 300) return "Τ" + (n === 300 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 200) return "Σ" + (n === 200 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 100) return "Ρ" + (n === 100 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 90) return "Ϟ" + (n === 90 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 80) return "Π" + (n === 80 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 70) return "Ο" + (n === 70 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 60) return "Ξ" + (n === 60 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 50) return "Ν" + (n === 50 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 40) return "Μ" + (n === 40 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 30) return "Λ" + (n === 30 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 20) return "Κ" + (n === 20 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 10) return "Ι" + (n === 10 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 9) return "Θ";
    if (n >= 8) return "Η";
    if (n >= 7) return "Ζ";
    if (n >= 6) return "Ϝ";
    if (n >= 5) return "Ε";
    if (n >= 4) return "Δ";
    if (n >= 3) return "Γ";
    if (n >= 2) return "Β";
    if (n >= 1) return "Α";
    if (n >= 0) return "𐆊";
};

inter.renderGreekNumeralMinuscules = function(n) {
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e16) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e16)) + "μμμμ" + (n === 1e16 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e16));
    if (n >= 1e12) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e12)) + "μμμ" + (n === 1e12 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e12));
    if (n >= 1e8) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e8)) + "μμ" + (n === 1e8 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e8));
    if (n >= 1e4) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e4)) + "μ" + (n === 1e4 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e4));
    if (n >= 1e3) return "͵" + this.renderGreekNumeralMinuscules(Math.floor(n / 1e3)) + (n === 1e3 ? "" : this.renderGreekNumeralMinuscules(n % 1e3));
    if (n >= 900) return "ϡ" + (n === 900 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 800) return "ω" + (n === 800 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 700) return "ψ" + (n === 700 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 600) return "χ" + (n === 600 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 500) return "φ" + (n === 500 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 400) return "υ" + (n === 400 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 300) return "τ" + (n === 300 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 200) return "σ" + (n === 200 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 100) return "ρ" + (n === 100 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 90) return "ϟ" + (n === 90 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 80) return "π" + (n === 80 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 70) return "ο" + (n === 70 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 60) return "ξ" + (n === 60 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 50) return "ν" + (n === 50 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 40) return "μ" + (n === 40 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 30) return "λ" + (n === 30 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 20) return "κ" + (n === 20 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 10) return "ι" + (n === 10 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 9) return "θ";
    if (n >= 8) return "η";
    if (n >= 7) return "ζ";
    if (n >= 6) return "ϝ";
    if (n >= 5) return "ε";
    if (n >= 4) return "δ";
    if (n >= 3) return "γ";
    if (n >= 2) return "β";
    if (n >= 1) return "α";
    if (n >= 0) return "𐆊";
};

inter.renderHebrewThousands = function(n) {
    if (n >= 401) return this.renderHebrew(n) + "׳";
    if (n >= 100) return this.renderHebrew(n) + (n === 100 ? "" : "׳");
    if (n >= 10) return this.renderHebrew(n) + (n === 10 ? "" : "׳");
    if (n >= 0) return this.renderHebrew(n);
};

inter.renderHebrew099 = function(n) {
    if (n >= 91) return "צ״" + this.renderHebrewItem(n % 10);
    if (n >= 90) return "״צ";
    if (n >= 81) return "פ״" + this.renderHebrewItem(n % 10);
    if (n >= 80) return "״פ";
    if (n >= 71) return "ע״" + this.renderHebrewItem(n % 10);
    if (n >= 70) return "״ע";
    if (n >= 61) return "ס״" + this.renderHebrewItem(n % 10);
    if (n >= 60) return "״ס";
    if (n >= 51) return "נ״" + this.renderHebrewItem(n % 10);
    if (n >= 50) return "״נ";
    if (n >= 41) return "מ״" + this.renderHebrewItem(n % 10);
    if (n >= 40) return "״מ";
    if (n >= 31) return "ל״" + this.renderHebrewItem(n % 10);
    if (n >= 30) return "״ל";
    if (n >= 21) return "כ״" + this.renderHebrewItem(n % 10);
    if (n >= 20) return "״כ";
    if (n >= 17) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "ט״ז";
    if (n >= 15) return "ט״ו";
    if (n >= 11) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 1) return "״" + this.renderHebrewItem(n);
    if (n >= 0) return "׳";
};

inter.renderHebrewItem = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderHebrewItem(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 2100) return this.renderNumber(n, "#,##0");
    if (n >= 2e3) return "תתתתת" + (n === 2e3 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1900) return "תתתתש" + (n === 1900 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1800) return "תתתתר" + (n === 1800 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1700) return "תתתתק" + (n === 1700 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1600) return "תתתת" + (n === 1600 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1500) return "תתתש" + (n === 1500 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1400) return "תתתר" + (n === 1400 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1300) return "תתתק" + (n === 1300 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1200) return "תתת" + (n === 1200 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1100) return "תתש" + (n === 1100 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1e3) return "תתר" + (n === 1e3 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 900) return "תתק" + (n === 900 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 800) return "תת" + (n === 800 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 745) return "תש" + this.renderHebrewItem(n % 100);
    if (n >= 744) return "תשדמ";
    if (n >= 700) return "תש" + (n === 700 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 699) return "תר" + this.renderHebrewItem(n % 100);
    if (n >= 698) return "תרחצ";
    if (n >= 600) return "תר" + (n === 600 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 500) return "תק" + (n === 500 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 400) return "ת" + (n === 400 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 345) return "ש" + this.renderHebrewItem(n % 100);
    if (n >= 344) return "שדמ";
    if (n >= 305) return "ש" + this.renderHebrewItem(n % 100);
    if (n >= 304) return "דש";
    if (n >= 300) return "ש" + (n === 300 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 299) return "ר" + this.renderHebrewItem(n % 100);
    if (n >= 298) return "רחצ";
    if (n >= 200) return "ר" + (n === 200 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 100) return "ק" + (n === 100 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 90) return "צ" + (n === 90 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 80) return "פ" + (n === 80 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 70) return "ע" + (n === 70 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 60) return "ס" + (n === 60 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 50) return "נ" + (n === 50 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 40) return "מ" + (n === 40 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 30) return "ל" + (n === 30 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 20) return "כ" + (n === 20 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 17) return "י" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "טז";
    if (n >= 15) return "טו";
    if (n >= 10) return "י" + (n === 10 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 9) return "ט";
    if (n >= 8) return "ח";
    if (n >= 7) return "ז";
    if (n >= 6) return "ו";
    if (n >= 5) return "ה";
    if (n >= 4) return "ד";
    if (n >= 3) return "ג";
    if (n >= 2) return "ב";
    if (n >= 1) return "א";
    if (n >= 0) return "״";
};

inter.renderTamilThousands = function(n) {
    if (n >= 1e3) return this.renderTamilThousands(Math.floor(n / 1e3)) + "௲" + (n === 1e3 ? "" : this.renderTamilThousands(n % 1e3));
    if (n >= 0) return this.renderTamil(n);
};

inter.renderEthiopicP = function(n) {
    if (n >= 1e16) return this.renderEthiopicP(Math.floor(n / 1e16)) + "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 1e12) return this.renderEthiopicP(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1e8) return this.renderEthiopicP(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1e4) return this.renderEthiopicP(Math.floor(n / 1e4)) + "፼" + (n === 1e4 ? "" : this.renderEthiopicP(n % 1e4));
    if (n >= 1) return this.renderEthiopic(n);
};

inter.territories = [].concat(P.territories.slice(0, 23), _dvdq159, P.territories[24], P.territories.slice(26, 34), _dvdq155, P.territories.slice(35, 39), _dvdq153, P.territories.slice(40, 53), _dvdq156, P.territories.slice(53, 55), P.territories.slice(56, 77), _dvdq162, P.territories.slice(77, 107), _dvdq158, P.territories.slice(108, 139), _dvdq163, P.territories.slice(140, 192), P.territories.slice(193, 195), _dvdq154, P.territories[195], _dvdq161, P.territories.slice(197, 200), _dvdq164, P.territories.slice(200, 207), P.territories.slice(208, 229), P.territories.slice(230, 266), P.territories.slice(267, 270), _dvdq160, P.territories.slice(270, 278), _dvdq157, P.territories.slice(278, 282), {
    id: "QO",
    displayName: "Äusseres Ozeanien",
    regionId: "009",
    hasTimeZones: false
}, P.territories.slice(283, 285));

inter.countries = [].concat(P.territories[0], P.territories.slice(2, 4), P.territories.slice(5, 18), P.territories.slice(20, 23), _dvdq159, P.territories[24], P.territories.slice(26, 34), _dvdq155, P.territories.slice(35, 39), _dvdq153, P.territories.slice(40, 53), _dvdq156, P.territories.slice(53, 55), P.territories.slice(56, 61), P.territories.slice(62, 77), _dvdq162, P.territories.slice(77, 107), _dvdq158, P.territories.slice(109, 139), _dvdq163, P.territories.slice(140, 145), P.territories.slice(146, 148), P.territories.slice(150, 166), P.territories.slice(168, 172), P.territories[173], P.territories.slice(178, 188), P.territories.slice(189, 192), P.territories.slice(193, 195), _dvdq154, P.territories[195], _dvdq161, P.territories.slice(197, 200), _dvdq164, P.territories.slice(200, 207), P.territories.slice(208, 229), P.territories[230], P.territories.slice(234, 236), P.territories.slice(238, 266), P.territories.slice(267, 270), _dvdq160, P.territories[274], P.territories[276], _dvdq157, P.territories.slice(278, 282), P.territories.slice(283, 285));

inter.languages = [].concat(P.languages.slice(0, 394), {
    id: "prg",
    displayName: "Altpreussisch",
    nativeDisplayName: "prūsiskan"
}, P.languages.slice(395, 551), {
    id: "be",
    displayName: "Weissrussisch",
    nativeDisplayName: "беларуская"
}, P.languages.slice(552, 612));

inter.currencies = [].concat(P.currencies.slice(0, 70), {
    id: "EUR",
    displayName: "Euro",
    symbol: "EUR",
    one: "Euro",
    other: "Euro"
}, P.currencies.slice(71, 289), {
    id: "BYR",
    displayName: "Weissrussischer Rubel",
    symbol: "BYR",
    one: "Weißrussischer Rubel",
    other: "Weißrussische Rubel"
}, P.currencies.slice(290, 297));

module.exports = inter;