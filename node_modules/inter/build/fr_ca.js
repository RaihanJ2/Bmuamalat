function defaults(targetObj) {
    for (var i = 1; i < arguments.length; i += 1) {
        if (arguments[i] && typeof arguments[i] === "object") {
            for (var propertyName in arguments[i]) {
                if (typeof targetObj[propertyName] === "undefined") {
                    targetObj[propertyName] = arguments[i][propertyName];
                }
            }
        }
    }
    return targetObj;
}

var P = require("./fr.js"), inter = defaults({
    renderers: {}
}, P);

var _gpua1 = {
    "default": "#,##0 %"
}, _gpua2 = [ "T1", "T2", "T3", "T4" ], _gpua3 = {
    all: {
        leap: "{0}bis"
    }
}, _gpua4 = {
    displayName: "cadran"
}, _gpua5 = {
    one: "0 k",
    other: "0 k"
}, _gpua6 = {
    one: "0 M",
    other: "0 M"
}, _gpua7 = {
    one: "0 G",
    other: "0 G"
}, _gpua8 = {
    one: "0 T",
    other: "0 T"
}, _gpua9 = {
    one: "{0}°",
    other: "{0}°"
}, _gpua10 = {
    one: "{0}′",
    other: "{0}′"
}, _gpua11 = {
    one: "{0}″",
    other: "{0}″"
}, _gpua12 = {
    one: "{0}m",
    other: "{0}m"
}, _gpua13 = {
    one: "00 k",
    other: "00 k"
}, _gpua14 = {
    one: "00 M",
    other: "00 M"
}, _gpua15 = {
    one: "00 G",
    other: "00 G"
}, _gpua16 = {
    one: "00 T",
    other: "00 T"
}, _gpua17 = {
    a: "h a – h a",
    h: "h–h a"
}, _gpua18 = {
    one: "{0} m",
    other: "{0} m"
}, _gpua19 = {
    one: "000 k",
    other: "000 k"
}, _gpua20 = {
    one: "000 M",
    other: "000 M"
}, _gpua21 = {
    one: "000 G",
    other: "000 G"
}, _gpua22 = {
    one: "000 T",
    other: "000 T"
}, _gpua23 = {
    one: "0 k ¤",
    other: "0 k ¤"
}, _gpua24 = {
    a: "h a – h a",
    h: "h – h a"
}, _gpua25 = {
    one: "{0} ct",
    other: "{0} ct"
}, _gpua26 = {
    one: "00 k ¤",
    other: "00 k ¤"
}, _gpua27 = [ "D", "L", "M", "M", "J", "V", "S" ], _gpua28 = {
    one: "+{0} a",
    other: "+{0} a"
}, _gpua29 = {
    one: "-{0} a",
    other: "-{0} a"
}, _gpua30 = {
    one: "+{0} j",
    other: "+{0} j"
}, _gpua31 = {
    one: "-{0} j",
    other: "-{0} j"
}, _gpua32 = {
    one: "+{0} h",
    other: "+{0} h"
}, _gpua33 = {
    one: "-{0} h",
    other: "-{0} h"
}, _gpua34 = {
    one: "-{0} s",
    other: "-{0} s"
}, _gpua35 = {
    a: "h a – h a v",
    h: "h–h a v"
}, _gpua36 = {
    one: "{0} an",
    other: "{0} ans"
}, _gpua37 = {
    one: "0 mn ¤",
    other: "0 mns ¤"
}, _gpua38 = {
    one: "0 md ¤",
    other: "0 mds ¤"
}, _gpua39 = {
    one: "0 bn ¤",
    other: "0 bns ¤"
}, _gpua40 = {
    one: "+ {0} s",
    other: "+{0} s"
}, _gpua41 = {
    displayName: "fuseau horaire"
}, _gpua42 = {
    one: "{0} rad",
    other: "{0} rad"
}, _gpua43 = {
    one: "000 k ¤",
    other: "000 k ¤"
}, _gpua44 = {
    a: "h a – h a v",
    h: "h – h a v"
}, _gpua45 = {
    d: "d–d MMM",
    M: "d MMM – d MMM"
}, _gpua46 = {
    one: "+{0} m.",
    other: "+{0} m."
}, _gpua47 = {
    one: "-{0} m.",
    other: "-{0} m."
}, _gpua48 = {
    d: "MMM d–d",
    M: "MMM d – MMM d"
}, _gpua49 = {
    one: "00 mn ¤",
    other: "00 mns ¤"
}, _gpua50 = {
    one: "00 md ¤",
    other: "00 mds ¤"
}, _gpua51 = {
    one: "00 bn ¤",
    other: "00 bns ¤"
}, _gpua52 = {
    symbols: P.numbers.ahom.symbols
}, _gpua53 = {
    wide: [ "AH" ],
    abbreviated: [ "AH" ]
}, _gpua54 = {
    one: "{0} kcal",
    other: "{0} kcal"
}, _gpua55 = {
    one: "0 millier",
    other: "0 mille"
}, _gpua56 = {
    one: "00 mille",
    other: "00 mille"
}, _gpua57 = {
    one: "+{0} min",
    other: "+{0} min"
}, _gpua58 = {
    one: "-{0} min",
    other: "-{0} min"
}, _gpua59 = {
    H: "HH:mm–HH:mm",
    m: "HH:mm–HH:mm"
}, _gpua60 = {
    M: "y-MM – y-MM",
    y: "y-MM – y-MM"
}, _gpua61 = {
    M: "U MMM–MMM",
    y: "U MMM – U MMM"
}, _gpua62 = {
    one: "000 mn ¤",
    other: "000 mns ¤"
}, _gpua63 = {
    one: "000 md ¤",
    other: "000 mds ¤"
}, _gpua64 = {
    one: "000 bn ¤",
    other: "000 bns ¤"
}, _gpua65 = {
    displayName: "jour de la semaine"
}, _gpua66 = {
    one: "000 mille",
    other: "000 mille"
}, _gpua67 = {
    one: "+{0} sem.",
    other: "+{0} sem."
}, _gpua68 = {
    one: "-{0} sem.",
    other: "-{0} sem."
}, _gpua69 = {
    one: "{0} carat",
    other: "{0} carats"
}, _gpua70 = {
    one: "{0} tasse",
    other: "{0} tasses"
}, _gpua71 = {
    one: "0 million",
    other: "0 millions"
}, _gpua72 = {
    one: "0 billion",
    other: "0 billions"
}, _gpua73 = [ "di", "lu", "ma", "me", "je", "ve", "sa" ], _gpua74 = {
    d: "MM-dd – MM-dd",
    M: "MM-dd – MM-dd"
}, _gpua75 = {
    M: "y-MM – y-MM G",
    y: "y-MM – y-MM G"
}, _gpua76 = {
    H: "HH:mm – HH:mm",
    m: "HH:mm – HH:mm"
}, _gpua77 = {
    M: "MMM–MMM y G",
    y: "MMM y – MMM y G"
}, _gpua78 = {
    one: "dans {0} a",
    other: "dans {0} a"
}, _gpua79 = {
    one: "+{0} trim.",
    other: "+{0} trim."
}, _gpua80 = {
    one: "-{0} trim.",
    other: "-{0} trim."
}, _gpua81 = {
    one: "dans {0} j",
    other: "dans {0} j"
}, _gpua82 = {
    one: "dans {0} h",
    other: "dans {0} h"
}, _gpua83 = {
    one: "dans {0} s",
    other: "dans {0} s"
}, _gpua84 = {
    H: "HH:mm–HH:mm v",
    m: "HH:mm–HH:mm v"
}, _gpua85 = {
    M: "U MMMM–MMMM",
    y: "U MMMM – U MMMM"
}, _gpua86 = {
    one: "00 million",
    other: "00 millions"
}, _gpua87 = {
    one: "0 milliard",
    other: "0 milliards"
}, _gpua88 = {
    one: "00 billion",
    other: "00 billions"
}, _gpua89 = {
    "0": "ce tr",
    "1": "tr proch",
    "-1": "tr dern"
}, _gpua90 = {
    one: "dans {0} m.",
    other: "dans {0} m."
}, _gpua91 = {
    one: "000 million",
    other: "000 millions"
}, _gpua92 = {
    one: "00 milliard",
    other: "00 milliards"
}, _gpua93 = {
    one: "000 billion",
    other: "000 billions"
}, _gpua94 = {
    one: "Dans {0} an",
    other: "Dans {0} ans"
}, _gpua95 = {
    H: "HH:mm – HH:mm v",
    m: "HH:mm – HH:mm v"
}, _gpua96 = {
    one: "il y a {0} a",
    other: "il y a {0} a"
}, _gpua97 = {
    one: "il y a {0} j",
    other: "il y a {0} j"
}, _gpua98 = {
    one: "il y a {0} h",
    other: "il y a {0} h"
}, _gpua99 = {
    one: "dans {0} min",
    other: "dans {0} min"
}, _gpua100 = {
    one: "il y a {0} s",
    other: "il y a {0} s"
}, _gpua101 = {
    one: "000 milliard",
    other: "000 milliards"
}, _gpua102 = {
    "0": "ce dim",
    "1": "dim proch",
    "-1": "dim dern"
}, _gpua103 = {
    "0": "ce lun",
    "1": "lun proch",
    "-1": "lun dern"
}, _gpua104 = {
    "0": "ce mar",
    "1": "mar proch",
    "-1": "mar dern"
}, _gpua105 = {
    "0": "ce mer",
    "1": "mer proch",
    "-1": "mer dern"
}, _gpua106 = {
    "0": "ce jeu",
    "1": "jeu proch",
    "-1": "jeu dern"
}, _gpua107 = {
    "0": "ce ven",
    "1": "ven proch",
    "-1": "ven dern"
}, _gpua108 = {
    "0": "ce sam",
    "1": "sam proch",
    "-1": "sam dern"
}, _gpua109 = {
    M: "MMMM – MMMM y G",
    y: "MMMM y – MMMM y G"
}, _gpua110 = {
    one: "dans {0} mois",
    other: "dans {0} mois"
}, _gpua111 = {
    one: "il y a {0} m.",
    other: "il y a {0} m."
}, _gpua112 = {
    one: "dans {0} sem.",
    other: "dans {0} sem."
}, _gpua113 = {
    one: "Il y a {0} an",
    other: "Il y a {0} ans"
}, _gpua114 = {
    one: "dans {0} jour",
    other: "dans {0} jours"
}, _gpua115 = {
    d: "E MM-dd – E MM-dd",
    M: "E MM-dd – E MM-dd"
}, _gpua116 = {
    one: "dans {0} trim.",
    other: "dans {0} trim."
}, _gpua117 = {
    one: "il y a {0} min",
    other: "il y a {0} min"
}, _gpua118 = {
    one: "dans {0} heure",
    other: "dans {0} heures"
}, _gpua119 = {
    one: "il y a {0} mois",
    other: "il y a {0} mois"
}, _gpua120 = {
    one: "il y a {0} sem.",
    other: "il y a {0} sem."
}, _gpua121 = {
    one: "{0} kilocalorie",
    other: "{0} kilocalories"
}, _gpua122 = {
    one: "il y a {0} jour",
    other: "il y a {0} jours"
}, _gpua123 = {
    one: "Dans {0} minute",
    other: "Dans {0} minutes"
}, _gpua124 = [ "J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D" ], _gpua125 = {
    one: "il y a {0} trim.",
    other: "il y a {0} trim."
}, _gpua126 = {
    d: "MM-dd, E – MM-dd, E",
    M: "MM-dd, E – MM-dd, E"
}, _gpua127 = {
    d: "MMM d, E – MMM d, E",
    M: "MMM d, E – MMM d, E"
}, _gpua128 = [ "C", "V", "J", "Ā", "S", "B", "Ā", "K", "M", "P", "M", "P" ], _gpua129 = [ "dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam." ], _gpua130 = {
    one: "dans {0} semaine",
    other: "dans {0} semaines"
}, _gpua131 = {
    one: "il y a {0} heure",
    other: "il y a {0} heures"
}, _gpua132 = {
    one: "dans {0} seconde",
    other: "dans {0} secondes"
}, _gpua133 = {
    "0": "ce dim.",
    "1": "dim. prochain",
    "-1": "dim. dernier"
}, _gpua134 = {
    "0": "ce lun.",
    "1": "lun. prochain",
    "-1": "lun. dernier"
}, _gpua135 = {
    "0": "ce mar.",
    "1": "mar. prochain",
    "-1": "mar. dernier"
}, _gpua136 = {
    "0": "ce mer.",
    "1": "mer. prochain",
    "-1": "mer. dernier"
}, _gpua137 = {
    "0": "ce jeu.",
    "1": "jeu. prochain",
    "-1": "jeu. dernier"
}, _gpua138 = {
    "0": "ce ven.",
    "1": "ven. prochain",
    "-1": "ven. dernier"
}, _gpua139 = {
    "0": "ce sam.",
    "1": "sam. prochain",
    "-1": "sam. dernier"
}, _gpua140 = {
    one: "Il y a {0} minute",
    other: "Il y a {0} minutes"
}, _gpua141 = [ "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" ], _gpua142 = {
    relative: _gpua102
}, _gpua143 = {
    relative: _gpua103
}, _gpua144 = {
    relative: _gpua104
}, _gpua145 = {
    relative: _gpua105
}, _gpua146 = {
    relative: _gpua106
}, _gpua147 = {
    relative: _gpua107
}, _gpua148 = {
    relative: _gpua108
}, _gpua149 = {
    a: "h:mm a – h:mm a",
    h: "h:mm–h:mm a",
    m: "h:mm–h:mm a"
}, _gpua150 = [ "T", "B", "H", "K", "T", "A", "B", "B", "B", "B", "A", "M", "N" ], _gpua151 = [ "M", "T", "H", "T", "T", "Y", "M", "M", "G", "S", "H", "N", "P" ], _gpua152 = [ "T", "H", "K", "T", "S", "A", "A", "N", "I", "S", "T", "A", "E" ], _gpua153 = {
    one: "dans {0} trimestre",
    other: "dans {0} trimestres"
}, _gpua154 = {
    one: "il y a {0} semaine",
    other: "il y a {0} semaines"
}, _gpua155 = {
    one: "il y a {0} seconde",
    other: "il y a {0} secondes"
}, _gpua156 = {
    "0": "ce lundi",
    "1": "lundi prochain",
    "-1": "lundi dernier"
}, _gpua157 = {
    "0": "ce mardi",
    "1": "mardi prochain",
    "-1": "mardi dernier"
}, _gpua158 = {
    "0": "ce jeudi",
    "1": "jeudi prochain",
    "-1": "jeudi dernier"
}, _gpua159 = {
    "0": "ce trim.",
    "1": "le trim. proch.",
    "-1": "le trim. dern."
}, _gpua160 = {
    a: "h:mm a – h:mm a",
    h: "h:mm – h:mm a",
    m: "h:mm – h:mm a"
}, _gpua161 = {
    "0": "ce samedi",
    "1": "samedi prochain",
    "-1": "samedi dernier"
}, _gpua162 = {
    d: "U MMM d–d",
    M: "U MMM d – MMM d",
    y: "U MMM d – U MMM d"
}, _gpua163 = {
    one: "il y a {0} trimestre",
    other: "il y a {0} trimestres"
}, _gpua164 = {
    a: "h:mm a – h:mm a v",
    h: "h:mm–h:mm a v",
    m: "h:mm–h:mm a v"
}, _gpua165 = {
    "0": "ce mois-ci",
    "1": "le mois prochain",
    "-1": "le mois dernier"
}, _gpua166 = [ "1er trimestre", "2e trimestre", "3e trimestre", "4e trimestre" ], _gpua167 = {
    relative: _gpua133
}, _gpua168 = {
    relative: _gpua134
}, _gpua169 = {
    relative: _gpua135
}, _gpua170 = {
    relative: _gpua136
}, _gpua171 = {
    relative: _gpua137
}, _gpua172 = {
    relative: _gpua138
}, _gpua173 = {
    relative: _gpua139
}, _gpua174 = {
    id: "CC",
    displayName: "Îles Cocos (Keeling)",
    hasTimeZones: true
}, _gpua175 = {
    a: "h:mm a – h:mm a v",
    h: "h:mm – h:mm a v",
    m: "h:mm – h:mm a v"
}, _gpua176 = {
    d: "d–d MMM y G",
    M: "d MMM – d MMM y G",
    y: "d MMM y – d MMM y G"
}, _gpua177 = {
    "0": "cette année",
    "1": "l’année prochaine",
    "-1": "l’année dernière"
}, _gpua178 = {
    "0": "ce dimanche",
    "1": "dimanche prochain",
    "-1": "dimanche dernier"
}, _gpua179 = {
    "0": "ce mercredi",
    "1": "mercredi prochain",
    "-1": "mercredi dernier"
}, _gpua180 = {
    "0": "ce vendredi",
    "1": "vendredi prochain",
    "-1": "vendredi dernier"
}, _gpua181 = {
    symbols: P.numbers.ahom.symbols,
    digits: "renderSpelloutCardinal"
}, _gpua182 = {
    id: "BY",
    displayName: "Bélarus",
    regionId: "151",
    hasTimeZones: true
}, _gpua183 = {
    id: "MM",
    displayName: "Myanmar",
    regionId: "035",
    hasTimeZones: true
}, _gpua184 = {
    id: "TK",
    displayName: "Tokelau",
    regionId: "061",
    hasTimeZones: true
}, _gpua185 = {
    relative: _gpua156
}, _gpua186 = {
    relative: _gpua157
}, _gpua187 = {
    relative: _gpua158
}, _gpua188 = [ "dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi" ], _gpua189 = {
    d: "y-MM-dd – y-MM-dd",
    M: "y-MM-dd – y-MM-dd",
    y: "y-MM-dd – y-MM-dd"
}, _gpua190 = {
    id: "FM",
    displayName: "Micronésie",
    regionId: "057",
    hasTimeZones: true
}, _gpua191 = {
    relative: _gpua161
}, _gpua192 = {
    "0": "cette semaine",
    "1": "la semaine prochaine",
    "-1": "la semaine dernière"
}, _gpua193 = {
    abbreviated: {
        leap: "{0}bis"
    },
    narrow: {
        leap: "{0}b"
    },
    wide: {
        leap: "{0}bis"
    }
}, _gpua194 = {
    symbols: P.numbers.ahom.symbols,
    digits: "renderSpelloutCardinalFinancial"
}, _gpua195 = {
    d: "y-MM-dd – y-MM-dd G",
    M: "y-MM-dd – y-MM-dd G",
    y: "y-MM-dd – y-MM-dd G"
}, _gpua196 = {
    future: _gpua28,
    past: _gpua29
}, _gpua197 = {
    future: _gpua30,
    past: _gpua31
}, _gpua198 = {
    future: _gpua32,
    past: _gpua33
}, _gpua199 = {
    future: _gpua40,
    past: _gpua34
}, _gpua200 = {
    relative: _gpua178
}, _gpua201 = {
    relative: _gpua179
}, _gpua202 = {
    relative: _gpua180
}, _gpua203 = {
    "0": "ce trimestre-ci",
    "1": "le trimestre prochain",
    "-1": "le trimestre dernier"
}, _gpua204 = {
    "0": "aujourd’hui",
    "1": "demain",
    "2": "après-demain",
    "-2": "avant-hier",
    "-1": "hier"
}, _gpua205 = [ undefined, "zi", "chou", "yin", "mao", "chen", "si", "wu", "wei", "shen", "you", "xu" ], _gpua206 = {
    d: "E d – E d MMM y G",
    M: "E d MMM – E d MMM y G",
    y: "E d MMM y – E d MMM y G"
}, _gpua207 = {
    future: _gpua46,
    past: _gpua47
}, _gpua208 = {
    id: "MF",
    displayName: "Saint-Martin (France)",
    regionId: "029",
    hasTimeZones: true
}, _gpua209 = {
    id: "SX",
    displayName: "Saint-Martin (Pays-Bas)",
    regionId: "029",
    hasTimeZones: true
}, _gpua210 = {
    future: _gpua57,
    past: _gpua58
}, _gpua211 = {
    d: "U MMM d, E – MMM d, E",
    M: "U MMM d, E – MMM d, E",
    y: "U MMM d, E – U MMM d, E"
}, _gpua212 = {
    id: "151",
    displayName: "Europe orientale",
    hasTimeZones: false,
    parentRegionId: "150"
}, _gpua213 = {
    d: "E y-MM-dd – E y-MM-dd G",
    M: "E y-MM-dd – E y-MM-dd G",
    y: "E y-MM-dd – E y-MM-dd G"
}, _gpua214 = {
    future: _gpua67,
    past: _gpua68
}, _gpua215 = {
    d: "y-MM-dd, E – y-MM-dd, E",
    M: "y-MM-dd, E – y-MM-dd, E",
    y: "y-MM-dd, E – y-MM-dd, E"
}, _gpua216 = [ "janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc." ], _gpua217 = [ "1yuè", "2yuè", "3yuè", "4yuè", "5yuè", "6yuè", "7yuè", "8yuè", "9yuè", "10yuè", "11yuè", "12yuè" ], _gpua218 = {
    id: "VC",
    displayName: "Saint-Vincent-et-les Grenadines",
    regionId: "029",
    hasTimeZones: true
}, _gpua219 = {
    future: _gpua79,
    past: _gpua80
}, _gpua220 = [ "mäs.", "teq.", "hed.", "tah.", "ter", "yäk.", "mäg.", "miy.", "gue.", "sän.", "ham.", "näh.", "pag." ], _gpua221 = [ "tis.", "hes.", "kis.", "téb.", "sché.", "ad.I", "adar", "nis.", "iyar", "siv.", "tam.", "ab", "ell." ], _gpua222 = [ "chai.", "vai.", "jyai.", "āsha.", "shrā.", "bhā.", "āshw.", "kār.", "mār.", "pau.", "māgh", "phāl." ], _gpua223 = {
    future: _gpua78,
    past: _gpua96
}, _gpua224 = {
    future: _gpua81,
    past: _gpua97
}, _gpua225 = {
    future: _gpua82,
    past: _gpua98
}, _gpua226 = {
    future: _gpua83,
    past: _gpua100
}, _gpua227 = {
    future: _gpua90,
    past: _gpua111
}, _gpua228 = {
    future: _gpua94,
    past: _gpua113
}, _gpua229 = {
    future: _gpua99,
    past: _gpua117
}, _gpua230 = [ "tout", "bâb.", "hât.", "kya.", "toub.", "amsh.", "barma.", "barmo.", "bash.", "ba’o.", "abî.", "mis.", "al-n." ], _gpua231 = {
    displayName: "a",
    relativeTime: _gpua196
}, _gpua232 = {
    displayName: "j",
    relativeTime: _gpua197
}, _gpua233 = {
    displayName: "h",
    relativeTime: _gpua198
}, _gpua234 = {
    future: _gpua110,
    past: _gpua119
}, _gpua235 = {
    future: _gpua112,
    past: _gpua120
}, _gpua236 = {
    displayName: "s",
    relativeTime: _gpua199
}, _gpua237 = {
    future: _gpua114,
    past: _gpua122
}, _gpua238 = {
    future: _gpua116,
    past: _gpua125
}, _gpua239 = {
    displayName: "m.",
    relativeTime: _gpua207
}, _gpua240 = [ "Farvardin", "Ordibehesht", "Khordad", "Tir", "Mordad", "Shahrivar", "Mehr", "Aban", "Azar", "Dey", "Bahman", "Esfand" ], _gpua241 = {
    midnight: "min.",
    am: "AM",
    noon: "midi",
    pm: "PM",
    morning1: "mat.",
    afternoon1: "ap.m.",
    evening1: "soir",
    night1: "nuit"
}, _gpua242 = [ "janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre" ], _gpua243 = {
    future: _gpua118,
    past: _gpua131
}, _gpua244 = [ "zhēngyuè", "èryuè", "sānyuè", "sìyuè", "wǔyuè", "liùyuè", "qīyuè", "bāyuè", "jiǔyuè", "shíyuè", "shíyīyuè", "shí’èryuè" ], _gpua245 = [ "Tisseri", "Hesvan", "Kislev", "Tébeth", "Schébat", "Adar I", "Adar", "Nissan", "Iyar", "Sivan", "Tamouz", "Ab", "Elloul" ], _gpua246 = {
    displayName: "min",
    relativeTime: _gpua210
}, _gpua247 = {
    midnight: "minuit",
    am: "a",
    noon: "midi",
    pm: "p",
    morning1: "mat.",
    afternoon1: "après-midi",
    evening1: "soir",
    night1: "nuit"
}, _gpua248 = {
    future: _gpua123,
    past: _gpua140
}, _gpua249 = [ "mouh.", "saf.", "rab. aw.", "rab. th.", "joum. oul.", "joum. tha.", "raj.", "chaa.", "ram.", "chaw.", "dhou. q.", "dhou. h." ], _gpua250 = [ "mouh.", "saf.", "rab. aw.", "rab. th.", "joum. ou.", "joum. th.", "raj.", "chaa.", "ram.", "chaw.", "dhou. qi.", "dhou. hi." ], _gpua251 = {
    midnight: "minuit",
    am: "AM",
    noon: "midi",
    pm: "PM",
    morning1: "matin",
    afternoon1: "après-midi",
    evening1: "soir",
    night1: "nuit"
}, _gpua252 = {
    midnight: "min.",
    noon: "midi",
    morning1: "mat.",
    afternoon1: "après-midi",
    evening1: "soir",
    night1: "du matin",
    am: "AM",
    pm: "PM"
}, _gpua253 = {
    future: _gpua130,
    past: _gpua154
}, _gpua254 = {
    displayName: "sem.",
    relativeTime: _gpua214
}, _gpua255 = {
    future: _gpua132,
    past: _gpua155
}, _gpua256 = [ "tout", "bâbâ", "hâtour", "kyakh", "toubah", "amshîr", "barmahât", "barmoudah", "bashans", "ba’ounah", "abîb", "misra", "al-nasi" ], _gpua257 = [ "mäskäräm", "teqemt", "hedar", "tahesas", "ter", "yäkatit", "mägabit", "miyazya", "guenbot", "säné", "hamlé", "nähasé", "pagumén" ], _gpua258 = {
    displayName: "a",
    relativeTime: _gpua223
}, _gpua259 = {
    displayName: "j",
    relativeTime: _gpua224
}, _gpua260 = {
    displayName: "h",
    relativeTime: _gpua225
}, _gpua261 = {
    displayName: "s",
    relativeTime: _gpua226
}, _gpua262 = [ "chaitra", "vaishākh", "jyaishtha", "āshādha", "shrāvana", "bhādrapad", "āshwin", "kārtik", "mārgashīrsha", "paush", "māgh", "phālgun" ], _gpua263 = {
    future: _gpua153,
    past: _gpua163
}, _gpua264 = {
    abbreviated: _gpua2,
    narrow: [ "1", "2", "3", "4" ],
    wide: _gpua166
}, _gpua265 = {
    displayName: "m.",
    relativeTime: _gpua227
}, _gpua266 = {
    midnight: "minuit",
    noon: "midi",
    morning1: "du matin",
    afternoon1: "de l’après-midi",
    evening1: "du soir",
    night1: "du matin",
    am: "AM",
    pm: "PM"
}, _gpua267 = {
    displayName: "min",
    relativeTime: _gpua229
}, _gpua268 = {
    displayName: "sem.",
    relativeTime: _gpua235
}, _gpua269 = {
    displayName: "heure",
    relativeTime: _gpua243
}, _gpua270 = {
    displayName: "minute",
    relativeTime: _gpua248
}, _gpua271 = [ "mouharram", "safar", "rabia al awal", "rabia ath-thani", "joumada al oula", "joumada ath-thania", "rajab", "chaabane", "ramadan", "chawwal", "dhou al qi`da", "dhou al-hijja" ], _gpua272 = {
    decimal: ",",
    group: " ",
    list: ";",
    percentSign: "%",
    plusSign: "+",
    minusSign: "-",
    exponential: "E",
    superscriptingExponent: "×",
    perMille: "‰",
    infinity: "∞",
    nan: "NaN",
    timeSeparator: ":"
}, _gpua273 = {
    displayName: "trim.",
    relative: _gpua89,
    relativeTime: _gpua219
}, _gpua274 = {
    displayName: "seconde",
    relative: [ "maintenant" ],
    relativeTime: _gpua255
}, _gpua275 = {
    format: _gpua193,
    numeric: _gpua3,
    standAlone: _gpua193
}, _gpua276 = {
    displayName: "année",
    relative: _gpua177,
    relativeTime: _gpua228
}, _gpua277 = {
    displayName: "mois",
    relative: _gpua165,
    relativeTime: _gpua234
}, _gpua278 = {
    displayName: "trim.",
    relative: _gpua159,
    relativeTime: _gpua238
}, _gpua279 = {
    abbreviated: _gpua129,
    narrow: _gpua27,
    wide: _gpua188,
    "short": _gpua73
}, _gpua280 = {
    displayName: "jour",
    relative: _gpua204,
    relativeTime: _gpua237
}, _gpua281 = {
    displayName: "semaine",
    relative: _gpua192,
    relativeTime: _gpua253
}, _gpua282 = {
    displayName: "trimestre",
    relative: _gpua203,
    relativeTime: _gpua263
}, _gpua283 = {
    abbreviated: _gpua205,
    narrow: _gpua205,
    wide: _gpua205
}, _gpua284 = {
    format: _gpua283
}, _gpua285 = {
    abbreviated: _gpua216,
    narrow: _gpua124,
    wide: _gpua242
}, _gpua286 = {
    format: _gpua264,
    standAlone: _gpua264
}, _gpua287 = {
    abbreviated: _gpua217,
    narrow: _gpua141,
    wide: _gpua244
}, _gpua288 = {
    abbreviated: _gpua221,
    narrow: _gpua152,
    wide: _gpua245
}, _gpua289 = {
    abbreviated: _gpua220,
    narrow: _gpua151,
    wide: _gpua257
}, _gpua290 = {
    abbreviated: _gpua222,
    narrow: _gpua128,
    wide: _gpua262
}, _gpua291 = {
    abbreviated: _gpua240,
    narrow: _gpua141,
    wide: _gpua240
}, _gpua292 = {
    abbreviated: _gpua230,
    narrow: _gpua150,
    wide: _gpua256
}, _gpua293 = {
    fullDate: "EEEE d MMMM U",
    longDate: "d MMMM U",
    mediumDate: "d MMM U",
    shortDate: "d/M/y",
    fullTime: "HH:mm:ss zzzz",
    longTime: "HH:mm:ss z",
    mediumTime: "HH:mm:ss",
    shortTime: "HH:mm",
    shortDateTime: "d/M/y HH:mm",
    mediumDateTime: "d MMM U HH:mm:ss",
    longDateTime: "d MMMM U HH:mm:ss z",
    fullDateTime: "EEEE d MMMM U HH:mm:ss zzzz"
}, _gpua294 = {
    shortDate: "y-MM-dd GGGGG",
    fullDate: "EEEE d MMMM y G",
    longDate: "d MMMM y G",
    mediumDate: "d MMM y G",
    fullTime: "HH:mm:ss zzzz",
    longTime: "HH:mm:ss z",
    mediumTime: "HH:mm:ss",
    shortTime: "HH:mm",
    shortDateTime: "y-MM-dd GGGGG HH:mm",
    mediumDateTime: "d MMM y G HH:mm:ss",
    longDateTime: "d MMMM y G 'à' HH:mm:ss z",
    fullDateTime: "EEEE d MMMM y G 'à' HH:mm:ss zzzz"
}, _gpua295 = {
    shortDate: "yy-MM-dd GGGGG",
    fullDate: "EEEE d MMMM y G",
    longDate: "d MMMM y G",
    mediumDate: "d MMM y G",
    fullTime: "HH:mm:ss zzzz",
    longTime: "HH:mm:ss z",
    mediumTime: "HH:mm:ss",
    shortTime: "HH:mm",
    shortDateTime: "yy-MM-dd GGGGG HH:mm",
    mediumDateTime: "d MMM y G HH:mm:ss",
    longDateTime: "d MMMM y G 'à' HH:mm:ss z",
    fullDateTime: "EEEE d MMMM y G 'à' HH:mm:ss zzzz"
}, _gpua296 = {
    abbreviated: _gpua249,
    narrow: _gpua141,
    wide: _gpua271
}, _gpua297 = {
    abbreviated: _gpua250,
    narrow: _gpua141,
    wide: _gpua271
}, _gpua298 = {
    "1000": _gpua5,
    "10000": _gpua13,
    "100000": _gpua19,
    "1000000": _gpua6,
    "10000000": _gpua14,
    "100000000": _gpua20,
    "1000000000": _gpua7,
    "10000000000": _gpua15,
    "100000000000": _gpua21,
    "1000000000000": _gpua8,
    "10000000000000": _gpua16,
    "100000000000000": _gpua22
}, _gpua299 = {
    abbreviated: _gpua241,
    narrow: _gpua241,
    wide: _gpua251
}, _gpua300 = {
    abbreviated: _gpua252,
    narrow: _gpua247,
    wide: _gpua266
}, _gpua301 = {
    "1000": _gpua23,
    "10000": _gpua26,
    "100000": _gpua43,
    "1000000": _gpua37,
    "10000000": _gpua49,
    "100000000": _gpua62,
    "1000000000": _gpua38,
    "10000000000": _gpua50,
    "100000000000": _gpua63,
    "1000000000000": _gpua39,
    "10000000000000": _gpua51,
    "100000000000000": _gpua64
}, _gpua302 = {
    format: _gpua279,
    standAlone: _gpua279
}, _gpua303 = {
    Gy: "U",
    GyMMM: "MMM U",
    GyMMMd: "d MMM U",
    GyMMMEd: "E d MMM U",
    M: "L",
    Md: "d/M",
    MEd: "E d/M",
    MMM: "LLL",
    MMMd: "d MMM",
    MMMEd: "E d MMM",
    MMMMd: "d MMMM",
    ms: "mm:ss",
    y: "U",
    yMd: "d/M/y",
    yyyy: "U",
    yyyyM: "M/y",
    yyyyMd: "d/M/y",
    yyyyMEd: "E d/M/y",
    yyyyMMM: "MMM U",
    yyyyMMMd: "d MMM U",
    yyyyMMMEd: "E d MMM U",
    yyyyMMMM: "MMMM U",
    yyyyQQQ: "QQQ U",
    yyyyQQQQ: "QQQQ U",
    d: "d",
    E: "ccc",
    Ed: "d, E",
    h: "h a",
    H: "HH",
    hm: "h:mm a",
    Hm: "HH:mm",
    hms: "h:mm:ss a",
    Hms: "HH:mm:ss",
    UM: "U MM",
    UMd: "U MM-d",
    UMMM: "U MMM",
    UMMMd: "U MMM d"
}, _gpua304 = {
    "1000": _gpua55,
    "10000": _gpua56,
    "100000": _gpua66,
    "1000000": _gpua71,
    "10000000": _gpua86,
    "100000000": _gpua91,
    "1000000000": _gpua87,
    "10000000000": _gpua92,
    "100000000000": _gpua101,
    "1000000000000": _gpua72,
    "10000000000000": _gpua88,
    "100000000000000": _gpua93
}, _gpua305 = {
    Md: "M-d",
    MEd: "E M-d",
    MMd: "MM-d",
    MMdd: "MM-dd",
    yyyyM: "y-MM G",
    yyyyMd: "y-MM-dd G",
    yyyyMEd: "E y-MM-dd G",
    yyyyMM: "y-MM G",
    d: "d",
    E: "ccc",
    Ed: "E d",
    Gy: "y G",
    GyMMM: "MMM y G",
    GyMMMd: "d MMM y G",
    GyMMMEd: "E d MMM y G",
    h: "h a",
    H: "HH",
    hm: "h:mm a",
    Hm: "HH:mm",
    hms: "h:mm:ss a",
    Hms: "HH:mm:ss",
    M: "L",
    MMM: "LLL",
    MMMd: "d MMM",
    MMMEd: "E d MMM",
    MMMMd: "d MMMM",
    ms: "mm:ss",
    y: "y G",
    yyyy: "y G",
    yyyyMMM: "MMM y G",
    yyyyMMMd: "d MMM y G",
    yyyyMMMEd: "E d MMM y G",
    yyyyMMMM: "MMMM y G",
    yyyyQQQ: "QQQ y G",
    yyyyQQQQ: "QQQQ y G",
    Ehm: "E h:mm a",
    EHm: "E HH:mm",
    Ehms: "E h:mm:ss a",
    EHms: "E HH:mm:ss"
}, _gpua306 = {
    currencyMatch: /[^\u0024+<->\u005E`\u007C~¢-¦¨©¬®-±´¸×÷˂-˅˒-˟˥-˫˭˯-˿͵΄΅϶҂֏؆-؈؋؎؏۞۩۽۾߶৲৳৺৻૱୰௳-௺౿൹฿༁-༃༓༕-༗༚-༟༴༶༸྾-࿅࿇-࿌࿎࿏࿕-࿘႞႟᎐-᎙៛᥀᧞-᧿᭡-᭪᭴-᭼᾽᾿-῁῍-῏῝-῟῭-`´῾⁄⁒⁺-⁼₊-₌₠-₹℀℁℃-℆℈℉℔№-℘℞-℣℥℧℩℮℺℻⅀-⅄⅊-⅍⅏←-⌨⌫-⏳␀-␦⑀-⑊⒜-ⓩ─-⛿✁-❧➔-⟄⟇-⟥⟰-⦂⦙-⧗⧜-⧻⧾-⭌⭐-⭙⳥-⳪⺀-⺙⺛-⻳⼀-⿕⿰-⿻〄〒〓〠〶〷〾〿゛゜㆐㆑㆖-㆟㇀-㇣㈀-㈞㈪-㉇㉐㉠-㉿㊊-㊰㋀-㋾㌀-㏿䷀-䷿꒐-꓆꜀-꜖꜠꜡꞉꞊꠨-꠫꠶-꠹꩷-꩹﬩﮲-﯁﷼﷽﹢﹤-﹦﹩＄＋＜-＞＾｀｜～￠-￦￨-￮￼�]/,
    surroundingMatch: /[0-9²³¹¼-¾٠-٩۰-۹߀-߉०-९০-৯৴-৹੦-੯૦-૯୦-୯୲-୷௦-௲౦-౯౸-౾೦-೯൦-൵๐-๙໐-໙༠-༳၀-၉႐-႙፩-፼ᛮ-ᛰ០-៩៰-៹᠐-᠙᥆-᥏᧐-᧚᪀-᪉᪐-᪙᭐-᭙᮰-᮹᱀-᱉᱐-᱙⁰⁴-⁹₀-₉⅐-ↂↅ-↉①-⒛⓪-⓿❶-➓⳽〇〡-〩〸-〺㆒-㆕㈠-㈩㉈-㉏㉑-㉟㊀-㊉㊱-㊿꘠-꘩ꛦ-ꛯ꠰-꠵꣐-꣙꤀-꤉꧐-꧙꩐-꩙꯰-꯹０-９]/,
    insertBetween: " "
}, _gpua307 = {
    Md: "MM-dd",
    MEd: "E d MMM",
    yyyyM: "y-MM GGGGG",
    yyyyMd: "y-MM-dd GGGGG",
    yyyyMEd: "E y-MM-dd GGGGG",
    d: "d",
    E: "ccc",
    Ed: "E d",
    Gy: "y G",
    GyMMM: "MMM y G",
    GyMMMd: "d MMM y G",
    GyMMMEd: "E d MMM y G",
    M: "L",
    MMM: "LLL",
    MMMd: "d MMM",
    MMMEd: "E d MMM",
    MMMMd: "d MMMM",
    y: "y G",
    yyyy: "y G",
    yyyyMMM: "MMM y G",
    yyyyMMMd: "d MMM y G",
    yyyyMMMEd: "E d MMM y G",
    yyyyMMMM: "MMMM y G",
    yyyyQQQ: "QQQ y G",
    yyyyQQQQ: "QQQQ y G",
    MMd: "MM-d",
    MMdd: "MM-dd",
    yyyyMM: "y-MM G",
    h: "h a",
    H: "HH",
    hm: "h:mm a",
    Hm: "HH:mm",
    hms: "h:mm:ss a",
    Hms: "HH:mm:ss",
    ms: "mm:ss",
    Ehm: "E h:mm a",
    EHm: "E HH:mm",
    Ehms: "E h:mm:ss a",
    EHms: "E HH:mm:ss"
}, _gpua308 = {
    format: _gpua285,
    standAlone: _gpua285
}, _gpua309 = {
    format: _gpua287,
    standAlone: _gpua287
}, _gpua310 = [ undefined, "jia-zi", "yi-chou", "bing-yin", "ding-mao", "wu-chen", "ji-si", "geng-wu", "xin-wei", "ren-shen", "gui-you", "jia-xu", "yi-hai", "bing-zi", "ding-chou", "wu-yin", "ji-mao", "geng-chen", "xin-si", "ren-wu", "gui-wei", "jia-shen", "yi-you", "bing-xu", "ding-hai", "wu-zi", "ji-chou", "geng-yin", "xin-mao", "ren-chen", "gui-si", "jia-wu", "yi-wei", "bing-shen", "ding-you", "wu-xu", "ji-hai", "geng-zi", "xin-chou", "ren-yin", "gui-mao", "jia-chen", "yi-si", "bing-wu", "ding-wei", "wu-shen", "ji-you", "geng-xu", "xin-hai", "ren-zi", "gui-chou", "jia-yin", "yi-mao", "bing-chen", "ding-si", "wu-wu", "ji-wei", "geng-shen", "xin-you", "ren-xu" ], _gpua311 = {
    format: _gpua296,
    standAlone: _gpua297
}, _gpua312 = {
    format: _gpua300,
    standAlone: _gpua299
}, _gpua313 = {
    basic: _gpua293,
    cldr: _gpua303
}, _gpua314 = {
    basic: _gpua295,
    cldr: _gpua305
}, _gpua315 = {
    "long": _gpua304,
    "short": _gpua298,
    "default": "#,##0.###"
}, _gpua316 = {
    basic: _gpua294,
    cldr: _gpua307
}, _gpua317 = {
    d: {
        d: "d–d"
    },
    h: _gpua17,
    H: {
        H: "HH–HH"
    },
    hm: _gpua149,
    Hm: _gpua59,
    hmv: _gpua164,
    Hmv: _gpua84,
    hv: _gpua35,
    Hv: {
        H: "HH–HH v"
    },
    M: {
        M: "MM–MM"
    },
    Md: _gpua74,
    MEd: _gpua126,
    MMM: {
        M: "LLL–LLL"
    },
    MMMd: _gpua48,
    MMMEd: _gpua127,
    y: {
        y: "U–U"
    },
    yM: _gpua60,
    yMd: _gpua189,
    yMEd: _gpua215,
    yMMM: _gpua61,
    yMMMd: _gpua162,
    yMMMEd: _gpua211,
    yMMMM: _gpua85
}, _gpua318 = {
    Md: _gpua74,
    MEd: _gpua115,
    MMMEd: {
        d: "E d – E d MMM"
    },
    yM: _gpua75,
    yMd: _gpua195,
    yMEd: _gpua213,
    d: {
        d: "d – d"
    },
    h: _gpua24,
    H: {
        H: "HH – HH"
    },
    hm: _gpua160,
    Hm: _gpua76,
    hmv: _gpua175,
    Hmv: _gpua95,
    hv: _gpua44,
    Hv: {
        H: "HH – HH v"
    },
    M: {
        M: "M – M"
    },
    MMM: {
        M: "MMM–MMM"
    },
    MMMd: _gpua45,
    y: {
        y: "y – y G"
    },
    yMMM: _gpua77,
    yMMMd: _gpua176,
    yMMMEd: _gpua206,
    yMMMM: _gpua109
}, _gpua319 = {
    beforeCurrency: _gpua306,
    afterCurrency: _gpua306
}, _gpua320 = {
    "short": _gpua301,
    "default": "#,##0.00 ¤",
    one: "{0} {1}",
    other: "{0} {1}",
    currencySpacing: _gpua319
}, _gpua321 = {
    abbreviated: _gpua310,
    narrow: _gpua310,
    wide: _gpua310
}, _gpua322 = {
    format: _gpua321
}, _gpua323 = {
    scientific: {
        "default": "#E0"
    },
    decimal: _gpua315,
    currency: _gpua320,
    percent: _gpua1
}, _gpua324 = {
    "year-short": _gpua258,
    era: {
        displayName: "ère"
    },
    year: _gpua276,
    "year-narrow": _gpua231,
    quarter: _gpua282,
    "quarter-short": _gpua278,
    "quarter-narrow": _gpua273,
    month: _gpua277,
    "month-short": _gpua265,
    "month-narrow": _gpua239,
    week: _gpua281,
    "week-short": _gpua268,
    "week-narrow": _gpua254,
    day: _gpua280,
    "day-short": _gpua259,
    "day-narrow": _gpua232,
    weekday: _gpua65,
    dayperiod: _gpua4,
    hour: _gpua269,
    "hour-short": _gpua260,
    "hour-narrow": _gpua233,
    minute: _gpua270,
    "minute-short": _gpua267,
    "minute-narrow": _gpua246,
    second: _gpua274,
    "second-short": _gpua261,
    "second-narrow": _gpua236,
    zone: _gpua41,
    sun: _gpua200,
    "sun-short": _gpua167,
    "sun-narrow": _gpua142,
    mon: _gpua185,
    "mon-short": _gpua168,
    "mon-narrow": _gpua143,
    tue: _gpua186,
    "tue-short": _gpua169,
    "tue-narrow": _gpua144,
    wed: _gpua201,
    "wed-short": _gpua170,
    "wed-narrow": _gpua145,
    thu: _gpua187,
    "thu-short": _gpua171,
    "thu-narrow": _gpua146,
    fri: _gpua202,
    "fri-short": _gpua172,
    "fri-narrow": _gpua147,
    sat: _gpua191,
    "sat-short": _gpua173,
    "sat-narrow": _gpua148
}, _gpua325 = {
    dateFormats: {
        basic: {},
        cldr: {}
    },
    fields: _gpua324
}, _gpua326 = {
    dayParts: _gpua284,
    days: _gpua322,
    months: _gpua322,
    years: _gpua322,
    zodiacs: _gpua284
}, _gpua327 = {
    dateFormats: _gpua316,
    datePartsOrder: "ymd",
    dateIntervalFormats: _gpua318,
    dateIntervalFallbackFormat: "{0} – {1}",
    dayNames: _gpua302,
    dayPeriods: _gpua312,
    monthNames: _gpua311,
    eraNames: _gpua53,
    quarterNames: _gpua286,
    fields: _gpua324
}, _gpua328 = {
    dateFormats: _gpua313,
    datePartsOrder: "dmy",
    dateIntervalFormats: _gpua317,
    dateIntervalFallbackFormat: "{0} – {1}",
    dayNames: _gpua302,
    dayPeriods: _gpua312,
    cyclicNames: _gpua326,
    monthNames: _gpua309,
    monthPatterns: _gpua275,
    quarterNames: _gpua286,
    fields: _gpua324
};

inter.id = "fr_ca";

inter.unitPatterns = {
    "long": {
        unit: {
            angleArcSecond: {
                one: "{0} seconde d’angle",
                other: "{0} secondes d’angle"
            },
            areaSquareMile: {
                one: "{0} mille carré",
                other: "{0} milles carrés"
            },
            areaAcre: {
                one: "{0} acre",
                other: "{0} acres"
            },
            areaSquareYard: {
                one: "{0} verge carrée",
                other: "{0} verges carrées"
            },
            "consumptionLiterPer-100kilometers": {
                one: "{0} litre au 100 kilomètres",
                other: "{0} litres au 100 kilomètres"
            },
            consumptionMilePerGallon: {
                one: "{0} mille au gallon",
                other: "{0} milles au gallon"
            },
            lengthMile: {
                one: "{0} mille",
                other: "{0} milles"
            },
            lengthYard: {
                one: "{0} verge",
                other: "{0} verges"
            },
            speedMilePerHour: {
                one: "{0} mille à l’heure",
                other: "{0} milles à l’heure"
            },
            temperatureGeneric: _gpua9,
            volumeCubicMile: {
                one: "{0} mille cube",
                other: "{0} milles cubes"
            },
            volumeCubicYard: {
                one: "{0} verge cube",
                other: "{0} verges cubes"
            },
            volumeQuart: {
                one: "{0} pinte",
                other: "{0} pintes"
            },
            volumePint: {
                one: "{0} chopine",
                other: "{0} chopines"
            },
            volumeTeaspoon: {
                one: "{0} cuillère à thé",
                other: "{0} cuillères à thé"
            },
            accelerationGForce: P.unitPatterns.long.unit.accelerationGForce,
            accelerationMeterPerSecondSquared: {
                one: "{0} mètre par seconde carrée",
                other: "{0} mètres par seconde carrée"
            },
            angleRevolution: {
                one: "{0} tour",
                other: "{0} tours"
            },
            angleRadian: {
                one: "{0} radian",
                other: "{0} radians"
            },
            angleDegree: {
                one: "{0} degré",
                other: "{0} degrés"
            },
            angleArcMinute: {
                one: "{0} minute d’arc",
                other: "{0} minutes d’arc"
            },
            areaSquareKilometer: {
                one: "{0} kilomètre carré",
                other: "{0} kilomètres carrés"
            },
            areaHectare: {
                one: "{0} hectare",
                other: "{0} hectares"
            },
            areaSquareMeter: {
                one: "{0} mètre carré",
                other: "{0} mètres carrés"
            },
            areaSquareCentimeter: {
                one: "{0} centimètre carré",
                other: "{0} centimètres carrés"
            },
            areaSquareFoot: {
                one: "{0} pied carré",
                other: "{0} pieds carrés"
            },
            areaSquareInch: {
                one: "{0} pouce carré",
                other: "{0} pouces carrés"
            },
            concentrKarat: _gpua69,
            consumptionLiterPerKilometer: {
                one: "{0} litre au kilomètre",
                other: "{0} litres au kilomètre"
            },
            digitalTerabyte: {
                one: "{0} téraoctet",
                other: "{0} téraoctets"
            },
            digitalTerabit: {
                one: "{0} térabit",
                other: "{0} térabits"
            },
            digitalGigabyte: {
                one: "{0} gigaoctet",
                other: "{0} gigaoctets"
            },
            digitalGigabit: {
                one: "{0} gigabit",
                other: "{0} gigabits"
            },
            digitalMegabyte: {
                one: "{0} mégaoctet",
                other: "{0} mégaoctets"
            },
            digitalMegabit: {
                one: "{0} mégabit",
                other: "{0} mégabits"
            },
            digitalKilobyte: {
                one: "{0} kilooctet",
                other: "{0} kilooctets"
            },
            digitalKilobit: {
                one: "{0} kilobit",
                other: "{0} kilobits"
            },
            digitalByte: {
                one: "{0} octet",
                other: "{0} octets"
            },
            digitalBit: {
                one: "{0} bit",
                other: "{0} bits"
            },
            durationCentury: {
                one: "{0} siècle",
                other: "{0} siècles"
            },
            durationYear: _gpua36,
            durationMonth: {
                one: "{0} mois",
                other: "{0} mois"
            },
            durationWeek: {
                one: "{0} semaine",
                other: "{0} semaines"
            },
            durationDay: {
                one: "{0} jour",
                other: "{0} jours"
            },
            durationHour: {
                one: "{0} heure",
                other: "{0} heures"
            },
            durationMinute: {
                one: "{0} minute",
                other: "{0} minutes"
            },
            durationSecond: {
                one: "{0} seconde",
                other: "{0} secondes"
            },
            durationMillisecond: {
                one: "{0} milliseconde",
                other: "{0} millisecondes"
            },
            durationMicrosecond: {
                one: "{0} microseconde",
                other: "{0} microsecondes"
            },
            durationNanosecond: {
                one: "{0} nanoseconde",
                other: "{0} nanosecondes"
            },
            electricAmpere: {
                one: "{0} ampère",
                other: "{0} ampères"
            },
            electricMilliampere: {
                one: "{0} milliampère",
                other: "{0} milliampères"
            },
            electricOhm: {
                one: "{0} ohm",
                other: "{0} ohms"
            },
            electricVolt: {
                one: "{0} volt",
                other: "{0} volts"
            },
            energyKilocalorie: _gpua121,
            energyCalorie: {
                one: "{0} calorie",
                other: "{0} calories"
            },
            energyFoodcalorie: _gpua121,
            energyKilojoule: {
                one: "{0} kilojoule",
                other: "{0} kilojoules"
            },
            energyJoule: {
                one: "{0} joule",
                other: "{0} joules"
            },
            energyKilowattHour: {
                one: "{0} kilowattheure",
                other: "{0} kilowattheures"
            },
            frequencyGigahertz: {
                one: "{0} gigahertz",
                other: "{0} gigahertz"
            },
            frequencyMegahertz: {
                one: "{0} mégahertz",
                other: "{0} mégahertz"
            },
            frequencyKilohertz: {
                one: "{0} kilohertz",
                other: "{0} kilohertz"
            },
            frequencyHertz: {
                one: "{0} hertz",
                other: "{0} hertz"
            },
            lengthKilometer: {
                one: "{0} kilomètre",
                other: "{0} kilomètres"
            },
            lengthMeter: {
                one: "{0} mètre",
                other: "{0} mètres"
            },
            lengthDecimeter: {
                one: "{0} décimètre",
                other: "{0} décimètres"
            },
            lengthCentimeter: {
                one: "{0} centimètre",
                other: "{0} centimètres"
            },
            lengthMillimeter: {
                one: "{0} millimètre",
                other: "{0} millimètres"
            },
            lengthMicrometer: {
                one: "{0} micromètre",
                other: "{0} micromètres"
            },
            lengthNanometer: {
                one: "{0} nanomètre",
                other: "{0} nanomètres"
            },
            lengthPicometer: {
                one: "{0} picomètre",
                other: "{0} picomètres"
            },
            lengthFoot: {
                one: "{0} pied",
                other: "{0} pieds"
            },
            lengthInch: {
                one: "{0} pouce",
                other: "{0} pouces"
            },
            lengthParsec: {
                one: "{0} parsec",
                other: "{0} parsecs"
            },
            lengthLightYear: {
                one: "{0} année-lumière",
                other: "{0} années-lumière"
            },
            lengthAstronomicalUnit: {
                one: "{0} unité astronomique",
                other: "{0} unités astronomiques"
            },
            lengthFurlong: {
                one: "{0} sillon",
                other: "{0} sillons"
            },
            lengthFathom: {
                one: "{0} brasse",
                other: "{0} brasses"
            },
            lengthNauticalMile: {
                one: "{0} mille marin",
                other: "{0} milles marins"
            },
            lengthMileScandinavian: {
                one: "{0} mille scandinave",
                other: "{0} milles scandinaves"
            },
            lightLux: {
                one: "{0} lux",
                other: "{0} lux"
            },
            massMetricTon: {
                one: "{0} tonne",
                other: "{0} tonnes"
            },
            massKilogram: {
                one: "{0} kilogramme",
                other: "{0} kilogrammes"
            },
            massGram: {
                one: "{0} gramme",
                other: "{0} grammes"
            },
            massMilligram: {
                one: "{0} milligramme",
                other: "{0} milligrammes"
            },
            massMicrogram: {
                one: "{0} microgramme",
                other: "{0} microgrammes"
            },
            massTon: {
                one: "{0} tonne courte",
                other: "{0} tonnes courtes"
            },
            massStone: {
                one: "{0} stone",
                other: "{0} stone"
            },
            massPound: {
                one: "{0} livre",
                other: "{0} livres"
            },
            massOunce: {
                one: "{0} once",
                other: "{0} onces"
            },
            massOunceTroy: {
                one: "{0} once troy",
                other: "{0} onces troy"
            },
            massCarat: _gpua69,
            powerGigawatt: {
                one: "{0} gigawatt",
                other: "{0} gigawatts"
            },
            powerMegawatt: {
                one: "{0} mégawatt",
                other: "{0} mégawatts"
            },
            powerKilowatt: {
                one: "{0} kilowatt",
                other: "{0} kilowatts"
            },
            powerWatt: {
                one: "{0} watt",
                other: "{0} watts"
            },
            powerMilliwatt: {
                one: "{0} milliwatt",
                other: "{0} milliwatts"
            },
            powerHorsepower: {
                one: "{0} cheval-vapeur",
                other: "{0} chevaux-vapeur"
            },
            pressureHectopascal: {
                one: "{0} hectopascal",
                other: "{0} hectopascals"
            },
            pressureMillimeterOfMercury: {
                one: "{0} millimètre de mercure",
                other: "{0} millimètres de mercure"
            },
            pressurePoundPerSquareInch: {
                one: "{0} livre par pouce carré",
                other: "{0} livres par pouce carré"
            },
            pressureInchHg: {
                one: "{0} pouce de mercure",
                other: "{0} pouces de mercure"
            },
            pressureMillibar: {
                one: "{0} millibar",
                other: "{0} millibars"
            },
            speedKilometerPerHour: {
                one: "{0} kilomètre par heure",
                other: "{0} kilomètres par heure"
            },
            speedMeterPerSecond: {
                one: "{0} mètre par seconde",
                other: "{0} mètres par seconde"
            },
            speedKnot: {
                one: "{0} nœud",
                other: "{0} nœuds"
            },
            temperatureCelsius: {
                one: "{0} degré Celsius",
                other: "{0} degrés Celsius"
            },
            temperatureFahrenheit: {
                one: "{0} degré Fahrenheit",
                other: "{0} degrés Fahrenheit"
            },
            temperatureKelvin: {
                one: "{0} kelvin",
                other: "{0} kelvins"
            },
            volumeCubicKilometer: {
                one: "{0} kilomètre cube",
                other: "{0} kilomètres cubes"
            },
            volumeCubicMeter: {
                one: "{0} mètre cube",
                other: "{0} mètres cubes"
            },
            volumeCubicCentimeter: {
                one: "{0} centimètre cube",
                other: "{0} centimètres cubes"
            },
            volumeCubicFoot: {
                one: "{0} pied cube",
                other: "{0} pieds cubes"
            },
            volumeCubicInch: {
                one: "{0} pouce cube",
                other: "{0} pouces cubes"
            },
            volumeMegaliter: {
                one: "{0} mégalitre",
                other: "{0} mégalitres"
            },
            volumeHectoliter: {
                one: "{0} hectolitre",
                other: "{0} hectolitres"
            },
            volumeLiter: {
                one: "{0} litre",
                other: "{0} litres"
            },
            volumeDeciliter: {
                one: "{0} décilitre",
                other: "{0} décilitres"
            },
            volumeCentiliter: {
                one: "{0} centilitre",
                other: "{0} centilitres"
            },
            volumeMilliliter: {
                one: "{0} millilitre",
                other: "{0} millilitres"
            },
            volumePintMetric: {
                one: "{0} pinte métrique",
                other: "{0} pintes métriques"
            },
            volumeCupMetric: {
                one: "{0} tasse métrique",
                other: "{0} tasses métriques"
            },
            volumeAcreFoot: {
                one: "{0} acre-pied",
                other: "{0} acres-pieds"
            },
            volumeBushel: {
                one: "{0} boisseau",
                other: "{0} boisseaux"
            },
            volumeGallon: {
                one: "{0} gallon",
                other: "{0} gallons"
            },
            volumeCup: _gpua70,
            volumeFluidOunce: {
                one: "{0} once liquide",
                other: "{0} onces liquides"
            },
            volumeTablespoon: {
                one: "{0} cuillère à soupe",
                other: "{0} cuillères à soupe"
            }
        },
        compoundUnit: {
            per: "{0} par {1}"
        }
    },
    "short": {
        unit: {
            areaSquareYard: {
                one: "{0} vg²",
                other: "{0} vg²"
            },
            areaSquareFoot: {
                one: "{0} pi²",
                other: "{0} pi²"
            },
            lengthYard: {
                one: "{0} vg",
                other: "{0} vg"
            },
            lengthFoot: {
                one: "{0} pi",
                other: "{0} pi"
            },
            lengthAstronomicalUnit: {
                one: "{0} ua",
                other: "{0} ua"
            },
            lengthNauticalMile: {
                one: "{0} NM",
                other: "{0} NM"
            },
            massTon: {
                one: "{0} tc",
                other: "{0} tc"
            },
            pressurePoundPerSquareInch: {
                one: "{0} psi",
                other: "{0} psi"
            },
            volumeCubicYard: {
                one: "{0} vg³",
                other: "{0} vg³"
            },
            volumeCubicFoot: {
                one: "{0} pi³",
                other: "{0} pi³"
            },
            volumeMegaliter: {
                one: "{0} ML",
                other: "{0} ML"
            },
            volumeHectoliter: {
                one: "{0} hL",
                other: "{0} hL"
            },
            volumeLiter: {
                one: "{0} L",
                other: "{0} L"
            },
            volumeDeciliter: {
                one: "{0} dL",
                other: "{0} dL"
            },
            volumeCentiliter: {
                one: "{0} cL",
                other: "{0} cL"
            },
            volumeMilliliter: {
                one: "{0} mL",
                other: "{0} mL"
            },
            volumeQuart: {
                one: "{0} pte",
                other: "{0} pte"
            },
            volumePint: {
                one: "{0} chop",
                other: "{0} chop"
            },
            volumeFluidOunce: {
                one: "{0} oz liq.",
                other: "{0} oz liq."
            },
            volumeTeaspoon: {
                one: "{0} c. à t.",
                other: "{0} c. à t."
            },
            accelerationGForce: {
                one: "{0} G",
                other: "{0} G"
            },
            accelerationMeterPerSecondSquared: {
                one: "{0} m/s²",
                other: "{0} m/s²"
            },
            angleRevolution: {
                one: "{0} tr",
                other: "{0} tr"
            },
            angleRadian: _gpua42,
            angleDegree: _gpua9,
            angleArcMinute: _gpua10,
            angleArcSecond: _gpua11,
            areaSquareKilometer: {
                one: "{0} km²",
                other: "{0} km²"
            },
            areaHectare: {
                one: "{0} ha",
                other: "{0} ha"
            },
            areaSquareMeter: {
                one: "{0} m²",
                other: "{0} m²"
            },
            areaSquareCentimeter: {
                one: "{0} cm²",
                other: "{0} cm²"
            },
            areaSquareMile: {
                one: "{0} mi²",
                other: "{0} mi²"
            },
            areaAcre: {
                one: "{0} ac",
                other: "{0} ac"
            },
            areaSquareInch: {
                one: "{0} po²",
                other: "{0} po²"
            },
            concentrKarat: _gpua25,
            consumptionLiterPerKilometer: {
                one: "{0} l/km",
                other: "{0} l/km"
            },
            "consumptionLiterPer-100kilometers": {
                one: "{0} l/100 km",
                other: "{0} l/100 km"
            },
            consumptionMilePerGallon: {
                one: "{0} mi/gal",
                other: "{0} mi/gal"
            },
            digitalTerabyte: {
                one: "{0} To",
                other: "{0} To"
            },
            digitalTerabit: {
                one: "{0} Tb",
                other: "{0} Tb"
            },
            digitalGigabyte: {
                one: "{0} Go",
                other: "{0} Go"
            },
            digitalGigabit: {
                one: "{0} Gb",
                other: "{0} Gb"
            },
            digitalMegabyte: {
                one: "{0} Mo",
                other: "{0} Mo"
            },
            digitalMegabit: {
                one: "{0} Mb",
                other: "{0} Mb"
            },
            digitalKilobyte: {
                one: "{0} ko",
                other: "{0} ko"
            },
            digitalKilobit: {
                one: "{0} kb",
                other: "{0} kb"
            },
            digitalByte: {
                one: "{0} octet",
                other: "{0} octet"
            },
            digitalBit: {
                one: "{0} bit",
                other: "{0} bit"
            },
            durationCentury: {
                one: "{0} si",
                other: "{0} si"
            },
            durationYear: _gpua36,
            durationMonth: _gpua18,
            durationWeek: {
                one: "{0} sem.",
                other: "{0} sem."
            },
            durationDay: {
                one: "{0} j",
                other: "{0} j"
            },
            durationHour: {
                one: "{0} h",
                other: "{0} h"
            },
            durationMinute: {
                one: "{0} min",
                other: "{0} min"
            },
            durationSecond: {
                one: "{0} s",
                other: "{0} s"
            },
            durationMillisecond: {
                one: "{0} ms",
                other: "{0} ms"
            },
            durationMicrosecond: {
                one: "{0} μs",
                other: "{0} μs"
            },
            durationNanosecond: {
                one: "{0} ns",
                other: "{0} ns"
            },
            electricAmpere: {
                one: "{0} A",
                other: "{0} A"
            },
            electricMilliampere: {
                one: "{0} mA",
                other: "{0} mA"
            },
            electricOhm: {
                one: "{0} Ω",
                other: "{0} Ω"
            },
            electricVolt: {
                one: "{0} V",
                other: "{0} V"
            },
            energyKilocalorie: _gpua54,
            energyCalorie: {
                one: "{0} cal",
                other: "{0} cal"
            },
            energyFoodcalorie: _gpua54,
            energyKilojoule: {
                one: "{0} kJ",
                other: "{0} kJ"
            },
            energyJoule: {
                one: "{0} J",
                other: "{0} J"
            },
            energyKilowattHour: {
                one: "{0} kWh",
                other: "{0} kWh"
            },
            frequencyGigahertz: {
                one: "{0} GHz",
                other: "{0} GHz"
            },
            frequencyMegahertz: {
                one: "{0} MHz",
                other: "{0} MHz"
            },
            frequencyKilohertz: {
                one: "{0} kHz",
                other: "{0} kHz"
            },
            frequencyHertz: {
                one: "{0} Hz",
                other: "{0} Hz"
            },
            lengthKilometer: {
                one: "{0} km",
                other: "{0} km"
            },
            lengthMeter: _gpua18,
            lengthDecimeter: {
                one: "{0} dm",
                other: "{0} dm"
            },
            lengthCentimeter: {
                one: "{0} cm",
                other: "{0} cm"
            },
            lengthMillimeter: {
                one: "{0} mm",
                other: "{0} mm"
            },
            lengthMicrometer: {
                one: "{0} µm",
                other: "{0} µm"
            },
            lengthNanometer: {
                one: "{0} nm",
                other: "{0} nm"
            },
            lengthPicometer: {
                one: "{0} pm",
                other: "{0} pm"
            },
            lengthMile: {
                one: "{0} mi",
                other: "{0} mi"
            },
            lengthInch: {
                one: "{0} po",
                other: "{0} po"
            },
            lengthParsec: {
                one: "{0} pc",
                other: "{0} pc"
            },
            lengthLightYear: {
                one: "{0} al",
                other: "{0} al"
            },
            lengthFurlong: {
                one: "{0} sil",
                other: "{0} sil"
            },
            lengthFathom: {
                one: "{0} fat",
                other: "{0} fat"
            },
            lengthMileScandinavian: {
                one: "{0} smi",
                other: "{0} smi"
            },
            lightLux: {
                one: "{0} lx",
                other: "{0} lx"
            },
            massMetricTon: {
                one: "{0} t",
                other: "{0} t"
            },
            massKilogram: {
                one: "{0} kg",
                other: "{0} kg"
            },
            massGram: {
                one: "{0} g",
                other: "{0} g"
            },
            massMilligram: {
                one: "{0} mg",
                other: "{0} mg"
            },
            massMicrogram: {
                one: "{0} µg",
                other: "{0} µg"
            },
            massStone: {
                one: "{0} st",
                other: "{0} st"
            },
            massPound: {
                one: "{0} lb",
                other: "{0} lb"
            },
            massOunce: {
                one: "{0} oz",
                other: "{0} oz"
            },
            massOunceTroy: {
                one: "{0} oz t",
                other: "{0} oz t"
            },
            massCarat: _gpua25,
            powerGigawatt: {
                one: "{0} GW",
                other: "{0} GW"
            },
            powerMegawatt: {
                one: "{0} MW",
                other: "{0} MW"
            },
            powerKilowatt: {
                one: "{0} kW",
                other: "{0} kW"
            },
            powerWatt: {
                one: "{0} W",
                other: "{0} W"
            },
            powerMilliwatt: {
                one: "{0} mW",
                other: "{0} mW"
            },
            powerHorsepower: {
                one: "{0} ch",
                other: "{0} ch"
            },
            pressureHectopascal: {
                one: "{0} hPa",
                other: "{0} hPa"
            },
            pressureMillimeterOfMercury: {
                one: "{0} mm Hg",
                other: "{0} mm Hg"
            },
            pressureInchHg: {
                one: "{0} inHg",
                other: "{0} inHg"
            },
            pressureMillibar: {
                one: "{0} mbar",
                other: "{0} mbar"
            },
            speedKilometerPerHour: {
                one: "{0} km/h",
                other: "{0} km/h"
            },
            speedMeterPerSecond: {
                one: "{0} m/s",
                other: "{0} m/s"
            },
            speedMilePerHour: {
                one: "{0} mi/h",
                other: "{0} mi/h"
            },
            speedKnot: {
                one: "{0} nd",
                other: "{0} nd"
            },
            temperatureGeneric: _gpua9,
            temperatureCelsius: {
                one: "{0} °C",
                other: "{0} °C"
            },
            temperatureFahrenheit: {
                one: "{0} °F",
                other: "{0} °F"
            },
            temperatureKelvin: {
                one: "{0} K",
                other: "{0} K"
            },
            volumeCubicKilometer: {
                one: "{0} km³",
                other: "{0} km³"
            },
            volumeCubicMeter: {
                one: "{0} m³",
                other: "{0} m³"
            },
            volumeCubicCentimeter: {
                one: "{0} cm³",
                other: "{0} cm³"
            },
            volumeCubicMile: {
                one: "{0} mi³",
                other: "{0} mi³"
            },
            volumeCubicInch: {
                one: "{0} po³",
                other: "{0} po³"
            },
            volumePintMetric: {
                one: "{0} mpt",
                other: "{0} mpt"
            },
            volumeCupMetric: {
                one: "{0} tm",
                other: "{0} tm"
            },
            volumeAcreFoot: {
                one: "{0} ac pi",
                other: "{0} ac pi"
            },
            volumeBushel: {
                one: "{0} bu",
                other: "{0} bu"
            },
            volumeGallon: {
                one: "{0} gal",
                other: "{0} gal"
            },
            volumeCup: _gpua70,
            volumeTablespoon: {
                one: "{0} c. à s.",
                other: "{0} c. à s."
            },
            concentrMilligramPerDeciliter: {
                other: "{0} mg/dL"
            },
            concentrMillimolePerLiter: {
                other: "{0} mmol/L"
            },
            concentrPartPerMillion: {
                other: "{0} ppm"
            },
            consumptionMilePerGallonImperial: {
                other: "{0} mpg Imp."
            },
            volumeGallonImperial: {
                other: "{0} gal Imp."
            }
        },
        compoundUnit: {
            per: "{0}/{1}"
        }
    },
    narrow: {
        unit: {
            "consumptionLiterPer-100kilometers": {
                one: "{0} L/100 km",
                other: "{0} L/100 km"
            },
            temperatureCelsius: {
                one: "{0} °C",
                other: "{0} °C"
            },
            volumeLiter: {
                one: "{0}L",
                other: "{0}L"
            },
            accelerationGForce: {
                one: "{0}G",
                other: "{0}G"
            },
            accelerationMeterPerSecondSquared: {
                one: "{0}m/s²",
                other: "{0}m/s²"
            },
            angleRevolution: {
                one: "{0}tr",
                other: "{0}tr"
            },
            angleRadian: _gpua42,
            angleDegree: _gpua9,
            angleArcMinute: _gpua10,
            angleArcSecond: _gpua11,
            areaSquareKilometer: {
                one: "{0}km²",
                other: "{0}km²"
            },
            areaHectare: {
                one: "{0}ha",
                other: "{0}ha"
            },
            areaSquareMeter: {
                one: "{0}m²",
                other: "{0}m²"
            },
            areaSquareMile: {
                one: "{0}mi²",
                other: "{0}mi²"
            },
            areaAcre: {
                one: "{0}ac",
                other: "{0}ac"
            },
            areaSquareFoot: {
                one: "{0}pi²",
                other: "{0}pi²"
            },
            digitalTerabyte: {
                one: "{0}To",
                other: "{0}To"
            },
            digitalTerabit: {
                one: "{0}Tb",
                other: "{0}Tb"
            },
            digitalGigabyte: {
                one: "{0}Go",
                other: "{0}Go"
            },
            digitalGigabit: {
                one: "{0}Gb",
                other: "{0}Gb"
            },
            digitalMegabyte: {
                one: "{0}Mo",
                other: "{0}Mo"
            },
            digitalMegabit: {
                one: "{0}Mb",
                other: "{0}Mb"
            },
            digitalKilobyte: {
                one: "{0}ko",
                other: "{0}ko"
            },
            digitalKilobit: {
                one: "{0}kb",
                other: "{0}kb"
            },
            digitalByte: {
                one: "{0}octet",
                other: "{0}octet"
            },
            digitalBit: {
                one: "{0}bit",
                other: "{0}bit"
            },
            durationCentury: {
                one: "{0}si",
                other: "{0}si"
            },
            durationYear: {
                one: "{0}a",
                other: "{0}a"
            },
            durationMonth: _gpua12,
            durationWeek: {
                one: "{0}sem",
                other: "{0}sem"
            },
            durationDay: {
                one: "{0}j",
                other: "{0}j"
            },
            durationHour: {
                one: "{0}h",
                other: "{0}h"
            },
            durationMinute: _gpua12,
            durationSecond: {
                one: "{0}s",
                other: "{0}s"
            },
            durationMillisecond: {
                one: "{0}ms",
                other: "{0}ms"
            },
            durationMicrosecond: {
                one: "{0}µs",
                other: "{0}µs"
            },
            durationNanosecond: {
                one: "{0}ns",
                other: "{0}ns"
            },
            lengthKilometer: {
                one: "{0}km",
                other: "{0}km"
            },
            lengthMeter: _gpua12,
            lengthDecimeter: {
                one: "{0}dm",
                other: "{0}dm"
            },
            lengthCentimeter: {
                one: "{0}cm",
                other: "{0}cm"
            },
            lengthMillimeter: {
                one: "{0}mm",
                other: "{0}mm"
            },
            lengthMicrometer: {
                one: "{0}µm",
                other: "{0}µm"
            },
            lengthNanometer: {
                one: "{0}nm",
                other: "{0}nm"
            },
            lengthPicometer: {
                one: "{0}pm",
                other: "{0}pm"
            },
            lengthMile: {
                one: "{0}mi",
                other: "{0}mi"
            },
            lengthYard: {
                one: "{0}yd",
                other: "{0}yd"
            },
            lengthFoot: _gpua10,
            lengthInch: _gpua11,
            lengthParsec: {
                one: "{0}pc",
                other: "{0}pc"
            },
            lengthLightYear: {
                one: "{0}a.l.",
                other: "{0}a.l."
            },
            lengthAstronomicalUnit: {
                one: "{0}ua",
                other: "{0}ua"
            },
            lengthFurlong: {
                one: "{0}sil",
                other: "{0}sil"
            },
            lengthFathom: {
                one: "{0}fat",
                other: "{0}fat"
            },
            lengthNauticalMile: {
                one: "{0}nmi",
                other: "{0}nmi"
            },
            lengthMileScandinavian: {
                one: "{0}smi",
                other: "{0}smi"
            },
            massMetricTon: {
                one: "{0}t",
                other: "{0}t"
            },
            massKilogram: {
                one: "{0}kg",
                other: "{0}kg"
            },
            massGram: {
                one: "{0}g",
                other: "{0}g"
            },
            massMilligram: {
                one: "{0}mg",
                other: "{0}mg"
            },
            massMicrogram: {
                one: "{0}µg",
                other: "{0}µg"
            },
            massTon: {
                one: "{0} sh tn",
                other: "{0} sh tn"
            },
            massStone: {
                one: "{0}st",
                other: "{0}st"
            },
            massPound: {
                one: "{0}lb",
                other: "{0}lb"
            },
            massOunce: {
                one: "{0}oz",
                other: "{0}oz"
            },
            massOunceTroy: {
                one: "{0}oz t",
                other: "{0}oz t"
            },
            massCarat: {
                one: "{0}ct",
                other: "{0}ct"
            },
            powerKilowatt: {
                one: "{0}kW",
                other: "{0}kW"
            },
            powerWatt: {
                one: "{0}W",
                other: "{0}W"
            },
            powerHorsepower: {
                one: "{0}ch",
                other: "{0}ch"
            },
            pressureHectopascal: {
                one: "{0}hPa",
                other: "{0}hPa"
            },
            pressureMillimeterOfMercury: {
                one: "{0}mmHg",
                other: "{0}mmHg"
            },
            pressurePoundPerSquareInch: {
                one: "{0}lb/po²",
                other: "{0}lb/po²"
            },
            pressureInchHg: {
                one: "{0}inHg",
                other: "{0}inHg"
            },
            pressureMillibar: {
                one: "{0}mbar",
                other: "{0}mbar"
            },
            speedKilometerPerHour: {
                one: "{0}km/h",
                other: "{0}km/h"
            },
            speedMeterPerSecond: {
                one: "{0}m/s",
                other: "{0}m/s"
            },
            speedMilePerHour: {
                one: "{0}mi/h",
                other: "{0}mi/h"
            },
            speedKnot: {
                one: "{0}nd",
                other: "{0}nd"
            },
            temperatureGeneric: _gpua9,
            temperatureFahrenheit: {
                one: "{0}°F",
                other: "{0}°F"
            },
            temperatureKelvin: {
                one: "{0}K",
                other: "{0}K"
            },
            volumeCubicKilometer: {
                one: "{0}km³",
                other: "{0}km³"
            },
            volumeCubicMeter: {
                one: "{0}m³",
                other: "{0}m³"
            },
            volumeCubicCentimeter: {
                one: "{0}cm³",
                other: "{0}cm³"
            },
            volumeCubicMile: {
                one: "{0}mi³",
                other: "{0}mi³"
            },
            volumeCubicYard: {
                one: "{0}yd³",
                other: "{0}yd³"
            },
            volumeCubicFoot: {
                one: "{0}pi³",
                other: "{0}pi³"
            },
            volumeCubicInch: {
                one: "{0}po³",
                other: "{0}po³"
            },
            volumeMegaliter: {
                one: "{0}Ml",
                other: "{0}Ml"
            },
            volumeHectoliter: {
                one: "{0}hl",
                other: "{0}hl"
            },
            volumeDeciliter: {
                one: "{0}dl",
                other: "{0}dl"
            },
            volumeCentiliter: {
                one: "{0}cl",
                other: "{0}cl"
            },
            volumeMilliliter: {
                one: "{0}ml",
                other: "{0}ml"
            },
            volumePintMetric: {
                one: "{0}mpt",
                other: "{0}mpt"
            },
            volumeCupMetric: {
                one: "{0}tm",
                other: "{0}tm"
            },
            volumeAcreFoot: {
                one: "{0}ac pi",
                other: "{0}ac pi"
            },
            volumeBushel: {
                one: "{0}bu",
                other: "{0}bu"
            },
            volumeGallon: {
                one: "{0}gal",
                other: "{0}gal"
            },
            volumeQuart: {
                one: "{0}qt",
                other: "{0}qt"
            },
            volumePint: {
                one: "{0}pte",
                other: "{0}pte"
            },
            volumeCup: {
                one: "{0}ta",
                other: "{0}ta"
            },
            volumeFluidOunce: {
                one: "{0}fl oz",
                other: "{0}fl oz"
            },
            volumeTablespoon: {
                one: "{0}CàS",
                other: "{0}CàS"
            },
            volumeTeaspoon: {
                one: "{0}CàC",
                other: "{0}CàC"
            }
        },
        compoundUnit: {
            per: "{0}/{1}"
        }
    }
};

inter.timeZoneFormats = {
    hour: [ "+HH:mm", "−HH:mm" ],
    gmt: "UTC{0}",
    gmtZero: "UTC",
    region: "{0} (heure avancée)",
    fallback: "{1} ({0})",
    regions: {
        daylight: "{0} (heure avancée)",
        standard: "{0} (heure normale)"
    }
};

inter.numbers = {
    ahom: P.numbers.ahom,
    arab: {
        symbols: P.numbers.ahom.symbols,
        formats: _gpua323,
        digits: [ "٠", "١", "٢", "٣", "٤", "٥", "٦", "٧", "٨", "٩" ]
    },
    arabext: {
        symbols: {
            decimal: "٫",
            group: "٬",
            list: "؛",
            percentSign: "٪",
            plusSign: "‎+",
            minusSign: "‎−",
            exponential: "×۱۰^",
            superscriptingExponent: "×",
            perMille: "؉",
            infinity: "∞",
            nan: "NaN",
            timeSeparator: "٫"
        },
        formats: _gpua323,
        digits: [ "۰", "۱", "۲", "۳", "۴", "۵", "۶", "۷", "۸", "۹" ]
    },
    armn: {
        symbols: P.numbers.ahom.symbols,
        digits: "renderArmenianUpper"
    },
    armnlow: {
        symbols: P.numbers.ahom.symbols,
        digits: "renderArmenianLower"
    },
    bali: {
        symbols: _gpua272,
        formats: _gpua323,
        digits: [ "᭐", "᭑", "᭒", "᭓", "᭔", "᭕", "᭖", "᭗", "᭘", "᭙" ]
    },
    beng: {
        symbols: _gpua272,
        formats: _gpua323,
        digits: [ "০", "১", "২", "৩", "৪", "৫", "৬", "৭", "৮", "৯" ]
    },
    brah: {
        symbols: _gpua272,
        formats: _gpua323,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    cakm: {
        symbols: _gpua272,
        formats: _gpua323,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    cham: {
        symbols: _gpua272,
        formats: _gpua323,
        digits: [ "꩐", "꩑", "꩒", "꩓", "꩔", "꩕", "꩖", "꩗", "꩘", "꩙" ]
    },
    cyrl: {
        symbols: P.numbers.ahom.symbols,
        digits: "renderCyrillicLower"
    },
    deva: {
        symbols: _gpua272,
        formats: _gpua323,
        digits: [ "०", "१", "२", "३", "४", "५", "६", "७", "८", "९" ]
    },
    ethi: {
        symbols: P.numbers.ahom.symbols,
        digits: "renderEthiopic"
    },
    finance: _gpua52,
    fullwide: {
        symbols: _gpua272,
        formats: _gpua323,
        digits: [ "０", "１", "２", "３", "４", "５", "６", "７", "８", "９" ]
    },
    geor: {
        symbols: P.numbers.ahom.symbols,
        digits: "renderGeorgian"
    },
    grek: {
        symbols: P.numbers.ahom.symbols,
        digits: "renderGreekUpper"
    },
    greklow: {
        symbols: P.numbers.ahom.symbols,
        digits: "renderGreekLower"
    },
    gujr: {
        symbols: _gpua272,
        formats: _gpua323,
        digits: [ "૦", "૧", "૨", "૩", "૪", "૫", "૬", "૭", "૮", "૯" ]
    },
    guru: {
        symbols: _gpua272,
        formats: _gpua323,
        digits: [ "੦", "੧", "੨", "੩", "੪", "੫", "੬", "੭", "੮", "੯" ]
    },
    hanidays: {
        symbols: P.numbers.ahom.symbols,
        digits: "renderSpelloutNumberingDays"
    },
    hanidec: {
        symbols: _gpua272,
        formats: _gpua323,
        digits: [ "〇", "一", "二", "三", "四", "五", "六", "七", "八", "九" ]
    },
    hans: _gpua181,
    hansfin: _gpua194,
    hant: _gpua181,
    hantfin: _gpua194,
    hebr: {
        symbols: P.numbers.ahom.symbols,
        digits: "renderHebrew"
    },
    hmng: {
        symbols: P.numbers.ahom.symbols,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    java: {
        symbols: _gpua272,
        formats: _gpua323,
        digits: [ "꧐", "꧑", "꧒", "꧓", "꧔", "꧕", "꧖", "꧗", "꧘", "꧙" ]
    },
    jpan: _gpua181,
    jpanfin: _gpua194,
    kali: {
        symbols: _gpua272,
        formats: _gpua323,
        digits: [ "꤀", "꤁", "꤂", "꤃", "꤄", "꤅", "꤆", "꤇", "꤈", "꤉" ]
    },
    khmr: {
        symbols: _gpua272,
        formats: _gpua323,
        digits: [ "០", "១", "២", "៣", "៤", "៥", "៦", "៧", "៨", "៩" ]
    },
    knda: {
        symbols: _gpua272,
        formats: _gpua323,
        digits: [ "೦", "೧", "೨", "೩", "೪", "೫", "೬", "೭", "೮", "೯" ]
    },
    lana: {
        symbols: _gpua272,
        formats: _gpua323,
        digits: [ "᪀", "᪁", "᪂", "᪃", "᪄", "᪅", "᪆", "᪇", "᪈", "᪉" ]
    },
    lanatham: {
        symbols: _gpua272,
        formats: _gpua323,
        digits: [ "᪐", "᪑", "᪒", "᪓", "᪔", "᪕", "᪖", "᪗", "᪘", "᪙" ]
    },
    laoo: {
        symbols: _gpua272,
        formats: _gpua323,
        digits: [ "໐", "໑", "໒", "໓", "໔", "໕", "໖", "໗", "໘", "໙" ]
    },
    latn: {
        symbols: _gpua272,
        formats: _gpua323,
        digits: [ "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" ]
    },
    lepc: {
        symbols: _gpua272,
        formats: _gpua323,
        digits: [ "᱀", "᱁", "᱂", "᱃", "᱄", "᱅", "᱆", "᱇", "᱈", "᱉" ]
    },
    limb: {
        symbols: _gpua272,
        formats: _gpua323,
        digits: [ "᥆", "᥇", "᥈", "᥉", "᥊", "᥋", "᥌", "᥍", "᥎", "᥏" ]
    },
    mathbold: {
        symbols: P.numbers.ahom.symbols,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathdbl: {
        symbols: P.numbers.ahom.symbols,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathmono: {
        symbols: P.numbers.ahom.symbols,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathsanb: {
        symbols: P.numbers.ahom.symbols,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathsans: {
        symbols: P.numbers.ahom.symbols,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mlym: {
        symbols: _gpua272,
        formats: _gpua323,
        digits: [ "൦", "൧", "൨", "൩", "൪", "൫", "൬", "൭", "൮", "൯" ]
    },
    modi: {
        symbols: P.numbers.ahom.symbols,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mong: {
        symbols: _gpua272,
        formats: _gpua323,
        digits: [ "᠐", "᠑", "᠒", "᠓", "᠔", "᠕", "᠖", "᠗", "᠘", "᠙" ]
    },
    mroo: {
        symbols: P.numbers.ahom.symbols,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mtei: {
        symbols: _gpua272,
        formats: _gpua323,
        digits: [ "꯰", "꯱", "꯲", "꯳", "꯴", "꯵", "꯶", "꯷", "꯸", "꯹" ]
    },
    mymr: {
        symbols: _gpua272,
        formats: _gpua323,
        digits: [ "၀", "၁", "၂", "၃", "၄", "၅", "၆", "၇", "၈", "၉" ]
    },
    mymrshan: {
        symbols: _gpua272,
        formats: _gpua323,
        digits: [ "႐", "႑", "႒", "႓", "႔", "႕", "႖", "႗", "႘", "႙" ]
    },
    mymrtlng: {
        symbols: P.numbers.ahom.symbols,
        digits: [ "꧰", "꧱", "꧲", "꧳", "꧴", "꧵", "꧶", "꧷", "꧸", "꧹" ]
    },
    "native": _gpua52,
    nkoo: {
        symbols: _gpua272,
        formats: _gpua323,
        digits: [ "߀", "߁", "߂", "߃", "߄", "߅", "߆", "߇", "߈", "߉" ]
    },
    olck: {
        symbols: _gpua272,
        formats: _gpua323,
        digits: [ "᱐", "᱑", "᱒", "᱓", "᱔", "᱕", "᱖", "᱗", "᱘", "᱙" ]
    },
    orya: {
        symbols: _gpua272,
        formats: _gpua323,
        digits: [ "୦", "୧", "୨", "୩", "୪", "୫", "୬", "୭", "୮", "୯" ]
    },
    osma: {
        symbols: _gpua272,
        formats: _gpua323,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    roman: {
        symbols: P.numbers.ahom.symbols,
        digits: "renderRomanUpper"
    },
    romanlow: {
        symbols: P.numbers.ahom.symbols,
        digits: "renderRomanLower"
    },
    saur: {
        symbols: _gpua272,
        formats: _gpua323,
        digits: [ "꣐", "꣑", "꣒", "꣓", "꣔", "꣕", "꣖", "꣗", "꣘", "꣙" ]
    },
    shrd: {
        symbols: _gpua272,
        formats: _gpua323,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    sind: {
        symbols: P.numbers.ahom.symbols,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    sinh: {
        symbols: P.numbers.ahom.symbols,
        digits: [ "෦", "෧", "෨", "෩", "෪", "෫", "෬", "෭", "෮", "෯" ]
    },
    sora: {
        symbols: _gpua272,
        formats: _gpua323,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    sund: {
        symbols: _gpua272,
        formats: _gpua323,
        digits: [ "᮰", "᮱", "᮲", "᮳", "᮴", "᮵", "᮶", "᮷", "᮸", "᮹" ]
    },
    takr: {
        symbols: _gpua272,
        formats: _gpua323,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    talu: {
        symbols: _gpua272,
        formats: _gpua323,
        digits: [ "᧐", "᧑", "᧒", "᧓", "᧔", "᧕", "᧖", "᧗", "᧘", "᧙" ]
    },
    taml: {
        symbols: P.numbers.ahom.symbols,
        digits: "renderTamil"
    },
    tamldec: {
        symbols: _gpua272,
        formats: _gpua323,
        digits: [ "௦", "௧", "௨", "௩", "௪", "௫", "௬", "௭", "௮", "௯" ]
    },
    telu: {
        symbols: _gpua272,
        formats: _gpua323,
        digits: [ "౦", "౧", "౨", "౩", "౪", "౫", "౬", "౭", "౮", "౯" ]
    },
    thai: {
        symbols: _gpua272,
        formats: _gpua323,
        digits: [ "๐", "๑", "๒", "๓", "๔", "๕", "๖", "๗", "๘", "๙" ]
    },
    tirh: {
        symbols: P.numbers.ahom.symbols,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    tibt: {
        symbols: _gpua272,
        formats: _gpua323,
        digits: [ "༠", "༡", "༢", "༣", "༤", "༥", "༦", "༧", "༨", "༩" ]
    },
    traditio: _gpua52,
    vaii: {
        symbols: _gpua272,
        formats: _gpua323,
        digits: [ "꘠", "꘡", "꘢", "꘣", "꘤", "꘥", "꘦", "꘧", "꘨", "꘩" ]
    },
    wara: {
        symbols: P.numbers.ahom.symbols,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    }
};

inter.calendars = {
    buddhist: {
        dateFormats: {
            basic: P.calendars.buddhist.dateFormats.basic,
            cldr: {
                d: "d",
                M: "L",
                Md: "d/M",
                MEd: "E d/M",
                MMM: "LLL",
                MMMd: "d MMM",
                MMMEd: "E d MMM",
                y: "y G",
                MMd: "MM-d",
                MMdd: "MM-dd",
                yyyyM: "y-MM G",
                yyyyMd: "y-MM-dd G",
                yyyyMEd: "E y-MM-dd G",
                yyyyMM: "y-MM G",
                E: "ccc",
                Ed: "E d",
                Gy: "y G",
                GyMMM: "MMM y G",
                GyMMMd: "d MMM y G",
                GyMMMEd: "E d MMM y G",
                h: "h a",
                H: "HH",
                hm: "h:mm a",
                Hm: "HH:mm",
                hms: "h:mm:ss a",
                Hms: "HH:mm:ss",
                MMMMd: "d MMMM",
                ms: "mm:ss",
                yyyy: "y G",
                yyyyMMM: "MMM y G",
                yyyyMMMd: "d MMM y G",
                yyyyMMMEd: "E d MMM y G",
                yyyyMMMM: "MMMM y G",
                yyyyQQQ: "QQQ y G",
                yyyyQQQQ: "QQQQ y G",
                Ehm: "E h:mm a",
                EHm: "E HH:mm",
                Ehms: "E h:mm:ss a",
                EHms: "E HH:mm:ss"
            }
        },
        datePartsOrder: "dmy",
        dateIntervalFormats: _gpua318,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _gpua302,
        dayPeriods: _gpua312,
        monthNames: _gpua308,
        eraNames: {
            wide: [ "ère bouddhiste" ],
            abbreviated: [ "ère b." ]
        },
        quarterNames: _gpua286,
        fields: _gpua324
    },
    chinese: _gpua328,
    coptic: {
        dateFormats: _gpua314,
        datePartsOrder: "ymd",
        dateIntervalFormats: _gpua318,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _gpua302,
        dayPeriods: _gpua312,
        monthNames: {
            format: _gpua292,
            standAlone: _gpua292
        },
        eraNames: {
            wide: [ "avant Dioclétien", "après Dioclétien" ],
            abbreviated: [ "av. D.", "ap. D." ]
        },
        quarterNames: _gpua286,
        fields: _gpua324
    },
    dangi: _gpua328,
    ethioaa: _gpua325,
    ethiopic: {
        dateFormats: _gpua314,
        datePartsOrder: "ymd",
        dateIntervalFormats: _gpua318,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _gpua302,
        dayPeriods: _gpua312,
        monthNames: {
            format: _gpua289,
            standAlone: _gpua289
        },
        eraNames: {
            wide: [ "avant l’Incarnation", "après l’Incarnation" ],
            abbreviated: [ "av. Inc.", "ap. Inc." ]
        },
        quarterNames: _gpua286,
        fields: _gpua324
    },
    gregorian: {
        dateFormats: {
            basic: {
                shortDate: "yy-MM-dd",
                fullDate: "EEEE d MMMM y",
                longDate: "d MMMM y",
                mediumDate: "d MMM y",
                fullTime: "HH:mm:ss zzzz",
                longTime: "HH:mm:ss z",
                mediumTime: "HH:mm:ss",
                shortTime: "HH:mm",
                shortDateTime: "yy-MM-dd HH:mm",
                mediumDateTime: "d MMM y HH:mm:ss",
                longDateTime: "d MMMM y 'à' HH:mm:ss z",
                fullDateTime: "EEEE d MMMM y 'à' HH:mm:ss zzzz"
            },
            cldr: {
                Md: "M-d",
                MEd: "E M-d",
                MMd: "MM-d",
                MMdd: "MM-dd",
                yM: "y-MM",
                yMd: "y-MM-dd",
                yMEd: "E y-MM-dd",
                yMM: "y-MM",
                d: "d",
                E: "E",
                Ed: "E d",
                Ehm: "E h:mm a",
                EHm: "E HH:mm",
                Ehms: "E h:mm:ss a",
                EHms: "E HH:mm:ss",
                Gy: "y G",
                GyMMM: "MMM y G",
                GyMMMd: "d MMM y G",
                GyMMMEd: "E d MMM y G",
                h: "h a",
                H: "HH 'h'",
                hm: "h:mm a",
                Hm: "HH:mm",
                hms: "h:mm:ss a",
                Hms: "HH:mm:ss",
                hmsv: "h:mm:ss a v",
                Hmsv: "HH:mm:ss v",
                hmv: "h:mm a v",
                Hmv: "HH:mm v",
                M: "L",
                MMM: "LLL",
                MMMd: "d MMM",
                MMMEd: "E d MMM",
                MMMMd: "d MMMM",
                ms: "mm:ss",
                y: "y",
                yMMM: "MMM y",
                yMMMd: "d MMM y",
                yMMMEd: "E d MMM y",
                yMMMM: "MMMM y",
                yQQQ: "QQQ y",
                yQQQQ: "QQQQ y"
            }
        },
        datePartsOrder: "ymd",
        dateIntervalFormats: {
            d: {
                d: "d – d"
            },
            h: {
                a: "h 'h' a – h 'h' a",
                h: "h 'h' – h 'h' a"
            },
            H: {
                H: "H 'h' – H 'h'"
            },
            hv: {
                a: "h 'h' a – h 'h' a v",
                h: "h 'h' – h 'h' a v"
            },
            Hv: {
                H: "H 'h' – H 'h' v"
            },
            Md: _gpua74,
            MEd: _gpua115,
            yM: _gpua60,
            yMd: _gpua189,
            yMEd: {
                d: "E y-MM-dd – E y-MM-dd",
                M: "E y-MM-dd – E y-MM-dd",
                y: "E y-MM-dd – E y-MM-dd"
            },
            hm: _gpua160,
            Hm: _gpua76,
            hmv: _gpua175,
            Hmv: _gpua95,
            M: {
                M: "M–M"
            },
            MMM: {
                M: "MMM–MMM"
            },
            MMMd: _gpua45,
            MMMEd: {
                d: "E d – E d MMM",
                M: "E d MMM – E d MMM"
            },
            y: {
                y: "y–y"
            },
            yMMM: {
                M: "MMM–MMM y",
                y: "MMM y – MMM y"
            },
            yMMMd: {
                d: "d–d MMM y",
                M: "d MMM – d MMM y",
                y: "d MMM y – d MMM y"
            },
            yMMMEd: {
                d: "E d – E d MMM y",
                M: "E d MMM – E d MMM y",
                y: "E d MMM y – E d MMM y"
            },
            yMMMM: {
                M: "MMMM – MMMM y",
                y: "MMMM y – MMMM y"
            }
        },
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _gpua302,
        dayPeriods: _gpua312,
        monthNames: _gpua308,
        eraNames: {
            wide: [ "avant Jésus-Christ", "après Jésus-Christ" ],
            abbreviated: [ "av. J.-C.", "ap. J.-C." ]
        },
        quarterNames: _gpua286,
        fields: _gpua324
    },
    hebrew: {
        dateFormats: {
            basic: P.calendars.buddhist.dateFormats.basic,
            cldr: _gpua305
        },
        datePartsOrder: "dmy",
        dateIntervalFormats: _gpua318,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _gpua302,
        dayPeriods: _gpua312,
        monthNames: {
            format: _gpua288,
            standAlone: _gpua288
        },
        eraNames: {
            wide: [ "Anno Mundi" ],
            abbreviated: [ "AM" ]
        },
        quarterNames: _gpua286,
        fields: _gpua324
    },
    indian: {
        dateFormats: _gpua314,
        datePartsOrder: "ymd",
        dateIntervalFormats: _gpua318,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _gpua302,
        dayPeriods: _gpua312,
        monthNames: {
            format: _gpua290,
            standAlone: _gpua290
        },
        eraNames: {
            wide: [ "SAKA" ],
            abbreviated: [ "SAKA" ]
        },
        quarterNames: _gpua286,
        fields: _gpua324
    },
    islamic: _gpua327,
    "islamic-umalqura": _gpua327,
    "islamic-tbla": _gpua327,
    "islamic-civil": _gpua327,
    "islamic-rgsa": _gpua327,
    iso8601: _gpua325,
    japanese: {
        dateFormats: {
            basic: {
                fullDate: "EEEE d MMMM y G",
                longDate: "d MMMM y G",
                mediumDate: "d MMM y G",
                shortDate: "dd/MM/y GGGGG",
                fullTime: "HH:mm:ss zzzz",
                longTime: "HH:mm:ss z",
                mediumTime: "HH:mm:ss",
                shortTime: "HH:mm",
                shortDateTime: "dd/MM/y GGGGG HH:mm",
                mediumDateTime: "d MMM y G HH:mm:ss",
                longDateTime: "d MMMM y G HH:mm:ss z",
                fullDateTime: "EEEE d MMMM y G HH:mm:ss zzzz"
            },
            cldr: {
                d: "d",
                E: "ccc",
                Ed: "E d",
                Gy: "y G",
                GyMMM: "MMM y G",
                GyMMMd: "d MMM y G",
                GyMMMEd: "E d MMM y G",
                M: "L",
                Md: "d/M",
                MEd: "E d/M",
                MMM: "LLL",
                MMMd: "d MMM",
                MMMEd: "E d MMM",
                MMMMd: "d MMMM",
                y: "y G",
                yyyy: "y G",
                yyyyM: "M/y GGGGG",
                yyyyMd: "d/M/y GGGGG",
                yyyyMEd: "E d/M/y GGGGG",
                yyyyMMM: "MMM y G",
                yyyyMMMd: "d MMM y G",
                yyyyMMMEd: "E d MMM y G",
                yyyyMMMM: "MMMM y G",
                yyyyQQQ: "QQQ y G",
                yyyyQQQQ: "QQQQ y G",
                MMd: "MM-d",
                MMdd: "MM-dd",
                yyyyMM: "y-MM G",
                h: "h a",
                H: "HH",
                hm: "h:mm a",
                Hm: "HH:mm",
                hms: "h:mm:ss a",
                Hms: "HH:mm:ss",
                ms: "mm:ss",
                Ehm: "E h:mm a",
                EHm: "E HH:mm",
                Ehms: "E h:mm:ss a",
                EHms: "E HH:mm:ss"
            }
        },
        datePartsOrder: "dmy",
        dateIntervalFormats: _gpua318,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _gpua302,
        dayPeriods: _gpua312,
        monthNames: _gpua308,
        eraNames: {
            wide: [ "Taika (645–650)", "Hakuchi (650–671)", "Hakuhō (672–686)", "Shuchō (686–701)", "Taihō (701–704)", "Keiun (704–708)", "Wadō (708–715)", "Reiki (715–717)", "Yōrō (717–724)", "Jinki (724–729)", "Tempyō (729–749)", "Tempyō-kampō (749-749)", "Tempyō-shōhō (749-757)", "Tempyō-hōji (757-765)", "Temphō-jingo (765-767)", "Jingo-keiun (767-770)", "Hōki (770–780)", "Ten-ō (781-782)", "Enryaku (782–806)", "Daidō (806–810)", "Kōnin (810–824)", "Tenchō (824–834)", "Jōwa (834–848)", "Kajō (848–851)", "Ninju (851–854)", "Saikō (854–857)", "Ten-an (857-859)", "Jōgan (859–877)", "Gangyō (877–885)", "Ninna (885–889)", "Kanpyō (889–898)", "Shōtai (898–901)", "Engi (901–923)", "Enchō (923–931)", "Jōhei (931–938)", "Tengyō (938–947)", "Tenryaku (947–957)", "Tentoku (957–961)", "Ōwa (961–964)", "Kōhō (964–968)", "Anna (968–970)", "Tenroku (970–973)", "Ten’en (973–976)", "Jōgen (976–978)", "Tengen (978–983)", "Eikan (983–985)", "Kanna (985–987)", "Eien (987–989)", "Eiso (989–990)", "Shōryaku (990–995)", "Chōtoku (995–999)", "Chōhō (999–1004)", "Kankō (1004–1012)", "Chōwa (1012–1017)", "Kannin (1017–1021)", "Jian (1021–1024)", "Manju (1024–1028)", "Chōgen (1028–1037)", "Chōryaku (1037–1040)", "Chōkyū (1040–1044)", "Kantoku (1044–1046)", "Eishō (1046–1053)", "Tengi (1053–1058)", "Kōhei (1058–1065)", "Jiryaku (1065–1069)", "Enkyū (1069–1074)", "Shōho (1074–1077)", "Shōryaku (1077–1081)", "Eihō (1081–1084)", "Ōtoku (1084–1087)", "Kanji (1087–1094)", "Kahō (1094–1096)", "Eichō (1096–1097)", "Jōtoku (1097–1099)", "Kōwa (1099–1104)", "Chōji (1104–1106)", "Kashō (1106–1108)", "Tennin (1108–1110)", "Ten-ei (1110-1113)", "Eikyū (1113–1118)", "Gen’ei (1118–1120)", "Hōan (1120–1124)", "Tenji (1124–1126)", "Daiji (1126–1131)", "Tenshō (1131–1132)", "Chōshō (1132–1135)", "Hōen (1135–1141)", "Eiji (1141–1142)", "Kōji (1142–1144)", "Ten’yō (1144–1145)", "Kyūan (1145–1151)", "Ninpei (1151–1154)", "Kyūju (1154–1156)", "Hōgen (1156–1159)", "Heiji (1159–1160)", "Eiryaku (1160–1161)", "Ōho (1161–1163)", "Chōkan (1163–1165)", "Eiman (1165–1166)", "Nin’an (1166–1169)", "Kaō (1169–1171)", "Shōan (1171–1175)", "Angen (1175–1177)", "Jishō (1177–1181)", "Yōwa (1181–1182)", "Juei (1182–1184)", "Genryaku (1184–1185)", "Bunji (1185–1190)", "Kenkyū (1190–1199)", "Shōji (1199–1201)", "Kennin (1201–1204)", "Genkyū (1204–1206)", "Ken’ei (1206–1207)", "Jōgen (1207–1211)", "Kenryaku (1211–1213)", "Kenpō (1213–1219)", "Jōkyū (1219–1222)", "Jōō (1222–1224)", "Gennin (1224–1225)", "Karoku (1225–1227)", "Antei (1227–1229)", "Kanki (1229–1232)", "Jōei (1232–1233)", "Tenpuku (1233–1234)", "Bunryaku (1234–1235)", "Katei (1235–1238)", "Ryakunin (1238–1239)", "En’ō (1239–1240)", "Ninji (1240–1243)", "Kangen (1243–1247)", "Hōji (1247–1249)", "Kenchō (1249–1256)", "Kōgen (1256–1257)", "Shōka (1257–1259)", "Shōgen (1259–1260)", "Bun’ō (1260–1261)", "Kōchō (1261–1264)", "Bun’ei (1264–1275)", "Kenji (1275–1278)", "Kōan (1278–1288)", "Shōō (1288–1293)", "Einin (1293–1299)", "Shōan (1299–1302)", "Kengen (1302–1303)", "Kagen (1303–1306)", "Tokuji (1306–1308)", "Enkyō (1308–1311)", "Ōchō (1311–1312)", "Shōwa (1312–1317)", "Bunpō (1317–1319)", "Genō (1319–1321)", "Genkō (1321–1324)", "Shōchū (1324–1326)", "Karyaku (1326–1329)", "Gentoku (1329–1331)", "Genkō (1331–1334)", "Kemmu (1334–1336)", "Engen (1336–1340)", "Kōkoku (1340–1346)", "Shōhei (1346–1370)", "Kentoku (1370–1372)", "Bunchū (1372–1375)", "Tenju (1375–1379)", "Kōryaku (1379–1381)", "Kōwa (1381–1384)", "Genchū (1384–1392)", "Meitoku (1384–1387)", "Kakei (1387–1389)", "Kōō (1389–1390)", "Meitoku (1390–1394)", "Ōei (1394–1428)", "Shōchō (1428–1429)", "Eikyō (1429–1441)", "Kakitsu (1441–1444)", "Bun’an (1444–1449)", "Hōtoku (1449–1452)", "Kyōtoku (1452–1455)", "Kōshō (1455–1457)", "Chōroku (1457–1460)", "Kanshō (1460–1466)", "Bunshō (1466–1467)", "Ōnin (1467–1469)", "Bunmei (1469–1487)", "Chōkyō (1487–1489)", "Entoku (1489–1492)", "Meiō (1492–1501)", "Bunki (1501–1504)", "Eishō (1504–1521)", "Taiei (1521–1528)", "Kyōroku (1528–1532)", "Tenbun (1532–1555)", "Kōji (1555–1558)", "Eiroku (1558–1570)", "Genki (1570–1573)", "Tenshō (1573–1592)", "Bunroku (1592–1596)", "Keichō (1596–1615)", "Genna (1615–1624)", "Kan’ei (1624–1644)", "Shōho (1644–1648)", "Keian (1648–1652)", "Jōō (1652–1655)", "Meireki (1655–1658)", "Manji (1658–1661)", "Kanbun (1661–1673)", "Enpō (1673–1681)", "Tenna (1681–1684)", "Jōkyō (1684–1688)", "Genroku (1688–1704)", "Hōei (1704–1711)", "Shōtoku (1711–1716)", "Kyōhō (1716–1736)", "Genbun (1736–1741)", "Kanpō (1741–1744)", "Enkyō (1744–1748)", "Kan’en (1748–1751)", "Hōryaku (1751–1764)", "Meiwa (1764–1772)", "An’ei (1772–1781)", "Tenmei (1781–1789)", "Kansei (1789–1801)", "Kyōwa (1801–1804)", "Bunka (1804–1818)", "Bunsei (1818–1830)", "Tenpō (1830–1844)", "Kōka (1844–1848)", "Kaei (1848–1854)", "Ansei (1854–1860)", "Man’en (1860–1861)", "Bunkyū (1861–1864)", "Genji (1864–1865)", "Keiō (1865–1868)", "Meiji", "Taishō", "Shōwa", "Heisei" ],
            abbreviated: [ "Taika (645–650)", "Hakuchi (650–671)", "Hakuhō (672–686)", "Shuchō (686–701)", "Taihō (701–704)", "Keiun (704–708)", "Wadō (708–715)", "Reiki (715–717)", "Yōrō (717–724)", "Jinki (724–729)", "Tenpyō (729–749)", "Tenpyō-kampō (749-749)", "Tenpyō-shōhō (749-757)", "Tenpyō-hōji (757-765)", "Tenpyō-jingo (765-767)", "Jingo-keiun (767-770)", "Hōki (770–780)", "Ten-ō (781-782)", "Enryaku (782–806)", "Daidō (806–810)", "Kōnin (810–824)", "Tenchō (824–834)", "Jōwa (834–848)", "Kajō (848–851)", "Ninju (851–854)", "Saikō (854–857)", "Ten-an (857-859)", "Jōgan (859–877)", "Gangyō (877–885)", "Ninna (885–889)", "Kanpyō (889–898)", "Shōtai (898–901)", "Engi (901–923)", "Enchō (923–931)", "Jōhei (931–938)", "Tengyō (938–947)", "Tenryaku (947–957)", "Tentoku (957–961)", "Ōwa (961–964)", "Kōhō (964–968)", "Anna (968–970)", "Tenroku (970–973)", "Ten’en (973–976)", "Jōgen (976–978)", "Tengen (978–983)", "Eikan (983–985)", "Kanna (985–987)", "Eien (987–989)", "Eiso (989–990)", "Shōryaku (990–995)", "Chōtoku (995–999)", "Chōhō (999–1004)", "Kankō (1004–1012)", "Chōwa (1012–1017)", "Kannin (1017–1021)", "Jian (1021–1024)", "Manju (1024–1028)", "Chōgen (1028–1037)", "Chōryaku (1037–1040)", "Chōkyū (1040–1044)", "Kantoku (1044–1046)", "Eishō (1046–1053)", "Tengi (1053–1058)", "Kōhei (1058–1065)", "Jiryaku (1065–1069)", "Enkyū (1069–1074)", "Shōho (1074–1077)", "Shōryaku (1077–1081)", "Eihō (1081–1084)", "Ōtoku (1084–1087)", "Kanji (1087–1094)", "Kahō (1094–1096)", "Eichō (1096–1097)", "Jōtoku (1097–1099)", "Kōwa (1099–1104)", "Chōji (1104–1106)", "Kashō (1106–1108)", "Tennin (1108–1110)", "Ten-ei (1110-1113)", "Eikyū (1113–1118)", "Gen’ei (1118–1120)", "Hōan (1120–1124)", "Tenji (1124–1126)", "Daiji (1126–1131)", "Tenshō (1131–1132)", "Chōshō (1132–1135)", "Hōen (1135–1141)", "Eiji (1141–1142)", "Kōji (1142–1144)", "Ten’yō (1144–1145)", "Kyūan (1145–1151)", "Ninpei (1151–1154)", "Kyūju (1154–1156)", "Hōgen (1156–1159)", "Heiji (1159–1160)", "Eiryaku (1160–1161)", "Ōho (1161–1163)", "Chōkan (1163–1165)", "Eiman (1165–1166)", "Nin’an (1166–1169)", "Kaō (1169–1171)", "Shōan (1171–1175)", "Angen (1175–1177)", "Jishō (1177–1181)", "Yōwa (1181–1182)", "Juei (1182–1184)", "Genryaku (1184–1185)", "Bunji (1185–1190)", "Kenkyū (1190–1199)", "Shōji (1199–1201)", "Kennin (1201–1204)", "Genkyū (1204–1206)", "Ken’ei (1206–1207)", "Jōgen (1207–1211)", "Kenryaku (1211–1213)", "Kenpō (1213–1219)", "Jōkyū (1219–1222)", "Jōō (1222–1224)", "Gennin (1224–1225)", "Karoku (1225–1227)", "Antei (1227–1229)", "Kanki (1229–1232)", "Jōei (1232–1233)", "Tenpuku (1233–1234)", "Bunryaku (1234–1235)", "Katei (1235–1238)", "Ryakunin (1238–1239)", "En’ō (1239–1240)", "Ninji (1240–1243)", "Kangen (1243–1247)", "Hōji (1247–1249)", "Kenchō (1249–1256)", "Kōgen (1256–1257)", "Shōka (1257–1259)", "Shōgen (1259–1260)", "Bun’ō (1260–1261)", "Kōchō (1261–1264)", "Bun’ei (1264–1275)", "Kenji (1275–1278)", "Kōan (1278–1288)", "Shōō (1288–1293)", "Einin (1293–1299)", "Shōan (1299–1302)", "Kengen (1302–1303)", "Kagen (1303–1306)", "Tokuji (1306–1308)", "Enkyō (1308–1311)", "Ōchō (1311–1312)", "Shōwa (1312–1317)", "Bunpō (1317–1319)", "Genō (1319–1321)", "Genkō (1321–1324)", "Shōchū (1324–1326)", "Karyaku (1326–1329)", "Gentoku (1329–1331)", "Genkō (1331–1334)", "Kenmu (1334–1336)", "Engen (1336–1340)", "Kōkoku (1340–1346)", "Shōhei (1346–1370)", "Kentoku (1370–1372)", "Bunchū (1372–1375)", "Tenju (1375–1379)", "Kōryaku (1379–1381)", "Kōwa (1381–1384)", "Genchū (1384–1392)", "Meitoku (1384–1387)", "Kakei (1387–1389)", "Kōō (1389–1390)", "Meitoku (1390–1394)", "Ōei (1394–1428)", "Shōchō (1428–1429)", "Eikyō (1429–1441)", "Kakitsu (1441–1444)", "Bun’an (1444–1449)", "Hōtoku (1449–1452)", "Kyōtoku (1452–1455)", "Kōshō (1455–1457)", "Chōroku (1457–1460)", "Kanshō (1460–1466)", "Bunshō (1466–1467)", "Ōnin (1467–1469)", "Bunmei (1469–1487)", "Chōkyō (1487–1489)", "Entoku (1489–1492)", "Meiō (1492–1501)", "Bunki (1501–1504)", "Eishō (1504–1521)", "Taiei (1521–1528)", "Kyōroku (1528–1532)", "Tenbun (1532–1555)", "Kōji (1555–1558)", "Eiroku (1558–1570)", "Genki (1570–1573)", "Tenshō (1573–1592)", "Bunroku (1592–1596)", "Keichō (1596–1615)", "Genna (1615–1624)", "Kan’ei (1624–1644)", "Shōho (1644–1648)", "Keian (1648–1652)", "Jōō (1652–1655)", "Meireki (1655–1658)", "Manji (1658–1661)", "Kanbun (1661–1673)", "Enpō (1673–1681)", "Tenna (1681–1684)", "Jōkyō (1684–1688)", "Genroku (1688–1704)", "Hōei (1704–1711)", "Shōtoku (1711–1716)", "Kyōhō (1716–1736)", "Genbun (1736–1741)", "Kanpō (1741–1744)", "Enkyō (1744–1748)", "Kan’en (1748–1751)", "Hōreki (1751–1764)", "Meiwa (1764–1772)", "An’ei (1772–1781)", "Tenmei (1781–1789)", "Kansei (1789–1801)", "Kyōwa (1801–1804)", "Bunka (1804–1818)", "Bunsei (1818–1830)", "Tenpō (1830–1844)", "Kōka (1844–1848)", "Kaei (1848–1854)", "Ansei (1854–1860)", "Man’en (1860–1861)", "Bunkyū (1861–1864)", "Genji (1864–1865)", "Keiō (1865–1868)", "Meiji", "Taishō", "Shōwa", "Heisei" ]
        },
        quarterNames: _gpua286,
        fields: _gpua324
    },
    persian: {
        dateFormats: _gpua314,
        datePartsOrder: "ymd",
        dateIntervalFormats: _gpua318,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _gpua302,
        dayPeriods: _gpua312,
        monthNames: {
            format: _gpua291,
            standAlone: _gpua291
        },
        eraNames: {
            wide: [ "AP" ],
            abbreviated: [ "AP" ]
        },
        quarterNames: _gpua286,
        fields: _gpua324
    },
    roc: {
        dateFormats: _gpua314,
        datePartsOrder: "ymd",
        dateIntervalFormats: _gpua318,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _gpua302,
        dayPeriods: _gpua312,
        monthNames: _gpua308,
        eraNames: {
            wide: [ "avant RdC", "RdC" ],
            abbreviated: [ "avant RdC", "RdC" ]
        },
        quarterNames: _gpua286,
        fields: _gpua324
    },
    islamicc: _gpua325
};

inter.pluralRule = function(n) {
    var i = Math.floor(Math.abs(n));
    if (typeof n === "string") n = parseInt(n, 10);
    if (i === 0 || i === 1) return "one";
    return "other";
};

inter.renderDigitsOrdinal = function(n) {
    if (n < 0) return "−" + this.renderDigitsOrdinal(-n);
    if (n >= 0) return this.renderDigitsOrdinalMasculine(n);
};

inter.renderSpelloutNumbering = function(n) {
    if (n < 0) return "−" + this.renderSpelloutNumbering(-n);
    if (n >= 0) return this.renderSpelloutCardinalMasculine(n);
};

inter.renderArmenianUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderArmenianUpper(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e4) return this.renderNumber(n, "#,##0");
    if (n >= 9e3) return "Ք" + (n === 9e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 8e3) return "Փ" + (n === 8e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 7e3) return "Ւ" + (n === 7e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 6e3) return "Ց" + (n === 6e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 5e3) return "Ր" + (n === 5e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 4e3) return "Տ" + (n === 4e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 3e3) return "Վ" + (n === 3e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 2e3) return "Ս" + (n === 2e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 1e3) return "Ռ" + (n === 1e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 900) return "Ջ" + (n === 900 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 800) return "Պ" + (n === 800 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 700) return "Չ" + (n === 700 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 600) return "Ո" + (n === 600 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 500) return "Շ" + (n === 500 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 400) return "Ն" + (n === 400 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 300) return "Յ" + (n === 300 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 200) return "Մ" + (n === 200 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 100) return "Ճ" + (n === 100 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 90) return "Ղ" + (n === 90 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 80) return "Ձ" + (n === 80 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 70) return "Հ" + (n === 70 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 60) return "Կ" + (n === 60 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 50) return "Ծ" + (n === 50 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 40) return "Խ" + (n === 40 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 30) return "Լ" + (n === 30 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 20) return "Ի" + (n === 20 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 10) return "Ժ" + (n === 10 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 9) return "Թ";
    if (n >= 8) return "Ը";
    if (n >= 7) return "Է";
    if (n >= 6) return "Զ";
    if (n >= 5) return "Ե";
    if (n >= 4) return "Դ";
    if (n >= 3) return "Գ";
    if (n >= 2) return "Բ";
    if (n >= 1) return "Ա";
    if (n >= 0) return "0";
};

inter.renderArmenianLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderArmenianLower(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e4) return this.renderNumber(n, "#,##0");
    if (n >= 9e3) return "ք" + (n === 9e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 8e3) return "փ" + (n === 8e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 7e3) return "ւ" + (n === 7e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 6e3) return "ց" + (n === 6e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 5e3) return "ր" + (n === 5e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 4e3) return "տ" + (n === 4e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 3e3) return "վ" + (n === 3e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 2e3) return "ս" + (n === 2e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 1e3) return "ռ" + (n === 1e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 900) return "ջ" + (n === 900 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 800) return "պ" + (n === 800 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 700) return "չ" + (n === 700 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 600) return "ո" + (n === 600 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 500) return "շ" + (n === 500 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 400) return "ն" + (n === 400 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 300) return "յ" + (n === 300 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 200) return "մ" + (n === 200 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 100) return "ճ" + (n === 100 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 90) return "ղ" + (n === 90 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 80) return "ձ" + (n === 80 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 70) return "հ" + (n === 70 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 60) return "կ" + (n === 60 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 50) return "ծ" + (n === 50 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 40) return "խ" + (n === 40 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 30) return "լ" + (n === 30 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 20) return "ի" + (n === 20 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 10) return "ժ" + (n === 10 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 9) return "թ";
    if (n >= 8) return "ը";
    if (n >= 7) return "է";
    if (n >= 6) return "զ";
    if (n >= 5) return "ե";
    if (n >= 4) return "դ";
    if (n >= 3) return "գ";
    if (n >= 2) return "բ";
    if (n >= 1) return "ա";
    if (n >= 0) return "0";
};

inter.renderCyrillicLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderCyrillicLower(-n);
    if (isFractional && n > 1) return this.renderCyrillicLower(Math.floor(n)) + "." + this.renderCyrillicLower(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e15) return "҂҂҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e15)) + (n === 1e15 ? "" : " " + this.renderCyrillicLower(n % 1e15));
    if (n >= 1e12) return "҂҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e12)) + (n === 1e12 ? "" : " " + this.renderCyrillicLower(n % 1e12));
    if (n >= 1e9) return "҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e9)) + (n === 1e9 ? "" : " " + this.renderCyrillicLower(n % 1e9));
    if (n >= 1e6) return "҂҂" + this.renderCyrillicLower(Math.floor(n / 1e6)) + (n === 1e6 ? "" : " " + this.renderCyrillicLower(n % 1e6));
    if (n >= 11e3) return this.renderCyrillicLowerThousands(Math.floor(n / 1e4)) + (n === 11e3 ? "" : " " + this.renderCyrillicLower(n % 1e4));
    if (n >= 1e4) return "҂" + this.renderCyrillicLower(Math.floor(n / 1e4)) + (n === 1e4 ? "" : " " + this.renderCyrillicLower(n % 1e4));
    if (n >= 1e3) return "҂" + this.renderCyrillicLower110(Math.floor(n / 1e3)) + this.renderCyrillicLowerPost(n % 1e3);
    if (n >= 900) return "ц" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 801) return "ѿ" + this.renderCyrillicLower(n % 100);
    if (n >= 800) return "ѿ҃";
    if (n >= 700) return "ѱ" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 600) return "х" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 500) return "ф" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 400) return "у" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 300) return "т" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 200) return "с" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 100) return "р" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 90) return "ч" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 80) return "п" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 70) return "ѻ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 60) return "ѯ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 50) return "н" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 40) return "м" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 30) return "л" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 20) return "к" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 19) return "ѳ҃і";
    if (n >= 18) return "и҃і";
    if (n >= 17) return "з҃і";
    if (n >= 16) return "ѕ҃і";
    if (n >= 15) return "є҃і";
    if (n >= 14) return "д҃і";
    if (n >= 13) return "г҃і";
    if (n >= 12) return "в҃і";
    if (n >= 11) return "а҃і";
    if (n >= 1) return this.renderCyrillicLower110(n) + "҃";
    if (n >= 0) return "0҃";
};

inter.renderEthiopic = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderEthiopic(-n);
    if (isFractional && n > 1) return this.renderEthiopic(Math.floor(n)) + "፡" + this.renderEthiopic(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,###0");
    if (n >= 2e16) return this.renderEthiopic(Math.floor(n / 1e16)) + "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 1e16) return "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 2e12) return this.renderEthiopic(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1e12) return "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 2e8) return this.renderEthiopic(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1e8) return "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 2e4) return this.renderEthiopic(Math.floor(n / 1e4)) + "፼" + (n === 2e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 1e4) return "፼" + (n === 1e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 200) return this.renderEthiopic(Math.floor(n / 100)) + "፻" + (n === 200 ? "" : this.renderEthiopic(n % 100));
    if (n >= 100) return "፻" + (n === 100 ? "" : this.renderEthiopic(n % 100));
    if (n >= 90) return "፺" + (n === 90 ? "" : this.renderEthiopic(n % 10));
    if (n >= 80) return "፹" + (n === 80 ? "" : this.renderEthiopic(n % 10));
    if (n >= 70) return "፸" + (n === 70 ? "" : this.renderEthiopic(n % 10));
    if (n >= 60) return "፷" + (n === 60 ? "" : this.renderEthiopic(n % 10));
    if (n >= 50) return "፶" + (n === 50 ? "" : this.renderEthiopic(n % 10));
    if (n >= 40) return "፵" + (n === 40 ? "" : this.renderEthiopic(n % 10));
    if (n >= 30) return "፴" + (n === 30 ? "" : this.renderEthiopic(n % 10));
    if (n >= 20) return "፳" + (n === 20 ? "" : this.renderEthiopic(n % 10));
    if (n >= 10) return "፲" + (n === 10 ? "" : this.renderEthiopic(n % 10));
    if (n >= 9) return "፱";
    if (n >= 8) return "፰";
    if (n >= 7) return "፯";
    if (n >= 6) return "፮";
    if (n >= 5) return "፭";
    if (n >= 4) return "፬";
    if (n >= 3) return "፫";
    if (n >= 2) return "፪";
    if (n >= 1) return "፩";
    if (n >= 0) return "ባዶ";
};

inter.renderGeorgian = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGeorgian(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 2e4) return this.renderNumber(n, "#,##0");
    if (n >= 1e4) return "ჯ" + (n === 1e4 ? "" : this.renderGeorgian(n % 1e4));
    if (n >= 9e3) return "ჵ" + (n === 9e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 8e3) return "ჴ" + (n === 8e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 7e3) return "ხ" + (n === 7e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 6e3) return "ჭ" + (n === 6e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 5e3) return "წ" + (n === 5e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 4e3) return "ძ" + (n === 4e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 3e3) return "ც" + (n === 3e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 2e3) return "ჩ" + (n === 2e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 1e3) return "შ" + (n === 1e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 900) return "ყ" + (n === 900 ? "" : this.renderGeorgian(n % 100));
    if (n >= 800) return "ღ" + (n === 800 ? "" : this.renderGeorgian(n % 100));
    if (n >= 700) return "ქ" + (n === 700 ? "" : this.renderGeorgian(n % 100));
    if (n >= 600) return "ფ" + (n === 600 ? "" : this.renderGeorgian(n % 100));
    if (n >= 500) return "ჳ" + (n === 500 ? "" : this.renderGeorgian(n % 100));
    if (n >= 400) return "უ" + (n === 400 ? "" : this.renderGeorgian(n % 100));
    if (n >= 300) return "ტ" + (n === 300 ? "" : this.renderGeorgian(n % 100));
    if (n >= 200) return "ს" + (n === 200 ? "" : this.renderGeorgian(n % 100));
    if (n >= 100) return "რ" + (n === 100 ? "" : this.renderGeorgian(n % 100));
    if (n >= 90) return "ჟ" + (n === 90 ? "" : this.renderGeorgian(n % 10));
    if (n >= 80) return "პ" + (n === 80 ? "" : this.renderGeorgian(n % 10));
    if (n >= 70) return "ო" + (n === 70 ? "" : this.renderGeorgian(n % 10));
    if (n >= 60) return "ჲ" + (n === 60 ? "" : this.renderGeorgian(n % 10));
    if (n >= 50) return "ნ" + (n === 50 ? "" : this.renderGeorgian(n % 10));
    if (n >= 40) return "მ" + (n === 40 ? "" : this.renderGeorgian(n % 10));
    if (n >= 30) return "ლ" + (n === 30 ? "" : this.renderGeorgian(n % 10));
    if (n >= 20) return "კ" + (n === 20 ? "" : this.renderGeorgian(n % 10));
    if (n >= 10) return "ი" + (n === 10 ? "" : this.renderGeorgian(n % 10));
    if (n >= 9) return "თ";
    if (n >= 8) return "ჱ";
    if (n >= 7) return "ზ";
    if (n >= 6) return "ვ";
    if (n >= 5) return "ე";
    if (n >= 4) return "დ";
    if (n >= 3) return "გ";
    if (n >= 2) return "ბ";
    if (n >= 1) return "ა";
    if (n >= 0) return this.renderNumber(n, "#,##0");
};

inter.renderGreekUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGreekUpper(-n);
    if (isFractional && n > 1) return this.renderGreekUpper(Math.floor(n)) + "." + this.renderGreekUpper(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 0) return this.renderGreekNumeralMajuscules(n) + "´";
};

inter.renderGreekLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGreekLower(-n);
    if (isFractional && n > 1) return this.renderGreekLower(Math.floor(n)) + "." + this.renderGreekLower(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 0) return this.renderGreekNumeralMinuscules(n) + "´";
};

inter.renderSpelloutCardinal = function(n) {
    if (n < 0) return "−" + this.renderSpelloutCardinal(-n);
    if (n >= 0) return this.renderNumber(n, "#,##0.#");
};

inter.renderHebrew = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderHebrew(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1000001) return this.renderNumber(n, "#,##0");
    if (n >= 1e6) return "אלף אלפים";
    if (n >= 3001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 3001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 3e3) return this.renderHebrew(Math.floor(n / 1e3)) + " אלפים";
    if (n >= 2001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 2001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 2e3) return "אלפיים";
    if (n >= 1001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 1001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 1e3) return "אלף";
    if (n >= 901) return "תתק" + this.renderHebrew099(n % 100);
    if (n >= 900) return "תת״ק";
    if (n >= 801) return "תת" + this.renderHebrew099(n % 100);
    if (n >= 800) return "ת״ת";
    if (n >= 745) return "תש" + this.renderHebrew099(n % 100);
    if (n >= 744) return "תשד״מ";
    if (n >= 701) return "תש" + this.renderHebrew099(n % 100);
    if (n >= 700) return "ת״ש";
    if (n >= 699) return "תר" + this.renderHebrew099(n % 100);
    if (n >= 698) return "תרח״צ";
    if (n >= 601) return "תר" + this.renderHebrew099(n % 100);
    if (n >= 600) return "ת״ר";
    if (n >= 501) return "תק" + this.renderHebrew099(n % 100);
    if (n >= 500) return "ת״ק";
    if (n >= 400) return "ת" + this.renderHebrew099(n % 100);
    if (n >= 345) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 344) return "שד״מ";
    if (n >= 305) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 304) return "ד״ש";
    if (n >= 300) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 299) return "ר" + this.renderHebrew099(n % 100);
    if (n >= 298) return "רח״צ";
    if (n >= 200) return "ר" + this.renderHebrew099(n % 100);
    if (n >= 100) return "ק" + this.renderHebrew099(n % 100);
    if (n >= 91) return "צ״" + this.renderHebrewItem(n % 10);
    if (n >= 90) return "צ׳";
    if (n >= 81) return "פ״" + this.renderHebrewItem(n % 10);
    if (n >= 80) return "פ׳";
    if (n >= 71) return "ע״" + this.renderHebrewItem(n % 10);
    if (n >= 70) return "ע׳";
    if (n >= 61) return "ס״" + this.renderHebrewItem(n % 10);
    if (n >= 60) return "ס׳";
    if (n >= 51) return "נ״" + this.renderHebrewItem(n % 10);
    if (n >= 50) return "נ׳";
    if (n >= 41) return "מ״" + this.renderHebrewItem(n % 10);
    if (n >= 40) return "מ׳";
    if (n >= 31) return "ל״" + this.renderHebrewItem(n % 10);
    if (n >= 30) return "ל׳";
    if (n >= 21) return "כ״" + this.renderHebrewItem(n % 10);
    if (n >= 20) return "כ׳";
    if (n >= 17) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "ט״ז";
    if (n >= 15) return "ט״ו";
    if (n >= 11) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 0) return this.renderHebrewItem(n) + "׳";
};

inter.renderRomanUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderRomanUpper(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 4e5) return this.renderNumber(n, "#,##0");
    if (n >= 3e5) return "ↈↈↈ" + (n === 3e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 2e5) return "ↈↈ" + (n === 2e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 1e5) return "ↈ" + (n === 1e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 9e4) return "ↂↈ" + (n === 9e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 8e4) return "ↇↂↂↂ" + (n === 8e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 7e4) return "ↇↂↂ" + (n === 7e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 6e4) return "ↇↂ" + (n === 6e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 5e4) return "ↇ" + (n === 5e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 4e4) return "ↂↇ" + (n === 4e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 3e4) return "ↂↂↂ" + (n === 3e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 2e4) return "ↂↂ" + (n === 2e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 1e4) return "ↂ" + (n === 1e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 9e3) return "Mↂ" + (n === 9e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 8e3) return "ↁMMM" + (n === 8e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 7e3) return "ↁMM" + (n === 7e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 6e3) return "ↁM" + (n === 6e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 5e3) return "ↁ" + (n === 5e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 4e3) return "Mↁ" + (n === 4e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 3e3) return "MMM" + (n === 3e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 2e3) return "MM" + (n === 2e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 1e3) return "M" + (n === 1e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 900) return "CM" + (n === 900 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 800) return "DCCC" + (n === 800 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 700) return "DCC" + (n === 700 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 600) return "DC" + (n === 600 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 500) return "D" + (n === 500 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 400) return "CD" + (n === 400 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 300) return "CCC" + (n === 300 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 200) return "CC" + (n === 200 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 100) return "C" + (n === 100 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 90) return "XC" + (n === 90 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 80) return "LXXX" + (n === 80 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 70) return "LXX" + (n === 70 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 60) return "LX" + (n === 60 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 50) return "L" + (n === 50 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 40) return "XL" + (n === 40 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 30) return "XXX" + (n === 30 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 20) return "XX" + (n === 20 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 10) return "X" + (n === 10 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 9) return "IX";
    if (n >= 8) return "VIII";
    if (n >= 7) return "VII";
    if (n >= 6) return "VI";
    if (n >= 5) return "V";
    if (n >= 4) return "IV";
    if (n >= 3) return "III";
    if (n >= 2) return "II";
    if (n >= 1) return "I";
    if (n >= 0) return "N";
};

inter.renderRomanLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderRomanLower(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 5e3) return this.renderNumber(n, "#,##0");
    if (n >= 4e3) return "mmmm" + (n === 4e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 3e3) return "mmm" + (n === 3e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 2e3) return "mm" + (n === 2e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 1e3) return "m" + (n === 1e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 900) return "cm" + (n === 900 ? "" : this.renderRomanLower(n % 100));
    if (n >= 800) return "dccc" + (n === 800 ? "" : this.renderRomanLower(n % 100));
    if (n >= 700) return "dcc" + (n === 700 ? "" : this.renderRomanLower(n % 100));
    if (n >= 600) return "dc" + (n === 600 ? "" : this.renderRomanLower(n % 100));
    if (n >= 500) return "d" + (n === 500 ? "" : this.renderRomanLower(n % 100));
    if (n >= 400) return "cd" + (n === 400 ? "" : this.renderRomanLower(n % 100));
    if (n >= 300) return "ccc" + (n === 300 ? "" : this.renderRomanLower(n % 100));
    if (n >= 200) return "cc" + (n === 200 ? "" : this.renderRomanLower(n % 100));
    if (n >= 100) return "c" + (n === 100 ? "" : this.renderRomanLower(n % 100));
    if (n >= 90) return "xc" + (n === 90 ? "" : this.renderRomanLower(n % 10));
    if (n >= 80) return "lxxx" + (n === 80 ? "" : this.renderRomanLower(n % 10));
    if (n >= 70) return "lxx" + (n === 70 ? "" : this.renderRomanLower(n % 10));
    if (n >= 60) return "lx" + (n === 60 ? "" : this.renderRomanLower(n % 10));
    if (n >= 50) return "l" + (n === 50 ? "" : this.renderRomanLower(n % 10));
    if (n >= 40) return "xl" + (n === 40 ? "" : this.renderRomanLower(n % 10));
    if (n >= 30) return "xxx" + (n === 30 ? "" : this.renderRomanLower(n % 10));
    if (n >= 20) return "xx" + (n === 20 ? "" : this.renderRomanLower(n % 10));
    if (n >= 10) return "x" + (n === 10 ? "" : this.renderRomanLower(n % 10));
    if (n >= 9) return "ix";
    if (n >= 8) return "viii";
    if (n >= 7) return "vii";
    if (n >= 6) return "vi";
    if (n >= 5) return "v";
    if (n >= 4) return "iv";
    if (n >= 3) return "iii";
    if (n >= 2) return "ii";
    if (n >= 1) return "i";
    if (n >= 0) return "n";
};

inter.renderTamil = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderTamil(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e8) return this.renderNumber(n, "#,##,##0");
    if (n >= 1e6) return this.renderTamil(Math.floor(n / 1e6)) + "௱௲" + (n === 1e6 ? "" : this.renderTamilThousands(n % 1e6));
    if (n >= 2e3) return this.renderTamil(Math.floor(n / 1e3)) + "௲" + (n === 2e3 ? "" : this.renderTamil(n % 1e3));
    if (n >= 1e3) return "௲" + (n === 1e3 ? "" : this.renderTamil(n % 1e3));
    if (n >= 200) return this.renderTamil(Math.floor(n / 100)) + "௱" + (n === 200 ? "" : this.renderTamil(n % 100));
    if (n >= 100) return "௱" + (n === 100 ? "" : this.renderTamil(n % 100));
    if (n >= 20) return this.renderTamil(Math.floor(n / 10)) + "௰" + (n === 20 ? "" : this.renderTamil(n % 10));
    if (n >= 10) return "௰" + (n === 10 ? "" : this.renderTamil(n % 10));
    if (n >= 9) return "௯";
    if (n >= 8) return "௮";
    if (n >= 7) return "௭";
    if (n >= 6) return "௬";
    if (n >= 5) return "௫";
    if (n >= 4) return "௪";
    if (n >= 3) return "௩";
    if (n >= 2) return "௨";
    if (n >= 1) return "௧";
    if (n >= 0) return "௦";
};

inter.renderDigitsOrdinalMasculine = function(n) {
    if (n < 0) return "−" + this.renderDigitsOrdinalMasculine(-n);
    if (n >= 0) return this.renderNumber(n, "#,##0") + this.renderDordMascabbrev(n);
};

inter.renderSpelloutCardinalMasculine = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "moins " + this.renderSpelloutCardinalMasculine(-n);
    if (isFractional && n > 1) return this.renderSpelloutCardinalMasculine(Math.floor(n)) + " virgule " + this.renderSpelloutCardinalMasculine(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 2e15) return this.renderSpelloutLeading(Math.floor(n / 1e15)) + " billiards" + (n === 2e15 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e15));
    if (n >= 1e15) return "un billiard" + (n === 1e15 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e15));
    if (n >= 2e12) return this.renderSpelloutLeading(Math.floor(n / 1e12)) + " billions" + (n === 2e12 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e12));
    if (n >= 1e12) return "un billion" + (n === 1e12 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e12));
    if (n >= 2e9) return this.renderSpelloutLeading(Math.floor(n / 1e9)) + " milliards" + (n === 2e9 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e9));
    if (n >= 1e9) return "un milliard" + (n === 1e9 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e9));
    if (n >= 2e6) return this.renderSpelloutLeading(Math.floor(n / 1e6)) + " millions" + (n === 2e6 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e6));
    if (n >= 1e6) return "un million" + (n === 1e6 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e6));
    if (n >= 2e3) return this.renderSpelloutLeading(Math.floor(n / 1e3)) + " mille" + (n === 2e3 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e3));
    if (n >= 1e3) return "mille" + (n === 1e3 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e3));
    if (n >= 200) return this.renderSpelloutCardinalMasculine(Math.floor(n / 100)) + " cent" + this.renderCentsM(n % 100);
    if (n >= 100) return "cent" + (n === 100 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 100));
    if (n >= 80) return "quatre-vingt" + this.renderSubcentsM(n % 10);
    if (n >= 60) return "soixante" + (n === 60 ? "" : "-" + this.renderEtUn(n % 10));
    if (n >= 50) return "cinquante" + (n === 50 ? "" : "-" + this.renderEtUn(n % 10));
    if (n >= 40) return "quarante" + (n === 40 ? "" : "-" + this.renderEtUn(n % 10));
    if (n >= 30) return "trente" + (n === 30 ? "" : "-" + this.renderEtUn(n % 10));
    if (n >= 20) return "vingt" + (n === 20 ? "" : "-" + this.renderEtUn(n % 10));
    if (n >= 17) return "dix-" + this.renderSpelloutCardinalMasculine(n % 10);
    if (n >= 16) return "seize";
    if (n >= 15) return "quinze";
    if (n >= 14) return "quatorze";
    if (n >= 13) return "treize";
    if (n >= 12) return "douze";
    if (n >= 11) return "onze";
    if (n >= 10) return "dix";
    if (n >= 9) return "neuf";
    if (n >= 8) return "huit";
    if (n >= 7) return "sept";
    if (n >= 6) return "six";
    if (n >= 5) return "cinq";
    if (n >= 4) return "quatre";
    if (n >= 3) return "trois";
    if (n >= 2) return "deux";
    if (n >= 1) return "un";
    if (n >= 0) return "zéro";
};

inter.renderCyrillicLowerThousands = function(n) {
    if (n >= 900) return "҂ц" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 800) return "҂ѿ" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 700) return "҂ѱ" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 600) return "҂х" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 500) return "҂ф" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 400) return "҂у" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 300) return "҂т" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 200) return "҂с" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 100) return "҂р" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 90) return "҂ч" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 80) return "҂п" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 70) return "҂ѻ" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 60) return "҂ѯ" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 50) return "҂н" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 40) return "҂м" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 30) return "҂л" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 20) return "҂к" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 19) return "҂ѳ҃҂і";
    if (n >= 18) return "҂и҃҂і";
    if (n >= 17) return "҂з҃҂і";
    if (n >= 16) return "҂ѕ҃҂і";
    if (n >= 15) return "҂є҃҂і";
    if (n >= 14) return "҂д҃҂і";
    if (n >= 13) return "҂г҃҂і";
    if (n >= 12) return "҂в҃҂і";
    if (n >= 11) return "҂а҃҂і";
    if (n >= 10) return "҃҂і";
    if (n >= 9) return "҃҂ѳ";
    if (n >= 8) return "҃҂и";
    if (n >= 7) return "҃҂з";
    if (n >= 6) return "҃҂ѕ";
    if (n >= 5) return "҃҂є";
    if (n >= 4) return "҃҂д";
    if (n >= 3) return "҃҂г";
    if (n >= 2) return "҃҂в";
    if (n >= 1) return "҃҂а";
    if (n >= 0) return "҃";
};

inter.renderCyrillicLower110 = function(n) {
    if (n >= 10) return "і";
    if (n >= 9) return "ѳ";
    if (n >= 8) return "и";
    if (n >= 7) return "з";
    if (n >= 6) return "ѕ";
    if (n >= 5) return "є";
    if (n >= 4) return "д";
    if (n >= 3) return "г";
    if (n >= 2) return "в";
    if (n >= 1) return "а";
};

inter.renderCyrillicLowerPost = function(n) {
    if (n >= 1) return this.renderCyrillicLower(n);
    if (n >= 0) return "҃";
};

inter.renderCyrillicLowerFinal = function(n) {
    if (n >= 91) return "ч" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 90) return "҃ч";
    if (n >= 81) return "п" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 80) return "҃п";
    if (n >= 71) return "ѻ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 70) return "҃ѻ";
    if (n >= 61) return "ѯ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 60) return "҃ѯ";
    if (n >= 51) return "н" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 50) return "҃н";
    if (n >= 41) return "м" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 40) return "҃м";
    if (n >= 31) return "л" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 30) return "҃л";
    if (n >= 21) return "к" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 20) return "҃к";
    if (n >= 19) return "ѳ҃і";
    if (n >= 18) return "и҃і";
    if (n >= 17) return "з҃і";
    if (n >= 16) return "ѕ҃і";
    if (n >= 15) return "є҃і";
    if (n >= 14) return "д҃і";
    if (n >= 13) return "г҃і";
    if (n >= 12) return "в҃і";
    if (n >= 11) return "а҃і";
    if (n >= 1) return "҃" + this.renderCyrillicLower110(n);
    if (n >= 0) return "҃";
};

inter.renderEthiopicP3 = function(n) {
    if (n >= 1e12) return this.renderEthiopic(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1) return "፼፼፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼፼፼";
};

inter.renderEthiopicP2 = function(n) {
    if (n >= 1e8) return this.renderEthiopic(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1) return "፼፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼፼";
};

inter.renderEthiopicP1 = function(n) {
    if (n >= 1e4) return this.renderEthiopic(Math.floor(n / 1e4)) + "፼" + (n === 1e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 1) return "፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼";
};

inter.renderGreekNumeralMajuscules = function(n) {
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e16) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e16)) + "ΜΜΜΜ" + (n === 1e16 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e16));
    if (n >= 1e12) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e12)) + "ΜΜΜ" + (n === 1e12 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e12));
    if (n >= 1e8) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e8)) + "ΜΜ" + (n === 1e8 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e8));
    if (n >= 1e4) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e4)) + "Μ" + (n === 1e4 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e4));
    if (n >= 1e3) return "͵" + this.renderGreekNumeralMajuscules(Math.floor(n / 1e3)) + (n === 1e3 ? "" : this.renderGreekNumeralMajuscules(n % 1e3));
    if (n >= 900) return "Ϡ" + (n === 900 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 800) return "Ω" + (n === 800 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 700) return "Ψ" + (n === 700 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 600) return "Χ" + (n === 600 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 500) return "Φ" + (n === 500 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 400) return "Υ" + (n === 400 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 300) return "Τ" + (n === 300 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 200) return "Σ" + (n === 200 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 100) return "Ρ" + (n === 100 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 90) return "Ϟ" + (n === 90 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 80) return "Π" + (n === 80 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 70) return "Ο" + (n === 70 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 60) return "Ξ" + (n === 60 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 50) return "Ν" + (n === 50 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 40) return "Μ" + (n === 40 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 30) return "Λ" + (n === 30 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 20) return "Κ" + (n === 20 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 10) return "Ι" + (n === 10 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 9) return "Θ";
    if (n >= 8) return "Η";
    if (n >= 7) return "Ζ";
    if (n >= 6) return "Ϝ";
    if (n >= 5) return "Ε";
    if (n >= 4) return "Δ";
    if (n >= 3) return "Γ";
    if (n >= 2) return "Β";
    if (n >= 1) return "Α";
    if (n >= 0) return "𐆊";
};

inter.renderGreekNumeralMinuscules = function(n) {
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e16) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e16)) + "μμμμ" + (n === 1e16 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e16));
    if (n >= 1e12) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e12)) + "μμμ" + (n === 1e12 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e12));
    if (n >= 1e8) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e8)) + "μμ" + (n === 1e8 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e8));
    if (n >= 1e4) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e4)) + "μ" + (n === 1e4 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e4));
    if (n >= 1e3) return "͵" + this.renderGreekNumeralMinuscules(Math.floor(n / 1e3)) + (n === 1e3 ? "" : this.renderGreekNumeralMinuscules(n % 1e3));
    if (n >= 900) return "ϡ" + (n === 900 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 800) return "ω" + (n === 800 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 700) return "ψ" + (n === 700 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 600) return "χ" + (n === 600 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 500) return "φ" + (n === 500 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 400) return "υ" + (n === 400 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 300) return "τ" + (n === 300 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 200) return "σ" + (n === 200 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 100) return "ρ" + (n === 100 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 90) return "ϟ" + (n === 90 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 80) return "π" + (n === 80 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 70) return "ο" + (n === 70 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 60) return "ξ" + (n === 60 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 50) return "ν" + (n === 50 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 40) return "μ" + (n === 40 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 30) return "λ" + (n === 30 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 20) return "κ" + (n === 20 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 10) return "ι" + (n === 10 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 9) return "θ";
    if (n >= 8) return "η";
    if (n >= 7) return "ζ";
    if (n >= 6) return "ϝ";
    if (n >= 5) return "ε";
    if (n >= 4) return "δ";
    if (n >= 3) return "γ";
    if (n >= 2) return "β";
    if (n >= 1) return "α";
    if (n >= 0) return "𐆊";
};

inter.renderHebrewThousands = function(n) {
    if (n >= 401) return this.renderHebrew(n) + "׳";
    if (n >= 100) return this.renderHebrew(n) + (n === 100 ? "" : "׳");
    if (n >= 10) return this.renderHebrew(n) + (n === 10 ? "" : "׳");
    if (n >= 0) return this.renderHebrew(n);
};

inter.renderHebrew099 = function(n) {
    if (n >= 91) return "צ״" + this.renderHebrewItem(n % 10);
    if (n >= 90) return "״צ";
    if (n >= 81) return "פ״" + this.renderHebrewItem(n % 10);
    if (n >= 80) return "״פ";
    if (n >= 71) return "ע״" + this.renderHebrewItem(n % 10);
    if (n >= 70) return "״ע";
    if (n >= 61) return "ס״" + this.renderHebrewItem(n % 10);
    if (n >= 60) return "״ס";
    if (n >= 51) return "נ״" + this.renderHebrewItem(n % 10);
    if (n >= 50) return "״נ";
    if (n >= 41) return "מ״" + this.renderHebrewItem(n % 10);
    if (n >= 40) return "״מ";
    if (n >= 31) return "ל״" + this.renderHebrewItem(n % 10);
    if (n >= 30) return "״ל";
    if (n >= 21) return "כ״" + this.renderHebrewItem(n % 10);
    if (n >= 20) return "״כ";
    if (n >= 17) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "ט״ז";
    if (n >= 15) return "ט״ו";
    if (n >= 11) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 1) return "״" + this.renderHebrewItem(n);
    if (n >= 0) return "׳";
};

inter.renderHebrewItem = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderHebrewItem(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 2100) return this.renderNumber(n, "#,##0");
    if (n >= 2e3) return "תתתתת" + (n === 2e3 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1900) return "תתתתש" + (n === 1900 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1800) return "תתתתר" + (n === 1800 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1700) return "תתתתק" + (n === 1700 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1600) return "תתתת" + (n === 1600 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1500) return "תתתש" + (n === 1500 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1400) return "תתתר" + (n === 1400 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1300) return "תתתק" + (n === 1300 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1200) return "תתת" + (n === 1200 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1100) return "תתש" + (n === 1100 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1e3) return "תתר" + (n === 1e3 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 900) return "תתק" + (n === 900 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 800) return "תת" + (n === 800 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 745) return "תש" + this.renderHebrewItem(n % 100);
    if (n >= 744) return "תשדמ";
    if (n >= 700) return "תש" + (n === 700 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 699) return "תר" + this.renderHebrewItem(n % 100);
    if (n >= 698) return "תרחצ";
    if (n >= 600) return "תר" + (n === 600 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 500) return "תק" + (n === 500 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 400) return "ת" + (n === 400 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 345) return "ש" + this.renderHebrewItem(n % 100);
    if (n >= 344) return "שדמ";
    if (n >= 305) return "ש" + this.renderHebrewItem(n % 100);
    if (n >= 304) return "דש";
    if (n >= 300) return "ש" + (n === 300 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 299) return "ר" + this.renderHebrewItem(n % 100);
    if (n >= 298) return "רחצ";
    if (n >= 200) return "ר" + (n === 200 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 100) return "ק" + (n === 100 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 90) return "צ" + (n === 90 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 80) return "פ" + (n === 80 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 70) return "ע" + (n === 70 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 60) return "ס" + (n === 60 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 50) return "נ" + (n === 50 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 40) return "מ" + (n === 40 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 30) return "ל" + (n === 30 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 20) return "כ" + (n === 20 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 17) return "י" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "טז";
    if (n >= 15) return "טו";
    if (n >= 10) return "י" + (n === 10 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 9) return "ט";
    if (n >= 8) return "ח";
    if (n >= 7) return "ז";
    if (n >= 6) return "ו";
    if (n >= 5) return "ה";
    if (n >= 4) return "ד";
    if (n >= 3) return "ג";
    if (n >= 2) return "ב";
    if (n >= 1) return "א";
    if (n >= 0) return "״";
};

inter.renderTamilThousands = function(n) {
    if (n >= 1e3) return this.renderTamilThousands(Math.floor(n / 1e3)) + "௲" + (n === 1e3 ? "" : this.renderTamilThousands(n % 1e3));
    if (n >= 0) return this.renderTamil(n);
};

inter.renderDordMascabbrev = function(n) {
    if (n >= 2) return "e";
    if (n >= 1) return "er";
    if (n >= 0) return "e";
};

inter.renderSpelloutLeading = function(n) {
    if (n >= 1e3) return this.renderSpelloutCardinalMasculine(n);
    if (n >= 200) return this.renderSpelloutLeading(Math.floor(n / 100)) + " cent" + (n === 200 ? "" : " " + this.renderSpelloutLeading(n % 100));
    if (n >= 100) return "cent" + (n === 100 ? "" : " " + this.renderSpelloutLeading(n % 100));
    if (n >= 80) return "quatre-vingt" + (n === 80 ? "" : "-" + this.renderSpelloutLeading(n % 10));
    if (n >= 0) return this.renderSpelloutCardinalMasculine(n);
};

inter.renderCentsM = function(n) {
    if (n >= 1) return " " + this.renderSpelloutCardinalMasculine(n);
    if (n >= 0) return "s";
};

inter.renderSubcentsM = function(n) {
    if (n >= 1) return "-" + this.renderSpelloutCardinalMasculine(n);
    if (n >= 0) return "s";
};

inter.renderEtUn = function(n) {
    if (n >= 12) return this.renderSpelloutCardinalMasculine(n);
    if (n >= 11) return "et-onze";
    if (n >= 2) return this.renderSpelloutCardinalMasculine(n);
    if (n >= 1) return "et-un";
};

inter.renderEthiopicP = function(n) {
    if (n >= 1e16) return this.renderEthiopicP(Math.floor(n / 1e16)) + "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 1e12) return this.renderEthiopicP(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1e8) return this.renderEthiopicP(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1e4) return this.renderEthiopicP(Math.floor(n / 1e4)) + "፼" + (n === 1e4 ? "" : this.renderEthiopicP(n % 1e4));
    if (n >= 1) return this.renderEthiopic(n);
};

inter.timeZones = [].concat(P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[7], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[30], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[34], P.timeZones[-1], {
    id: "America/North_Dakota/Beulah",
    regionId: "021",
    utcStandardOffsetSeconds: -21600,
    displayName: "Beulah [Dakota du Nord]",
    countryId: "US"
}, {
    id: "America/North_Dakota/Center",
    regionId: "021",
    utcStandardOffsetSeconds: -21600,
    displayName: "Center [Dakota du Nord]",
    countryId: "US"
}, P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[42], P.timeZones[-1], P.timeZones[44], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[48], P.timeZones[-1], P.timeZones[50], {
    id: "America/North_Dakota/New_Salem",
    regionId: "021",
    utcStandardOffsetSeconds: -21600,
    displayName: "New Salem, Dakota du Nord",
    countryId: "US"
}, P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones.slice(57, 59), P.timeZones[-1], P.timeZones[60], P.timeZones[-1], P.timeZones[-1], P.timeZones[63], P.timeZones.slice(65, 67), P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones.slice(71, 73), P.timeZones[-1], P.timeZones[-1], P.timeZones.slice(75, 77), P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[80], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones.slice(84, 87), {
    id: "America/Cayman",
    regionId: "029",
    utcStandardOffsetSeconds: -18e3,
    displayName: "Îles Caïmans",
    countryId: "KY"
}, P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[90], {
    id: "America/Barbados",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "Barbade (La)",
    countryId: "BB"
}, P.timeZones[91], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones.slice(96, 99), P.timeZones[-1], P.timeZones[-1], P.timeZones[101], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[109], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones.slice(114, 116), P.timeZones[-1], {
    id: "America/St_Thomas",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "Saint Thomas",
    countryId: "VI"
}, P.timeZones[117], {
    id: "America/St_Kitts",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "Saint-Christophe-et-Niévès",
    countryId: "KN"
}, P.timeZones[118], P.timeZones.slice(121, 123), P.timeZones[-1], P.timeZones[124], P.timeZones[-1], P.timeZones.slice(126, 128), P.timeZones[-1], P.timeZones[129], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[137], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[146], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[150], P.timeZones[-1], P.timeZones.slice(152, 156), P.timeZones[-1], P.timeZones[-1], P.timeZones.slice(158, 160), P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[172], P.timeZones[-1], P.timeZones.slice(174, 178), P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones.slice(182, 184), P.timeZones[-1], P.timeZones.slice(185, 188), P.timeZones[-1], P.timeZones[189], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[195], P.timeZones[-1], P.timeZones[197], P.timeZones[-1], P.timeZones[-1], P.timeZones[200], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[205], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[214], P.timeZones[-1], {
    id: "Africa/Ndjamena",
    regionId: "017",
    utcStandardOffsetSeconds: 3600,
    displayName: "Ndjamena",
    countryId: "TD"
}, P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[224], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[228], P.timeZones[-1], P.timeZones[-1], P.timeZones[231], {
    id: "Europe/Vatican",
    regionId: "039",
    utcStandardOffsetSeconds: 3600,
    displayName: "Vatican",
    countryId: "VA"
}, P.timeZones[232], P.timeZones[-1], P.timeZones[-1], P.timeZones.slice(235, 237), P.timeZones[-1], P.timeZones[238], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[246], P.timeZones[-1], P.timeZones[-1], P.timeZones[249], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[254], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[261], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], {
    id: "Africa/Tripoli",
    regionId: "015",
    utcStandardOffsetSeconds: 7200,
    displayName: "Tripoli [Libye]",
    countryId: "LY"
}, P.timeZones[-1], P.timeZones[-1], P.timeZones[268], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones.slice(273, 277), P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[282], P.timeZones[-1], P.timeZones[-1], P.timeZones.slice(285, 287), P.timeZones[-1], P.timeZones[-1], P.timeZones.slice(289, 291), P.timeZones[-1], P.timeZones[-1], P.timeZones[293], P.timeZones[-1], P.timeZones.slice(295, 302), P.timeZones[-1], P.timeZones[-1], P.timeZones[304], P.timeZones[-1], P.timeZones.slice(306, 310), P.timeZones[-1], P.timeZones.slice(311, 313), P.timeZones[-1], P.timeZones[-1], P.timeZones[315], P.timeZones[-1], P.timeZones[-1], P.timeZones.slice(318, 321), P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones.slice(324, 326), P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[332], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[342], P.timeZones[-1], P.timeZones[344], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[351], P.timeZones[-1], P.timeZones[-1], P.timeZones.slice(354, 358), P.timeZones[-1], P.timeZones[-1], P.timeZones[360], P.timeZones[-1], P.timeZones[362], P.timeZones[-1], P.timeZones[-1], P.timeZones[365], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones.slice(370, 372), P.timeZones[-1], P.timeZones[373], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[396], P.timeZones[-1], P.timeZones[398], P.timeZones[-1], P.timeZones[400], P.timeZones[-1], P.timeZones[-1], P.timeZones[403], P.timeZones[-1], P.timeZones[405], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1]);

inter.territories = [].concat(P.territories.slice(0, 42), P.territories.slice(43, 51), _gpua182, P.territories.slice(51, 80), P.territories.slice(81, 83), _gpua212, P.territories.slice(83, 149), _gpua190, P.territories.slice(149, 156), _gpua183, P.territories.slice(157, 200), _gpua208, _gpua209, P.territories[202], _gpua218, P.territories.slice(204, 236), _gpua184, P.territories.slice(237, 260), P.territories.slice(261, 271), _gpua174, P.territories.slice(272, 285));

inter.regions = [].concat(P.territories.slice(1, 4), P.territories.slice(5, 8), P.territories.slice(11, 15), P.territories.slice(24, 31), P.territories[56], P.territories[79], P.territories.slice(81, 83), _gpua212, P.territories[83], P.territories[151], P.territories[157], P.territories[168], P.territories[181], P.territories[253]);

inter.countries = [].concat(P.territories[0], P.territories[4], P.territories.slice(8, 11), P.territories.slice(15, 24), P.territories.slice(31, 42), P.territories.slice(43, 51), _gpua182, P.territories.slice(51, 56), P.territories.slice(57, 79), P.territories.slice(84, 149), _gpua190, P.territories.slice(149, 151), P.territories.slice(152, 156), _gpua183, P.territories.slice(158, 168), P.territories.slice(169, 181), P.territories.slice(182, 200), _gpua208, _gpua209, P.territories[202], _gpua218, P.territories.slice(204, 236), _gpua184, P.territories.slice(237, 253), P.territories.slice(255, 260), P.territories.slice(261, 271), _gpua174, P.territories.slice(272, 285));

inter.languages = [].concat(P.languages.slice(0, 35), {
    id: "arn",
    displayName: "araukan"
}, P.languages.slice(35, 56), {
    id: "nds",
    displayName: "bas allemand"
}, P.languages.slice(57, 320), P.languages.slice(321, 328), {
    id: "mgo",
    displayName: "Meta’",
    nativeDisplayName: "metaʼ"
}, P.languages.slice(329, 612));

inter.scripts = [].concat(P.scripts.slice(0, 35), {
    id: "Deva",
    displayName: "devanagari"
}, P.scripts.slice(35, 37), P.scripts.slice(38, 41), P.scripts.slice(42, 45), {
    id: "Gujr",
    displayName: "gujarati"
}, P.scripts.slice(45, 215));

inter.currencies = [].concat(P.currencies[0], {
    id: "XXX",
    displayName: "Devise inconnue",
    symbol: "XXX",
    one: "devise inconnue",
    other: "devises inconnues"
}, P.currencies.slice(1, 32), {
    id: "NIO",
    displayName: "córdoba oro nicaraguayen",
    symbol: "C$",
    one: "córdoba oro nicaraguayen",
    other: "córdobas oro nicaraguayens"
}, P.currencies.slice(33, 35), P.currencies.slice(36, 54), {
    id: "AUD",
    displayName: "dollar australien",
    symbol: "$ AU",
    one: "dollar australien",
    other: "dollars australiens"
}, {
    id: "BSD",
    displayName: "dollar bahaméen",
    symbol: "BSD",
    one: "dollar bahaméen",
    other: "dollars bahaméens"
}, P.currencies[56], {
    id: "BMD",
    displayName: "dollar bermudien",
    symbol: "BMD",
    one: "dollar bermudien",
    other: "dollars bermudiens"
}, {
    id: "BND",
    displayName: "dollar brunéien",
    symbol: "BND",
    one: "dollar brunéien",
    other: "dollars brunéiens"
}, {
    id: "BZD",
    displayName: "dollar bélizéen",
    symbol: "BZD",
    one: "dollar bélizéen",
    other: "dollars bélizéens"
}, {
    id: "CAD",
    displayName: "dollar canadien",
    symbol: "$",
    one: "dollar canadien",
    other: "dollars canadiens"
}, {
    id: "HKD",
    displayName: "dollar de Hong Kong",
    symbol: "$ HK",
    one: "dollar de Hong Kong",
    other: "dollars de Hong Kong"
}, {
    id: "SGD",
    displayName: "dollar de Singapour",
    symbol: "$ SG",
    one: "dollar de Singapour",
    other: "dollars de Singapour"
}, {
    id: "TTD",
    displayName: "dollar de Trinité-et-Tobago",
    symbol: "TTD",
    one: "dollar de Trinité-et-Tobago",
    other: "dollars de Trinité-et-Tobago"
}, P.currencies.slice(63, 67), {
    id: "USD",
    displayName: "dollar des États-Unis",
    symbol: "$ US",
    one: "dollar des États-Unis",
    other: "dollars des États-Unis"
}, P.currencies[68], {
    id: "SBD",
    displayName: "dollar des îles Salomon",
    symbol: "SBD",
    one: "dollar des îles Salomon",
    other: "dollars des îles Salomon"
}, P.currencies[70], {
    id: "FJD",
    displayName: "dollar fidjien",
    symbol: "FJD",
    one: "dollar fidjien",
    other: "dollars fidjiens"
}, P.currencies.slice(72, 74), {
    id: "NAD",
    displayName: "dollar namibien",
    symbol: "NAD",
    one: "dollar namibien",
    other: "dollars namibiens"
}, {
    id: "NZD",
    displayName: "dollar néo-zélandais",
    symbol: "$ NZ",
    one: "dollar néo-zélandais",
    other: "dollars néo-zélandais"
}, P.currencies[76], {
    id: "SRD",
    displayName: "dollar surinamais",
    symbol: "SRD",
    one: "dollar surinamais",
    other: "dollars surinamais"
}, P.currencies.slice(79, 85), {
    id: "VND",
    displayName: "dông vietnamien",
    symbol: "VND",
    one: "dông vietnamien",
    other: "dôngs vietnamiens"
}, P.currencies.slice(86, 101), {
    id: "XOF",
    displayName: "franc CFA (BCEAO)",
    symbol: "XOF",
    one: "franc CFA (BCEAO)",
    other: "francs CFA (BCEAO)"
}, {
    id: "XAF",
    displayName: "franc CFA (BEAC)",
    symbol: "XAF",
    one: "franc CFA (BEAC)",
    other: "francs CFA (BEAC)"
}, {
    id: "XPF",
    displayName: "franc CFP",
    symbol: "XPF",
    one: "franc CFP",
    other: "francs CFP"
}, P.currencies.slice(104, 110), {
    id: "KMF",
    displayName: "franc comorien",
    symbol: "CF",
    one: "franc comorien",
    other: "francs comoriens"
}, P.currencies.slice(111, 134), {
    id: "ZMW",
    displayName: "kwacha zambien",
    symbol: "ZK",
    one: "kwacha zambien",
    other: "kwachas zambiens"
}, P.currencies.slice(135, 156), {
    id: "GIP",
    displayName: "livre de Gibraltar",
    symbol: "GIP",
    one: "livre de Gibraltar",
    other: "livres de Gibraltar"
}, P.currencies[157], {
    id: "FKP",
    displayName: "livre des Îles Malouines",
    symbol: "FKP",
    one: "livre des îles Malouines",
    other: "livres des îles Malouines"
}, P.currencies.slice(159, 161), {
    id: "LBP",
    displayName: "livre libanaise",
    symbol: "LBP",
    one: "livre libanaise",
    other: "livres libanaises"
}, P.currencies.slice(162, 165), {
    id: "GBP",
    displayName: "livre sterling",
    symbol: "£",
    one: "livre sterling",
    other: "livres sterling"
}, P.currencies.slice(166, 168), {
    id: "TRY",
    displayName: "livre turque",
    symbol: "TL",
    one: "livre turque",
    other: "livres turques"
}, P.currencies.slice(169, 192), {
    id: "ILS",
    displayName: "nouveau shekel israélien",
    symbol: "ILS",
    one: "nouveau shekel israélien",
    other: "nouveaux shekels israéliens"
}, P.currencies.slice(193, 199), {
    id: "TOP",
    displayName: "pa’anga",
    symbol: "TOP",
    one: "pa’anga tongan",
    other: "pa’angas tongans"
}, P.currencies.slice(200, 204), {
    id: "ARS",
    displayName: "peso argentin",
    symbol: "ARS",
    one: "peso argentin",
    other: "pesos argentins"
}, P.currencies.slice(205, 209), {
    id: "CLP",
    displayName: "peso chilien",
    symbol: "CLP",
    one: "peso chilien",
    other: "pesos chiliens"
}, {
    id: "COP",
    displayName: "peso colombien",
    symbol: "COP",
    one: "peso colombien",
    other: "pesos colombiens"
}, P.currencies.slice(211, 216), {
    id: "MXN",
    displayName: "peso mexicain",
    symbol: "MXN",
    one: "peso mexicain",
    other: "pesos mexicains"
}, P.currencies[217], {
    id: "UYU",
    displayName: "peso uruguayen",
    symbol: "UYU",
    one: "peso uruguayen",
    other: "pesos uruguayens"
}, P.currencies.slice(219, 282), {
    id: "KRW",
    displayName: "won sud-coréen",
    symbol: "KRW",
    one: "won sud-coréen",
    other: "wons sud-coréens"
}, P.currencies[283], {
    id: "JPY",
    displayName: "yen japonais",
    symbol: "¥",
    one: "yen japonais",
    other: "yens japonais"
}, {
    id: "CNY",
    displayName: "yuan renminbi chinois",
    symbol: "CN¥",
    one: "yuan renminbi chinois",
    other: "yuans renminbi chinois"
}, P.currencies.slice(286, 289));

module.exports = inter;