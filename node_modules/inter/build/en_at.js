function defaults(targetObj) {
    for (var i = 1; i < arguments.length; i += 1) {
        if (arguments[i] && typeof arguments[i] === "object") {
            for (var propertyName in arguments[i]) {
                if (typeof targetObj[propertyName] === "undefined") {
                    targetObj[propertyName] = arguments[i][propertyName];
                }
            }
        }
    }
    return targetObj;
}

var P = require("./en.js"), inter = defaults({
    renderers: {}
}, P);

var _640x1 = {
    one: "0K",
    other: "0K"
}, _640x2 = {
    one: "0M",
    other: "0M"
}, _640x3 = {
    one: "0B",
    other: "0B"
}, _640x4 = {
    one: "0T",
    other: "0T"
}, _640x5 = {
    "default": "#,##0 %"
}, _640x6 = [ "Q1", "Q2", "Q3", "Q4" ], _640x7 = {
    displayName: "AM/PM"
}, _640x8 = {
    all: {
        leap: "{0}bis"
    }
}, _640x9 = {
    one: "00K",
    other: "00K"
}, _640x10 = {
    one: "00M",
    other: "00M"
}, _640x11 = {
    one: "00B",
    other: "00B"
}, _640x12 = {
    one: "00T",
    other: "00T"
}, _640x13 = {
    one: "¤0K",
    other: "¤0K"
}, _640x14 = {
    one: "¤0M",
    other: "¤0M"
}, _640x15 = {
    one: "¤0B",
    other: "¤0B"
}, _640x16 = {
    one: "¤0T",
    other: "¤0T"
}, _640x17 = {
    one: "{0}°",
    other: "{0}°"
}, _640x18 = {
    one: "{0}′",
    other: "{0}′"
}, _640x19 = {
    one: "{0}″",
    other: "{0}″"
}, _640x20 = {
    one: "{0}m",
    other: "{0}m"
}, _640x21 = {
    one: "000K",
    other: "000K"
}, _640x22 = {
    one: "000M",
    other: "000M"
}, _640x23 = {
    one: "000B",
    other: "000B"
}, _640x24 = {
    one: "000T",
    other: "000T"
}, _640x25 = {
    one: "¤00K",
    other: "¤00K"
}, _640x26 = {
    one: "¤00M",
    other: "¤00M"
}, _640x27 = {
    one: "¤00B",
    other: "¤00B"
}, _640x28 = {
    one: "¤00T",
    other: "¤00T"
}, _640x29 = {
    displayName: "time zone"
}, _640x30 = [ "Before R.O.C.", "Minguo" ], _640x31 = {
    one: "{0} c",
    other: "{0} c"
}, _640x32 = {
    one: "{0}°F",
    other: "{0}°F"
}, _640x33 = {
    one: "¤000K",
    other: "¤000K"
}, _640x34 = {
    one: "¤000M",
    other: "¤000M"
}, _640x35 = {
    one: "¤000B",
    other: "¤000B"
}, _640x36 = {
    one: "¤000T",
    other: "¤000T"
}, _640x37 = {
    a: "h a – h a",
    h: "h – h a"
}, _640x38 = [ "S", "M", "T", "W", "T", "F", "S" ], _640x39 = {
    a: "h a – h a v",
    h: "h – h a v"
}, _640x40 = {
    displayName: "day of the week"
}, _640x41 = {
    one: "{0} day",
    other: "{0} days"
}, _640x42 = {
    wide: [ "AH" ],
    abbreviated: [ "AH" ]
}, _640x43 = {
    d: "d – d MMM",
    M: "d MMM – d MMM"
}, _640x44 = {
    M: "MM/y – MM/y",
    y: "MM/y – MM/y"
}, _640x45 = {
    one: "0 million",
    other: "0 million"
}, _640x46 = {
    one: "0 billion",
    other: "0 billion"
}, _640x47 = {
    M: "MMM – MMM U",
    y: "MMM U – MMM U"
}, _640x48 = {
    M: "MMM – MMM y",
    y: "MMM y – MMM y"
}, _640x49 = [ "Su", "Mo", "Tu", "We", "Th", "Fr", "Sa" ], _640x50 = {
    one: "0 thousand",
    other: "0 thousand"
}, _640x51 = {
    one: "00 million",
    other: "00 million"
}, _640x52 = {
    one: "00 billion",
    other: "00 billion"
}, _640x53 = {
    one: "0 trillion",
    other: "0 trillion"
}, _640x54 = {
    d: "dd/MM – dd/MM",
    M: "dd/MM – dd/MM"
}, _640x55 = {
    H: "HH:mm – HH:mm",
    m: "HH:mm – HH:mm"
}, _640x56 = {
    one: "in {0} yr.",
    other: "in {0} yr."
}, _640x57 = {
    one: "in {0} mo.",
    other: "in {0} mo."
}, _640x58 = {
    one: "in {0} wk.",
    other: "in {0} wk."
}, _640x59 = {
    one: "in {0} hr.",
    other: "in {0} hr."
}, _640x60 = {
    "0": "this M",
    "1": "next M",
    "-1": "last M"
}, _640x61 = {
    "0": "this W",
    "1": "next W",
    "-1": "last W"
}, _640x62 = {
    "0": "this F",
    "1": "next F",
    "-1": "last F"
}, _640x63 = {
    one: "in {0} day",
    other: "in {0} days"
}, _640x64 = {
    one: "00 thousand",
    other: "00 thousand"
}, _640x65 = {
    one: "000 million",
    other: "000 million"
}, _640x66 = {
    one: "000 billion",
    other: "000 billion"
}, _640x67 = {
    one: "00 trillion",
    other: "00 trillion"
}, _640x68 = {
    M: "MMM – MMM y G",
    y: "MMM y – MMM y G"
}, _640x69 = {
    one: "{0} yr. ago",
    other: "{0} yr. ago"
}, _640x70 = {
    one: "{0} mo. ago",
    other: "{0} mo. ago"
}, _640x71 = {
    one: "{0} wk. ago",
    other: "{0} wk. ago"
}, _640x72 = {
    one: "{0} hr. ago",
    other: "{0} hr. ago"
}, _640x73 = {
    one: "in {0} min.",
    other: "in {0} min."
}, _640x74 = {
    one: "in {0} sec.",
    other: "in {0} sec."
}, _640x75 = {
    M: "MMMM – MMMM U",
    y: "MMMM U – MMMM U"
}, _640x76 = {
    M: "MMMM – MMMM y",
    y: "MMMM y – MMMM y"
}, _640x77 = {
    one: "in {0} year",
    other: "in {0} years"
}, _640x78 = {
    one: "in {0} qtr.",
    other: "in {0} qtrs."
}, _640x79 = {
    one: "in {0} week",
    other: "in {0} weeks"
}, _640x80 = {
    one: "{0} day ago",
    other: "{0} days ago"
}, _640x81 = {
    one: "in {0} hour",
    other: "in {0} hours"
}, _640x82 = {
    "0": "this Su",
    "1": "next Su",
    "-1": "last Su"
}, _640x83 = {
    "0": "this Tu",
    "1": "next Tu",
    "-1": "last Tu"
}, _640x84 = {
    "0": "this Th",
    "1": "next Th",
    "-1": "last Th"
}, _640x85 = {
    "0": "this Sa",
    "1": "next Sa",
    "-1": "last Sa"
}, _640x86 = {
    one: "000 thousand",
    other: "000 thousand"
}, _640x87 = {
    one: "000 trillion",
    other: "000 trillion"
}, _640x88 = {
    d: "E d – E d MMM",
    M: "E d MMM – E d MMM"
}, _640x89 = {
    H: "HH:mm – HH:mm v",
    m: "HH:mm – HH:mm v"
}, _640x90 = {
    "0": "today",
    "1": "tomorrow",
    "-1": "yesterday"
}, _640x91 = {
    one: "{0} min. ago",
    other: "{0} min. ago"
}, _640x92 = {
    one: "{0} sec. ago",
    other: "{0} sec. ago"
}, _640x93 = {
    one: "{0} year ago",
    other: "{0} years ago"
}, _640x94 = {
    one: "{0} qtr. ago",
    other: "{0} qtrs. ago"
}, _640x95 = {
    one: "in {0} month",
    other: "in {0} months"
}, _640x96 = {
    one: "{0} week ago",
    other: "{0} weeks ago"
}, _640x97 = {
    one: "{0} hour ago",
    other: "{0} hours ago"
}, _640x98 = {
    M: "MMMM – MMMM y G",
    y: "MMMM y – MMMM y G"
}, _640x99 = [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ], _640x100 = {
    "0": "this yr.",
    "1": "next yr.",
    "-1": "last yr."
}, _640x101 = {
    "0": "this mo.",
    "1": "next mo.",
    "-1": "last mo."
}, _640x102 = {
    "0": "this wk.",
    "1": "next wk.",
    "-1": "last wk."
}, _640x103 = {
    one: "{0} month ago",
    other: "{0} months ago"
}, _640x104 = {
    one: "in {0} minute",
    other: "in {0} minutes"
}, _640x105 = {
    one: "in {0} second",
    other: "in {0} seconds"
}, _640x106 = {
    d: "E dd/MM – E dd/MM",
    M: "E dd/MM – E dd/MM"
}, _640x107 = {
    M: "MM/y – MM/y GGGGG",
    y: "MM/y – MM/y GGGGG"
}, _640x108 = {
    "0": "this year",
    "1": "next year",
    "-1": "last year"
}, _640x109 = {
    one: "in {0} quarter",
    other: "in {0} quarters"
}, _640x110 = {
    "0": "this qtr.",
    "1": "next qtr.",
    "-1": "last qtr."
}, _640x111 = {
    "0": "this week",
    "1": "next week",
    "-1": "last week"
}, _640x112 = {
    one: "{0} minute ago",
    other: "{0} minutes ago"
}, _640x113 = {
    one: "{0} second ago",
    other: "{0} seconds ago"
}, _640x114 = {
    "0": "this Sun.",
    "1": "next Sun.",
    "-1": "last Sun."
}, _640x115 = {
    "0": "this Mon.",
    "1": "next Mon.",
    "-1": "last Mon."
}, _640x116 = {
    "0": "this Tue.",
    "1": "next Tue.",
    "-1": "last Tue."
}, _640x117 = {
    "0": "this Wed.",
    "1": "next Wed.",
    "-1": "last Wed."
}, _640x118 = {
    "0": "this Thu.",
    "1": "next Thu.",
    "-1": "last Thu."
}, _640x119 = {
    "0": "this Fri.",
    "1": "next Fri.",
    "-1": "last Fri."
}, _640x120 = {
    "0": "this Sat.",
    "1": "next Sat.",
    "-1": "last Sat."
}, _640x121 = {
    one: "{0} quarter ago",
    other: "{0} quarters ago"
}, _640x122 = {
    relative: _640x60
}, _640x123 = {
    relative: _640x61
}, _640x124 = {
    relative: _640x62
}, _640x125 = [ "J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D" ], _640x126 = {
    "0": "this month",
    "1": "next month",
    "-1": "last month"
}, _640x127 = {
    d: "E, d MMM – E, d MMM",
    M: "E, d MMM – E, d MMM"
}, _640x128 = {
    wide: [ "ERA0", "ERA1" ],
    abbreviated: [ "ERA0", "ERA1" ]
}, _640x129 = {
    relative: _640x82
}, _640x130 = {
    relative: _640x83
}, _640x131 = {
    relative: _640x84
}, _640x132 = {
    relative: _640x85
}, _640x133 = {
    "0": "this Sunday",
    "1": "next Sunday",
    "-1": "last Sunday"
}, _640x134 = {
    "0": "this Monday",
    "1": "next Monday",
    "-1": "last Monday"
}, _640x135 = {
    "0": "this Friday",
    "1": "next Friday",
    "-1": "last Friday"
}, _640x136 = [ "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" ], _640x137 = {
    "0": "this quarter",
    "1": "next quarter",
    "-1": "last quarter"
}, _640x138 = {
    "0": "this Tuesday",
    "1": "next Tuesday",
    "-1": "last Tuesday"
}, _640x139 = {
    a: "h:mm a – h:mm a",
    h: "h:mm – h:mm a",
    m: "h:mm – h:mm a"
}, _640x140 = [ "1st quarter", "2nd quarter", "3rd quarter", "4th quarter" ], _640x141 = {
    relative: _640x114
}, _640x142 = {
    relative: _640x115
}, _640x143 = {
    relative: _640x116
}, _640x144 = {
    relative: _640x117
}, _640x145 = {
    relative: _640x118
}, _640x146 = {
    relative: _640x119
}, _640x147 = {
    relative: _640x120
}, _640x148 = [ "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13" ], _640x149 = {
    "0": "this Thursday",
    "1": "next Thursday",
    "-1": "last Thursday"
}, _640x150 = {
    "0": "this Saturday",
    "1": "next Saturday",
    "-1": "last Saturday"
}, _640x151 = {
    d: "d – d MMM U",
    M: "d MMM – d MMM U",
    y: "d MMM U – d MMM U"
}, _640x152 = {
    d: "d – d MMM y",
    M: "d MMM – d MMM y",
    y: "d MMM y – d MMM y"
}, _640x153 = {
    "0": "this Wednesday",
    "1": "next Wednesday",
    "-1": "last Wednesday"
}, _640x154 = {
    a: "h:mm a – h:mm a v",
    h: "h:mm – h:mm a v",
    m: "h:mm – h:mm a v"
}, _640x155 = {
    relative: _640x133
}, _640x156 = {
    relative: _640x134
}, _640x157 = {
    relative: _640x135
}, _640x158 = {
    d: "d – d MMM y G",
    M: "d MMM – d MMM y G",
    y: "d MMM y – d MMM y G"
}, _640x159 = {
    relative: _640x138
}, _640x160 = {
    d: "dd/MM/y – dd/MM/y",
    M: "dd/MM/y – dd/MM/y",
    y: "dd/MM/y – dd/MM/y"
}, _640x161 = {
    relative: _640x149
}, _640x162 = {
    relative: _640x150
}, _640x163 = {
    abbreviated: {
        leap: "{0}bis"
    },
    narrow: {
        leap: "{0}b"
    },
    wide: {
        leap: "{0}bis"
    }
}, _640x164 = [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ], _640x165 = {
    relative: _640x153
}, _640x166 = [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ], _640x167 = [ undefined, "zi", "chou", "yin", "mao", "chen", "si", "wu", "wei", "shen", "you", "xu" ], _640x168 = [ "Mo1", "Mo2", "Mo3", "Mo4", "Mo5", "Mo6", "Mo7", "Mo8", "Mo9", "Mo10", "Mo11", "Mo12" ], _640x169 = {
    d: "E, d – E, d MMM U",
    M: "E, d MMM – E, d MMM U",
    y: "E, d MMM U – E, d MMM U"
}, _640x170 = {
    d: "E, d MMM – E, d MMM y",
    M: "E, d MMM – E, d MMM y",
    y: "E, d MMM y – E, d MMM y"
}, _640x171 = {
    d: "E, d – E, d MMM y G",
    M: "E, d MMM – E, d MMM y G",
    y: "E, d MMM y – E, d MMM y G"
}, _640x172 = {
    d: "dd/MM/y – dd/MM/y GGGGG",
    M: "dd/MM/y – dd/MM/y GGGGG",
    y: "dd/MM/y – dd/MM/y GGGGG"
}, _640x173 = {
    d: "E, dd/MM/y – E, dd/MM/y",
    M: "E, dd/MM/y – E, dd/MM/y",
    y: "E, dd/MM/y – E, dd/MM/y"
}, _640x174 = {
    future: _640x56,
    past: _640x69
}, _640x175 = {
    future: _640x57,
    past: _640x70
}, _640x176 = {
    future: _640x58,
    past: _640x71
}, _640x177 = {
    future: _640x59,
    past: _640x72
}, _640x178 = {
    future: _640x63,
    past: _640x80
}, _640x179 = {
    future: _640x73,
    past: _640x91
}, _640x180 = {
    future: _640x74,
    past: _640x92
}, _640x181 = [ undefined, "Rat", "Ox", "Tiger", "Rabbit", "Dragon", "Snake", "Horse", "Goat", "Monkey", "Rooster", "Dog" ], _640x182 = {
    future: _640x77,
    past: _640x93
}, _640x183 = {
    future: _640x78,
    past: _640x94
}, _640x184 = {
    future: _640x79,
    past: _640x96
}, _640x185 = {
    future: _640x81,
    past: _640x97
}, _640x186 = {
    future: _640x95,
    past: _640x103
}, _640x187 = {
    d: "E, dd/MM/y – E, dd/MM/y GGGGG",
    M: "E, dd/MM/y – E, dd/MM/y GGGGG",
    y: "E, dd/MM/y – E, dd/MM/y GGGGG"
}, _640x188 = [ "Muh.", "Saf.", "Rab. I", "Rab. II", "Jum. I", "Jum. II", "Raj.", "Sha.", "Ram.", "Shaw.", "Dhuʻl-Q.", "Dhuʻl-H." ], _640x189 = {
    future: _640x104,
    past: _640x112
}, _640x190 = {
    future: _640x105,
    past: _640x113
}, _640x191 = [ "Tishri", "Heshvan", "Kislev", "Tevet", "Shevat", "Adar I", "Adar", "Nisan", "Iyar", "Sivan", "Tamuz", "Av", "Elul" ], _640x192 = {
    future: _640x109,
    past: _640x121
}, _640x193 = [ "Farvardin", "Ordibehesht", "Khordad", "Tir", "Mordad", "Shahrivar", "Mehr", "Aban", "Azar", "Dey", "Bahman", "Esfand" ], _640x194 = [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ], _640x195 = [ "Tout", "Baba", "Hator", "Kiahk", "Toba", "Amshir", "Baramhat", "Baramouda", "Bashans", "Paona", "Epep", "Mesra", "Nasie" ], _640x196 = [ "Meskerem", "Tekemt", "Hedar", "Tahsas", "Ter", "Yekatit", "Megabit", "Miazia", "Genbot", "Sene", "Hamle", "Nehasse", "Pagumen" ], _640x197 = [ "Chaitra", "Vaisakha", "Jyaistha", "Asadha", "Sravana", "Bhadra", "Asvina", "Kartika", "Agrahayana", "Pausa", "Magha", "Phalguna" ], _640x198 = {
    abbreviated: _640x6,
    narrow: [ "1", "2", "3", "4" ],
    wide: _640x140
}, _640x199 = {
    displayName: "hr.",
    relativeTime: _640x177
}, _640x200 = {
    midnight: "midnight",
    am: "AM",
    noon: "noon",
    pm: "PM",
    morning1: "morning",
    afternoon1: "afternoon",
    evening1: "evening",
    night1: "night"
}, _640x201 = {
    displayName: "day",
    relativeTime: _640x178
}, _640x202 = {
    displayName: "min.",
    relativeTime: _640x179
}, _640x203 = {
    displayName: "hour",
    relativeTime: _640x185
}, _640x204 = [ "Muharram", "Safar", "Rabiʻ I", "Rabiʻ II", "Jumada I", "Jumada II", "Rajab", "Shaʻban", "Ramadan", "Shawwal", "Dhuʻl-Qiʻdah", "Dhuʻl-Hijjah" ], _640x205 = {
    midnight: "mi",
    am: "a",
    noon: "n",
    pm: "p",
    morning1: "in the morning",
    afternoon1: "in the afternoon",
    evening1: "in the evening",
    night1: "at night"
}, _640x206 = {
    displayName: "minute",
    relativeTime: _640x189
}, _640x207 = {
    displayName: "sec.",
    relative: [ "now" ],
    relativeTime: _640x180
}, _640x208 = {
    midnight: "midnight",
    am: "AM",
    noon: "noon",
    pm: "PM",
    morning1: "in the morning",
    afternoon1: "in the afternoon",
    evening1: "in the evening",
    night1: "at night"
}, _640x209 = {
    displayName: "second",
    relative: [ "now" ],
    relativeTime: _640x190
}, _640x210 = {
    superscriptingExponent: "·",
    decimal: ",",
    group: ".",
    list: ";",
    percentSign: "%",
    plusSign: "+",
    minusSign: "-",
    exponential: "E",
    perMille: "‰",
    infinity: "∞",
    nan: "NaN",
    timeSeparator: ":"
}, _640x211 = {
    displayName: "yr.",
    relative: _640x100,
    relativeTime: _640x174
}, _640x212 = {
    displayName: "mo.",
    relative: _640x101,
    relativeTime: _640x175
}, _640x213 = {
    displayName: "wk.",
    relative: _640x102,
    relativeTime: _640x176
}, _640x214 = {
    displayName: "day",
    relative: _640x90,
    relativeTime: _640x178
}, _640x215 = [ "First Month", "Second Month", "Third Month", "Fourth Month", "Fifth Month", "Sixth Month", "Seventh Month", "Eighth Month", "Ninth Month", "Tenth Month", "Eleventh Month", "Twelfth Month" ], _640x216 = {
    symbols: _640x210
}, _640x217 = {
    displayName: "year",
    relative: _640x108,
    relativeTime: _640x182
}, _640x218 = {
    displayName: "qtr.",
    relative: _640x110,
    relativeTime: _640x183
}, _640x219 = {
    displayName: "week",
    relative: _640x111,
    relativeTime: _640x184
}, _640x220 = {
    format: _640x163,
    numeric: _640x8,
    standAlone: _640x163
}, _640x221 = {
    displayName: "month",
    relative: _640x126,
    relativeTime: _640x186
}, _640x222 = {
    displayName: "quarter",
    relative: _640x137,
    relativeTime: _640x192
}, _640x223 = {
    symbols: _640x210,
    digits: "renderSpelloutCardinal"
}, _640x224 = {
    abbreviated: _640x99,
    narrow: _640x38,
    wide: _640x164,
    "short": _640x49
}, _640x225 = {
    symbols: _640x210,
    digits: "renderSpelloutCardinalFinancial"
}, _640x226 = {
    abbreviated: _640x167,
    narrow: _640x167,
    wide: _640x167
}, _640x227 = {
    abbreviated: _640x166,
    narrow: _640x125,
    wide: _640x194
}, _640x228 = {
    format: _640x226
}, _640x229 = {
    format: _640x198,
    standAlone: _640x198
}, _640x230 = {
    abbreviated: _640x191,
    narrow: _640x148,
    wide: _640x191
}, _640x231 = {
    abbreviated: _640x193,
    narrow: _640x136,
    wide: _640x193
}, _640x232 = {
    abbreviated: _640x195,
    narrow: _640x148,
    wide: _640x195
}, _640x233 = {
    abbreviated: _640x181,
    narrow: _640x181,
    wide: _640x181
}, _640x234 = {
    abbreviated: _640x188,
    narrow: _640x136,
    wide: _640x204
}, _640x235 = {
    abbreviated: _640x196,
    narrow: _640x148,
    wide: _640x196
}, _640x236 = {
    abbreviated: _640x197,
    narrow: _640x136,
    wide: _640x197
}, _640x237 = {
    format: _640x233
}, _640x238 = {
    abbreviated: _640x168,
    narrow: _640x136,
    wide: _640x215
}, _640x239 = {
    "1000": _640x1,
    "10000": _640x9,
    "100000": _640x21,
    "1000000": _640x2,
    "10000000": _640x10,
    "100000000": _640x22,
    "1000000000": _640x3,
    "10000000000": _640x11,
    "100000000000": _640x23,
    "1000000000000": _640x4,
    "10000000000000": _640x12,
    "100000000000000": _640x24
}, _640x240 = {
    fullDate: "EEEE, d MMMM r(U)",
    longDate: "d MMMM r(U)",
    mediumDate: "d MMM r",
    shortDate: "dd/MM/r",
    fullTime: "HH:mm:ss zzzz",
    longTime: "HH:mm:ss z",
    mediumTime: "HH:mm:ss",
    shortTime: "HH:mm",
    shortDateTime: "dd/MM/r, HH:mm",
    mediumDateTime: "d MMM r, HH:mm:ss",
    longDateTime: "d MMMM r(U) 'at' HH:mm:ss z",
    fullDateTime: "EEEE, d MMMM r(U) 'at' HH:mm:ss zzzz"
}, _640x241 = {
    fullDate: "EEEE, d MMMM y G",
    longDate: "d MMMM y G",
    mediumDate: "d MMM y G",
    shortDate: "dd/MM/y GGGGG",
    fullTime: "HH:mm:ss zzzz",
    longTime: "HH:mm:ss z",
    mediumTime: "HH:mm:ss",
    shortTime: "HH:mm",
    shortDateTime: "dd/MM/y GGGGG, HH:mm",
    mediumDateTime: "d MMM y G, HH:mm:ss",
    longDateTime: "d MMMM y G 'at' HH:mm:ss z",
    fullDateTime: "EEEE, d MMMM y G 'at' HH:mm:ss zzzz"
}, _640x242 = {
    "1000": _640x13,
    "10000": _640x25,
    "100000": _640x33,
    "1000000": _640x14,
    "10000000": _640x26,
    "100000000": _640x34,
    "1000000000": _640x15,
    "10000000000": _640x27,
    "100000000000": _640x35,
    "1000000000000": _640x16,
    "10000000000000": _640x28,
    "100000000000000": _640x36
}, _640x243 = {
    abbreviated: _640x208,
    narrow: _640x208,
    wide: _640x200
}, _640x244 = {
    format: _640x224,
    standAlone: _640x224
}, _640x245 = {
    abbreviated: _640x208,
    narrow: _640x205,
    wide: _640x208
}, _640x246 = {
    "1000": _640x50,
    "10000": _640x64,
    "100000": _640x86,
    "1000000": _640x45,
    "10000000": _640x51,
    "100000000": _640x65,
    "1000000000": _640x46,
    "10000000000": _640x52,
    "100000000000": _640x66,
    "1000000000000": _640x53,
    "10000000000000": _640x67,
    "100000000000000": _640x87
}, _640x247 = {
    Ed: "E d",
    GyMMMd: "d MMM y G",
    GyMMMEd: "E, d MMM y G",
    M: "LL",
    Md: "dd/MM",
    MEd: "E, dd/MM",
    MMMd: "d MMM",
    MMMEd: "E, d MMM",
    MMMMd: "d MMMM",
    yyyyM: "MM/y GGGGG",
    yyyyMd: "dd/MM/y GGGGG",
    yyyyMEd: "E, dd/MM/y GGGGG",
    yyyyMMMd: "d MMM y G",
    yyyyMMMEd: "E, d MMM y G",
    d: "d",
    E: "ccc",
    Ehm: "E h:mm a",
    EHm: "E HH:mm",
    Ehms: "E h:mm:ss a",
    EHms: "E HH:mm:ss",
    Gy: "y G",
    GyMMM: "MMM y G",
    h: "h a",
    H: "HH",
    hm: "h:mm a",
    Hm: "HH:mm",
    hms: "h:mm:ss a",
    Hms: "HH:mm:ss",
    MMM: "LLL",
    ms: "mm:ss",
    y: "y G",
    yyyy: "y G",
    yyyyMMM: "MMM y G",
    yyyyMMMM: "MMMM y G",
    yyyyQQQ: "QQQ y G",
    yyyyQQQQ: "QQQQ y G"
}, _640x248 = {
    format: _640x227,
    standAlone: _640x227
}, _640x249 = {
    currencyMatch: /[^\u0024+<->\u005E`\u007C~¢-¦¨©¬®-±´¸×÷˂-˅˒-˟˥-˫˭˯-˿͵΄΅϶҂֏؆-؈؋؎؏۞۩۽۾߶৲৳৺৻૱୰௳-௺౿൹฿༁-༃༓༕-༗༚-༟༴༶༸྾-࿅࿇-࿌࿎࿏࿕-࿘႞႟᎐-᎙៛᥀᧞-᧿᭡-᭪᭴-᭼᾽᾿-῁῍-῏῝-῟῭-`´῾⁄⁒⁺-⁼₊-₌₠-₹℀℁℃-℆℈℉℔№-℘℞-℣℥℧℩℮℺℻⅀-⅄⅊-⅍⅏←-⌨⌫-⏳␀-␦⑀-⑊⒜-ⓩ─-⛿✁-❧➔-⟄⟇-⟥⟰-⦂⦙-⧗⧜-⧻⧾-⭌⭐-⭙⳥-⳪⺀-⺙⺛-⻳⼀-⿕⿰-⿻〄〒〓〠〶〷〾〿゛゜㆐㆑㆖-㆟㇀-㇣㈀-㈞㈪-㉇㉐㉠-㉿㊊-㊰㋀-㋾㌀-㏿䷀-䷿꒐-꓆꜀-꜖꜠꜡꞉꞊꠨-꠫꠶-꠹꩷-꩹﬩﮲-﯁﷼﷽﹢﹤-﹦﹩＄＋＜-＞＾｀｜～￠-￦￨-￮￼�]/,
    surroundingMatch: /[0-9²³¹¼-¾٠-٩۰-۹߀-߉०-९০-৯৴-৹੦-੯૦-૯୦-୯୲-୷௦-௲౦-౯౸-౾೦-೯൦-൵๐-๙໐-໙༠-༳၀-၉႐-႙፩-፼ᛮ-ᛰ០-៩៰-៹᠐-᠙᥆-᥏᧐-᧚᪀-᪉᪐-᪙᭐-᭙᮰-᮹᱀-᱉᱐-᱙⁰⁴-⁹₀-₉⅐-ↂↅ-↉①-⒛⓪-⓿❶-➓⳽〇〡-〩〸-〺㆒-㆕㈠-㈩㉈-㉏㉑-㉟㊀-㊉㊱-㊿꘠-꘩ꛦ-ꛯ꠰-꠵꣐-꣙꤀-꤉꧐-꧙꩐-꩙꯰-꯹０-９]/,
    insertBetween: " "
}, _640x250 = {
    Ed: "E d",
    GyMMMd: "d MMM r",
    GyMMMEd: "E, d MMM r(U)",
    M: "LL",
    Md: "dd/MM",
    MEd: "E, dd/MM",
    MMMd: "d MMM",
    MMMEd: "E, d MMM",
    MMMMd: "d MMMM",
    UMd: "dd/MM/U",
    UMMMd: "d MMM U",
    yMd: "dd/MM/r",
    yyyyM: "MM/r",
    yyyyMd: "dd/MM/r",
    yyyyMEd: "E, dd/MM/r",
    yyyyMMMd: "d MMM r",
    yyyyMMMEd: "E, d MMM r(U)",
    d: "d",
    E: "ccc",
    Ehm: "E h:mm a",
    EHm: "E HH:mm",
    Ehms: "E h:mm:ss a",
    EHms: "E HH:mm:ss",
    Gy: "r(U)",
    GyMMM: "MMM r(U)",
    h: "h a",
    H: "HH",
    hm: "h:mm a",
    Hm: "HH:mm",
    hms: "h:mm:ss a",
    Hms: "HH:mm:ss",
    MMM: "LLL",
    ms: "mm:ss",
    UM: "M/U",
    UMMM: "MMM U",
    y: "r(U)",
    yyyy: "r(U)",
    yyyyMMM: "MMM r(U)",
    yyyyMMMM: "MMMM r(U)",
    yyyyQQQ: "QQQ r(U)",
    yyyyQQQQ: "QQQQ r(U)"
}, _640x251 = [ undefined, "jia-zi", "yi-chou", "bing-yin", "ding-mao", "wu-chen", "ji-si", "geng-wu", "xin-wei", "ren-shen", "gui-you", "jia-xu", "yi-hai", "bing-zi", "ding-chou", "wu-yin", "ji-mao", "geng-chen", "xin-si", "ren-wu", "gui-wei", "jia-shen", "yi-you", "bing-xu", "ding-hai", "wu-zi", "ji-chou", "geng-yin", "xin-mao", "ren-chen", "gui-si", "jia-wu", "yi-wei", "bing-shen", "ding-you", "wu-xu", "ji-hai", "geng-zi", "xin-chou", "ren-yin", "gui-mao", "jia-chen", "yi-si", "bing-wu", "ding-wei", "wu-shen", "ji-you", "geng-xu", "xin-hai", "ren-zi", "gui-chou", "jia-yin", "yi-mao", "bing-chen", "ding-si", "wu-wu", "ji-wei", "geng-shen", "xin-you", "ren-xu" ], _640x252 = {
    format: _640x234,
    standAlone: _640x234
}, _640x253 = {
    format: _640x238,
    standAlone: _640x238
}, _640x254 = {
    basic: _640x241,
    cldr: _640x247
}, _640x255 = {
    "long": _640x246,
    "short": _640x239,
    "default": "#,##0.###"
}, _640x256 = {
    format: _640x245,
    standAlone: _640x243
}, _640x257 = {
    basic: _640x240,
    cldr: _640x250
}, _640x258 = {
    Md: _640x54,
    MEd: _640x106,
    MMMd: _640x43,
    MMMEd: _640x88,
    yM: _640x44,
    yMd: _640x160,
    yMEd: _640x173,
    yMMMd: _640x151,
    yMMMEd: _640x169,
    d: {
        d: "d – d"
    },
    h: _640x37,
    H: {
        H: "HH – HH"
    },
    hm: _640x139,
    Hm: _640x55,
    hmv: _640x154,
    Hmv: _640x89,
    hv: _640x39,
    Hv: {
        H: "HH – HH v"
    },
    M: {
        M: "M – M"
    },
    MMM: {
        M: "MMM – MMM"
    },
    y: {
        y: "U – U"
    },
    yMMM: _640x47,
    yMMMM: _640x75
}, _640x259 = {
    Md: _640x54,
    MEd: _640x106,
    MMMd: _640x43,
    MMMEd: _640x88,
    yM: _640x107,
    yMd: _640x172,
    yMEd: _640x187,
    yMMMd: _640x158,
    yMMMEd: _640x171,
    d: {
        d: "d – d"
    },
    h: _640x37,
    H: {
        H: "HH – HH"
    },
    hm: _640x139,
    Hm: _640x55,
    hmv: _640x154,
    Hmv: _640x89,
    hv: _640x39,
    Hv: {
        H: "HH – HH v"
    },
    M: {
        M: "M – M"
    },
    MMM: {
        M: "MMM – MMM"
    },
    y: {
        y: "y – y G"
    },
    yMMM: _640x68,
    yMMMM: _640x98
}, _640x260 = {
    beforeCurrency: _640x249,
    afterCurrency: _640x249
}, _640x261 = {
    "short": _640x242,
    "default": "¤ #,##0.00",
    one: "{0} {1}",
    other: "{0} {1}",
    currencySpacing: _640x260
}, _640x262 = {
    abbreviated: _640x251,
    narrow: _640x251,
    wide: _640x251
}, _640x263 = {
    format: _640x262
}, _640x264 = {
    scientific: {
        "default": "#E0"
    },
    decimal: _640x255,
    currency: _640x261,
    percent: _640x5
}, _640x265 = {
    era: {
        displayName: "era"
    },
    year: _640x217,
    "year-short": _640x211,
    quarter: _640x222,
    "quarter-short": _640x218,
    month: _640x221,
    "month-short": _640x212,
    week: _640x219,
    "week-short": _640x213,
    day: _640x214,
    "day-short": _640x201,
    weekday: _640x40,
    dayperiod: _640x7,
    hour: _640x203,
    "hour-short": _640x199,
    minute: _640x206,
    "minute-short": _640x202,
    second: _640x209,
    "second-short": _640x207,
    zone: _640x29,
    sun: _640x155,
    "sun-short": _640x141,
    "sun-narrow": _640x129,
    mon: _640x156,
    "mon-short": _640x142,
    "mon-narrow": _640x122,
    tue: _640x159,
    "tue-short": _640x143,
    "tue-narrow": _640x130,
    wed: _640x165,
    "wed-short": _640x144,
    "wed-narrow": _640x123,
    thu: _640x161,
    "thu-short": _640x145,
    "thu-narrow": _640x131,
    fri: _640x157,
    "fri-short": _640x146,
    "fri-narrow": _640x124,
    sat: _640x162,
    "sat-short": _640x147,
    "sat-narrow": _640x132
}, _640x266 = {
    dateFormats: {
        basic: {},
        cldr: {}
    },
    fields: _640x265
}, _640x267 = [ "Taika (645–650)", "Hakuchi (650–671)", "Hakuhō (672–686)", "Shuchō (686–701)", "Taihō (701–704)", "Keiun (704–708)", "Wadō (708–715)", "Reiki (715–717)", "Yōrō (717–724)", "Jinki (724–729)", "Tenpyō (729–749)", "Tenpyō-kampō (749-749)", "Tenpyō-shōhō (749-757)", "Tenpyō-hōji (757-765)", "Tenpyō-jingo (765-767)", "Jingo-keiun (767-770)", "Hōki (770–780)", "Ten-ō (781-782)", "Enryaku (782–806)", "Daidō (806–810)", "Kōnin (810–824)", "Tenchō (824–834)", "Jōwa (834–848)", "Kajō (848–851)", "Ninju (851–854)", "Saikō (854–857)", "Ten-an (857-859)", "Jōgan (859–877)", "Gangyō (877–885)", "Ninna (885–889)", "Kanpyō (889–898)", "Shōtai (898–901)", "Engi (901–923)", "Enchō (923–931)", "Jōhei (931–938)", "Tengyō (938–947)", "Tenryaku (947–957)", "Tentoku (957–961)", "Ōwa (961–964)", "Kōhō (964–968)", "Anna (968–970)", "Tenroku (970–973)", "Ten’en (973–976)", "Jōgen (976–978)", "Tengen (978–983)", "Eikan (983–985)", "Kanna (985–987)", "Eien (987–989)", "Eiso (989–990)", "Shōryaku (990–995)", "Chōtoku (995–999)", "Chōhō (999–1004)", "Kankō (1004–1012)", "Chōwa (1012–1017)", "Kannin (1017–1021)", "Jian (1021–1024)", "Manju (1024–1028)", "Chōgen (1028–1037)", "Chōryaku (1037–1040)", "Chōkyū (1040–1044)", "Kantoku (1044–1046)", "Eishō (1046–1053)", "Tengi (1053–1058)", "Kōhei (1058–1065)", "Jiryaku (1065–1069)", "Enkyū (1069–1074)", "Shōho (1074–1077)", "Shōryaku (1077–1081)", "Eihō (1081–1084)", "Ōtoku (1084–1087)", "Kanji (1087–1094)", "Kahō (1094–1096)", "Eichō (1096–1097)", "Jōtoku (1097–1099)", "Kōwa (1099–1104)", "Chōji (1104–1106)", "Kashō (1106–1108)", "Tennin (1108–1110)", "Ten-ei (1110-1113)", "Eikyū (1113–1118)", "Gen’ei (1118–1120)", "Hōan (1120–1124)", "Tenji (1124–1126)", "Daiji (1126–1131)", "Tenshō (1131–1132)", "Chōshō (1132–1135)", "Hōen (1135–1141)", "Eiji (1141–1142)", "Kōji (1142–1144)", "Ten’yō (1144–1145)", "Kyūan (1145–1151)", "Ninpei (1151–1154)", "Kyūju (1154–1156)", "Hōgen (1156–1159)", "Heiji (1159–1160)", "Eiryaku (1160–1161)", "Ōho (1161–1163)", "Chōkan (1163–1165)", "Eiman (1165–1166)", "Nin’an (1166–1169)", "Kaō (1169–1171)", "Shōan (1171–1175)", "Angen (1175–1177)", "Jishō (1177–1181)", "Yōwa (1181–1182)", "Juei (1182–1184)", "Genryaku (1184–1185)", "Bunji (1185–1190)", "Kenkyū (1190–1199)", "Shōji (1199–1201)", "Kennin (1201–1204)", "Genkyū (1204–1206)", "Ken’ei (1206–1207)", "Jōgen (1207–1211)", "Kenryaku (1211–1213)", "Kenpō (1213–1219)", "Jōkyū (1219–1222)", "Jōō (1222–1224)", "Gennin (1224–1225)", "Karoku (1225–1227)", "Antei (1227–1229)", "Kanki (1229–1232)", "Jōei (1232–1233)", "Tenpuku (1233–1234)", "Bunryaku (1234–1235)", "Katei (1235–1238)", "Ryakunin (1238–1239)", "En’ō (1239–1240)", "Ninji (1240–1243)", "Kangen (1243–1247)", "Hōji (1247–1249)", "Kenchō (1249–1256)", "Kōgen (1256–1257)", "Shōka (1257–1259)", "Shōgen (1259–1260)", "Bun’ō (1260–1261)", "Kōchō (1261–1264)", "Bun’ei (1264–1275)", "Kenji (1275–1278)", "Kōan (1278–1288)", "Shōō (1288–1293)", "Einin (1293–1299)", "Shōan (1299–1302)", "Kengen (1302–1303)", "Kagen (1303–1306)", "Tokuji (1306–1308)", "Enkyō (1308–1311)", "Ōchō (1311–1312)", "Shōwa (1312–1317)", "Bunpō (1317–1319)", "Genō (1319–1321)", "Genkō (1321–1324)", "Shōchū (1324–1326)", "Karyaku (1326–1329)", "Gentoku (1329–1331)", "Genkō (1331–1334)", "Kenmu (1334–1336)", "Engen (1336–1340)", "Kōkoku (1340–1346)", "Shōhei (1346–1370)", "Kentoku (1370–1372)", "Bunchū (1372–1375)", "Tenju (1375–1379)", "Kōryaku (1379–1381)", "Kōwa (1381–1384)", "Genchū (1384–1392)", "Meitoku (1384–1387)", "Kakei (1387–1389)", "Kōō (1389–1390)", "Meitoku (1390–1394)", "Ōei (1394–1428)", "Shōchō (1428–1429)", "Eikyō (1429–1441)", "Kakitsu (1441–1444)", "Bun’an (1444–1449)", "Hōtoku (1449–1452)", "Kyōtoku (1452–1455)", "Kōshō (1455–1457)", "Chōroku (1457–1460)", "Kanshō (1460–1466)", "Bunshō (1466–1467)", "Ōnin (1467–1469)", "Bunmei (1469–1487)", "Chōkyō (1487–1489)", "Entoku (1489–1492)", "Meiō (1492–1501)", "Bunki (1501–1504)", "Eishō (1504–1521)", "Taiei (1521–1528)", "Kyōroku (1528–1532)", "Tenbun (1532–1555)", "Kōji (1555–1558)", "Eiroku (1558–1570)", "Genki (1570–1573)", "Tenshō (1573–1592)", "Bunroku (1592–1596)", "Keichō (1596–1615)", "Genna (1615–1624)", "Kan’ei (1624–1644)", "Shōho (1644–1648)", "Keian (1648–1652)", "Jōō (1652–1655)", "Meireki (1655–1658)", "Manji (1658–1661)", "Kanbun (1661–1673)", "Enpō (1673–1681)", "Tenna (1681–1684)", "Jōkyō (1684–1688)", "Genroku (1688–1704)", "Hōei (1704–1711)", "Shōtoku (1711–1716)", "Kyōhō (1716–1736)", "Genbun (1736–1741)", "Kanpō (1741–1744)", "Enkyō (1744–1748)", "Kan’en (1748–1751)", "Hōreki (1751–1764)", "Meiwa (1764–1772)", "An’ei (1772–1781)", "Tenmei (1781–1789)", "Kansei (1789–1801)", "Kyōwa (1801–1804)", "Bunka (1804–1818)", "Bunsei (1818–1830)", "Tenpō (1830–1844)", "Kōka (1844–1848)", "Kaei (1848–1854)", "Ansei (1854–1860)", "Man’en (1860–1861)", "Bunkyū (1861–1864)", "Genji (1864–1865)", "Keiō (1865–1868)", "Meiji", "Taishō", "Shōwa", "Heisei" ], _640x268 = {
    dayParts: _640x228,
    days: _640x263,
    months: _640x263,
    years: _640x263,
    zodiacs: _640x237
}, _640x269 = {
    dateFormats: _640x254,
    datePartsOrder: "dmy",
    dateIntervalFormats: _640x259,
    dateIntervalFallbackFormat: "{0} – {1}",
    dayNames: _640x244,
    dayPeriods: _640x256,
    monthNames: _640x252,
    eraNames: _640x42,
    quarterNames: _640x229,
    fields: _640x265
}, _640x270 = {
    dateFormats: _640x257,
    datePartsOrder: "dm",
    dateIntervalFormats: _640x258,
    dateIntervalFallbackFormat: "{0} – {1}",
    dayNames: _640x244,
    dayPeriods: _640x256,
    cyclicNames: _640x268,
    monthNames: _640x253,
    monthPatterns: _640x220,
    quarterNames: _640x229,
    fields: _640x265
};

inter.id = "en_at";

inter.unitPatterns = {
    "long": {
        unit: {
            accelerationMeterPerSecondSquared: {
                one: "{0} metre per second squared",
                other: "{0} metres per second squared"
            },
            areaSquareKilometer: {
                one: "{0} square kilometre",
                other: "{0} square kilometres"
            },
            areaSquareMeter: {
                one: "{0} square metre",
                other: "{0} square metres"
            },
            areaSquareCentimeter: {
                one: "{0} square centimetre",
                other: "{0} square centimetres"
            },
            concentrMilligramPerDeciliter: {
                one: "{0} milligram per decilitre",
                other: "{0} milligrams per decilitre"
            },
            concentrMillimolePerLiter: {
                one: "{0} millimole per litre",
                other: "{0} millimoles per litre"
            },
            consumptionLiterPerKilometer: {
                one: "{0} litre per kilometre",
                other: "{0} litres per kilometre"
            },
            "consumptionLiterPer-100kilometers": {
                one: "{0} litre per 100 kilometres",
                other: "{0} litres per 100 kilometres"
            },
            consumptionMilePerGallon: {
                one: "{0} mile per US gallon",
                other: "{0} miles per US gallon"
            },
            consumptionMilePerGallonImperial: {
                one: "{0} mile per gallon",
                other: "{0} miles per gallon"
            },
            lengthKilometer: {
                one: "{0} kilometre",
                other: "{0} kilometres"
            },
            lengthMeter: {
                one: "{0} metre",
                other: "{0} metres"
            },
            lengthDecimeter: {
                one: "{0} decimetre",
                other: "{0} decimetres"
            },
            lengthCentimeter: {
                one: "{0} centimetre",
                other: "{0} centimetres"
            },
            lengthMillimeter: {
                one: "{0} millimetre",
                other: "{0} millimetres"
            },
            lengthMicrometer: {
                one: "{0} micrometre",
                other: "{0} micrometres"
            },
            lengthNanometer: {
                one: "{0} nanometre",
                other: "{0} nanometres"
            },
            lengthPicometer: {
                one: "{0} picometre",
                other: "{0} picometres"
            },
            pressureMillimeterOfMercury: {
                one: "{0} millimetre of mercury",
                other: "{0} millimetres of mercury"
            },
            speedKilometerPerHour: {
                one: "{0} kilometre per hour",
                other: "{0} kilometres per hour"
            },
            speedMeterPerSecond: {
                one: "{0} metre per second",
                other: "{0} metres per second"
            },
            volumeCubicKilometer: {
                one: "{0} cubic kilometre",
                other: "{0} cubic kilometres"
            },
            volumeCubicMeter: {
                one: "{0} cubic metre",
                other: "{0} cubic metres"
            },
            volumeCubicCentimeter: {
                one: "{0} cubic centimetre",
                other: "{0} cubic centimetres"
            },
            volumeMegaliter: {
                one: "{0} megalitre",
                other: "{0} megalitres"
            },
            volumeHectoliter: {
                one: "{0} hectolitre",
                other: "{0} hectolitres"
            },
            volumeLiter: {
                one: "{0} litre",
                other: "{0} litres"
            },
            volumeDeciliter: {
                one: "{0} decilitre",
                other: "{0} decilitres"
            },
            volumeCentiliter: {
                one: "{0} centilitre",
                other: "{0} centilitres"
            },
            volumeMilliliter: {
                one: "{0} millilitre",
                other: "{0} millilitres"
            },
            volumeGallon: {
                one: "{0} US gallon",
                other: "{0} US gallons"
            },
            volumeGallonImperial: {
                one: "{0} gallon",
                other: "{0} gallons"
            },
            accelerationGForce: {
                one: "{0} g-force",
                other: "{0} g-force"
            },
            angleRevolution: {
                one: "{0} revolution",
                other: "{0} revolutions"
            },
            angleRadian: {
                one: "{0} radian",
                other: "{0} radians"
            },
            angleDegree: {
                one: "{0} degree",
                other: "{0} degrees"
            },
            angleArcMinute: {
                one: "{0} arcminute",
                other: "{0} arcminutes"
            },
            angleArcSecond: {
                one: "{0} arcsecond",
                other: "{0} arcseconds"
            },
            areaHectare: {
                one: "{0} hectare",
                other: "{0} hectares"
            },
            areaSquareMile: {
                one: "{0} square mile",
                other: "{0} square miles"
            },
            areaAcre: {
                one: "{0} acre",
                other: "{0} acres"
            },
            areaSquareYard: {
                one: "{0} square yard",
                other: "{0} square yards"
            },
            areaSquareFoot: {
                one: "{0} square foot",
                other: "{0} square feet"
            },
            areaSquareInch: {
                one: "{0} square inch",
                other: "{0} square inches"
            },
            concentrKarat: {
                one: "{0} karat",
                other: "{0} karats"
            },
            concentrPartPerMillion: {
                one: "{0} part per million",
                other: "{0} parts per million"
            },
            digitalTerabyte: {
                one: "{0} terabyte",
                other: "{0} terabytes"
            },
            digitalTerabit: {
                one: "{0} terabit",
                other: "{0} terabits"
            },
            digitalGigabyte: {
                one: "{0} gigabyte",
                other: "{0} gigabytes"
            },
            digitalGigabit: {
                one: "{0} gigabit",
                other: "{0} gigabits"
            },
            digitalMegabyte: {
                one: "{0} megabyte",
                other: "{0} megabytes"
            },
            digitalMegabit: {
                one: "{0} megabit",
                other: "{0} megabits"
            },
            digitalKilobyte: {
                one: "{0} kilobyte",
                other: "{0} kilobytes"
            },
            digitalKilobit: {
                one: "{0} kilobit",
                other: "{0} kilobits"
            },
            digitalByte: {
                one: "{0} byte",
                other: "{0} bytes"
            },
            digitalBit: {
                one: "{0} bit",
                other: "{0} bits"
            },
            durationCentury: {
                one: "{0} century",
                other: "{0} centuries"
            },
            durationYear: {
                one: "{0} year",
                other: "{0} years"
            },
            durationMonth: {
                one: "{0} month",
                other: "{0} months"
            },
            durationWeek: {
                one: "{0} week",
                other: "{0} weeks"
            },
            durationDay: _640x41,
            durationHour: {
                one: "{0} hour",
                other: "{0} hours"
            },
            durationMinute: {
                one: "{0} minute",
                other: "{0} minutes"
            },
            durationSecond: {
                one: "{0} second",
                other: "{0} seconds"
            },
            durationMillisecond: {
                one: "{0} millisecond",
                other: "{0} milliseconds"
            },
            durationMicrosecond: {
                one: "{0} microsecond",
                other: "{0} microseconds"
            },
            durationNanosecond: {
                one: "{0} nanosecond",
                other: "{0} nanoseconds"
            },
            electricAmpere: {
                one: "{0} ampere",
                other: "{0} amperes"
            },
            electricMilliampere: {
                one: "{0} milliampere",
                other: "{0} milliamperes"
            },
            electricOhm: {
                one: "{0} ohm",
                other: "{0} ohms"
            },
            electricVolt: {
                one: "{0} volt",
                other: "{0} volts"
            },
            energyKilocalorie: {
                one: "{0} kilocalorie",
                other: "{0} kilocalories"
            },
            energyCalorie: {
                one: "{0} calorie",
                other: "{0} calories"
            },
            energyFoodcalorie: {
                one: "{0} Calorie",
                other: "{0} Calories"
            },
            energyKilojoule: {
                one: "{0} kilojoule",
                other: "{0} kilojoules"
            },
            energyJoule: {
                one: "{0} joule",
                other: "{0} joules"
            },
            energyKilowattHour: {
                one: "{0} kilowatt hour",
                other: "{0} kilowatt-hours"
            },
            frequencyGigahertz: {
                one: "{0} gigahertz",
                other: "{0} gigahertz"
            },
            frequencyMegahertz: {
                one: "{0} megahertz",
                other: "{0} megahertz"
            },
            frequencyKilohertz: {
                one: "{0} kilohertz",
                other: "{0} kilohertz"
            },
            frequencyHertz: {
                one: "{0} hertz",
                other: "{0} hertz"
            },
            lengthMile: {
                one: "{0} mile",
                other: "{0} miles"
            },
            lengthYard: {
                one: "{0} yard",
                other: "{0} yards"
            },
            lengthFoot: {
                one: "{0} foot",
                other: "{0} feet"
            },
            lengthInch: {
                one: "{0} inch",
                other: "{0} inches"
            },
            lengthParsec: {
                one: "{0} parsec",
                other: "{0} parsecs"
            },
            lengthLightYear: {
                one: "{0} light year",
                other: "{0} light years"
            },
            lengthAstronomicalUnit: {
                one: "{0} astronomical unit",
                other: "{0} astronomical units"
            },
            lengthFurlong: {
                one: "{0} furlong",
                other: "{0} furlongs"
            },
            lengthFathom: {
                one: "{0} fathom",
                other: "{0} fathoms"
            },
            lengthNauticalMile: {
                one: "{0} nautical mile",
                other: "{0} nautical miles"
            },
            lengthMileScandinavian: {
                one: "{0} mile-scandinavian",
                other: "{0} miles-scandinavian"
            },
            lightLux: {
                one: "{0} lux",
                other: "{0} lux"
            },
            massMetricTon: {
                one: "{0} metric ton",
                other: "{0} metric tons"
            },
            massKilogram: {
                one: "{0} kilogram",
                other: "{0} kilograms"
            },
            massGram: {
                one: "{0} gram",
                other: "{0} grams"
            },
            massMilligram: {
                one: "{0} milligram",
                other: "{0} milligrams"
            },
            massMicrogram: {
                one: "{0} microgram",
                other: "{0} micrograms"
            },
            massTon: {
                one: "{0} ton",
                other: "{0} tons"
            },
            massStone: {
                one: "{0} stone",
                other: "{0} stones"
            },
            massPound: {
                one: "{0} pound",
                other: "{0} pounds"
            },
            massOunce: {
                one: "{0} ounce",
                other: "{0} ounces"
            },
            massOunceTroy: {
                one: "{0} troy ounce",
                other: "{0} troy ounces"
            },
            massCarat: {
                one: "{0} carat",
                other: "{0} carats"
            },
            powerGigawatt: {
                one: "{0} gigawatt",
                other: "{0} gigawatts"
            },
            powerMegawatt: {
                one: "{0} megawatt",
                other: "{0} megawatts"
            },
            powerKilowatt: {
                one: "{0} kilowatt",
                other: "{0} kilowatts"
            },
            powerWatt: {
                one: "{0} watt",
                other: "{0} watts"
            },
            powerMilliwatt: {
                one: "{0} milliwatt",
                other: "{0} milliwatts"
            },
            powerHorsepower: {
                one: "{0} horsepower",
                other: "{0} horsepower"
            },
            pressureHectopascal: {
                one: "{0} hectopascal",
                other: "{0} hectopascals"
            },
            pressurePoundPerSquareInch: {
                one: "{0} pound per square inch",
                other: "{0} pounds per square inch"
            },
            pressureInchHg: {
                one: "{0} inch of mercury",
                other: "{0} inches of mercury"
            },
            pressureMillibar: {
                one: "{0} millibar",
                other: "{0} millibars"
            },
            speedMilePerHour: {
                one: "{0} mile per hour",
                other: "{0} miles per hour"
            },
            speedKnot: {
                one: "{0} knot",
                other: "{0} knots"
            },
            temperatureCelsius: {
                one: "{0} degree Celsius",
                other: "{0} degrees Celsius"
            },
            temperatureFahrenheit: {
                one: "{0} degree Fahrenheit",
                other: "{0} degrees Fahrenheit"
            },
            temperatureKelvin: {
                one: "{0} kelvin",
                other: "{0} kelvins"
            },
            volumeCubicMile: {
                one: "{0} cubic mile",
                other: "{0} cubic miles"
            },
            volumeCubicYard: {
                one: "{0} cubic yard",
                other: "{0} cubic yards"
            },
            volumeCubicFoot: {
                one: "{0} cubic foot",
                other: "{0} cubic feet"
            },
            volumeCubicInch: {
                one: "{0} cubic inch",
                other: "{0} cubic inches"
            },
            volumePintMetric: {
                one: "{0} metric pint",
                other: "{0} metric pints"
            },
            volumeCupMetric: {
                one: "{0} metric cup",
                other: "{0} metric cups"
            },
            volumeAcreFoot: {
                one: "{0} acre-foot",
                other: "{0} acre-feet"
            },
            volumeBushel: {
                one: "{0} bushel",
                other: "{0} bushels"
            },
            volumeQuart: {
                one: "{0} quart",
                other: "{0} quarts"
            },
            volumePint: {
                one: "{0} pint",
                other: "{0} pints"
            },
            volumeCup: {
                one: "{0} cup",
                other: "{0} cups"
            },
            volumeFluidOunce: {
                one: "{0} fluid ounce",
                other: "{0} fluid ounces"
            },
            volumeTablespoon: {
                one: "{0} tablespoon",
                other: "{0} tablespoons"
            },
            volumeTeaspoon: {
                one: "{0} teaspoon",
                other: "{0} teaspoons"
            }
        },
        compoundUnit: {
            per: "{0} per {1}"
        }
    },
    "short": {
        unit: {
            concentrMilligramPerDeciliter: {
                one: "{0} mg/dl",
                other: "{0} mg/dl"
            },
            concentrMillimolePerLiter: {
                one: "{0} mmol/l",
                other: "{0} mmol/l"
            },
            consumptionLiterPerKilometer: {
                one: "{0} l/km",
                other: "{0} l/km"
            },
            "consumptionLiterPer-100kilometers": {
                one: "{0} l/100 km",
                other: "{0} l/100 km"
            },
            consumptionMilePerGallon: {
                one: "{0} mpg US",
                other: "{0} mpg US"
            },
            consumptionMilePerGallonImperial: {
                one: "{0} mpg",
                other: "{0} mpg"
            },
            durationHour: {
                one: "{0} hr",
                other: "{0} hrs"
            },
            durationMinute: {
                one: "{0} min",
                other: "{0} mins"
            },
            durationSecond: {
                one: "{0} sec",
                other: "{0} secs"
            },
            volumeMegaliter: {
                one: "{0} Ml",
                other: "{0} Ml"
            },
            volumeHectoliter: {
                one: "{0} hl",
                other: "{0} hl"
            },
            volumeLiter: {
                one: "{0} l",
                other: "{0} l"
            },
            volumeDeciliter: {
                one: "{0} dl",
                other: "{0} dl"
            },
            volumeCentiliter: {
                one: "{0} cl",
                other: "{0} cl"
            },
            volumeMilliliter: {
                one: "{0} ml",
                other: "{0} ml"
            },
            volumeGallon: {
                one: "{0} gal US",
                other: "{0} gal US"
            },
            volumeGallonImperial: {
                one: "{0} gal",
                other: "{0} gal"
            },
            accelerationGForce: {
                one: "{0} G",
                other: "{0} G"
            },
            accelerationMeterPerSecondSquared: {
                one: "{0} m/s²",
                other: "{0} m/s²"
            },
            angleRevolution: {
                one: "{0} rev",
                other: "{0} rev"
            },
            angleRadian: {
                one: "{0} rad",
                other: "{0} rad"
            },
            angleDegree: {
                one: "{0} deg",
                other: "{0} deg"
            },
            angleArcMinute: {
                one: "{0} arcmin",
                other: "{0} arcmins"
            },
            angleArcSecond: {
                one: "{0} arcsec",
                other: "{0} arcsecs"
            },
            areaSquareKilometer: {
                one: "{0} km²",
                other: "{0} km²"
            },
            areaHectare: {
                one: "{0} ha",
                other: "{0} ha"
            },
            areaSquareMeter: {
                one: "{0} m²",
                other: "{0} m²"
            },
            areaSquareCentimeter: {
                one: "{0} cm²",
                other: "{0} cm²"
            },
            areaSquareMile: {
                one: "{0} sq mi",
                other: "{0} sq mi"
            },
            areaAcre: {
                one: "{0} ac",
                other: "{0} ac"
            },
            areaSquareYard: {
                one: "{0} yd²",
                other: "{0} yd²"
            },
            areaSquareFoot: {
                one: "{0} sq ft",
                other: "{0} sq ft"
            },
            areaSquareInch: {
                one: "{0} in²",
                other: "{0} in²"
            },
            concentrKarat: {
                one: "{0} kt",
                other: "{0} kt"
            },
            concentrPartPerMillion: {
                one: "{0} ppm",
                other: "{0} ppm"
            },
            digitalTerabyte: {
                one: "{0} TB",
                other: "{0} TB"
            },
            digitalTerabit: {
                one: "{0} Tb",
                other: "{0} Tb"
            },
            digitalGigabyte: {
                one: "{0} GB",
                other: "{0} GB"
            },
            digitalGigabit: {
                one: "{0} Gb",
                other: "{0} Gb"
            },
            digitalMegabyte: {
                one: "{0} MB",
                other: "{0} MB"
            },
            digitalMegabit: {
                one: "{0} Mb",
                other: "{0} Mb"
            },
            digitalKilobyte: {
                one: "{0} kB",
                other: "{0} kB"
            },
            digitalKilobit: {
                one: "{0} kb",
                other: "{0} kb"
            },
            digitalByte: {
                one: "{0} byte",
                other: "{0} byte"
            },
            digitalBit: {
                one: "{0} bit",
                other: "{0} bit"
            },
            durationCentury: _640x31,
            durationYear: {
                one: "{0} yr",
                other: "{0} yrs"
            },
            durationMonth: {
                one: "{0} mth",
                other: "{0} mths"
            },
            durationWeek: {
                one: "{0} wk",
                other: "{0} wks"
            },
            durationDay: _640x41,
            durationMillisecond: {
                one: "{0} ms",
                other: "{0} ms"
            },
            durationMicrosecond: {
                one: "{0} μs",
                other: "{0} μs"
            },
            durationNanosecond: {
                one: "{0} ns",
                other: "{0} ns"
            },
            electricAmpere: {
                one: "{0} A",
                other: "{0} A"
            },
            electricMilliampere: {
                one: "{0} mA",
                other: "{0} mA"
            },
            electricOhm: {
                one: "{0} Ω",
                other: "{0} Ω"
            },
            electricVolt: {
                one: "{0} V",
                other: "{0} V"
            },
            energyKilocalorie: {
                one: "{0} kcal",
                other: "{0} kcal"
            },
            energyCalorie: {
                one: "{0} cal",
                other: "{0} cal"
            },
            energyFoodcalorie: {
                one: "{0} Cal",
                other: "{0} Cal"
            },
            energyKilojoule: {
                one: "{0} kJ",
                other: "{0} kJ"
            },
            energyJoule: {
                one: "{0} J",
                other: "{0} J"
            },
            energyKilowattHour: {
                one: "{0} kWh",
                other: "{0} kWh"
            },
            frequencyGigahertz: {
                one: "{0} GHz",
                other: "{0} GHz"
            },
            frequencyMegahertz: {
                one: "{0} MHz",
                other: "{0} MHz"
            },
            frequencyKilohertz: {
                one: "{0} kHz",
                other: "{0} kHz"
            },
            frequencyHertz: {
                one: "{0} Hz",
                other: "{0} Hz"
            },
            lengthKilometer: {
                one: "{0} km",
                other: "{0} km"
            },
            lengthMeter: {
                one: "{0} m",
                other: "{0} m"
            },
            lengthDecimeter: {
                one: "{0} dm",
                other: "{0} dm"
            },
            lengthCentimeter: {
                one: "{0} cm",
                other: "{0} cm"
            },
            lengthMillimeter: {
                one: "{0} mm",
                other: "{0} mm"
            },
            lengthMicrometer: {
                one: "{0} µm",
                other: "{0} µm"
            },
            lengthNanometer: {
                one: "{0} nm",
                other: "{0} nm"
            },
            lengthPicometer: {
                one: "{0} pm",
                other: "{0} pm"
            },
            lengthMile: {
                one: "{0} mi",
                other: "{0} mi"
            },
            lengthYard: {
                one: "{0} yd",
                other: "{0} yd"
            },
            lengthFoot: {
                one: "{0} ft",
                other: "{0} ft"
            },
            lengthInch: {
                one: "{0} in",
                other: "{0} in"
            },
            lengthParsec: {
                one: "{0} pc",
                other: "{0} pc"
            },
            lengthLightYear: {
                one: "{0} ly",
                other: "{0} ly"
            },
            lengthAstronomicalUnit: {
                one: "{0} au",
                other: "{0} au"
            },
            lengthFurlong: {
                one: "{0} fur",
                other: "{0} fur"
            },
            lengthFathom: {
                one: "{0} ftm",
                other: "{0} ftm"
            },
            lengthNauticalMile: {
                one: "{0} nmi",
                other: "{0} nmi"
            },
            lengthMileScandinavian: {
                one: "{0} smi",
                other: "{0} smi"
            },
            lightLux: {
                one: "{0} lx",
                other: "{0} lx"
            },
            massMetricTon: {
                one: "{0} t",
                other: "{0} t"
            },
            massKilogram: {
                one: "{0} kg",
                other: "{0} kg"
            },
            massGram: {
                one: "{0} g",
                other: "{0} g"
            },
            massMilligram: {
                one: "{0} mg",
                other: "{0} mg"
            },
            massMicrogram: {
                one: "{0} µg",
                other: "{0} µg"
            },
            massTon: {
                one: "{0} tn",
                other: "{0} tn"
            },
            massStone: {
                one: "{0} st",
                other: "{0} st"
            },
            massPound: {
                one: "{0} lb",
                other: "{0} lb"
            },
            massOunce: {
                one: "{0} oz",
                other: "{0} oz"
            },
            massOunceTroy: {
                one: "{0} oz t",
                other: "{0} oz t"
            },
            massCarat: {
                one: "{0} CD",
                other: "{0} CD"
            },
            powerGigawatt: {
                one: "{0} GW",
                other: "{0} GW"
            },
            powerMegawatt: {
                one: "{0} MW",
                other: "{0} MW"
            },
            powerKilowatt: {
                one: "{0} kW",
                other: "{0} kW"
            },
            powerWatt: {
                one: "{0} W",
                other: "{0} W"
            },
            powerMilliwatt: {
                one: "{0} mW",
                other: "{0} mW"
            },
            powerHorsepower: {
                one: "{0} hp",
                other: "{0} hp"
            },
            pressureHectopascal: {
                one: "{0} hPa",
                other: "{0} hPa"
            },
            pressureMillimeterOfMercury: {
                one: "{0} mm Hg",
                other: "{0} mm Hg"
            },
            pressurePoundPerSquareInch: {
                one: "{0} psi",
                other: "{0} psi"
            },
            pressureInchHg: {
                one: "{0} inHg",
                other: "{0} inHg"
            },
            pressureMillibar: {
                one: "{0} mbar",
                other: "{0} mbar"
            },
            speedKilometerPerHour: {
                one: "{0} kph",
                other: "{0} kph"
            },
            speedMeterPerSecond: {
                one: "{0} m/s",
                other: "{0} m/s"
            },
            speedMilePerHour: {
                one: "{0} mph",
                other: "{0} mph"
            },
            speedKnot: {
                one: "{0} kn",
                other: "{0} kn"
            },
            temperatureCelsius: {
                one: "{0}°C",
                other: "{0}°C"
            },
            temperatureFahrenheit: _640x32,
            temperatureKelvin: {
                one: "{0} K",
                other: "{0} K"
            },
            volumeCubicKilometer: {
                one: "{0} km³",
                other: "{0} km³"
            },
            volumeCubicMeter: {
                one: "{0} m³",
                other: "{0} m³"
            },
            volumeCubicCentimeter: {
                one: "{0} cm³",
                other: "{0} cm³"
            },
            volumeCubicMile: {
                one: "{0} mi³",
                other: "{0} mi³"
            },
            volumeCubicYard: {
                one: "{0} yd³",
                other: "{0} yd³"
            },
            volumeCubicFoot: {
                one: "{0} ft³",
                other: "{0} ft³"
            },
            volumeCubicInch: {
                one: "{0} in³",
                other: "{0} in³"
            },
            volumePintMetric: {
                one: "{0} mpt",
                other: "{0} mpt"
            },
            volumeCupMetric: {
                one: "{0} mc",
                other: "{0} mc"
            },
            volumeAcreFoot: {
                one: "{0} ac ft",
                other: "{0} ac ft"
            },
            volumeBushel: {
                one: "{0} bu",
                other: "{0} bu"
            },
            volumeQuart: {
                one: "{0} qt",
                other: "{0} qt"
            },
            volumePint: {
                one: "{0} pt",
                other: "{0} pt"
            },
            volumeCup: _640x31,
            volumeFluidOunce: {
                one: "{0} fl oz",
                other: "{0} fl oz"
            },
            volumeTablespoon: {
                one: "{0} tbsp",
                other: "{0} tbsp"
            },
            volumeTeaspoon: {
                one: "{0} tsp",
                other: "{0} tsp"
            },
            temperatureGeneric: {
                other: "{0}°"
            }
        },
        compoundUnit: {
            per: "{0}/{1}"
        }
    },
    narrow: {
        unit: {
            concentrMilligramPerDeciliter: {
                one: "{0}mg/dl",
                other: "{0}mg/dl"
            },
            concentrMillimolePerLiter: {
                one: "{0}mmol/l",
                other: "{0}mmol/l"
            },
            consumptionLiterPerKilometer: {
                one: "{0}l/km",
                other: "{0}l/km"
            },
            "consumptionLiterPer-100kilometers": {
                one: "{0}l/100km",
                other: "{0}l/100km"
            },
            consumptionMilePerGallon: {
                one: "{0}mpgUS",
                other: "{0}mpgUS"
            },
            consumptionMilePerGallonImperial: {
                one: "{0}mpg",
                other: "{0}mpg"
            },
            massPound: {
                one: "{0}lb",
                other: "{0}lb"
            },
            temperatureCelsius: _640x17,
            temperatureFahrenheit: _640x32,
            volumeMegaliter: {
                one: "{0}Ml",
                other: "{0}Ml"
            },
            volumeHectoliter: {
                one: "{0}hl",
                other: "{0}hl"
            },
            volumeLiter: {
                one: "{0}l",
                other: "{0}l"
            },
            volumeDeciliter: {
                one: "{0}dl",
                other: "{0}dl"
            },
            volumeCentiliter: {
                one: "{0}cl",
                other: "{0}cl"
            },
            volumeMilliliter: {
                one: "{0}ml",
                other: "{0}ml"
            },
            volumeGallon: {
                one: "{0}galUS",
                other: "{0}galUS"
            },
            volumeGallonImperial: {
                one: "{0}gal",
                other: "{0}gal"
            },
            accelerationGForce: {
                one: "{0}G",
                other: "{0}Gs"
            },
            accelerationMeterPerSecondSquared: {
                one: "{0}m/s²",
                other: "{0}m/s²"
            },
            angleRevolution: {
                one: "{0}rev",
                other: "{0}rev"
            },
            angleRadian: {
                one: "{0}rad",
                other: "{0}rad"
            },
            angleDegree: _640x17,
            angleArcMinute: _640x18,
            angleArcSecond: _640x19,
            areaHectare: {
                one: "{0}ha",
                other: "{0}ha"
            },
            areaSquareCentimeter: {
                one: "{0}cm²",
                other: "{0}cm²"
            },
            areaSquareMile: {
                one: "{0}mi²",
                other: "{0}mi²"
            },
            areaAcre: {
                one: "{0}ac",
                other: "{0}ac"
            },
            areaSquareYard: {
                one: "{0}yd²",
                other: "{0}yd²"
            },
            areaSquareFoot: {
                one: "{0}ft²",
                other: "{0}ft²"
            },
            areaSquareInch: {
                one: "{0}in²",
                other: "{0}in²"
            },
            concentrKarat: {
                one: "{0}kt",
                other: "{0}kt"
            },
            concentrPartPerMillion: {
                one: "{0}ppm",
                other: "{0}ppm"
            },
            digitalTerabyte: {
                one: "{0}TB",
                other: "{0}TB"
            },
            digitalTerabit: {
                one: "{0}Tb",
                other: "{0}Tb"
            },
            digitalGigabyte: {
                one: "{0}GB",
                other: "{0}GB"
            },
            digitalGigabit: {
                one: "{0}Gb",
                other: "{0}Gb"
            },
            digitalMegabyte: {
                one: "{0}MB",
                other: "{0}MB"
            },
            digitalMegabit: {
                one: "{0}Mb",
                other: "{0}Mb"
            },
            digitalKilobyte: {
                one: "{0}kB",
                other: "{0}kB"
            },
            digitalKilobit: {
                one: "{0}kb",
                other: "{0}kb"
            },
            digitalByte: {
                one: "{0}byte",
                other: "{0}byte"
            },
            digitalBit: {
                one: "{0}bit",
                other: "{0}bit"
            },
            durationYear: {
                one: "{0}y",
                other: "{0}y"
            },
            durationMonth: _640x20,
            durationWeek: {
                one: "{0}w",
                other: "{0}w"
            },
            durationDay: {
                one: "{0}d",
                other: "{0}d"
            },
            durationHour: {
                one: "{0}h",
                other: "{0}h"
            },
            durationMinute: _640x20,
            durationSecond: {
                one: "{0}s",
                other: "{0}s"
            },
            durationMillisecond: {
                one: "{0}ms",
                other: "{0}ms"
            },
            durationMicrosecond: {
                one: "{0}μs",
                other: "{0}μs"
            },
            durationNanosecond: {
                one: "{0}ns",
                other: "{0}ns"
            },
            electricAmpere: {
                one: "{0}A",
                other: "{0}A"
            },
            electricMilliampere: {
                one: "{0}mA",
                other: "{0}mA"
            },
            electricOhm: {
                one: "{0}Ω",
                other: "{0}Ω"
            },
            electricVolt: {
                one: "{0}V",
                other: "{0}V"
            },
            energyKilocalorie: {
                one: "{0}kcal",
                other: "{0}kcal"
            },
            energyCalorie: {
                one: "{0}cal",
                other: "{0}cal"
            },
            energyFoodcalorie: {
                one: "{0}Cal",
                other: "{0}Cal"
            },
            energyKilojoule: {
                one: "{0}kJ",
                other: "{0}kJ"
            },
            energyJoule: {
                one: "{0}J",
                other: "{0}J"
            },
            energyKilowattHour: {
                one: "{0}kWh",
                other: "{0}kWh"
            },
            frequencyGigahertz: {
                one: "{0}GHz",
                other: "{0}GHz"
            },
            frequencyMegahertz: {
                one: "{0}MHz",
                other: "{0}MHz"
            },
            frequencyKilohertz: {
                one: "{0}kHz",
                other: "{0}kHz"
            },
            frequencyHertz: {
                one: "{0}Hz",
                other: "{0}Hz"
            },
            lengthKilometer: {
                one: "{0}km",
                other: "{0}km"
            },
            lengthMeter: _640x20,
            lengthDecimeter: {
                one: "{0}dm",
                other: "{0}dm"
            },
            lengthCentimeter: {
                one: "{0}cm",
                other: "{0}cm"
            },
            lengthMillimeter: {
                one: "{0}mm",
                other: "{0}mm"
            },
            lengthMicrometer: {
                one: "{0}µm",
                other: "{0}µm"
            },
            lengthNanometer: {
                one: "{0}nm",
                other: "{0}nm"
            },
            lengthPicometer: {
                one: "{0}pm",
                other: "{0}pm"
            },
            lengthMile: {
                one: "{0}mi",
                other: "{0}mi"
            },
            lengthYard: {
                one: "{0}yd",
                other: "{0}yd"
            },
            lengthFoot: _640x18,
            lengthInch: _640x19,
            lengthParsec: {
                one: "{0}pc",
                other: "{0}pc"
            },
            lengthLightYear: {
                one: "{0}ly",
                other: "{0}ly"
            },
            lengthAstronomicalUnit: {
                one: "{0}au",
                other: "{0}au"
            },
            lengthFurlong: {
                one: "{0}fur",
                other: "{0}fur"
            },
            lengthFathom: {
                one: "{0}fm",
                other: "{0}fm"
            },
            lengthNauticalMile: {
                one: "{0}nmi",
                other: "{0}nmi"
            },
            lengthMileScandinavian: {
                one: "{0}smi",
                other: "{0}smi"
            },
            lightLux: {
                one: "{0}lx",
                other: "{0}lx"
            },
            massMetricTon: {
                one: "{0}t",
                other: "{0}t"
            },
            massKilogram: {
                one: "{0}kg",
                other: "{0}kg"
            },
            massGram: {
                one: "{0}g",
                other: "{0}g"
            },
            massMilligram: {
                one: "{0}mg",
                other: "{0}mg"
            },
            massMicrogram: {
                one: "{0}µg",
                other: "{0}µg"
            },
            massTon: {
                one: "{0}tn",
                other: "{0}tn"
            },
            massStone: {
                one: "{0}st",
                other: "{0}st"
            },
            massOunce: {
                one: "{0}oz",
                other: "{0}oz"
            },
            massOunceTroy: {
                one: "{0}oz t",
                other: "{0}oz t"
            },
            massCarat: {
                one: "{0}CD",
                other: "{0}CD"
            },
            powerGigawatt: {
                one: "{0}GW",
                other: "{0}GW"
            },
            powerMegawatt: {
                one: "{0}MW",
                other: "{0}MW"
            },
            powerKilowatt: {
                one: "{0}kW",
                other: "{0}kW"
            },
            powerWatt: {
                one: "{0}W",
                other: "{0}W"
            },
            powerMilliwatt: {
                one: "{0}mW",
                other: "{0}mW"
            },
            powerHorsepower: {
                one: "{0}hp",
                other: "{0}hp"
            },
            pressureHectopascal: {
                one: "{0}hPa",
                other: "{0}hPa"
            },
            pressureMillimeterOfMercury: {
                one: "{0}mm Hg",
                other: "{0}mm Hg"
            },
            pressurePoundPerSquareInch: {
                one: "{0}psi",
                other: "{0}psi"
            },
            pressureInchHg: {
                one: "{0}″ Hg",
                other: "{0}″ Hg"
            },
            pressureMillibar: {
                one: "{0}mb",
                other: "{0}mb"
            },
            speedKilometerPerHour: {
                one: "{0}kph",
                other: "{0}kph"
            },
            speedMeterPerSecond: {
                one: "{0}m/s",
                other: "{0}m/s"
            },
            speedMilePerHour: {
                one: "{0}mph",
                other: "{0}mph"
            },
            speedKnot: {
                one: "{0}kn",
                other: "{0}kn"
            },
            temperatureKelvin: {
                one: "{0}K",
                other: "{0}K"
            },
            volumeCubicKilometer: {
                one: "{0}km³",
                other: "{0}km³"
            },
            volumeCubicMeter: {
                one: "{0}m³",
                other: "{0}m³"
            },
            volumeCubicCentimeter: {
                one: "{0}cm³",
                other: "{0}cm³"
            },
            volumeCubicMile: {
                one: "{0}mi³",
                other: "{0}mi³"
            },
            volumeCubicYard: {
                one: "{0}yd³",
                other: "{0}yd³"
            },
            volumeCubicFoot: {
                one: "{0}ft³",
                other: "{0}ft³"
            },
            volumeCubicInch: {
                one: "{0}in³",
                other: "{0}in³"
            },
            volumePintMetric: {
                one: "{0}mpt",
                other: "{0}mpt"
            },
            volumeCupMetric: {
                one: "{0}mc",
                other: "{0}mc"
            },
            volumeAcreFoot: {
                one: "{0}ac ft",
                other: "{0}ac ft"
            },
            volumeBushel: {
                one: "{0}bu",
                other: "{0}bu"
            },
            volumeQuart: {
                one: "{0}qt",
                other: "{0}qt"
            },
            volumePint: {
                one: "{0}pt",
                other: "{0}pt"
            },
            volumeCup: {
                one: "{0}c",
                other: "{0}c"
            },
            volumeFluidOunce: {
                one: "{0}fl oz",
                other: "{0}fl oz"
            },
            volumeTablespoon: {
                one: "{0}tbsp",
                other: "{0}tbsp"
            },
            volumeTeaspoon: {
                one: "{0}tsp",
                other: "{0}tsp"
            }
        }
    }
};

inter.numbers = {
    ahom: {
        symbols: _640x210,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    arab: {
        symbols: {
            decimal: "٫",
            group: "٬",
            list: "؛",
            percentSign: "٪",
            plusSign: "‏+",
            minusSign: "‏-",
            exponential: "اس",
            superscriptingExponent: "×",
            perMille: "؉",
            infinity: "∞",
            nan: "NaN",
            timeSeparator: ":"
        },
        formats: _640x264,
        digits: [ "٠", "١", "٢", "٣", "٤", "٥", "٦", "٧", "٨", "٩" ]
    },
    arabext: {
        symbols: {
            decimal: "٫",
            group: "٬",
            list: "؛",
            percentSign: "٪",
            plusSign: "‎+‎",
            minusSign: "‎-‎",
            exponential: "×۱۰^",
            superscriptingExponent: "×",
            perMille: "؉",
            infinity: "∞",
            nan: "NaN",
            timeSeparator: "٫"
        },
        formats: _640x264,
        digits: [ "۰", "۱", "۲", "۳", "۴", "۵", "۶", "۷", "۸", "۹" ]
    },
    armn: {
        symbols: _640x210,
        digits: "renderArmenianUpper"
    },
    armnlow: {
        symbols: _640x210,
        digits: "renderArmenianLower"
    },
    bali: {
        symbols: _640x210,
        formats: _640x264,
        digits: [ "᭐", "᭑", "᭒", "᭓", "᭔", "᭕", "᭖", "᭗", "᭘", "᭙" ]
    },
    beng: {
        symbols: _640x210,
        formats: _640x264,
        digits: [ "০", "১", "২", "৩", "৪", "৫", "৬", "৭", "৮", "৯" ]
    },
    brah: {
        symbols: _640x210,
        formats: _640x264,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    cakm: {
        symbols: _640x210,
        formats: _640x264,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    cham: {
        symbols: _640x210,
        formats: _640x264,
        digits: [ "꩐", "꩑", "꩒", "꩓", "꩔", "꩕", "꩖", "꩗", "꩘", "꩙" ]
    },
    cyrl: {
        symbols: _640x210,
        digits: "renderCyrillicLower"
    },
    deva: {
        symbols: _640x210,
        formats: _640x264,
        digits: [ "०", "१", "२", "३", "४", "५", "६", "७", "८", "९" ]
    },
    ethi: {
        symbols: _640x210,
        digits: "renderEthiopic"
    },
    finance: _640x216,
    fullwide: {
        symbols: _640x210,
        formats: _640x264,
        digits: [ "０", "１", "２", "３", "４", "５", "６", "７", "８", "９" ]
    },
    geor: {
        symbols: _640x210,
        digits: "renderGeorgian"
    },
    grek: {
        symbols: _640x210,
        digits: "renderGreekUpper"
    },
    greklow: {
        symbols: _640x210,
        digits: "renderGreekLower"
    },
    gujr: {
        symbols: _640x210,
        formats: _640x264,
        digits: [ "૦", "૧", "૨", "૩", "૪", "૫", "૬", "૭", "૮", "૯" ]
    },
    guru: {
        symbols: _640x210,
        formats: _640x264,
        digits: [ "੦", "੧", "੨", "੩", "੪", "੫", "੬", "੭", "੮", "੯" ]
    },
    hanidays: {
        symbols: _640x210,
        digits: "renderSpelloutNumberingDays"
    },
    hanidec: {
        symbols: _640x210,
        formats: _640x264,
        digits: [ "〇", "一", "二", "三", "四", "五", "六", "七", "八", "九" ]
    },
    hans: _640x223,
    hansfin: _640x225,
    hant: _640x223,
    hantfin: _640x225,
    hebr: {
        symbols: _640x210,
        digits: "renderHebrew"
    },
    hmng: {
        symbols: _640x210,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    java: {
        symbols: _640x210,
        formats: _640x264,
        digits: [ "꧐", "꧑", "꧒", "꧓", "꧔", "꧕", "꧖", "꧗", "꧘", "꧙" ]
    },
    jpan: _640x223,
    jpanfin: _640x225,
    kali: {
        symbols: _640x210,
        formats: _640x264,
        digits: [ "꤀", "꤁", "꤂", "꤃", "꤄", "꤅", "꤆", "꤇", "꤈", "꤉" ]
    },
    khmr: {
        symbols: _640x210,
        formats: _640x264,
        digits: [ "០", "១", "២", "៣", "៤", "៥", "៦", "៧", "៨", "៩" ]
    },
    knda: {
        symbols: _640x210,
        formats: _640x264,
        digits: [ "೦", "೧", "೨", "೩", "೪", "೫", "೬", "೭", "೮", "೯" ]
    },
    lana: {
        symbols: _640x210,
        formats: _640x264,
        digits: [ "᪀", "᪁", "᪂", "᪃", "᪄", "᪅", "᪆", "᪇", "᪈", "᪉" ]
    },
    lanatham: {
        symbols: _640x210,
        formats: _640x264,
        digits: [ "᪐", "᪑", "᪒", "᪓", "᪔", "᪕", "᪖", "᪗", "᪘", "᪙" ]
    },
    laoo: {
        symbols: _640x210,
        formats: _640x264,
        digits: [ "໐", "໑", "໒", "໓", "໔", "໕", "໖", "໗", "໘", "໙" ]
    },
    latn: {
        symbols: _640x210,
        formats: _640x264,
        digits: [ "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" ]
    },
    lepc: {
        symbols: _640x210,
        formats: _640x264,
        digits: [ "᱀", "᱁", "᱂", "᱃", "᱄", "᱅", "᱆", "᱇", "᱈", "᱉" ]
    },
    limb: {
        symbols: _640x210,
        formats: _640x264,
        digits: [ "᥆", "᥇", "᥈", "᥉", "᥊", "᥋", "᥌", "᥍", "᥎", "᥏" ]
    },
    mathbold: {
        symbols: _640x210,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathdbl: {
        symbols: _640x210,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathmono: {
        symbols: _640x210,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathsanb: {
        symbols: _640x210,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathsans: {
        symbols: _640x210,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mlym: {
        symbols: _640x210,
        formats: _640x264,
        digits: [ "൦", "൧", "൨", "൩", "൪", "൫", "൬", "൭", "൮", "൯" ]
    },
    modi: {
        symbols: _640x210,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mong: {
        symbols: _640x210,
        formats: _640x264,
        digits: [ "᠐", "᠑", "᠒", "᠓", "᠔", "᠕", "᠖", "᠗", "᠘", "᠙" ]
    },
    mroo: {
        symbols: _640x210,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mtei: {
        symbols: _640x210,
        formats: _640x264,
        digits: [ "꯰", "꯱", "꯲", "꯳", "꯴", "꯵", "꯶", "꯷", "꯸", "꯹" ]
    },
    mymr: {
        symbols: _640x210,
        formats: _640x264,
        digits: [ "၀", "၁", "၂", "၃", "၄", "၅", "၆", "၇", "၈", "၉" ]
    },
    mymrshan: {
        symbols: _640x210,
        formats: _640x264,
        digits: [ "႐", "႑", "႒", "႓", "႔", "႕", "႖", "႗", "႘", "႙" ]
    },
    mymrtlng: {
        symbols: _640x210,
        digits: [ "꧰", "꧱", "꧲", "꧳", "꧴", "꧵", "꧶", "꧷", "꧸", "꧹" ]
    },
    "native": _640x216,
    nkoo: {
        symbols: _640x210,
        formats: _640x264,
        digits: [ "߀", "߁", "߂", "߃", "߄", "߅", "߆", "߇", "߈", "߉" ]
    },
    olck: {
        symbols: _640x210,
        formats: _640x264,
        digits: [ "᱐", "᱑", "᱒", "᱓", "᱔", "᱕", "᱖", "᱗", "᱘", "᱙" ]
    },
    orya: {
        symbols: _640x210,
        formats: _640x264,
        digits: [ "୦", "୧", "୨", "୩", "୪", "୫", "୬", "୭", "୮", "୯" ]
    },
    osma: {
        symbols: _640x210,
        formats: _640x264,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    roman: {
        symbols: _640x210,
        digits: "renderRomanUpper"
    },
    romanlow: {
        symbols: _640x210,
        digits: "renderRomanLower"
    },
    saur: {
        symbols: _640x210,
        formats: _640x264,
        digits: [ "꣐", "꣑", "꣒", "꣓", "꣔", "꣕", "꣖", "꣗", "꣘", "꣙" ]
    },
    shrd: {
        symbols: _640x210,
        formats: _640x264,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    sind: {
        symbols: _640x210,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    sinh: {
        symbols: _640x210,
        digits: [ "෦", "෧", "෨", "෩", "෪", "෫", "෬", "෭", "෮", "෯" ]
    },
    sora: {
        symbols: _640x210,
        formats: _640x264,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    sund: {
        symbols: _640x210,
        formats: _640x264,
        digits: [ "᮰", "᮱", "᮲", "᮳", "᮴", "᮵", "᮶", "᮷", "᮸", "᮹" ]
    },
    takr: {
        symbols: _640x210,
        formats: _640x264,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    talu: {
        symbols: _640x210,
        formats: _640x264,
        digits: [ "᧐", "᧑", "᧒", "᧓", "᧔", "᧕", "᧖", "᧗", "᧘", "᧙" ]
    },
    taml: {
        symbols: _640x210,
        digits: "renderTamil"
    },
    tamldec: {
        symbols: _640x210,
        formats: _640x264,
        digits: [ "௦", "௧", "௨", "௩", "௪", "௫", "௬", "௭", "௮", "௯" ]
    },
    telu: {
        symbols: _640x210,
        formats: _640x264,
        digits: [ "౦", "౧", "౨", "౩", "౪", "౫", "౬", "౭", "౮", "౯" ]
    },
    thai: {
        symbols: _640x210,
        formats: _640x264,
        digits: [ "๐", "๑", "๒", "๓", "๔", "๕", "๖", "๗", "๘", "๙" ]
    },
    tirh: {
        symbols: _640x210,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    tibt: {
        symbols: _640x210,
        formats: _640x264,
        digits: [ "༠", "༡", "༢", "༣", "༤", "༥", "༦", "༧", "༨", "༩" ]
    },
    traditio: _640x216,
    vaii: {
        symbols: _640x210,
        formats: _640x264,
        digits: [ "꘠", "꘡", "꘢", "꘣", "꘤", "꘥", "꘦", "꘧", "꘨", "꘩" ]
    },
    wara: {
        symbols: _640x210,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    }
};

inter.calendars = {
    buddhist: {
        dateFormats: _640x254,
        datePartsOrder: "dmy",
        dateIntervalFormats: _640x259,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _640x244,
        dayPeriods: _640x256,
        monthNames: _640x248,
        eraNames: {
            wide: [ "BE" ],
            abbreviated: [ "BE" ]
        },
        quarterNames: _640x229,
        fields: _640x265
    },
    chinese: _640x270,
    coptic: {
        dateFormats: _640x254,
        datePartsOrder: "dmy",
        dateIntervalFormats: _640x259,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _640x244,
        dayPeriods: _640x256,
        monthNames: {
            format: _640x232,
            standAlone: _640x232
        },
        eraNames: _640x128,
        quarterNames: _640x229,
        fields: _640x265
    },
    dangi: _640x270,
    ethioaa: _640x266,
    ethiopic: {
        dateFormats: _640x254,
        datePartsOrder: "dmy",
        dateIntervalFormats: _640x259,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _640x244,
        dayPeriods: _640x256,
        monthNames: {
            format: _640x235,
            standAlone: _640x235
        },
        eraNames: _640x128,
        quarterNames: _640x229,
        fields: _640x265
    },
    gregorian: {
        dateFormats: {
            basic: {
                fullDate: "EEEE, d MMMM y",
                longDate: "d MMMM y",
                mediumDate: "d MMM y",
                shortDate: "dd/MM/y",
                fullTime: "HH:mm:ss zzzz",
                longTime: "HH:mm:ss z",
                mediumTime: "HH:mm:ss",
                shortTime: "HH:mm",
                shortDateTime: "dd/MM/y, HH:mm",
                mediumDateTime: "d MMM y, HH:mm:ss",
                longDateTime: "d MMMM y 'at' HH:mm:ss z",
                fullDateTime: "EEEE, d MMMM y 'at' HH:mm:ss zzzz"
            },
            cldr: {
                Ed: "E d",
                GyMMMd: "d MMM y G",
                GyMMMEd: "E, d MMM y G",
                Md: "dd/MM",
                MEd: "E, dd/MM",
                MMdd: "dd/MM",
                MMMd: "d MMM",
                MMMEd: "E, d MMM",
                MMMMd: "d MMMM",
                yM: "MM/y",
                yMd: "dd/MM/y",
                yMEd: "E, dd/MM/y",
                yMMMd: "d MMM y",
                yMMMEd: "E, d MMM y",
                d: "d",
                E: "ccc",
                Ehm: "E h:mm a",
                EHm: "E HH:mm",
                Ehms: "E h:mm:ss a",
                EHms: "E HH:mm:ss",
                Gy: "y G",
                GyMMM: "MMM y G",
                h: "h a",
                H: "HH",
                hm: "h:mm a",
                Hm: "HH:mm",
                hms: "h:mm:ss a",
                Hms: "HH:mm:ss",
                hmsv: "h:mm:ss a v",
                Hmsv: "HH:mm:ss v",
                hmv: "h:mm a v",
                Hmv: "HH:mm v",
                M: "L",
                MMM: "LLL",
                ms: "mm:ss",
                y: "y",
                yMMM: "MMM y",
                yMMMM: "MMMM y",
                yQQQ: "QQQ y",
                yQQQQ: "QQQQ y"
            }
        },
        datePartsOrder: "dmy",
        dateIntervalFormats: {
            Md: _640x54,
            MEd: _640x106,
            MMMd: _640x43,
            MMMEd: _640x88,
            yM: _640x44,
            yMd: _640x160,
            yMEd: _640x173,
            yMMMd: _640x152,
            yMMMEd: {
                d: "E, d – E, d MMM y",
                M: "E, d MMM – E, d MMM y",
                y: "E, d MMM y – E, d MMM y"
            },
            d: {
                d: "d – d"
            },
            h: _640x37,
            H: {
                H: "HH – HH"
            },
            hm: _640x139,
            Hm: _640x55,
            hmv: _640x154,
            Hmv: _640x89,
            hv: _640x39,
            Hv: {
                H: "HH – HH v"
            },
            M: {
                M: "M – M"
            },
            MMM: {
                M: "MMM – MMM"
            },
            y: {
                y: "y – y"
            },
            yMMM: _640x48,
            yMMMM: _640x76
        },
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _640x244,
        dayPeriods: _640x256,
        monthNames: _640x248,
        eraNames: {
            wide: [ "Before Christ", "Anno Domini" ],
            abbreviated: [ "BC", "AD" ]
        },
        quarterNames: _640x229,
        fields: _640x265
    },
    hebrew: {
        dateFormats: {
            basic: {
                fullDate: "EEEE, d MMMM y",
                longDate: "d MMMM y",
                mediumDate: "d MMM y",
                shortDate: "d MMM y",
                fullTime: "HH:mm:ss zzzz",
                longTime: "HH:mm:ss z",
                mediumTime: "HH:mm:ss",
                shortTime: "HH:mm",
                shortDateTime: "d MMM y, HH:mm",
                mediumDateTime: "d MMM y, HH:mm:ss",
                longDateTime: "d MMMM y 'at' HH:mm:ss z",
                fullDateTime: "EEEE, d MMMM y 'at' HH:mm:ss zzzz"
            },
            cldr: {
                Gy: "y G",
                GyMMM: "MMM y G",
                GyMMMd: "d MMM y G",
                GyMMMEd: "E, d MMM y G",
                M: "L",
                Md: "d MMM",
                MEd: "E, d MMM",
                MMM: "LLL",
                MMMd: "d MMM",
                MMMEd: "E, d MMM",
                MMMMd: "d MMMM",
                y: "y",
                yM: "MMM y",
                yMd: "d MMM y",
                yMEd: "E, d MMM y",
                yMMM: "MMM y",
                yMMMd: "d MMM y",
                yMMMEd: "E, d MMM y",
                yMMMM: "MMMM y",
                yQQQ: "QQQ y",
                yQQQQ: "QQQQ y",
                Ed: "E d",
                yyyyM: "MM/y GGGGG",
                yyyyMd: "dd/MM/y GGGGG",
                yyyyMEd: "E, dd/MM/y GGGGG",
                yyyyMMMd: "d MMM y G",
                yyyyMMMEd: "E, d MMM y G",
                d: "d",
                E: "ccc",
                Ehm: "E h:mm a",
                EHm: "E HH:mm",
                Ehms: "E h:mm:ss a",
                EHms: "E HH:mm:ss",
                h: "h a",
                H: "HH",
                hm: "h:mm a",
                Hm: "HH:mm",
                hms: "h:mm:ss a",
                Hms: "HH:mm:ss",
                ms: "mm:ss",
                yyyy: "y G",
                yyyyMMM: "MMM y G",
                yyyyMMMM: "MMMM y G",
                yyyyQQQ: "QQQ y G",
                yyyyQQQQ: "QQQQ y G"
            }
        },
        datePartsOrder: "dmy",
        dateIntervalFormats: {
            M: {
                M: "MMM – MMM"
            },
            Md: _640x43,
            MEd: _640x127,
            MMM: {
                M: "MMM – MMM"
            },
            MMMd: _640x43,
            MMMEd: _640x127,
            y: {
                y: "y – y G"
            },
            yM: _640x48,
            yMd: _640x152,
            yMEd: _640x170,
            yMMM: _640x48,
            yMMMd: _640x152,
            yMMMEd: _640x170,
            yMMMM: _640x76,
            d: {
                d: "d – d"
            },
            h: _640x37,
            H: {
                H: "HH – HH"
            },
            hm: _640x139,
            Hm: _640x55,
            hmv: _640x154,
            Hmv: _640x89,
            hv: _640x39,
            Hv: {
                H: "HH – HH v"
            }
        },
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _640x244,
        dayPeriods: _640x256,
        monthNames: {
            format: _640x230,
            standAlone: _640x230
        },
        eraNames: {
            wide: [ "AM" ],
            abbreviated: [ "AM" ]
        },
        quarterNames: _640x229,
        fields: _640x265
    },
    indian: {
        dateFormats: _640x254,
        datePartsOrder: "dmy",
        dateIntervalFormats: _640x259,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _640x244,
        dayPeriods: _640x256,
        monthNames: {
            format: _640x236,
            standAlone: _640x236
        },
        eraNames: {
            wide: [ "Saka" ],
            abbreviated: [ "Saka" ]
        },
        quarterNames: _640x229,
        fields: _640x265
    },
    islamic: _640x269,
    "islamic-umalqura": _640x269,
    "islamic-tbla": _640x269,
    "islamic-civil": _640x269,
    "islamic-rgsa": _640x269,
    iso8601: _640x266,
    japanese: {
        dateFormats: {
            basic: {
                fullDate: "EEEE, MMMM d, y G",
                longDate: "MMMM d, y G",
                mediumDate: "MMM d, y G",
                shortDate: "M/d/y GGGGG",
                fullTime: "HH:mm:ss zzzz",
                longTime: "HH:mm:ss z",
                mediumTime: "HH:mm:ss",
                shortTime: "HH:mm",
                shortDateTime: "M/d/y GGGGG, HH:mm",
                mediumDateTime: "MMM d, y G, HH:mm:ss",
                longDateTime: "MMMM d, y G 'at' HH:mm:ss z",
                fullDateTime: "EEEE, MMMM d, y G 'at' HH:mm:ss zzzz"
            },
            cldr: _640x247
        },
        datePartsOrder: "mdy",
        dateIntervalFormats: _640x259,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _640x244,
        dayPeriods: _640x256,
        monthNames: _640x248,
        eraNames: {
            wide: _640x267,
            abbreviated: _640x267
        },
        quarterNames: _640x229,
        fields: _640x265
    },
    persian: {
        dateFormats: _640x254,
        datePartsOrder: "dmy",
        dateIntervalFormats: _640x259,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _640x244,
        dayPeriods: _640x256,
        monthNames: {
            format: _640x231,
            standAlone: _640x231
        },
        eraNames: {
            wide: [ "AP" ],
            abbreviated: [ "AP" ]
        },
        quarterNames: _640x229,
        fields: _640x265
    },
    roc: {
        dateFormats: _640x254,
        datePartsOrder: "dmy",
        dateIntervalFormats: _640x259,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _640x244,
        dayPeriods: _640x256,
        monthNames: _640x248,
        eraNames: {
            wide: _640x30,
            abbreviated: _640x30
        },
        quarterNames: _640x229,
        fields: _640x265
    },
    islamicc: _640x266
};

inter.pluralRule = function(n) {
    var i = Math.floor(Math.abs(n)), v = n.toString().replace(/^[^.]*\.?/, "").length;
    if (typeof n === "string") n = parseInt(n, 10);
    if (i === 1 && v === 0) return "one";
    return "other";
};

inter.renderDigitsOrdinal = function(n) {
    if (n < 0) return "−" + this.renderDigitsOrdinal(-n);
    if (n >= 0) return this.renderNumber(n, "#,##0") + "ordinal" + "one" + "st" + "two" + "nd" + "few" + "rd" + "other" + "th";
};

inter.renderSpelloutNumbering = function(n) {
    if (n < 0) return "minus " + this.renderSpelloutNumbering(-n);
    if (n >= 0) return this.renderSpelloutCardinal(n);
};

inter.renderArmenianUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderArmenianUpper(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e4) return this.renderNumber(n, "#,##0");
    if (n >= 9e3) return "Ք" + (n === 9e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 8e3) return "Փ" + (n === 8e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 7e3) return "Ւ" + (n === 7e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 6e3) return "Ց" + (n === 6e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 5e3) return "Ր" + (n === 5e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 4e3) return "Տ" + (n === 4e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 3e3) return "Վ" + (n === 3e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 2e3) return "Ս" + (n === 2e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 1e3) return "Ռ" + (n === 1e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 900) return "Ջ" + (n === 900 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 800) return "Պ" + (n === 800 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 700) return "Չ" + (n === 700 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 600) return "Ո" + (n === 600 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 500) return "Շ" + (n === 500 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 400) return "Ն" + (n === 400 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 300) return "Յ" + (n === 300 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 200) return "Մ" + (n === 200 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 100) return "Ճ" + (n === 100 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 90) return "Ղ" + (n === 90 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 80) return "Ձ" + (n === 80 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 70) return "Հ" + (n === 70 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 60) return "Կ" + (n === 60 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 50) return "Ծ" + (n === 50 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 40) return "Խ" + (n === 40 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 30) return "Լ" + (n === 30 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 20) return "Ի" + (n === 20 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 10) return "Ժ" + (n === 10 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 9) return "Թ";
    if (n >= 8) return "Ը";
    if (n >= 7) return "Է";
    if (n >= 6) return "Զ";
    if (n >= 5) return "Ե";
    if (n >= 4) return "Դ";
    if (n >= 3) return "Գ";
    if (n >= 2) return "Բ";
    if (n >= 1) return "Ա";
    if (n >= 0) return "0";
};

inter.renderArmenianLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderArmenianLower(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e4) return this.renderNumber(n, "#,##0");
    if (n >= 9e3) return "ք" + (n === 9e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 8e3) return "փ" + (n === 8e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 7e3) return "ւ" + (n === 7e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 6e3) return "ց" + (n === 6e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 5e3) return "ր" + (n === 5e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 4e3) return "տ" + (n === 4e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 3e3) return "վ" + (n === 3e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 2e3) return "ս" + (n === 2e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 1e3) return "ռ" + (n === 1e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 900) return "ջ" + (n === 900 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 800) return "պ" + (n === 800 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 700) return "չ" + (n === 700 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 600) return "ո" + (n === 600 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 500) return "շ" + (n === 500 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 400) return "ն" + (n === 400 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 300) return "յ" + (n === 300 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 200) return "մ" + (n === 200 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 100) return "ճ" + (n === 100 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 90) return "ղ" + (n === 90 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 80) return "ձ" + (n === 80 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 70) return "հ" + (n === 70 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 60) return "կ" + (n === 60 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 50) return "ծ" + (n === 50 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 40) return "խ" + (n === 40 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 30) return "լ" + (n === 30 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 20) return "ի" + (n === 20 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 10) return "ժ" + (n === 10 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 9) return "թ";
    if (n >= 8) return "ը";
    if (n >= 7) return "է";
    if (n >= 6) return "զ";
    if (n >= 5) return "ե";
    if (n >= 4) return "դ";
    if (n >= 3) return "գ";
    if (n >= 2) return "բ";
    if (n >= 1) return "ա";
    if (n >= 0) return "0";
};

inter.renderCyrillicLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderCyrillicLower(-n);
    if (isFractional && n > 1) return this.renderCyrillicLower(Math.floor(n)) + "." + this.renderCyrillicLower(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e15) return "҂҂҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e15)) + (n === 1e15 ? "" : " " + this.renderCyrillicLower(n % 1e15));
    if (n >= 1e12) return "҂҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e12)) + (n === 1e12 ? "" : " " + this.renderCyrillicLower(n % 1e12));
    if (n >= 1e9) return "҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e9)) + (n === 1e9 ? "" : " " + this.renderCyrillicLower(n % 1e9));
    if (n >= 1e6) return "҂҂" + this.renderCyrillicLower(Math.floor(n / 1e6)) + (n === 1e6 ? "" : " " + this.renderCyrillicLower(n % 1e6));
    if (n >= 11e3) return this.renderCyrillicLowerThousands(Math.floor(n / 1e4)) + (n === 11e3 ? "" : " " + this.renderCyrillicLower(n % 1e4));
    if (n >= 1e4) return "҂" + this.renderCyrillicLower(Math.floor(n / 1e4)) + (n === 1e4 ? "" : " " + this.renderCyrillicLower(n % 1e4));
    if (n >= 1e3) return "҂" + this.renderCyrillicLower110(Math.floor(n / 1e3)) + this.renderCyrillicLowerPost(n % 1e3);
    if (n >= 900) return "ц" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 801) return "ѿ" + this.renderCyrillicLower(n % 100);
    if (n >= 800) return "ѿ҃";
    if (n >= 700) return "ѱ" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 600) return "х" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 500) return "ф" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 400) return "у" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 300) return "т" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 200) return "с" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 100) return "р" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 90) return "ч" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 80) return "п" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 70) return "ѻ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 60) return "ѯ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 50) return "н" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 40) return "м" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 30) return "л" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 20) return "к" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 19) return "ѳ҃і";
    if (n >= 18) return "и҃і";
    if (n >= 17) return "з҃і";
    if (n >= 16) return "ѕ҃і";
    if (n >= 15) return "є҃і";
    if (n >= 14) return "д҃і";
    if (n >= 13) return "г҃і";
    if (n >= 12) return "в҃і";
    if (n >= 11) return "а҃і";
    if (n >= 1) return this.renderCyrillicLower110(n) + "҃";
    if (n >= 0) return "0҃";
};

inter.renderEthiopic = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderEthiopic(-n);
    if (isFractional && n > 1) return this.renderEthiopic(Math.floor(n)) + "፡" + this.renderEthiopic(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,###0");
    if (n >= 2e16) return this.renderEthiopic(Math.floor(n / 1e16)) + "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 1e16) return "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 2e12) return this.renderEthiopic(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1e12) return "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 2e8) return this.renderEthiopic(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1e8) return "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 2e4) return this.renderEthiopic(Math.floor(n / 1e4)) + "፼" + (n === 2e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 1e4) return "፼" + (n === 1e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 200) return this.renderEthiopic(Math.floor(n / 100)) + "፻" + (n === 200 ? "" : this.renderEthiopic(n % 100));
    if (n >= 100) return "፻" + (n === 100 ? "" : this.renderEthiopic(n % 100));
    if (n >= 90) return "፺" + (n === 90 ? "" : this.renderEthiopic(n % 10));
    if (n >= 80) return "፹" + (n === 80 ? "" : this.renderEthiopic(n % 10));
    if (n >= 70) return "፸" + (n === 70 ? "" : this.renderEthiopic(n % 10));
    if (n >= 60) return "፷" + (n === 60 ? "" : this.renderEthiopic(n % 10));
    if (n >= 50) return "፶" + (n === 50 ? "" : this.renderEthiopic(n % 10));
    if (n >= 40) return "፵" + (n === 40 ? "" : this.renderEthiopic(n % 10));
    if (n >= 30) return "፴" + (n === 30 ? "" : this.renderEthiopic(n % 10));
    if (n >= 20) return "፳" + (n === 20 ? "" : this.renderEthiopic(n % 10));
    if (n >= 10) return "፲" + (n === 10 ? "" : this.renderEthiopic(n % 10));
    if (n >= 9) return "፱";
    if (n >= 8) return "፰";
    if (n >= 7) return "፯";
    if (n >= 6) return "፮";
    if (n >= 5) return "፭";
    if (n >= 4) return "፬";
    if (n >= 3) return "፫";
    if (n >= 2) return "፪";
    if (n >= 1) return "፩";
    if (n >= 0) return "ባዶ";
};

inter.renderGeorgian = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGeorgian(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 2e4) return this.renderNumber(n, "#,##0");
    if (n >= 1e4) return "ჯ" + (n === 1e4 ? "" : this.renderGeorgian(n % 1e4));
    if (n >= 9e3) return "ჵ" + (n === 9e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 8e3) return "ჴ" + (n === 8e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 7e3) return "ხ" + (n === 7e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 6e3) return "ჭ" + (n === 6e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 5e3) return "წ" + (n === 5e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 4e3) return "ძ" + (n === 4e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 3e3) return "ც" + (n === 3e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 2e3) return "ჩ" + (n === 2e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 1e3) return "შ" + (n === 1e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 900) return "ყ" + (n === 900 ? "" : this.renderGeorgian(n % 100));
    if (n >= 800) return "ღ" + (n === 800 ? "" : this.renderGeorgian(n % 100));
    if (n >= 700) return "ქ" + (n === 700 ? "" : this.renderGeorgian(n % 100));
    if (n >= 600) return "ფ" + (n === 600 ? "" : this.renderGeorgian(n % 100));
    if (n >= 500) return "ჳ" + (n === 500 ? "" : this.renderGeorgian(n % 100));
    if (n >= 400) return "უ" + (n === 400 ? "" : this.renderGeorgian(n % 100));
    if (n >= 300) return "ტ" + (n === 300 ? "" : this.renderGeorgian(n % 100));
    if (n >= 200) return "ს" + (n === 200 ? "" : this.renderGeorgian(n % 100));
    if (n >= 100) return "რ" + (n === 100 ? "" : this.renderGeorgian(n % 100));
    if (n >= 90) return "ჟ" + (n === 90 ? "" : this.renderGeorgian(n % 10));
    if (n >= 80) return "პ" + (n === 80 ? "" : this.renderGeorgian(n % 10));
    if (n >= 70) return "ო" + (n === 70 ? "" : this.renderGeorgian(n % 10));
    if (n >= 60) return "ჲ" + (n === 60 ? "" : this.renderGeorgian(n % 10));
    if (n >= 50) return "ნ" + (n === 50 ? "" : this.renderGeorgian(n % 10));
    if (n >= 40) return "მ" + (n === 40 ? "" : this.renderGeorgian(n % 10));
    if (n >= 30) return "ლ" + (n === 30 ? "" : this.renderGeorgian(n % 10));
    if (n >= 20) return "კ" + (n === 20 ? "" : this.renderGeorgian(n % 10));
    if (n >= 10) return "ი" + (n === 10 ? "" : this.renderGeorgian(n % 10));
    if (n >= 9) return "თ";
    if (n >= 8) return "ჱ";
    if (n >= 7) return "ზ";
    if (n >= 6) return "ვ";
    if (n >= 5) return "ე";
    if (n >= 4) return "დ";
    if (n >= 3) return "გ";
    if (n >= 2) return "ბ";
    if (n >= 1) return "ა";
    if (n >= 0) return this.renderNumber(n, "#,##0");
};

inter.renderGreekUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGreekUpper(-n);
    if (isFractional && n > 1) return this.renderGreekUpper(Math.floor(n)) + "." + this.renderGreekUpper(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 0) return this.renderGreekNumeralMajuscules(n) + "´";
};

inter.renderGreekLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGreekLower(-n);
    if (isFractional && n > 1) return this.renderGreekLower(Math.floor(n)) + "." + this.renderGreekLower(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 0) return this.renderGreekNumeralMinuscules(n) + "´";
};

inter.renderSpelloutCardinal = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "minus " + this.renderSpelloutCardinal(-n);
    if (isFractional && n > 1) return this.renderSpelloutCardinal(Math.floor(n)) + " point " + this.renderSpelloutCardinal(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e15) return this.renderSpelloutCardinal(Math.floor(n / 1e15)) + " quadrillion" + (n === 1e15 ? "" : " " + this.renderSpelloutCardinal(n % 1e15));
    if (n >= 1e12) return this.renderSpelloutCardinal(Math.floor(n / 1e12)) + " trillion" + (n === 1e12 ? "" : " " + this.renderSpelloutCardinal(n % 1e12));
    if (n >= 1e9) return this.renderSpelloutCardinal(Math.floor(n / 1e9)) + " billion" + (n === 1e9 ? "" : " " + this.renderSpelloutCardinal(n % 1e9));
    if (n >= 1e6) return this.renderSpelloutCardinal(Math.floor(n / 1e6)) + " million" + (n === 1e6 ? "" : " " + this.renderSpelloutCardinal(n % 1e6));
    if (n >= 1e3) return this.renderSpelloutCardinal(Math.floor(n / 1e3)) + " thousand" + (n === 1e3 ? "" : " " + this.renderSpelloutCardinal(n % 1e3));
    if (n >= 100) return this.renderSpelloutCardinal(Math.floor(n / 100)) + " hundred" + (n === 100 ? "" : " " + this.renderSpelloutCardinal(n % 100));
    if (n >= 90) return "ninety" + (n === 90 ? "" : "-" + this.renderSpelloutCardinal(n % 10));
    if (n >= 80) return "eighty" + (n === 80 ? "" : "-" + this.renderSpelloutCardinal(n % 10));
    if (n >= 70) return "seventy" + (n === 70 ? "" : "-" + this.renderSpelloutCardinal(n % 10));
    if (n >= 60) return "sixty" + (n === 60 ? "" : "-" + this.renderSpelloutCardinal(n % 10));
    if (n >= 50) return "fifty" + (n === 50 ? "" : "-" + this.renderSpelloutCardinal(n % 10));
    if (n >= 40) return "forty" + (n === 40 ? "" : "-" + this.renderSpelloutCardinal(n % 10));
    if (n >= 30) return "thirty" + (n === 30 ? "" : "-" + this.renderSpelloutCardinal(n % 10));
    if (n >= 20) return "twenty" + (n === 20 ? "" : "-" + this.renderSpelloutCardinal(n % 10));
    if (n >= 19) return "nineteen";
    if (n >= 18) return "eighteen";
    if (n >= 17) return "seventeen";
    if (n >= 16) return "sixteen";
    if (n >= 15) return "fifteen";
    if (n >= 14) return "fourteen";
    if (n >= 13) return "thirteen";
    if (n >= 12) return "twelve";
    if (n >= 11) return "eleven";
    if (n >= 10) return "ten";
    if (n >= 9) return "nine";
    if (n >= 8) return "eight";
    if (n >= 7) return "seven";
    if (n >= 6) return "six";
    if (n >= 5) return "five";
    if (n >= 4) return "four";
    if (n >= 3) return "three";
    if (n >= 2) return "two";
    if (n >= 1) return "one";
    if (n >= 0) return "zero";
};

inter.renderHebrew = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderHebrew(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1000001) return this.renderNumber(n, "#,##0");
    if (n >= 1e6) return "אלף אלפים";
    if (n >= 3001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 3001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 3e3) return this.renderHebrew(Math.floor(n / 1e3)) + " אלפים";
    if (n >= 2001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 2001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 2e3) return "אלפיים";
    if (n >= 1001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 1001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 1e3) return "אלף";
    if (n >= 901) return "תתק" + this.renderHebrew099(n % 100);
    if (n >= 900) return "תת״ק";
    if (n >= 801) return "תת" + this.renderHebrew099(n % 100);
    if (n >= 800) return "ת״ת";
    if (n >= 745) return "תש" + this.renderHebrew099(n % 100);
    if (n >= 744) return "תשד״מ";
    if (n >= 701) return "תש" + this.renderHebrew099(n % 100);
    if (n >= 700) return "ת״ש";
    if (n >= 699) return "תר" + this.renderHebrew099(n % 100);
    if (n >= 698) return "תרח״צ";
    if (n >= 601) return "תר" + this.renderHebrew099(n % 100);
    if (n >= 600) return "ת״ר";
    if (n >= 501) return "תק" + this.renderHebrew099(n % 100);
    if (n >= 500) return "ת״ק";
    if (n >= 400) return "ת" + this.renderHebrew099(n % 100);
    if (n >= 345) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 344) return "שד״מ";
    if (n >= 305) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 304) return "ד״ש";
    if (n >= 300) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 299) return "ר" + this.renderHebrew099(n % 100);
    if (n >= 298) return "רח״צ";
    if (n >= 200) return "ר" + this.renderHebrew099(n % 100);
    if (n >= 100) return "ק" + this.renderHebrew099(n % 100);
    if (n >= 91) return "צ״" + this.renderHebrewItem(n % 10);
    if (n >= 90) return "צ׳";
    if (n >= 81) return "פ״" + this.renderHebrewItem(n % 10);
    if (n >= 80) return "פ׳";
    if (n >= 71) return "ע״" + this.renderHebrewItem(n % 10);
    if (n >= 70) return "ע׳";
    if (n >= 61) return "ס״" + this.renderHebrewItem(n % 10);
    if (n >= 60) return "ס׳";
    if (n >= 51) return "נ״" + this.renderHebrewItem(n % 10);
    if (n >= 50) return "נ׳";
    if (n >= 41) return "מ״" + this.renderHebrewItem(n % 10);
    if (n >= 40) return "מ׳";
    if (n >= 31) return "ל״" + this.renderHebrewItem(n % 10);
    if (n >= 30) return "ל׳";
    if (n >= 21) return "כ״" + this.renderHebrewItem(n % 10);
    if (n >= 20) return "כ׳";
    if (n >= 17) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "ט״ז";
    if (n >= 15) return "ט״ו";
    if (n >= 11) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 0) return this.renderHebrewItem(n) + "׳";
};

inter.renderRomanUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderRomanUpper(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 4e5) return this.renderNumber(n, "#,##0");
    if (n >= 3e5) return "ↈↈↈ" + (n === 3e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 2e5) return "ↈↈ" + (n === 2e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 1e5) return "ↈ" + (n === 1e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 9e4) return "ↂↈ" + (n === 9e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 8e4) return "ↇↂↂↂ" + (n === 8e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 7e4) return "ↇↂↂ" + (n === 7e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 6e4) return "ↇↂ" + (n === 6e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 5e4) return "ↇ" + (n === 5e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 4e4) return "ↂↇ" + (n === 4e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 3e4) return "ↂↂↂ" + (n === 3e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 2e4) return "ↂↂ" + (n === 2e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 1e4) return "ↂ" + (n === 1e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 9e3) return "Mↂ" + (n === 9e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 8e3) return "ↁMMM" + (n === 8e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 7e3) return "ↁMM" + (n === 7e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 6e3) return "ↁM" + (n === 6e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 5e3) return "ↁ" + (n === 5e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 4e3) return "Mↁ" + (n === 4e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 3e3) return "MMM" + (n === 3e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 2e3) return "MM" + (n === 2e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 1e3) return "M" + (n === 1e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 900) return "CM" + (n === 900 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 800) return "DCCC" + (n === 800 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 700) return "DCC" + (n === 700 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 600) return "DC" + (n === 600 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 500) return "D" + (n === 500 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 400) return "CD" + (n === 400 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 300) return "CCC" + (n === 300 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 200) return "CC" + (n === 200 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 100) return "C" + (n === 100 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 90) return "XC" + (n === 90 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 80) return "LXXX" + (n === 80 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 70) return "LXX" + (n === 70 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 60) return "LX" + (n === 60 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 50) return "L" + (n === 50 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 40) return "XL" + (n === 40 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 30) return "XXX" + (n === 30 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 20) return "XX" + (n === 20 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 10) return "X" + (n === 10 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 9) return "IX";
    if (n >= 8) return "VIII";
    if (n >= 7) return "VII";
    if (n >= 6) return "VI";
    if (n >= 5) return "V";
    if (n >= 4) return "IV";
    if (n >= 3) return "III";
    if (n >= 2) return "II";
    if (n >= 1) return "I";
    if (n >= 0) return "N";
};

inter.renderRomanLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderRomanLower(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 5e3) return this.renderNumber(n, "#,##0");
    if (n >= 4e3) return "mmmm" + (n === 4e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 3e3) return "mmm" + (n === 3e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 2e3) return "mm" + (n === 2e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 1e3) return "m" + (n === 1e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 900) return "cm" + (n === 900 ? "" : this.renderRomanLower(n % 100));
    if (n >= 800) return "dccc" + (n === 800 ? "" : this.renderRomanLower(n % 100));
    if (n >= 700) return "dcc" + (n === 700 ? "" : this.renderRomanLower(n % 100));
    if (n >= 600) return "dc" + (n === 600 ? "" : this.renderRomanLower(n % 100));
    if (n >= 500) return "d" + (n === 500 ? "" : this.renderRomanLower(n % 100));
    if (n >= 400) return "cd" + (n === 400 ? "" : this.renderRomanLower(n % 100));
    if (n >= 300) return "ccc" + (n === 300 ? "" : this.renderRomanLower(n % 100));
    if (n >= 200) return "cc" + (n === 200 ? "" : this.renderRomanLower(n % 100));
    if (n >= 100) return "c" + (n === 100 ? "" : this.renderRomanLower(n % 100));
    if (n >= 90) return "xc" + (n === 90 ? "" : this.renderRomanLower(n % 10));
    if (n >= 80) return "lxxx" + (n === 80 ? "" : this.renderRomanLower(n % 10));
    if (n >= 70) return "lxx" + (n === 70 ? "" : this.renderRomanLower(n % 10));
    if (n >= 60) return "lx" + (n === 60 ? "" : this.renderRomanLower(n % 10));
    if (n >= 50) return "l" + (n === 50 ? "" : this.renderRomanLower(n % 10));
    if (n >= 40) return "xl" + (n === 40 ? "" : this.renderRomanLower(n % 10));
    if (n >= 30) return "xxx" + (n === 30 ? "" : this.renderRomanLower(n % 10));
    if (n >= 20) return "xx" + (n === 20 ? "" : this.renderRomanLower(n % 10));
    if (n >= 10) return "x" + (n === 10 ? "" : this.renderRomanLower(n % 10));
    if (n >= 9) return "ix";
    if (n >= 8) return "viii";
    if (n >= 7) return "vii";
    if (n >= 6) return "vi";
    if (n >= 5) return "v";
    if (n >= 4) return "iv";
    if (n >= 3) return "iii";
    if (n >= 2) return "ii";
    if (n >= 1) return "i";
    if (n >= 0) return "n";
};

inter.renderTamil = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderTamil(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e8) return this.renderNumber(n, "#,##,##0");
    if (n >= 1e6) return this.renderTamil(Math.floor(n / 1e6)) + "௱௲" + (n === 1e6 ? "" : this.renderTamilThousands(n % 1e6));
    if (n >= 2e3) return this.renderTamil(Math.floor(n / 1e3)) + "௲" + (n === 2e3 ? "" : this.renderTamil(n % 1e3));
    if (n >= 1e3) return "௲" + (n === 1e3 ? "" : this.renderTamil(n % 1e3));
    if (n >= 200) return this.renderTamil(Math.floor(n / 100)) + "௱" + (n === 200 ? "" : this.renderTamil(n % 100));
    if (n >= 100) return "௱" + (n === 100 ? "" : this.renderTamil(n % 100));
    if (n >= 20) return this.renderTamil(Math.floor(n / 10)) + "௰" + (n === 20 ? "" : this.renderTamil(n % 10));
    if (n >= 10) return "௰" + (n === 10 ? "" : this.renderTamil(n % 10));
    if (n >= 9) return "௯";
    if (n >= 8) return "௮";
    if (n >= 7) return "௭";
    if (n >= 6) return "௬";
    if (n >= 5) return "௫";
    if (n >= 4) return "௪";
    if (n >= 3) return "௩";
    if (n >= 2) return "௨";
    if (n >= 1) return "௧";
    if (n >= 0) return "௦";
};

inter.renderCyrillicLowerThousands = function(n) {
    if (n >= 900) return "҂ц" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 800) return "҂ѿ" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 700) return "҂ѱ" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 600) return "҂х" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 500) return "҂ф" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 400) return "҂у" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 300) return "҂т" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 200) return "҂с" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 100) return "҂р" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 90) return "҂ч" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 80) return "҂п" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 70) return "҂ѻ" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 60) return "҂ѯ" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 50) return "҂н" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 40) return "҂м" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 30) return "҂л" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 20) return "҂к" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 19) return "҂ѳ҃҂і";
    if (n >= 18) return "҂и҃҂і";
    if (n >= 17) return "҂з҃҂і";
    if (n >= 16) return "҂ѕ҃҂і";
    if (n >= 15) return "҂є҃҂і";
    if (n >= 14) return "҂д҃҂і";
    if (n >= 13) return "҂г҃҂і";
    if (n >= 12) return "҂в҃҂і";
    if (n >= 11) return "҂а҃҂і";
    if (n >= 10) return "҃҂і";
    if (n >= 9) return "҃҂ѳ";
    if (n >= 8) return "҃҂и";
    if (n >= 7) return "҃҂з";
    if (n >= 6) return "҃҂ѕ";
    if (n >= 5) return "҃҂є";
    if (n >= 4) return "҃҂д";
    if (n >= 3) return "҃҂г";
    if (n >= 2) return "҃҂в";
    if (n >= 1) return "҃҂а";
    if (n >= 0) return "҃";
};

inter.renderCyrillicLower110 = function(n) {
    if (n >= 10) return "і";
    if (n >= 9) return "ѳ";
    if (n >= 8) return "и";
    if (n >= 7) return "з";
    if (n >= 6) return "ѕ";
    if (n >= 5) return "є";
    if (n >= 4) return "д";
    if (n >= 3) return "г";
    if (n >= 2) return "в";
    if (n >= 1) return "а";
};

inter.renderCyrillicLowerPost = function(n) {
    if (n >= 1) return this.renderCyrillicLower(n);
    if (n >= 0) return "҃";
};

inter.renderCyrillicLowerFinal = function(n) {
    if (n >= 91) return "ч" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 90) return "҃ч";
    if (n >= 81) return "п" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 80) return "҃п";
    if (n >= 71) return "ѻ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 70) return "҃ѻ";
    if (n >= 61) return "ѯ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 60) return "҃ѯ";
    if (n >= 51) return "н" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 50) return "҃н";
    if (n >= 41) return "м" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 40) return "҃м";
    if (n >= 31) return "л" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 30) return "҃л";
    if (n >= 21) return "к" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 20) return "҃к";
    if (n >= 19) return "ѳ҃і";
    if (n >= 18) return "и҃і";
    if (n >= 17) return "з҃і";
    if (n >= 16) return "ѕ҃і";
    if (n >= 15) return "є҃і";
    if (n >= 14) return "д҃і";
    if (n >= 13) return "г҃і";
    if (n >= 12) return "в҃і";
    if (n >= 11) return "а҃і";
    if (n >= 1) return "҃" + this.renderCyrillicLower110(n);
    if (n >= 0) return "҃";
};

inter.renderEthiopicP3 = function(n) {
    if (n >= 1e12) return this.renderEthiopic(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1) return "፼፼፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼፼፼";
};

inter.renderEthiopicP2 = function(n) {
    if (n >= 1e8) return this.renderEthiopic(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1) return "፼፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼፼";
};

inter.renderEthiopicP1 = function(n) {
    if (n >= 1e4) return this.renderEthiopic(Math.floor(n / 1e4)) + "፼" + (n === 1e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 1) return "፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼";
};

inter.renderGreekNumeralMajuscules = function(n) {
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e16) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e16)) + "ΜΜΜΜ" + (n === 1e16 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e16));
    if (n >= 1e12) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e12)) + "ΜΜΜ" + (n === 1e12 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e12));
    if (n >= 1e8) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e8)) + "ΜΜ" + (n === 1e8 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e8));
    if (n >= 1e4) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e4)) + "Μ" + (n === 1e4 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e4));
    if (n >= 1e3) return "͵" + this.renderGreekNumeralMajuscules(Math.floor(n / 1e3)) + (n === 1e3 ? "" : this.renderGreekNumeralMajuscules(n % 1e3));
    if (n >= 900) return "Ϡ" + (n === 900 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 800) return "Ω" + (n === 800 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 700) return "Ψ" + (n === 700 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 600) return "Χ" + (n === 600 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 500) return "Φ" + (n === 500 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 400) return "Υ" + (n === 400 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 300) return "Τ" + (n === 300 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 200) return "Σ" + (n === 200 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 100) return "Ρ" + (n === 100 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 90) return "Ϟ" + (n === 90 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 80) return "Π" + (n === 80 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 70) return "Ο" + (n === 70 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 60) return "Ξ" + (n === 60 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 50) return "Ν" + (n === 50 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 40) return "Μ" + (n === 40 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 30) return "Λ" + (n === 30 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 20) return "Κ" + (n === 20 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 10) return "Ι" + (n === 10 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 9) return "Θ";
    if (n >= 8) return "Η";
    if (n >= 7) return "Ζ";
    if (n >= 6) return "Ϝ";
    if (n >= 5) return "Ε";
    if (n >= 4) return "Δ";
    if (n >= 3) return "Γ";
    if (n >= 2) return "Β";
    if (n >= 1) return "Α";
    if (n >= 0) return "𐆊";
};

inter.renderGreekNumeralMinuscules = function(n) {
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e16) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e16)) + "μμμμ" + (n === 1e16 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e16));
    if (n >= 1e12) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e12)) + "μμμ" + (n === 1e12 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e12));
    if (n >= 1e8) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e8)) + "μμ" + (n === 1e8 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e8));
    if (n >= 1e4) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e4)) + "μ" + (n === 1e4 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e4));
    if (n >= 1e3) return "͵" + this.renderGreekNumeralMinuscules(Math.floor(n / 1e3)) + (n === 1e3 ? "" : this.renderGreekNumeralMinuscules(n % 1e3));
    if (n >= 900) return "ϡ" + (n === 900 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 800) return "ω" + (n === 800 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 700) return "ψ" + (n === 700 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 600) return "χ" + (n === 600 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 500) return "φ" + (n === 500 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 400) return "υ" + (n === 400 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 300) return "τ" + (n === 300 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 200) return "σ" + (n === 200 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 100) return "ρ" + (n === 100 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 90) return "ϟ" + (n === 90 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 80) return "π" + (n === 80 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 70) return "ο" + (n === 70 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 60) return "ξ" + (n === 60 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 50) return "ν" + (n === 50 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 40) return "μ" + (n === 40 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 30) return "λ" + (n === 30 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 20) return "κ" + (n === 20 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 10) return "ι" + (n === 10 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 9) return "θ";
    if (n >= 8) return "η";
    if (n >= 7) return "ζ";
    if (n >= 6) return "ϝ";
    if (n >= 5) return "ε";
    if (n >= 4) return "δ";
    if (n >= 3) return "γ";
    if (n >= 2) return "β";
    if (n >= 1) return "α";
    if (n >= 0) return "𐆊";
};

inter.renderHebrewThousands = function(n) {
    if (n >= 401) return this.renderHebrew(n) + "׳";
    if (n >= 100) return this.renderHebrew(n) + (n === 100 ? "" : "׳");
    if (n >= 10) return this.renderHebrew(n) + (n === 10 ? "" : "׳");
    if (n >= 0) return this.renderHebrew(n);
};

inter.renderHebrew099 = function(n) {
    if (n >= 91) return "צ״" + this.renderHebrewItem(n % 10);
    if (n >= 90) return "״צ";
    if (n >= 81) return "פ״" + this.renderHebrewItem(n % 10);
    if (n >= 80) return "״פ";
    if (n >= 71) return "ע״" + this.renderHebrewItem(n % 10);
    if (n >= 70) return "״ע";
    if (n >= 61) return "ס״" + this.renderHebrewItem(n % 10);
    if (n >= 60) return "״ס";
    if (n >= 51) return "נ״" + this.renderHebrewItem(n % 10);
    if (n >= 50) return "״נ";
    if (n >= 41) return "מ״" + this.renderHebrewItem(n % 10);
    if (n >= 40) return "״מ";
    if (n >= 31) return "ל״" + this.renderHebrewItem(n % 10);
    if (n >= 30) return "״ל";
    if (n >= 21) return "כ״" + this.renderHebrewItem(n % 10);
    if (n >= 20) return "״כ";
    if (n >= 17) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "ט״ז";
    if (n >= 15) return "ט״ו";
    if (n >= 11) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 1) return "״" + this.renderHebrewItem(n);
    if (n >= 0) return "׳";
};

inter.renderHebrewItem = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderHebrewItem(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 2100) return this.renderNumber(n, "#,##0");
    if (n >= 2e3) return "תתתתת" + (n === 2e3 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1900) return "תתתתש" + (n === 1900 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1800) return "תתתתר" + (n === 1800 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1700) return "תתתתק" + (n === 1700 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1600) return "תתתת" + (n === 1600 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1500) return "תתתש" + (n === 1500 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1400) return "תתתר" + (n === 1400 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1300) return "תתתק" + (n === 1300 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1200) return "תתת" + (n === 1200 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1100) return "תתש" + (n === 1100 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1e3) return "תתר" + (n === 1e3 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 900) return "תתק" + (n === 900 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 800) return "תת" + (n === 800 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 745) return "תש" + this.renderHebrewItem(n % 100);
    if (n >= 744) return "תשדמ";
    if (n >= 700) return "תש" + (n === 700 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 699) return "תר" + this.renderHebrewItem(n % 100);
    if (n >= 698) return "תרחצ";
    if (n >= 600) return "תר" + (n === 600 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 500) return "תק" + (n === 500 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 400) return "ת" + (n === 400 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 345) return "ש" + this.renderHebrewItem(n % 100);
    if (n >= 344) return "שדמ";
    if (n >= 305) return "ש" + this.renderHebrewItem(n % 100);
    if (n >= 304) return "דש";
    if (n >= 300) return "ש" + (n === 300 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 299) return "ר" + this.renderHebrewItem(n % 100);
    if (n >= 298) return "רחצ";
    if (n >= 200) return "ר" + (n === 200 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 100) return "ק" + (n === 100 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 90) return "צ" + (n === 90 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 80) return "פ" + (n === 80 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 70) return "ע" + (n === 70 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 60) return "ס" + (n === 60 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 50) return "נ" + (n === 50 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 40) return "מ" + (n === 40 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 30) return "ל" + (n === 30 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 20) return "כ" + (n === 20 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 17) return "י" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "טז";
    if (n >= 15) return "טו";
    if (n >= 10) return "י" + (n === 10 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 9) return "ט";
    if (n >= 8) return "ח";
    if (n >= 7) return "ז";
    if (n >= 6) return "ו";
    if (n >= 5) return "ה";
    if (n >= 4) return "ד";
    if (n >= 3) return "ג";
    if (n >= 2) return "ב";
    if (n >= 1) return "א";
    if (n >= 0) return "״";
};

inter.renderTamilThousands = function(n) {
    if (n >= 1e3) return this.renderTamilThousands(Math.floor(n / 1e3)) + "௲" + (n === 1e3 ? "" : this.renderTamilThousands(n % 1e3));
    if (n >= 0) return this.renderTamil(n);
};

inter.renderEthiopicP = function(n) {
    if (n >= 1e16) return this.renderEthiopicP(Math.floor(n / 1e16)) + "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 1e12) return this.renderEthiopicP(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1e8) return this.renderEthiopicP(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1e4) return this.renderEthiopicP(Math.floor(n / 1e4)) + "፼" + (n === 1e4 ? "" : this.renderEthiopicP(n % 1e4));
    if (n >= 1) return this.renderEthiopic(n);
};

inter.currencies = [].concat(P.currencies.slice(0, 26), {
    id: "BYB",
    displayName: "Belarusian New Rouble (1994–1999)",
    one: "Belarusian new ruble (1994–1999)",
    other: "Belarusian new rubles (1994–1999)"
}, {
    id: "BYR",
    displayName: "Belarusian Rouble",
    symbol: "р.",
    one: "Belarusian ruble",
    other: "Belarusian rubles"
}, P.currencies.slice(28, 135), {
    id: "JPY",
    displayName: "Japanese Yen",
    symbol: "JP¥",
    one: "Japanese yen",
    other: "Japanese yen"
}, P.currencies.slice(136, 143), {
    id: "LVR",
    displayName: "Latvian Rouble",
    one: "Latvian ruble",
    other: "Latvian rubles"
}, P.currencies.slice(144, 210), {
    id: "RUB",
    displayName: "Russian Rouble",
    symbol: "₽",
    one: "Russian ruble",
    other: "Russian rubles"
}, {
    id: "RUR",
    displayName: "Russian Rouble (1991–1998)",
    symbol: "р.",
    one: "Russian ruble (1991–1998)",
    other: "Russian rubles (1991–1998)"
}, P.currencies.slice(212, 250), {
    id: "TJR",
    displayName: "Tajikistani Rouble",
    one: "Tajikistani ruble",
    other: "Tajikistani rubles"
}, P.currencies.slice(251, 263), {
    id: "USD",
    displayName: "US Dollar",
    symbol: "US$",
    one: "US dollar",
    other: "US dollars"
}, P.currencies.slice(264, 297));

module.exports = inter;