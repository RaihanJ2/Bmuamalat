function defaults(targetObj) {
    for (var i = 1; i < arguments.length; i += 1) {
        if (arguments[i] && typeof arguments[i] === "object") {
            for (var propertyName in arguments[i]) {
                if (typeof targetObj[propertyName] === "undefined") {
                    targetObj[propertyName] = arguments[i][propertyName];
                }
            }
        }
    }
    return targetObj;
}

var P = require("./pt.js"), inter = defaults({
    renderers: {}
}, P);

var _cavh1 = [ "T1", "T2", "T3", "T4" ], _cavh2 = {
    displayName: "AM/PM"
}, _cavh3 = {
    all: {
        leap: "{0}bis"
    }
}, _cavh4 = {
    one: "0 M",
    other: "0 M"
}, _cavh5 = {
    one: "{0}°",
    other: "{0}°"
}, _cavh6 = {
    one: "00 M",
    other: "00 M"
}, _cavh7 = {
    one: "0 mM",
    other: "0 mM"
}, _cavh8 = {
    one: "0 Bi",
    other: "0 Bi"
}, _cavh9 = {
    one: "¤0 M",
    other: "¤0 M"
}, _cavh10 = {
    one: "¤0 B",
    other: "¤0 B"
}, _cavh11 = {
    a: "h a – h a",
    h: "h–h a"
}, _cavh12 = {
    M: "MMMM – MMMM 'de' y G"
}, _cavh13 = {
    one: "{0} s",
    other: "{0} s"
}, _cavh14 = {
    one: "{0} G",
    other: "{0} G"
}, _cavh15 = {
    one: "{0} h",
    other: "{0} h"
}, _cavh16 = {
    one: "{0} m",
    other: "{0} m"
}, _cavh17 = {
    one: "{0} g",
    other: "{0} g"
}, _cavh18 = {
    one: "{0} W",
    other: "{0} W"
}, _cavh19 = {
    one: "{0} l",
    other: "{0} l"
}, _cavh20 = {
    one: "0 mil",
    other: "0 mil"
}, _cavh21 = {
    one: "0 mil",
    other: "0 mil"
}, _cavh22 = {
    one: "000 M",
    other: "000 M"
}, _cavh23 = {
    one: "00 mM",
    other: "00 mM"
}, _cavh24 = {
    one: "00 Bi",
    other: "00 Bi"
}, _cavh25 = {
    one: "¤00 M",
    other: "¤00 M"
}, _cavh26 = {
    one: "¤0 mM",
    other: "¤0 mM"
}, _cavh27 = {
    one: "¤00 B",
    other: "¤00 B"
}, _cavh28 = {
    displayName: "fuso horário"
}, _cavh29 = [ "Antes de R.O.C.", "R.O.C." ], _cavh30 = {
    one: "{0} mb",
    other: "{0} mb"
}, _cavh31 = {
    one: "{0} ha",
    other: "{0} ha"
}, _cavh32 = {
    one: "{0} m²",
    other: "{0} m²"
}, _cavh33 = {
    one: "{0} ms",
    other: "{0} ms"
}, _cavh34 = {
    one: "{0} km",
    other: "{0} km"
}, _cavh35 = {
    one: "{0} cm",
    other: "{0} cm"
}, _cavh36 = {
    one: "{0} mm",
    other: "{0} mm"
}, _cavh37 = {
    one: "{0} pm",
    other: "{0} pm"
}, _cavh38 = {
    one: "{0} yd",
    other: "{0} yd"
}, _cavh39 = {
    one: "{0} kg",
    other: "{0} kg"
}, _cavh40 = {
    one: "{0} lb",
    other: "{0} lb"
}, _cavh41 = {
    one: "{0} oz",
    other: "{0} oz"
}, _cavh42 = {
    one: "{0} kW",
    other: "{0} kW"
}, _cavh43 = {
    one: "{0} cv",
    other: "{0} cv"
}, _cavh44 = {
    one: "00 mil",
    other: "00 mil"
}, _cavh45 = {
    one: "00 mil",
    other: "00 mil"
}, _cavh46 = {
    one: "000 mM",
    other: "000 mM"
}, _cavh47 = {
    one: "000 Bi",
    other: "000 Bi"
}, _cavh48 = {
    one: "¤0 mil",
    other: "¤0 mil"
}, _cavh49 = {
    one: "¤000 M",
    other: "¤000 M"
}, _cavh50 = {
    one: "¤00 mM",
    other: "¤00 mM"
}, _cavh51 = {
    one: "¤000 B",
    other: "¤000 B"
}, _cavh52 = [ "D", "S", "T", "Q", "Q", "S", "S" ], _cavh53 = {
    displayName: "dia da semana"
}, _cavh54 = {
    one: "+{0} h",
    other: "+{0} h"
}, _cavh55 = {
    one: "-{0} h",
    other: "-{0} h"
}, _cavh56 = {
    one: "+{0} s",
    other: "+{0} s"
}, _cavh57 = {
    one: "-{0} s",
    other: "-{0} s"
}, _cavh58 = {
    a: "h a – h a v",
    h: "h–h a v"
}, _cavh59 = {
    one: "{0} pé",
    other: "{0} pés"
}, _cavh60 = {
    one: "{0} nó",
    other: "{0} nós"
}, _cavh61 = {
    one: "{0} psi",
    other: "{0} psi"
}, _cavh62 = {
    one: "{0} km²",
    other: "{0} km²"
}, _cavh63 = {
    one: "{0} mi²",
    other: "{0} mi²"
}, _cavh64 = {
    one: "{0} ft²",
    other: "{0} ft²"
}, _cavh65 = {
    one: "{0} min",
    other: "{0} min"
}, _cavh66 = {
    one: "{0} hPa",
    other: "{0} hPa"
}, _cavh67 = {
    one: "{0} m/s",
    other: "{0} m/s"
}, _cavh68 = {
    one: "{0} km³",
    other: "{0} km³"
}, _cavh69 = {
    one: "{0} mi³",
    other: "{0} mi³"
}, _cavh70 = {
    one: "000 mil",
    other: "000 mil"
}, _cavh71 = {
    one: "000 mil",
    other: "000 mil"
}, _cavh72 = {
    one: "¤00 mil",
    other: "¤00 mil"
}, _cavh73 = {
    one: "¤000 mM",
    other: "¤000 mM"
}, _cavh74 = {
    a: "h a – h a v",
    h: "h – h a v"
}, _cavh75 = {
    d: "MMM d–d",
    M: "MMM d – MMM d"
}, _cavh76 = {
    one: "{0} ano",
    other: "{0} anos"
}, _cavh77 = {
    one: "{0} dia",
    other: "{0} dias"
}, _cavh78 = {
    wide: [ "AH" ],
    abbreviated: [ "AH" ]
}, _cavh79 = {
    one: "{0} mês",
    other: "{0} meses"
}, _cavh80 = {
    one: "{0} kcal",
    other: "{0} kcal"
}, _cavh81 = {
    one: "{0} mi/h",
    other: "{0} mi/h"
}, _cavh82 = {
    one: "{0} sem.",
    other: "{0} sem."
}, _cavh83 = {
    one: "{0} km/h",
    other: "{0} km/h"
}, _cavh84 = {
    one: "¤000 mil",
    other: "¤000 mil"
}, _cavh85 = {
    H: "HH:mm–HH:mm",
    m: "HH:mm–HH:mm"
}, _cavh86 = {
    one: "+{0} min",
    other: "+{0} min"
}, _cavh87 = {
    one: "-{0} min",
    other: "-{0} min"
}, _cavh88 = {
    one: "há {0} s",
    other: "há {0} s"
}, _cavh89 = {
    one: "há {0} h",
    other: "há {0} h"
}, _cavh90 = {
    M: "y-MM – y-MM",
    y: "y-MM – y-MM"
}, _cavh91 = {
    M: "U MMM–MMM",
    y: "U MMM – U MMM"
}, _cavh92 = {
    one: "{0} acre",
    other: "{0} acres"
}, _cavh93 = {
    one: "0 milhão",
    other: "0 milhões"
}, _cavh94 = {
    one: "0 bilião",
    other: "0 biliões"
}, _cavh95 = {
    one: "+{0} ano",
    other: "+{0} anos"
}, _cavh96 = {
    one: "-{0} ano",
    other: "-{0} anos"
}, _cavh97 = {
    one: "+{0} dia",
    other: "+{0} dias"
}, _cavh98 = {
    one: "-{0} dia",
    other: "-{0} dias"
}, _cavh99 = {
    one: "+{0} mês",
    other: "+{0} meses"
}, _cavh100 = {
    one: "-{0} mês",
    other: "-{0} meses"
}, _cavh101 = {
    one: "+{0} sem.",
    other: "+{0} sem."
}, _cavh102 = {
    one: "-{0} sem.",
    other: "-{0} sem."
}, _cavh103 = {
    one: "{0} milha",
    other: "{0} milhas"
}, _cavh104 = {
    one: "00 milhões",
    other: "00 milhões"
}, _cavh105 = {
    one: "00 biliões",
    other: "00 biliões"
}, _cavh106 = {
    H: "HH:mm–HH:mm v",
    m: "HH:mm–HH:mm v"
}, _cavh107 = {
    d: "dd/MM – dd/MM",
    M: "dd/MM – dd/MM"
}, _cavh108 = {
    M: "MM/y – MM/y G",
    y: "MM/y – MM/y G"
}, _cavh109 = {
    one: "há {0} min",
    other: "há {0} min"
}, _cavh110 = {
    one: "+{0} trim.",
    other: "+{0} trim."
}, _cavh111 = {
    one: "-{0} trim.",
    other: "-{0} trim."
}, _cavh112 = {
    d: "MM-dd – MM-dd",
    M: "MM-dd – MM-dd"
}, _cavh113 = {
    M: "U MMMM–MMMM",
    y: "U MMMM – U MMMM"
}, _cavh114 = {
    one: "há {0} ano",
    other: "há {0} anos"
}, _cavh115 = {
    one: "há {0} dia",
    other: "há {0} dias"
}, _cavh116 = {
    one: "000 milhões",
    other: "000 milhões"
}, _cavh117 = {
    one: "000 biliões",
    other: "000 biliões"
}, _cavh118 = {
    one: "há {0} mês",
    other: "há {0} meses"
}, _cavh119 = {
    one: "há {0} sem.",
    other: "há {0} sem."
}, _cavh120 = {
    one: "{0} quilate",
    other: "{0} quilates"
}, _cavh121 = {
    one: "{0} ano-luz",
    other: "{0} anos-luz"
}, _cavh122 = {
    one: "há {0} hora",
    other: "há {0} horas"
}, _cavh123 = {
    one: "há {0} trim.",
    other: "há {0} trim."
}, _cavh124 = {
    one: "0 mil milhões",
    other: "0 mil milhões"
}, _cavh125 = [ "dom", "seg", "ter", "qua", "qui", "sex", "sáb" ], _cavh126 = {
    one: "há {0} semana",
    other: "há {0} semanas"
}, _cavh127 = {
    one: "há {0} minuto",
    other: "há {0} minutos"
}, _cavh128 = {
    one: "00 mil milhões",
    other: "00 mil milhões"
}, _cavh129 = {
    d: "d–d 'de' MMM",
    M: "d 'de' MMM – d 'de' MMM"
}, _cavh130 = {
    one: "há {0} segundo",
    other: "há {0} segundos"
}, _cavh131 = {
    one: "000 mil milhões",
    other: "000 mil milhões"
}, _cavh132 = {
    one: "dentro de {0} s",
    other: "dentro de {0} s"
}, _cavh133 = {
    one: "dentro de {0} h",
    other: "dentro de {0} h"
}, _cavh134 = {
    d: "E, dd/MM – E, dd/MM",
    M: "E, dd/MM – E, dd/MM"
}, _cavh135 = [ "J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D" ], _cavh136 = {
    "0": "este ano",
    "1": "próximo ano",
    "-1": "ano passado"
}, _cavh137 = {
    "0": "este mês",
    "1": "próximo mês",
    "-1": "mês passado"
}, _cavh138 = {
    d: "MM-dd, E – MM-dd, E",
    M: "MM-dd, E – MM-dd, E"
}, _cavh139 = {
    d: "MMM d, E – MMM d, E",
    M: "MMM d, E – MMM d, E"
}, _cavh140 = {
    one: "{0} quilocaloria",
    other: "{0} quilocalorias"
}, _cavh141 = {
    one: "há {0} trimestre",
    other: "há {0} trimestres"
}, _cavh142 = {
    wide: [ "ERA0", "ERA1" ],
    abbreviated: [ "ERA0", "ERA1" ]
}, _cavh143 = {
    one: "dentro de {0} min",
    other: "dentro de {0} min"
}, _cavh144 = {
    M: "MMM–MMM 'de' y G",
    y: "MMM 'de' y – MMM 'de' y G"
}, _cavh145 = {
    one: "dentro de {0} ano",
    other: "dentro de {0} anos"
}, _cavh146 = {
    one: "dentro de {0} dia",
    other: "dentro de {0} dias"
}, _cavh147 = {
    "0": "esta qui.",
    "1": "próxima qui.",
    "-1": "qui. passada"
}, _cavh148 = {
    "0": "este dom.",
    "1": "próximo dom.",
    "-1": "dom. passado"
}, _cavh149 = {
    "0": "esta seg.",
    "1": "próxima seg.",
    "-1": "seg. passada"
}, _cavh150 = {
    "0": "esta ter.",
    "1": "próxima ter.",
    "-1": "ter. passada"
}, _cavh151 = {
    "0": "esta qua.",
    "1": "próxima qua.",
    "-1": "qua. passada"
}, _cavh152 = {
    "0": "esta sex.",
    "1": "próxima sex.",
    "-1": "sex. passada"
}, _cavh153 = {
    "0": "este sáb.",
    "1": "próximo sáb.",
    "-1": "sáb. passado"
}, _cavh154 = [ "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" ], _cavh155 = {
    one: "dentro de {0} mês",
    other: "dentro de {0} meses"
}, _cavh156 = {
    one: "dentro de {0} sem.",
    other: "dentro de {0} sem."
}, _cavh157 = {
    a: "h:mm a – h:mm a",
    h: "h:mm–h:mm a",
    m: "h:mm–h:mm a"
}, _cavh158 = {
    one: "dentro de {0} hora",
    other: "dentro de {0} horas"
}, _cavh159 = {
    "0": "este trim.",
    "1": "próximo trim.",
    "-1": "trim. passado"
}, _cavh160 = {
    one: "dentro de {0} trim.",
    other: "dentro de {0} trim."
}, _cavh161 = {
    "0": "esta terça",
    "1": "próxima terça",
    "-1": "terça passada"
}, _cavh162 = {
    "0": "esta sexta",
    "1": "próxima sexta",
    "-1": "sexta passada"
}, _cavh163 = {
    id: "CX",
    displayName: "Ilha do Natal",
    hasTimeZones: true
}, _cavh164 = {
    d: "ccc, dd/MM – ccc, dd/MM",
    M: "ccc, dd/MM – ccc, dd/MM"
}, _cavh165 = {
    d: "U MMM d–d",
    M: "U MMM d – MMM d",
    y: "U MMM d – U MMM d"
}, _cavh166 = [ "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13" ], _cavh167 = {
    "0": "esta semana",
    "1": "próxima semana",
    "-1": "semana passada"
}, _cavh168 = {
    one: "dentro de {0} semana",
    other: "dentro de {0} semanas"
}, _cavh169 = {
    one: "dentro de {0} minuto",
    other: "dentro de {0} minutos"
}, _cavh170 = {
    "0": "esta quarta",
    "1": "próxima quarta",
    "-1": "quarta passada"
}, _cavh171 = {
    "0": "esta quinta",
    "1": "próxima quinta",
    "-1": "quinta passada"
}, _cavh172 = {
    "0": "este sábado",
    "1": "próximo sábado",
    "-1": "sábado passado"
}, _cavh173 = {
    a: "h:mm a – h:mm a v",
    h: "h:mm–h:mm a v",
    m: "h:mm–h:mm a v"
}, _cavh174 = {
    id: "GB",
    displayName: "GB",
    regionId: "154",
    hasTimeZones: true
}, _cavh175 = {
    one: "dentro de {0} segundo",
    other: "dentro de {0} segundos"
}, _cavh176 = {
    "0": "esta segunda",
    "1": "próxima segunda",
    "-1": "segunda passada"
}, _cavh177 = {
    "0": "este domingo",
    "1": "próximo domingo",
    "-1": "domingo passado"
}, _cavh178 = {
    id: "IR",
    displayName: "Irão",
    regionId: "034",
    hasTimeZones: true
}, _cavh179 = {
    id: "BH",
    displayName: "Barém",
    regionId: "145",
    hasTimeZones: true
}, _cavh180 = {
    id: "BJ",
    displayName: "Benim",
    regionId: "011",
    hasTimeZones: true
}, _cavh181 = {
    id: "GU",
    displayName: "Guame",
    regionId: "057",
    hasTimeZones: true
}, _cavh182 = {
    id: "YE",
    displayName: "Iémen",
    regionId: "145",
    hasTimeZones: true
}, _cavh183 = {
    relative: _cavh147
}, _cavh184 = {
    relative: _cavh148
}, _cavh185 = {
    relative: _cavh149
}, _cavh186 = {
    relative: _cavh150
}, _cavh187 = {
    relative: _cavh151
}, _cavh188 = {
    relative: _cavh152
}, _cavh189 = {
    relative: _cavh153
}, _cavh190 = {
    id: "AX",
    displayName: "Alanda",
    regionId: "154",
    hasTimeZones: true
}, _cavh191 = {
    id: "BS",
    displayName: "Baamas",
    regionId: "029",
    hasTimeZones: true
}, _cavh192 = {
    id: "DJ",
    displayName: "Jibuti",
    regionId: "014",
    hasTimeZones: true
}, _cavh193 = {
    id: "YT",
    displayName: "Maiote",
    regionId: "014",
    hasTimeZones: true
}, _cavh194 = {
    id: "MW",
    displayName: "Maláui",
    regionId: "014",
    hasTimeZones: true
}, _cavh195 = {
    id: "MC",
    displayName: "Mónaco",
    regionId: "155",
    hasTimeZones: true
}, _cavh196 = {
    id: "KE",
    displayName: "Quénia",
    regionId: "014",
    hasTimeZones: true
}, _cavh197 = [ "domingo", "segunda", "terça", "quarta", "quinta", "sexta", "sábado" ], _cavh198 = {
    one: "dentro de {0} trimestre",
    other: "dentro de {0} trimestres"
}, _cavh199 = [ "M1", "M2", "M3", "M4", "M5", "M6", "M7", "M8", "M9", "M10", "M11", "M12" ], _cavh200 = {
    id: "AI",
    displayName: "Anguila",
    regionId: "029",
    hasTimeZones: true
}, _cavh201 = {
    id: "AM",
    displayName: "Arménia",
    regionId: "145",
    hasTimeZones: true
}, _cavh202 = {
    id: "CW",
    displayName: "Curaçau",
    regionId: "029",
    hasTimeZones: true
}, _cavh203 = {
    id: "EE",
    displayName: "Estónia",
    regionId: "154",
    hasTimeZones: true
}, _cavh204 = {
    id: "LV",
    displayName: "Letónia",
    regionId: "154",
    hasTimeZones: true
}, _cavh205 = {
    id: "PL",
    displayName: "Polónia",
    regionId: "151",
    hasTimeZones: true
}, _cavh206 = {
    id: "RO",
    displayName: "Roménia",
    regionId: "151",
    hasTimeZones: true
}, _cavh207 = [ "1.º trimestre", "2.º trimestre", "3.º trimestre", "4.º trimestre" ], _cavh208 = {
    id: "CM",
    displayName: "Camarões",
    regionId: "017",
    hasTimeZones: true
}, _cavh209 = {
    id: "DM",
    displayName: "Domínica",
    regionId: "029",
    hasTimeZones: true
}, _cavh210 = {
    id: "MU",
    displayName: "Maurícia",
    regionId: "014",
    hasTimeZones: true
}, _cavh211 = {
    id: "SV",
    displayName: "Salvador",
    regionId: "013",
    hasTimeZones: true
}, _cavh212 = {
    id: "TK",
    displayName: "Toquelau",
    regionId: "061",
    hasTimeZones: true
}, _cavh213 = {
    id: "VN",
    displayName: "Vietname",
    regionId: "035",
    hasTimeZones: true
}, _cavh214 = {
    id: "ZW",
    displayName: "Zimbabué",
    regionId: "014",
    hasTimeZones: true
}, _cavh215 = {
    relative: _cavh161
}, _cavh216 = {
    relative: _cavh162
}, _cavh217 = {
    id: "SI",
    displayName: "Eslovénia",
    regionId: "039",
    hasTimeZones: true
}, _cavh218 = {
    id: "MK",
    displayName: "Macedónia",
    regionId: "039",
    hasTimeZones: true
}, _cavh219 = {
    id: "SC",
    displayName: "Seicheles",
    regionId: "014",
    hasTimeZones: true
}, _cavh220 = {
    id: "SG",
    displayName: "Singapura",
    regionId: "035",
    hasTimeZones: true
}, _cavh221 = {
    id: "LK",
    displayName: "Sri Lanca",
    regionId: "034",
    hasTimeZones: true
}, _cavh222 = {
    "0": "este trimestre",
    "1": "próximo trimestre",
    "-1": "trimestre passado"
}, _cavh223 = {
    d: "y-MM-dd – y-MM-dd",
    M: "y-MM-dd – y-MM-dd",
    y: "y-MM-dd – y-MM-dd"
}, _cavh224 = {
    id: "CC",
    displayName: "Ilhas dos Cocos (Keeling)",
    hasTimeZones: true
}, _cavh225 = {
    id: "MG",
    displayName: "Madagáscar",
    regionId: "014",
    hasTimeZones: true
}, _cavh226 = {
    id: "MS",
    displayName: "Monserrate",
    regionId: "029",
    hasTimeZones: true
}, _cavh227 = {
    id: "BD",
    displayName: "Bangladeche",
    regionId: "034",
    hasTimeZones: true
}, _cavh228 = {
    id: "GL",
    displayName: "Gronelândia",
    regionId: "021",
    hasTimeZones: true
}, _cavh229 = {
    id: "FO",
    displayName: "Ilhas Faroé",
    regionId: "154",
    hasTimeZones: true
}, _cavh230 = {
    id: "SM",
    displayName: "São Marinho",
    regionId: "039",
    hasTimeZones: true
}, _cavh231 = {
    id: "UZ",
    displayName: "Usbequistão",
    regionId: "143",
    hasTimeZones: true
}, _cavh232 = {
    relative: _cavh170
}, _cavh233 = {
    relative: _cavh171
}, _cavh234 = {
    relative: _cavh172
}, _cavh235 = {
    id: "KY",
    displayName: "Ilhas Caimão",
    regionId: "029",
    hasTimeZones: true
}, _cavh236 = {
    id: "LI",
    displayName: "Listenstaine",
    regionId: "155",
    hasTimeZones: true
}, _cavh237 = {
    id: "NL",
    displayName: "Países Baixos",
    regionId: "155",
    hasTimeZones: true
}, _cavh238 = {
    abbreviated: {
        leap: "{0}bis"
    },
    narrow: {
        leap: "{0}b"
    },
    wide: {
        leap: "{0}bis"
    }
}, _cavh239 = {
    id: "CD",
    displayName: "Congo-Kinshasa",
    regionId: "017",
    hasTimeZones: true
}, _cavh240 = {
    id: "FK",
    displayName: "Ilhas Falkland",
    regionId: "005",
    hasTimeZones: true
}, _cavh241 = {
    id: "NC",
    displayName: "Nova Caledónia",
    regionId: "054",
    hasTimeZones: true
}, _cavh242 = {
    id: "TM",
    displayName: "Turquemenistão",
    regionId: "143",
    hasTimeZones: true
}, _cavh243 = {
    "0": "hoje",
    "1": "amanhã",
    "2": "depois de amanhã",
    "-2": "anteontem",
    "-1": "ontem"
}, _cavh244 = {
    relative: _cavh176
}, _cavh245 = {
    relative: _cavh177
}, _cavh246 = {
    id: "009",
    displayName: "Oceânia",
    hasTimeZones: false,
    parentRegionId: "001"
}, _cavh247 = {
    id: "CZ",
    displayName: "República Checa",
    regionId: "151",
    hasTimeZones: true
}, _cavh248 = {
    d: "dd/MM/y – dd/MM/y G",
    M: "dd/MM/y – dd/MM/y G",
    y: "dd/MM/y – dd/MM/y G"
}, _cavh249 = [ "jan", "fev", "mar", "abr", "mai", "jun", "jul", "ago", "set", "out", "nov", "dez" ], _cavh250 = {
    future: _cavh54,
    past: _cavh55
}, _cavh251 = {
    future: _cavh56,
    past: _cavh57
}, _cavh252 = {
    "0": "esta terça-feira",
    "1": "próxima terça-feira",
    "-1": "terça-feira passada"
}, _cavh253 = {
    "0": "esta sexta-feira",
    "1": "próxima sexta-feira",
    "-1": "sexta-feira passada"
}, _cavh254 = {
    id: "029",
    displayName: "Caraíbas",
    hasTimeZones: false,
    parentRegionId: "019"
}, _cavh255 = {
    id: "UM",
    displayName: "Ilhas Menores Afastadas dos EUA",
    hasTimeZones: true
}, _cavh256 = {
    id: "CG",
    displayName: "Congo-Brazzaville",
    regionId: "017",
    hasTimeZones: true
}, _cavh257 = {
    id: "TT",
    displayName: "Trindade e Tobago",
    regionId: "029",
    hasTimeZones: true
}, _cavh258 = {
    "0": "esta quarta-feira",
    "1": "próxima quarta-feira",
    "-1": "quarta-feira passada"
}, _cavh259 = {
    "0": "esta quinta-feira",
    "1": "próxima quinta-feira",
    "-1": "quinta-feira passada"
}, _cavh260 = [ undefined, "zi", "chou", "yin", "mao", "chen", "si", "wu", "wei", "shen", "you", "xu" ], _cavh261 = {
    id: "PM",
    displayName: "São Pedro e Miquelão",
    regionId: "021",
    hasTimeZones: true
}, _cavh262 = {
    id: "TC",
    displayName: "Ilhas Turcas e Caicos",
    regionId: "029",
    hasTimeZones: true
}, _cavh263 = {
    id: "KN",
    displayName: "São Cristóvão e Neves",
    regionId: "029",
    hasTimeZones: true
}, _cavh264 = {
    "0": "esta segunda-feira",
    "1": "próxima segunda-feira",
    "-1": "segunda-feira passada"
}, _cavh265 = {
    id: "154",
    displayName: "Europa do Norte",
    hasTimeZones: false,
    parentRegionId: "150"
}, _cavh266 = {
    id: "015",
    displayName: "Norte de África",
    hasTimeZones: false,
    parentRegionId: "002"
}, _cavh267 = {
    d: "ccc, d 'de' MMMM – ccc, d 'de' MMMM",
    M: "ccc, d 'de' MMMM – ccc, d 'de' MMMM"
}, _cavh268 = {
    future: _cavh86,
    past: _cavh87
}, _cavh269 = {
    d: "U MMM d, E – MMM d, E",
    M: "U MMM d, E – MMM d, E",
    y: "U MMM d, E – U MMM d, E"
}, _cavh270 = {
    id: "PS",
    displayName: "Territórios palestinianos",
    regionId: "145",
    hasTimeZones: true
}, _cavh271 = {
    future: _cavh95,
    past: _cavh96
}, _cavh272 = {
    future: _cavh97,
    past: _cavh98
}, _cavh273 = {
    relative: _cavh252
}, _cavh274 = {
    relative: _cavh253
}, _cavh275 = {
    future: _cavh99,
    past: _cavh100
}, _cavh276 = {
    future: _cavh101,
    past: _cavh102
}, _cavh277 = {
    d: "y-MM-dd, E – y-MM-dd, E",
    M: "y-MM-dd, E – y-MM-dd, E",
    y: "y-MM-dd, E – y-MM-dd, E"
}, _cavh278 = {
    d: "E, dd/MM – E, dd/MM/y G",
    M: "E, dd/MM – E, dd/MM/y G",
    y: "E, dd/MM/y – E, dd/MM/y G"
}, _cavh279 = {
    relative: _cavh258
}, _cavh280 = {
    relative: _cavh259
}, _cavh281 = {
    future: _cavh110,
    past: _cavh111
}, _cavh282 = {
    relative: _cavh264
}, _cavh283 = {
    d: "E, dd/MM/y – E, dd/MM/y G",
    M: "E, dd/MM/y – E, dd/MM/y G",
    y: "E, dd/MM/y – E, dd/MM/y G"
}, _cavh284 = [ "domingo", "segunda-feira", "terça-feira", "quarta-feira", "quinta-feira", "sexta-feira", "sábado" ], _cavh285 = {
    future: _cavh132,
    past: _cavh88
}, _cavh286 = {
    future: _cavh133,
    past: _cavh89
}, _cavh287 = [ "Mês 1", "Mês 2", "Mês 3", "Mês 4", "Mês 5", "Mês 6", "Mês 7", "Mês 8", "Mês 9", "Mês 10", "Mês 11", "Mês 12" ], _cavh288 = {
    future: _cavh143,
    past: _cavh109
}, _cavh289 = {
    displayName: "h",
    relativeTime: _cavh250
}, _cavh290 = {
    displayName: "s",
    relativeTime: _cavh251
}, _cavh291 = [ "Muh.", "Saf.", "Rab. I", "Rab. II", "Jum. I", "Jum. II", "Raj.", "Sha.", "Ram.", "Shaw.", "Dhuʻl-Q.", "Dhuʻl-H." ], _cavh292 = {
    future: _cavh145,
    past: _cavh114
}, _cavh293 = {
    future: _cavh146,
    past: _cavh115
}, _cavh294 = [ "Tishri", "Heshvan", "Kislev", "Tevet", "Shevat", "Adar I", "Adar", "Nisan", "Iyar", "Sivan", "Tamuz", "Av", "Elul" ], _cavh295 = {
    d: "d–d 'de' MMM 'de' y",
    M: "d 'de' MMM – d 'de' MMM 'de' y G",
    y: "d 'de' MMM 'de' y – d 'de' MMM 'de' y G"
}, _cavh296 = {
    future: _cavh155,
    past: _cavh118
}, _cavh297 = {
    future: _cavh156,
    past: _cavh119
}, _cavh298 = {
    future: _cavh158,
    past: _cavh122
}, _cavh299 = [ "Farvardin", "Ordibehesht", "Khordad", "Tir", "Mordad", "Shahrivar", "Mehr", "Aban", "Azar", "Dey", "Bahman", "Esfand" ], _cavh300 = {
    future: _cavh160,
    past: _cavh123
}, _cavh301 = [ "Tout", "Baba", "Hator", "Kiahk", "Toba", "Amshir", "Baramhat", "Baramouda", "Bashans", "Paona", "Epep", "Mesra", "Nasie" ], _cavh302 = [ "janeiro", "fevereiro", "março", "abril", "maio", "junho", "julho", "agosto", "setembro", "outubro", "novembro", "dezembro" ], _cavh303 = {
    displayName: "min",
    relativeTime: _cavh268
}, _cavh304 = {
    displayName: "ano",
    relativeTime: _cavh271
}, _cavh305 = {
    displayName: "dia",
    relativeTime: _cavh272
}, _cavh306 = {
    future: _cavh168,
    past: _cavh126
}, _cavh307 = {
    future: _cavh169,
    past: _cavh127
}, _cavh308 = [ "Meskerem", "Tekemt", "Hedar", "Tahsas", "Ter", "Yekatit", "Megabit", "Miazia", "Genbot", "Sene", "Hamle", "Nehasse", "Pagumen" ], _cavh309 = {
    displayName: "mês",
    relativeTime: _cavh275
}, _cavh310 = {
    displayName: "sem.",
    relativeTime: _cavh276
}, _cavh311 = [ "Chaitra", "Vaisakha", "Jyaistha", "Asadha", "Sravana", "Bhadra", "Asvina", "Kartika", "Agrahayana", "Pausa", "Magha", "Phalguna" ], _cavh312 = {
    future: _cavh175,
    past: _cavh130
}, _cavh313 = {
    displayName: "s",
    relativeTime: _cavh285
}, _cavh314 = {
    displayName: "h",
    relativeTime: _cavh286
}, _cavh315 = {
    future: _cavh198,
    past: _cavh141
}, _cavh316 = {
    midnight: "meia-noite",
    am: "a.m.",
    noon: "meio-dia",
    pm: "p.m.",
    morning1: "manhã",
    afternoon1: "tarde",
    evening1: "noite",
    night1: "madrugada"
}, _cavh317 = {
    am: "a.m.",
    pm: "p.m.",
    midnight: "meia-noite",
    noon: "meio-dia",
    morning1: "manhã",
    afternoon1: "tarde",
    evening1: "noite",
    night1: "madrugada"
}, _cavh318 = {
    abbreviated: _cavh1,
    narrow: [ "1", "2", "3", "4" ],
    wide: _cavh207
}, _cavh319 = [ "Muharram", "Safar", "Rabiʻ I", "Rabiʻ II", "Jumada I", "Jumada II", "Rajab", "Shaʻban", "Ramadan", "Shawwal", "Dhuʻl-Qiʻdah", "Dhuʻl-Hijjah" ], _cavh320 = {
    am: "manhã",
    pm: "tarde",
    midnight: "meia-noite",
    noon: "meio-dia",
    morning1: "manhã",
    afternoon1: "tarde",
    evening1: "noite",
    night1: "madrugada"
}, _cavh321 = {
    displayName: "min",
    relativeTime: _cavh288
}, _cavh322 = {
    displayName: "ano",
    relativeTime: _cavh292
}, _cavh323 = {
    displayName: "dia",
    relativeTime: _cavh293
}, _cavh324 = {
    displayName: "mês",
    relativeTime: _cavh296
}, _cavh325 = {
    displayName: "sem.",
    relativeTime: _cavh297
}, _cavh326 = {
    d: "E, d 'de' MMMM – E, d 'de' MMMM 'de' y G",
    M: "E, d 'de' MMMM – E, d 'de' MMMM 'de' y G",
    y: "E, d 'de' MMMM 'de' y – E, d 'de' MMMM 'de' y G"
}, _cavh327 = {
    am: "a.m.",
    pm: "p.m.",
    midnight: "meia-noite",
    noon: "meio-dia",
    morning1: "da manhã",
    afternoon1: "da tarde",
    evening1: "da noite",
    night1: "da madrugada"
}, _cavh328 = {
    displayName: "hora",
    relativeTime: _cavh298
}, _cavh329 = {
    am: "da manhã",
    pm: "da tarde",
    midnight: "meia-noite",
    noon: "meio-dia",
    morning1: "da manhã",
    afternoon1: "da tarde",
    evening1: "da noite",
    night1: "da madrugada"
}, _cavh330 = {
    displayName: "minuto",
    relativeTime: _cavh307
}, _cavh331 = {
    group: " ",
    decimal: ",",
    list: ";",
    percentSign: "%",
    plusSign: "+",
    minusSign: "-",
    exponential: "E",
    superscriptingExponent: "×",
    perMille: "‰",
    infinity: "∞",
    nan: "NaN",
    timeSeparator: ":"
}, _cavh332 = {
    displayName: "segundo",
    relative: [ "agora" ],
    relativeTime: _cavh312
}, _cavh333 = {
    symbols: _cavh331
}, _cavh334 = {
    displayName: "trim.",
    relative: _cavh159,
    relativeTime: _cavh281
}, _cavh335 = {
    format: _cavh238,
    numeric: _cavh3,
    standAlone: _cavh238
}, _cavh336 = {
    displayName: "ano",
    relative: _cavh136,
    relativeTime: _cavh292
}, _cavh337 = {
    displayName: "mês",
    relative: _cavh137,
    relativeTime: _cavh296
}, _cavh338 = {
    displayName: "trim.",
    relative: _cavh159,
    relativeTime: _cavh300
}, _cavh339 = {
    symbols: _cavh331,
    digits: "renderSpelloutCardinal"
}, _cavh340 = {
    displayName: "dia",
    relative: _cavh243,
    relativeTime: _cavh293
}, _cavh341 = {
    displayName: "semana",
    relative: _cavh167,
    relativeTime: _cavh306
}, _cavh342 = {
    symbols: _cavh331,
    digits: "renderSpelloutCardinalFinancial"
}, _cavh343 = {
    abbreviated: _cavh199,
    narrow: _cavh154,
    wide: _cavh287
}, _cavh344 = {
    displayName: "trimestre",
    relative: _cavh222,
    relativeTime: _cavh315
}, _cavh345 = {
    abbreviated: _cavh260,
    narrow: _cavh260,
    wide: _cavh260
}, _cavh346 = {
    abbreviated: _cavh249,
    narrow: _cavh135,
    wide: _cavh302
}, _cavh347 = {
    format: _cavh345
}, _cavh348 = {
    abbreviated: _cavh197,
    narrow: _cavh52,
    wide: _cavh284,
    "short": _cavh125
}, _cavh349 = {
    format: _cavh318,
    standAlone: _cavh318
}, _cavh350 = {
    abbreviated: _cavh294,
    narrow: _cavh166,
    wide: _cavh294
}, _cavh351 = {
    abbreviated: _cavh299,
    narrow: _cavh154,
    wide: _cavh299
}, _cavh352 = {
    abbreviated: _cavh301,
    narrow: _cavh166,
    wide: _cavh301
}, _cavh353 = {
    abbreviated: _cavh291,
    narrow: _cavh154,
    wide: _cavh319
}, _cavh354 = {
    abbreviated: _cavh308,
    narrow: _cavh166,
    wide: _cavh308
}, _cavh355 = {
    abbreviated: _cavh311,
    narrow: _cavh154,
    wide: _cavh311
}, _cavh356 = {
    mediumDate: "d 'de' MMM 'de' U",
    fullDate: "EEEE, d 'de' MMMM 'de' U",
    longDate: "d 'de' MMMM 'de' U",
    shortDate: "dd/MM/yy",
    fullTime: "HH:mm:ss zzzz",
    longTime: "HH:mm:ss z",
    mediumTime: "HH:mm:ss",
    shortTime: "HH:mm",
    shortDateTime: "dd/MM/yy HH:mm",
    mediumDateTime: "d 'de' MMM 'de' U HH:mm:ss",
    longDateTime: "d 'de' MMMM 'de' U HH:mm:ss z",
    fullDateTime: "EEEE, d 'de' MMMM 'de' U HH:mm:ss zzzz"
}, _cavh357 = {
    shortDate: "d/M/y G",
    fullDate: "EEEE, d 'de' MMMM 'de' y G",
    longDate: "d 'de' MMMM 'de' y G",
    mediumDate: "dd/MM/y G",
    fullTime: "HH:mm:ss zzzz",
    longTime: "HH:mm:ss z",
    mediumTime: "HH:mm:ss",
    shortTime: "HH:mm",
    shortDateTime: "d/M/y G, HH:mm",
    mediumDateTime: "dd/MM/y G, HH:mm:ss",
    longDateTime: "d 'de' MMMM 'de' y G 'às' HH:mm:ss z",
    fullDateTime: "EEEE, d 'de' MMMM 'de' y G 'às' HH:mm:ss zzzz"
}, _cavh358 = {
    "1000": _cavh21,
    "10000": _cavh45,
    "100000": _cavh71,
    "1000000": _cavh4,
    "10000000": _cavh6,
    "100000000": _cavh22,
    "1000000000": _cavh7,
    "10000000000": _cavh23,
    "100000000000": _cavh46,
    "1000000000000": _cavh8,
    "10000000000000": _cavh24,
    "100000000000000": _cavh47
}, _cavh359 = {
    "1000": _cavh48,
    "10000": _cavh72,
    "100000": _cavh84,
    "1000000": _cavh9,
    "10000000": _cavh25,
    "100000000": _cavh49,
    "1000000000": _cavh26,
    "10000000000": _cavh50,
    "100000000000": _cavh73,
    "1000000000000": _cavh10,
    "10000000000000": _cavh27,
    "100000000000000": _cavh51
}, _cavh360 = {
    abbreviated: _cavh317,
    narrow: _cavh317,
    wide: _cavh320
}, _cavh361 = {
    abbreviated: _cavh327,
    narrow: _cavh316,
    wide: _cavh329
}, _cavh362 = {
    "1000": _cavh20,
    "10000": _cavh44,
    "100000": _cavh70,
    "1000000": _cavh93,
    "10000000": _cavh104,
    "100000000": _cavh116,
    "1000000000": _cavh124,
    "10000000000": _cavh128,
    "100000000000": _cavh131,
    "1000000000000": _cavh94,
    "10000000000000": _cavh105,
    "100000000000000": _cavh117
}, _cavh363 = {
    format: _cavh343,
    standAlone: _cavh343
}, _cavh364 = {
    d: "d",
    E: "ccc",
    Ed: "d, E",
    Gy: "r U",
    GyMMM: "r(U) MMM",
    GyMMMd: "r MMM d",
    GyMMMEd: "r(U) MMM d, E",
    h: "h a",
    H: "HH",
    hm: "h:mm a",
    Hm: "HH:mm",
    hms: "h:mm:ss a",
    Hms: "HH:mm:ss",
    M: "L",
    Md: "MM-dd",
    MEd: "MM-dd, E",
    MMM: "LLL",
    MMMd: "MMM d",
    MMMEd: "MMM d, E",
    MMMMd: "MMMM d",
    ms: "mm:ss",
    UM: "U MM",
    UMd: "U MM-d",
    UMMM: "U MMM",
    UMMMd: "U MMM d",
    y: "r(U)",
    yMd: "r-MM-dd",
    yyyy: "r(U)",
    yyyyM: "r-MM",
    yyyyMd: "r-MM-dd",
    yyyyMEd: "r-MM-dd, E",
    yyyyMMM: "r(U) MMM",
    yyyyMMMd: "r MMM d",
    yyyyMMMEd: "r(U) MMM d, E",
    yyyyMMMM: "r(U) MMMM",
    yyyyQQQ: "r(U) QQQ",
    yyyyQQQQ: "r(U) QQQQ"
}, _cavh365 = {
    format: _cavh346,
    standAlone: _cavh346
}, _cavh366 = {
    format: _cavh348,
    standAlone: _cavh348
}, _cavh367 = {
    currencyMatch: /[^\u0024+<->\u005E`\u007C~¢-¦¨©¬®-±´¸×÷˂-˅˒-˟˥-˫˭˯-˿͵΄΅϶҂֏؆-؈؋؎؏۞۩۽۾߶৲৳৺৻૱୰௳-௺౿൹฿༁-༃༓༕-༗༚-༟༴༶༸྾-࿅࿇-࿌࿎࿏࿕-࿘႞႟᎐-᎙៛᥀᧞-᧿᭡-᭪᭴-᭼᾽᾿-῁῍-῏῝-῟῭-`´῾⁄⁒⁺-⁼₊-₌₠-₹℀℁℃-℆℈℉℔№-℘℞-℣℥℧℩℮℺℻⅀-⅄⅊-⅍⅏←-⌨⌫-⏳␀-␦⑀-⑊⒜-ⓩ─-⛿✁-❧➔-⟄⟇-⟥⟰-⦂⦙-⧗⧜-⧻⧾-⭌⭐-⭙⳥-⳪⺀-⺙⺛-⻳⼀-⿕⿰-⿻〄〒〓〠〶〷〾〿゛゜㆐㆑㆖-㆟㇀-㇣㈀-㈞㈪-㉇㉐㉠-㉿㊊-㊰㋀-㋾㌀-㏿䷀-䷿꒐-꓆꜀-꜖꜠꜡꞉꞊꠨-꠫꠶-꠹꩷-꩹﬩﮲-﯁﷼﷽﹢﹤-﹦﹩＄＋＜-＞＾｀｜～￠-￦￨-￮￼�]/,
    surroundingMatch: /[0-9²³¹¼-¾٠-٩۰-۹߀-߉०-९০-৯৴-৹੦-੯૦-૯୦-୯୲-୷௦-௲౦-౯౸-౾೦-೯൦-൵๐-๙໐-໙༠-༳၀-၉႐-႙፩-፼ᛮ-ᛰ០-៩៰-៹᠐-᠙᥆-᥏᧐-᧚᪀-᪉᪐-᪙᭐-᭙᮰-᮹᱀-᱉᱐-᱙⁰⁴-⁹₀-₉⅐-ↂↅ-↉①-⒛⓪-⓿❶-➓⳽〇〡-〩〸-〺㆒-㆕㈠-㈩㉈-㉏㉑-㉟㊀-㊉㊱-㊿꘠-꘩ꛦ-ꛯ꠰-꠵꣐-꣙꤀-꤉꧐-꧙꩐-꩙꯰-꯹０-９]/,
    insertBetween: " "
}, _cavh368 = [ undefined, "jia-zi", "yi-chou", "bing-yin", "ding-mao", "wu-chen", "ji-si", "geng-wu", "xin-wei", "ren-shen", "gui-you", "jia-xu", "yi-hai", "bing-zi", "ding-chou", "wu-yin", "ji-mao", "geng-chen", "xin-si", "ren-wu", "gui-wei", "jia-shen", "yi-you", "bing-xu", "ding-hai", "wu-zi", "ji-chou", "geng-yin", "xin-mao", "ren-chen", "gui-si", "jia-wu", "yi-wei", "bing-shen", "ding-you", "wu-xu", "ji-hai", "geng-zi", "xin-chou", "ren-yin", "gui-mao", "jia-chen", "yi-si", "bing-wu", "ding-wei", "wu-shen", "ji-you", "geng-xu", "xin-hai", "ren-zi", "gui-chou", "jia-yin", "yi-mao", "bing-chen", "ding-si", "wu-wu", "ji-wei", "geng-shen", "xin-you", "ren-xu" ], _cavh369 = {
    format: _cavh353,
    standAlone: _cavh353
}, _cavh370 = {
    yyyyMMM: "MM/y G",
    yyyyMMMd: "d/MM/y G",
    yyyyMMMEd: "E, d/MM/y G",
    yyyyMMMEEEEd: "EEEE, d/MM/y",
    yyyyQQQ: "QQQQ 'de' y G",
    yyyyQQQQ: "QQQQ 'de' y G",
    d: "d",
    E: "ccc",
    Ed: "E, d",
    Gy: "y G",
    GyMMM: "MMM 'de' y G",
    GyMMMd: "d 'de' MMM 'de' y G",
    GyMMMEd: "E, d 'de' MMM 'de' y G",
    h: "h a",
    H: "HH",
    hm: "h:mm a",
    Hm: "HH:mm",
    hms: "h:mm:ss a",
    Hms: "HH:mm:ss",
    M: "L",
    Md: "d/M",
    MEd: "E, dd/MM",
    MMM: "LLL",
    MMMd: "d 'de' MMM",
    MMMEd: "E, d 'de' MMM",
    MMMMd: "d 'de' MMMM",
    MMMMEd: "E, d 'de' MMMM",
    ms: "mm:ss",
    y: "y G",
    yyyy: "y G",
    yyyyM: "MM/y GGGGG",
    yyyyMd: "dd/MM/y GGGGG",
    yyyyMEd: "E, dd/MM/y GGGGG",
    yyyyMMMM: "MMMM 'de' y G",
    yyyyMMMMd: "d 'de' MMMM 'de' y G",
    yyyyMMMMEd: "E, d 'de' MMMM 'de' y G",
    Ehm: "E h:mm a",
    EHm: "E HH:mm",
    Ehms: "E h:mm:ss a",
    EHms: "E HH:mm:ss"
}, _cavh371 = {
    format: _cavh361,
    standAlone: _cavh360
}, _cavh372 = {
    basic: _cavh356,
    cldr: _cavh364
}, _cavh373 = {
    "long": _cavh362,
    "short": _cavh358,
    "default": "#,##0.###"
}, _cavh374 = {
    d: {
        d: "d–d"
    },
    h: _cavh11,
    H: {
        H: "HH–HH"
    },
    hm: _cavh157,
    Hm: _cavh85,
    hmv: _cavh173,
    Hmv: _cavh106,
    hv: _cavh58,
    Hv: {
        H: "HH–HH v"
    },
    M: {
        M: "MM–MM"
    },
    Md: _cavh112,
    MEd: _cavh138,
    MMM: {
        M: "LLL–LLL"
    },
    MMMd: _cavh75,
    MMMEd: _cavh139,
    y: {
        y: "U–U"
    },
    yM: _cavh90,
    yMd: _cavh223,
    yMEd: _cavh277,
    yMMM: _cavh91,
    yMMMd: _cavh165,
    yMMMEd: _cavh269,
    yMMMM: _cavh113
}, _cavh375 = {
    basic: _cavh357,
    cldr: _cavh370
}, _cavh376 = {
    beforeCurrency: _cavh367,
    afterCurrency: _cavh367
}, _cavh377 = {
    h: _cavh11,
    hm: {
        h: "h:mm – h:mm a"
    },
    M: {
        M: "MM–MM"
    },
    MMM: {
        M: "MMM–MMM"
    },
    MMMEd: _cavh164,
    MMMMEd: _cavh267,
    y: {
        y: "y–y G"
    },
    yMMMEd: _cavh278,
    yMMMM: _cavh12,
    yMMMMEd: _cavh326,
    d: {
        d: "d–d"
    },
    H: {
        H: "HH'h' - HH'h'"
    },
    Hm: _cavh85,
    hmv: _cavh173,
    Hmv: _cavh106,
    hv: _cavh74,
    Hv: {
        H: "HH – HH v"
    },
    Md: _cavh107,
    MEd: _cavh134,
    MMMd: _cavh129,
    yM: _cavh108,
    yMd: _cavh248,
    yMEd: _cavh283,
    yMMM: _cavh144,
    yMMMd: _cavh295
}, _cavh378 = {
    "short": _cavh359,
    "default": "#,##0.00 ¤",
    one: "{0} {1}",
    other: "{0} {1}",
    currencySpacing: _cavh376
}, _cavh379 = {
    abbreviated: _cavh368,
    narrow: _cavh368,
    wide: _cavh368
}, _cavh380 = {
    format: _cavh379
}, _cavh381 = {
    scientific: {
        "default": "#E0"
    },
    decimal: _cavh373,
    currency: _cavh378,
    percent: {
        "default": "#,##0%"
    }
}, _cavh382 = [ "Taika (645–650)", "Hakuchi (650–671)", "Hakuhō (672–686)", "Shuchō (686–701)", "Taihō (701–704)", "Keiun (704–708)", "Wadō (708–715)", "Reiki (715–717)", "Yōrō (717–724)", "Jinki (724–729)", "Tenpyō (729–749)", "Tenpyō-kampō (749-749)", "Tenpyō-shōhō (749-757)", "Tenpyō-hōji (757-765)", "Tenpyō-jingo (765-767)", "Jingo-keiun (767-770)", "Hōki (770–780)", "Ten-ō (781-782)", "Enryaku (782–806)", "Daidō (806–810)", "Kōnin (810–824)", "Tenchō (824–834)", "Jōwa (834–848)", "Kajō (848–851)", "Ninju (851–854)", "Saikō (854–857)", "Ten-an (857-859)", "Jōgan (859–877)", "Gangyō (877–885)", "Ninna (885–889)", "Kanpyō (889–898)", "Shōtai (898–901)", "Engi (901–923)", "Enchō (923–931)", "Jōhei (931–938)", "Tengyō (938–947)", "Tenryaku (947–957)", "Tentoku (957–961)", "Ōwa (961–964)", "Kōhō (964–968)", "Anna (968–970)", "Tenroku (970–973)", "Ten’en (973–976)", "Jōgen (976–978)", "Tengen (978–983)", "Eikan (983–985)", "Kanna (985–987)", "Eien (987–989)", "Eiso (989–990)", "Shōryaku (990–995)", "Chōtoku (995–999)", "Chōhō (999–1004)", "Kankō (1004–1012)", "Chōwa (1012–1017)", "Kannin (1017–1021)", "Jian (1021–1024)", "Manju (1024–1028)", "Chōgen (1028–1037)", "Chōryaku (1037–1040)", "Chōkyū (1040–1044)", "Kantoku (1044–1046)", "Eishō (1046–1053)", "Tengi (1053–1058)", "Kōhei (1058–1065)", "Jiryaku (1065–1069)", "Enkyū (1069–1074)", "Shōho (1074–1077)", "Shōryaku (1077–1081)", "Eihō (1081–1084)", "Ōtoku (1084–1087)", "Kanji (1087–1094)", "Kahō (1094–1096)", "Eichō (1096–1097)", "Jōtoku (1097–1099)", "Kōwa (1099–1104)", "Chōji (1104–1106)", "Kashō (1106–1108)", "Tennin (1108–1110)", "Ten-ei (1110-1113)", "Eikyū (1113–1118)", "Gen’ei (1118–1120)", "Hōan (1120–1124)", "Tenji (1124–1126)", "Daiji (1126–1131)", "Tenshō (1131–1132)", "Chōshō (1132–1135)", "Hōen (1135–1141)", "Eiji (1141–1142)", "Kōji (1142–1144)", "Ten’yō (1144–1145)", "Kyūan (1145–1151)", "Ninpei (1151–1154)", "Kyūju (1154–1156)", "Hōgen (1156–1159)", "Heiji (1159–1160)", "Eiryaku (1160–1161)", "Ōho (1161–1163)", "Chōkan (1163–1165)", "Eiman (1165–1166)", "Nin’an (1166–1169)", "Kaō (1169–1171)", "Shōan (1171–1175)", "Angen (1175–1177)", "Jishō (1177–1181)", "Yōwa (1181–1182)", "Juei (1182–1184)", "Genryaku (1184–1185)", "Bunji (1185–1190)", "Kenkyū (1190–1199)", "Shōji (1199–1201)", "Kennin (1201–1204)", "Genkyū (1204–1206)", "Ken’ei (1206–1207)", "Jōgen (1207–1211)", "Kenryaku (1211–1213)", "Kenpō (1213–1219)", "Jōkyū (1219–1222)", "Jōō (1222–1224)", "Gennin (1224–1225)", "Karoku (1225–1227)", "Antei (1227–1229)", "Kanki (1229–1232)", "Jōei (1232–1233)", "Tenpuku (1233–1234)", "Bunryaku (1234–1235)", "Katei (1235–1238)", "Ryakunin (1238–1239)", "En’ō (1239–1240)", "Ninji (1240–1243)", "Kangen (1243–1247)", "Hōji (1247–1249)", "Kenchō (1249–1256)", "Kōgen (1256–1257)", "Shōka (1257–1259)", "Shōgen (1259–1260)", "Bun’ō (1260–1261)", "Kōchō (1261–1264)", "Bun’ei (1264–1275)", "Kenji (1275–1278)", "Kōan (1278–1288)", "Shōō (1288–1293)", "Einin (1293–1299)", "Shōan (1299–1302)", "Kengen (1302–1303)", "Kagen (1303–1306)", "Tokuji (1306–1308)", "Enkyō (1308–1311)", "Ōchō (1311–1312)", "Shōwa (1312–1317)", "Bunpō (1317–1319)", "Genō (1319–1321)", "Genkō (1321–1324)", "Shōchū (1324–1326)", "Karyaku (1326–1329)", "Gentoku (1329–1331)", "Genkō (1331–1334)", "Kenmu (1334–1336)", "Engen (1336–1340)", "Kōkoku (1340–1346)", "Shōhei (1346–1370)", "Kentoku (1370–1372)", "Bunchū (1372–1375)", "Tenju (1375–1379)", "Kōryaku (1379–1381)", "Kōwa (1381–1384)", "Genchū (1384–1392)", "Meitoku (1384–1387)", "Kakei (1387–1389)", "Kōō (1389–1390)", "Meitoku (1390–1394)", "Ōei (1394–1428)", "Shōchō (1428–1429)", "Eikyō (1429–1441)", "Kakitsu (1441–1444)", "Bun’an (1444–1449)", "Hōtoku (1449–1452)", "Kyōtoku (1452–1455)", "Kōshō (1455–1457)", "Chōroku (1457–1460)", "Kanshō (1460–1466)", "Bunshō (1466–1467)", "Ōnin (1467–1469)", "Bunmei (1469–1487)", "Chōkyō (1487–1489)", "Entoku (1489–1492)", "Meiō (1492–1501)", "Bunki (1501–1504)", "Eishō (1504–1521)", "Taiei (1521–1528)", "Kyōroku (1528–1532)", "Tenbun (1532–1555)", "Kōji (1555–1558)", "Eiroku (1558–1570)", "Genki (1570–1573)", "Tenshō (1573–1592)", "Bunroku (1592–1596)", "Keichō (1596–1615)", "Genna (1615–1624)", "Kan’ei (1624–1644)", "Shōho (1644–1648)", "Keian (1648–1652)", "Jōō (1652–1655)", "Meireki (1655–1658)", "Manji (1658–1661)", "Kanbun (1661–1673)", "Enpō (1673–1681)", "Tenna (1681–1684)", "Jōkyō (1684–1688)", "Genroku (1688–1704)", "Hōei (1704–1711)", "Shōtoku (1711–1716)", "Kyōhō (1716–1736)", "Genbun (1736–1741)", "Kanpō (1741–1744)", "Enkyō (1744–1748)", "Kan’en (1748–1751)", "Hōreki (1751–1764)", "Meiwa (1764–1772)", "An’ei (1772–1781)", "Tenmei (1781–1789)", "Kansei (1789–1801)", "Kyōwa (1801–1804)", "Bunka (1804–1818)", "Bunsei (1818–1830)", "Tenpō (1830–1844)", "Kōka (1844–1848)", "Kaei (1848–1854)", "Ansei (1854–1860)", "Man’en (1860–1861)", "Bunkyū (1861–1864)", "Genji (1864–1865)", "Keiō (1865–1868)", "Meiji", "Taishō", "Shōwa", "Heisei" ], _cavh383 = {
    "minute-short": _cavh321,
    "minute-narrow": _cavh303,
    "second-short": _cavh313,
    era: {
        displayName: "era"
    },
    year: _cavh336,
    "year-short": _cavh322,
    "year-narrow": _cavh304,
    quarter: _cavh344,
    "quarter-short": _cavh338,
    "quarter-narrow": _cavh334,
    month: _cavh337,
    "month-short": _cavh324,
    "month-narrow": _cavh309,
    week: _cavh341,
    "week-short": _cavh325,
    "week-narrow": _cavh310,
    day: _cavh340,
    "day-short": _cavh323,
    "day-narrow": _cavh305,
    weekday: _cavh53,
    dayperiod: _cavh2,
    hour: _cavh328,
    "hour-short": _cavh314,
    "hour-narrow": _cavh289,
    minute: _cavh330,
    second: _cavh332,
    "second-narrow": _cavh290,
    zone: _cavh28,
    "mon-short": _cavh244,
    "tue-short": _cavh215,
    "wed-short": _cavh232,
    "thu-short": _cavh233,
    "thu-narrow": _cavh183,
    "fri-short": _cavh216,
    sun: _cavh245,
    "sun-short": _cavh184,
    "sun-narrow": _cavh184,
    mon: _cavh282,
    "mon-narrow": _cavh185,
    tue: _cavh273,
    "tue-narrow": _cavh186,
    wed: _cavh279,
    "wed-narrow": _cavh187,
    thu: _cavh280,
    fri: _cavh274,
    "fri-narrow": _cavh188,
    sat: _cavh234,
    "sat-short": _cavh189,
    "sat-narrow": _cavh189
}, _cavh384 = {
    dateFormats: {
        basic: {},
        cldr: {}
    },
    fields: _cavh383
}, _cavh385 = {
    dayParts: _cavh347,
    days: _cavh380,
    months: _cavh380,
    years: _cavh380,
    zodiacs: _cavh347
}, _cavh386 = {
    dateFormats: _cavh375,
    datePartsOrder: "dmy",
    dateIntervalFormats: _cavh377,
    dateIntervalFallbackFormat: "{0} - {1}",
    dayNames: _cavh366,
    dayPeriods: _cavh371,
    monthNames: _cavh369,
    eraNames: _cavh78,
    quarterNames: _cavh349,
    fields: _cavh383
}, _cavh387 = {
    dateFormats: _cavh372,
    datePartsOrder: "dmy",
    dateIntervalFormats: _cavh374,
    dateIntervalFallbackFormat: "{0} – {1}",
    dayNames: _cavh366,
    dayPeriods: _cavh371,
    cyclicNames: _cavh385,
    monthNames: _cavh363,
    monthPatterns: _cavh335,
    quarterNames: _cavh349,
    fields: _cavh383
};

inter.id = "pt_gw";

inter.delimiters = {
    quotationStart: "«",
    quotationEnd: "»",
    alternateQuotationStart: "“",
    alternateQuotationEnd: "”"
};

inter.unitPatterns = {
    "long": {
        unit: {
            accelerationGForce: {
                one: "{0} força G",
                other: "{0} força G"
            },
            accelerationMeterPerSecondSquared: {
                one: "{0} metro por segundo quadrado",
                other: "{0} metros por segundo quadrado"
            },
            areaSquareKilometer: {
                one: "{0} quilómetro quadrado",
                other: "{0} quilómetros quadrados"
            },
            concentrKarat: _cavh120,
            consumptionLiterPerKilometer: {
                one: "{0} litro por quilómetro",
                other: "{0} litros por quilómetro"
            },
            "consumptionLiterPer-100kilometers": {
                one: "{0} litro por 100 quilómetros",
                other: "{0} litros por 100 quilómetros"
            },
            durationCentury: {
                one: "{0} século",
                other: "{0} séculos"
            },
            energyFoodcalorie: _cavh140,
            lengthKilometer: {
                one: "{0} quilómetro",
                other: "{0} quilómetros"
            },
            lengthMicrometer: {
                one: "{0} micrómetro",
                other: "{0} micrómetros"
            },
            lengthNanometer: {
                one: "{0} nanómetro",
                other: "{0} nanómetros"
            },
            lengthPicometer: {
                one: "{0} picómetro",
                other: "{0} picómetros"
            },
            lengthAstronomicalUnit: {
                one: "{0} unidade astronómica",
                other: "{0} unidades astronómicas"
            },
            speedKilometerPerHour: {
                one: "{0} quilómetro por hora",
                other: "{0} quilómetros por hora"
            },
            volumeCubicKilometer: {
                one: "{0} quilómetro cúbico",
                other: "{0} quilómetros cúbicos"
            },
            volumeCup: {
                one: "{0} chávena",
                other: "{0} chávenas"
            },
            angleRevolution: {
                one: "{0} revolução",
                other: "{0} revoluções"
            },
            angleRadian: {
                one: "{0} radiano",
                other: "{0} radianos"
            },
            angleDegree: {
                one: "{0} grau",
                other: "{0} graus"
            },
            angleArcMinute: {
                one: "{0} minuto de arco",
                other: "{0} minutos de arco"
            },
            angleArcSecond: {
                one: "{0} segundo de arco",
                other: "{0} segundos de arco"
            },
            areaHectare: {
                one: "{0} hectare",
                other: "{0} hectares"
            },
            areaSquareMeter: {
                one: "{0} metro quadrado",
                other: "{0} metros quadrados"
            },
            areaSquareCentimeter: {
                one: "{0} centímetro quadrado",
                other: "{0} centímetros quadrados"
            },
            areaSquareMile: {
                one: "{0} milha quadrada",
                other: "{0} milhas quadradas"
            },
            areaAcre: _cavh92,
            areaSquareYard: {
                one: "{0} jarda quadrada",
                other: "{0} jardas quadradas"
            },
            areaSquareFoot: {
                one: "{0} pé quadrado",
                other: "{0} pés quadrados"
            },
            areaSquareInch: {
                one: "{0} polegada quadrada",
                other: "{0} polegadas quadradas"
            },
            consumptionMilePerGallon: {
                one: "{0} milha por galão",
                other: "{0} milhas por galão"
            },
            digitalTerabyte: {
                one: "{0} terabyte",
                other: "{0} terabytes"
            },
            digitalTerabit: {
                one: "{0} terabit",
                other: "{0} terabits"
            },
            digitalGigabyte: {
                one: "{0} gigabyte",
                other: "{0} gigabytes"
            },
            digitalGigabit: {
                one: "{0} gigabit",
                other: "{0} gigabits"
            },
            digitalMegabyte: {
                one: "{0} megabyte",
                other: "{0} megabytes"
            },
            digitalMegabit: {
                one: "{0} megabit",
                other: "{0} megabits"
            },
            digitalKilobyte: {
                one: "{0} kilobyte",
                other: "{0} kilobytes"
            },
            digitalKilobit: {
                one: "{0} kilobit",
                other: "{0} kilobits"
            },
            digitalByte: {
                one: "{0} byte",
                other: "{0} bytes"
            },
            digitalBit: {
                one: "{0} bit",
                other: "{0} bits"
            },
            durationYear: _cavh76,
            durationMonth: _cavh79,
            durationWeek: {
                one: "{0} semana",
                other: "{0} semanas"
            },
            durationDay: _cavh77,
            durationHour: {
                one: "{0} hora",
                other: "{0} horas"
            },
            durationMinute: {
                one: "{0} minuto",
                other: "{0} minutos"
            },
            durationSecond: {
                one: "{0} segundo",
                other: "{0} segundos"
            },
            durationMillisecond: {
                one: "{0} milissegundo",
                other: "{0} milissegundos"
            },
            durationMicrosecond: {
                one: "{0} microssegundo",
                other: "{0} microssegundos"
            },
            durationNanosecond: {
                one: "{0} nanossegundo",
                other: "{0} nanossegundos"
            },
            electricAmpere: {
                one: "{0} ampere",
                other: "{0} amperes"
            },
            electricMilliampere: {
                one: "{0} miliampere",
                other: "{0} miliamperes"
            },
            electricOhm: {
                one: "{0} ohm",
                other: "{0} ohms"
            },
            electricVolt: {
                one: "{0} volt",
                other: "{0} volts"
            },
            energyKilocalorie: _cavh140,
            energyCalorie: {
                one: "{0} caloria",
                other: "{0} calorias"
            },
            energyKilojoule: {
                one: "{0} quilojoule",
                other: "{0} quilojoules"
            },
            energyJoule: {
                one: "{0} joule",
                other: "{0} joules"
            },
            energyKilowattHour: {
                one: "{0} quilowatt-hora",
                other: "{0} quilowatts-hora"
            },
            frequencyGigahertz: {
                one: "{0} gigahertz",
                other: "{0} gigahertz"
            },
            frequencyMegahertz: {
                one: "{0} megahertz",
                other: "{0} megahertz"
            },
            frequencyKilohertz: {
                one: "{0} kilohertz",
                other: "{0} kilohertz"
            },
            frequencyHertz: {
                one: "{0} hertz",
                other: "{0} hertz"
            },
            lengthMeter: {
                one: "{0} metro",
                other: "{0} metros"
            },
            lengthDecimeter: {
                one: "{0} decímetro",
                other: "{0} decímetros"
            },
            lengthCentimeter: {
                one: "{0} centímetro",
                other: "{0} centímetros"
            },
            lengthMillimeter: {
                one: "{0} milímetro",
                other: "{0} milímetros"
            },
            lengthMile: _cavh103,
            lengthYard: {
                one: "{0} jarda",
                other: "{0} jardas"
            },
            lengthFoot: _cavh59,
            lengthInch: {
                one: "{0} polegada",
                other: "{0} polegadas"
            },
            lengthParsec: {
                one: "{0} parsec",
                other: "{0} parsecs"
            },
            lengthLightYear: _cavh121,
            lengthNauticalMile: {
                one: "{0} milha náutica",
                other: "{0} milhas náuticas"
            },
            lengthMileScandinavian: {
                one: "{0} milha escandinava",
                other: "{0} milhas escandinavas"
            },
            lightLux: {
                one: "{0} lux",
                other: "{0} lux"
            },
            massMetricTon: {
                one: "{0} tonelada métrica",
                other: "{0} toneladas métricas"
            },
            massKilogram: {
                one: "{0} quilograma",
                other: "{0} quilogramas"
            },
            massGram: {
                one: "{0} grama",
                other: "{0} gramas"
            },
            massMilligram: {
                one: "{0} miligrama",
                other: "{0} miligramas"
            },
            massMicrogram: {
                one: "{0} micrograma",
                other: "{0} microgramas"
            },
            massTon: {
                one: "{0} tonelada",
                other: "{0} toneladas"
            },
            massPound: {
                one: "{0} libra",
                other: "{0} libras"
            },
            massOunce: {
                one: "{0} onça",
                other: "{0} onças"
            },
            massOunceTroy: {
                one: "{0} onça troy",
                other: "{0} onças troy"
            },
            massCarat: _cavh120,
            powerGigawatt: {
                one: "{0} gigawatt",
                other: "{0} gigawatts"
            },
            powerMegawatt: {
                one: "{0} megawatt",
                other: "{0} megawatts"
            },
            powerKilowatt: {
                one: "{0} quilowatt",
                other: "{0} quilowatts"
            },
            powerWatt: {
                one: "{0} watt",
                other: "{0} watts"
            },
            powerMilliwatt: {
                one: "{0} miliwatt",
                other: "{0} miliwatts"
            },
            powerHorsepower: {
                one: "{0} cavalo-vapor",
                other: "{0} cavalos-vapor"
            },
            pressureHectopascal: {
                one: "{0} hectopascal",
                other: "{0} hectopascais"
            },
            pressureMillimeterOfMercury: {
                one: "{0} milímetro de mercúrio",
                other: "{0} milímetros de mercúrio"
            },
            pressurePoundPerSquareInch: _cavh61,
            pressureInchHg: {
                one: "{0} polegada de mercúrio",
                other: "{0} polegadas de mercúrio"
            },
            pressureMillibar: {
                one: "{0} milibar",
                other: "{0} milibares"
            },
            speedMeterPerSecond: {
                one: "{0} metro por segundo",
                other: "{0} metros por segundo"
            },
            speedMilePerHour: {
                one: "{0} milha por hora",
                other: "{0} milhas por hora"
            },
            speedKnot: _cavh60,
            temperatureGeneric: _cavh5,
            temperatureCelsius: {
                one: "{0} grau Celsius",
                other: "{0} graus Celsius"
            },
            temperatureFahrenheit: {
                one: "{0} grau Fahrenheit",
                other: "{0} graus Fahrenheit"
            },
            temperatureKelvin: {
                one: "{0} kelvin",
                other: "{0} kelvins"
            },
            volumeCubicMeter: {
                one: "{0} metro cúbico",
                other: "{0} metros cúbicos"
            },
            volumeCubicCentimeter: {
                one: "{0} centímetro cúbico",
                other: "{0} centímetros cúbicos"
            },
            volumeCubicMile: {
                one: "{0} milha cúbica",
                other: "{0} milhas cúbicas"
            },
            volumeCubicYard: {
                one: "{0} jarda cúbica",
                other: "{0} jardas cúbicas"
            },
            volumeCubicFoot: {
                one: "{0} pé cúbico",
                other: "{0} pés cúbicos"
            },
            volumeCubicInch: {
                one: "{0} polegada cúbica",
                other: "{0} polegadas cúbicas"
            },
            volumeMegaliter: {
                one: "{0} megalitro",
                other: "{0} megalitros"
            },
            volumeHectoliter: {
                one: "{0} hectolitro",
                other: "{0} hectolitros"
            },
            volumeLiter: {
                one: "{0} litro",
                other: "{0} litros"
            },
            volumeDeciliter: {
                one: "{0} decilitro",
                other: "{0} decilitros"
            },
            volumeCentiliter: {
                one: "{0} centilitro",
                other: "{0} centilitros"
            },
            volumeMilliliter: {
                one: "{0} mililitro",
                other: "{0} mililitros"
            },
            volumePintMetric: {
                one: "{0} pint métrico",
                other: "{0} pints métricos"
            },
            volumeCupMetric: {
                one: "{0} xícara métrica",
                other: "{0} xícaras métricas"
            },
            volumeAcreFoot: {
                one: "{0} acre-pé",
                other: "{0} acre-pés"
            },
            volumeGallon: {
                one: "{0} galão",
                other: "{0} galões"
            },
            volumeQuart: {
                one: "{0} quarto",
                other: "{0} quartos"
            },
            volumePint: {
                one: "{0} pint",
                other: "{0} pints"
            },
            volumeFluidOunce: {
                one: "{0} onça fluida",
                other: "{0} onças fluidas"
            },
            volumeTablespoon: {
                one: "{0} colher de sopa",
                other: "{0} colheres de sopa"
            },
            volumeTeaspoon: {
                one: "{0} colher de chá",
                other: "{0} colheres de chá"
            }
        },
        compoundUnit: {
            per: "{0} por {1}"
        }
    },
    "short": {
        unit: {
            areaAcre: _cavh92,
            areaSquareInch: {
                one: "{0} in²",
                other: "{0} in²"
            },
            concentrKarat: {
                one: "{0} kt",
                other: "{0} kt"
            },
            "consumptionLiterPer-100kilometers": {
                one: "{0} l/100km",
                other: "{0} l/100km"
            },
            durationSecond: _cavh13,
            energyFoodcalorie: _cavh80,
            lengthMile: _cavh103,
            lengthNauticalMile: {
                one: "{0} nmi",
                other: "{0} nmi"
            },
            massTon: {
                one: "{0} ton",
                other: "{0} ton"
            },
            massCarat: {
                one: "{0} ct",
                other: "{0} ct"
            },
            pressureInchHg: {
                one: "{0} inHg",
                other: "{0} inHg"
            },
            pressureMillibar: _cavh30,
            speedMilePerHour: _cavh81,
            temperatureCelsius: {
                one: "{0} °C",
                other: "{0} °C"
            },
            volumeCubicInch: {
                one: "{0} in³",
                other: "{0} in³"
            },
            volumeAcreFoot: {
                one: "{0} ac ft",
                other: "{0} ac ft"
            },
            volumeCup: {
                one: "{0} cháv.",
                other: "{0} cháv."
            },
            volumeTablespoon: {
                one: "{0} cs",
                other: "{0} cs"
            },
            accelerationGForce: _cavh14,
            accelerationMeterPerSecondSquared: {
                one: "{0} m/s²",
                other: "{0} m/s²"
            },
            angleRevolution: {
                one: "{0} rev",
                other: "{0} rev"
            },
            angleRadian: {
                one: "{0} rad",
                other: "{0} rad"
            },
            angleDegree: _cavh5,
            angleArcMinute: {
                one: "{0} arcmin",
                other: "{0} arcmins"
            },
            angleArcSecond: {
                one: "{0} arcseg",
                other: "{0} arcsegs"
            },
            areaSquareKilometer: _cavh62,
            areaHectare: _cavh31,
            areaSquareMeter: _cavh32,
            areaSquareCentimeter: {
                one: "{0} cm²",
                other: "{0} cm²"
            },
            areaSquareMile: _cavh63,
            areaSquareYard: {
                one: "{0} yd²",
                other: "{0} yd²"
            },
            areaSquareFoot: _cavh64,
            consumptionLiterPerKilometer: {
                one: "{0} l/km",
                other: "{0} l/km"
            },
            consumptionMilePerGallon: {
                one: "{0} mpg",
                other: "{0} mpg"
            },
            digitalTerabyte: {
                one: "{0} TB",
                other: "{0} TB"
            },
            digitalTerabit: {
                one: "{0} Tb",
                other: "{0} Tb"
            },
            digitalGigabyte: {
                one: "{0} GB",
                other: "{0} GB"
            },
            digitalGigabit: {
                one: "{0} Gb",
                other: "{0} Gb"
            },
            digitalMegabyte: {
                one: "{0} MB",
                other: "{0} MB"
            },
            digitalMegabit: {
                one: "{0} Mb",
                other: "{0} Mb"
            },
            digitalKilobyte: {
                one: "{0} kB",
                other: "{0} kB"
            },
            digitalKilobit: {
                one: "{0} kb",
                other: "{0} kb"
            },
            digitalByte: {
                one: "{0} byte",
                other: "{0} byte"
            },
            digitalBit: {
                one: "{0} bit",
                other: "{0} bit"
            },
            durationCentury: {
                one: "{0} séc.",
                other: "{0} sécs."
            },
            durationYear: _cavh76,
            durationMonth: _cavh79,
            durationWeek: _cavh82,
            durationDay: _cavh77,
            durationHour: _cavh15,
            durationMinute: _cavh65,
            durationMillisecond: _cavh33,
            durationMicrosecond: {
                one: "{0} μs",
                other: "{0} μs"
            },
            durationNanosecond: {
                one: "{0} ns",
                other: "{0} ns"
            },
            electricAmpere: {
                one: "{0} A",
                other: "{0} A"
            },
            electricMilliampere: {
                one: "{0} mA",
                other: "{0} mA"
            },
            electricOhm: {
                one: "{0} Ω",
                other: "{0} Ω"
            },
            electricVolt: {
                one: "{0} V",
                other: "{0} V"
            },
            energyKilocalorie: _cavh80,
            energyCalorie: {
                one: "{0} cal",
                other: "{0} cal"
            },
            energyKilojoule: {
                one: "{0} kJ",
                other: "{0} kJ"
            },
            energyJoule: {
                one: "{0} J",
                other: "{0} J"
            },
            energyKilowattHour: {
                one: "{0} kWh",
                other: "{0} kWh"
            },
            frequencyGigahertz: {
                one: "{0} GHz",
                other: "{0} GHz"
            },
            frequencyMegahertz: {
                one: "{0} MHz",
                other: "{0} MHz"
            },
            frequencyKilohertz: {
                one: "{0} kHz",
                other: "{0} kHz"
            },
            frequencyHertz: {
                one: "{0} Hz",
                other: "{0} Hz"
            },
            lengthKilometer: _cavh34,
            lengthMeter: _cavh16,
            lengthDecimeter: {
                one: "{0} dm",
                other: "{0} dm"
            },
            lengthCentimeter: _cavh35,
            lengthMillimeter: _cavh36,
            lengthMicrometer: {
                one: "{0} µm",
                other: "{0} µm"
            },
            lengthNanometer: {
                one: "{0} nm",
                other: "{0} nm"
            },
            lengthPicometer: _cavh37,
            lengthYard: _cavh38,
            lengthFoot: _cavh59,
            lengthInch: {
                one: "{0} pol.",
                other: "{0} pol."
            },
            lengthParsec: {
                one: "{0} pc",
                other: "{0} pc"
            },
            lengthLightYear: _cavh121,
            lengthAstronomicalUnit: {
                one: "{0} ua",
                other: "{0} ua"
            },
            lengthMileScandinavian: {
                one: "{0} smi",
                other: "{0} smi"
            },
            lightLux: {
                one: "{0} lx",
                other: "{0} lx"
            },
            massMetricTon: {
                one: "{0} t",
                other: "{0} t"
            },
            massKilogram: _cavh39,
            massGram: _cavh17,
            massMilligram: {
                one: "{0} mg",
                other: "{0} mg"
            },
            massMicrogram: {
                one: "{0} µg",
                other: "{0} µg"
            },
            massPound: _cavh40,
            massOunce: _cavh41,
            massOunceTroy: {
                one: "{0} oz t",
                other: "{0} oz t"
            },
            powerGigawatt: {
                one: "{0} GW",
                other: "{0} GW"
            },
            powerMegawatt: {
                one: "{0} MW",
                other: "{0} MW"
            },
            powerKilowatt: _cavh42,
            powerWatt: _cavh18,
            powerMilliwatt: {
                one: "{0} mW",
                other: "{0} mW"
            },
            powerHorsepower: _cavh43,
            pressureHectopascal: _cavh66,
            pressureMillimeterOfMercury: {
                one: "{0} mm Hg",
                other: "{0} mm Hg"
            },
            pressurePoundPerSquareInch: _cavh61,
            speedKilometerPerHour: _cavh83,
            speedMeterPerSecond: _cavh67,
            speedKnot: _cavh60,
            temperatureGeneric: _cavh5,
            temperatureFahrenheit: {
                one: "{0} °F",
                other: "{0} °F"
            },
            temperatureKelvin: {
                one: "{0} K",
                other: "{0} K"
            },
            volumeCubicKilometer: _cavh68,
            volumeCubicMeter: {
                one: "{0} m³",
                other: "{0} m³"
            },
            volumeCubicCentimeter: {
                one: "{0} cm³",
                other: "{0} cm³"
            },
            volumeCubicMile: _cavh69,
            volumeCubicYard: {
                one: "{0} yd³",
                other: "{0} yd³"
            },
            volumeCubicFoot: {
                one: "{0} ft³",
                other: "{0} ft³"
            },
            volumeMegaliter: {
                one: "{0} ML",
                other: "{0} ML"
            },
            volumeHectoliter: {
                one: "{0} hl",
                other: "{0} hl"
            },
            volumeLiter: _cavh19,
            volumeDeciliter: {
                one: "{0} dl",
                other: "{0} dl"
            },
            volumeCentiliter: {
                one: "{0} cl",
                other: "{0} cl"
            },
            volumeMilliliter: {
                one: "{0} ml",
                other: "{0} ml"
            },
            volumePintMetric: {
                one: "{0} ptm",
                other: "{0} ptm"
            },
            volumeCupMetric: {
                one: "{0} xícm",
                other: "{0} xícm"
            },
            volumeGallon: {
                one: "{0} gal",
                other: "{0} gal"
            },
            volumeQuart: {
                one: "{0} qt",
                other: "{0} qt"
            },
            volumePint: {
                one: "{0} pt",
                other: "{0} pt"
            },
            volumeFluidOunce: {
                one: "{0} fl oz",
                other: "{0} fl oz"
            },
            volumeTeaspoon: {
                one: "{0} cc",
                other: "{0} cc"
            },
            concentrMilligramPerDeciliter: {
                other: "{0} mg/dL"
            },
            concentrMillimolePerLiter: {
                other: "{0} mmol/L"
            },
            concentrPartPerMillion: {
                other: "{0} ppm"
            },
            consumptionMilePerGallonImperial: {
                other: "{0} mpg Imp."
            },
            lengthFurlong: {
                other: "{0} fur"
            },
            lengthFathom: {
                other: "{0} fm"
            },
            massStone: {
                other: "{0} st"
            },
            volumeBushel: {
                other: "{0} bu"
            },
            volumeGallonImperial: {
                other: "{0} gal Imp."
            }
        },
        compoundUnit: {
            per: "{0}/{1}"
        }
    },
    narrow: {
        unit: {
            "consumptionLiterPer-100kilometers": {
                one: "{0}l/100km",
                other: "{0}l/100km"
            },
            lengthFoot: {
                one: "{0}′",
                other: "{0}′"
            },
            accelerationGForce: _cavh14,
            angleDegree: _cavh5,
            angleArcMinute: {
                one: "{0}'",
                other: "{0}'"
            },
            angleArcSecond: {
                one: '{0}"',
                other: '{0}"'
            },
            areaSquareKilometer: _cavh62,
            areaHectare: _cavh31,
            areaSquareMeter: _cavh32,
            areaSquareMile: _cavh63,
            areaAcre: _cavh92,
            areaSquareFoot: _cavh64,
            durationYear: _cavh76,
            durationMonth: _cavh79,
            durationWeek: _cavh82,
            durationDay: _cavh77,
            durationHour: _cavh15,
            durationMinute: _cavh65,
            durationSecond: _cavh13,
            durationMillisecond: _cavh33,
            lengthKilometer: _cavh34,
            lengthMeter: _cavh16,
            lengthCentimeter: _cavh35,
            lengthMillimeter: _cavh36,
            lengthPicometer: _cavh37,
            lengthMile: _cavh103,
            lengthYard: _cavh38,
            lengthInch: {
                one: "{0}″",
                other: "{0}″"
            },
            lengthLightYear: _cavh121,
            massKilogram: _cavh39,
            massGram: _cavh17,
            massPound: _cavh40,
            massOunce: _cavh41,
            powerKilowatt: _cavh42,
            powerWatt: _cavh18,
            powerHorsepower: _cavh43,
            pressureHectopascal: _cavh66,
            pressureInchHg: {
                one: '{0}" Hg',
                other: '{0}" Hg'
            },
            pressureMillibar: _cavh30,
            speedKilometerPerHour: _cavh83,
            speedMeterPerSecond: _cavh67,
            speedMilePerHour: _cavh81,
            temperatureCelsius: {
                one: "{0}°C",
                other: "{0}°C"
            },
            temperatureFahrenheit: {
                one: "{0}°F",
                other: "{0}°F"
            },
            volumeCubicKilometer: _cavh68,
            volumeCubicMile: _cavh69,
            volumeLiter: _cavh19
        },
        compoundUnit: {
            per: "{0}/{1}"
        }
    }
};

inter.timeZoneFormats = {
    hour: [ "+HH:mm", "-HH:mm" ],
    gmt: "GMT{0}",
    gmtZero: "GMT",
    region: "Hora de {0}",
    fallback: "{1} ({0})",
    regions: {
        daylight: "Hora padrão de {0}",
        standard: "Hora padrão de {0}"
    }
};

inter.characters = {
    exemplar: {
        punctuation: [ "\\-", "‐", "–", "—", ",", ";", "\\:", "!", "?", ".", "…", "'", '"', "“", "”", "«", "»", "(", ")", "\\[", "\\]", "§", "@", "*", "/", "\\&", "#", "†", "‡", "′", "″" ],
        "default": P.characters.exemplar.default,
        auxiliary: [ "ª", "ă", "å", "ä", "ā", "æ", "è", "ĕ", "ë", "ē", "ì", "ĭ", "î", "ï", "ī", "ñ", "º", "ŏ", "ö", "ø", "ō", "œ", "ù", "ŭ", "û", "ü", "ū", "ÿ" ],
        index: [ "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z" ]
    },
    ellipsis: {
        medial: "{0}…{1}",
        "final": "{0}…",
        initial: "…{0}",
        "word-final": "{0}…",
        "word-initial": "… {0}",
        "word-medial": "{0} … {1}"
    },
    moreInformation: "?"
};

inter.numbers = {
    ahom: {
        symbols: _cavh331,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    arab: {
        symbols: {
            decimal: "٫",
            group: "٬",
            list: "؛",
            percentSign: "٪",
            plusSign: "‏+",
            minusSign: "‏-",
            exponential: "اس",
            superscriptingExponent: "×",
            perMille: "؉",
            infinity: "∞",
            nan: "NaN",
            timeSeparator: ":"
        },
        formats: _cavh381,
        digits: [ "٠", "١", "٢", "٣", "٤", "٥", "٦", "٧", "٨", "٩" ]
    },
    arabext: {
        symbols: {
            decimal: "٫",
            group: "٬",
            list: "؛",
            percentSign: "٪",
            plusSign: "‎+‎",
            minusSign: "‎-‎",
            exponential: "×۱۰^",
            superscriptingExponent: "×",
            perMille: "؉",
            infinity: "∞",
            nan: "NaN",
            timeSeparator: "٫"
        },
        formats: _cavh381,
        digits: [ "۰", "۱", "۲", "۳", "۴", "۵", "۶", "۷", "۸", "۹" ]
    },
    armn: {
        symbols: _cavh331,
        digits: "renderArmenianUpper"
    },
    armnlow: {
        symbols: _cavh331,
        digits: "renderArmenianLower"
    },
    bali: {
        symbols: _cavh331,
        formats: _cavh381,
        digits: [ "᭐", "᭑", "᭒", "᭓", "᭔", "᭕", "᭖", "᭗", "᭘", "᭙" ]
    },
    beng: {
        symbols: _cavh331,
        formats: _cavh381,
        digits: [ "০", "১", "২", "৩", "৪", "৫", "৬", "৭", "৮", "৯" ]
    },
    brah: {
        symbols: _cavh331,
        formats: _cavh381,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    cakm: {
        symbols: _cavh331,
        formats: _cavh381,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    cham: {
        symbols: _cavh331,
        formats: _cavh381,
        digits: [ "꩐", "꩑", "꩒", "꩓", "꩔", "꩕", "꩖", "꩗", "꩘", "꩙" ]
    },
    cyrl: {
        symbols: _cavh331,
        digits: "renderCyrillicLower"
    },
    deva: {
        symbols: _cavh331,
        formats: _cavh381,
        digits: [ "०", "१", "२", "३", "४", "५", "६", "७", "८", "९" ]
    },
    ethi: {
        symbols: _cavh331,
        digits: "renderEthiopic"
    },
    finance: _cavh333,
    fullwide: {
        symbols: _cavh331,
        formats: _cavh381,
        digits: [ "０", "１", "２", "３", "４", "５", "６", "７", "８", "９" ]
    },
    geor: {
        symbols: _cavh331,
        digits: "renderGeorgian"
    },
    grek: {
        symbols: _cavh331,
        digits: "renderGreekUpper"
    },
    greklow: {
        symbols: _cavh331,
        digits: "renderGreekLower"
    },
    gujr: {
        symbols: _cavh331,
        formats: _cavh381,
        digits: [ "૦", "૧", "૨", "૩", "૪", "૫", "૬", "૭", "૮", "૯" ]
    },
    guru: {
        symbols: _cavh331,
        formats: _cavh381,
        digits: [ "੦", "੧", "੨", "੩", "੪", "੫", "੬", "੭", "੮", "੯" ]
    },
    hanidays: {
        symbols: _cavh331,
        digits: "renderSpelloutNumberingDays"
    },
    hanidec: {
        symbols: _cavh331,
        formats: _cavh381,
        digits: [ "〇", "一", "二", "三", "四", "五", "六", "七", "八", "九" ]
    },
    hans: _cavh339,
    hansfin: _cavh342,
    hant: _cavh339,
    hantfin: _cavh342,
    hebr: {
        symbols: _cavh331,
        digits: "renderHebrew"
    },
    hmng: {
        symbols: _cavh331,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    java: {
        symbols: _cavh331,
        formats: _cavh381,
        digits: [ "꧐", "꧑", "꧒", "꧓", "꧔", "꧕", "꧖", "꧗", "꧘", "꧙" ]
    },
    jpan: _cavh339,
    jpanfin: _cavh342,
    kali: {
        symbols: _cavh331,
        formats: _cavh381,
        digits: [ "꤀", "꤁", "꤂", "꤃", "꤄", "꤅", "꤆", "꤇", "꤈", "꤉" ]
    },
    khmr: {
        symbols: _cavh331,
        formats: _cavh381,
        digits: [ "០", "១", "២", "៣", "៤", "៥", "៦", "៧", "៨", "៩" ]
    },
    knda: {
        symbols: _cavh331,
        formats: _cavh381,
        digits: [ "೦", "೧", "೨", "೩", "೪", "೫", "೬", "೭", "೮", "೯" ]
    },
    lana: {
        symbols: _cavh331,
        formats: _cavh381,
        digits: [ "᪀", "᪁", "᪂", "᪃", "᪄", "᪅", "᪆", "᪇", "᪈", "᪉" ]
    },
    lanatham: {
        symbols: _cavh331,
        formats: _cavh381,
        digits: [ "᪐", "᪑", "᪒", "᪓", "᪔", "᪕", "᪖", "᪗", "᪘", "᪙" ]
    },
    laoo: {
        symbols: _cavh331,
        formats: _cavh381,
        digits: [ "໐", "໑", "໒", "໓", "໔", "໕", "໖", "໗", "໘", "໙" ]
    },
    latn: {
        symbols: _cavh331,
        formats: _cavh381,
        digits: [ "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" ]
    },
    lepc: {
        symbols: _cavh331,
        formats: _cavh381,
        digits: [ "᱀", "᱁", "᱂", "᱃", "᱄", "᱅", "᱆", "᱇", "᱈", "᱉" ]
    },
    limb: {
        symbols: _cavh331,
        formats: _cavh381,
        digits: [ "᥆", "᥇", "᥈", "᥉", "᥊", "᥋", "᥌", "᥍", "᥎", "᥏" ]
    },
    mathbold: {
        symbols: _cavh331,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathdbl: {
        symbols: _cavh331,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathmono: {
        symbols: _cavh331,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathsanb: {
        symbols: _cavh331,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathsans: {
        symbols: _cavh331,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mlym: {
        symbols: _cavh331,
        formats: _cavh381,
        digits: [ "൦", "൧", "൨", "൩", "൪", "൫", "൬", "൭", "൮", "൯" ]
    },
    modi: {
        symbols: _cavh331,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mong: {
        symbols: _cavh331,
        formats: _cavh381,
        digits: [ "᠐", "᠑", "᠒", "᠓", "᠔", "᠕", "᠖", "᠗", "᠘", "᠙" ]
    },
    mroo: {
        symbols: _cavh331,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mtei: {
        symbols: _cavh331,
        formats: _cavh381,
        digits: [ "꯰", "꯱", "꯲", "꯳", "꯴", "꯵", "꯶", "꯷", "꯸", "꯹" ]
    },
    mymr: {
        symbols: _cavh331,
        formats: _cavh381,
        digits: [ "၀", "၁", "၂", "၃", "၄", "၅", "၆", "၇", "၈", "၉" ]
    },
    mymrshan: {
        symbols: _cavh331,
        formats: _cavh381,
        digits: [ "႐", "႑", "႒", "႓", "႔", "႕", "႖", "႗", "႘", "႙" ]
    },
    mymrtlng: {
        symbols: _cavh331,
        digits: [ "꧰", "꧱", "꧲", "꧳", "꧴", "꧵", "꧶", "꧷", "꧸", "꧹" ]
    },
    "native": _cavh333,
    nkoo: {
        symbols: _cavh331,
        formats: _cavh381,
        digits: [ "߀", "߁", "߂", "߃", "߄", "߅", "߆", "߇", "߈", "߉" ]
    },
    olck: {
        symbols: _cavh331,
        formats: _cavh381,
        digits: [ "᱐", "᱑", "᱒", "᱓", "᱔", "᱕", "᱖", "᱗", "᱘", "᱙" ]
    },
    orya: {
        symbols: _cavh331,
        formats: _cavh381,
        digits: [ "୦", "୧", "୨", "୩", "୪", "୫", "୬", "୭", "୮", "୯" ]
    },
    osma: {
        symbols: _cavh331,
        formats: _cavh381,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    roman: {
        symbols: _cavh331,
        digits: "renderRomanUpper"
    },
    romanlow: {
        symbols: _cavh331,
        digits: "renderRomanLower"
    },
    saur: {
        symbols: _cavh331,
        formats: _cavh381,
        digits: [ "꣐", "꣑", "꣒", "꣓", "꣔", "꣕", "꣖", "꣗", "꣘", "꣙" ]
    },
    shrd: {
        symbols: _cavh331,
        formats: _cavh381,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    sind: {
        symbols: _cavh331,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    sinh: {
        symbols: _cavh331,
        digits: [ "෦", "෧", "෨", "෩", "෪", "෫", "෬", "෭", "෮", "෯" ]
    },
    sora: {
        symbols: _cavh331,
        formats: _cavh381,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    sund: {
        symbols: _cavh331,
        formats: _cavh381,
        digits: [ "᮰", "᮱", "᮲", "᮳", "᮴", "᮵", "᮶", "᮷", "᮸", "᮹" ]
    },
    takr: {
        symbols: _cavh331,
        formats: _cavh381,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    talu: {
        symbols: _cavh331,
        formats: _cavh381,
        digits: [ "᧐", "᧑", "᧒", "᧓", "᧔", "᧕", "᧖", "᧗", "᧘", "᧙" ]
    },
    taml: {
        symbols: _cavh331,
        digits: "renderTamil"
    },
    tamldec: {
        symbols: _cavh331,
        formats: _cavh381,
        digits: [ "௦", "௧", "௨", "௩", "௪", "௫", "௬", "௭", "௮", "௯" ]
    },
    telu: {
        symbols: _cavh331,
        formats: _cavh381,
        digits: [ "౦", "౧", "౨", "౩", "౪", "౫", "౬", "౭", "౮", "౯" ]
    },
    thai: {
        symbols: _cavh331,
        formats: _cavh381,
        digits: [ "๐", "๑", "๒", "๓", "๔", "๕", "๖", "๗", "๘", "๙" ]
    },
    tirh: {
        symbols: _cavh331,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    tibt: {
        symbols: _cavh331,
        formats: _cavh381,
        digits: [ "༠", "༡", "༢", "༣", "༤", "༥", "༦", "༧", "༨", "༩" ]
    },
    traditio: _cavh333,
    vaii: {
        symbols: _cavh331,
        formats: _cavh381,
        digits: [ "꘠", "꘡", "꘢", "꘣", "꘤", "꘥", "꘦", "꘧", "꘨", "꘩" ]
    },
    wara: {
        symbols: _cavh331,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    }
};

inter.calendars = {
    buddhist: {
        dateFormats: _cavh375,
        datePartsOrder: "dmy",
        dateIntervalFormats: _cavh377,
        dateIntervalFallbackFormat: "{0} - {1}",
        dayNames: _cavh366,
        dayPeriods: _cavh371,
        monthNames: _cavh365,
        eraNames: {
            wide: [ "BE" ],
            abbreviated: [ "BE" ]
        },
        quarterNames: _cavh349,
        fields: _cavh383
    },
    chinese: _cavh387,
    coptic: {
        dateFormats: _cavh375,
        datePartsOrder: "dmy",
        dateIntervalFormats: _cavh377,
        dateIntervalFallbackFormat: "{0} - {1}",
        dayNames: _cavh366,
        dayPeriods: _cavh371,
        monthNames: {
            format: _cavh352,
            standAlone: _cavh352
        },
        eraNames: _cavh142,
        quarterNames: _cavh349,
        fields: _cavh383
    },
    dangi: _cavh387,
    ethioaa: _cavh384,
    ethiopic: {
        dateFormats: _cavh375,
        datePartsOrder: "dmy",
        dateIntervalFormats: _cavh377,
        dateIntervalFallbackFormat: "{0} - {1}",
        dayNames: _cavh366,
        dayPeriods: _cavh371,
        monthNames: {
            format: _cavh354,
            standAlone: _cavh354
        },
        eraNames: _cavh142,
        quarterNames: _cavh349,
        fields: _cavh383
    },
    gregorian: {
        dateFormats: {
            basic: {
                mediumDate: "dd/MM/y",
                fullDate: "EEEE, d 'de' MMMM 'de' y",
                longDate: "d 'de' MMMM 'de' y",
                shortDate: "dd/MM/yy",
                fullTime: "HH:mm:ss zzzz",
                longTime: "HH:mm:ss z",
                mediumTime: "HH:mm:ss",
                shortTime: "HH:mm",
                shortDateTime: "dd/MM/yy, HH:mm",
                mediumDateTime: "dd/MM/y, HH:mm:ss",
                longDateTime: "d 'de' MMMM 'de' y 'às' HH:mm:ss z",
                fullDateTime: "EEEE, d 'de' MMMM 'de' y 'às' HH:mm:ss zzzz"
            },
            cldr: {
                Md: "dd/MM",
                MMMd: "d/MM",
                MMMEd: "E, d/MM",
                MMMMEd: "ccc, d 'de' MMMM",
                yMMM: "MM/y",
                yMMMd: "d/MM/y",
                yMMMEd: "E, d/MM/y",
                yMMMEEEEd: "EEEE, d/MM/y",
                yMMMMEd: "ccc, d 'de' MMMM 'de' y",
                yQQQ: "QQQQ 'de' y",
                yQQQQ: "QQQQ 'de' y",
                d: "d",
                E: "ccc",
                Ed: "E, d",
                Ehm: "E, h:mm a",
                EHm: "E, HH:mm",
                Ehms: "E, h:mm:ss a",
                EHms: "E, HH:mm:ss",
                Gy: "y G",
                GyMMM: "MMM 'de' y G",
                GyMMMd: "d 'de' MMM 'de' y G",
                GyMMMEd: "E, d 'de' MMM 'de' y G",
                h: "h a",
                H: "HH",
                hm: "h:mm a",
                Hm: "HH:mm",
                hms: "h:mm:ss a",
                Hms: "HH:mm:ss",
                hmsv: "h:mm:ss a v",
                Hmsv: "HH:mm:ss v",
                hmv: "h:mm a v",
                Hmv: "HH:mm v",
                M: "L",
                MEd: "E, dd/MM",
                MMdd: "dd/MM",
                MMM: "LLL",
                MMMMd: "d 'de' MMMM",
                ms: "mm:ss",
                y: "y",
                yM: "MM/y",
                yMd: "dd/MM/y",
                yMEd: "E, dd/MM/y",
                yMM: "MM/y",
                yMMMM: "MMMM 'de' y",
                yMMMMd: "d 'de' MMMM 'de' y"
            }
        },
        datePartsOrder: "dmy",
        dateIntervalFormats: {
            d: {
                d: "d–d"
            },
            h: _cavh11,
            H: {
                H: "HH–HH"
            },
            hv: {
                h: "h–h a v"
            },
            M: {
                M: "M–M"
            },
            MEd: _cavh164,
            MMM: {
                M: "MMM–MMM"
            },
            MMMd: {
                d: "d–d 'de' MMM"
            },
            MMMEd: _cavh164,
            MMMMEd: _cavh267,
            y: {
                y: "y–y"
            },
            yMEd: {
                d: "ccc, dd/MM/y – ccc, dd/MM/y",
                M: "ccc, dd/MM/y – ccc, dd/MM/y",
                y: "ccc, dd/MM/y – ccc, dd/MM/y"
            },
            yMMM: {
                M: "MMM–MMM 'de' y"
            },
            yMMMd: {
                d: "d–d 'de' MMM 'de' y"
            },
            yMMMEd: {
                d: "E, dd/MM – E, dd/MM/y",
                M: "E, dd/MM – E, dd/MM/y",
                y: "E, dd/MM/y – E, dd/MM/y"
            },
            yMMMMEd: {
                d: "E, d 'de' MMMM – E, d 'de' MMMM 'de' y",
                M: "E, d 'de' MMMM – E, d 'de' MMMM 'de' y",
                y: "E, d 'de' MMMM 'de' y – E, d 'de' MMMM 'de' y"
            },
            hm: {
                a: "h:mm a – h:mm a",
                h: "h:mm – h:mm a",
                m: "h:mm – h:mm a"
            },
            Hm: {
                H: "HH:mm – HH:mm",
                m: "HH:mm – HH:mm"
            },
            hmv: {
                a: "h:mm a – h:mm a v",
                h: "h:mm – h:mm a v",
                m: "h:mm – h:mm a v"
            },
            Hmv: {
                H: "HH:mm – HH:mm v",
                m: "HH:mm – HH:mm v"
            },
            Hv: {
                H: "HH – HH v"
            },
            Md: _cavh107,
            yM: {
                M: "MM/y – MM/y",
                y: "MM/y – MM/y"
            },
            yMd: {
                d: "dd/MM/y – dd/MM/y",
                M: "dd/MM/y – dd/MM/y",
                y: "dd/MM/y – dd/MM/y"
            },
            yMMMM: {
                M: "MMMM – MMMM 'de' y",
                y: "MMMM 'de' y – MMMM 'de' y"
            }
        },
        dateIntervalFallbackFormat: "{0} - {1}",
        dayNames: _cavh366,
        dayPeriods: _cavh371,
        monthNames: _cavh365,
        eraNames: {
            wide: [ "antes de Cristo", "depois de Cristo" ],
            abbreviated: [ "a.E.C.", "E.C." ]
        },
        quarterNames: _cavh349,
        fields: _cavh383
    },
    hebrew: {
        dateFormats: _cavh375,
        datePartsOrder: "dmy",
        dateIntervalFormats: _cavh377,
        dateIntervalFallbackFormat: "{0} - {1}",
        dayNames: _cavh366,
        dayPeriods: _cavh371,
        monthNames: {
            format: _cavh350,
            standAlone: _cavh350
        },
        eraNames: {
            wide: [ "AM" ],
            abbreviated: [ "AM" ]
        },
        quarterNames: _cavh349,
        fields: _cavh383
    },
    indian: {
        dateFormats: _cavh375,
        datePartsOrder: "dmy",
        dateIntervalFormats: _cavh377,
        dateIntervalFallbackFormat: "{0} - {1}",
        dayNames: _cavh366,
        dayPeriods: _cavh371,
        monthNames: {
            format: _cavh355,
            standAlone: _cavh355
        },
        eraNames: {
            wide: [ "Saka" ],
            abbreviated: [ "Saka" ]
        },
        quarterNames: _cavh349,
        fields: _cavh383
    },
    islamic: _cavh386,
    "islamic-umalqura": _cavh386,
    "islamic-tbla": _cavh386,
    "islamic-civil": _cavh386,
    "islamic-rgsa": _cavh386,
    iso8601: _cavh384,
    japanese: {
        dateFormats: _cavh375,
        datePartsOrder: "dmy",
        dateIntervalFormats: _cavh377,
        dateIntervalFallbackFormat: "{0} - {1}",
        dayNames: _cavh366,
        dayPeriods: _cavh371,
        monthNames: _cavh365,
        eraNames: {
            wide: _cavh382,
            abbreviated: _cavh382
        },
        quarterNames: _cavh349,
        fields: _cavh383
    },
    persian: {
        dateFormats: _cavh375,
        datePartsOrder: "dmy",
        dateIntervalFormats: _cavh377,
        dateIntervalFallbackFormat: "{0} - {1}",
        dayNames: _cavh366,
        dayPeriods: _cavh371,
        monthNames: {
            format: _cavh351,
            standAlone: _cavh351
        },
        eraNames: {
            wide: [ "AP" ],
            abbreviated: [ "AP" ]
        },
        quarterNames: _cavh349,
        fields: _cavh383
    },
    roc: {
        dateFormats: _cavh375,
        datePartsOrder: "dmy",
        dateIntervalFormats: _cavh377,
        dateIntervalFallbackFormat: "{0} - {1}",
        dayNames: _cavh366,
        dayPeriods: _cavh371,
        monthNames: _cavh365,
        eraNames: {
            wide: _cavh29,
            abbreviated: _cavh29
        },
        quarterNames: _cavh349,
        fields: _cavh383
    },
    islamicc: _cavh384
};

inter.pluralRule = function(n) {
    if (typeof n === "string") n = parseInt(n, 10);
    if (n === Math.floor(n) && n >= 0 && n <= 2 && !(n === 2)) return "one";
    return "other";
};

inter.renderDigitsOrdinal = function(n) {
    if (n < 0) return "−" + this.renderDigitsOrdinal(-n);
    if (n >= 0) return this.renderDigitsOrdinalMasculine(n);
};

inter.renderSpelloutNumbering = function(n) {
    if (n < 0) return "−" + this.renderSpelloutNumbering(-n);
    if (n >= 0) return this.renderSpelloutCardinalMasculine(n);
};

inter.renderArmenianUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderArmenianUpper(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e4) return this.renderNumber(n, "#,##0");
    if (n >= 9e3) return "Ք" + (n === 9e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 8e3) return "Փ" + (n === 8e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 7e3) return "Ւ" + (n === 7e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 6e3) return "Ց" + (n === 6e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 5e3) return "Ր" + (n === 5e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 4e3) return "Տ" + (n === 4e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 3e3) return "Վ" + (n === 3e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 2e3) return "Ս" + (n === 2e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 1e3) return "Ռ" + (n === 1e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 900) return "Ջ" + (n === 900 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 800) return "Պ" + (n === 800 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 700) return "Չ" + (n === 700 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 600) return "Ո" + (n === 600 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 500) return "Շ" + (n === 500 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 400) return "Ն" + (n === 400 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 300) return "Յ" + (n === 300 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 200) return "Մ" + (n === 200 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 100) return "Ճ" + (n === 100 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 90) return "Ղ" + (n === 90 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 80) return "Ձ" + (n === 80 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 70) return "Հ" + (n === 70 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 60) return "Կ" + (n === 60 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 50) return "Ծ" + (n === 50 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 40) return "Խ" + (n === 40 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 30) return "Լ" + (n === 30 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 20) return "Ի" + (n === 20 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 10) return "Ժ" + (n === 10 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 9) return "Թ";
    if (n >= 8) return "Ը";
    if (n >= 7) return "Է";
    if (n >= 6) return "Զ";
    if (n >= 5) return "Ե";
    if (n >= 4) return "Դ";
    if (n >= 3) return "Գ";
    if (n >= 2) return "Բ";
    if (n >= 1) return "Ա";
    if (n >= 0) return "0";
};

inter.renderArmenianLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderArmenianLower(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e4) return this.renderNumber(n, "#,##0");
    if (n >= 9e3) return "ք" + (n === 9e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 8e3) return "փ" + (n === 8e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 7e3) return "ւ" + (n === 7e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 6e3) return "ց" + (n === 6e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 5e3) return "ր" + (n === 5e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 4e3) return "տ" + (n === 4e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 3e3) return "վ" + (n === 3e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 2e3) return "ս" + (n === 2e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 1e3) return "ռ" + (n === 1e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 900) return "ջ" + (n === 900 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 800) return "պ" + (n === 800 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 700) return "չ" + (n === 700 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 600) return "ո" + (n === 600 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 500) return "շ" + (n === 500 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 400) return "ն" + (n === 400 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 300) return "յ" + (n === 300 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 200) return "մ" + (n === 200 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 100) return "ճ" + (n === 100 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 90) return "ղ" + (n === 90 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 80) return "ձ" + (n === 80 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 70) return "հ" + (n === 70 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 60) return "կ" + (n === 60 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 50) return "ծ" + (n === 50 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 40) return "խ" + (n === 40 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 30) return "լ" + (n === 30 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 20) return "ի" + (n === 20 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 10) return "ժ" + (n === 10 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 9) return "թ";
    if (n >= 8) return "ը";
    if (n >= 7) return "է";
    if (n >= 6) return "զ";
    if (n >= 5) return "ե";
    if (n >= 4) return "դ";
    if (n >= 3) return "գ";
    if (n >= 2) return "բ";
    if (n >= 1) return "ա";
    if (n >= 0) return "0";
};

inter.renderCyrillicLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderCyrillicLower(-n);
    if (isFractional && n > 1) return this.renderCyrillicLower(Math.floor(n)) + "." + this.renderCyrillicLower(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e15) return "҂҂҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e15)) + (n === 1e15 ? "" : " " + this.renderCyrillicLower(n % 1e15));
    if (n >= 1e12) return "҂҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e12)) + (n === 1e12 ? "" : " " + this.renderCyrillicLower(n % 1e12));
    if (n >= 1e9) return "҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e9)) + (n === 1e9 ? "" : " " + this.renderCyrillicLower(n % 1e9));
    if (n >= 1e6) return "҂҂" + this.renderCyrillicLower(Math.floor(n / 1e6)) + (n === 1e6 ? "" : " " + this.renderCyrillicLower(n % 1e6));
    if (n >= 11e3) return this.renderCyrillicLowerThousands(Math.floor(n / 1e4)) + (n === 11e3 ? "" : " " + this.renderCyrillicLower(n % 1e4));
    if (n >= 1e4) return "҂" + this.renderCyrillicLower(Math.floor(n / 1e4)) + (n === 1e4 ? "" : " " + this.renderCyrillicLower(n % 1e4));
    if (n >= 1e3) return "҂" + this.renderCyrillicLower110(Math.floor(n / 1e3)) + this.renderCyrillicLowerPost(n % 1e3);
    if (n >= 900) return "ц" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 801) return "ѿ" + this.renderCyrillicLower(n % 100);
    if (n >= 800) return "ѿ҃";
    if (n >= 700) return "ѱ" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 600) return "х" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 500) return "ф" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 400) return "у" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 300) return "т" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 200) return "с" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 100) return "р" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 90) return "ч" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 80) return "п" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 70) return "ѻ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 60) return "ѯ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 50) return "н" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 40) return "м" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 30) return "л" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 20) return "к" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 19) return "ѳ҃і";
    if (n >= 18) return "и҃і";
    if (n >= 17) return "з҃і";
    if (n >= 16) return "ѕ҃і";
    if (n >= 15) return "є҃і";
    if (n >= 14) return "д҃і";
    if (n >= 13) return "г҃і";
    if (n >= 12) return "в҃і";
    if (n >= 11) return "а҃і";
    if (n >= 1) return this.renderCyrillicLower110(n) + "҃";
    if (n >= 0) return "0҃";
};

inter.renderEthiopic = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderEthiopic(-n);
    if (isFractional && n > 1) return this.renderEthiopic(Math.floor(n)) + "፡" + this.renderEthiopic(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,###0");
    if (n >= 2e16) return this.renderEthiopic(Math.floor(n / 1e16)) + "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 1e16) return "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 2e12) return this.renderEthiopic(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1e12) return "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 2e8) return this.renderEthiopic(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1e8) return "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 2e4) return this.renderEthiopic(Math.floor(n / 1e4)) + "፼" + (n === 2e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 1e4) return "፼" + (n === 1e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 200) return this.renderEthiopic(Math.floor(n / 100)) + "፻" + (n === 200 ? "" : this.renderEthiopic(n % 100));
    if (n >= 100) return "፻" + (n === 100 ? "" : this.renderEthiopic(n % 100));
    if (n >= 90) return "፺" + (n === 90 ? "" : this.renderEthiopic(n % 10));
    if (n >= 80) return "፹" + (n === 80 ? "" : this.renderEthiopic(n % 10));
    if (n >= 70) return "፸" + (n === 70 ? "" : this.renderEthiopic(n % 10));
    if (n >= 60) return "፷" + (n === 60 ? "" : this.renderEthiopic(n % 10));
    if (n >= 50) return "፶" + (n === 50 ? "" : this.renderEthiopic(n % 10));
    if (n >= 40) return "፵" + (n === 40 ? "" : this.renderEthiopic(n % 10));
    if (n >= 30) return "፴" + (n === 30 ? "" : this.renderEthiopic(n % 10));
    if (n >= 20) return "፳" + (n === 20 ? "" : this.renderEthiopic(n % 10));
    if (n >= 10) return "፲" + (n === 10 ? "" : this.renderEthiopic(n % 10));
    if (n >= 9) return "፱";
    if (n >= 8) return "፰";
    if (n >= 7) return "፯";
    if (n >= 6) return "፮";
    if (n >= 5) return "፭";
    if (n >= 4) return "፬";
    if (n >= 3) return "፫";
    if (n >= 2) return "፪";
    if (n >= 1) return "፩";
    if (n >= 0) return "ባዶ";
};

inter.renderGeorgian = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGeorgian(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 2e4) return this.renderNumber(n, "#,##0");
    if (n >= 1e4) return "ჯ" + (n === 1e4 ? "" : this.renderGeorgian(n % 1e4));
    if (n >= 9e3) return "ჵ" + (n === 9e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 8e3) return "ჴ" + (n === 8e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 7e3) return "ხ" + (n === 7e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 6e3) return "ჭ" + (n === 6e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 5e3) return "წ" + (n === 5e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 4e3) return "ძ" + (n === 4e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 3e3) return "ც" + (n === 3e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 2e3) return "ჩ" + (n === 2e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 1e3) return "შ" + (n === 1e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 900) return "ყ" + (n === 900 ? "" : this.renderGeorgian(n % 100));
    if (n >= 800) return "ღ" + (n === 800 ? "" : this.renderGeorgian(n % 100));
    if (n >= 700) return "ქ" + (n === 700 ? "" : this.renderGeorgian(n % 100));
    if (n >= 600) return "ფ" + (n === 600 ? "" : this.renderGeorgian(n % 100));
    if (n >= 500) return "ჳ" + (n === 500 ? "" : this.renderGeorgian(n % 100));
    if (n >= 400) return "უ" + (n === 400 ? "" : this.renderGeorgian(n % 100));
    if (n >= 300) return "ტ" + (n === 300 ? "" : this.renderGeorgian(n % 100));
    if (n >= 200) return "ს" + (n === 200 ? "" : this.renderGeorgian(n % 100));
    if (n >= 100) return "რ" + (n === 100 ? "" : this.renderGeorgian(n % 100));
    if (n >= 90) return "ჟ" + (n === 90 ? "" : this.renderGeorgian(n % 10));
    if (n >= 80) return "პ" + (n === 80 ? "" : this.renderGeorgian(n % 10));
    if (n >= 70) return "ო" + (n === 70 ? "" : this.renderGeorgian(n % 10));
    if (n >= 60) return "ჲ" + (n === 60 ? "" : this.renderGeorgian(n % 10));
    if (n >= 50) return "ნ" + (n === 50 ? "" : this.renderGeorgian(n % 10));
    if (n >= 40) return "მ" + (n === 40 ? "" : this.renderGeorgian(n % 10));
    if (n >= 30) return "ლ" + (n === 30 ? "" : this.renderGeorgian(n % 10));
    if (n >= 20) return "კ" + (n === 20 ? "" : this.renderGeorgian(n % 10));
    if (n >= 10) return "ი" + (n === 10 ? "" : this.renderGeorgian(n % 10));
    if (n >= 9) return "თ";
    if (n >= 8) return "ჱ";
    if (n >= 7) return "ზ";
    if (n >= 6) return "ვ";
    if (n >= 5) return "ე";
    if (n >= 4) return "დ";
    if (n >= 3) return "გ";
    if (n >= 2) return "ბ";
    if (n >= 1) return "ა";
    if (n >= 0) return this.renderNumber(n, "#,##0");
};

inter.renderGreekUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGreekUpper(-n);
    if (isFractional && n > 1) return this.renderGreekUpper(Math.floor(n)) + "." + this.renderGreekUpper(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 0) return this.renderGreekNumeralMajuscules(n) + "´";
};

inter.renderGreekLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGreekLower(-n);
    if (isFractional && n > 1) return this.renderGreekLower(Math.floor(n)) + "." + this.renderGreekLower(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 0) return this.renderGreekNumeralMinuscules(n) + "´";
};

inter.renderSpelloutCardinal = function(n) {
    if (n < 0) return "−" + this.renderSpelloutCardinal(-n);
    if (n >= 0) return this.renderNumber(n, "#,##0.#");
};

inter.renderHebrew = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderHebrew(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1000001) return this.renderNumber(n, "#,##0");
    if (n >= 1e6) return "אלף אלפים";
    if (n >= 3001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 3001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 3e3) return this.renderHebrew(Math.floor(n / 1e3)) + " אלפים";
    if (n >= 2001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 2001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 2e3) return "אלפיים";
    if (n >= 1001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 1001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 1e3) return "אלף";
    if (n >= 901) return "תתק" + this.renderHebrew099(n % 100);
    if (n >= 900) return "תת״ק";
    if (n >= 801) return "תת" + this.renderHebrew099(n % 100);
    if (n >= 800) return "ת״ת";
    if (n >= 745) return "תש" + this.renderHebrew099(n % 100);
    if (n >= 744) return "תשד״מ";
    if (n >= 701) return "תש" + this.renderHebrew099(n % 100);
    if (n >= 700) return "ת״ש";
    if (n >= 699) return "תר" + this.renderHebrew099(n % 100);
    if (n >= 698) return "תרח״צ";
    if (n >= 601) return "תר" + this.renderHebrew099(n % 100);
    if (n >= 600) return "ת״ר";
    if (n >= 501) return "תק" + this.renderHebrew099(n % 100);
    if (n >= 500) return "ת״ק";
    if (n >= 400) return "ת" + this.renderHebrew099(n % 100);
    if (n >= 345) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 344) return "שד״מ";
    if (n >= 305) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 304) return "ד״ש";
    if (n >= 300) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 299) return "ר" + this.renderHebrew099(n % 100);
    if (n >= 298) return "רח״צ";
    if (n >= 200) return "ר" + this.renderHebrew099(n % 100);
    if (n >= 100) return "ק" + this.renderHebrew099(n % 100);
    if (n >= 91) return "צ״" + this.renderHebrewItem(n % 10);
    if (n >= 90) return "צ׳";
    if (n >= 81) return "פ״" + this.renderHebrewItem(n % 10);
    if (n >= 80) return "פ׳";
    if (n >= 71) return "ע״" + this.renderHebrewItem(n % 10);
    if (n >= 70) return "ע׳";
    if (n >= 61) return "ס״" + this.renderHebrewItem(n % 10);
    if (n >= 60) return "ס׳";
    if (n >= 51) return "נ״" + this.renderHebrewItem(n % 10);
    if (n >= 50) return "נ׳";
    if (n >= 41) return "מ״" + this.renderHebrewItem(n % 10);
    if (n >= 40) return "מ׳";
    if (n >= 31) return "ל״" + this.renderHebrewItem(n % 10);
    if (n >= 30) return "ל׳";
    if (n >= 21) return "כ״" + this.renderHebrewItem(n % 10);
    if (n >= 20) return "כ׳";
    if (n >= 17) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "ט״ז";
    if (n >= 15) return "ט״ו";
    if (n >= 11) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 0) return this.renderHebrewItem(n) + "׳";
};

inter.renderRomanUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderRomanUpper(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 4e5) return this.renderNumber(n, "#,##0");
    if (n >= 3e5) return "ↈↈↈ" + (n === 3e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 2e5) return "ↈↈ" + (n === 2e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 1e5) return "ↈ" + (n === 1e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 9e4) return "ↂↈ" + (n === 9e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 8e4) return "ↇↂↂↂ" + (n === 8e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 7e4) return "ↇↂↂ" + (n === 7e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 6e4) return "ↇↂ" + (n === 6e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 5e4) return "ↇ" + (n === 5e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 4e4) return "ↂↇ" + (n === 4e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 3e4) return "ↂↂↂ" + (n === 3e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 2e4) return "ↂↂ" + (n === 2e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 1e4) return "ↂ" + (n === 1e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 9e3) return "Mↂ" + (n === 9e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 8e3) return "ↁMMM" + (n === 8e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 7e3) return "ↁMM" + (n === 7e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 6e3) return "ↁM" + (n === 6e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 5e3) return "ↁ" + (n === 5e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 4e3) return "Mↁ" + (n === 4e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 3e3) return "MMM" + (n === 3e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 2e3) return "MM" + (n === 2e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 1e3) return "M" + (n === 1e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 900) return "CM" + (n === 900 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 800) return "DCCC" + (n === 800 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 700) return "DCC" + (n === 700 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 600) return "DC" + (n === 600 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 500) return "D" + (n === 500 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 400) return "CD" + (n === 400 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 300) return "CCC" + (n === 300 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 200) return "CC" + (n === 200 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 100) return "C" + (n === 100 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 90) return "XC" + (n === 90 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 80) return "LXXX" + (n === 80 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 70) return "LXX" + (n === 70 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 60) return "LX" + (n === 60 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 50) return "L" + (n === 50 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 40) return "XL" + (n === 40 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 30) return "XXX" + (n === 30 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 20) return "XX" + (n === 20 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 10) return "X" + (n === 10 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 9) return "IX";
    if (n >= 8) return "VIII";
    if (n >= 7) return "VII";
    if (n >= 6) return "VI";
    if (n >= 5) return "V";
    if (n >= 4) return "IV";
    if (n >= 3) return "III";
    if (n >= 2) return "II";
    if (n >= 1) return "I";
    if (n >= 0) return "N";
};

inter.renderRomanLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderRomanLower(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 5e3) return this.renderNumber(n, "#,##0");
    if (n >= 4e3) return "mmmm" + (n === 4e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 3e3) return "mmm" + (n === 3e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 2e3) return "mm" + (n === 2e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 1e3) return "m" + (n === 1e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 900) return "cm" + (n === 900 ? "" : this.renderRomanLower(n % 100));
    if (n >= 800) return "dccc" + (n === 800 ? "" : this.renderRomanLower(n % 100));
    if (n >= 700) return "dcc" + (n === 700 ? "" : this.renderRomanLower(n % 100));
    if (n >= 600) return "dc" + (n === 600 ? "" : this.renderRomanLower(n % 100));
    if (n >= 500) return "d" + (n === 500 ? "" : this.renderRomanLower(n % 100));
    if (n >= 400) return "cd" + (n === 400 ? "" : this.renderRomanLower(n % 100));
    if (n >= 300) return "ccc" + (n === 300 ? "" : this.renderRomanLower(n % 100));
    if (n >= 200) return "cc" + (n === 200 ? "" : this.renderRomanLower(n % 100));
    if (n >= 100) return "c" + (n === 100 ? "" : this.renderRomanLower(n % 100));
    if (n >= 90) return "xc" + (n === 90 ? "" : this.renderRomanLower(n % 10));
    if (n >= 80) return "lxxx" + (n === 80 ? "" : this.renderRomanLower(n % 10));
    if (n >= 70) return "lxx" + (n === 70 ? "" : this.renderRomanLower(n % 10));
    if (n >= 60) return "lx" + (n === 60 ? "" : this.renderRomanLower(n % 10));
    if (n >= 50) return "l" + (n === 50 ? "" : this.renderRomanLower(n % 10));
    if (n >= 40) return "xl" + (n === 40 ? "" : this.renderRomanLower(n % 10));
    if (n >= 30) return "xxx" + (n === 30 ? "" : this.renderRomanLower(n % 10));
    if (n >= 20) return "xx" + (n === 20 ? "" : this.renderRomanLower(n % 10));
    if (n >= 10) return "x" + (n === 10 ? "" : this.renderRomanLower(n % 10));
    if (n >= 9) return "ix";
    if (n >= 8) return "viii";
    if (n >= 7) return "vii";
    if (n >= 6) return "vi";
    if (n >= 5) return "v";
    if (n >= 4) return "iv";
    if (n >= 3) return "iii";
    if (n >= 2) return "ii";
    if (n >= 1) return "i";
    if (n >= 0) return "n";
};

inter.renderTamil = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderTamil(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e8) return this.renderNumber(n, "#,##,##0");
    if (n >= 1e6) return this.renderTamil(Math.floor(n / 1e6)) + "௱௲" + (n === 1e6 ? "" : this.renderTamilThousands(n % 1e6));
    if (n >= 2e3) return this.renderTamil(Math.floor(n / 1e3)) + "௲" + (n === 2e3 ? "" : this.renderTamil(n % 1e3));
    if (n >= 1e3) return "௲" + (n === 1e3 ? "" : this.renderTamil(n % 1e3));
    if (n >= 200) return this.renderTamil(Math.floor(n / 100)) + "௱" + (n === 200 ? "" : this.renderTamil(n % 100));
    if (n >= 100) return "௱" + (n === 100 ? "" : this.renderTamil(n % 100));
    if (n >= 20) return this.renderTamil(Math.floor(n / 10)) + "௰" + (n === 20 ? "" : this.renderTamil(n % 10));
    if (n >= 10) return "௰" + (n === 10 ? "" : this.renderTamil(n % 10));
    if (n >= 9) return "௯";
    if (n >= 8) return "௮";
    if (n >= 7) return "௭";
    if (n >= 6) return "௬";
    if (n >= 5) return "௫";
    if (n >= 4) return "௪";
    if (n >= 3) return "௩";
    if (n >= 2) return "௨";
    if (n >= 1) return "௧";
    if (n >= 0) return "௦";
};

inter.renderDigitsOrdinalMasculine = function(n) {
    if (n < 0) return "−" + this.renderDigitsOrdinalMasculine(-n);
    if (n >= 0) return this.renderNumber(n, "#,##0") + this.renderDordMascabbrev(n);
};

inter.renderSpelloutCardinalMasculine = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "menos " + this.renderSpelloutCardinalMasculine(-n);
    if (isFractional && n > 1) return this.renderSpelloutCardinalMasculine(Math.floor(n)) + " vírgula " + this.renderSpelloutCardinalMasculine(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 2e15) return this.renderSpelloutCardinalMasculine(Math.floor(n / 1e15)) + " quatriliões" + (n === 2e15 ? "" : " e " + this.renderSpelloutCardinalMasculine(n % 1e15));
    if (n >= 1e15) return "um quatrilião" + (n === 1e15 ? "" : " e " + this.renderSpelloutCardinalMasculine(n % 1e15));
    if (n >= 2e12) return this.renderSpelloutCardinalMasculine(Math.floor(n / 1e12)) + " triliões" + (n === 2e12 ? "" : " e " + this.renderSpelloutCardinalMasculine(n % 1e12));
    if (n >= 1e12) return "um trilião" + (n === 1e12 ? "" : " e " + this.renderSpelloutCardinalMasculine(n % 1e12));
    if (n >= 2e9) return this.renderSpelloutCardinalMasculine(Math.floor(n / 1e9)) + " biliões" + (n === 2e9 ? "" : " e " + this.renderSpelloutCardinalMasculine(n % 1e9));
    if (n >= 1e9) return "um bilião" + (n === 1e9 ? "" : " e " + this.renderSpelloutCardinalMasculine(n % 1e9));
    if (n >= 2e6) return this.renderSpelloutCardinalMasculine(Math.floor(n / 1e6)) + " milhões" + (n === 2e6 ? "" : " e " + this.renderSpelloutCardinalMasculine(n % 1e6));
    if (n >= 1e6) return "um milhão" + (n === 1e6 ? "" : " e " + this.renderSpelloutCardinalMasculine(n % 1e6));
    if (n >= 2e3) return this.renderSpelloutCardinalMasculine(Math.floor(n / 1e3)) + " mil" + (n === 2e3 ? "" : " e " + this.renderSpelloutCardinalMasculine(n % 1e3));
    if (n >= 1e3) return "mil" + (n === 1e3 ? "" : " e " + this.renderSpelloutCardinalMasculine(n % 1e3));
    if (n >= 900) return "novecentos" + (n === 900 ? "" : " e " + this.renderSpelloutCardinalMasculine(n % 100));
    if (n >= 800) return "oitocentos" + (n === 800 ? "" : " e " + this.renderSpelloutCardinalMasculine(n % 100));
    if (n >= 700) return "setecentos" + (n === 700 ? "" : " e " + this.renderSpelloutCardinalMasculine(n % 100));
    if (n >= 600) return "seiscentos" + (n === 600 ? "" : " e " + this.renderSpelloutCardinalMasculine(n % 100));
    if (n >= 500) return "quinhentos" + (n === 500 ? "" : " e " + this.renderSpelloutCardinalMasculine(n % 100));
    if (n >= 400) return "quatrocentos" + (n === 400 ? "" : " e " + this.renderSpelloutCardinalMasculine(n % 100));
    if (n >= 300) return "trezentos" + (n === 300 ? "" : " e " + this.renderSpelloutCardinalMasculine(n % 100));
    if (n >= 200) return "duzentos" + (n === 200 ? "" : " e " + this.renderSpelloutCardinalMasculine(n % 100));
    if (n >= 101) return "cento e " + this.renderSpelloutCardinalMasculine(n % 100);
    if (n >= 100) return "cem";
    if (n >= 90) return "noventa" + (n === 90 ? "" : " e " + this.renderSpelloutCardinalMasculine(n % 10));
    if (n >= 80) return "oitenta" + (n === 80 ? "" : " e " + this.renderSpelloutCardinalMasculine(n % 10));
    if (n >= 70) return "setenta" + (n === 70 ? "" : " e " + this.renderSpelloutCardinalMasculine(n % 10));
    if (n >= 60) return "sessenta" + (n === 60 ? "" : " e " + this.renderSpelloutCardinalMasculine(n % 10));
    if (n >= 50) return "cinquenta" + (n === 50 ? "" : " e " + this.renderSpelloutCardinalMasculine(n % 10));
    if (n >= 40) return "quarenta" + (n === 40 ? "" : " e " + this.renderSpelloutCardinalMasculine(n % 10));
    if (n >= 30) return "trinta" + (n === 30 ? "" : " e " + this.renderSpelloutCardinalMasculine(n % 10));
    if (n >= 20) return "vinte" + (n === 20 ? "" : " e " + this.renderSpelloutCardinalMasculine(n % 10));
    if (n >= 19) return "dezanove";
    if (n >= 18) return "dezoito";
    if (n >= 17) return "dezassete";
    if (n >= 16) return "dezasseis";
    if (n >= 15) return "quinze";
    if (n >= 14) return "catorze";
    if (n >= 13) return "treze";
    if (n >= 12) return "doze";
    if (n >= 11) return "onze";
    if (n >= 10) return "dez";
    if (n >= 9) return "nove";
    if (n >= 8) return "oito";
    if (n >= 7) return "sete";
    if (n >= 6) return "seis";
    if (n >= 5) return "cinco";
    if (n >= 4) return "quatro";
    if (n >= 3) return "três";
    if (n >= 2) return "dois";
    if (n >= 1) return "um";
    if (n >= 0) return "zero";
};

inter.renderCyrillicLowerThousands = function(n) {
    if (n >= 900) return "҂ц" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 800) return "҂ѿ" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 700) return "҂ѱ" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 600) return "҂х" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 500) return "҂ф" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 400) return "҂у" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 300) return "҂т" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 200) return "҂с" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 100) return "҂р" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 90) return "҂ч" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 80) return "҂п" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 70) return "҂ѻ" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 60) return "҂ѯ" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 50) return "҂н" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 40) return "҂м" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 30) return "҂л" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 20) return "҂к" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 19) return "҂ѳ҃҂і";
    if (n >= 18) return "҂и҃҂і";
    if (n >= 17) return "҂з҃҂і";
    if (n >= 16) return "҂ѕ҃҂і";
    if (n >= 15) return "҂є҃҂і";
    if (n >= 14) return "҂д҃҂і";
    if (n >= 13) return "҂г҃҂і";
    if (n >= 12) return "҂в҃҂і";
    if (n >= 11) return "҂а҃҂і";
    if (n >= 10) return "҃҂і";
    if (n >= 9) return "҃҂ѳ";
    if (n >= 8) return "҃҂и";
    if (n >= 7) return "҃҂з";
    if (n >= 6) return "҃҂ѕ";
    if (n >= 5) return "҃҂є";
    if (n >= 4) return "҃҂д";
    if (n >= 3) return "҃҂г";
    if (n >= 2) return "҃҂в";
    if (n >= 1) return "҃҂а";
    if (n >= 0) return "҃";
};

inter.renderCyrillicLower110 = function(n) {
    if (n >= 10) return "і";
    if (n >= 9) return "ѳ";
    if (n >= 8) return "и";
    if (n >= 7) return "з";
    if (n >= 6) return "ѕ";
    if (n >= 5) return "є";
    if (n >= 4) return "д";
    if (n >= 3) return "г";
    if (n >= 2) return "в";
    if (n >= 1) return "а";
};

inter.renderCyrillicLowerPost = function(n) {
    if (n >= 1) return this.renderCyrillicLower(n);
    if (n >= 0) return "҃";
};

inter.renderCyrillicLowerFinal = function(n) {
    if (n >= 91) return "ч" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 90) return "҃ч";
    if (n >= 81) return "п" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 80) return "҃п";
    if (n >= 71) return "ѻ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 70) return "҃ѻ";
    if (n >= 61) return "ѯ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 60) return "҃ѯ";
    if (n >= 51) return "н" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 50) return "҃н";
    if (n >= 41) return "м" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 40) return "҃м";
    if (n >= 31) return "л" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 30) return "҃л";
    if (n >= 21) return "к" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 20) return "҃к";
    if (n >= 19) return "ѳ҃і";
    if (n >= 18) return "и҃і";
    if (n >= 17) return "з҃і";
    if (n >= 16) return "ѕ҃і";
    if (n >= 15) return "є҃і";
    if (n >= 14) return "д҃і";
    if (n >= 13) return "г҃і";
    if (n >= 12) return "в҃і";
    if (n >= 11) return "а҃і";
    if (n >= 1) return "҃" + this.renderCyrillicLower110(n);
    if (n >= 0) return "҃";
};

inter.renderEthiopicP3 = function(n) {
    if (n >= 1e12) return this.renderEthiopic(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1) return "፼፼፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼፼፼";
};

inter.renderEthiopicP2 = function(n) {
    if (n >= 1e8) return this.renderEthiopic(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1) return "፼፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼፼";
};

inter.renderEthiopicP1 = function(n) {
    if (n >= 1e4) return this.renderEthiopic(Math.floor(n / 1e4)) + "፼" + (n === 1e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 1) return "፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼";
};

inter.renderGreekNumeralMajuscules = function(n) {
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e16) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e16)) + "ΜΜΜΜ" + (n === 1e16 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e16));
    if (n >= 1e12) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e12)) + "ΜΜΜ" + (n === 1e12 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e12));
    if (n >= 1e8) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e8)) + "ΜΜ" + (n === 1e8 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e8));
    if (n >= 1e4) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e4)) + "Μ" + (n === 1e4 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e4));
    if (n >= 1e3) return "͵" + this.renderGreekNumeralMajuscules(Math.floor(n / 1e3)) + (n === 1e3 ? "" : this.renderGreekNumeralMajuscules(n % 1e3));
    if (n >= 900) return "Ϡ" + (n === 900 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 800) return "Ω" + (n === 800 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 700) return "Ψ" + (n === 700 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 600) return "Χ" + (n === 600 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 500) return "Φ" + (n === 500 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 400) return "Υ" + (n === 400 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 300) return "Τ" + (n === 300 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 200) return "Σ" + (n === 200 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 100) return "Ρ" + (n === 100 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 90) return "Ϟ" + (n === 90 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 80) return "Π" + (n === 80 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 70) return "Ο" + (n === 70 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 60) return "Ξ" + (n === 60 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 50) return "Ν" + (n === 50 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 40) return "Μ" + (n === 40 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 30) return "Λ" + (n === 30 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 20) return "Κ" + (n === 20 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 10) return "Ι" + (n === 10 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 9) return "Θ";
    if (n >= 8) return "Η";
    if (n >= 7) return "Ζ";
    if (n >= 6) return "Ϝ";
    if (n >= 5) return "Ε";
    if (n >= 4) return "Δ";
    if (n >= 3) return "Γ";
    if (n >= 2) return "Β";
    if (n >= 1) return "Α";
    if (n >= 0) return "𐆊";
};

inter.renderGreekNumeralMinuscules = function(n) {
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e16) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e16)) + "μμμμ" + (n === 1e16 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e16));
    if (n >= 1e12) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e12)) + "μμμ" + (n === 1e12 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e12));
    if (n >= 1e8) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e8)) + "μμ" + (n === 1e8 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e8));
    if (n >= 1e4) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e4)) + "μ" + (n === 1e4 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e4));
    if (n >= 1e3) return "͵" + this.renderGreekNumeralMinuscules(Math.floor(n / 1e3)) + (n === 1e3 ? "" : this.renderGreekNumeralMinuscules(n % 1e3));
    if (n >= 900) return "ϡ" + (n === 900 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 800) return "ω" + (n === 800 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 700) return "ψ" + (n === 700 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 600) return "χ" + (n === 600 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 500) return "φ" + (n === 500 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 400) return "υ" + (n === 400 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 300) return "τ" + (n === 300 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 200) return "σ" + (n === 200 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 100) return "ρ" + (n === 100 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 90) return "ϟ" + (n === 90 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 80) return "π" + (n === 80 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 70) return "ο" + (n === 70 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 60) return "ξ" + (n === 60 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 50) return "ν" + (n === 50 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 40) return "μ" + (n === 40 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 30) return "λ" + (n === 30 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 20) return "κ" + (n === 20 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 10) return "ι" + (n === 10 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 9) return "θ";
    if (n >= 8) return "η";
    if (n >= 7) return "ζ";
    if (n >= 6) return "ϝ";
    if (n >= 5) return "ε";
    if (n >= 4) return "δ";
    if (n >= 3) return "γ";
    if (n >= 2) return "β";
    if (n >= 1) return "α";
    if (n >= 0) return "𐆊";
};

inter.renderHebrewThousands = function(n) {
    if (n >= 401) return this.renderHebrew(n) + "׳";
    if (n >= 100) return this.renderHebrew(n) + (n === 100 ? "" : "׳");
    if (n >= 10) return this.renderHebrew(n) + (n === 10 ? "" : "׳");
    if (n >= 0) return this.renderHebrew(n);
};

inter.renderHebrew099 = function(n) {
    if (n >= 91) return "צ״" + this.renderHebrewItem(n % 10);
    if (n >= 90) return "״צ";
    if (n >= 81) return "פ״" + this.renderHebrewItem(n % 10);
    if (n >= 80) return "״פ";
    if (n >= 71) return "ע״" + this.renderHebrewItem(n % 10);
    if (n >= 70) return "״ע";
    if (n >= 61) return "ס״" + this.renderHebrewItem(n % 10);
    if (n >= 60) return "״ס";
    if (n >= 51) return "נ״" + this.renderHebrewItem(n % 10);
    if (n >= 50) return "״נ";
    if (n >= 41) return "מ״" + this.renderHebrewItem(n % 10);
    if (n >= 40) return "״מ";
    if (n >= 31) return "ל״" + this.renderHebrewItem(n % 10);
    if (n >= 30) return "״ל";
    if (n >= 21) return "כ״" + this.renderHebrewItem(n % 10);
    if (n >= 20) return "״כ";
    if (n >= 17) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "ט״ז";
    if (n >= 15) return "ט״ו";
    if (n >= 11) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 1) return "״" + this.renderHebrewItem(n);
    if (n >= 0) return "׳";
};

inter.renderHebrewItem = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderHebrewItem(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 2100) return this.renderNumber(n, "#,##0");
    if (n >= 2e3) return "תתתתת" + (n === 2e3 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1900) return "תתתתש" + (n === 1900 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1800) return "תתתתר" + (n === 1800 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1700) return "תתתתק" + (n === 1700 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1600) return "תתתת" + (n === 1600 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1500) return "תתתש" + (n === 1500 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1400) return "תתתר" + (n === 1400 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1300) return "תתתק" + (n === 1300 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1200) return "תתת" + (n === 1200 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1100) return "תתש" + (n === 1100 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1e3) return "תתר" + (n === 1e3 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 900) return "תתק" + (n === 900 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 800) return "תת" + (n === 800 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 745) return "תש" + this.renderHebrewItem(n % 100);
    if (n >= 744) return "תשדמ";
    if (n >= 700) return "תש" + (n === 700 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 699) return "תר" + this.renderHebrewItem(n % 100);
    if (n >= 698) return "תרחצ";
    if (n >= 600) return "תר" + (n === 600 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 500) return "תק" + (n === 500 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 400) return "ת" + (n === 400 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 345) return "ש" + this.renderHebrewItem(n % 100);
    if (n >= 344) return "שדמ";
    if (n >= 305) return "ש" + this.renderHebrewItem(n % 100);
    if (n >= 304) return "דש";
    if (n >= 300) return "ש" + (n === 300 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 299) return "ר" + this.renderHebrewItem(n % 100);
    if (n >= 298) return "רחצ";
    if (n >= 200) return "ר" + (n === 200 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 100) return "ק" + (n === 100 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 90) return "צ" + (n === 90 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 80) return "פ" + (n === 80 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 70) return "ע" + (n === 70 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 60) return "ס" + (n === 60 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 50) return "נ" + (n === 50 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 40) return "מ" + (n === 40 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 30) return "ל" + (n === 30 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 20) return "כ" + (n === 20 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 17) return "י" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "טז";
    if (n >= 15) return "טו";
    if (n >= 10) return "י" + (n === 10 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 9) return "ט";
    if (n >= 8) return "ח";
    if (n >= 7) return "ז";
    if (n >= 6) return "ו";
    if (n >= 5) return "ה";
    if (n >= 4) return "ד";
    if (n >= 3) return "ג";
    if (n >= 2) return "ב";
    if (n >= 1) return "א";
    if (n >= 0) return "״";
};

inter.renderTamilThousands = function(n) {
    if (n >= 1e3) return this.renderTamilThousands(Math.floor(n / 1e3)) + "௲" + (n === 1e3 ? "" : this.renderTamilThousands(n % 1e3));
    if (n >= 0) return this.renderTamil(n);
};

inter.renderDordMascabbrev = function(n) {
    if (n >= 0) return "º";
};

inter.renderEthiopicP = function(n) {
    if (n >= 1e16) return this.renderEthiopicP(Math.floor(n / 1e16)) + "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 1e12) return this.renderEthiopicP(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1e8) return this.renderEthiopicP(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1e4) return this.renderEthiopicP(Math.floor(n / 1e4)) + "፼" + (n === 1e4 ? "" : this.renderEthiopicP(n % 1e4));
    if (n >= 1) return this.renderEthiopic(n);
};

inter.timeZones = [].concat(P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[6], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], {
    id: "Pacific/Pitcairn",
    regionId: "061",
    utcStandardOffsetSeconds: -28800,
    displayName: "Ilhas Pitcairn",
    countryId: "PN"
}, P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[36], {
    id: "America/North_Dakota/Center",
    regionId: "021",
    utcStandardOffsetSeconds: -21600,
    displayName: "Center, Dakota do Norte",
    countryId: "US"
}, P.timeZones[-1], P.timeZones[-1], P.timeZones[40], P.timeZones[-1], P.timeZones[-1], P.timeZones[43], P.timeZones[-1], {
    id: "Pacific/Easter",
    regionId: "005",
    utcStandardOffsetSeconds: -21600,
    displayName: "Ilha da Páscoa",
    countryId: "CL"
}, P.timeZones[-1], P.timeZones[47], P.timeZones[-1], P.timeZones[-1], {
    id: "America/Monterrey",
    regionId: "013",
    utcStandardOffsetSeconds: -21600,
    displayName: "Monterrey",
    countryId: "MX"
}, P.timeZones.slice(51, 53), P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[62], {
    id: "America/Cayman",
    regionId: "029",
    utcStandardOffsetSeconds: -18e3,
    displayName: "Caimão",
    countryId: "KY"
}, {
    id: "America/Cancun",
    regionId: "013",
    utcStandardOffsetSeconds: -18e3,
    displayName: "Cancun",
    countryId: "MX"
}, P.timeZones[-1], P.timeZones[66], P.timeZones[-1], P.timeZones[68], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], {
    id: "America/New_York",
    regionId: "021",
    utcStandardOffsetSeconds: -18e3,
    displayName: "Nova Iorque",
    countryId: "US"
}, P.timeZones[79], P.timeZones[-1], {
    id: "America/Port-au-Prince",
    regionId: "029",
    utcStandardOffsetSeconds: -18e3,
    displayName: "Port-au-Prince",
    countryId: "HT"
}, P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], {
    id: "America/Anguilla",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "Anguila",
    countryId: "AI"
}, P.timeZones[88], P.timeZones[-1], P.timeZones[90], P.timeZones[-1], P.timeZones[92], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[97], {
    id: "America/Curacao",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "Curaçau",
    countryId: "CW"
}, {
    id: "America/Dominica",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "Domínica",
    countryId: "DM"
}, P.timeZones[-1], P.timeZones[-1], P.timeZones.slice(102, 105), P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[111], P.timeZones[-1], P.timeZones[-1], P.timeZones[115], P.timeZones[-1], {
    id: "America/Port_of_Spain",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "Porto de Espanha",
    countryId: "TT"
}, P.timeZones[117], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones.slice(121, 124), P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], {
    id: "America/Araguaina",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "Araguaina",
    countryId: "BR"
}, {
    id: "America/Bahia",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "Baía",
    countryId: "BR"
}, P.timeZones[129], P.timeZones[-1], P.timeZones[131], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[137], P.timeZones[-1], P.timeZones[-1], {
    id: "America/Montevideo",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "Montevideu",
    countryId: "UY"
}, P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[150], P.timeZones[-1], P.timeZones[152], {
    id: "America/Argentina/Tucuman",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "Tucumán",
    countryId: "AR"
}, P.timeZones[-1], P.timeZones.slice(155, 157), P.timeZones[-1], P.timeZones.slice(158, 160), P.timeZones[-1], P.timeZones[-1], P.timeZones.slice(162, 164), P.timeZones[-1], P.timeZones[-1], P.timeZones.slice(166, 169), P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[174], P.timeZones[-1], P.timeZones.slice(176, 179), P.timeZones[-1], P.timeZones[180], P.timeZones[-1], P.timeZones[-1], {
    id: "Atlantic/Reykjavik",
    regionId: "154",
    utcStandardOffsetSeconds: 0,
    displayName: "Reiquiavique",
    countryId: "IS"
}, P.timeZones.slice(184, 186), P.timeZones[-1], {
    id: "Europe/Amsterdam",
    regionId: "155",
    utcStandardOffsetSeconds: 3600,
    displayName: "Amesterdão",
    countryId: "NL"
}, P.timeZones[-1], P.timeZones[189], P.timeZones[-1], P.timeZones.slice(191, 193), P.timeZones[-1], P.timeZones[-1], P.timeZones.slice(195, 197), {
    id: "Europe/Busingen",
    regionId: "155",
    utcStandardOffsetSeconds: 3600,
    displayName: "Busingen",
    countryId: "DE"
}, P.timeZones[-1], P.timeZones[-1], {
    id: "Europe/Copenhagen",
    regionId: "154",
    utcStandardOffsetSeconds: 3600,
    displayName: "Copenhaga",
    countryId: "DK"
}, P.timeZones[-1], P.timeZones.slice(202, 204), P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[208], P.timeZones[-1], P.timeZones[-1], P.timeZones[211], {
    id: "Europe/Madrid",
    regionId: "039",
    utcStandardOffsetSeconds: 3600,
    displayName: "Madrid",
    countryId: "ES"
}, P.timeZones[-1], P.timeZones[-1], {
    id: "Europe/Monaco",
    regionId: "155",
    utcStandardOffsetSeconds: 3600,
    displayName: "Mónaco",
    countryId: "MC"
}, P.timeZones[-1], P.timeZones[217], P.timeZones[-1], P.timeZones[-1], {
    id: "Europe/Podgorica",
    regionId: "039",
    utcStandardOffsetSeconds: 3600,
    displayName: "Podgorica",
    countryId: "ME"
}, {
    id: "Africa/Porto-Novo",
    regionId: "011",
    utcStandardOffsetSeconds: 3600,
    displayName: "Porto-Novo",
    countryId: "BJ"
}, P.timeZones.slice(222, 224), P.timeZones[-1], P.timeZones[-1], {
    id: "Europe/San_Marino",
    regionId: "039",
    utcStandardOffsetSeconds: 3600,
    displayName: "São Marinho",
    countryId: "SM"
}, P.timeZones[227], {
    id: "Africa/Tunis",
    regionId: "015",
    utcStandardOffsetSeconds: 3600,
    displayName: "Tunes",
    countryId: "TN"
}, P.timeZones[-1], P.timeZones.slice(230, 233), P.timeZones[-1], P.timeZones.slice(234, 237), P.timeZones[-1], P.timeZones[238], P.timeZones[-1], P.timeZones[-1], {
    id: "Europe/Kaliningrad",
    regionId: "151",
    utcStandardOffsetSeconds: 7200,
    displayName: "Caliningrado",
    countryId: "RU"
}, P.timeZones[241], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], {
    id: "Europe/Helsinki",
    regionId: "154",
    utcStandardOffsetSeconds: 7200,
    displayName: "Helsínquia",
    countryId: "FI"
}, P.timeZones[249], {
    id: "Africa/Johannesburg",
    regionId: "018",
    utcStandardOffsetSeconds: 7200,
    displayName: "Joanesburgo",
    countryId: "ZA"
}, P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[256], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[261], P.timeZones[-1], P.timeZones[263], P.timeZones[-1], {
    id: "Africa/Tripoli",
    regionId: "015",
    utcStandardOffsetSeconds: 7200,
    displayName: "Tripoli",
    countryId: "LY"
}, P.timeZones[-1], P.timeZones[-1], P.timeZones.slice(268, 271), P.timeZones[-1], P.timeZones[-1], {
    id: "Asia/Baghdad",
    regionId: "145",
    utcStandardOffsetSeconds: 10800,
    displayName: "Bagdade",
    countryId: "IQ"
}, {
    id: "Asia/Bahrain",
    regionId: "145",
    utcStandardOffsetSeconds: 10800,
    displayName: "Barém",
    countryId: "BH"
}, P.timeZones.slice(275, 278), P.timeZones[-1], P.timeZones[280], {
    id: "Africa/Djibouti",
    regionId: "014",
    utcStandardOffsetSeconds: 10800,
    displayName: "Jibuti",
    countryId: "DJ"
}, P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[285], {
    id: "Europe/Moscow",
    regionId: "151",
    utcStandardOffsetSeconds: 10800,
    displayName: "Moscovo",
    countryId: "RU"
}, {
    id: "Africa/Nairobi",
    regionId: "014",
    utcStandardOffsetSeconds: 10800,
    displayName: "Nairobi",
    countryId: "KE"
}, P.timeZones[-1], {
    id: "Asia/Riyadh",
    regionId: "145",
    utcStandardOffsetSeconds: 10800,
    displayName: "Riade",
    countryId: "SA"
}, P.timeZones[-1], {
    id: "Antarctica/Syowa",
    utcStandardOffsetSeconds: 10800,
    displayName: "Syowa",
    countryId: "AQ"
}, P.timeZones[292], {
    id: "Asia/Tehran",
    regionId: "034",
    utcStandardOffsetSeconds: 12600,
    displayName: "Teerão",
    countryId: "IR"
}, P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], {
    id: "Asia/Yerevan",
    regionId: "145",
    utcStandardOffsetSeconds: 14400,
    displayName: "Erevan",
    countryId: "AM"
}, {
    id: "Indian/Mahe",
    regionId: "014",
    utcStandardOffsetSeconds: 14400,
    displayName: "Mahe",
    countryId: "SC"
}, P.timeZones[298], {
    id: "Indian/Mauritius",
    regionId: "014",
    utcStandardOffsetSeconds: 14400,
    displayName: "Maurícia",
    countryId: "MU"
}, P.timeZones[300], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], {
    id: "Asia/Kabul",
    regionId: "034",
    utcStandardOffsetSeconds: 16200,
    displayName: "Cabul",
    countryId: "AF"
}, P.timeZones[-1], {
    id: "Asia/Aqtobe",
    regionId: "143",
    utcStandardOffsetSeconds: 18e3,
    displayName: "Aqtobe",
    countryId: "KZ"
}, P.timeZones[309], P.timeZones[-1], P.timeZones.slice(311, 314), P.timeZones[-1], P.timeZones[315], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[319], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], {
    id: "Asia/Dhaka",
    regionId: "034",
    utcStandardOffsetSeconds: 21600,
    displayName: "Daca",
    countryId: "BD"
}, P.timeZones[-1], P.timeZones[-1], P.timeZones[330], P.timeZones[-1], P.timeZones[-1], {
    id: "Indian/Cocos",
    utcStandardOffsetSeconds: 23400,
    displayName: "Ilhas Cocos",
    countryId: "CC"
}, P.timeZones[-1], {
    id: "Asia/Bangkok",
    regionId: "035",
    utcStandardOffsetSeconds: 25200,
    displayName: "Banguecoque",
    countryId: "TH"
}, P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], {
    id: "Indian/Christmas",
    utcStandardOffsetSeconds: 25200,
    displayName: "Ilha do Natal",
    countryId: "CX"
}, P.timeZones[341], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], {
    id: "Asia/Kuala_Lumpur",
    regionId: "035",
    utcStandardOffsetSeconds: 28800,
    displayName: "Kuala Lumpur",
    countryId: "MY"
}, P.timeZones[-1], P.timeZones[356], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], {
    id: "Asia/Singapore",
    regionId: "035",
    utcStandardOffsetSeconds: 28800,
    displayName: "Singapura",
    countryId: "SG"
}, {
    id: "Asia/Taipei",
    regionId: "030",
    utcStandardOffsetSeconds: 28800,
    displayName: "Taipé",
    countryId: "TW"
}, P.timeZones.slice(361, 363), P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones.slice(370, 372), P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], {
    id: "Australia/Lord_Howe",
    regionId: "053",
    utcStandardOffsetSeconds: 37800,
    displayName: "Ilha de Lord Howe",
    countryId: "AU"
}, P.timeZones[-1], P.timeZones[-1], {
    id: "Pacific/Efate",
    regionId: "054",
    utcStandardOffsetSeconds: 39600,
    displayName: "Efate",
    countryId: "VU"
}, P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[396], P.timeZones[-1], P.timeZones[398], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], {
    id: "Pacific/Tarawa",
    regionId: "057",
    utcStandardOffsetSeconds: 43200,
    displayName: "Tarawa",
    countryId: "KI"
}, P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[417], P.timeZones[-1]);

inter.territories = [].concat(P.territories[0], _cavh190, P.territories.slice(1, 9), _cavh200, P.territories.slice(10, 14), _cavh201, P.territories.slice(15, 20), _cavh191, _cavh227, P.territories[23], _cavh179, P.territories[24], _cavh180, P.territories.slice(26, 39), _cavh208, P.territories.slice(39, 41), _cavh254, P.territories.slice(42, 50), P.territories.slice(51, 53), _cavh256, _cavh239, P.territories.slice(55, 61), _cavh202, P.territories.slice(62, 64), _cavh209, P.territories[66], P.territories.slice(68, 72), _cavh217, P.territories.slice(73, 75), _cavh203, P.territories.slice(76, 80), _cavh265, P.territories.slice(81, 86), _cavh174, P.territories.slice(86, 91), _cavh228, P.territories.slice(92, 94), _cavh181, P.territories.slice(95, 104), P.territories.slice(105, 109), P.territories.slice(110, 114), _cavh163, _cavh235, P.territories[114], P.territories[117], _cavh240, _cavh229, P.territories.slice(119, 121), P.territories.slice(122, 124), _cavh255, P.territories.slice(125, 127), _cavh262, P.territories.slice(128, 130), _cavh224, P.territories.slice(131, 134), _cavh178, P.territories.slice(135, 138), _cavh182, P.territories.slice(139, 142), _cavh192, P.territories.slice(142, 147), _cavh204, P.territories[148], _cavh236, P.territories.slice(150, 155), _cavh218, _cavh225, _cavh193, P.territories.slice(158, 162), _cavh194, P.territories.slice(162, 165), _cavh210, P.territories.slice(167, 172), _cavh226, P.territories[172], P.territories.slice(174, 177), _cavh195, P.territories.slice(178, 184), _cavh266, P.territories[184], _cavh241, P.territories.slice(186, 188), _cavh246, {
    id: "QO",
    displayName: "Oceânia Insular",
    regionId: "009",
    hasTimeZones: false
}, P.territories.slice(190, 196), _cavh237, P.territories.slice(196, 200), _cavh205, P.territories.slice(201, 205), _cavh196, P.territories[206], P.territories[208], _cavh247, P.territories[209], P.territories[212], _cavh206, P.territories.slice(214, 217), _cavh211, P.territories.slice(218, 220), P.territories.slice(221, 223), _cavh219, P.territories.slice(223, 225), _cavh220, P.territories.slice(226, 228), _cavh221, P.territories.slice(229, 238), _cavh263, _cavh230, P.territories[239], _cavh261, P.territories.slice(240, 250), _cavh270, P.territories.slice(251, 253), P.territories[254], _cavh212, _cavh257, P.territories.slice(256, 258), _cavh242, P.territories.slice(259, 264), _cavh231, P.territories.slice(265, 267), _cavh213, P.territories[268], _cavh214, P.territories.slice(270, 276), P.territories.slice(277, 285));

inter.regions = [].concat(P.territories.slice(3, 7), P.territories[17], _cavh254, P.territories.slice(77, 80), _cavh265, P.territories[81], P.territories[167], P.territories[175], _cavh266, _cavh246, P.territories[198], P.territories[206], P.territories[230], P.territories.slice(271, 276), P.territories.slice(278, 283));

inter.countries = [].concat(P.territories[0], _cavh190, P.territories.slice(1, 3), P.territories.slice(7, 9), _cavh200, P.territories.slice(10, 14), _cavh201, P.territories.slice(15, 17), P.territories.slice(18, 20), _cavh191, _cavh227, P.territories[23], _cavh179, P.territories[24], _cavh180, P.territories.slice(26, 39), _cavh208, P.territories.slice(39, 41), P.territories.slice(42, 50), P.territories.slice(51, 53), _cavh256, _cavh239, P.territories.slice(55, 61), _cavh202, P.territories.slice(62, 64), _cavh209, P.territories[66], P.territories.slice(68, 72), _cavh217, P.territories.slice(73, 75), _cavh203, P.territories[76], P.territories.slice(82, 86), _cavh174, P.territories.slice(86, 91), _cavh228, P.territories.slice(92, 94), _cavh181, P.territories.slice(95, 104), P.territories.slice(105, 109), P.territories.slice(110, 114), _cavh163, _cavh235, P.territories[114], P.territories[117], _cavh240, _cavh229, P.territories.slice(119, 121), P.territories.slice(122, 124), _cavh255, P.territories.slice(125, 127), _cavh262, P.territories.slice(128, 130), _cavh224, P.territories.slice(131, 134), _cavh178, P.territories.slice(135, 138), _cavh182, P.territories.slice(139, 142), _cavh192, P.territories.slice(142, 147), _cavh204, P.territories[148], _cavh236, P.territories.slice(150, 155), _cavh218, _cavh225, _cavh193, P.territories.slice(158, 162), _cavh194, P.territories.slice(162, 165), _cavh210, P.territories.slice(168, 172), _cavh226, P.territories[172], P.territories[174], P.territories[176], _cavh195, P.territories.slice(178, 185), _cavh241, P.territories.slice(186, 188), P.territories.slice(190, 196), _cavh237, P.territories.slice(196, 198), P.territories[199], _cavh205, P.territories.slice(201, 205), _cavh196, P.territories[208], _cavh247, P.territories[209], P.territories[212], _cavh206, P.territories.slice(214, 217), _cavh211, P.territories.slice(218, 220), P.territories.slice(221, 223), _cavh219, P.territories.slice(223, 225), _cavh220, P.territories.slice(226, 228), _cavh221, P.territories[229], P.territories.slice(231, 238), _cavh263, _cavh230, P.territories[239], _cavh261, P.territories.slice(240, 250), _cavh270, P.territories.slice(251, 253), P.territories[254], _cavh212, _cavh257, P.territories.slice(256, 258), _cavh242, P.territories.slice(259, 264), _cavh231, P.territories.slice(265, 267), _cavh213, P.territories[268], _cavh214, P.territories[270], P.territories[277], P.territories.slice(283, 285));

inter.languages = [].concat(P.languages.slice(0, 8), {
    id: "af",
    displayName: "africânder",
    nativeDisplayName: "Afrikaans"
}, P.languages.slice(9, 15), {
    id: "gmh",
    displayName: "alemão medieval alto"
}, P.languages.slice(16, 18), {
    id: "en_us",
    displayName: "inglês (EUA)",
    nativeDisplayName: "American English"
}, {
    id: "smn",
    displayName: "inari sami",
    nativeDisplayName: "anarâškielâ"
}, P.languages.slice(20, 33), {
    id: "az_arab",
    displayName: "azeri meridional"
}, P.languages.slice(34, 37), {
    id: "nds",
    displayName: "baixo-alemão"
}, P.languages.slice(38, 43), {
    id: "bax",
    displayName: "bamun"
}, P.languages.slice(44, 54), {
    id: "en_gb",
    displayName: "inglês (RU)",
    nativeDisplayName: "British English"
}, P.languages.slice(55, 59), {
    id: "en_ca",
    displayName: "inglês canadiano",
    nativeDisplayName: "Canadian English"
}, P.languages.slice(60, 70), P.languages.slice(71, 75), {
    id: "cv",
    displayName: "chuvash"
}, P.languages[75], {
    id: "kg",
    displayName: "conguês"
}, P.languages.slice(77, 97), {
    id: "dsb",
    displayName: "baixo sórabio",
    nativeDisplayName: "dolnoserbšćina"
}, P.languages.slice(98, 100), {
    id: "et",
    displayName: "estónio",
    nativeDisplayName: "eesti"
}, P.languages[101], {
    id: "egy",
    displayName: "egípcio clássico"
}, P.languages.slice(103, 116), {
    id: "ee",
    displayName: "ewe",
    nativeDisplayName: "Eʋegbe"
}, P.languages.slice(117, 124), {
    id: "frm",
    displayName: "francês medieval"
}, P.languages[125], {
    id: "fr_ca",
    displayName: "francês canadiano",
    nativeDisplayName: "français canadien"
}, P.languages[127], {
    id: "frs",
    displayName: "frísio oriental"
}, P.languages.slice(129, 140), {
    id: "bbj",
    displayName: "ghomala"
}, P.languages.slice(141, 146), {
    id: "grc",
    displayName: "grego clássico"
}, P.languages.slice(147, 153), {
    id: "ha",
    displayName: "haúça",
    nativeDisplayName: "Hausa"
}, P.languages.slice(154, 161), {
    id: "hsb",
    displayName: "alto sórabio",
    nativeDisplayName: "hornjoserbšćina"
}, P.languages.slice(162, 172), {
    id: "ig",
    displayName: "igbo",
    nativeDisplayName: "Igbo"
}, P.languages.slice(173, 177), {
    id: "enm",
    displayName: "inglês medieval"
}, P.languages.slice(178, 184), {
    id: "mga",
    displayName: "irlandês, medieval"
}, P.languages.slice(185, 189), {
    id: "chn",
    displayName: "jargão chinook"
}, P.languages.slice(189, 195), {
    id: "kea",
    displayName: "cabo-verdiano",
    nativeDisplayName: "kabuverdianu"
}, P.languages.slice(196, 213), {
    id: "rw",
    displayName: "kinyarwanda",
    nativeDisplayName: "Kinyarwanda"
}, P.languages.slice(214, 248), {
    id: "to",
    displayName: "tonga",
    nativeDisplayName: "lea fakatonga"
}, {
    id: "lez",
    displayName: "lezghiano"
}, P.languages.slice(250, 256), {
    id: "lg",
    displayName: "ganda",
    nativeDisplayName: "Luganda"
}, P.languages[257], {
    id: "smj",
    displayName: "lule sami"
}, P.languages.slice(258, 278), {
    id: "arn",
    displayName: "mapuche"
}, P.languages.slice(279, 289), {
    id: "moh",
    displayName: "mohawk"
}, P.languages.slice(290, 308), {
    id: "nb",
    displayName: "norueguês bokmål",
    nativeDisplayName: "norsk bokmål"
}, P.languages.slice(309, 312), {
    id: "nn",
    displayName: "norueguês nynorsk",
    nativeDisplayName: "nynorsk"
}, P.languages.slice(313, 317), P.languages[318], {
    id: "xog",
    displayName: "soga",
    nativeDisplayName: "Olusoga"
}, P.languages.slice(320, 329), {
    id: "pl",
    displayName: "polaco",
    nativeDisplayName: "polski"
}, P.languages.slice(330, 333), {
    id: "oc",
    displayName: "provençal"
}, P.languages.slice(333, 343), {
    id: "rom",
    displayName: "romanês"
}, P.languages[344], {
    id: "root",
    displayName: "root"
}, P.languages.slice(345, 350), P.languages.slice(352, 375), {
    id: "sms",
    displayName: "skolt sami"
}, P.languages.slice(375, 393), {
    id: "tl",
    displayName: "tagalogue"
}, P.languages.slice(394, 402), P.languages.slice(403, 425), {
    id: "tk",
    displayName: "turcomano",
    nativeDisplayName: "türkmençe"
}, P.languages.slice(426, 441), {
    id: "fy",
    displayName: "frísico ocidental",
    nativeDisplayName: "West-Frysk"
}, P.languages.slice(442, 452), {
    id: "shu",
    displayName: "árabe do Chade"
}, P.languages.slice(453, 456), {
    id: "cs",
    displayName: "checo",
    nativeDisplayName: "čeština"
}, P.languages.slice(457, 462), {
    id: "os",
    displayName: "ossético",
    nativeDisplayName: "ирон"
}, P.languages[463], {
    id: "mk",
    displayName: "macedónio",
    nativeDisplayName: "македонски"
}, P.languages.slice(465, 468), {
    id: "sah",
    displayName: "sakha",
    nativeDisplayName: "саха тыла"
}, P.languages.slice(469, 473), {
    id: "hy",
    displayName: "arménio",
    nativeDisplayName: "հայերեն"
}, P.languages.slice(474, 479), {
    id: "ar_001",
    displayName: "árabe moderno padrão",
    nativeDisplayName: "العربية الرسمية الحديثة"
}, P.languages[480], {
    id: "lrc",
    displayName: "luri do norte",
    nativeDisplayName: "لۊری شومالی"
}, P.languages[482], {
    id: "ps",
    displayName: "pastó",
    nativeDisplayName: "پښتو"
}, {
    id: "ckb",
    displayName: "sorani curdo",
    nativeDisplayName: "کوردیی ناوەندی"
}, P.languages.slice(485, 490), {
    id: "hi",
    displayName: "hindi",
    nativeDisplayName: "हिन्दी"
}, P.languages.slice(491, 498), {
    id: "kn",
    displayName: "canarim",
    nativeDisplayName: "ಕನ್ನಡ"
}, P.languages.slice(499, 521));

inter.scripts = [].concat({
    id: "Armi",
    displayName: "aramaico imperial"
}, {
    id: "Armn",
    displayName: "arménio"
}, P.scripts.slice(2, 13), P.scripts[14], {
    id: "Cakm",
    displayName: "chakma"
}, P.scripts.slice(15, 25), P.scripts.slice(26, 28), {
    id: "Egyd",
    displayName: "egípcio demótico"
}, {
    id: "Egyh",
    displayName: "egípcio hierático"
}, P.scripts[28], {
    id: "Sgnw",
    displayName: "escrita gestual"
}, P.scripts.slice(29, 36), P.scripts[37], {
    id: "Gujr",
    displayName: "guzerate"
}, P.scripts.slice(38, 44), P.scripts.slice(45, 49), {
    id: "Inds",
    displayName: "indus"
}, P.scripts.slice(50, 53), {
    id: "Kthi",
    displayName: "kaithi"
}, P.scripts.slice(53, 60), P.scripts.slice(61, 74), {
    id: "Mand",
    displayName: "mandeu"
}, P.scripts.slice(75, 82), {
    id: "Zxxx",
    displayName: "não escrito"
}, P.scripts.slice(82, 90), {
    id: "Phli",
    displayName: "pahlavi escrito"
}, {
    id: "Prti",
    displayName: "parthian escrito"
}, P.scripts.slice(90, 92), P.scripts[93], P.scripts.slice(95, 103), {
    id: "Sylo",
    displayName: "siloti nagri"
}, P.scripts.slice(104, 111), {
    id: "Zsym",
    displayName: "símbolos"
}, P.scripts.slice(112, 115), {
    id: "Tale",
    displayName: "tai le"
}, P.scripts.slice(116, 118), {
    id: "Telu",
    displayName: "telugu"
}, P.scripts.slice(118, 124), P.scripts.slice(125, 130), P.scripts[132]);

inter.currencies = [].concat({
    id: "AFN",
    displayName: "Afegani do Afeganistão",
    symbol: "AFN",
    one: "Afegane afegão",
    other: "Afeganes afegãos"
}, {
    id: "AFA",
    displayName: "Afeghani (1927–2002)",
    one: "Afegane do Afeganistão (AFA)",
    other: "Afeganes do Afeganistão (AFA)"
}, {
    id: "MGA",
    displayName: "Ariari de Madagáscar",
    symbol: "MGA",
    one: "Ariary malgaxe",
    other: "Ariarys malgaxes"
}, P.currencies[3], {
    id: "THB",
    displayName: "Baht da Tailândia",
    symbol: "฿",
    one: "Baht tailandês",
    other: "Bahts tailandeses"
}, {
    id: "PAB",
    displayName: "Balboa do Panamá",
    symbol: "PAB",
    one: "Balboa panamenha",
    other: "Balboas panamenhas"
}, P.currencies.slice(6, 11), {
    id: "GHS",
    displayName: "Cedi de Gana",
    symbol: "GHS",
    one: "Cedi ganês",
    other: "Cedis ganeses"
}, {
    id: "GHC",
    displayName: "Cedi do Gana",
    one: "Cedi de Gana (1979–2007)",
    other: "Cedis de Gana (1979–2007)"
}, P.currencies[13], {
    id: "CRC",
    displayName: "Colon costa-riquenho",
    symbol: "CRC",
    one: "Colón costarriquenho",
    other: "Colóns costarriquenhos"
}, P.currencies.slice(15, 17), {
    id: "CZK",
    displayName: "Coroa checa",
    symbol: "CZK",
    one: "Coroa tcheca",
    other: "Coroas tchecas"
}, P.currencies.slice(17, 23), P.currencies.slice(24, 30), P.currencies.slice(31, 36), {
    id: "NIO",
    displayName: "Córdoba nicaraguano",
    symbol: "NIO",
    one: "Córdoba nicaraguense",
    other: "Córdobas nicaraguenses"
}, {
    id: "NIC",
    displayName: "Córdoba nicaraguano (1988–1991)",
    one: "Córdoba nicaraguense (1988–1991)",
    other: "Córdobas nicaraguense (1988–1991)"
}, {
    id: "GMD",
    displayName: "Dalasi da Gâmbia",
    symbol: "GMD",
    one: "Dalasi gambiano",
    other: "Dalasis gambianos"
}, P.currencies[39], {
    id: "BHD",
    displayName: "Dinar baremita",
    symbol: "BHD",
    one: "Dinar bareinita",
    other: "Dinares bareinitas"
}, {
    id: "YUN",
    displayName: "Dinar conversível jugoslavo",
    one: "Dinar conversível da Iugoslávia",
    other: "Dinares conversíveis da Iugoslávia"
}, P.currencies[42], {
    id: "BAD",
    displayName: "Dinar da Bósnia-Herzegóvina",
    one: "Dinar da Bósnia Herzegovina",
    other: "Dinares da Bósnia Herzegovina"
}, {
    id: "YUD",
    displayName: "Dinar forte jugoslavo",
    one: "Dinar forte iugoslavo",
    other: "Dinares fortes iugoslavos"
}, P.currencies.slice(45, 50), {
    id: "MKD",
    displayName: "Dinar macedónio",
    symbol: "MKD",
    one: "Dinar macedônio",
    other: "Dinares macedônios"
}, P.currencies[51], P.currencies.slice(53, 57), {
    id: "TND",
    displayName: "Dinar tunisino",
    symbol: "TND",
    one: "Dinar tunisiano",
    other: "Dinares tunisianos"
}, P.currencies[58], {
    id: "AED",
    displayName: "Dirham dos Emirados Árabes Unidos",
    symbol: "AED",
    one: "Dirrã dos Emirados Árabes Unidos",
    other: "Dirrãs dos Emirados Árabes Unidos"
}, {
    id: "MAD",
    displayName: "Dirham marroquino",
    symbol: "MAD",
    one: "Dirrã marroquino",
    other: "Dirrãs marroquinos"
}, P.currencies.slice(61, 65), {
    id: "AMD",
    displayName: "Dram arménio",
    symbol: "AMD",
    one: "Dram armênio",
    other: "Drams armênios"
}, P.currencies[67], P.currencies[69], {
    id: "BZD",
    displayName: "Dólar belizense",
    symbol: "BZD",
    one: "Dólar belizenho",
    other: "Dólares belizenhos"
}, P.currencies[71], {
    id: "BND",
    displayName: "Dólar bruneíno",
    symbol: "BND",
    one: "Dólar bruneano",
    other: "Dólares bruneanos"
}, {
    id: "CAD",
    displayName: "Dólar canadiano",
    symbol: "CA$",
    one: "Dólar canadense",
    other: "Dólares canadenses"
}, {
    id: "GYD",
    displayName: "Dólar da Guiana",
    symbol: "GYD",
    one: "Dólar guianense",
    other: "Dólares guianenses"
}, {
    id: "NAD",
    displayName: "Dólar da Namíbia",
    symbol: "NAD",
    one: "Dólar namibiano",
    other: "Dólares namibianos"
}, {
    id: "BSD",
    displayName: "Dólar das Bahamas",
    symbol: "BSD",
    one: "Dólar bahamense",
    other: "Dólares bahamenses"
}, {
    id: "XCD",
    displayName: "Dólar das Caraíbas Orientais",
    symbol: "EC$",
    one: "Dólar do Caribe Oriental",
    other: "Dólares do Caribe Oriental"
}, {
    id: "KYD",
    displayName: "Dólar das Ilhas Caimão",
    symbol: "KYD",
    one: "Dólar das Ilhas Caiman",
    other: "Dólares das Ilhas Caiman"
}, P.currencies[75], {
    id: "FJD",
    displayName: "Dólar de Fiji",
    symbol: "FJD",
    one: "Dólar fijiano",
    other: "Dólares fijianos"
}, P.currencies[76], {
    id: "SGD",
    displayName: "Dólar de Singapura",
    symbol: "SGD",
    one: "Dólar singapuriano",
    other: "Dólares singapurianos"
}, {
    id: "TTD",
    displayName: "Dólar de Trindade e Tobago",
    symbol: "TTD",
    one: "Dólar de Trinidad e Tobago",
    other: "Dólares de Trinidad e Tobago"
}, P.currencies[78], {
    id: "SRD",
    displayName: "Dólar do Suriname",
    symbol: "SRD",
    one: "Dólar surinamês",
    other: "Dólares surinameses"
}, {
    id: "ZWD",
    displayName: "Dólar do Zimbabwe",
    one: "Dólar do Zimbábue",
    other: "Dólares do Zimbábue"
}, P.currencies.slice(81, 83), {
    id: "USD",
    displayName: "Dólar dos Estados Unidos",
    symbol: "US$",
    one: "Dólar americano",
    other: "Dólares americanos"
}, P.currencies.slice(85, 87), P.currencies.slice(88, 92), P.currencies.slice(94, 99), {
    id: "PTE",
    displayName: "Escudo português",
    symbol: "​",
    one: "Escudo português",
    other: "Escudos portugueses"
}, P.currencies.slice(100, 103), P.currencies[104], {
    id: "AWG",
    displayName: "Florim de Aruba",
    symbol: "AWG",
    one: "Florim arubano",
    other: "Florins arubanos"
}, P.currencies.slice(105, 108), {
    id: "XOF",
    displayName: "Franco CFA (BCEAO)",
    symbol: "CFA",
    one: "Franco CFA de BCEAO",
    other: "Francos CFA de BCEAO"
}, {
    id: "XAF",
    displayName: "Franco CFA (BEAC)",
    symbol: "FCFA",
    one: "Franco CFA de BEAC",
    other: "Francos CFA de BEAC"
}, P.currencies.slice(110, 114), {
    id: "BEC",
    displayName: "Franco belga (convertível)",
    one: "Franco belga (conversível)",
    other: "Francos belgas (conversíveis)"
}, P.currencies.slice(115, 117), {
    id: "KMF",
    displayName: "Franco comoriano",
    symbol: "KMF",
    one: "Franco comorense",
    other: "Francos comorenses"
}, P.currencies.slice(118, 121), {
    id: "MLF",
    displayName: "Franco do Mali",
    one: "Franco de Mali",
    other: "Francos de Mali"
}, P.currencies.slice(123, 125), {
    id: "GNF",
    displayName: "Franco guineense",
    symbol: "GNF",
    one: "Franco guineano",
    other: "Francos guineanos"
}, {
    id: "DJF",
    displayName: "Franco jibutiano",
    symbol: "DJF",
    one: "Franco djibutiense",
    other: "Francos djibutienses"
}, P.currencies.slice(126, 135), {
    id: "UAH",
    displayName: "Hryvnia da Ucrânia",
    symbol: "UAH",
    one: "Hryvnia ucraniano",
    other: "Hryvnias ucranianos"
}, P.currencies.slice(136, 140), {
    id: "PGK",
    displayName: "Kina da Papua-Nova Guiné",
    symbol: "PGK",
    one: "Kina papuásia",
    other: "Kinas papuásias"
}, {
    id: "LAK",
    displayName: "Kip de Laos",
    symbol: "LAK",
    one: "Kip laosiano",
    other: "Kips laosianos"
}, P.currencies[142], {
    id: "MWK",
    displayName: "Kwacha do Malawi",
    symbol: "MWK",
    one: "Kwacha malawiana",
    other: "Kwachas malawianas"
}, P.currencies[144], {
    id: "ZMK",
    displayName: "Kwacha zambiano (1968–2012)",
    symbol: "ZMK",
    one: "Kwacha da Zâmbia (1968–2012)",
    other: "Kwachas da Zâmbia (1968–2012)"
}, P.currencies.slice(145, 147), {
    id: "MMK",
    displayName: "Kyat de Mianmar",
    symbol: "MMK",
    one: "Kyat mianmarense",
    other: "Kyats mianmarenses"
}, P.currencies[148], {
    id: "LVL",
    displayName: "Lats da Letónia",
    symbol: "LVL",
    one: "Lats letão",
    other: "Lati letões"
}, P.currencies.slice(150, 152), {
    id: "HNL",
    displayName: "Lempira das Honduras",
    symbol: "HNL",
    one: "Lempira hondurenha",
    other: "Lempiras hondurenhas"
}, P.currencies[153], {
    id: "MDL",
    displayName: "Leu moldavo",
    symbol: "MDL",
    one: "Leu moldávio",
    other: "Leus moldávios"
}, P.currencies.slice(155, 161), {
    id: "FKP",
    displayName: "Libra das Ilhas Falkland",
    symbol: "FKP",
    one: "Libra malvinense",
    other: "Libras malvinenses"
}, {
    id: "CYP",
    displayName: "Libra de Chipre",
    one: "Libra cipriota",
    other: "Libras cipriotas"
}, P.currencies.slice(163, 166), {
    id: "GBP",
    displayName: "Libra esterlina britânica",
    symbol: "£",
    one: "Libra britânica",
    other: "Libras britânicas"
}, P.currencies.slice(166, 170), P.currencies.slice(171, 175), {
    id: "SZL",
    displayName: "Lilangeni da Suazilândia",
    symbol: "SZL",
    one: "Lilangeni suazi",
    other: "Lilangenis suazis"
}, P.currencies.slice(176, 180), {
    id: "LTL",
    displayName: "Litas da Lituânia",
    symbol: "LTL",
    one: "Litas lituano",
    other: "Litai lituanos"
}, P.currencies.slice(181, 183), {
    id: "AZN",
    displayName: "Manat do Azerbaijão",
    symbol: "AZN",
    one: "Manat azeri",
    other: "Manats azeris"
}, P.currencies[184], {
    id: "TMT",
    displayName: "Manat do Turquemenistão",
    symbol: "TMT",
    one: "Manat turcomeno",
    other: "Manats turcomenos"
}, P.currencies.slice(186, 188), {
    id: "BAM",
    displayName: "Marco bósnio-herzegóvino conversível",
    symbol: "BAM",
    one: "Marco bósnio-herzegovino conversível",
    other: "Marco bósnio-herzegovino conversível"
}, {
    id: "MZN",
    displayName: "Metical de Moçambique",
    symbol: "MZN",
    one: "Metical moçambicano",
    other: "Meticales moçambicanos"
}, P.currencies[189], P.currencies.slice(191, 195), {
    id: "BTN",
    displayName: "Ngultrum do Butão",
    symbol: "BTN",
    one: "Ngultrum butanês",
    other: "Ngultruns butaneses"
}, P.currencies.slice(196, 201), {
    id: "MRO",
    displayName: "Ouguiya da Mauritânia",
    symbol: "MRO",
    one: "Ouguiya mauritana",
    other: "Ouguiyas mauritanas"
}, P.currencies.slice(202, 204), {
    id: "MOP",
    displayName: "Pataca de Macau",
    symbol: "MOP",
    one: "Pataca macaense",
    other: "Patacas macaenses"
}, {
    id: "TOP",
    displayName: "Paʻanga de Tonga",
    symbol: "TOP",
    one: "Paʻanga tonganesa",
    other: "Paʻangas tonganesas"
}, P.currencies.slice(206, 210), {
    id: "MXP",
    displayName: "Peso Plata mexicano (1861–1992)",
    one: "Peso de prata mexicano (1861–1992)",
    other: "Pesos de prata mexicanos (1861–1992)"
}, P.currencies.slice(211, 229), {
    id: "BWP",
    displayName: "Pula de Botswana",
    symbol: "BWP",
    one: "Pula botsuanesa",
    other: "Pulas botsuanesas"
}, {
    id: "GTQ",
    displayName: "Quetzal da Guatemala",
    symbol: "GTQ",
    one: "Quetzal guatemalense",
    other: "Quetzais guatemalenses"
}, P.currencies.slice(231, 234), {
    id: "OMR",
    displayName: "Rial de Omã",
    symbol: "OMR",
    one: "Rial omanense",
    other: "Riales omanenses"
}, {
    id: "QAR",
    displayName: "Rial do Catar",
    symbol: "QAR",
    one: "Rial catariano",
    other: "Riales catarianos"
}, P.currencies.slice(235, 237), {
    id: "SAR",
    displayName: "Rial saudita",
    symbol: "SAR",
    one: "Riyal saudita",
    other: "Riyales sauditas"
}, P.currencies.slice(238, 240), P.currencies.slice(241, 244), {
    id: "BYB",
    displayName: "Rublo novo bielorusso (1994–1999)",
    one: "Novo rublo bielorusso (BYB)",
    other: "Novos rublos bielorussos (BYB)"
}, P.currencies.slice(245, 248), {
    id: "MVR",
    displayName: "Rupia das Ilhas Maldivas",
    symbol: "MVR",
    one: "Rupia maldiva",
    other: "Rupias maldivas"
}, {
    id: "LKR",
    displayName: "Rupia do Sri Lanka",
    symbol: "LKR",
    one: "Rupia ceilandesa",
    other: "Rupias ceilandesas"
}, P.currencies.slice(249, 251), P.currencies.slice(252, 259), {
    id: "KGS",
    displayName: "Som do Quirguistão",
    symbol: "KGS",
    one: "Som quirguiz",
    other: "Sons quirguizes"
}, {
    id: "UZS",
    displayName: "Som do Uzbequistão",
    symbol: "UZS",
    one: "Som uzbeque",
    other: "Sons uzbeques"
}, {
    id: "TJS",
    displayName: "Somoni do Tajaquistão",
    symbol: "TJS",
    one: "Somoni tadjique",
    other: "Somonis tadjiques"
}, P.currencies[262], {
    id: "YUM",
    displayName: "Super Dinar jugoslavo",
    one: "Dinar noviy da Iugoslávia",
    other: "Dinares noviy da Iugoslávia"
}, P.currencies[263], {
    id: "BDT",
    displayName: "Taka de Bangladesh",
    symbol: "BDT",
    one: "Taka bengalesa",
    other: "Takas bengalesas"
}, P.currencies.slice(265, 267), {
    id: "KZT",
    displayName: "Tenge do Cazaquistão",
    symbol: "KZT",
    one: "Tenge cazaque",
    other: "Tenges cazaques"
}, P.currencies[268], {
    id: "MNT",
    displayName: "Tugrik da Mongólia",
    symbol: "MNT",
    one: "Tugrik mongol",
    other: "Tugriks mongóis"
}, {
    id: "MXV",
    displayName: "Unidad de Inversion (UDI) mexicana",
    one: "Unidade de investimento mexicana (UDI)",
    other: "Unidades de investimento mexicanas (UDI)"
}, {
    id: "ECV",
    displayName: "Unidad de Valor Constante (UVC) do Equador",
    one: "Unidade de valor constante equatoriana (UVC)",
    other: "Unidades de valor constante equatorianas (UVC)"
}, P.currencies[270], P.currencies[272], {
    id: "XEU",
    displayName: "Unidade da Moeda Europeia",
    one: "Unidade de moeda europeia",
    other: "Unidades de moedas europeias"
}, P.currencies.slice(273, 275), P.currencies.slice(277, 279), {
    id: "VUV",
    displayName: "Vatu de Vanuatu",
    symbol: "VUV",
    one: "Vatu vanuatuense",
    other: "Vatus vanuatuenses"
}, P.currencies.slice(280, 285), {
    id: "SOS",
    displayName: "Xelim somali",
    symbol: "SOS",
    one: "Xelim somaliano",
    other: "Xelins somalianos"
}, P.currencies.slice(286, 292), {
    id: "PLN",
    displayName: "Zloti polaco",
    symbol: "PLN",
    one: "Zloti polonês",
    other: "Zlotis poloneses"
}, {
    id: "PLZ",
    displayName: "Zloti polaco (1950–1995)",
    one: "Zloti polonês (1950–1995)",
    other: "Zlotis poloneses (1950–1995)"
});

module.exports = inter;