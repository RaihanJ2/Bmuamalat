function defaults(targetObj) {
    for (var i = 1; i < arguments.length; i += 1) {
        if (arguments[i] && typeof arguments[i] === "object") {
            for (var propertyName in arguments[i]) {
                if (typeof targetObj[propertyName] === "undefined") {
                    targetObj[propertyName] = arguments[i][propertyName];
                }
            }
        }
    }
    return targetObj;
}

var P = require("./root.js"), inter = defaults({
    renderers: {}
}, P);

var _kckd1 = {
    "default": "#,##0 %"
}, _kckd2 = [ "T1", "T2", "T3", "T4" ], _kckd3 = {
    all: {
        leap: "{0}bis"
    }
}, _kckd4 = {
    displayName: "cadran"
}, _kckd5 = {
    one: "0 k",
    other: "0 k"
}, _kckd6 = {
    one: "0 M",
    other: "0 M"
}, _kckd7 = {
    one: "{0}°",
    other: "{0}°"
}, _kckd8 = {
    one: "{0}′",
    other: "{0}′"
}, _kckd9 = {
    one: "{0}″",
    other: "{0}″"
}, _kckd10 = {
    one: "{0}m",
    other: "{0}m"
}, _kckd11 = {
    one: "00 k",
    other: "00 k"
}, _kckd12 = {
    one: "00 M",
    other: "00 M"
}, _kckd13 = {
    one: "0 Md",
    other: "0 Md"
}, _kckd14 = {
    one: "0 Bn",
    other: "0 Bn"
}, _kckd15 = {
    a: "h a – h a",
    h: "h–h a"
}, _kckd16 = {
    one: "{0} m",
    other: "{0} m"
}, _kckd17 = {
    one: "000 k",
    other: "000 k"
}, _kckd18 = {
    one: "000 M",
    other: "000 M"
}, _kckd19 = {
    one: "00 Md",
    other: "00 Md"
}, _kckd20 = {
    one: "00 Bn",
    other: "00 Bn"
}, _kckd21 = {
    one: "0 k ¤",
    other: "0 k ¤"
}, _kckd22 = {
    one: "0 M ¤",
    other: "0 M ¤"
}, _kckd23 = {
    a: "h a – h a",
    h: "h – h a"
}, _kckd24 = {
    one: "+{0}h",
    other: "+{0}h"
}, _kckd25 = {
    one: "−{0}h",
    other: "−{0}h"
}, _kckd26 = {
    one: "{0} ct",
    other: "{0} ct"
}, _kckd27 = {
    one: "000 Md",
    other: "000 Md"
}, _kckd28 = {
    one: "000 Bn",
    other: "000 Bn"
}, _kckd29 = {
    one: "00 k ¤",
    other: "00 k ¤"
}, _kckd30 = {
    one: "00 M ¤",
    other: "00 M ¤"
}, _kckd31 = {
    one: "0 Md ¤",
    other: "0 Md ¤"
}, _kckd32 = {
    one: "0 Bn ¤",
    other: "0 Bn ¤"
}, _kckd33 = [ "D", "L", "M", "M", "J", "V", "S" ], _kckd34 = {
    one: "+{0} a",
    other: "+{0} a"
}, _kckd35 = {
    one: "-{0} a",
    other: "-{0} a"
}, _kckd36 = {
    one: "+{0} j",
    other: "+{0} j"
}, _kckd37 = {
    one: "-{0} j",
    other: "-{0} j"
}, _kckd38 = {
    one: "+{0} s",
    other: "+{0} s"
}, _kckd39 = {
    one: "-{0} s",
    other: "-{0} s"
}, _kckd40 = {
    a: "h a – h a v",
    h: "h–h a v"
}, _kckd41 = {
    one: "{0} an",
    other: "{0} ans"
}, _kckd42 = {
    displayName: "fuseau horaire"
}, _kckd43 = {
    one: "{0} rad",
    other: "{0} rad"
}, _kckd44 = {
    one: "000 k ¤",
    other: "000 k ¤"
}, _kckd45 = {
    one: "000 M ¤",
    other: "000 M ¤"
}, _kckd46 = {
    one: "00 Md ¤",
    other: "00 Md ¤"
}, _kckd47 = {
    one: "00 Bn ¤",
    other: "00 Bn ¤"
}, _kckd48 = {
    a: "h a – h a v",
    h: "h – h a v"
}, _kckd49 = {
    d: "d–d MMM",
    M: "d MMM – d MMM"
}, _kckd50 = {
    one: "+{0} m.",
    other: "+{0} m."
}, _kckd51 = {
    one: "-{0} m.",
    other: "-{0} m."
}, _kckd52 = {
    d: "MMM d–d",
    M: "MMM d – MMM d"
}, _kckd53 = {
    wide: [ "AH" ],
    abbreviated: [ "AH" ]
}, _kckd54 = {
    one: "{0} kcal",
    other: "{0} kcal"
}, _kckd55 = {
    one: "0 millier",
    other: "0 mille"
}, _kckd56 = {
    one: "00 mille",
    other: "00 mille"
}, _kckd57 = {
    one: "000 Md ¤",
    other: "000 Md ¤"
}, _kckd58 = {
    one: "000 Bn ¤",
    other: "000 Bn ¤"
}, _kckd59 = {
    one: "+{0} min",
    other: "+{0} min"
}, _kckd60 = {
    one: "-{0} min",
    other: "-{0} min"
}, _kckd61 = {
    H: "HH:mm–HH:mm",
    m: "HH:mm–HH:mm"
}, _kckd62 = {
    M: "y-MM – y-MM",
    y: "y-MM – y-MM"
}, _kckd63 = {
    M: "U MMM–MMM",
    y: "U MMM – U MMM"
}, _kckd64 = {
    displayName: "jour de la semaine"
}, _kckd65 = {
    one: "{0} sh tn",
    other: "{0} sh tn"
}, _kckd66 = {
    one: "000 mille",
    other: "000 mille"
}, _kckd67 = {
    M: "MM/y – MM/y G",
    y: "M/y – M/y G"
}, _kckd68 = {
    one: "+{0} sem.",
    other: "+{0} sem."
}, _kckd69 = {
    one: "-{0} sem.",
    other: "-{0} sem."
}, _kckd70 = {
    one: "{0} degré",
    other: "{0} degrés"
}, _kckd71 = {
    one: "{0} carat",
    other: "{0} carats"
}, _kckd72 = {
    one: "{0} tasse",
    other: "{0} tasses"
}, _kckd73 = {
    one: "0 million",
    other: "0 millions"
}, _kckd74 = {
    one: "0 billion",
    other: "0 billions"
}, _kckd75 = [ "di", "lu", "ma", "me", "je", "ve", "sa" ], _kckd76 = {
    H: "HH:mm – HH:mm",
    m: "HH:mm – HH:mm"
}, _kckd77 = {
    d: "dd/MM – dd/MM",
    M: "dd/MM – dd/MM"
}, _kckd78 = {
    M: "MMM–MMM y G",
    y: "MMM y – MMM y G"
}, _kckd79 = {
    one: "dans {0} a",
    other: "dans {0} a"
}, _kckd80 = {
    one: "+{0} trim.",
    other: "+{0} trim."
}, _kckd81 = {
    one: "-{0} trim.",
    other: "-{0} trim."
}, _kckd82 = {
    one: "dans {0} j",
    other: "dans {0} j"
}, _kckd83 = {
    one: "dans {0} h",
    other: "dans {0} h"
}, _kckd84 = {
    one: "dans {0} s",
    other: "dans {0} s"
}, _kckd85 = {
    H: "HH:mm–HH:mm v",
    m: "HH:mm–HH:mm v"
}, _kckd86 = {
    d: "MM-dd – MM-dd",
    M: "MM-dd – MM-dd"
}, _kckd87 = {
    M: "U MMMM–MMMM",
    y: "U MMMM – U MMMM"
}, _kckd88 = {
    one: "00 million",
    other: "00 millions"
}, _kckd89 = {
    one: "0 milliard",
    other: "0 milliards"
}, _kckd90 = {
    one: "00 billions",
    other: "00 billions"
}, _kckd91 = {
    "0": "ce tr",
    "1": "tr proch",
    "-1": "tr dern"
}, _kckd92 = {
    one: "dans {0} m.",
    other: "dans {0} m."
}, _kckd93 = {
    one: "000 million",
    other: "000 millions"
}, _kckd94 = {
    one: "00 milliard",
    other: "00 milliards"
}, _kckd95 = {
    one: "dans {0} an",
    other: "dans {0} ans"
}, _kckd96 = {
    one: "000 billions",
    other: "000 billions"
}, _kckd97 = {
    H: "HH:mm – HH:mm v",
    m: "HH:mm – HH:mm v"
}, _kckd98 = {
    one: "il y a {0} a",
    other: "il y a {0} a"
}, _kckd99 = {
    one: "il y a {0} j",
    other: "il y a {0} j"
}, _kckd100 = {
    one: "il y a {0} h",
    other: "il y a {0} h"
}, _kckd101 = {
    one: "dans {0} min",
    other: "dans {0} min"
}, _kckd102 = {
    one: "il y a {0} s",
    other: "il y a {0} s"
}, _kckd103 = {
    "0": "ce dim",
    "1": "dim proch",
    "-1": "dim dern"
}, _kckd104 = {
    "0": "ce lun",
    "1": "lun proch",
    "-1": "lun dern"
}, _kckd105 = {
    "0": "ce mar",
    "1": "mar proch",
    "-1": "mar dern"
}, _kckd106 = {
    "0": "ce mer",
    "1": "mer proch",
    "-1": "mer dern"
}, _kckd107 = {
    "0": "ce jeu",
    "1": "jeu proch",
    "-1": "jeu dern"
}, _kckd108 = {
    "0": "ce ven",
    "1": "ven proch",
    "-1": "ven dern"
}, _kckd109 = {
    "0": "ce sam",
    "1": "sam proch",
    "-1": "sam dern"
}, _kckd110 = {
    one: "000 milliards",
    other: "000 milliards"
}, _kckd111 = {
    M: "MMMM – MMMM y G",
    y: "MMMM y – MMMM y G"
}, _kckd112 = {
    one: "dans {0} mois",
    other: "dans {0} mois"
}, _kckd113 = {
    one: "il y a {0} m.",
    other: "il y a {0} m."
}, _kckd114 = {
    one: "dans {0} sem.",
    other: "dans {0} sem."
}, _kckd115 = {
    one: "il y a {0} an",
    other: "il y a {0} ans"
}, _kckd116 = {
    one: "dans {0} jour",
    other: "dans {0} jours"
}, _kckd117 = {
    d: "E dd/MM – E dd/MM",
    M: "E dd/MM – E dd/MM"
}, _kckd118 = {
    d: "E d MMM – E d MMM",
    M: "E d MMM – E d MMM"
}, _kckd119 = {
    one: "dans {0} trim.",
    other: "dans {0} trim."
}, _kckd120 = {
    one: "il y a {0} min",
    other: "il y a {0} min"
}, _kckd121 = {
    one: "dans {0} heure",
    other: "dans {0} heures"
}, _kckd122 = {
    one: "il y a {0} mois",
    other: "il y a {0} mois"
}, _kckd123 = {
    one: "il y a {0} sem.",
    other: "il y a {0} sem."
}, _kckd124 = {
    one: "{0} kilocalorie",
    other: "{0} kilocalories"
}, _kckd125 = {
    one: "il y a {0} jour",
    other: "il y a {0} jours"
}, _kckd126 = {
    one: "dans {0} minute",
    other: "dans {0} minutes"
}, _kckd127 = [ "J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D" ], _kckd128 = {
    one: "il y a {0} trim.",
    other: "il y a {0} trim."
}, _kckd129 = {
    d: "MM-dd, E – MM-dd, E",
    M: "MM-dd, E – MM-dd, E"
}, _kckd130 = {
    d: "MMM d, E – MMM d, E",
    M: "MMM d, E – MMM d, E"
}, _kckd131 = [ "C", "V", "J", "Ā", "S", "B", "Ā", "K", "M", "P", "M", "P" ], _kckd132 = {
    id: "001",
    displayName: "Monde",
    hasTimeZones: false
}, _kckd133 = [ "dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam." ], _kckd134 = {
    one: "dans {0} semaine",
    other: "dans {0} semaines"
}, _kckd135 = {
    one: "il y a {0} heure",
    other: "il y a {0} heures"
}, _kckd136 = {
    one: "dans {0} seconde",
    other: "dans {0} secondes"
}, _kckd137 = {
    "0": "ce dim.",
    "1": "dim. prochain",
    "-1": "dim. dernier"
}, _kckd138 = {
    "0": "ce lun.",
    "1": "lun. prochain",
    "-1": "lun. dernier"
}, _kckd139 = {
    "0": "ce mar.",
    "1": "mar. prochain",
    "-1": "mar. dernier"
}, _kckd140 = {
    "0": "ce mer.",
    "1": "mer. prochain",
    "-1": "mer. dernier"
}, _kckd141 = {
    "0": "ce jeu.",
    "1": "jeu. prochain",
    "-1": "jeu. dernier"
}, _kckd142 = {
    "0": "ce ven.",
    "1": "ven. prochain",
    "-1": "ven. dernier"
}, _kckd143 = {
    "0": "ce sam.",
    "1": "sam. prochain",
    "-1": "sam. dernier"
}, _kckd144 = {
    one: "il y a {0} minute",
    other: "il y a {0} minutes"
}, _kckd145 = [ "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" ], _kckd146 = {
    id: "CC",
    displayName: "Îles Cocos",
    hasTimeZones: true
}, _kckd147 = {
    relative: _kckd103
}, _kckd148 = {
    relative: _kckd104
}, _kckd149 = {
    relative: _kckd105
}, _kckd150 = {
    relative: _kckd106
}, _kckd151 = {
    relative: _kckd107
}, _kckd152 = {
    relative: _kckd108
}, _kckd153 = {
    relative: _kckd109
}, _kckd154 = {
    a: "h:mm a – h:mm a",
    h: "h:mm–h:mm a",
    m: "h:mm–h:mm a"
}, _kckd155 = [ "T", "B", "H", "K", "T", "A", "B", "B", "B", "B", "A", "M", "N" ], _kckd156 = [ "M", "T", "H", "T", "T", "Y", "M", "M", "G", "S", "H", "N", "P" ], _kckd157 = [ "T", "H", "K", "T", "S", "A", "A", "N", "I", "S", "T", "A", "E" ], _kckd158 = {
    id: "AQ",
    displayName: "Antarctique",
    hasTimeZones: true
}, _kckd159 = {
    id: "BV",
    displayName: "Île Bouvet",
    hasTimeZones: false
}, _kckd160 = {
    one: "dans {0} trimestre",
    other: "dans {0} trimestres"
}, _kckd161 = {
    one: "il y a {0} semaine",
    other: "il y a {0} semaines"
}, _kckd162 = {
    one: "il y a {0} seconde",
    other: "il y a {0} secondes"
}, _kckd163 = {
    "0": "ce lundi",
    "1": "lundi prochain",
    "-1": "lundi dernier"
}, _kckd164 = {
    "0": "ce mardi",
    "1": "mardi prochain",
    "-1": "mardi dernier"
}, _kckd165 = {
    "0": "ce jeudi",
    "1": "jeudi prochain",
    "-1": "jeudi dernier"
}, _kckd166 = {
    id: "DG",
    displayName: "Diego Garcia",
    hasTimeZones: false
}, _kckd167 = {
    id: "CX",
    displayName: "Île Christmas",
    hasTimeZones: true
}, _kckd168 = {
    "0": "ce trim.",
    "1": "le trim. proch.",
    "-1": "le trim. dern."
}, _kckd169 = {
    id: "IC",
    displayName: "Îles Canaries",
    hasTimeZones: false
}, _kckd170 = {
    a: "h:mm a – h:mm a",
    h: "h:mm – h:mm a",
    m: "h:mm – h:mm a"
}, _kckd171 = {
    "0": "ce samedi",
    "1": "samedi prochain",
    "-1": "samedi dernier"
}, _kckd172 = {
    d: "U MMM d–d",
    M: "U MMM d – MMM d",
    y: "U MMM d – U MMM d"
}, _kckd173 = {
    id: "CP",
    displayName: "Île Clipperton",
    hasTimeZones: false
}, _kckd174 = {
    one: "il y a {0} trimestre",
    other: "il y a {0} trimestres"
}, _kckd175 = {
    a: "h:mm a – h:mm a v",
    h: "h:mm–h:mm a v",
    m: "h:mm–h:mm a v"
}, _kckd176 = {
    id: "EA",
    displayName: "Ceuta et Melilla",
    hasTimeZones: false
}, _kckd177 = {
    id: "TA",
    displayName: "Tristan da Cunha",
    hasTimeZones: false
}, _kckd178 = {
    "0": "ce mois-ci",
    "1": "le mois prochain",
    "-1": "le mois dernier"
}, _kckd179 = {
    id: "CU",
    displayName: "Cuba",
    regionId: "029",
    hasTimeZones: true
}, _kckd180 = {
    id: "GU",
    displayName: "Guam",
    regionId: "057",
    hasTimeZones: true
}, _kckd181 = {
    id: "IN",
    displayName: "Inde",
    regionId: "034",
    hasTimeZones: true
}, _kckd182 = {
    id: "IQ",
    displayName: "Irak",
    regionId: "145",
    hasTimeZones: true
}, _kckd183 = {
    id: "IR",
    displayName: "Iran",
    regionId: "034",
    hasTimeZones: true
}, _kckd184 = {
    id: "LA",
    displayName: "Laos",
    regionId: "035",
    hasTimeZones: true
}, _kckd185 = {
    id: "ML",
    displayName: "Mali",
    regionId: "011",
    hasTimeZones: true
}, _kckd186 = {
    id: "NU",
    displayName: "Niue",
    regionId: "061",
    hasTimeZones: true
}, _kckd187 = {
    id: "OM",
    displayName: "Oman",
    regionId: "145",
    hasTimeZones: true
}, _kckd188 = {
    id: "TG",
    displayName: "Togo",
    regionId: "011",
    hasTimeZones: true
}, _kckd189 = {
    id: "AC",
    displayName: "Île de l’Ascension",
    hasTimeZones: false
}, _kckd190 = [ "1er trimestre", "2e trimestre", "3e trimestre", "4e trimestre" ], _kckd191 = {
    relative: _kckd137
}, _kckd192 = {
    relative: _kckd138
}, _kckd193 = {
    relative: _kckd139
}, _kckd194 = {
    relative: _kckd140
}, _kckd195 = {
    relative: _kckd141
}, _kckd196 = {
    relative: _kckd142
}, _kckd197 = {
    relative: _kckd143
}, _kckd198 = {
    id: "AW",
    displayName: "Aruba",
    regionId: "029",
    hasTimeZones: true
}, _kckd199 = {
    id: "BJ",
    displayName: "Bénin",
    regionId: "011",
    hasTimeZones: true
}, _kckd200 = {
    id: "CL",
    displayName: "Chili",
    regionId: "005",
    hasTimeZones: true
}, _kckd201 = {
    id: "CN",
    displayName: "Chine",
    regionId: "030",
    hasTimeZones: true
}, _kckd202 = {
    id: "FJ",
    displayName: "Fidji",
    regionId: "054",
    hasTimeZones: true
}, _kckd203 = {
    id: "GA",
    displayName: "Gabon",
    regionId: "017",
    hasTimeZones: true
}, _kckd204 = {
    id: "GH",
    displayName: "Ghana",
    regionId: "011",
    hasTimeZones: true
}, _kckd205 = {
    id: "GR",
    displayName: "Grèce",
    regionId: "039",
    hasTimeZones: true
}, _kckd206 = {
    id: "HT",
    displayName: "Haïti",
    regionId: "029",
    hasTimeZones: true
}, _kckd207 = {
    id: "JP",
    displayName: "Japon",
    regionId: "030",
    hasTimeZones: true
}, _kckd208 = {
    id: "KE",
    displayName: "Kenya",
    regionId: "014",
    hasTimeZones: true
}, _kckd209 = {
    id: "LB",
    displayName: "Liban",
    regionId: "145",
    hasTimeZones: true
}, _kckd210 = {
    id: "LY",
    displayName: "Libye",
    regionId: "015",
    hasTimeZones: true
}, _kckd211 = {
    id: "MT",
    displayName: "Malte",
    regionId: "039",
    hasTimeZones: true
}, _kckd212 = {
    id: "MA",
    displayName: "Maroc",
    regionId: "015",
    hasTimeZones: true
}, _kckd213 = {
    id: "NR",
    displayName: "Nauru",
    regionId: "057",
    hasTimeZones: true
}, _kckd214 = {
    id: "NE",
    displayName: "Niger",
    regionId: "011",
    hasTimeZones: true
}, _kckd215 = {
    id: "NP",
    displayName: "Népal",
    regionId: "034",
    hasTimeZones: true
}, _kckd216 = {
    id: "PE",
    displayName: "Pérou",
    regionId: "005",
    hasTimeZones: true
}, _kckd217 = {
    id: "QA",
    displayName: "Qatar",
    regionId: "145",
    hasTimeZones: true
}, _kckd218 = {
    id: "WS",
    displayName: "Samoa",
    regionId: "061",
    hasTimeZones: true
}, _kckd219 = {
    id: "SE",
    displayName: "Suède",
    regionId: "154",
    hasTimeZones: true
}, _kckd220 = {
    id: "SY",
    displayName: "Syrie",
    regionId: "145",
    hasTimeZones: true
}, _kckd221 = {
    id: "TD",
    displayName: "Tchad",
    regionId: "017",
    hasTimeZones: true
}, _kckd222 = {
    id: "TO",
    displayName: "Tonga",
    regionId: "061",
    hasTimeZones: true
}, _kckd223 = {
    id: "YE",
    displayName: "Yémen",
    regionId: "145",
    hasTimeZones: true
}, _kckd224 = {
    a: "h:mm a – h:mm a v",
    h: "h:mm – h:mm a v",
    m: "h:mm – h:mm a v"
}, _kckd225 = {
    d: "d–d MMM y G",
    M: "d MMM – d MMM y G",
    y: "d MMM y – d MMM y G"
}, _kckd226 = {
    "0": "cette année",
    "1": "l’année prochaine",
    "-1": "l’année dernière"
}, _kckd227 = {
    "0": "ce dimanche",
    "1": "dimanche prochain",
    "-1": "dimanche dernier"
}, _kckd228 = {
    "0": "ce mercredi",
    "1": "mercredi prochain",
    "-1": "mercredi dernier"
}, _kckd229 = {
    "0": "ce vendredi",
    "1": "vendredi prochain",
    "-1": "vendredi dernier"
}, _kckd230 = {
    id: "AO",
    displayName: "Angola",
    regionId: "017",
    hasTimeZones: true
}, _kckd231 = {
    id: "BZ",
    displayName: "Belize",
    regionId: "013",
    hasTimeZones: true
}, _kckd232 = {
    id: "BR",
    displayName: "Brésil",
    regionId: "005",
    hasTimeZones: true
}, _kckd233 = {
    id: "CA",
    displayName: "Canada",
    regionId: "021",
    hasTimeZones: true
}, _kckd234 = {
    id: "CY",
    displayName: "Chypre",
    regionId: "145",
    hasTimeZones: true
}, _kckd235 = {
    id: "FR",
    displayName: "France",
    regionId: "155",
    hasTimeZones: true
}, _kckd236 = {
    id: "GM",
    displayName: "Gambie",
    regionId: "011",
    hasTimeZones: true
}, _kckd237 = {
    id: "GN",
    displayName: "Guinée",
    regionId: "011",
    hasTimeZones: true
}, _kckd238 = {
    id: "GY",
    displayName: "Guyana",
    regionId: "005",
    hasTimeZones: true
}, _kckd239 = {
    id: "IL",
    displayName: "Israël",
    regionId: "145",
    hasTimeZones: true
}, _kckd240 = {
    id: "IT",
    displayName: "Italie",
    regionId: "039",
    hasTimeZones: true
}, _kckd241 = {
    id: "JE",
    displayName: "Jersey",
    regionId: "154",
    hasTimeZones: true
}, _kckd242 = {
    id: "KW",
    displayName: "Koweït",
    regionId: "145",
    hasTimeZones: true
}, _kckd243 = {
    id: "MW",
    displayName: "Malawi",
    regionId: "014",
    hasTimeZones: true
}, _kckd244 = {
    id: "MC",
    displayName: "Monaco",
    regionId: "155",
    hasTimeZones: true
}, _kckd245 = {
    id: "PW",
    displayName: "Palaos",
    regionId: "057",
    hasTimeZones: true
}, _kckd246 = {
    id: "PA",
    displayName: "Panama",
    regionId: "013",
    hasTimeZones: true
}, _kckd247 = {
    id: "RU",
    displayName: "Russie",
    regionId: "151",
    hasTimeZones: true
}, _kckd248 = {
    id: "RW",
    displayName: "Rwanda",
    regionId: "014",
    hasTimeZones: true
}, _kckd249 = {
    id: "RS",
    displayName: "Serbie",
    regionId: "039",
    hasTimeZones: true
}, _kckd250 = {
    id: "SD",
    displayName: "Soudan",
    regionId: "015",
    hasTimeZones: true
}, _kckd251 = {
    id: "CH",
    displayName: "Suisse",
    regionId: "155",
    hasTimeZones: true
}, _kckd252 = {
    id: "TW",
    displayName: "Taïwan",
    regionId: "030",
    hasTimeZones: true
}, _kckd253 = {
    id: "TV",
    displayName: "Tuvalu",
    regionId: "061",
    hasTimeZones: true
}, _kckd254 = {
    id: "ZM",
    displayName: "Zambie",
    regionId: "014",
    hasTimeZones: true
}, _kckd255 = {
    id: "EG",
    displayName: "Égypte",
    regionId: "015",
    hasTimeZones: true
}, _kckd256 = {
    id: "AL",
    displayName: "Albanie",
    regionId: "039",
    hasTimeZones: true
}, _kckd257 = {
    id: "DZ",
    displayName: "Algérie",
    regionId: "015",
    hasTimeZones: true
}, _kckd258 = {
    id: "AD",
    displayName: "Andorre",
    regionId: "039",
    hasTimeZones: true
}, _kckd259 = {
    id: "AM",
    displayName: "Arménie",
    regionId: "145",
    hasTimeZones: true
}, _kckd260 = {
    id: "BS",
    displayName: "Bahamas",
    regionId: "029",
    hasTimeZones: true
}, _kckd261 = {
    id: "BH",
    displayName: "Bahreïn",
    regionId: "145",
    hasTimeZones: true
}, _kckd262 = {
    id: "BB",
    displayName: "Barbade",
    regionId: "029",
    hasTimeZones: true
}, _kckd263 = {
    id: "BT",
    displayName: "Bhoutan",
    regionId: "034",
    hasTimeZones: true
}, _kckd264 = {
    id: "BO",
    displayName: "Bolivie",
    regionId: "005",
    hasTimeZones: true
}, _kckd265 = {
    id: "BI",
    displayName: "Burundi",
    regionId: "014",
    hasTimeZones: true
}, _kckd266 = {
    id: "KM",
    displayName: "Comores",
    regionId: "014",
    hasTimeZones: true
}, _kckd267 = {
    id: "HR",
    displayName: "Croatie",
    regionId: "039",
    hasTimeZones: true
}, _kckd268 = {
    id: "CW",
    displayName: "Curaçao",
    regionId: "029",
    hasTimeZones: true
}, _kckd269 = {
    id: "ES",
    displayName: "Espagne",
    regionId: "039",
    hasTimeZones: true
}, _kckd270 = {
    id: "EE",
    displayName: "Estonie",
    regionId: "154",
    hasTimeZones: true
}, _kckd271 = {
    id: "GD",
    displayName: "Grenade",
    regionId: "029",
    hasTimeZones: true
}, _kckd272 = {
    id: "GE",
    displayName: "Géorgie",
    regionId: "145",
    hasTimeZones: true
}, _kckd273 = {
    id: "HU",
    displayName: "Hongrie",
    regionId: "151",
    hasTimeZones: true
}, _kckd274 = {
    id: "IE",
    displayName: "Irlande",
    regionId: "154",
    hasTimeZones: true
}, _kckd275 = {
    id: "IS",
    displayName: "Islande",
    regionId: "154",
    hasTimeZones: true
}, _kckd276 = {
    id: "XK",
    displayName: "Kosovo",
    regionId: "039",
    hasTimeZones: false
}, _kckd277 = {
    id: "LS",
    displayName: "Lesotho",
    regionId: "018",
    hasTimeZones: true
}, _kckd278 = {
    id: "LR",
    displayName: "Libéria",
    regionId: "011",
    hasTimeZones: true
}, _kckd279 = {
    id: "MU",
    displayName: "Maurice",
    regionId: "014",
    hasTimeZones: true
}, _kckd280 = {
    id: "YT",
    displayName: "Mayotte",
    regionId: "014",
    hasTimeZones: true
}, _kckd281 = {
    id: "MX",
    displayName: "Mexique",
    regionId: "013",
    hasTimeZones: true
}, _kckd282 = {
    id: "NA",
    displayName: "Namibie",
    regionId: "018",
    hasTimeZones: true
}, _kckd283 = {
    id: "NG",
    displayName: "Nigéria",
    regionId: "011",
    hasTimeZones: true
}, _kckd284 = {
    id: "NO",
    displayName: "Norvège",
    regionId: "154",
    hasTimeZones: true
}, _kckd285 = {
    id: "UG",
    displayName: "Ouganda",
    regionId: "014",
    hasTimeZones: true
}, _kckd286 = {
    id: "PL",
    displayName: "Pologne",
    regionId: "151",
    hasTimeZones: true
}, _kckd287 = {
    id: "SO",
    displayName: "Somalie",
    regionId: "014",
    hasTimeZones: true
}, _kckd288 = {
    id: "SN",
    displayName: "Sénégal",
    regionId: "011",
    hasTimeZones: true
}, _kckd289 = {
    id: "TN",
    displayName: "Tunisie",
    regionId: "015",
    hasTimeZones: true
}, _kckd290 = {
    id: "TR",
    displayName: "Turquie",
    regionId: "145",
    hasTimeZones: true
}, _kckd291 = {
    id: "UA",
    displayName: "Ukraine",
    regionId: "151",
    hasTimeZones: true
}, _kckd292 = {
    id: "UY",
    displayName: "Uruguay",
    regionId: "005",
    hasTimeZones: true
}, _kckd293 = {
    id: "VU",
    displayName: "Vanuatu",
    regionId: "054",
    hasTimeZones: true
}, _kckd294 = {
    id: "VN",
    displayName: "Vietnam",
    regionId: "035",
    hasTimeZones: true
}, _kckd295 = {
    d: "d/M/y – d/M/y G",
    M: "d/M/y – d/M/y G",
    y: "dd/MM/y – dd/MM/y G"
}, _kckd296 = {
    relative: _kckd163
}, _kckd297 = {
    relative: _kckd164
}, _kckd298 = {
    relative: _kckd165
}, _kckd299 = {
    id: "AI",
    displayName: "Anguilla",
    regionId: "029",
    hasTimeZones: true
}, _kckd300 = {
    id: "AT",
    displayName: "Autriche",
    regionId: "155",
    hasTimeZones: true
}, _kckd301 = {
    id: "BE",
    displayName: "Belgique",
    regionId: "155",
    hasTimeZones: true
}, _kckd302 = {
    id: "BM",
    displayName: "Bermudes",
    regionId: "021",
    hasTimeZones: true
}, _kckd303 = {
    id: "BW",
    displayName: "Botswana",
    regionId: "018",
    hasTimeZones: true
}, _kckd304 = {
    id: "BG",
    displayName: "Bulgarie",
    regionId: "151",
    hasTimeZones: true
}, _kckd305 = {
    id: "KH",
    displayName: "Cambodge",
    regionId: "035",
    hasTimeZones: true
}, _kckd306 = {
    id: "CM",
    displayName: "Cameroun",
    regionId: "017",
    hasTimeZones: true
}, _kckd307 = {
    id: "CV",
    displayName: "Cap-Vert",
    regionId: "011",
    hasTimeZones: true
}, _kckd308 = {
    id: "CO",
    displayName: "Colombie",
    regionId: "005",
    hasTimeZones: true
}, _kckd309 = {
    id: "DK",
    displayName: "Danemark",
    regionId: "154",
    hasTimeZones: true
}, _kckd310 = {
    id: "DJ",
    displayName: "Djibouti",
    regionId: "014",
    hasTimeZones: true
}, _kckd311 = {
    id: "FI",
    displayName: "Finlande",
    regionId: "154",
    hasTimeZones: true
}, _kckd312 = {
    id: "HN",
    displayName: "Honduras",
    regionId: "013",
    hasTimeZones: true
}, _kckd313 = {
    id: "JM",
    displayName: "Jamaïque",
    regionId: "029",
    hasTimeZones: true
}, _kckd314 = {
    id: "JO",
    displayName: "Jordanie",
    regionId: "145",
    hasTimeZones: true
}, _kckd315 = {
    id: "KI",
    displayName: "Kiribati",
    regionId: "057",
    hasTimeZones: true
}, _kckd316 = {
    id: "LV",
    displayName: "Lettonie",
    regionId: "154",
    hasTimeZones: true
}, _kckd317 = {
    id: "LT",
    displayName: "Lituanie",
    regionId: "154",
    hasTimeZones: true
}, _kckd318 = {
    id: "MY",
    displayName: "Malaisie",
    regionId: "035",
    hasTimeZones: true
}, _kckd319 = {
    id: "MV",
    displayName: "Maldives",
    regionId: "034",
    hasTimeZones: true
}, _kckd320 = {
    id: "MD",
    displayName: "Moldavie",
    regionId: "151",
    hasTimeZones: true
}, _kckd321 = {
    id: "MN",
    displayName: "Mongolie",
    regionId: "030",
    hasTimeZones: true
}, _kckd322 = {
    id: "PK",
    displayName: "Pakistan",
    regionId: "034",
    hasTimeZones: true
}, _kckd323 = {
    id: "PY",
    displayName: "Paraguay",
    regionId: "005",
    hasTimeZones: true
}, _kckd324 = {
    id: "NL",
    displayName: "Pays-Bas",
    regionId: "155",
    hasTimeZones: true
}, _kckd325 = {
    id: "PT",
    displayName: "Portugal",
    regionId: "039",
    hasTimeZones: true
}, _kckd326 = {
    id: "RO",
    displayName: "Roumanie",
    regionId: "151",
    hasTimeZones: true
}, _kckd327 = {
    id: "SI",
    displayName: "Slovénie",
    regionId: "039",
    hasTimeZones: true
}, _kckd328 = {
    id: "SR",
    displayName: "Suriname",
    regionId: "005",
    hasTimeZones: true
}, _kckd329 = {
    id: "TZ",
    displayName: "Tanzanie",
    regionId: "014",
    hasTimeZones: true
}, _kckd330 = {
    id: "TK",
    displayName: "Tokélaou",
    regionId: "061",
    hasTimeZones: true
}, _kckd331 = {
    id: "ZW",
    displayName: "Zimbabwe",
    regionId: "014",
    hasTimeZones: true
}, _kckd332 = {
    id: "EC",
    displayName: "Équateur",
    regionId: "005",
    hasTimeZones: true
}, _kckd333 = {
    id: "ER",
    displayName: "Érythrée",
    regionId: "014",
    hasTimeZones: true
}, _kckd334 = {
    id: "ET",
    displayName: "Éthiopie",
    regionId: "014",
    hasTimeZones: true
}, _kckd335 = {
    id: "HM",
    displayName: "Îles Heard et McDonald",
    hasTimeZones: false
}, _kckd336 = {
    id: "DE",
    displayName: "Allemagne",
    regionId: "155",
    hasTimeZones: true
}, _kckd337 = {
    id: "AR",
    displayName: "Argentine",
    regionId: "005",
    hasTimeZones: true
}, _kckd338 = {
    id: "AU",
    displayName: "Australie",
    regionId: "053",
    hasTimeZones: true
}, _kckd339 = {
    id: "DM",
    displayName: "Dominique",
    regionId: "029",
    hasTimeZones: true
}, _kckd340 = {
    id: "GI",
    displayName: "Gibraltar",
    regionId: "039",
    hasTimeZones: true
}, _kckd341 = {
    id: "GL",
    displayName: "Groenland",
    regionId: "021",
    hasTimeZones: true
}, _kckd342 = {
    id: "GT",
    displayName: "Guatemala",
    regionId: "013",
    hasTimeZones: true
}, _kckd343 = {
    id: "GG",
    displayName: "Guernesey",
    regionId: "154",
    hasTimeZones: true
}, _kckd344 = {
    id: "ID",
    displayName: "Indonésie",
    regionId: "035",
    hasTimeZones: true
}, _kckd345 = {
    id: "MK",
    displayName: "Macédoine",
    regionId: "039",
    hasTimeZones: true
}, _kckd346 = {
    id: "NI",
    displayName: "Nicaragua",
    regionId: "013",
    hasTimeZones: true
}, _kckd347 = {
    id: "SG",
    displayName: "Singapour",
    regionId: "035",
    hasTimeZones: true
}, _kckd348 = {
    id: "SK",
    displayName: "Slovaquie",
    regionId: "151",
    hasTimeZones: true
}, _kckd349 = {
    id: "LK",
    displayName: "Sri Lanka",
    regionId: "034",
    hasTimeZones: true
}, _kckd350 = {
    id: "SZ",
    displayName: "Swaziland",
    regionId: "018",
    hasTimeZones: true
}, _kckd351 = {
    id: "TH",
    displayName: "Thaïlande",
    regionId: "035",
    hasTimeZones: true
}, _kckd352 = {
    id: "VE",
    displayName: "Venezuela",
    regionId: "005",
    hasTimeZones: true
}, _kckd353 = {
    id: "CK",
    displayName: "Îles Cook",
    regionId: "061",
    hasTimeZones: true
}, _kckd354 = [ "dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi" ], _kckd355 = {
    d: "y-MM-dd – y-MM-dd",
    M: "y-MM-dd – y-MM-dd",
    y: "y-MM-dd – y-MM-dd"
}, _kckd356 = {
    id: "BD",
    displayName: "Bangladesh",
    regionId: "034",
    hasTimeZones: true
}, _kckd357 = {
    id: "CR",
    displayName: "Costa Rica",
    regionId: "013",
    hasTimeZones: true
}, _kckd358 = {
    id: "GP",
    displayName: "Guadeloupe",
    regionId: "029",
    hasTimeZones: true
}, _kckd359 = {
    id: "KZ",
    displayName: "Kazakhstan",
    regionId: "143",
    hasTimeZones: true
}, _kckd360 = {
    id: "RE",
    displayName: "La Réunion",
    regionId: "014",
    hasTimeZones: true
}, _kckd361 = {
    id: "LU",
    displayName: "Luxembourg",
    regionId: "155",
    hasTimeZones: true
}, _kckd362 = {
    id: "MG",
    displayName: "Madagascar",
    regionId: "014",
    hasTimeZones: true
}, _kckd363 = {
    id: "MQ",
    displayName: "Martinique",
    regionId: "029",
    hasTimeZones: true
}, _kckd364 = {
    id: "MR",
    displayName: "Mauritanie",
    regionId: "011",
    hasTimeZones: true
}, _kckd365 = {
    id: "MS",
    displayName: "Montserrat",
    regionId: "029",
    hasTimeZones: true
}, _kckd366 = {
    id: "ME",
    displayName: "Monténégro",
    regionId: "039",
    hasTimeZones: true
}, _kckd367 = {
    id: "MZ",
    displayName: "Mozambique",
    regionId: "014",
    hasTimeZones: true
}, _kckd368 = {
    id: "PR",
    displayName: "Porto Rico",
    regionId: "029",
    hasTimeZones: true
}, _kckd369 = {
    id: "SC",
    displayName: "Seychelles",
    regionId: "014",
    hasTimeZones: true
}, _kckd370 = {
    id: "US",
    displayName: "États-Unis",
    regionId: "021",
    hasTimeZones: true
}, _kckd371 = {
    id: "IM",
    displayName: "Île de Man",
    regionId: "154",
    hasTimeZones: true
}, _kckd372 = {
    id: "FO",
    displayName: "Îles Féroé",
    regionId: "154",
    hasTimeZones: true
}, _kckd373 = {
    id: "AX",
    displayName: "Îles Åland",
    regionId: "154",
    hasTimeZones: true
}, _kckd374 = {
    "2": "{0} et {1}",
    start: "{0}, {1}",
    middle: "{0}, {1}",
    end: "{0} et {1}"
}, _kckd375 = {
    relative: _kckd171
}, _kckd376 = {
    id: "AF",
    displayName: "Afghanistan",
    regionId: "034",
    hasTimeZones: true
}, _kckd377 = {
    id: "AZ",
    displayName: "Azerbaïdjan",
    regionId: "145",
    hasTimeZones: true
}, _kckd378 = {
    id: "BY",
    displayName: "Biélorussie",
    regionId: "151",
    hasTimeZones: true
}, _kckd379 = {
    id: "SV",
    displayName: "El Salvador",
    regionId: "013",
    hasTimeZones: true
}, _kckd380 = {
    id: "UZ",
    displayName: "Ouzbékistan",
    regionId: "143",
    hasTimeZones: true
}, _kckd381 = {
    id: "PH",
    displayName: "Philippines",
    regionId: "035",
    hasTimeZones: true
}, _kckd382 = {
    id: "GB",
    displayName: "Royaume-Uni",
    regionId: "154",
    hasTimeZones: true
}, _kckd383 = {
    id: "SM",
    displayName: "Saint-Marin",
    regionId: "039",
    hasTimeZones: true
}, _kckd384 = {
    id: "TJ",
    displayName: "Tadjikistan",
    regionId: "143",
    hasTimeZones: true
}, _kckd385 = {
    id: "NF",
    displayName: "Île Norfolk",
    regionId: "053",
    hasTimeZones: true
}, _kckd386 = {
    future: _kckd24,
    past: _kckd25
}, _kckd387 = {
    id: "142",
    displayName: "Asie",
    hasTimeZones: false,
    parentRegionId: "001"
}, _kckd388 = {
    id: "BF",
    displayName: "Burkina Faso",
    regionId: "011",
    hasTimeZones: true
}, _kckd389 = {
    id: "KR",
    displayName: "Corée du Sud",
    regionId: "030",
    hasTimeZones: true
}, _kckd390 = {
    id: "KG",
    displayName: "Kirghizistan",
    regionId: "143",
    hasTimeZones: true
}, _kckd391 = {
    id: "MF",
    displayName: "Saint-Martin",
    regionId: "029",
    hasTimeZones: true
}, _kckd392 = {
    id: "LC",
    displayName: "Sainte-Lucie",
    regionId: "029",
    hasTimeZones: true
}, _kckd393 = {
    id: "SL",
    displayName: "Sierra Leone",
    regionId: "011",
    hasTimeZones: true
}, _kckd394 = {
    id: "TF",
    displayName: "Terres australes françaises",
    hasTimeZones: true
}, _kckd395 = {
    id: "TM",
    displayName: "Turkménistan",
    regionId: "143",
    hasTimeZones: true
}, _kckd396 = {
    id: "KY",
    displayName: "Îles Caïmans",
    regionId: "029",
    hasTimeZones: true
}, _kckd397 = {
    id: "SB",
    displayName: "Îles Salomon",
    regionId: "054",
    hasTimeZones: true
}, _kckd398 = {
    id: "KP",
    displayName: "Corée du Nord",
    regionId: "030",
    hasTimeZones: true
}, _kckd399 = {
    id: "CI",
    displayName: "Côte d’Ivoire",
    regionId: "011",
    hasTimeZones: true
}, _kckd400 = {
    id: "GW",
    displayName: "Guinée-Bissau",
    regionId: "011",
    hasTimeZones: true
}, _kckd401 = {
    id: "LI",
    displayName: "Liechtenstein",
    regionId: "155",
    hasTimeZones: true
}, _kckd402 = {
    id: "SH",
    displayName: "Sainte-Hélène",
    regionId: "011",
    hasTimeZones: true
}, _kckd403 = {
    id: "SS",
    displayName: "Soudan du Sud",
    regionId: "014",
    hasTimeZones: true
}, _kckd404 = {
    id: "MH",
    displayName: "Îles Marshall",
    regionId: "057",
    hasTimeZones: true
}, _kckd405 = {
    id: "PN",
    displayName: "Îles Pitcairn",
    regionId: "061",
    hasTimeZones: true
}, _kckd406 = {
    "0": "cette semaine",
    "1": "la semaine prochaine",
    "-1": "la semaine dernière"
}, _kckd407 = {
    abbreviated: {
        leap: "{0}bis"
    },
    narrow: {
        leap: "{0}b"
    },
    wide: {
        leap: "{0}bis"
    }
}, _kckd408 = {
    id: "ZA",
    displayName: "Afrique du Sud",
    regionId: "018",
    hasTimeZones: true
}, _kckd409 = {
    id: "CD",
    displayName: "Congo-Kinshasa",
    regionId: "017",
    hasTimeZones: true
}, _kckd410 = {
    id: "150",
    displayName: "Europe",
    hasTimeZones: false,
    parentRegionId: "001"
}, _kckd411 = {
    id: "TL",
    displayName: "Timor oriental",
    regionId: "035",
    hasTimeZones: true
}, _kckd412 = {
    id: "FK",
    displayName: "Îles Malouines",
    regionId: "005",
    hasTimeZones: true
}, _kckd413 = {
    id: "002",
    displayName: "Afrique",
    hasTimeZones: false,
    parentRegionId: "001"
}, _kckd414 = {
    id: "SA",
    displayName: "Arabie saoudite",
    regionId: "145",
    hasTimeZones: true
}, _kckd415 = {
    id: "009",
    displayName: "Océanie",
    hasTimeZones: false,
    parentRegionId: "001"
}, _kckd416 = {
    future: _kckd34,
    past: _kckd35
}, _kckd417 = {
    future: _kckd36,
    past: _kckd37
}, _kckd418 = {
    future: _kckd38,
    past: _kckd39
}, _kckd419 = {
    id: "029",
    displayName: "Caraïbes",
    hasTimeZones: false,
    parentRegionId: "019"
}, _kckd420 = {
    id: "GF",
    displayName: "Guyane française",
    regionId: "005",
    hasTimeZones: true
}, _kckd421 = {
    id: "NZ",
    displayName: "Nouvelle-Zélande",
    regionId: "053",
    hasTimeZones: true
}, _kckd422 = {
    id: "BL",
    displayName: "Saint-Barthélemy",
    regionId: "029",
    hasTimeZones: true
}, _kckd423 = {
    id: "WF",
    displayName: "Wallis-et-Futuna",
    regionId: "061",
    hasTimeZones: true
}, _kckd424 = {
    relative: _kckd227
}, _kckd425 = {
    relative: _kckd228
}, _kckd426 = {
    relative: _kckd229
}, _kckd427 = {
    id: "019",
    displayName: "Amériques",
    hasTimeZones: false,
    parentRegionId: "001"
}, _kckd428 = {
    id: "BN",
    displayName: "Brunéi Darussalam",
    regionId: "035",
    hasTimeZones: true
}, _kckd429 = {
    id: "CG",
    displayName: "Congo-Brazzaville",
    regionId: "017",
    hasTimeZones: true
}, _kckd430 = {
    id: "054",
    displayName: "Mélanésie",
    hasTimeZones: false,
    parentRegionId: "009"
}, _kckd431 = {
    id: "061",
    displayName: "Polynésie",
    hasTimeZones: false,
    parentRegionId: "009"
}, _kckd432 = {
    id: "EH",
    displayName: "Sahara occidental",
    regionId: "015",
    hasTimeZones: true
}, _kckd433 = {
    id: "AS",
    displayName: "Samoa américaines",
    regionId: "061",
    hasTimeZones: true
}, _kckd434 = {
    id: "TT",
    displayName: "Trinité-et-Tobago",
    regionId: "029",
    hasTimeZones: true
}, _kckd435 = {
    "0": "ce trimestre-ci",
    "1": "le trimestre prochain",
    "-1": "le trimestre dernier"
}, _kckd436 = {
    "0": "aujourd’hui",
    "1": "demain",
    "2": "après-demain",
    "-2": "avant-hier",
    "-1": "hier"
}, _kckd437 = {
    id: "AG",
    displayName: "Antigua-et-Barbuda",
    regionId: "029",
    hasTimeZones: true
}, _kckd438 = {
    id: "BA",
    displayName: "Bosnie-Herzégovine",
    regionId: "039",
    hasTimeZones: true
}, _kckd439 = {
    id: "GQ",
    displayName: "Guinée équatoriale",
    regionId: "017",
    hasTimeZones: true
}, _kckd440 = {
    id: "MM",
    displayName: "Myanmar (Birmanie)",
    regionId: "035",
    hasTimeZones: true
}, _kckd441 = {
    id: "NC",
    displayName: "Nouvelle-Calédonie",
    regionId: "054",
    hasTimeZones: true
}, _kckd442 = {
    id: "BQ",
    displayName: "Pays-Bas caribéens",
    regionId: "029",
    hasTimeZones: true
}, _kckd443 = {
    id: "CZ",
    displayName: "République tchèque",
    regionId: "151",
    hasTimeZones: true
}, _kckd444 = [ undefined, "zi", "chou", "yin", "mao", "chen", "si", "wu", "wei", "shen", "you", "xu" ], _kckd445 = {
    id: "034",
    displayName: "Asie du Sud",
    hasTimeZones: false,
    parentRegionId: "142"
}, _kckd446 = {
    id: "053",
    displayName: "Australasie",
    hasTimeZones: false,
    parentRegionId: "009"
}, _kckd447 = {
    id: "PF",
    displayName: "Polynésie française",
    regionId: "061",
    hasTimeZones: true
}, _kckd448 = {
    id: "AE",
    displayName: "Émirats arabes unis",
    regionId: "145",
    hasTimeZones: true
}, _kckd449 = {
    d: "E d – E d MMM y G",
    M: "E d MMM – E d MMM y G",
    y: "E d MMM y – E d MMM y G"
}, _kckd450 = {
    future: _kckd50,
    past: _kckd51
}, _kckd451 = {
    id: "ST",
    displayName: "Sao Tomé-et-Principe",
    regionId: "017",
    hasTimeZones: true
}, _kckd452 = {
    id: "143",
    displayName: "Asie centrale",
    hasTimeZones: false,
    parentRegionId: "142"
}, _kckd453 = {
    id: "SJ",
    displayName: "Svalbard et Jan Mayen",
    regionId: "154",
    hasTimeZones: true
}, _kckd454 = {
    id: "030",
    displayName: "Asie orientale",
    hasTimeZones: false,
    parentRegionId: "142"
}, _kckd455 = {
    id: "DO",
    displayName: "République dominicaine",
    regionId: "029",
    hasTimeZones: true
}, _kckd456 = {
    id: "MP",
    displayName: "Îles Mariannes du Nord",
    regionId: "057",
    hasTimeZones: true
}, _kckd457 = {
    id: "005",
    displayName: "Amérique du Sud",
    hasTimeZones: false,
    parentRegionId: "019"
}, _kckd458 = {
    id: "035",
    displayName: "Asie du Sud-Est",
    hasTimeZones: false,
    parentRegionId: "142"
}, _kckd459 = {
    id: "151",
    displayName: "Europe de l’Est",
    hasTimeZones: false,
    parentRegionId: "150"
}, _kckd460 = {
    id: "GS",
    displayName: "Géorgie du Sud et îles Sandwich du Sud",
    hasTimeZones: true
}, _kckd461 = {
    id: "TC",
    displayName: "Îles Turques-et-Caïques",
    regionId: "029",
    hasTimeZones: true
}, _kckd462 = {
    id: "UM",
    displayName: "Îles mineures éloignées des États-Unis",
    hasTimeZones: true
}, _kckd463 = {
    future: _kckd59,
    past: _kckd60
}, _kckd464 = {
    d: "U MMM d, E – MMM d, E",
    M: "U MMM d, E – MMM d, E",
    y: "U MMM d, E – U MMM d, E"
}, _kckd465 = {
    id: "018",
    displayName: "Afrique australe",
    hasTimeZones: false,
    parentRegionId: "002"
}, _kckd466 = {
    id: "017",
    displayName: "Afrique centrale",
    hasTimeZones: false,
    parentRegionId: "002"
}, _kckd467 = {
    id: "145",
    displayName: "Asie occidentale",
    hasTimeZones: false,
    parentRegionId: "142"
}, _kckd468 = {
    id: "MO",
    displayName: "R.A.S. chinoise de Macao",
    regionId: "030",
    hasTimeZones: true
}, _kckd469 = {
    id: "PM",
    displayName: "Saint-Pierre-et-Miquelon",
    regionId: "021",
    hasTimeZones: true
}, _kckd470 = {
    id: "PS",
    displayName: "Territoires palestiniens",
    regionId: "145",
    hasTimeZones: true
}, _kckd471 = {
    id: "014",
    displayName: "Afrique orientale",
    hasTimeZones: false,
    parentRegionId: "002"
}, _kckd472 = {
    id: "013",
    displayName: "Amérique centrale",
    hasTimeZones: false,
    parentRegionId: "019"
}, _kckd473 = {
    id: "PG",
    displayName: "Papouasie-Nouvelle-Guinée",
    regionId: "054",
    hasTimeZones: true
}, _kckd474 = {
    id: "CF",
    displayName: "République centrafricaine",
    regionId: "017",
    hasTimeZones: true
}, _kckd475 = {
    id: "IO",
    displayName: "Territoire britannique de l’océan Indien",
    hasTimeZones: true
}, _kckd476 = {
    id: "VG",
    displayName: "Îles Vierges britanniques",
    regionId: "029",
    hasTimeZones: true
}, _kckd477 = {
    id: "039",
    displayName: "Europe méridionale",
    hasTimeZones: false,
    parentRegionId: "150"
}, _kckd478 = {
    id: "155",
    displayName: "Europe occidentale",
    hasTimeZones: false,
    parentRegionId: "150"
}, _kckd479 = {
    id: "KN",
    displayName: "Saint-Christophe-et-Niévès",
    regionId: "029",
    hasTimeZones: true
}, _kckd480 = {
    id: "VA",
    displayName: "État de la Cité du Vatican",
    regionId: "039",
    hasTimeZones: true
}, _kckd481 = {
    id: "011",
    displayName: "Afrique occidentale",
    hasTimeZones: false,
    parentRegionId: "002"
}, _kckd482 = {
    id: "FM",
    displayName: "États fédérés de Micronésie",
    regionId: "057",
    hasTimeZones: true
}, _kckd483 = {
    id: "VI",
    displayName: "Îles Vierges des États-Unis",
    regionId: "029",
    hasTimeZones: true
}, _kckd484 = {
    d: "E dd/MM/y – E dd/MM/y G",
    M: "E dd/MM/y – E dd/MM/y G",
    y: "E dd/MM/y – E dd/MM/y G"
}, _kckd485 = {
    future: _kckd68,
    past: _kckd69
}, _kckd486 = {
    d: "y-MM-dd, E – y-MM-dd, E",
    M: "y-MM-dd, E – y-MM-dd, E",
    y: "y-MM-dd, E – y-MM-dd, E"
}, _kckd487 = {
    id: "HK",
    displayName: "R.A.S. chinoise de Hong Kong",
    regionId: "030",
    hasTimeZones: true
}, _kckd488 = {
    id: "057",
    displayName: "région micronésienne",
    hasTimeZones: false,
    parentRegionId: "009"
}, _kckd489 = {
    id: "154",
    displayName: "Europe septentrionale",
    hasTimeZones: false,
    parentRegionId: "150"
}, _kckd490 = {
    id: "015",
    displayName: "Afrique septentrionale",
    hasTimeZones: false,
    parentRegionId: "002"
}, _kckd491 = [ "janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc." ], _kckd492 = [ "1yuè", "2yuè", "3yuè", "4yuè", "5yuè", "6yuè", "7yuè", "8yuè", "9yuè", "10yuè", "11yuè", "12yuè" ], _kckd493 = {
    id: "021",
    displayName: "Amérique septentrionale",
    hasTimeZones: false,
    parentRegionId: "019"
}, _kckd494 = {
    id: "VC",
    displayName: "Saint-Vincent-et-les-Grenadines",
    regionId: "029",
    hasTimeZones: true
}, _kckd495 = {
    future: _kckd80,
    past: _kckd81
}, _kckd496 = [ "mäs.", "teq.", "hed.", "tah.", "ter", "yäk.", "mäg.", "miy.", "gue.", "sän.", "ham.", "näh.", "pag." ], _kckd497 = [ "tis.", "hes.", "kis.", "téb.", "sché.", "ad.I", "adar", "nis.", "iyar", "siv.", "tam.", "ab", "ell." ], _kckd498 = [ "chai.", "vai.", "jyai.", "āsha.", "shrā.", "bhā.", "āshw.", "kār.", "mār.", "pau.", "māgh", "phāl." ], _kckd499 = {
    id: "SX",
    displayName: "Saint-Martin (partie néerlandaise)",
    regionId: "029",
    hasTimeZones: true
}, _kckd500 = {
    future: _kckd79,
    past: _kckd98
}, _kckd501 = {
    future: _kckd82,
    past: _kckd99
}, _kckd502 = {
    future: _kckd83,
    past: _kckd100
}, _kckd503 = {
    future: _kckd84,
    past: _kckd102
}, _kckd504 = {
    future: _kckd92,
    past: _kckd113
}, _kckd505 = {
    future: _kckd95,
    past: _kckd115
}, _kckd506 = {
    displayName: "h",
    relativeTime: _kckd386
}, _kckd507 = {
    future: _kckd101,
    past: _kckd120
}, _kckd508 = [ "tout", "bâb.", "hât.", "kya.", "toub.", "amsh.", "barma.", "barmo.", "bash.", "ba’o.", "abî.", "mis.", "al-n." ], _kckd509 = {
    displayName: "a",
    relativeTime: _kckd416
}, _kckd510 = {
    displayName: "j",
    relativeTime: _kckd417
}, _kckd511 = {
    displayName: "s",
    relativeTime: _kckd418
}, _kckd512 = {
    future: _kckd112,
    past: _kckd122
}, _kckd513 = {
    future: _kckd114,
    past: _kckd123
}, _kckd514 = {
    future: _kckd116,
    past: _kckd125
}, _kckd515 = {
    future: _kckd119,
    past: _kckd128
}, _kckd516 = {
    displayName: "m.",
    relativeTime: _kckd450
}, _kckd517 = [ "Farvardin", "Ordibehesht", "Khordad", "Tir", "Mordad", "Shahrivar", "Mehr", "Aban", "Azar", "Dey", "Bahman", "Esfand" ], _kckd518 = {
    midnight: "min.",
    am: "AM",
    noon: "midi",
    pm: "PM",
    morning1: "mat.",
    afternoon1: "ap.m.",
    evening1: "soir",
    night1: "nuit"
}, _kckd519 = [ "janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre" ], _kckd520 = {
    future: _kckd121,
    past: _kckd135
}, _kckd521 = [ "zhēngyuè", "èryuè", "sānyuè", "sìyuè", "wǔyuè", "liùyuè", "qīyuè", "bāyuè", "jiǔyuè", "shíyuè", "shíyīyuè", "shí’èryuè" ], _kckd522 = [ "Tisseri", "Hesvan", "Kislev", "Tébeth", "Schébat", "Adar I", "Adar", "Nissan", "Iyar", "Sivan", "Tamouz", "Ab", "Elloul" ], _kckd523 = {
    displayName: "min",
    relativeTime: _kckd463
}, _kckd524 = {
    future: _kckd126,
    past: _kckd144
}, _kckd525 = [ "mouh.", "saf.", "rab. aw.", "rab. th.", "joum. oul.", "joum. tha.", "raj.", "chaa.", "ram.", "chaw.", "dhou. q.", "dhou. h." ], _kckd526 = [ "mouh.", "saf.", "rab. aw.", "rab. th.", "joum. ou.", "joum. th.", "raj.", "chaa.", "ram.", "chaw.", "dhou. qi.", "dhou. hi." ], _kckd527 = {
    midnight: "minuit",
    am: "AM",
    noon: "midi",
    pm: "PM",
    morning1: "matin",
    afternoon1: "après-midi",
    evening1: "soir",
    night1: "nuit"
}, _kckd528 = {
    future: _kckd134,
    past: _kckd161
}, _kckd529 = {
    displayName: "sem.",
    relativeTime: _kckd485
}, _kckd530 = {
    future: _kckd136,
    past: _kckd162
}, _kckd531 = [ "tout", "bâbâ", "hâtour", "kyakh", "toubah", "amshîr", "barmahât", "barmoudah", "bashans", "ba’ounah", "abîb", "misra", "al-nasi" ], _kckd532 = [ "mäskäräm", "teqemt", "hedar", "tahesas", "ter", "yäkatit", "mägabit", "miyazya", "guenbot", "säné", "hamlé", "nähasé", "pagumén" ], _kckd533 = {
    displayName: "j",
    relativeTime: _kckd501
}, _kckd534 = {
    displayName: "h",
    relativeTime: _kckd502
}, _kckd535 = {
    displayName: "s",
    relativeTime: _kckd503
}, _kckd536 = [ "chaitra", "vaishākh", "jyaishtha", "āshādha", "shrāvana", "bhādrapad", "āshwin", "kārtik", "mārgashīrsha", "paush", "māgh", "phālgun" ], _kckd537 = {
    displayName: "ann.",
    relativeTime: _kckd500
}, _kckd538 = {
    future: _kckd160,
    past: _kckd174
}, _kckd539 = {
    abbreviated: _kckd2,
    narrow: [ "1", "2", "3", "4" ],
    wide: _kckd190
}, _kckd540 = {
    displayName: "m.",
    relativeTime: _kckd504
}, _kckd541 = {
    midnight: "minuit",
    am: "AM",
    noon: "midi",
    pm: "PM",
    morning1: "du matin",
    afternoon1: "de l’après-midi",
    evening1: "du soir",
    night1: "de nuit"
}, _kckd542 = {
    displayName: "min",
    relativeTime: _kckd507
}, _kckd543 = {
    displayName: "sem.",
    relativeTime: _kckd513
}, _kckd544 = {
    displayName: "heure",
    relativeTime: _kckd520
}, _kckd545 = {
    displayName: "minute",
    relativeTime: _kckd524
}, _kckd546 = [ "mouharram", "safar", "rabia al awal", "rabia ath-thani", "joumada al oula", "joumada ath-thania", "rajab", "chaabane", "ramadan", "chawwal", "dhou al qi`da", "dhou al-hijja" ], _kckd547 = {
    decimal: ",",
    group: " ",
    list: ";",
    percentSign: "%",
    plusSign: "+",
    minusSign: "-",
    exponential: "E",
    superscriptingExponent: "×",
    perMille: "‰",
    infinity: "∞",
    nan: "NaN",
    timeSeparator: ":"
}, _kckd548 = {
    displayName: "trim.",
    relative: _kckd91,
    relativeTime: _kckd495
}, _kckd549 = {
    decimal: "٫",
    group: "٬",
    list: "؛",
    percentSign: "٪",
    plusSign: "‏+",
    minusSign: "‏−",
    exponential: "اس",
    superscriptingExponent: "×",
    perMille: "؉",
    infinity: "∞",
    nan: "NaN",
    timeSeparator: ":"
}, _kckd550 = {
    displayName: "seconde",
    relative: [ "maintenant" ],
    relativeTime: _kckd530
}, _kckd551 = {
    symbols: _kckd549
}, _kckd552 = {
    format: _kckd407,
    numeric: _kckd3,
    standAlone: _kckd407
}, _kckd553 = {
    displayName: "année",
    relative: _kckd226,
    relativeTime: _kckd505
}, _kckd554 = {
    displayName: "mois",
    relative: _kckd178,
    relativeTime: _kckd512
}, _kckd555 = {
    displayName: "trim.",
    relative: _kckd168,
    relativeTime: _kckd515
}, _kckd556 = {
    symbols: _kckd549,
    digits: "renderSpelloutCardinal"
}, _kckd557 = {
    abbreviated: _kckd133,
    narrow: _kckd33,
    wide: _kckd354,
    "short": _kckd75
}, _kckd558 = {
    symbols: _kckd549,
    digits: "renderSpelloutCardinalFinancial"
}, _kckd559 = {
    displayName: "jour",
    relative: _kckd436,
    relativeTime: _kckd514
}, _kckd560 = {
    displayName: "semaine",
    relative: _kckd406,
    relativeTime: _kckd528
}, _kckd561 = {
    displayName: "trimestre",
    relative: _kckd435,
    relativeTime: _kckd538
}, _kckd562 = {
    abbreviated: _kckd444,
    narrow: _kckd444,
    wide: _kckd444
}, _kckd563 = {
    format: _kckd562
}, _kckd564 = {
    abbreviated: _kckd491,
    narrow: _kckd127,
    wide: _kckd519
}, _kckd565 = {
    format: _kckd539,
    standAlone: _kckd539
}, _kckd566 = {
    abbreviated: _kckd492,
    narrow: _kckd145,
    wide: _kckd521
}, _kckd567 = {
    abbreviated: _kckd497,
    narrow: _kckd157,
    wide: _kckd522
}, _kckd568 = {
    abbreviated: _kckd496,
    narrow: _kckd156,
    wide: _kckd532
}, _kckd569 = {
    abbreviated: _kckd498,
    narrow: _kckd131,
    wide: _kckd536
}, _kckd570 = {
    abbreviated: _kckd517,
    narrow: _kckd145,
    wide: _kckd517
}, _kckd571 = {
    abbreviated: _kckd508,
    narrow: _kckd155,
    wide: _kckd531
}, _kckd572 = {
    fullDate: "EEEE d MMMM U",
    longDate: "d MMMM U",
    mediumDate: "d MMM U",
    shortDate: "d/M/y",
    fullTime: "HH:mm:ss zzzz",
    longTime: "HH:mm:ss z",
    mediumTime: "HH:mm:ss",
    shortTime: "HH:mm",
    shortDateTime: "d/M/y HH:mm",
    mediumDateTime: "d MMM U HH:mm:ss",
    longDateTime: "d MMMM U HH:mm:ss z",
    fullDateTime: "EEEE d MMMM U HH:mm:ss zzzz"
}, _kckd573 = {
    fullDate: "EEEE d MMMM y G",
    longDate: "d MMMM y G",
    mediumDate: "d MMM y G",
    shortDate: "dd/MM/y GGGGG",
    fullTime: "HH:mm:ss zzzz",
    longTime: "HH:mm:ss z",
    mediumTime: "HH:mm:ss",
    shortTime: "HH:mm",
    shortDateTime: "dd/MM/y GGGGG HH:mm",
    mediumDateTime: "d MMM y G HH:mm:ss",
    longDateTime: "d MMMM y G 'à' HH:mm:ss z",
    fullDateTime: "EEEE d MMMM y G 'à' HH:mm:ss zzzz"
}, _kckd574 = {
    abbreviated: _kckd525,
    narrow: _kckd145,
    wide: _kckd546
}, _kckd575 = {
    abbreviated: _kckd526,
    narrow: _kckd145,
    wide: _kckd546
}, _kckd576 = {
    abbreviated: _kckd518,
    narrow: _kckd518,
    wide: _kckd527
}, _kckd577 = {
    "1000": _kckd5,
    "10000": _kckd11,
    "100000": _kckd17,
    "1000000": _kckd6,
    "10000000": _kckd12,
    "100000000": _kckd18,
    "1000000000": _kckd13,
    "10000000000": _kckd19,
    "100000000000": _kckd27,
    "1000000000000": _kckd14,
    "10000000000000": _kckd20,
    "100000000000000": _kckd28
}, _kckd578 = {
    abbreviated: _kckd518,
    narrow: _kckd518,
    wide: _kckd541
}, _kckd579 = {
    "1000": _kckd21,
    "10000": _kckd29,
    "100000": _kckd44,
    "1000000": _kckd22,
    "10000000": _kckd30,
    "100000000": _kckd45,
    "1000000000": _kckd31,
    "10000000000": _kckd46,
    "100000000000": _kckd57,
    "1000000000000": _kckd32,
    "10000000000000": _kckd47,
    "100000000000000": _kckd58
}, _kckd580 = {
    format: _kckd557,
    standAlone: _kckd557
}, _kckd581 = {
    Gy: "U",
    GyMMM: "MMM U",
    GyMMMd: "d MMM U",
    GyMMMEd: "E d MMM U",
    M: "L",
    Md: "d/M",
    MEd: "E d/M",
    MMM: "LLL",
    MMMd: "d MMM",
    MMMEd: "E d MMM",
    MMMMd: "d MMMM",
    ms: "mm:ss",
    y: "U",
    yMd: "d/M/y",
    yyyy: "U",
    yyyyM: "M/y",
    yyyyMd: "d/M/y",
    yyyyMEd: "E d/M/y",
    yyyyMMM: "MMM U",
    yyyyMMMd: "d MMM U",
    yyyyMMMEd: "E d MMM U",
    yyyyMMMM: "MMMM U",
    yyyyQQQ: "QQQ U",
    yyyyQQQQ: "QQQQ U",
    d: "d",
    E: "ccc",
    Ed: "d, E",
    h: "h a",
    H: "HH",
    hm: "h:mm a",
    Hm: "HH:mm",
    hms: "h:mm:ss a",
    Hms: "HH:mm:ss",
    UM: "U MM",
    UMd: "U MM-d",
    UMMM: "U MMM",
    UMMMd: "U MMM d"
}, _kckd582 = {
    "1000": _kckd55,
    "10000": _kckd56,
    "100000": _kckd66,
    "1000000": _kckd73,
    "10000000": _kckd88,
    "100000000": _kckd93,
    "1000000000": _kckd89,
    "10000000000": _kckd94,
    "100000000000": _kckd110,
    "1000000000000": _kckd74,
    "10000000000000": _kckd90,
    "100000000000000": _kckd96
}, _kckd583 = {
    d: "d",
    E: "ccc",
    Ed: "E d",
    Gy: "y G",
    GyMMM: "MMM y G",
    GyMMMd: "d MMM y G",
    GyMMMEd: "E d MMM y G",
    h: "h a",
    H: "HH",
    hm: "h:mm a",
    Hm: "HH:mm",
    hms: "h:mm:ss a",
    Hms: "HH:mm:ss",
    M: "L",
    Md: "d/M",
    MEd: "E d/M",
    MMM: "LLL",
    MMMd: "d MMM",
    MMMEd: "E d MMM",
    MMMMd: "d MMMM",
    ms: "mm:ss",
    y: "y G",
    yyyy: "y G",
    yyyyM: "M/y GGGGG",
    yyyyMd: "d/M/y GGGGG",
    yyyyMEd: "E d/M/y GGGGG",
    yyyyMMM: "MMM y G",
    yyyyMMMd: "d MMM y G",
    yyyyMMMEd: "E d MMM y G",
    yyyyMMMM: "MMMM y G",
    yyyyQQQ: "QQQ y G",
    yyyyQQQQ: "QQQQ y G",
    Ehm: "E h:mm a",
    EHm: "E HH:mm",
    Ehms: "E h:mm:ss a",
    EHms: "E HH:mm:ss"
}, _kckd584 = {
    d: "d",
    E: "ccc",
    Ed: "E d",
    Gy: "y G",
    GyMMM: "MMM y G",
    GyMMMd: "d MMM y G",
    GyMMMEd: "E d MMM y G",
    M: "L",
    Md: "dd/MM",
    MEd: "E dd/MM",
    MMM: "LLL",
    MMMd: "d MMM",
    MMMEd: "E d MMM",
    MMMMd: "d MMMM",
    y: "y G",
    yyyy: "y G",
    yyyyM: "M/y GGGGG",
    yyyyMd: "d/M/y GGGGG",
    yyyyMEd: "E d/M/y GGGGG",
    yyyyMMM: "MMM y G",
    yyyyMMMd: "d MMM y G",
    yyyyMMMEd: "E d MMM y G",
    yyyyMMMM: "MMMM y G",
    yyyyQQQ: "QQQ y G",
    yyyyQQQQ: "QQQQ y G",
    h: "h a",
    H: "HH",
    hm: "h:mm a",
    Hm: "HH:mm",
    hms: "h:mm:ss a",
    Hms: "HH:mm:ss",
    ms: "mm:ss",
    Ehm: "E h:mm a",
    EHm: "E HH:mm",
    Ehms: "E h:mm:ss a",
    EHms: "E HH:mm:ss"
}, _kckd585 = {
    currencyMatch: /[^\u0024+<->\u005E`\u007C~¢-¦¨©¬®-±´¸×÷˂-˅˒-˟˥-˫˭˯-˿͵΄΅϶҂֏؆-؈؋؎؏۞۩۽۾߶৲৳৺৻૱୰௳-௺౿൹฿༁-༃༓༕-༗༚-༟༴༶༸྾-࿅࿇-࿌࿎࿏࿕-࿘႞႟᎐-᎙៛᥀᧞-᧿᭡-᭪᭴-᭼᾽᾿-῁῍-῏῝-῟῭-`´῾⁄⁒⁺-⁼₊-₌₠-₹℀℁℃-℆℈℉℔№-℘℞-℣℥℧℩℮℺℻⅀-⅄⅊-⅍⅏←-⌨⌫-⏳␀-␦⑀-⑊⒜-ⓩ─-⛿✁-❧➔-⟄⟇-⟥⟰-⦂⦙-⧗⧜-⧻⧾-⭌⭐-⭙⳥-⳪⺀-⺙⺛-⻳⼀-⿕⿰-⿻〄〒〓〠〶〷〾〿゛゜㆐㆑㆖-㆟㇀-㇣㈀-㈞㈪-㉇㉐㉠-㉿㊊-㊰㋀-㋾㌀-㏿䷀-䷿꒐-꓆꜀-꜖꜠꜡꞉꞊꠨-꠫꠶-꠹꩷-꩹﬩﮲-﯁﷼﷽﹢﹤-﹦﹩＄＋＜-＞＾｀｜～￠-￦￨-￮￼�]/,
    surroundingMatch: /[0-9²³¹¼-¾٠-٩۰-۹߀-߉०-९০-৯৴-৹੦-੯૦-૯୦-୯୲-୷௦-௲౦-౯౸-౾೦-೯൦-൵๐-๙໐-໙༠-༳၀-၉႐-႙፩-፼ᛮ-ᛰ០-៩៰-៹᠐-᠙᥆-᥏᧐-᧚᪀-᪉᪐-᪙᭐-᭙᮰-᮹᱀-᱉᱐-᱙⁰⁴-⁹₀-₉⅐-ↂↅ-↉①-⒛⓪-⓿❶-➓⳽〇〡-〩〸-〺㆒-㆕㈠-㈩㉈-㉏㉑-㉟㊀-㊉㊱-㊿꘠-꘩ꛦ-ꛯ꠰-꠵꣐-꣙꤀-꤉꧐-꧙꩐-꩙꯰-꯹０-９]/,
    insertBetween: " "
}, _kckd586 = {
    format: _kckd564,
    standAlone: _kckd564
}, _kckd587 = {
    format: _kckd566,
    standAlone: _kckd566
}, _kckd588 = [ undefined, "jia-zi", "yi-chou", "bing-yin", "ding-mao", "wu-chen", "ji-si", "geng-wu", "xin-wei", "ren-shen", "gui-you", "jia-xu", "yi-hai", "bing-zi", "ding-chou", "wu-yin", "ji-mao", "geng-chen", "xin-si", "ren-wu", "gui-wei", "jia-shen", "yi-you", "bing-xu", "ding-hai", "wu-zi", "ji-chou", "geng-yin", "xin-mao", "ren-chen", "gui-si", "jia-wu", "yi-wei", "bing-shen", "ding-you", "wu-xu", "ji-hai", "geng-zi", "xin-chou", "ren-yin", "gui-mao", "jia-chen", "yi-si", "bing-wu", "ding-wei", "wu-shen", "ji-you", "geng-xu", "xin-hai", "ren-zi", "gui-chou", "jia-yin", "yi-mao", "bing-chen", "ding-si", "wu-wu", "ji-wei", "geng-shen", "xin-you", "ren-xu" ], _kckd589 = {
    format: _kckd574,
    standAlone: _kckd575
}, _kckd590 = {
    format: _kckd578,
    standAlone: _kckd576
}, _kckd591 = {
    basic: _kckd572,
    cldr: _kckd581
}, _kckd592 = {
    basic: _kckd573,
    cldr: _kckd583
}, _kckd593 = {
    basic: _kckd573,
    cldr: _kckd584
}, _kckd594 = {
    "long": _kckd582,
    "short": _kckd577,
    "default": "#,##0.###"
}, _kckd595 = {
    d: {
        d: "d–d"
    },
    h: _kckd15,
    H: {
        H: "HH–HH"
    },
    hm: _kckd154,
    Hm: _kckd61,
    hmv: _kckd175,
    Hmv: _kckd85,
    hv: _kckd40,
    Hv: {
        H: "HH–HH v"
    },
    M: {
        M: "MM–MM"
    },
    Md: _kckd86,
    MEd: _kckd129,
    MMM: {
        M: "LLL–LLL"
    },
    MMMd: _kckd52,
    MMMEd: _kckd130,
    y: {
        y: "U–U"
    },
    yM: _kckd62,
    yMd: _kckd355,
    yMEd: _kckd486,
    yMMM: _kckd63,
    yMMMd: _kckd172,
    yMMMEd: _kckd464,
    yMMMM: _kckd87
}, _kckd596 = {
    d: {
        d: "d – d"
    },
    h: _kckd23,
    H: {
        H: "HH – HH"
    },
    hm: _kckd170,
    Hm: _kckd76,
    hmv: _kckd224,
    Hmv: _kckd97,
    hv: _kckd48,
    Hv: {
        H: "HH – HH v"
    },
    M: {
        M: "M – M"
    },
    Md: _kckd77,
    MEd: _kckd117,
    MMM: {
        M: "MMM–MMM"
    },
    MMMd: _kckd49,
    MMMEd: _kckd118,
    y: {
        y: "y – y G"
    },
    yM: _kckd67,
    yMd: _kckd295,
    yMEd: _kckd484,
    yMMM: _kckd78,
    yMMMd: _kckd225,
    yMMMEd: _kckd449,
    yMMMM: _kckd111
}, _kckd597 = {
    beforeCurrency: _kckd585,
    afterCurrency: _kckd585
}, _kckd598 = {
    "short": _kckd579,
    "default": "#,##0.00 ¤",
    one: "{0} {1}",
    other: "{0} {1}",
    currencySpacing: _kckd597
}, _kckd599 = {
    abbreviated: _kckd588,
    narrow: _kckd588,
    wide: _kckd588
}, _kckd600 = {
    format: _kckd599
}, _kckd601 = {
    scientific: {
        "default": "#E0"
    },
    decimal: _kckd594,
    currency: _kckd598,
    percent: _kckd1
}, _kckd602 = {
    era: {
        displayName: "ère"
    },
    year: _kckd553,
    "year-short": _kckd537,
    "year-narrow": _kckd509,
    quarter: _kckd561,
    "quarter-short": _kckd555,
    "quarter-narrow": _kckd548,
    month: _kckd554,
    "month-short": _kckd540,
    "month-narrow": _kckd516,
    week: _kckd560,
    "week-short": _kckd543,
    "week-narrow": _kckd529,
    day: _kckd559,
    "day-short": _kckd533,
    "day-narrow": _kckd510,
    weekday: _kckd64,
    dayperiod: _kckd4,
    hour: _kckd544,
    "hour-short": _kckd534,
    "hour-narrow": _kckd506,
    minute: _kckd545,
    "minute-short": _kckd542,
    "minute-narrow": _kckd523,
    second: _kckd550,
    "second-short": _kckd535,
    "second-narrow": _kckd511,
    zone: _kckd42,
    sun: _kckd424,
    "sun-short": _kckd191,
    "sun-narrow": _kckd147,
    mon: _kckd296,
    "mon-short": _kckd192,
    "mon-narrow": _kckd148,
    tue: _kckd297,
    "tue-short": _kckd193,
    "tue-narrow": _kckd149,
    wed: _kckd425,
    "wed-short": _kckd194,
    "wed-narrow": _kckd150,
    thu: _kckd298,
    "thu-short": _kckd195,
    "thu-narrow": _kckd151,
    fri: _kckd426,
    "fri-short": _kckd196,
    "fri-narrow": _kckd152,
    sat: _kckd375,
    "sat-short": _kckd197,
    "sat-narrow": _kckd153
}, _kckd603 = {
    dateFormats: {
        basic: {},
        cldr: {}
    },
    fields: _kckd602
}, _kckd604 = {
    dayParts: _kckd563,
    days: _kckd600,
    months: _kckd600,
    years: _kckd600,
    zodiacs: _kckd563
}, _kckd605 = {
    dateFormats: _kckd593,
    datePartsOrder: "dmy",
    dateIntervalFormats: _kckd596,
    dateIntervalFallbackFormat: "{0} – {1}",
    dayNames: _kckd580,
    dayPeriods: _kckd590,
    monthNames: _kckd589,
    eraNames: _kckd53,
    quarterNames: _kckd565,
    fields: _kckd602
}, _kckd606 = {
    dateFormats: _kckd591,
    datePartsOrder: "dmy",
    dateIntervalFormats: _kckd595,
    dateIntervalFallbackFormat: "{0} – {1}",
    dayNames: _kckd580,
    dayPeriods: _kckd590,
    cyclicNames: _kckd604,
    monthNames: _kckd587,
    monthPatterns: _kckd552,
    quarterNames: _kckd565,
    fields: _kckd602
};

inter.id = "fr";

inter.delimiters = {
    quotationStart: "«",
    quotationEnd: "»",
    alternateQuotationStart: "«",
    alternateQuotationEnd: "»"
};

inter.listPatterns = {
    "default": _kckd374,
    unit: _kckd374,
    unitNarrow: {
        "2": "{0} {1}",
        start: "{0} {1}",
        middle: "{0} {1}",
        end: "{0} {1}"
    },
    unitShort: _kckd374
};

inter.unitPatterns = {
    "long": {
        unit: {
            accelerationGForce: {
                one: "{0} fois la gravitation terrestre",
                other: "{0} fois la gravitation terrestre"
            },
            accelerationMeterPerSecondSquared: {
                one: "{0} mètre par seconde carrée",
                other: "{0} mètres par seconde carrée"
            },
            angleRevolution: {
                one: "{0} tour",
                other: "{0} tours"
            },
            angleRadian: {
                one: "{0} radian",
                other: "{0} radians"
            },
            angleDegree: _kckd70,
            angleArcMinute: {
                one: "{0} minute d’arc",
                other: "{0} minutes d’arc"
            },
            angleArcSecond: {
                one: "{0} seconde d’arc",
                other: "{0} secondes d’arc"
            },
            areaSquareKilometer: {
                one: "{0} kilomètre carré",
                other: "{0} kilomètres carrés"
            },
            areaHectare: {
                one: "{0} hectare",
                other: "{0} hectares"
            },
            areaSquareMeter: {
                one: "{0} mètre carré",
                other: "{0} mètres carrés"
            },
            areaSquareCentimeter: {
                one: "{0} centimètre carré",
                other: "{0} centimètres carrés"
            },
            areaSquareMile: {
                one: "{0} mile carré",
                other: "{0} miles carrés"
            },
            areaAcre: {
                one: "{0} acre anglo-saxonne",
                other: "{0} acres anglo-saxonnes"
            },
            areaSquareYard: {
                one: "{0} yard carré",
                other: "{0} yards carrés"
            },
            areaSquareFoot: {
                one: "{0} pied carré",
                other: "{0} pieds carrés"
            },
            areaSquareInch: {
                one: "{0} pouce carré",
                other: "{0} pouces carrés"
            },
            concentrKarat: _kckd71,
            consumptionLiterPerKilometer: {
                one: "{0} litre au kilomètre",
                other: "{0} litres au kilomètre"
            },
            "consumptionLiterPer-100kilometers": {
                one: "{0} litre aux 100 km",
                other: "{0} litres aux 100 km"
            },
            consumptionMilePerGallon: {
                one: "{0} mile par gallon",
                other: "{0} miles par gallon"
            },
            digitalTerabyte: {
                one: "{0} téraoctet",
                other: "{0} téraoctets"
            },
            digitalTerabit: {
                one: "{0} térabit",
                other: "{0} térabits"
            },
            digitalGigabyte: {
                one: "{0} gigaoctet",
                other: "{0} gigaoctets"
            },
            digitalGigabit: {
                one: "{0} gigabit",
                other: "{0} gigabits"
            },
            digitalMegabyte: {
                one: "{0} mégaoctet",
                other: "{0} mégaoctets"
            },
            digitalMegabit: {
                one: "{0} mégabit",
                other: "{0} mégabits"
            },
            digitalKilobyte: {
                one: "{0} kilooctet",
                other: "{0} kilooctets"
            },
            digitalKilobit: {
                one: "{0} kilobit",
                other: "{0} kilobits"
            },
            digitalByte: {
                one: "{0} octet",
                other: "{0} octets"
            },
            digitalBit: {
                one: "{0} bit",
                other: "{0} bits"
            },
            durationCentury: {
                one: "{0} siècle",
                other: "{0} siècles"
            },
            durationYear: _kckd41,
            durationMonth: {
                one: "{0} mois",
                other: "{0} mois"
            },
            durationWeek: {
                one: "{0} semaine",
                other: "{0} semaines"
            },
            durationDay: {
                one: "{0} jour",
                other: "{0} jours"
            },
            durationHour: {
                one: "{0} heure",
                other: "{0} heures"
            },
            durationMinute: {
                one: "{0} minute",
                other: "{0} minutes"
            },
            durationSecond: {
                one: "{0} seconde",
                other: "{0} secondes"
            },
            durationMillisecond: {
                one: "{0} milliseconde",
                other: "{0} millisecondes"
            },
            durationMicrosecond: {
                one: "{0} microseconde",
                other: "{0} microsecondes"
            },
            durationNanosecond: {
                one: "{0} nanoseconde",
                other: "{0} nanosecondes"
            },
            electricAmpere: {
                one: "{0} ampère",
                other: "{0} ampères"
            },
            electricMilliampere: {
                one: "{0} milliampère",
                other: "{0} milliampères"
            },
            electricOhm: {
                one: "{0} ohm",
                other: "{0} ohms"
            },
            electricVolt: {
                one: "{0} volt",
                other: "{0} volts"
            },
            energyKilocalorie: _kckd124,
            energyCalorie: {
                one: "{0} calorie",
                other: "{0} calories"
            },
            energyFoodcalorie: _kckd124,
            energyKilojoule: {
                one: "{0} kilojoule",
                other: "{0} kilojoules"
            },
            energyJoule: {
                one: "{0} joule",
                other: "{0} joules"
            },
            energyKilowattHour: {
                one: "{0} kilowattheure",
                other: "{0} kilowattheures"
            },
            frequencyGigahertz: {
                one: "{0} gigahertz",
                other: "{0} gigahertz"
            },
            frequencyMegahertz: {
                one: "{0} mégahertz",
                other: "{0} mégahertz"
            },
            frequencyKilohertz: {
                one: "{0} kilohertz",
                other: "{0} kilohertz"
            },
            frequencyHertz: {
                one: "{0} hertz",
                other: "{0} hertz"
            },
            lengthKilometer: {
                one: "{0} kilomètre",
                other: "{0} kilomètres"
            },
            lengthMeter: {
                one: "{0} mètre",
                other: "{0} mètres"
            },
            lengthDecimeter: {
                one: "{0} décimètre",
                other: "{0} décimètres"
            },
            lengthCentimeter: {
                one: "{0} centimètre",
                other: "{0} centimètres"
            },
            lengthMillimeter: {
                one: "{0} millimètre",
                other: "{0} millimètres"
            },
            lengthMicrometer: {
                one: "{0} micromètre",
                other: "{0} micromètres"
            },
            lengthNanometer: {
                one: "{0} nanomètre",
                other: "{0} nanomètres"
            },
            lengthPicometer: {
                one: "{0} picomètre",
                other: "{0} picomètres"
            },
            lengthMile: {
                one: "{0} mille anglais",
                other: "{0} milles anglais"
            },
            lengthYard: {
                one: "{0} yard",
                other: "{0} yards"
            },
            lengthFoot: {
                one: "{0} pied",
                other: "{0} pieds"
            },
            lengthInch: {
                one: "{0} pouce",
                other: "{0} pouces"
            },
            lengthParsec: {
                one: "{0} parsec",
                other: "{0} parsecs"
            },
            lengthLightYear: {
                one: "{0} année-lumière",
                other: "{0} années-lumière"
            },
            lengthAstronomicalUnit: {
                one: "{0} unité astronomique",
                other: "{0} unités astronomiques"
            },
            lengthFurlong: {
                one: "{0} sillon",
                other: "{0} sillons"
            },
            lengthFathom: {
                one: "{0} brasse",
                other: "{0} brasses"
            },
            lengthNauticalMile: {
                one: "{0} mille marin",
                other: "{0} milles marins"
            },
            lengthMileScandinavian: {
                one: "{0} mille scandinave",
                other: "{0} milles scandinaves"
            },
            lightLux: {
                one: "{0} lux",
                other: "{0} lux"
            },
            massMetricTon: {
                one: "{0} tonne",
                other: "{0} tonnes"
            },
            massKilogram: {
                one: "{0} kilogramme",
                other: "{0} kilogrammes"
            },
            massGram: {
                one: "{0} gramme",
                other: "{0} grammes"
            },
            massMilligram: {
                one: "{0} milligramme",
                other: "{0} milligrammes"
            },
            massMicrogram: {
                one: "{0} microgramme",
                other: "{0} microgrammes"
            },
            massTon: {
                one: "{0} tonne courte",
                other: "{0} tonnes courtes"
            },
            massStone: {
                one: "{0} stone",
                other: "{0} stone"
            },
            massPound: {
                one: "{0} livre",
                other: "{0} livres"
            },
            massOunce: {
                one: "{0} once",
                other: "{0} onces"
            },
            massOunceTroy: {
                one: "{0} once troy",
                other: "{0} onces troy"
            },
            massCarat: _kckd71,
            powerGigawatt: {
                one: "{0} gigawatt",
                other: "{0} gigawatts"
            },
            powerMegawatt: {
                one: "{0} mégawatt",
                other: "{0} mégawatts"
            },
            powerKilowatt: {
                one: "{0} kilowatt",
                other: "{0} kilowatts"
            },
            powerWatt: {
                one: "{0} watt",
                other: "{0} watts"
            },
            powerMilliwatt: {
                one: "{0} milliwatt",
                other: "{0} milliwatts"
            },
            powerHorsepower: {
                one: "{0} cheval-vapeur",
                other: "{0} chevaux-vapeur"
            },
            pressureHectopascal: {
                one: "{0} hectopascal",
                other: "{0} hectopascals"
            },
            pressureMillimeterOfMercury: {
                one: "{0} millimètre de mercure",
                other: "{0} millimètres de mercure"
            },
            pressurePoundPerSquareInch: {
                one: "{0} livre par pouce carré",
                other: "{0} livres par pouce carré"
            },
            pressureInchHg: {
                one: "{0} pouce de mercure",
                other: "{0} pouces de mercure"
            },
            pressureMillibar: {
                one: "{0} millibar",
                other: "{0} millibars"
            },
            speedKilometerPerHour: {
                one: "{0} kilomètre par heure",
                other: "{0} kilomètres par heure"
            },
            speedMeterPerSecond: {
                one: "{0} mètre par seconde",
                other: "{0} mètres par seconde"
            },
            speedMilePerHour: {
                one: "{0} mille anglais par heure",
                other: "{0} milles anglais par heure"
            },
            speedKnot: {
                one: "{0} nœud",
                other: "{0} nœuds"
            },
            temperatureGeneric: _kckd70,
            temperatureCelsius: {
                one: "{0} degré Celsius",
                other: "{0} degrés Celsius"
            },
            temperatureFahrenheit: {
                one: "{0} degré Fahrenheit",
                other: "{0} degrés Fahrenheit"
            },
            temperatureKelvin: {
                one: "{0} kelvin",
                other: "{0} kelvins"
            },
            volumeCubicKilometer: {
                one: "{0} kilomètre cube",
                other: "{0} kilomètres cubes"
            },
            volumeCubicMeter: {
                one: "{0} mètre cube",
                other: "{0} mètres cubes"
            },
            volumeCubicCentimeter: {
                one: "{0} centimètre cube",
                other: "{0} centimètres cubes"
            },
            volumeCubicMile: {
                one: "{0} mille anglais cube",
                other: "{0} milles anglais cubes"
            },
            volumeCubicYard: {
                one: "{0} yard cube",
                other: "{0} yards cubes"
            },
            volumeCubicFoot: {
                one: "{0} pied cube",
                other: "{0} pieds cubes"
            },
            volumeCubicInch: {
                one: "{0} pouce cube",
                other: "{0} pouces cubes"
            },
            volumeMegaliter: {
                one: "{0} mégalitre",
                other: "{0} mégalitres"
            },
            volumeHectoliter: {
                one: "{0} hectolitre",
                other: "{0} hectolitres"
            },
            volumeLiter: {
                one: "{0} litre",
                other: "{0} litres"
            },
            volumeDeciliter: {
                one: "{0} décilitre",
                other: "{0} décilitres"
            },
            volumeCentiliter: {
                one: "{0} centilitre",
                other: "{0} centilitres"
            },
            volumeMilliliter: {
                one: "{0} millilitre",
                other: "{0} millilitres"
            },
            volumePintMetric: {
                one: "{0} pinte métrique",
                other: "{0} pintes métriques"
            },
            volumeCupMetric: {
                one: "{0} tasse métrique",
                other: "{0} tasses métriques"
            },
            volumeAcreFoot: {
                one: "{0} acre-pied",
                other: "{0} acres-pieds"
            },
            volumeBushel: {
                one: "{0} boisseau",
                other: "{0} boisseaux"
            },
            volumeGallon: {
                one: "{0} gallon",
                other: "{0} gallons"
            },
            volumeQuart: {
                one: "{0} quart",
                other: "{0} quarts"
            },
            volumePint: {
                one: "{0} pinte",
                other: "{0} pintes"
            },
            volumeCup: _kckd72,
            volumeFluidOunce: {
                one: "{0} once liquide",
                other: "{0} onces liquides"
            },
            volumeTablespoon: {
                one: "{0} cuillère à soupe",
                other: "{0} cuillères à soupe"
            },
            volumeTeaspoon: {
                one: "{0} cuillère à café",
                other: "{0} cuillères à café"
            }
        },
        compoundUnit: {
            per: "{0} par {1}"
        }
    },
    "short": {
        unit: {
            accelerationGForce: {
                one: "{0} G",
                other: "{0} G"
            },
            accelerationMeterPerSecondSquared: {
                one: "{0} m/s²",
                other: "{0} m/s²"
            },
            angleRevolution: {
                one: "{0} tr",
                other: "{0} tr"
            },
            angleRadian: _kckd43,
            angleDegree: _kckd7,
            angleArcMinute: _kckd8,
            angleArcSecond: _kckd9,
            areaSquareKilometer: {
                one: "{0} km²",
                other: "{0} km²"
            },
            areaHectare: {
                one: "{0} ha",
                other: "{0} ha"
            },
            areaSquareMeter: {
                one: "{0} m²",
                other: "{0} m²"
            },
            areaSquareCentimeter: {
                one: "{0} cm²",
                other: "{0} cm²"
            },
            areaSquareMile: {
                one: "{0} mi²",
                other: "{0} mi²"
            },
            areaAcre: {
                one: "{0} ac",
                other: "{0} ac"
            },
            areaSquareYard: {
                one: "{0} yd²",
                other: "{0} yd²"
            },
            areaSquareFoot: {
                one: "{0} pi²",
                other: "{0} pi²"
            },
            areaSquareInch: {
                one: "{0} po²",
                other: "{0} po²"
            },
            concentrKarat: _kckd26,
            consumptionLiterPerKilometer: {
                one: "{0} l/km",
                other: "{0} l/km"
            },
            "consumptionLiterPer-100kilometers": {
                one: "{0} l/100 km",
                other: "{0} l/100 km"
            },
            consumptionMilePerGallon: {
                one: "{0} mi/gal",
                other: "{0} mi/gal"
            },
            digitalTerabyte: {
                one: "{0} To",
                other: "{0} To"
            },
            digitalTerabit: {
                one: "{0} Tb",
                other: "{0} Tb"
            },
            digitalGigabyte: {
                one: "{0} Go",
                other: "{0} Go"
            },
            digitalGigabit: {
                one: "{0} Gb",
                other: "{0} Gb"
            },
            digitalMegabyte: {
                one: "{0} Mo",
                other: "{0} Mo"
            },
            digitalMegabit: {
                one: "{0} Mb",
                other: "{0} Mb"
            },
            digitalKilobyte: {
                one: "{0} ko",
                other: "{0} ko"
            },
            digitalKilobit: {
                one: "{0} kb",
                other: "{0} kb"
            },
            digitalByte: {
                one: "{0} octet",
                other: "{0} octet"
            },
            digitalBit: {
                one: "{0} bit",
                other: "{0} bit"
            },
            durationCentury: {
                one: "{0} si",
                other: "{0} si"
            },
            durationYear: _kckd41,
            durationMonth: _kckd16,
            durationWeek: {
                one: "{0} sem.",
                other: "{0} sem."
            },
            durationDay: {
                one: "{0} j",
                other: "{0} j"
            },
            durationHour: {
                one: "{0} h",
                other: "{0} h"
            },
            durationMinute: {
                one: "{0} min",
                other: "{0} min"
            },
            durationSecond: {
                one: "{0} s",
                other: "{0} s"
            },
            durationMillisecond: {
                one: "{0} ms",
                other: "{0} ms"
            },
            durationMicrosecond: {
                one: "{0} μs",
                other: "{0} μs"
            },
            durationNanosecond: {
                one: "{0} ns",
                other: "{0} ns"
            },
            electricAmpere: {
                one: "{0} A",
                other: "{0} A"
            },
            electricMilliampere: {
                one: "{0} mA",
                other: "{0} mA"
            },
            electricOhm: {
                one: "{0} Ω",
                other: "{0} Ω"
            },
            electricVolt: {
                one: "{0} V",
                other: "{0} V"
            },
            energyKilocalorie: _kckd54,
            energyCalorie: {
                one: "{0} cal",
                other: "{0} cal"
            },
            energyFoodcalorie: _kckd54,
            energyKilojoule: {
                one: "{0} kJ",
                other: "{0} kJ"
            },
            energyJoule: {
                one: "{0} J",
                other: "{0} J"
            },
            energyKilowattHour: {
                one: "{0} kWh",
                other: "{0} kWh"
            },
            frequencyGigahertz: {
                one: "{0} GHz",
                other: "{0} GHz"
            },
            frequencyMegahertz: {
                one: "{0} MHz",
                other: "{0} MHz"
            },
            frequencyKilohertz: {
                one: "{0} kHz",
                other: "{0} kHz"
            },
            frequencyHertz: {
                one: "{0} Hz",
                other: "{0} Hz"
            },
            lengthKilometer: {
                one: "{0} km",
                other: "{0} km"
            },
            lengthMeter: _kckd16,
            lengthDecimeter: {
                one: "{0} dm",
                other: "{0} dm"
            },
            lengthCentimeter: {
                one: "{0} cm",
                other: "{0} cm"
            },
            lengthMillimeter: {
                one: "{0} mm",
                other: "{0} mm"
            },
            lengthMicrometer: {
                one: "{0} µm",
                other: "{0} µm"
            },
            lengthNanometer: {
                one: "{0} nm",
                other: "{0} nm"
            },
            lengthPicometer: {
                one: "{0} pm",
                other: "{0} pm"
            },
            lengthMile: {
                one: "{0} mi",
                other: "{0} mi"
            },
            lengthYard: {
                one: "{0} yd",
                other: "{0} yd"
            },
            lengthFoot: {
                one: "{0} pi",
                other: "{0} pi"
            },
            lengthInch: {
                one: "{0} po",
                other: "{0} po"
            },
            lengthParsec: {
                one: "{0} pc",
                other: "{0} pc"
            },
            lengthLightYear: {
                one: "{0} al",
                other: "{0} al"
            },
            lengthAstronomicalUnit: {
                one: "{0} ua",
                other: "{0} ua"
            },
            lengthFurlong: {
                one: "{0} sil",
                other: "{0} sil"
            },
            lengthFathom: {
                one: "{0} fat",
                other: "{0} fat"
            },
            lengthNauticalMile: {
                one: "{0} nmi",
                other: "{0} nmi"
            },
            lengthMileScandinavian: {
                one: "{0} smi",
                other: "{0} smi"
            },
            lightLux: {
                one: "{0} lx",
                other: "{0} lx"
            },
            massMetricTon: {
                one: "{0} t",
                other: "{0} t"
            },
            massKilogram: {
                one: "{0} kg",
                other: "{0} kg"
            },
            massGram: {
                one: "{0} g",
                other: "{0} g"
            },
            massMilligram: {
                one: "{0} mg",
                other: "{0} mg"
            },
            massMicrogram: {
                one: "{0} µg",
                other: "{0} µg"
            },
            massTon: _kckd65,
            massStone: {
                one: "{0} st",
                other: "{0} st"
            },
            massPound: {
                one: "{0} lb",
                other: "{0} lb"
            },
            massOunce: {
                one: "{0} oz",
                other: "{0} oz"
            },
            massOunceTroy: {
                one: "{0} oz t",
                other: "{0} oz t"
            },
            massCarat: _kckd26,
            powerGigawatt: {
                one: "{0} GW",
                other: "{0} GW"
            },
            powerMegawatt: {
                one: "{0} MW",
                other: "{0} MW"
            },
            powerKilowatt: {
                one: "{0} kW",
                other: "{0} kW"
            },
            powerWatt: {
                one: "{0} W",
                other: "{0} W"
            },
            powerMilliwatt: {
                one: "{0} mW",
                other: "{0} mW"
            },
            powerHorsepower: {
                one: "{0} ch",
                other: "{0} ch"
            },
            pressureHectopascal: {
                one: "{0} hPa",
                other: "{0} hPa"
            },
            pressureMillimeterOfMercury: {
                one: "{0} mm Hg",
                other: "{0} mm Hg"
            },
            pressurePoundPerSquareInch: {
                one: "{0} lb/po²",
                other: "{0} lb/po²"
            },
            pressureInchHg: {
                one: "{0} inHg",
                other: "{0} inHg"
            },
            pressureMillibar: {
                one: "{0} mbar",
                other: "{0} mbar"
            },
            speedKilometerPerHour: {
                one: "{0} km/h",
                other: "{0} km/h"
            },
            speedMeterPerSecond: {
                one: "{0} m/s",
                other: "{0} m/s"
            },
            speedMilePerHour: {
                one: "{0} mi/h",
                other: "{0} mi/h"
            },
            speedKnot: {
                one: "{0} nd",
                other: "{0} nd"
            },
            temperatureGeneric: _kckd7,
            temperatureCelsius: {
                one: "{0} °C",
                other: "{0} °C"
            },
            temperatureFahrenheit: {
                one: "{0} °F",
                other: "{0} °F"
            },
            temperatureKelvin: {
                one: "{0} K",
                other: "{0} K"
            },
            volumeCubicKilometer: {
                one: "{0} km³",
                other: "{0} km³"
            },
            volumeCubicMeter: {
                one: "{0} m³",
                other: "{0} m³"
            },
            volumeCubicCentimeter: {
                one: "{0} cm³",
                other: "{0} cm³"
            },
            volumeCubicMile: {
                one: "{0} mi³",
                other: "{0} mi³"
            },
            volumeCubicYard: {
                one: "{0} yd³",
                other: "{0} yd³"
            },
            volumeCubicFoot: {
                one: "{0} pi³",
                other: "{0} pi³"
            },
            volumeCubicInch: {
                one: "{0} po³",
                other: "{0} po³"
            },
            volumeMegaliter: {
                one: "{0} Ml",
                other: "{0} Ml"
            },
            volumeHectoliter: {
                one: "{0} hl",
                other: "{0} hl"
            },
            volumeLiter: {
                one: "{0} l",
                other: "{0} l"
            },
            volumeDeciliter: {
                one: "{0} dl",
                other: "{0} dl"
            },
            volumeCentiliter: {
                one: "{0} cl",
                other: "{0} cl"
            },
            volumeMilliliter: {
                one: "{0} ml",
                other: "{0} ml"
            },
            volumePintMetric: {
                one: "{0} mpt",
                other: "{0} mpt"
            },
            volumeCupMetric: {
                one: "{0} tm",
                other: "{0} tm"
            },
            volumeAcreFoot: {
                one: "{0} ac pi",
                other: "{0} ac pi"
            },
            volumeBushel: {
                one: "{0} bu",
                other: "{0} bu"
            },
            volumeGallon: {
                one: "{0} gal",
                other: "{0} gal"
            },
            volumeQuart: {
                one: "{0} qt",
                other: "{0} qt"
            },
            volumePint: {
                one: "{0} pte",
                other: "{0} pte"
            },
            volumeCup: _kckd72,
            volumeFluidOunce: {
                one: "{0} fl oz",
                other: "{0} fl oz"
            },
            volumeTablespoon: {
                one: "{0} c. à s.",
                other: "{0} c. à s."
            },
            volumeTeaspoon: {
                one: "{0} c. à c.",
                other: "{0} c. à c."
            },
            concentrMilligramPerDeciliter: {
                other: "{0} mg/dL"
            },
            concentrMillimolePerLiter: {
                other: "{0} mmol/L"
            },
            concentrPartPerMillion: {
                other: "{0} ppm"
            },
            consumptionMilePerGallonImperial: {
                other: "{0} mpg Imp."
            },
            volumeGallonImperial: {
                other: "{0} gal Imp."
            }
        },
        compoundUnit: {
            per: "{0}/{1}"
        }
    },
    narrow: {
        unit: {
            accelerationGForce: {
                one: "{0}G",
                other: "{0}G"
            },
            accelerationMeterPerSecondSquared: {
                one: "{0}m/s²",
                other: "{0}m/s²"
            },
            angleRevolution: {
                one: "{0}tr",
                other: "{0}tr"
            },
            angleRadian: _kckd43,
            angleDegree: _kckd7,
            angleArcMinute: _kckd8,
            angleArcSecond: _kckd9,
            areaSquareKilometer: {
                one: "{0}km²",
                other: "{0}km²"
            },
            areaHectare: {
                one: "{0}ha",
                other: "{0}ha"
            },
            areaSquareMeter: {
                one: "{0}m²",
                other: "{0}m²"
            },
            areaSquareMile: {
                one: "{0}mi²",
                other: "{0}mi²"
            },
            areaAcre: {
                one: "{0}ac",
                other: "{0}ac"
            },
            areaSquareFoot: {
                one: "{0}pi²",
                other: "{0}pi²"
            },
            "consumptionLiterPer-100kilometers": {
                one: "{0}l/100km",
                other: "{0}l/100km"
            },
            digitalTerabyte: {
                one: "{0}To",
                other: "{0}To"
            },
            digitalTerabit: {
                one: "{0}Tb",
                other: "{0}Tb"
            },
            digitalGigabyte: {
                one: "{0}Go",
                other: "{0}Go"
            },
            digitalGigabit: {
                one: "{0}Gb",
                other: "{0}Gb"
            },
            digitalMegabyte: {
                one: "{0}Mo",
                other: "{0}Mo"
            },
            digitalMegabit: {
                one: "{0}Mb",
                other: "{0}Mb"
            },
            digitalKilobyte: {
                one: "{0}ko",
                other: "{0}ko"
            },
            digitalKilobit: {
                one: "{0}kb",
                other: "{0}kb"
            },
            digitalByte: {
                one: "{0}octet",
                other: "{0}octet"
            },
            digitalBit: {
                one: "{0}bit",
                other: "{0}bit"
            },
            durationCentury: {
                one: "{0}si",
                other: "{0}si"
            },
            durationYear: {
                one: "{0}a",
                other: "{0}a"
            },
            durationMonth: _kckd10,
            durationWeek: {
                one: "{0}sem",
                other: "{0}sem"
            },
            durationDay: {
                one: "{0}j",
                other: "{0}j"
            },
            durationHour: {
                one: "{0}h",
                other: "{0}h"
            },
            durationMinute: _kckd10,
            durationSecond: {
                one: "{0}s",
                other: "{0}s"
            },
            durationMillisecond: {
                one: "{0}ms",
                other: "{0}ms"
            },
            durationMicrosecond: {
                one: "{0}µs",
                other: "{0}µs"
            },
            durationNanosecond: {
                one: "{0}ns",
                other: "{0}ns"
            },
            lengthKilometer: {
                one: "{0}km",
                other: "{0}km"
            },
            lengthMeter: _kckd10,
            lengthDecimeter: {
                one: "{0}dm",
                other: "{0}dm"
            },
            lengthCentimeter: {
                one: "{0}cm",
                other: "{0}cm"
            },
            lengthMillimeter: {
                one: "{0}mm",
                other: "{0}mm"
            },
            lengthMicrometer: {
                one: "{0}µm",
                other: "{0}µm"
            },
            lengthNanometer: {
                one: "{0}nm",
                other: "{0}nm"
            },
            lengthPicometer: {
                one: "{0}pm",
                other: "{0}pm"
            },
            lengthMile: {
                one: "{0}mi",
                other: "{0}mi"
            },
            lengthYard: {
                one: "{0}yd",
                other: "{0}yd"
            },
            lengthFoot: _kckd8,
            lengthInch: _kckd9,
            lengthParsec: {
                one: "{0}pc",
                other: "{0}pc"
            },
            lengthLightYear: {
                one: "{0}a.l.",
                other: "{0}a.l."
            },
            lengthAstronomicalUnit: {
                one: "{0}ua",
                other: "{0}ua"
            },
            lengthFurlong: {
                one: "{0}sil",
                other: "{0}sil"
            },
            lengthFathom: {
                one: "{0}fat",
                other: "{0}fat"
            },
            lengthNauticalMile: {
                one: "{0}nmi",
                other: "{0}nmi"
            },
            lengthMileScandinavian: {
                one: "{0}smi",
                other: "{0}smi"
            },
            massMetricTon: {
                one: "{0}t",
                other: "{0}t"
            },
            massKilogram: {
                one: "{0}kg",
                other: "{0}kg"
            },
            massGram: {
                one: "{0}g",
                other: "{0}g"
            },
            massMilligram: {
                one: "{0}mg",
                other: "{0}mg"
            },
            massMicrogram: {
                one: "{0}µg",
                other: "{0}µg"
            },
            massTon: _kckd65,
            massStone: {
                one: "{0}st",
                other: "{0}st"
            },
            massPound: {
                one: "{0}lb",
                other: "{0}lb"
            },
            massOunce: {
                one: "{0}oz",
                other: "{0}oz"
            },
            massOunceTroy: {
                one: "{0}oz t",
                other: "{0}oz t"
            },
            massCarat: {
                one: "{0}ct",
                other: "{0}ct"
            },
            powerKilowatt: {
                one: "{0}kW",
                other: "{0}kW"
            },
            powerWatt: {
                one: "{0}W",
                other: "{0}W"
            },
            powerHorsepower: {
                one: "{0}ch",
                other: "{0}ch"
            },
            pressureHectopascal: {
                one: "{0}hPa",
                other: "{0}hPa"
            },
            pressureMillimeterOfMercury: {
                one: "{0}mmHg",
                other: "{0}mmHg"
            },
            pressurePoundPerSquareInch: {
                one: "{0}lb/po²",
                other: "{0}lb/po²"
            },
            pressureInchHg: {
                one: "{0}inHg",
                other: "{0}inHg"
            },
            pressureMillibar: {
                one: "{0}mbar",
                other: "{0}mbar"
            },
            speedKilometerPerHour: {
                one: "{0}km/h",
                other: "{0}km/h"
            },
            speedMeterPerSecond: {
                one: "{0}m/s",
                other: "{0}m/s"
            },
            speedMilePerHour: {
                one: "{0}mi/h",
                other: "{0}mi/h"
            },
            speedKnot: {
                one: "{0}nd",
                other: "{0}nd"
            },
            temperatureGeneric: _kckd7,
            temperatureCelsius: {
                one: "{0}°C",
                other: "{0}°C"
            },
            temperatureFahrenheit: {
                one: "{0}°F",
                other: "{0}°F"
            },
            temperatureKelvin: {
                one: "{0}K",
                other: "{0}K"
            },
            volumeCubicKilometer: {
                one: "{0}km³",
                other: "{0}km³"
            },
            volumeCubicMeter: {
                one: "{0}m³",
                other: "{0}m³"
            },
            volumeCubicCentimeter: {
                one: "{0}cm³",
                other: "{0}cm³"
            },
            volumeCubicMile: {
                one: "{0}mi³",
                other: "{0}mi³"
            },
            volumeCubicYard: {
                one: "{0}yd³",
                other: "{0}yd³"
            },
            volumeCubicFoot: {
                one: "{0}pi³",
                other: "{0}pi³"
            },
            volumeCubicInch: {
                one: "{0}po³",
                other: "{0}po³"
            },
            volumeMegaliter: {
                one: "{0}Ml",
                other: "{0}Ml"
            },
            volumeHectoliter: {
                one: "{0}hl",
                other: "{0}hl"
            },
            volumeLiter: {
                one: "{0}l",
                other: "{0}l"
            },
            volumeDeciliter: {
                one: "{0}dl",
                other: "{0}dl"
            },
            volumeCentiliter: {
                one: "{0}cl",
                other: "{0}cl"
            },
            volumeMilliliter: {
                one: "{0}ml",
                other: "{0}ml"
            },
            volumePintMetric: {
                one: "{0}mpt",
                other: "{0}mpt"
            },
            volumeCupMetric: {
                one: "{0}tm",
                other: "{0}tm"
            },
            volumeAcreFoot: {
                one: "{0}ac pi",
                other: "{0}ac pi"
            },
            volumeBushel: {
                one: "{0}bu",
                other: "{0}bu"
            },
            volumeGallon: {
                one: "{0}gal",
                other: "{0}gal"
            },
            volumeQuart: {
                one: "{0}qt",
                other: "{0}qt"
            },
            volumePint: {
                one: "{0}pte",
                other: "{0}pte"
            },
            volumeCup: {
                one: "{0}ta",
                other: "{0}ta"
            },
            volumeFluidOunce: {
                one: "{0}fl oz",
                other: "{0}fl oz"
            },
            volumeTablespoon: {
                one: "{0}CàS",
                other: "{0}CàS"
            },
            volumeTeaspoon: {
                one: "{0}CàC",
                other: "{0}CàC"
            }
        },
        compoundUnit: {
            per: "{0}/{1}"
        }
    }
};

inter.timeZoneFormats = {
    hour: [ "+HH:mm", "−HH:mm" ],
    gmt: "UTC{0}",
    gmtZero: "UTC",
    region: "heure : {0}",
    fallback: "{1} ({0})",
    regions: {
        daylight: "{0} (heure d’été)",
        standard: "{0} (heure standard)"
    }
};

inter.characters = {
    exemplar: {
        "default": [ "a", "à", "â", "æ", "b", "c", "ç", "d", "e", "é", "è", "ê", "ë", "f", "g", "h", "i", "î", "ï", "j", "k", "l", "m", "n", "o", "ô", "œ", "p", "q", "r", "s", "t", "u", "ù", "û", "ü", "v", "w", "x", "y", "ÿ", "z" ],
        auxiliary: [ "á", "å", "ä", "ã", "ā", "ē", "í", "ì", "ī", "ñ", "ó", "ò", "ö", "ø", "ú", "ǔ" ],
        index: [ "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z" ],
        punctuation: [ "\\-", "‐", "–", "—", ",", ";", "\\:", "!", "?", ".", "…", "’", '"', "“", "”", "«", "»", "(", ")", "\\[", "\\]", "§", "@", "*", "/", "\\&", "#", "†", "‡" ]
    },
    ellipsis: {
        "final": "{0}…",
        initial: "… {0}",
        medial: "{0}… {1}",
        "word-final": "{0}…",
        "word-initial": "… {0}",
        "word-medial": "{0}… {1}"
    },
    moreInformation: "?"
};

inter.numbers = {
    ahom: {
        symbols: _kckd549,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    arab: {
        symbols: _kckd549,
        formats: _kckd601,
        digits: [ "٠", "١", "٢", "٣", "٤", "٥", "٦", "٧", "٨", "٩" ]
    },
    arabext: {
        symbols: {
            decimal: "٫",
            group: "٬",
            list: "؛",
            percentSign: "٪",
            plusSign: "‎+",
            minusSign: "‎−",
            exponential: "×۱۰^",
            superscriptingExponent: "×",
            perMille: "؉",
            infinity: "∞",
            nan: "NaN",
            timeSeparator: "٫"
        },
        formats: _kckd601,
        digits: [ "۰", "۱", "۲", "۳", "۴", "۵", "۶", "۷", "۸", "۹" ]
    },
    armn: {
        symbols: _kckd549,
        digits: "renderArmenianUpper"
    },
    armnlow: {
        symbols: _kckd549,
        digits: "renderArmenianLower"
    },
    bali: {
        symbols: _kckd547,
        formats: _kckd601,
        digits: [ "᭐", "᭑", "᭒", "᭓", "᭔", "᭕", "᭖", "᭗", "᭘", "᭙" ]
    },
    beng: {
        symbols: _kckd547,
        formats: _kckd601,
        digits: [ "০", "১", "২", "৩", "৪", "৫", "৬", "৭", "৮", "৯" ]
    },
    brah: {
        symbols: _kckd547,
        formats: _kckd601,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    cakm: {
        symbols: _kckd547,
        formats: _kckd601,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    cham: {
        symbols: _kckd547,
        formats: _kckd601,
        digits: [ "꩐", "꩑", "꩒", "꩓", "꩔", "꩕", "꩖", "꩗", "꩘", "꩙" ]
    },
    cyrl: {
        symbols: _kckd549,
        digits: "renderCyrillicLower"
    },
    deva: {
        symbols: _kckd547,
        formats: _kckd601,
        digits: [ "०", "१", "२", "३", "४", "५", "६", "७", "८", "९" ]
    },
    ethi: {
        symbols: _kckd549,
        digits: "renderEthiopic"
    },
    finance: _kckd551,
    fullwide: {
        symbols: _kckd547,
        formats: _kckd601,
        digits: [ "０", "１", "２", "３", "４", "５", "６", "７", "８", "９" ]
    },
    geor: {
        symbols: _kckd549,
        digits: "renderGeorgian"
    },
    grek: {
        symbols: _kckd549,
        digits: "renderGreekUpper"
    },
    greklow: {
        symbols: _kckd549,
        digits: "renderGreekLower"
    },
    gujr: {
        symbols: _kckd547,
        formats: _kckd601,
        digits: [ "૦", "૧", "૨", "૩", "૪", "૫", "૬", "૭", "૮", "૯" ]
    },
    guru: {
        symbols: _kckd547,
        formats: _kckd601,
        digits: [ "੦", "੧", "੨", "੩", "੪", "੫", "੬", "੭", "੮", "੯" ]
    },
    hanidays: {
        symbols: _kckd549,
        digits: "renderSpelloutNumberingDays"
    },
    hanidec: {
        symbols: _kckd547,
        formats: _kckd601,
        digits: [ "〇", "一", "二", "三", "四", "五", "六", "七", "八", "九" ]
    },
    hans: _kckd556,
    hansfin: _kckd558,
    hant: _kckd556,
    hantfin: _kckd558,
    hebr: {
        symbols: _kckd549,
        digits: "renderHebrew"
    },
    hmng: {
        symbols: _kckd549,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    java: {
        symbols: _kckd547,
        formats: _kckd601,
        digits: [ "꧐", "꧑", "꧒", "꧓", "꧔", "꧕", "꧖", "꧗", "꧘", "꧙" ]
    },
    jpan: _kckd556,
    jpanfin: _kckd558,
    kali: {
        symbols: _kckd547,
        formats: _kckd601,
        digits: [ "꤀", "꤁", "꤂", "꤃", "꤄", "꤅", "꤆", "꤇", "꤈", "꤉" ]
    },
    khmr: {
        symbols: _kckd547,
        formats: _kckd601,
        digits: [ "០", "១", "២", "៣", "៤", "៥", "៦", "៧", "៨", "៩" ]
    },
    knda: {
        symbols: _kckd547,
        formats: _kckd601,
        digits: [ "೦", "೧", "೨", "೩", "೪", "೫", "೬", "೭", "೮", "೯" ]
    },
    lana: {
        symbols: _kckd547,
        formats: _kckd601,
        digits: [ "᪀", "᪁", "᪂", "᪃", "᪄", "᪅", "᪆", "᪇", "᪈", "᪉" ]
    },
    lanatham: {
        symbols: _kckd547,
        formats: _kckd601,
        digits: [ "᪐", "᪑", "᪒", "᪓", "᪔", "᪕", "᪖", "᪗", "᪘", "᪙" ]
    },
    laoo: {
        symbols: _kckd547,
        formats: _kckd601,
        digits: [ "໐", "໑", "໒", "໓", "໔", "໕", "໖", "໗", "໘", "໙" ]
    },
    latn: {
        symbols: _kckd547,
        formats: _kckd601,
        digits: [ "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" ]
    },
    lepc: {
        symbols: _kckd547,
        formats: _kckd601,
        digits: [ "᱀", "᱁", "᱂", "᱃", "᱄", "᱅", "᱆", "᱇", "᱈", "᱉" ]
    },
    limb: {
        symbols: _kckd547,
        formats: _kckd601,
        digits: [ "᥆", "᥇", "᥈", "᥉", "᥊", "᥋", "᥌", "᥍", "᥎", "᥏" ]
    },
    mathbold: {
        symbols: _kckd549,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathdbl: {
        symbols: _kckd549,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathmono: {
        symbols: _kckd549,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathsanb: {
        symbols: _kckd549,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathsans: {
        symbols: _kckd549,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mlym: {
        symbols: _kckd547,
        formats: _kckd601,
        digits: [ "൦", "൧", "൨", "൩", "൪", "൫", "൬", "൭", "൮", "൯" ]
    },
    modi: {
        symbols: _kckd549,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mong: {
        symbols: _kckd547,
        formats: _kckd601,
        digits: [ "᠐", "᠑", "᠒", "᠓", "᠔", "᠕", "᠖", "᠗", "᠘", "᠙" ]
    },
    mroo: {
        symbols: _kckd549,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mtei: {
        symbols: _kckd547,
        formats: _kckd601,
        digits: [ "꯰", "꯱", "꯲", "꯳", "꯴", "꯵", "꯶", "꯷", "꯸", "꯹" ]
    },
    mymr: {
        symbols: _kckd547,
        formats: _kckd601,
        digits: [ "၀", "၁", "၂", "၃", "၄", "၅", "၆", "၇", "၈", "၉" ]
    },
    mymrshan: {
        symbols: _kckd547,
        formats: _kckd601,
        digits: [ "႐", "႑", "႒", "႓", "႔", "႕", "႖", "႗", "႘", "႙" ]
    },
    mymrtlng: {
        symbols: _kckd549,
        digits: [ "꧰", "꧱", "꧲", "꧳", "꧴", "꧵", "꧶", "꧷", "꧸", "꧹" ]
    },
    "native": _kckd551,
    nkoo: {
        symbols: _kckd547,
        formats: _kckd601,
        digits: [ "߀", "߁", "߂", "߃", "߄", "߅", "߆", "߇", "߈", "߉" ]
    },
    olck: {
        symbols: _kckd547,
        formats: _kckd601,
        digits: [ "᱐", "᱑", "᱒", "᱓", "᱔", "᱕", "᱖", "᱗", "᱘", "᱙" ]
    },
    orya: {
        symbols: _kckd547,
        formats: _kckd601,
        digits: [ "୦", "୧", "୨", "୩", "୪", "୫", "୬", "୭", "୮", "୯" ]
    },
    osma: {
        symbols: _kckd547,
        formats: _kckd601,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    roman: {
        symbols: _kckd549,
        digits: "renderRomanUpper"
    },
    romanlow: {
        symbols: _kckd549,
        digits: "renderRomanLower"
    },
    saur: {
        symbols: _kckd547,
        formats: _kckd601,
        digits: [ "꣐", "꣑", "꣒", "꣓", "꣔", "꣕", "꣖", "꣗", "꣘", "꣙" ]
    },
    shrd: {
        symbols: _kckd547,
        formats: _kckd601,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    sind: {
        symbols: _kckd549,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    sinh: {
        symbols: _kckd549,
        digits: [ "෦", "෧", "෨", "෩", "෪", "෫", "෬", "෭", "෮", "෯" ]
    },
    sora: {
        symbols: _kckd547,
        formats: _kckd601,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    sund: {
        symbols: _kckd547,
        formats: _kckd601,
        digits: [ "᮰", "᮱", "᮲", "᮳", "᮴", "᮵", "᮶", "᮷", "᮸", "᮹" ]
    },
    takr: {
        symbols: _kckd547,
        formats: _kckd601,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    talu: {
        symbols: _kckd547,
        formats: _kckd601,
        digits: [ "᧐", "᧑", "᧒", "᧓", "᧔", "᧕", "᧖", "᧗", "᧘", "᧙" ]
    },
    taml: {
        symbols: _kckd549,
        digits: "renderTamil"
    },
    tamldec: {
        symbols: _kckd547,
        formats: _kckd601,
        digits: [ "௦", "௧", "௨", "௩", "௪", "௫", "௬", "௭", "௮", "௯" ]
    },
    telu: {
        symbols: _kckd547,
        formats: _kckd601,
        digits: [ "౦", "౧", "౨", "౩", "౪", "౫", "౬", "౭", "౮", "౯" ]
    },
    thai: {
        symbols: _kckd547,
        formats: _kckd601,
        digits: [ "๐", "๑", "๒", "๓", "๔", "๕", "๖", "๗", "๘", "๙" ]
    },
    tirh: {
        symbols: _kckd549,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    tibt: {
        symbols: _kckd547,
        formats: _kckd601,
        digits: [ "༠", "༡", "༢", "༣", "༤", "༥", "༦", "༧", "༨", "༩" ]
    },
    traditio: _kckd551,
    vaii: {
        symbols: _kckd547,
        formats: _kckd601,
        digits: [ "꘠", "꘡", "꘢", "꘣", "꘤", "꘥", "꘦", "꘧", "꘨", "꘩" ]
    },
    wara: {
        symbols: _kckd549,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    }
};

inter.calendars = {
    buddhist: {
        dateFormats: {
            basic: _kckd573,
            cldr: {
                d: "d",
                M: "L",
                Md: "d/M",
                MEd: "E d/M",
                MMM: "LLL",
                MMMd: "d MMM",
                MMMEd: "E d MMM",
                y: "y G",
                E: "ccc",
                Ed: "E d",
                Gy: "y G",
                GyMMM: "MMM y G",
                GyMMMd: "d MMM y G",
                GyMMMEd: "E d MMM y G",
                h: "h a",
                H: "HH",
                hm: "h:mm a",
                Hm: "HH:mm",
                hms: "h:mm:ss a",
                Hms: "HH:mm:ss",
                MMMMd: "d MMMM",
                ms: "mm:ss",
                yyyy: "y G",
                yyyyM: "M/y GGGGG",
                yyyyMd: "d/M/y GGGGG",
                yyyyMEd: "E d/M/y GGGGG",
                yyyyMMM: "MMM y G",
                yyyyMMMd: "d MMM y G",
                yyyyMMMEd: "E d MMM y G",
                yyyyMMMM: "MMMM y G",
                yyyyQQQ: "QQQ y G",
                yyyyQQQQ: "QQQQ y G",
                Ehm: "E h:mm a",
                EHm: "E HH:mm",
                Ehms: "E h:mm:ss a",
                EHms: "E HH:mm:ss"
            }
        },
        datePartsOrder: "dmy",
        dateIntervalFormats: _kckd596,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _kckd580,
        dayPeriods: _kckd590,
        monthNames: _kckd586,
        eraNames: {
            wide: [ "ère bouddhiste" ],
            abbreviated: [ "ère b." ]
        },
        quarterNames: _kckd565,
        fields: _kckd602
    },
    chinese: _kckd606,
    coptic: {
        dateFormats: _kckd592,
        datePartsOrder: "dmy",
        dateIntervalFormats: _kckd596,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _kckd580,
        dayPeriods: _kckd590,
        monthNames: {
            format: _kckd571,
            standAlone: _kckd571
        },
        eraNames: {
            wide: [ "avant Dioclétien", "après Dioclétien" ],
            abbreviated: [ "av. D.", "ap. D." ]
        },
        quarterNames: _kckd565,
        fields: _kckd602
    },
    dangi: _kckd606,
    ethioaa: _kckd603,
    ethiopic: {
        dateFormats: _kckd592,
        datePartsOrder: "dmy",
        dateIntervalFormats: _kckd596,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _kckd580,
        dayPeriods: _kckd590,
        monthNames: {
            format: _kckd568,
            standAlone: _kckd568
        },
        eraNames: {
            wide: [ "avant l’Incarnation", "après l’Incarnation" ],
            abbreviated: [ "av. Inc.", "ap. Inc." ]
        },
        quarterNames: _kckd565,
        fields: _kckd602
    },
    gregorian: {
        dateFormats: {
            basic: {
                fullDate: "EEEE d MMMM y",
                longDate: "d MMMM y",
                mediumDate: "d MMM y",
                shortDate: "dd/MM/y",
                fullTime: "HH:mm:ss zzzz",
                longTime: "HH:mm:ss z",
                mediumTime: "HH:mm:ss",
                shortTime: "HH:mm",
                shortDateTime: "dd/MM/y HH:mm",
                mediumDateTime: "d MMM y 'à' HH:mm:ss",
                longDateTime: "d MMMM y 'à' HH:mm:ss z",
                fullDateTime: "EEEE d MMMM y 'à' HH:mm:ss zzzz"
            },
            cldr: {
                d: "d",
                E: "E",
                Ed: "E d",
                Ehm: "E h:mm a",
                EHm: "E HH:mm",
                Ehms: "E h:mm:ss a",
                EHms: "E HH:mm:ss",
                Gy: "y G",
                GyMMM: "MMM y G",
                GyMMMd: "d MMM y G",
                GyMMMEd: "E d MMM y G",
                h: "h a",
                H: "HH 'h'",
                hm: "h:mm a",
                Hm: "HH:mm",
                hms: "h:mm:ss a",
                Hms: "HH:mm:ss",
                hmsv: "h:mm:ss a v",
                Hmsv: "HH:mm:ss v",
                hmv: "h:mm a v",
                Hmv: "HH:mm v",
                M: "L",
                Md: "dd/MM",
                MEd: "E dd/MM",
                MMM: "LLL",
                MMMd: "d MMM",
                MMMEd: "E d MMM",
                MMMMd: "d MMMM",
                ms: "mm:ss",
                y: "y",
                yM: "MM/y",
                yMd: "dd/MM/y",
                yMEd: "E dd/MM/y",
                yMMM: "MMM y",
                yMMMd: "d MMM y",
                yMMMEd: "E d MMM y",
                yMMMM: "MMMM y",
                yQQQ: "QQQ y",
                yQQQQ: "QQQQ y"
            }
        },
        datePartsOrder: "dmy",
        dateIntervalFormats: {
            d: {
                d: "d–d"
            },
            h: _kckd23,
            H: {
                H: "HH – HH"
            },
            hm: _kckd170,
            Hm: _kckd76,
            hmv: _kckd224,
            Hmv: _kckd97,
            hv: _kckd48,
            Hv: {
                H: "HH – HH v"
            },
            M: {
                M: "M–M"
            },
            Md: _kckd77,
            MEd: _kckd117,
            MMM: {
                M: "MMM–MMM"
            },
            MMMd: _kckd49,
            MMMEd: {
                d: "E d – E d MMM",
                M: "E d MMM – E d MMM"
            },
            y: {
                y: "y–y"
            },
            yM: {
                M: "MM/y – MM/y",
                y: "MM/y – MM/y"
            },
            yMd: {
                d: "dd/MM/y – dd/MM/y",
                M: "dd/MM/y – dd/MM/y",
                y: "dd/MM/y – dd/MM/y"
            },
            yMEd: {
                d: "E dd/MM/y – E dd/MM/y",
                M: "E dd/MM/y – E dd/MM/y",
                y: "E dd/MM/y – E dd/MM/y"
            },
            yMMM: {
                M: "MMM–MMM y",
                y: "MMM y – MMM y"
            },
            yMMMd: {
                d: "d–d MMM y",
                M: "d MMM – d MMM y",
                y: "d MMM y – d MMM y"
            },
            yMMMEd: {
                d: "E d – E d MMM y",
                M: "E d MMM – E d MMM y",
                y: "E d MMM y – E d MMM y"
            },
            yMMMM: {
                M: "MMMM – MMMM y",
                y: "MMMM y – MMMM y"
            }
        },
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _kckd580,
        dayPeriods: _kckd590,
        monthNames: _kckd586,
        eraNames: {
            wide: [ "avant Jésus-Christ", "après Jésus-Christ" ],
            abbreviated: [ "av. J.-C.", "ap. J.-C." ]
        },
        quarterNames: _kckd565,
        fields: _kckd602
    },
    hebrew: {
        dateFormats: _kckd592,
        datePartsOrder: "dmy",
        dateIntervalFormats: _kckd596,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _kckd580,
        dayPeriods: _kckd590,
        monthNames: {
            format: _kckd567,
            standAlone: _kckd567
        },
        eraNames: {
            wide: [ "Anno Mundi" ],
            abbreviated: [ "AM" ]
        },
        quarterNames: _kckd565,
        fields: _kckd602
    },
    indian: {
        dateFormats: _kckd592,
        datePartsOrder: "dmy",
        dateIntervalFormats: _kckd596,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _kckd580,
        dayPeriods: _kckd590,
        monthNames: {
            format: _kckd569,
            standAlone: _kckd569
        },
        eraNames: {
            wide: [ "SAKA" ],
            abbreviated: [ "SAKA" ]
        },
        quarterNames: _kckd565,
        fields: _kckd602
    },
    islamic: _kckd605,
    "islamic-umalqura": _kckd605,
    "islamic-tbla": _kckd605,
    "islamic-civil": _kckd605,
    "islamic-rgsa": _kckd605,
    iso8601: _kckd603,
    japanese: {
        dateFormats: {
            basic: {
                fullDate: "EEEE d MMMM y G",
                longDate: "d MMMM y G",
                mediumDate: "d MMM y G",
                shortDate: "dd/MM/y GGGGG",
                fullTime: "HH:mm:ss zzzz",
                longTime: "HH:mm:ss z",
                mediumTime: "HH:mm:ss",
                shortTime: "HH:mm",
                shortDateTime: "dd/MM/y GGGGG HH:mm",
                mediumDateTime: "d MMM y G HH:mm:ss",
                longDateTime: "d MMMM y G HH:mm:ss z",
                fullDateTime: "EEEE d MMMM y G HH:mm:ss zzzz"
            },
            cldr: {
                d: "d",
                E: "ccc",
                Ed: "E d",
                Gy: "y G",
                GyMMM: "MMM y G",
                GyMMMd: "d MMM y G",
                GyMMMEd: "E d MMM y G",
                M: "L",
                Md: "d/M",
                MEd: "E d/M",
                MMM: "LLL",
                MMMd: "d MMM",
                MMMEd: "E d MMM",
                MMMMd: "d MMMM",
                y: "y G",
                yyyy: "y G",
                yyyyM: "M/y GGGGG",
                yyyyMd: "d/M/y GGGGG",
                yyyyMEd: "E d/M/y GGGGG",
                yyyyMMM: "MMM y G",
                yyyyMMMd: "d MMM y G",
                yyyyMMMEd: "E d MMM y G",
                yyyyMMMM: "MMMM y G",
                yyyyQQQ: "QQQ y G",
                yyyyQQQQ: "QQQQ y G",
                h: "h a",
                H: "HH",
                hm: "h:mm a",
                Hm: "HH:mm",
                hms: "h:mm:ss a",
                Hms: "HH:mm:ss",
                ms: "mm:ss",
                Ehm: "E h:mm a",
                EHm: "E HH:mm",
                Ehms: "E h:mm:ss a",
                EHms: "E HH:mm:ss"
            }
        },
        datePartsOrder: "dmy",
        dateIntervalFormats: _kckd596,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _kckd580,
        dayPeriods: _kckd590,
        monthNames: _kckd586,
        eraNames: {
            wide: [ "Taika (645–650)", "Hakuchi (650–671)", "Hakuhō (672–686)", "Shuchō (686–701)", "Taihō (701–704)", "Keiun (704–708)", "Wadō (708–715)", "Reiki (715–717)", "Yōrō (717–724)", "Jinki (724–729)", "Tempyō (729–749)", "Tempyō-kampō (749-749)", "Tempyō-shōhō (749-757)", "Tempyō-hōji (757-765)", "Temphō-jingo (765-767)", "Jingo-keiun (767-770)", "Hōki (770–780)", "Ten-ō (781-782)", "Enryaku (782–806)", "Daidō (806–810)", "Kōnin (810–824)", "Tenchō (824–834)", "Jōwa (834–848)", "Kajō (848–851)", "Ninju (851–854)", "Saikō (854–857)", "Ten-an (857-859)", "Jōgan (859–877)", "Gangyō (877–885)", "Ninna (885–889)", "Kanpyō (889–898)", "Shōtai (898–901)", "Engi (901–923)", "Enchō (923–931)", "Jōhei (931–938)", "Tengyō (938–947)", "Tenryaku (947–957)", "Tentoku (957–961)", "Ōwa (961–964)", "Kōhō (964–968)", "Anna (968–970)", "Tenroku (970–973)", "Ten’en (973–976)", "Jōgen (976–978)", "Tengen (978–983)", "Eikan (983–985)", "Kanna (985–987)", "Eien (987–989)", "Eiso (989–990)", "Shōryaku (990–995)", "Chōtoku (995–999)", "Chōhō (999–1004)", "Kankō (1004–1012)", "Chōwa (1012–1017)", "Kannin (1017–1021)", "Jian (1021–1024)", "Manju (1024–1028)", "Chōgen (1028–1037)", "Chōryaku (1037–1040)", "Chōkyū (1040–1044)", "Kantoku (1044–1046)", "Eishō (1046–1053)", "Tengi (1053–1058)", "Kōhei (1058–1065)", "Jiryaku (1065–1069)", "Enkyū (1069–1074)", "Shōho (1074–1077)", "Shōryaku (1077–1081)", "Eihō (1081–1084)", "Ōtoku (1084–1087)", "Kanji (1087–1094)", "Kahō (1094–1096)", "Eichō (1096–1097)", "Jōtoku (1097–1099)", "Kōwa (1099–1104)", "Chōji (1104–1106)", "Kashō (1106–1108)", "Tennin (1108–1110)", "Ten-ei (1110-1113)", "Eikyū (1113–1118)", "Gen’ei (1118–1120)", "Hōan (1120–1124)", "Tenji (1124–1126)", "Daiji (1126–1131)", "Tenshō (1131–1132)", "Chōshō (1132–1135)", "Hōen (1135–1141)", "Eiji (1141–1142)", "Kōji (1142–1144)", "Ten’yō (1144–1145)", "Kyūan (1145–1151)", "Ninpei (1151–1154)", "Kyūju (1154–1156)", "Hōgen (1156–1159)", "Heiji (1159–1160)", "Eiryaku (1160–1161)", "Ōho (1161–1163)", "Chōkan (1163–1165)", "Eiman (1165–1166)", "Nin’an (1166–1169)", "Kaō (1169–1171)", "Shōan (1171–1175)", "Angen (1175–1177)", "Jishō (1177–1181)", "Yōwa (1181–1182)", "Juei (1182–1184)", "Genryaku (1184–1185)", "Bunji (1185–1190)", "Kenkyū (1190–1199)", "Shōji (1199–1201)", "Kennin (1201–1204)", "Genkyū (1204–1206)", "Ken’ei (1206–1207)", "Jōgen (1207–1211)", "Kenryaku (1211–1213)", "Kenpō (1213–1219)", "Jōkyū (1219–1222)", "Jōō (1222–1224)", "Gennin (1224–1225)", "Karoku (1225–1227)", "Antei (1227–1229)", "Kanki (1229–1232)", "Jōei (1232–1233)", "Tenpuku (1233–1234)", "Bunryaku (1234–1235)", "Katei (1235–1238)", "Ryakunin (1238–1239)", "En’ō (1239–1240)", "Ninji (1240–1243)", "Kangen (1243–1247)", "Hōji (1247–1249)", "Kenchō (1249–1256)", "Kōgen (1256–1257)", "Shōka (1257–1259)", "Shōgen (1259–1260)", "Bun’ō (1260–1261)", "Kōchō (1261–1264)", "Bun’ei (1264–1275)", "Kenji (1275–1278)", "Kōan (1278–1288)", "Shōō (1288–1293)", "Einin (1293–1299)", "Shōan (1299–1302)", "Kengen (1302–1303)", "Kagen (1303–1306)", "Tokuji (1306–1308)", "Enkyō (1308–1311)", "Ōchō (1311–1312)", "Shōwa (1312–1317)", "Bunpō (1317–1319)", "Genō (1319–1321)", "Genkō (1321–1324)", "Shōchū (1324–1326)", "Karyaku (1326–1329)", "Gentoku (1329–1331)", "Genkō (1331–1334)", "Kemmu (1334–1336)", "Engen (1336–1340)", "Kōkoku (1340–1346)", "Shōhei (1346–1370)", "Kentoku (1370–1372)", "Bunchū (1372–1375)", "Tenju (1375–1379)", "Kōryaku (1379–1381)", "Kōwa (1381–1384)", "Genchū (1384–1392)", "Meitoku (1384–1387)", "Kakei (1387–1389)", "Kōō (1389–1390)", "Meitoku (1390–1394)", "Ōei (1394–1428)", "Shōchō (1428–1429)", "Eikyō (1429–1441)", "Kakitsu (1441–1444)", "Bun’an (1444–1449)", "Hōtoku (1449–1452)", "Kyōtoku (1452–1455)", "Kōshō (1455–1457)", "Chōroku (1457–1460)", "Kanshō (1460–1466)", "Bunshō (1466–1467)", "Ōnin (1467–1469)", "Bunmei (1469–1487)", "Chōkyō (1487–1489)", "Entoku (1489–1492)", "Meiō (1492–1501)", "Bunki (1501–1504)", "Eishō (1504–1521)", "Taiei (1521–1528)", "Kyōroku (1528–1532)", "Tenbun (1532–1555)", "Kōji (1555–1558)", "Eiroku (1558–1570)", "Genki (1570–1573)", "Tenshō (1573–1592)", "Bunroku (1592–1596)", "Keichō (1596–1615)", "Genna (1615–1624)", "Kan’ei (1624–1644)", "Shōho (1644–1648)", "Keian (1648–1652)", "Jōō (1652–1655)", "Meireki (1655–1658)", "Manji (1658–1661)", "Kanbun (1661–1673)", "Enpō (1673–1681)", "Tenna (1681–1684)", "Jōkyō (1684–1688)", "Genroku (1688–1704)", "Hōei (1704–1711)", "Shōtoku (1711–1716)", "Kyōhō (1716–1736)", "Genbun (1736–1741)", "Kanpō (1741–1744)", "Enkyō (1744–1748)", "Kan’en (1748–1751)", "Hōryaku (1751–1764)", "Meiwa (1764–1772)", "An’ei (1772–1781)", "Tenmei (1781–1789)", "Kansei (1789–1801)", "Kyōwa (1801–1804)", "Bunka (1804–1818)", "Bunsei (1818–1830)", "Tenpō (1830–1844)", "Kōka (1844–1848)", "Kaei (1848–1854)", "Ansei (1854–1860)", "Man’en (1860–1861)", "Bunkyū (1861–1864)", "Genji (1864–1865)", "Keiō (1865–1868)", "Meiji", "Taishō", "Shōwa", "Heisei" ],
            abbreviated: [ "Taika (645–650)", "Hakuchi (650–671)", "Hakuhō (672–686)", "Shuchō (686–701)", "Taihō (701–704)", "Keiun (704–708)", "Wadō (708–715)", "Reiki (715–717)", "Yōrō (717–724)", "Jinki (724–729)", "Tenpyō (729–749)", "Tenpyō-kampō (749-749)", "Tenpyō-shōhō (749-757)", "Tenpyō-hōji (757-765)", "Tenpyō-jingo (765-767)", "Jingo-keiun (767-770)", "Hōki (770–780)", "Ten-ō (781-782)", "Enryaku (782–806)", "Daidō (806–810)", "Kōnin (810–824)", "Tenchō (824–834)", "Jōwa (834–848)", "Kajō (848–851)", "Ninju (851–854)", "Saikō (854–857)", "Ten-an (857-859)", "Jōgan (859–877)", "Gangyō (877–885)", "Ninna (885–889)", "Kanpyō (889–898)", "Shōtai (898–901)", "Engi (901–923)", "Enchō (923–931)", "Jōhei (931–938)", "Tengyō (938–947)", "Tenryaku (947–957)", "Tentoku (957–961)", "Ōwa (961–964)", "Kōhō (964–968)", "Anna (968–970)", "Tenroku (970–973)", "Ten’en (973–976)", "Jōgen (976–978)", "Tengen (978–983)", "Eikan (983–985)", "Kanna (985–987)", "Eien (987–989)", "Eiso (989–990)", "Shōryaku (990–995)", "Chōtoku (995–999)", "Chōhō (999–1004)", "Kankō (1004–1012)", "Chōwa (1012–1017)", "Kannin (1017–1021)", "Jian (1021–1024)", "Manju (1024–1028)", "Chōgen (1028–1037)", "Chōryaku (1037–1040)", "Chōkyū (1040–1044)", "Kantoku (1044–1046)", "Eishō (1046–1053)", "Tengi (1053–1058)", "Kōhei (1058–1065)", "Jiryaku (1065–1069)", "Enkyū (1069–1074)", "Shōho (1074–1077)", "Shōryaku (1077–1081)", "Eihō (1081–1084)", "Ōtoku (1084–1087)", "Kanji (1087–1094)", "Kahō (1094–1096)", "Eichō (1096–1097)", "Jōtoku (1097–1099)", "Kōwa (1099–1104)", "Chōji (1104–1106)", "Kashō (1106–1108)", "Tennin (1108–1110)", "Ten-ei (1110-1113)", "Eikyū (1113–1118)", "Gen’ei (1118–1120)", "Hōan (1120–1124)", "Tenji (1124–1126)", "Daiji (1126–1131)", "Tenshō (1131–1132)", "Chōshō (1132–1135)", "Hōen (1135–1141)", "Eiji (1141–1142)", "Kōji (1142–1144)", "Ten’yō (1144–1145)", "Kyūan (1145–1151)", "Ninpei (1151–1154)", "Kyūju (1154–1156)", "Hōgen (1156–1159)", "Heiji (1159–1160)", "Eiryaku (1160–1161)", "Ōho (1161–1163)", "Chōkan (1163–1165)", "Eiman (1165–1166)", "Nin’an (1166–1169)", "Kaō (1169–1171)", "Shōan (1171–1175)", "Angen (1175–1177)", "Jishō (1177–1181)", "Yōwa (1181–1182)", "Juei (1182–1184)", "Genryaku (1184–1185)", "Bunji (1185–1190)", "Kenkyū (1190–1199)", "Shōji (1199–1201)", "Kennin (1201–1204)", "Genkyū (1204–1206)", "Ken’ei (1206–1207)", "Jōgen (1207–1211)", "Kenryaku (1211–1213)", "Kenpō (1213–1219)", "Jōkyū (1219–1222)", "Jōō (1222–1224)", "Gennin (1224–1225)", "Karoku (1225–1227)", "Antei (1227–1229)", "Kanki (1229–1232)", "Jōei (1232–1233)", "Tenpuku (1233–1234)", "Bunryaku (1234–1235)", "Katei (1235–1238)", "Ryakunin (1238–1239)", "En’ō (1239–1240)", "Ninji (1240–1243)", "Kangen (1243–1247)", "Hōji (1247–1249)", "Kenchō (1249–1256)", "Kōgen (1256–1257)", "Shōka (1257–1259)", "Shōgen (1259–1260)", "Bun’ō (1260–1261)", "Kōchō (1261–1264)", "Bun’ei (1264–1275)", "Kenji (1275–1278)", "Kōan (1278–1288)", "Shōō (1288–1293)", "Einin (1293–1299)", "Shōan (1299–1302)", "Kengen (1302–1303)", "Kagen (1303–1306)", "Tokuji (1306–1308)", "Enkyō (1308–1311)", "Ōchō (1311–1312)", "Shōwa (1312–1317)", "Bunpō (1317–1319)", "Genō (1319–1321)", "Genkō (1321–1324)", "Shōchū (1324–1326)", "Karyaku (1326–1329)", "Gentoku (1329–1331)", "Genkō (1331–1334)", "Kenmu (1334–1336)", "Engen (1336–1340)", "Kōkoku (1340–1346)", "Shōhei (1346–1370)", "Kentoku (1370–1372)", "Bunchū (1372–1375)", "Tenju (1375–1379)", "Kōryaku (1379–1381)", "Kōwa (1381–1384)", "Genchū (1384–1392)", "Meitoku (1384–1387)", "Kakei (1387–1389)", "Kōō (1389–1390)", "Meitoku (1390–1394)", "Ōei (1394–1428)", "Shōchō (1428–1429)", "Eikyō (1429–1441)", "Kakitsu (1441–1444)", "Bun’an (1444–1449)", "Hōtoku (1449–1452)", "Kyōtoku (1452–1455)", "Kōshō (1455–1457)", "Chōroku (1457–1460)", "Kanshō (1460–1466)", "Bunshō (1466–1467)", "Ōnin (1467–1469)", "Bunmei (1469–1487)", "Chōkyō (1487–1489)", "Entoku (1489–1492)", "Meiō (1492–1501)", "Bunki (1501–1504)", "Eishō (1504–1521)", "Taiei (1521–1528)", "Kyōroku (1528–1532)", "Tenbun (1532–1555)", "Kōji (1555–1558)", "Eiroku (1558–1570)", "Genki (1570–1573)", "Tenshō (1573–1592)", "Bunroku (1592–1596)", "Keichō (1596–1615)", "Genna (1615–1624)", "Kan’ei (1624–1644)", "Shōho (1644–1648)", "Keian (1648–1652)", "Jōō (1652–1655)", "Meireki (1655–1658)", "Manji (1658–1661)", "Kanbun (1661–1673)", "Enpō (1673–1681)", "Tenna (1681–1684)", "Jōkyō (1684–1688)", "Genroku (1688–1704)", "Hōei (1704–1711)", "Shōtoku (1711–1716)", "Kyōhō (1716–1736)", "Genbun (1736–1741)", "Kanpō (1741–1744)", "Enkyō (1744–1748)", "Kan’en (1748–1751)", "Hōreki (1751–1764)", "Meiwa (1764–1772)", "An’ei (1772–1781)", "Tenmei (1781–1789)", "Kansei (1789–1801)", "Kyōwa (1801–1804)", "Bunka (1804–1818)", "Bunsei (1818–1830)", "Tenpō (1830–1844)", "Kōka (1844–1848)", "Kaei (1848–1854)", "Ansei (1854–1860)", "Man’en (1860–1861)", "Bunkyū (1861–1864)", "Genji (1864–1865)", "Keiō (1865–1868)", "Meiji", "Taishō", "Shōwa", "Heisei" ]
        },
        quarterNames: _kckd565,
        fields: _kckd602
    },
    persian: {
        dateFormats: _kckd592,
        datePartsOrder: "dmy",
        dateIntervalFormats: _kckd596,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _kckd580,
        dayPeriods: _kckd590,
        monthNames: {
            format: _kckd570,
            standAlone: _kckd570
        },
        eraNames: {
            wide: [ "AP" ],
            abbreviated: [ "AP" ]
        },
        quarterNames: _kckd565,
        fields: _kckd602
    },
    roc: {
        dateFormats: _kckd592,
        datePartsOrder: "dmy",
        dateIntervalFormats: _kckd596,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _kckd580,
        dayPeriods: _kckd590,
        monthNames: _kckd586,
        eraNames: {
            wide: [ "avant RdC", "RdC" ],
            abbreviated: [ "avant RdC", "RdC" ]
        },
        quarterNames: _kckd565,
        fields: _kckd602
    },
    islamicc: _kckd603
};

inter.pluralRule = function(n) {
    var i = Math.floor(Math.abs(n));
    if (typeof n === "string") n = parseInt(n, 10);
    if (i === 0 || i === 1) return "one";
    return "other";
};

inter.renderDigitsOrdinal = function(n) {
    if (n < 0) return "−" + this.renderDigitsOrdinal(-n);
    if (n >= 0) return this.renderDigitsOrdinalMasculine(n);
};

inter.renderSpelloutNumbering = function(n) {
    if (n < 0) return "−" + this.renderSpelloutNumbering(-n);
    if (n >= 0) return this.renderSpelloutCardinalMasculine(n);
};

inter.renderArmenianUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderArmenianUpper(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e4) return this.renderNumber(n, "#,##0");
    if (n >= 9e3) return "Ք" + (n === 9e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 8e3) return "Փ" + (n === 8e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 7e3) return "Ւ" + (n === 7e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 6e3) return "Ց" + (n === 6e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 5e3) return "Ր" + (n === 5e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 4e3) return "Տ" + (n === 4e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 3e3) return "Վ" + (n === 3e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 2e3) return "Ս" + (n === 2e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 1e3) return "Ռ" + (n === 1e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 900) return "Ջ" + (n === 900 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 800) return "Պ" + (n === 800 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 700) return "Չ" + (n === 700 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 600) return "Ո" + (n === 600 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 500) return "Շ" + (n === 500 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 400) return "Ն" + (n === 400 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 300) return "Յ" + (n === 300 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 200) return "Մ" + (n === 200 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 100) return "Ճ" + (n === 100 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 90) return "Ղ" + (n === 90 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 80) return "Ձ" + (n === 80 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 70) return "Հ" + (n === 70 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 60) return "Կ" + (n === 60 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 50) return "Ծ" + (n === 50 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 40) return "Խ" + (n === 40 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 30) return "Լ" + (n === 30 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 20) return "Ի" + (n === 20 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 10) return "Ժ" + (n === 10 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 9) return "Թ";
    if (n >= 8) return "Ը";
    if (n >= 7) return "Է";
    if (n >= 6) return "Զ";
    if (n >= 5) return "Ե";
    if (n >= 4) return "Դ";
    if (n >= 3) return "Գ";
    if (n >= 2) return "Բ";
    if (n >= 1) return "Ա";
    if (n >= 0) return "0";
};

inter.renderArmenianLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderArmenianLower(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e4) return this.renderNumber(n, "#,##0");
    if (n >= 9e3) return "ք" + (n === 9e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 8e3) return "փ" + (n === 8e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 7e3) return "ւ" + (n === 7e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 6e3) return "ց" + (n === 6e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 5e3) return "ր" + (n === 5e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 4e3) return "տ" + (n === 4e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 3e3) return "վ" + (n === 3e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 2e3) return "ս" + (n === 2e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 1e3) return "ռ" + (n === 1e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 900) return "ջ" + (n === 900 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 800) return "պ" + (n === 800 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 700) return "չ" + (n === 700 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 600) return "ո" + (n === 600 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 500) return "շ" + (n === 500 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 400) return "ն" + (n === 400 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 300) return "յ" + (n === 300 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 200) return "մ" + (n === 200 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 100) return "ճ" + (n === 100 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 90) return "ղ" + (n === 90 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 80) return "ձ" + (n === 80 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 70) return "հ" + (n === 70 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 60) return "կ" + (n === 60 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 50) return "ծ" + (n === 50 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 40) return "խ" + (n === 40 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 30) return "լ" + (n === 30 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 20) return "ի" + (n === 20 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 10) return "ժ" + (n === 10 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 9) return "թ";
    if (n >= 8) return "ը";
    if (n >= 7) return "է";
    if (n >= 6) return "զ";
    if (n >= 5) return "ե";
    if (n >= 4) return "դ";
    if (n >= 3) return "գ";
    if (n >= 2) return "բ";
    if (n >= 1) return "ա";
    if (n >= 0) return "0";
};

inter.renderCyrillicLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderCyrillicLower(-n);
    if (isFractional && n > 1) return this.renderCyrillicLower(Math.floor(n)) + "." + this.renderCyrillicLower(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e15) return "҂҂҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e15)) + (n === 1e15 ? "" : " " + this.renderCyrillicLower(n % 1e15));
    if (n >= 1e12) return "҂҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e12)) + (n === 1e12 ? "" : " " + this.renderCyrillicLower(n % 1e12));
    if (n >= 1e9) return "҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e9)) + (n === 1e9 ? "" : " " + this.renderCyrillicLower(n % 1e9));
    if (n >= 1e6) return "҂҂" + this.renderCyrillicLower(Math.floor(n / 1e6)) + (n === 1e6 ? "" : " " + this.renderCyrillicLower(n % 1e6));
    if (n >= 11e3) return this.renderCyrillicLowerThousands(Math.floor(n / 1e4)) + (n === 11e3 ? "" : " " + this.renderCyrillicLower(n % 1e4));
    if (n >= 1e4) return "҂" + this.renderCyrillicLower(Math.floor(n / 1e4)) + (n === 1e4 ? "" : " " + this.renderCyrillicLower(n % 1e4));
    if (n >= 1e3) return "҂" + this.renderCyrillicLower110(Math.floor(n / 1e3)) + this.renderCyrillicLowerPost(n % 1e3);
    if (n >= 900) return "ц" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 801) return "ѿ" + this.renderCyrillicLower(n % 100);
    if (n >= 800) return "ѿ҃";
    if (n >= 700) return "ѱ" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 600) return "х" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 500) return "ф" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 400) return "у" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 300) return "т" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 200) return "с" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 100) return "р" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 90) return "ч" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 80) return "п" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 70) return "ѻ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 60) return "ѯ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 50) return "н" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 40) return "м" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 30) return "л" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 20) return "к" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 19) return "ѳ҃і";
    if (n >= 18) return "и҃і";
    if (n >= 17) return "з҃і";
    if (n >= 16) return "ѕ҃і";
    if (n >= 15) return "є҃і";
    if (n >= 14) return "д҃і";
    if (n >= 13) return "г҃і";
    if (n >= 12) return "в҃і";
    if (n >= 11) return "а҃і";
    if (n >= 1) return this.renderCyrillicLower110(n) + "҃";
    if (n >= 0) return "0҃";
};

inter.renderEthiopic = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderEthiopic(-n);
    if (isFractional && n > 1) return this.renderEthiopic(Math.floor(n)) + "፡" + this.renderEthiopic(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,###0");
    if (n >= 2e16) return this.renderEthiopic(Math.floor(n / 1e16)) + "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 1e16) return "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 2e12) return this.renderEthiopic(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1e12) return "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 2e8) return this.renderEthiopic(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1e8) return "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 2e4) return this.renderEthiopic(Math.floor(n / 1e4)) + "፼" + (n === 2e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 1e4) return "፼" + (n === 1e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 200) return this.renderEthiopic(Math.floor(n / 100)) + "፻" + (n === 200 ? "" : this.renderEthiopic(n % 100));
    if (n >= 100) return "፻" + (n === 100 ? "" : this.renderEthiopic(n % 100));
    if (n >= 90) return "፺" + (n === 90 ? "" : this.renderEthiopic(n % 10));
    if (n >= 80) return "፹" + (n === 80 ? "" : this.renderEthiopic(n % 10));
    if (n >= 70) return "፸" + (n === 70 ? "" : this.renderEthiopic(n % 10));
    if (n >= 60) return "፷" + (n === 60 ? "" : this.renderEthiopic(n % 10));
    if (n >= 50) return "፶" + (n === 50 ? "" : this.renderEthiopic(n % 10));
    if (n >= 40) return "፵" + (n === 40 ? "" : this.renderEthiopic(n % 10));
    if (n >= 30) return "፴" + (n === 30 ? "" : this.renderEthiopic(n % 10));
    if (n >= 20) return "፳" + (n === 20 ? "" : this.renderEthiopic(n % 10));
    if (n >= 10) return "፲" + (n === 10 ? "" : this.renderEthiopic(n % 10));
    if (n >= 9) return "፱";
    if (n >= 8) return "፰";
    if (n >= 7) return "፯";
    if (n >= 6) return "፮";
    if (n >= 5) return "፭";
    if (n >= 4) return "፬";
    if (n >= 3) return "፫";
    if (n >= 2) return "፪";
    if (n >= 1) return "፩";
    if (n >= 0) return "ባዶ";
};

inter.renderGeorgian = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGeorgian(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 2e4) return this.renderNumber(n, "#,##0");
    if (n >= 1e4) return "ჯ" + (n === 1e4 ? "" : this.renderGeorgian(n % 1e4));
    if (n >= 9e3) return "ჵ" + (n === 9e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 8e3) return "ჴ" + (n === 8e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 7e3) return "ხ" + (n === 7e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 6e3) return "ჭ" + (n === 6e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 5e3) return "წ" + (n === 5e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 4e3) return "ძ" + (n === 4e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 3e3) return "ც" + (n === 3e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 2e3) return "ჩ" + (n === 2e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 1e3) return "შ" + (n === 1e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 900) return "ყ" + (n === 900 ? "" : this.renderGeorgian(n % 100));
    if (n >= 800) return "ღ" + (n === 800 ? "" : this.renderGeorgian(n % 100));
    if (n >= 700) return "ქ" + (n === 700 ? "" : this.renderGeorgian(n % 100));
    if (n >= 600) return "ფ" + (n === 600 ? "" : this.renderGeorgian(n % 100));
    if (n >= 500) return "ჳ" + (n === 500 ? "" : this.renderGeorgian(n % 100));
    if (n >= 400) return "უ" + (n === 400 ? "" : this.renderGeorgian(n % 100));
    if (n >= 300) return "ტ" + (n === 300 ? "" : this.renderGeorgian(n % 100));
    if (n >= 200) return "ს" + (n === 200 ? "" : this.renderGeorgian(n % 100));
    if (n >= 100) return "რ" + (n === 100 ? "" : this.renderGeorgian(n % 100));
    if (n >= 90) return "ჟ" + (n === 90 ? "" : this.renderGeorgian(n % 10));
    if (n >= 80) return "პ" + (n === 80 ? "" : this.renderGeorgian(n % 10));
    if (n >= 70) return "ო" + (n === 70 ? "" : this.renderGeorgian(n % 10));
    if (n >= 60) return "ჲ" + (n === 60 ? "" : this.renderGeorgian(n % 10));
    if (n >= 50) return "ნ" + (n === 50 ? "" : this.renderGeorgian(n % 10));
    if (n >= 40) return "მ" + (n === 40 ? "" : this.renderGeorgian(n % 10));
    if (n >= 30) return "ლ" + (n === 30 ? "" : this.renderGeorgian(n % 10));
    if (n >= 20) return "კ" + (n === 20 ? "" : this.renderGeorgian(n % 10));
    if (n >= 10) return "ი" + (n === 10 ? "" : this.renderGeorgian(n % 10));
    if (n >= 9) return "თ";
    if (n >= 8) return "ჱ";
    if (n >= 7) return "ზ";
    if (n >= 6) return "ვ";
    if (n >= 5) return "ე";
    if (n >= 4) return "დ";
    if (n >= 3) return "გ";
    if (n >= 2) return "ბ";
    if (n >= 1) return "ა";
    if (n >= 0) return this.renderNumber(n, "#,##0");
};

inter.renderGreekUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGreekUpper(-n);
    if (isFractional && n > 1) return this.renderGreekUpper(Math.floor(n)) + "." + this.renderGreekUpper(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 0) return this.renderGreekNumeralMajuscules(n) + "´";
};

inter.renderGreekLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGreekLower(-n);
    if (isFractional && n > 1) return this.renderGreekLower(Math.floor(n)) + "." + this.renderGreekLower(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 0) return this.renderGreekNumeralMinuscules(n) + "´";
};

inter.renderSpelloutCardinal = function(n) {
    if (n < 0) return "−" + this.renderSpelloutCardinal(-n);
    if (n >= 0) return this.renderNumber(n, "#,##0.#");
};

inter.renderHebrew = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderHebrew(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1000001) return this.renderNumber(n, "#,##0");
    if (n >= 1e6) return "אלף אלפים";
    if (n >= 3001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 3001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 3e3) return this.renderHebrew(Math.floor(n / 1e3)) + " אלפים";
    if (n >= 2001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 2001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 2e3) return "אלפיים";
    if (n >= 1001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 1001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 1e3) return "אלף";
    if (n >= 901) return "תתק" + this.renderHebrew099(n % 100);
    if (n >= 900) return "תת״ק";
    if (n >= 801) return "תת" + this.renderHebrew099(n % 100);
    if (n >= 800) return "ת״ת";
    if (n >= 745) return "תש" + this.renderHebrew099(n % 100);
    if (n >= 744) return "תשד״מ";
    if (n >= 701) return "תש" + this.renderHebrew099(n % 100);
    if (n >= 700) return "ת״ש";
    if (n >= 699) return "תר" + this.renderHebrew099(n % 100);
    if (n >= 698) return "תרח״צ";
    if (n >= 601) return "תר" + this.renderHebrew099(n % 100);
    if (n >= 600) return "ת״ר";
    if (n >= 501) return "תק" + this.renderHebrew099(n % 100);
    if (n >= 500) return "ת״ק";
    if (n >= 400) return "ת" + this.renderHebrew099(n % 100);
    if (n >= 345) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 344) return "שד״מ";
    if (n >= 305) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 304) return "ד״ש";
    if (n >= 300) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 299) return "ר" + this.renderHebrew099(n % 100);
    if (n >= 298) return "רח״צ";
    if (n >= 200) return "ר" + this.renderHebrew099(n % 100);
    if (n >= 100) return "ק" + this.renderHebrew099(n % 100);
    if (n >= 91) return "צ״" + this.renderHebrewItem(n % 10);
    if (n >= 90) return "צ׳";
    if (n >= 81) return "פ״" + this.renderHebrewItem(n % 10);
    if (n >= 80) return "פ׳";
    if (n >= 71) return "ע״" + this.renderHebrewItem(n % 10);
    if (n >= 70) return "ע׳";
    if (n >= 61) return "ס״" + this.renderHebrewItem(n % 10);
    if (n >= 60) return "ס׳";
    if (n >= 51) return "נ״" + this.renderHebrewItem(n % 10);
    if (n >= 50) return "נ׳";
    if (n >= 41) return "מ״" + this.renderHebrewItem(n % 10);
    if (n >= 40) return "מ׳";
    if (n >= 31) return "ל״" + this.renderHebrewItem(n % 10);
    if (n >= 30) return "ל׳";
    if (n >= 21) return "כ״" + this.renderHebrewItem(n % 10);
    if (n >= 20) return "כ׳";
    if (n >= 17) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "ט״ז";
    if (n >= 15) return "ט״ו";
    if (n >= 11) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 0) return this.renderHebrewItem(n) + "׳";
};

inter.renderRomanUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderRomanUpper(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 4e5) return this.renderNumber(n, "#,##0");
    if (n >= 3e5) return "ↈↈↈ" + (n === 3e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 2e5) return "ↈↈ" + (n === 2e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 1e5) return "ↈ" + (n === 1e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 9e4) return "ↂↈ" + (n === 9e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 8e4) return "ↇↂↂↂ" + (n === 8e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 7e4) return "ↇↂↂ" + (n === 7e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 6e4) return "ↇↂ" + (n === 6e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 5e4) return "ↇ" + (n === 5e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 4e4) return "ↂↇ" + (n === 4e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 3e4) return "ↂↂↂ" + (n === 3e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 2e4) return "ↂↂ" + (n === 2e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 1e4) return "ↂ" + (n === 1e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 9e3) return "Mↂ" + (n === 9e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 8e3) return "ↁMMM" + (n === 8e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 7e3) return "ↁMM" + (n === 7e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 6e3) return "ↁM" + (n === 6e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 5e3) return "ↁ" + (n === 5e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 4e3) return "Mↁ" + (n === 4e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 3e3) return "MMM" + (n === 3e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 2e3) return "MM" + (n === 2e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 1e3) return "M" + (n === 1e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 900) return "CM" + (n === 900 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 800) return "DCCC" + (n === 800 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 700) return "DCC" + (n === 700 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 600) return "DC" + (n === 600 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 500) return "D" + (n === 500 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 400) return "CD" + (n === 400 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 300) return "CCC" + (n === 300 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 200) return "CC" + (n === 200 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 100) return "C" + (n === 100 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 90) return "XC" + (n === 90 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 80) return "LXXX" + (n === 80 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 70) return "LXX" + (n === 70 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 60) return "LX" + (n === 60 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 50) return "L" + (n === 50 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 40) return "XL" + (n === 40 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 30) return "XXX" + (n === 30 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 20) return "XX" + (n === 20 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 10) return "X" + (n === 10 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 9) return "IX";
    if (n >= 8) return "VIII";
    if (n >= 7) return "VII";
    if (n >= 6) return "VI";
    if (n >= 5) return "V";
    if (n >= 4) return "IV";
    if (n >= 3) return "III";
    if (n >= 2) return "II";
    if (n >= 1) return "I";
    if (n >= 0) return "N";
};

inter.renderRomanLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderRomanLower(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 5e3) return this.renderNumber(n, "#,##0");
    if (n >= 4e3) return "mmmm" + (n === 4e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 3e3) return "mmm" + (n === 3e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 2e3) return "mm" + (n === 2e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 1e3) return "m" + (n === 1e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 900) return "cm" + (n === 900 ? "" : this.renderRomanLower(n % 100));
    if (n >= 800) return "dccc" + (n === 800 ? "" : this.renderRomanLower(n % 100));
    if (n >= 700) return "dcc" + (n === 700 ? "" : this.renderRomanLower(n % 100));
    if (n >= 600) return "dc" + (n === 600 ? "" : this.renderRomanLower(n % 100));
    if (n >= 500) return "d" + (n === 500 ? "" : this.renderRomanLower(n % 100));
    if (n >= 400) return "cd" + (n === 400 ? "" : this.renderRomanLower(n % 100));
    if (n >= 300) return "ccc" + (n === 300 ? "" : this.renderRomanLower(n % 100));
    if (n >= 200) return "cc" + (n === 200 ? "" : this.renderRomanLower(n % 100));
    if (n >= 100) return "c" + (n === 100 ? "" : this.renderRomanLower(n % 100));
    if (n >= 90) return "xc" + (n === 90 ? "" : this.renderRomanLower(n % 10));
    if (n >= 80) return "lxxx" + (n === 80 ? "" : this.renderRomanLower(n % 10));
    if (n >= 70) return "lxx" + (n === 70 ? "" : this.renderRomanLower(n % 10));
    if (n >= 60) return "lx" + (n === 60 ? "" : this.renderRomanLower(n % 10));
    if (n >= 50) return "l" + (n === 50 ? "" : this.renderRomanLower(n % 10));
    if (n >= 40) return "xl" + (n === 40 ? "" : this.renderRomanLower(n % 10));
    if (n >= 30) return "xxx" + (n === 30 ? "" : this.renderRomanLower(n % 10));
    if (n >= 20) return "xx" + (n === 20 ? "" : this.renderRomanLower(n % 10));
    if (n >= 10) return "x" + (n === 10 ? "" : this.renderRomanLower(n % 10));
    if (n >= 9) return "ix";
    if (n >= 8) return "viii";
    if (n >= 7) return "vii";
    if (n >= 6) return "vi";
    if (n >= 5) return "v";
    if (n >= 4) return "iv";
    if (n >= 3) return "iii";
    if (n >= 2) return "ii";
    if (n >= 1) return "i";
    if (n >= 0) return "n";
};

inter.renderTamil = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderTamil(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e8) return this.renderNumber(n, "#,##,##0");
    if (n >= 1e6) return this.renderTamil(Math.floor(n / 1e6)) + "௱௲" + (n === 1e6 ? "" : this.renderTamilThousands(n % 1e6));
    if (n >= 2e3) return this.renderTamil(Math.floor(n / 1e3)) + "௲" + (n === 2e3 ? "" : this.renderTamil(n % 1e3));
    if (n >= 1e3) return "௲" + (n === 1e3 ? "" : this.renderTamil(n % 1e3));
    if (n >= 200) return this.renderTamil(Math.floor(n / 100)) + "௱" + (n === 200 ? "" : this.renderTamil(n % 100));
    if (n >= 100) return "௱" + (n === 100 ? "" : this.renderTamil(n % 100));
    if (n >= 20) return this.renderTamil(Math.floor(n / 10)) + "௰" + (n === 20 ? "" : this.renderTamil(n % 10));
    if (n >= 10) return "௰" + (n === 10 ? "" : this.renderTamil(n % 10));
    if (n >= 9) return "௯";
    if (n >= 8) return "௮";
    if (n >= 7) return "௭";
    if (n >= 6) return "௬";
    if (n >= 5) return "௫";
    if (n >= 4) return "௪";
    if (n >= 3) return "௩";
    if (n >= 2) return "௨";
    if (n >= 1) return "௧";
    if (n >= 0) return "௦";
};

inter.renderDigitsOrdinalMasculine = function(n) {
    if (n < 0) return "−" + this.renderDigitsOrdinalMasculine(-n);
    if (n >= 0) return this.renderNumber(n, "#,##0") + this.renderDordMascabbrev(n);
};

inter.renderSpelloutCardinalMasculine = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "moins " + this.renderSpelloutCardinalMasculine(-n);
    if (isFractional && n > 1) return this.renderSpelloutCardinalMasculine(Math.floor(n)) + " virgule " + this.renderSpelloutCardinalMasculine(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 2e15) return this.renderSpelloutLeading(Math.floor(n / 1e15)) + " billiards" + (n === 2e15 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e15));
    if (n >= 1e15) return "un billiard" + (n === 1e15 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e15));
    if (n >= 2e12) return this.renderSpelloutLeading(Math.floor(n / 1e12)) + " billions" + (n === 2e12 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e12));
    if (n >= 1e12) return "un billion" + (n === 1e12 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e12));
    if (n >= 2e9) return this.renderSpelloutLeading(Math.floor(n / 1e9)) + " milliards" + (n === 2e9 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e9));
    if (n >= 1e9) return "un milliard" + (n === 1e9 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e9));
    if (n >= 2e6) return this.renderSpelloutLeading(Math.floor(n / 1e6)) + " millions" + (n === 2e6 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e6));
    if (n >= 1e6) return "un million" + (n === 1e6 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e6));
    if (n >= 2e3) return this.renderSpelloutLeading(Math.floor(n / 1e3)) + " mille" + (n === 2e3 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e3));
    if (n >= 1e3) return "mille" + (n === 1e3 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e3));
    if (n >= 200) return this.renderSpelloutCardinalMasculine(Math.floor(n / 100)) + " cent" + this.renderCentsM(n % 100);
    if (n >= 100) return "cent" + (n === 100 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 100));
    if (n >= 80) return "quatre-vingt" + this.renderSubcentsM(n % 10);
    if (n >= 60) return "soixante" + (n === 60 ? "" : "-" + this.renderEtUn(n % 10));
    if (n >= 50) return "cinquante" + (n === 50 ? "" : "-" + this.renderEtUn(n % 10));
    if (n >= 40) return "quarante" + (n === 40 ? "" : "-" + this.renderEtUn(n % 10));
    if (n >= 30) return "trente" + (n === 30 ? "" : "-" + this.renderEtUn(n % 10));
    if (n >= 20) return "vingt" + (n === 20 ? "" : "-" + this.renderEtUn(n % 10));
    if (n >= 17) return "dix-" + this.renderSpelloutCardinalMasculine(n % 10);
    if (n >= 16) return "seize";
    if (n >= 15) return "quinze";
    if (n >= 14) return "quatorze";
    if (n >= 13) return "treize";
    if (n >= 12) return "douze";
    if (n >= 11) return "onze";
    if (n >= 10) return "dix";
    if (n >= 9) return "neuf";
    if (n >= 8) return "huit";
    if (n >= 7) return "sept";
    if (n >= 6) return "six";
    if (n >= 5) return "cinq";
    if (n >= 4) return "quatre";
    if (n >= 3) return "trois";
    if (n >= 2) return "deux";
    if (n >= 1) return "un";
    if (n >= 0) return "zéro";
};

inter.renderCyrillicLowerThousands = function(n) {
    if (n >= 900) return "҂ц" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 800) return "҂ѿ" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 700) return "҂ѱ" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 600) return "҂х" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 500) return "҂ф" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 400) return "҂у" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 300) return "҂т" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 200) return "҂с" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 100) return "҂р" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 90) return "҂ч" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 80) return "҂п" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 70) return "҂ѻ" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 60) return "҂ѯ" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 50) return "҂н" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 40) return "҂м" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 30) return "҂л" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 20) return "҂к" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 19) return "҂ѳ҃҂і";
    if (n >= 18) return "҂и҃҂і";
    if (n >= 17) return "҂з҃҂і";
    if (n >= 16) return "҂ѕ҃҂і";
    if (n >= 15) return "҂є҃҂і";
    if (n >= 14) return "҂д҃҂і";
    if (n >= 13) return "҂г҃҂і";
    if (n >= 12) return "҂в҃҂і";
    if (n >= 11) return "҂а҃҂і";
    if (n >= 10) return "҃҂і";
    if (n >= 9) return "҃҂ѳ";
    if (n >= 8) return "҃҂и";
    if (n >= 7) return "҃҂з";
    if (n >= 6) return "҃҂ѕ";
    if (n >= 5) return "҃҂є";
    if (n >= 4) return "҃҂д";
    if (n >= 3) return "҃҂г";
    if (n >= 2) return "҃҂в";
    if (n >= 1) return "҃҂а";
    if (n >= 0) return "҃";
};

inter.renderCyrillicLower110 = function(n) {
    if (n >= 10) return "і";
    if (n >= 9) return "ѳ";
    if (n >= 8) return "и";
    if (n >= 7) return "з";
    if (n >= 6) return "ѕ";
    if (n >= 5) return "є";
    if (n >= 4) return "д";
    if (n >= 3) return "г";
    if (n >= 2) return "в";
    if (n >= 1) return "а";
};

inter.renderCyrillicLowerPost = function(n) {
    if (n >= 1) return this.renderCyrillicLower(n);
    if (n >= 0) return "҃";
};

inter.renderCyrillicLowerFinal = function(n) {
    if (n >= 91) return "ч" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 90) return "҃ч";
    if (n >= 81) return "п" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 80) return "҃п";
    if (n >= 71) return "ѻ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 70) return "҃ѻ";
    if (n >= 61) return "ѯ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 60) return "҃ѯ";
    if (n >= 51) return "н" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 50) return "҃н";
    if (n >= 41) return "м" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 40) return "҃м";
    if (n >= 31) return "л" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 30) return "҃л";
    if (n >= 21) return "к" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 20) return "҃к";
    if (n >= 19) return "ѳ҃і";
    if (n >= 18) return "и҃і";
    if (n >= 17) return "з҃і";
    if (n >= 16) return "ѕ҃і";
    if (n >= 15) return "є҃і";
    if (n >= 14) return "д҃і";
    if (n >= 13) return "г҃і";
    if (n >= 12) return "в҃і";
    if (n >= 11) return "а҃і";
    if (n >= 1) return "҃" + this.renderCyrillicLower110(n);
    if (n >= 0) return "҃";
};

inter.renderEthiopicP3 = function(n) {
    if (n >= 1e12) return this.renderEthiopic(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1) return "፼፼፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼፼፼";
};

inter.renderEthiopicP2 = function(n) {
    if (n >= 1e8) return this.renderEthiopic(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1) return "፼፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼፼";
};

inter.renderEthiopicP1 = function(n) {
    if (n >= 1e4) return this.renderEthiopic(Math.floor(n / 1e4)) + "፼" + (n === 1e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 1) return "፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼";
};

inter.renderGreekNumeralMajuscules = function(n) {
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e16) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e16)) + "ΜΜΜΜ" + (n === 1e16 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e16));
    if (n >= 1e12) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e12)) + "ΜΜΜ" + (n === 1e12 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e12));
    if (n >= 1e8) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e8)) + "ΜΜ" + (n === 1e8 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e8));
    if (n >= 1e4) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e4)) + "Μ" + (n === 1e4 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e4));
    if (n >= 1e3) return "͵" + this.renderGreekNumeralMajuscules(Math.floor(n / 1e3)) + (n === 1e3 ? "" : this.renderGreekNumeralMajuscules(n % 1e3));
    if (n >= 900) return "Ϡ" + (n === 900 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 800) return "Ω" + (n === 800 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 700) return "Ψ" + (n === 700 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 600) return "Χ" + (n === 600 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 500) return "Φ" + (n === 500 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 400) return "Υ" + (n === 400 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 300) return "Τ" + (n === 300 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 200) return "Σ" + (n === 200 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 100) return "Ρ" + (n === 100 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 90) return "Ϟ" + (n === 90 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 80) return "Π" + (n === 80 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 70) return "Ο" + (n === 70 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 60) return "Ξ" + (n === 60 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 50) return "Ν" + (n === 50 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 40) return "Μ" + (n === 40 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 30) return "Λ" + (n === 30 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 20) return "Κ" + (n === 20 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 10) return "Ι" + (n === 10 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 9) return "Θ";
    if (n >= 8) return "Η";
    if (n >= 7) return "Ζ";
    if (n >= 6) return "Ϝ";
    if (n >= 5) return "Ε";
    if (n >= 4) return "Δ";
    if (n >= 3) return "Γ";
    if (n >= 2) return "Β";
    if (n >= 1) return "Α";
    if (n >= 0) return "𐆊";
};

inter.renderGreekNumeralMinuscules = function(n) {
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e16) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e16)) + "μμμμ" + (n === 1e16 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e16));
    if (n >= 1e12) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e12)) + "μμμ" + (n === 1e12 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e12));
    if (n >= 1e8) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e8)) + "μμ" + (n === 1e8 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e8));
    if (n >= 1e4) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e4)) + "μ" + (n === 1e4 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e4));
    if (n >= 1e3) return "͵" + this.renderGreekNumeralMinuscules(Math.floor(n / 1e3)) + (n === 1e3 ? "" : this.renderGreekNumeralMinuscules(n % 1e3));
    if (n >= 900) return "ϡ" + (n === 900 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 800) return "ω" + (n === 800 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 700) return "ψ" + (n === 700 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 600) return "χ" + (n === 600 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 500) return "φ" + (n === 500 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 400) return "υ" + (n === 400 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 300) return "τ" + (n === 300 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 200) return "σ" + (n === 200 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 100) return "ρ" + (n === 100 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 90) return "ϟ" + (n === 90 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 80) return "π" + (n === 80 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 70) return "ο" + (n === 70 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 60) return "ξ" + (n === 60 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 50) return "ν" + (n === 50 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 40) return "μ" + (n === 40 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 30) return "λ" + (n === 30 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 20) return "κ" + (n === 20 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 10) return "ι" + (n === 10 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 9) return "θ";
    if (n >= 8) return "η";
    if (n >= 7) return "ζ";
    if (n >= 6) return "ϝ";
    if (n >= 5) return "ε";
    if (n >= 4) return "δ";
    if (n >= 3) return "γ";
    if (n >= 2) return "β";
    if (n >= 1) return "α";
    if (n >= 0) return "𐆊";
};

inter.renderHebrewThousands = function(n) {
    if (n >= 401) return this.renderHebrew(n) + "׳";
    if (n >= 100) return this.renderHebrew(n) + (n === 100 ? "" : "׳");
    if (n >= 10) return this.renderHebrew(n) + (n === 10 ? "" : "׳");
    if (n >= 0) return this.renderHebrew(n);
};

inter.renderHebrew099 = function(n) {
    if (n >= 91) return "צ״" + this.renderHebrewItem(n % 10);
    if (n >= 90) return "״צ";
    if (n >= 81) return "פ״" + this.renderHebrewItem(n % 10);
    if (n >= 80) return "״פ";
    if (n >= 71) return "ע״" + this.renderHebrewItem(n % 10);
    if (n >= 70) return "״ע";
    if (n >= 61) return "ס״" + this.renderHebrewItem(n % 10);
    if (n >= 60) return "״ס";
    if (n >= 51) return "נ״" + this.renderHebrewItem(n % 10);
    if (n >= 50) return "״נ";
    if (n >= 41) return "מ״" + this.renderHebrewItem(n % 10);
    if (n >= 40) return "״מ";
    if (n >= 31) return "ל״" + this.renderHebrewItem(n % 10);
    if (n >= 30) return "״ל";
    if (n >= 21) return "כ״" + this.renderHebrewItem(n % 10);
    if (n >= 20) return "״כ";
    if (n >= 17) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "ט״ז";
    if (n >= 15) return "ט״ו";
    if (n >= 11) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 1) return "״" + this.renderHebrewItem(n);
    if (n >= 0) return "׳";
};

inter.renderHebrewItem = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderHebrewItem(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 2100) return this.renderNumber(n, "#,##0");
    if (n >= 2e3) return "תתתתת" + (n === 2e3 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1900) return "תתתתש" + (n === 1900 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1800) return "תתתתר" + (n === 1800 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1700) return "תתתתק" + (n === 1700 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1600) return "תתתת" + (n === 1600 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1500) return "תתתש" + (n === 1500 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1400) return "תתתר" + (n === 1400 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1300) return "תתתק" + (n === 1300 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1200) return "תתת" + (n === 1200 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1100) return "תתש" + (n === 1100 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1e3) return "תתר" + (n === 1e3 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 900) return "תתק" + (n === 900 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 800) return "תת" + (n === 800 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 745) return "תש" + this.renderHebrewItem(n % 100);
    if (n >= 744) return "תשדמ";
    if (n >= 700) return "תש" + (n === 700 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 699) return "תר" + this.renderHebrewItem(n % 100);
    if (n >= 698) return "תרחצ";
    if (n >= 600) return "תר" + (n === 600 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 500) return "תק" + (n === 500 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 400) return "ת" + (n === 400 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 345) return "ש" + this.renderHebrewItem(n % 100);
    if (n >= 344) return "שדמ";
    if (n >= 305) return "ש" + this.renderHebrewItem(n % 100);
    if (n >= 304) return "דש";
    if (n >= 300) return "ש" + (n === 300 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 299) return "ר" + this.renderHebrewItem(n % 100);
    if (n >= 298) return "רחצ";
    if (n >= 200) return "ר" + (n === 200 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 100) return "ק" + (n === 100 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 90) return "צ" + (n === 90 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 80) return "פ" + (n === 80 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 70) return "ע" + (n === 70 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 60) return "ס" + (n === 60 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 50) return "נ" + (n === 50 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 40) return "מ" + (n === 40 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 30) return "ל" + (n === 30 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 20) return "כ" + (n === 20 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 17) return "י" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "טז";
    if (n >= 15) return "טו";
    if (n >= 10) return "י" + (n === 10 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 9) return "ט";
    if (n >= 8) return "ח";
    if (n >= 7) return "ז";
    if (n >= 6) return "ו";
    if (n >= 5) return "ה";
    if (n >= 4) return "ד";
    if (n >= 3) return "ג";
    if (n >= 2) return "ב";
    if (n >= 1) return "א";
    if (n >= 0) return "״";
};

inter.renderTamilThousands = function(n) {
    if (n >= 1e3) return this.renderTamilThousands(Math.floor(n / 1e3)) + "௲" + (n === 1e3 ? "" : this.renderTamilThousands(n % 1e3));
    if (n >= 0) return this.renderTamil(n);
};

inter.renderDordMascabbrev = function(n) {
    if (n >= 2) return "e";
    if (n >= 1) return "er";
    if (n >= 0) return "e";
};

inter.renderSpelloutLeading = function(n) {
    if (n >= 1e3) return this.renderSpelloutCardinalMasculine(n);
    if (n >= 200) return this.renderSpelloutLeading(Math.floor(n / 100)) + " cent" + (n === 200 ? "" : " " + this.renderSpelloutLeading(n % 100));
    if (n >= 100) return "cent" + (n === 100 ? "" : " " + this.renderSpelloutLeading(n % 100));
    if (n >= 80) return "quatre-vingt" + (n === 80 ? "" : "-" + this.renderSpelloutLeading(n % 10));
    if (n >= 0) return this.renderSpelloutCardinalMasculine(n);
};

inter.renderCentsM = function(n) {
    if (n >= 1) return " " + this.renderSpelloutCardinalMasculine(n);
    if (n >= 0) return "s";
};

inter.renderSubcentsM = function(n) {
    if (n >= 1) return "-" + this.renderSpelloutCardinalMasculine(n);
    if (n >= 0) return "s";
};

inter.renderEtUn = function(n) {
    if (n >= 12) return this.renderSpelloutCardinalMasculine(n);
    if (n >= 11) return "et-onze";
    if (n >= 2) return this.renderSpelloutCardinalMasculine(n);
    if (n >= 1) return "et-un";
};

inter.renderEthiopicP = function(n) {
    if (n >= 1e16) return this.renderEthiopicP(Math.floor(n / 1e16)) + "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 1e12) return this.renderEthiopicP(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1e8) return this.renderEthiopicP(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1e4) return this.renderEthiopicP(Math.floor(n / 1e4)) + "፼" + (n === 1e4 ? "" : this.renderEthiopicP(n % 1e4));
    if (n >= 1) return this.renderEthiopic(n);
};

inter.timeZones = [].concat(P.timeZones.slice(0, 7), {
    id: "Pacific/Marquesas",
    regionId: "061",
    utcStandardOffsetSeconds: -34200,
    displayName: "Marquises",
    countryId: "PF"
}, P.timeZones.slice(8, 30), {
    id: "America/Mazatlan",
    regionId: "013",
    utcStandardOffsetSeconds: -25200,
    displayName: "Mazatlán",
    countryId: "MX"
}, P.timeZones.slice(31, 34), {
    id: "America/Bahia_Banderas",
    regionId: "013",
    utcStandardOffsetSeconds: -21600,
    displayName: "Bahia de Banderas",
    countryId: "MX"
}, P.timeZones[35], {
    id: "America/North_Dakota/Beulah",
    regionId: "021",
    utcStandardOffsetSeconds: -21600,
    displayName: "Beulah (Dakota du Nord)",
    countryId: "US"
}, {
    id: "America/North_Dakota/Center",
    regionId: "021",
    utcStandardOffsetSeconds: -21600,
    displayName: "Center (Dakota du Nord)",
    countryId: "US"
}, P.timeZones.slice(38, 41), P.timeZones[42], {
    id: "Pacific/Galapagos",
    regionId: "005",
    utcStandardOffsetSeconds: -21600,
    displayName: "Galápagos",
    countryId: "EC"
}, P.timeZones[44], {
    id: "America/Indiana/Knox",
    regionId: "021",
    utcStandardOffsetSeconds: -21600,
    displayName: "Knox [Indiana]",
    countryId: "US"
}, P.timeZones.slice(46, 49), {
    id: "America/Mexico_City",
    regionId: "013",
    utcStandardOffsetSeconds: -21600,
    displayName: "Mexico",
    countryId: "MX"
}, P.timeZones[51], {
    id: "America/Merida",
    regionId: "013",
    utcStandardOffsetSeconds: -21600,
    displayName: "Mérida",
    countryId: "MX"
}, {
    id: "America/North_Dakota/New_Salem",
    regionId: "021",
    utcStandardOffsetSeconds: -21600,
    displayName: "New Salem (Dakota du Nord)",
    countryId: "US"
}, P.timeZones.slice(53, 58), {
    id: "America/Indiana/Tell_City",
    regionId: "021",
    utcStandardOffsetSeconds: -21600,
    displayName: "Tell City [Indiana]",
    countryId: "US"
}, {
    id: "America/Tegucigalpa",
    regionId: "013",
    utcStandardOffsetSeconds: -21600,
    displayName: "Tégucigalpa",
    countryId: "HN"
}, P.timeZones[60], {
    id: "Pacific/Easter",
    regionId: "005",
    utcStandardOffsetSeconds: -21600,
    displayName: "Île de Pâques",
    countryId: "CL"
}, P.timeZones.slice(61, 63), {
    id: "America/Cancun",
    regionId: "013",
    utcStandardOffsetSeconds: -18e3,
    displayName: "Cancún",
    countryId: "MX"
}, {
    id: "America/Cayman",
    regionId: "029",
    utcStandardOffsetSeconds: -18e3,
    displayName: "Caïmans",
    countryId: "KY"
}, {
    id: "America/Detroit",
    regionId: "021",
    utcStandardOffsetSeconds: -18e3,
    displayName: "Détroit",
    countryId: "US"
}, {
    id: "America/Eirunepe",
    regionId: "005",
    utcStandardOffsetSeconds: -18e3,
    displayName: "Eirunepé",
    countryId: "BR"
}, P.timeZones.slice(67, 69), P.timeZones.slice(70, 72), {
    id: "America/Jamaica",
    regionId: "029",
    utcStandardOffsetSeconds: -18e3,
    displayName: "Jamaïque",
    countryId: "JM"
}, {
    id: "America/Havana",
    regionId: "029",
    utcStandardOffsetSeconds: -18e3,
    displayName: "La Havane",
    countryId: "CU"
}, P.timeZones.slice(73, 75), {
    id: "America/Indiana/Marengo",
    regionId: "021",
    utcStandardOffsetSeconds: -18e3,
    displayName: "Marengo [Indiana]",
    countryId: "US"
}, {
    id: "America/Kentucky/Monticello",
    regionId: "021",
    utcStandardOffsetSeconds: -18e3,
    displayName: "Monticello [Kentucky]",
    countryId: "US"
}, P.timeZones.slice(77, 80), {
    id: "America/Indiana/Petersburg",
    regionId: "021",
    utcStandardOffsetSeconds: -18e3,
    displayName: "Petersburg [Indiana]",
    countryId: "US"
}, P.timeZones.slice(81, 84), {
    id: "America/Indiana/Vevay",
    regionId: "021",
    utcStandardOffsetSeconds: -18e3,
    displayName: "Vevay [Indiana]",
    countryId: "US"
}, {
    id: "America/Indiana/Vincennes",
    regionId: "021",
    utcStandardOffsetSeconds: -18e3,
    displayName: "Vincennes [Indiana]",
    countryId: "US"
}, {
    id: "America/Indiana/Winamac",
    regionId: "021",
    utcStandardOffsetSeconds: -18e3,
    displayName: "Winamac [Indiana]",
    countryId: "US"
}, P.timeZones.slice(87, 90), {
    id: "America/Asuncion",
    regionId: "005",
    utcStandardOffsetSeconds: -14400,
    displayName: "Asunción",
    countryId: "PY"
}, {
    id: "Atlantic/Bermuda",
    regionId: "021",
    utcStandardOffsetSeconds: -14400,
    displayName: "Bermudes",
    countryId: "BM"
}, P.timeZones.slice(93, 97), {
    id: "America/Cuiaba",
    regionId: "005",
    utcStandardOffsetSeconds: -14400,
    displayName: "Cuiabá",
    countryId: "BR"
}, {
    id: "America/Curacao",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "Curaçao",
    countryId: "CW"
}, {
    id: "America/Dominica",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "Dominique",
    countryId: "DM"
}, P.timeZones.slice(100, 102), {
    id: "America/Grenada",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "Grenade",
    countryId: "GD"
}, P.timeZones.slice(103, 107), {
    id: "America/Barbados",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "La Barbade",
    countryId: "BB"
}, P.timeZones.slice(107, 109), {
    id: "America/Manaus",
    regionId: "005",
    utcStandardOffsetSeconds: -14400,
    displayName: "Manaos",
    countryId: "BR"
}, P.timeZones.slice(110, 114), {
    id: "America/Port_of_Spain",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "Port-d’Espagne",
    countryId: "TT"
}, {
    id: "America/Puerto_Rico",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "Porto Rico",
    countryId: "PR"
}, P.timeZones[115], {
    id: "America/St_Barthelemy",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "Saint-Barthélemy",
    countryId: "BL"
}, {
    id: "America/Santo_Domingo",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "Saint-Domingue",
    countryId: "DO"
}, {
    id: "America/St_Kitts",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "Saint-Kitts",
    countryId: "KN"
}, {
    id: "America/St_Thomas",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "Saint-Thomas",
    countryId: "VI"
}, {
    id: "America/St_Vincent",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "Saint-Vincent",
    countryId: "VC"
}, {
    id: "America/St_Lucia",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "Sainte-Lucie",
    countryId: "LC"
}, P.timeZones[117], {
    id: "America/Thule",
    regionId: "021",
    utcStandardOffsetSeconds: -14400,
    displayName: "Thulé",
    countryId: "GL"
}, P.timeZones[125], {
    id: "America/St_Johns",
    regionId: "021",
    utcStandardOffsetSeconds: -12600,
    displayName: "Saint-Jean de Terre-Neuve",
    countryId: "CA"
}, {
    id: "America/Araguaina",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "Araguaína",
    countryId: "BR"
}, P.timeZones[128], {
    id: "America/Belem",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "Belém",
    countryId: "BR"
}, P.timeZones.slice(130, 137), {
    id: "America/Maceio",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "Maceió",
    countryId: "BR"
}, P.timeZones.slice(138, 145), P.timeZones[146], {
    id: "America/Argentina/Rio_Gallegos",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "Río Gallegos",
    countryId: "AR"
}, P.timeZones.slice(147, 150), {
    id: "America/Santarem",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "Santarém",
    countryId: "BR"
}, P.timeZones[152], {
    id: "America/Sao_Paulo",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "São Paulo",
    countryId: "BR"
}, {
    id: "America/Argentina/Tucuman",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "Tucumán",
    countryId: "AR"
}, {
    id: "America/Argentina/Ushuaia",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "Ushuaïa",
    countryId: "AR"
}, {
    id: "Atlantic/South_Georgia",
    utcStandardOffsetSeconds: -7200,
    displayName: "Géorgie du Sud",
    countryId: "GS"
}, P.timeZones.slice(155, 157), {
    id: "Atlantic/Azores",
    regionId: "039",
    utcStandardOffsetSeconds: -3600,
    displayName: "Açores",
    countryId: "PT"
}, {
    id: "Atlantic/Cape_Verde",
    regionId: "011",
    utcStandardOffsetSeconds: -3600,
    displayName: "Cap-Vert",
    countryId: "CV"
}, P.timeZones.slice(160, 166), P.timeZones.slice(167, 173), {
    id: "Europe/Guernsey",
    regionId: "154",
    utcStandardOffsetSeconds: 0,
    displayName: "Guernesey",
    countryId: "GG"
}, P.timeZones[175], {
    id: "Europe/Lisbon",
    regionId: "039",
    utcStandardOffsetSeconds: 0,
    displayName: "Lisbonne",
    countryId: "PT"
}, {
    id: "Africa/Lome",
    regionId: "011",
    utcStandardOffsetSeconds: 0,
    displayName: "Lomé",
    countryId: "TG"
}, {
    id: "Europe/London",
    regionId: "154",
    utcStandardOffsetSeconds: 0,
    displayName: "Londres",
    countryId: "GB"
}, {
    id: "Atlantic/Madeira",
    regionId: "039",
    utcStandardOffsetSeconds: 0,
    displayName: "Madère",
    countryId: "PT"
}, P.timeZones.slice(180, 184), {
    id: "Atlantic/St_Helena",
    regionId: "011",
    utcStandardOffsetSeconds: 0,
    displayName: "Sainte-Hélène",
    countryId: "SH"
}, {
    id: "Africa/Sao_Tome",
    regionId: "017",
    utcStandardOffsetSeconds: 0,
    displayName: "São Tomé",
    countryId: "ST"
}, P.timeZones[186], {
    id: "Europe/Isle_of_Man",
    regionId: "154",
    utcStandardOffsetSeconds: 0,
    displayName: "Île de Man",
    countryId: "IM"
}, {
    id: "Atlantic/Canary",
    regionId: "039",
    utcStandardOffsetSeconds: 0,
    displayName: "Îles Canaries",
    countryId: "ES"
}, {
    id: "Africa/Algiers",
    regionId: "015",
    utcStandardOffsetSeconds: 3600,
    displayName: "Alger",
    countryId: "DZ"
}, P.timeZones[188], {
    id: "Europe/Andorra",
    regionId: "039",
    utcStandardOffsetSeconds: 3600,
    displayName: "Andorre",
    countryId: "AD"
}, P.timeZones.slice(190, 195), {
    id: "Europe/Brussels",
    regionId: "155",
    utcStandardOffsetSeconds: 3600,
    displayName: "Bruxelles",
    countryId: "BE"
}, P.timeZones[196], {
    id: "Europe/Busingen",
    regionId: "155",
    utcStandardOffsetSeconds: 3600,
    displayName: "Büsingen",
    countryId: "DE"
}, P.timeZones.slice(198, 200), {
    id: "Europe/Copenhagen",
    regionId: "154",
    utcStandardOffsetSeconds: 3600,
    displayName: "Copenhague",
    countryId: "DK"
}, P.timeZones[201], P.timeZones.slice(203, 206), {
    id: "Africa/El_Aaiun",
    regionId: "015",
    utcStandardOffsetSeconds: 3600,
    displayName: "Laâyoune",
    countryId: "EH"
}, {
    id: "Europe/Vatican",
    regionId: "039",
    utcStandardOffsetSeconds: 3600,
    displayName: "Le Vatican",
    countryId: "VA"
}, P.timeZones.slice(206, 213), {
    id: "Europe/Malta",
    regionId: "039",
    utcStandardOffsetSeconds: 3600,
    displayName: "Malte",
    countryId: "MT"
}, P.timeZones[214], P.timeZones[216], {
    id: "Africa/Ndjamena",
    regionId: "017",
    utcStandardOffsetSeconds: 3600,
    displayName: "N’Djamena",
    countryId: "TD"
}, P.timeZones.slice(217, 223), {
    id: "Europe/San_Marino",
    regionId: "039",
    utcStandardOffsetSeconds: 3600,
    displayName: "Saint-Marin",
    countryId: "SM"
}, P.timeZones.slice(224, 227), {
    id: "Europe/Tirane",
    regionId: "039",
    utcStandardOffsetSeconds: 3600,
    displayName: "Tirana",
    countryId: "AL"
}, P.timeZones.slice(228, 230), {
    id: "Europe/Warsaw",
    regionId: "151",
    utcStandardOffsetSeconds: 3600,
    displayName: "Varsovie",
    countryId: "PL"
}, {
    id: "Europe/Vienna",
    regionId: "155",
    utcStandardOffsetSeconds: 3600,
    displayName: "Vienne",
    countryId: "AT"
}, P.timeZones.slice(233, 235), {
    id: "Europe/Athens",
    regionId: "039",
    utcStandardOffsetSeconds: 7200,
    displayName: "Athènes",
    countryId: "GR"
}, {
    id: "Asia/Beirut",
    regionId: "145",
    utcStandardOffsetSeconds: 7200,
    displayName: "Beyrouth",
    countryId: "LB"
}, P.timeZones[237], {
    id: "Europe/Bucharest",
    regionId: "151",
    utcStandardOffsetSeconds: 7200,
    displayName: "Bucarest",
    countryId: "RO"
}, P.timeZones[239], P.timeZones.slice(241, 246), P.timeZones[247], {
    id: "Asia/Hebron",
    regionId: "145",
    utcStandardOffsetSeconds: 7200,
    displayName: "Hébron",
    countryId: "PS"
}, P.timeZones.slice(249, 251), {
    id: "Asia/Jerusalem",
    regionId: "145",
    utcStandardOffsetSeconds: 7200,
    displayName: "Jérusalem",
    countryId: "IL"
}, P.timeZones.slice(251, 255), {
    id: "Africa/Cairo",
    regionId: "015",
    utcStandardOffsetSeconds: 7200,
    displayName: "Le Caire",
    countryId: "EG"
}, P.timeZones.slice(255, 261), {
    id: "Asia/Nicosia",
    regionId: "145",
    utcStandardOffsetSeconds: 7200,
    displayName: "Nicosie",
    countryId: "CY"
}, P.timeZones.slice(262, 265), {
    id: "Africa/Tripoli",
    regionId: "015",
    utcStandardOffsetSeconds: 7200,
    displayName: "Tripoli (Libye)",
    countryId: "LY"
}, P.timeZones.slice(266, 268), {
    id: "Africa/Addis_Ababa",
    regionId: "014",
    utcStandardOffsetSeconds: 10800,
    displayName: "Addis-Abeba",
    countryId: "ET"
}, P.timeZones.slice(269, 273), {
    id: "Asia/Baghdad",
    regionId: "145",
    utcStandardOffsetSeconds: 10800,
    displayName: "Bagdad",
    countryId: "IQ"
}, {
    id: "Asia/Bahrain",
    regionId: "145",
    utcStandardOffsetSeconds: 10800,
    displayName: "Bahreïn",
    countryId: "BH"
}, {
    id: "Indian/Comoro",
    regionId: "014",
    utcStandardOffsetSeconds: 10800,
    displayName: "Comores",
    countryId: "KM"
}, {
    id: "Asia/Damascus",
    regionId: "145",
    utcStandardOffsetSeconds: 10800,
    displayName: "Damas",
    countryId: "SY"
}, P.timeZones.slice(277, 282), {
    id: "Asia/Kuwait",
    regionId: "145",
    utcStandardOffsetSeconds: 10800,
    displayName: "Koweït",
    countryId: "KW"
}, P.timeZones.slice(283, 285), {
    id: "Africa/Mogadishu",
    regionId: "014",
    utcStandardOffsetSeconds: 10800,
    displayName: "Mogadiscio",
    countryId: "SO"
}, {
    id: "Europe/Moscow",
    regionId: "151",
    utcStandardOffsetSeconds: 10800,
    displayName: "Moscou",
    countryId: "RU"
}, P.timeZones.slice(287, 289), {
    id: "Asia/Riyadh",
    regionId: "145",
    utcStandardOffsetSeconds: 10800,
    displayName: "Riyad",
    countryId: "SA"
}, {
    id: "Antarctica/Syowa",
    utcStandardOffsetSeconds: 10800,
    displayName: "Showa",
    countryId: "AQ"
}, P.timeZones[290], P.timeZones[292], {
    id: "Asia/Tehran",
    regionId: "034",
    utcStandardOffsetSeconds: 12600,
    displayName: "Téhéran",
    countryId: "IR"
}, P.timeZones[294], {
    id: "Asia/Baku",
    regionId: "145",
    utcStandardOffsetSeconds: 14400,
    displayName: "Bakou",
    countryId: "AZ"
}, {
    id: "Asia/Dubai",
    regionId: "145",
    utcStandardOffsetSeconds: 14400,
    displayName: "Dubaï",
    countryId: "AE"
}, {
    id: "Asia/Yerevan",
    regionId: "145",
    utcStandardOffsetSeconds: 14400,
    displayName: "Erevan",
    countryId: "AM"
}, {
    id: "Indian/Reunion",
    regionId: "014",
    utcStandardOffsetSeconds: 14400,
    displayName: "La Réunion",
    countryId: "RE"
}, {
    id: "Indian/Mahe",
    regionId: "014",
    utcStandardOffsetSeconds: 14400,
    displayName: "Mahé",
    countryId: "SC"
}, {
    id: "Asia/Muscat",
    regionId: "145",
    utcStandardOffsetSeconds: 14400,
    displayName: "Mascate",
    countryId: "OM"
}, {
    id: "Indian/Mauritius",
    regionId: "014",
    utcStandardOffsetSeconds: 14400,
    displayName: "Maurice",
    countryId: "MU"
}, P.timeZones.slice(301, 303), {
    id: "Asia/Tbilisi",
    regionId: "145",
    utcStandardOffsetSeconds: 14400,
    displayName: "Tbilissi",
    countryId: "GE"
}, P.timeZones[304], {
    id: "Asia/Kabul",
    regionId: "034",
    utcStandardOffsetSeconds: 16200,
    displayName: "Kaboul",
    countryId: "AF"
}, {
    id: "Asia/Ashgabat",
    regionId: "143",
    utcStandardOffsetSeconds: 18e3,
    displayName: "Achgabat",
    countryId: "TM"
}, {
    id: "Asia/Aqtau",
    regionId: "143",
    utcStandardOffsetSeconds: 18e3,
    displayName: "Aktaou",
    countryId: "KZ"
}, {
    id: "Asia/Aqtobe",
    regionId: "143",
    utcStandardOffsetSeconds: 18e3,
    displayName: "Aktioubinsk",
    countryId: "KZ"
}, P.timeZones[310], {
    id: "Asia/Dushanbe",
    regionId: "143",
    utcStandardOffsetSeconds: 18e3,
    displayName: "Douchanbé",
    countryId: "TJ"
}, {
    id: "Asia/Yekaterinburg",
    regionId: "151",
    utcStandardOffsetSeconds: 18e3,
    displayName: "Ekaterinbourg",
    countryId: "RU"
}, P.timeZones.slice(312, 314), {
    id: "Asia/Qyzylorda",
    regionId: "143",
    utcStandardOffsetSeconds: 18e3,
    displayName: "Kzyl Orda",
    countryId: "KZ"
}, P.timeZones.slice(314, 316), {
    id: "Asia/Oral",
    regionId: "143",
    utcStandardOffsetSeconds: 18e3,
    displayName: "Ouralsk",
    countryId: "KZ"
}, {
    id: "Asia/Samarkand",
    regionId: "143",
    utcStandardOffsetSeconds: 18e3,
    displayName: "Samarcande",
    countryId: "UZ"
}, {
    id: "Asia/Tashkent",
    regionId: "143",
    utcStandardOffsetSeconds: 18e3,
    displayName: "Tachkent",
    countryId: "UZ"
}, P.timeZones.slice(321, 324), {
    id: "Asia/Almaty",
    regionId: "143",
    utcStandardOffsetSeconds: 21600,
    displayName: "Alma Ata",
    countryId: "KZ"
}, {
    id: "Asia/Bishkek",
    regionId: "143",
    utcStandardOffsetSeconds: 21600,
    displayName: "Bichkek",
    countryId: "KG"
}, P.timeZones.slice(326, 331), P.timeZones[332], {
    id: "Asia/Urumqi",
    regionId: "030",
    utcStandardOffsetSeconds: 21600,
    displayName: "Ürümqi",
    countryId: "CN"
}, P.timeZones.slice(333, 342), {
    id: "Asia/Krasnoyarsk",
    regionId: "151",
    utcStandardOffsetSeconds: 25200,
    displayName: "Krasnoïarsk",
    countryId: "RU"
}, P.timeZones[343], {
    id: "Asia/Novosibirsk",
    regionId: "151",
    utcStandardOffsetSeconds: 25200,
    displayName: "Novossibirsk",
    countryId: "RU"
}, P.timeZones.slice(345, 350), P.timeZones[351], {
    id: "Asia/Irkutsk",
    regionId: "151",
    utcStandardOffsetSeconds: 28800,
    displayName: "Irkoutsk",
    countryId: "RU"
}, P.timeZones.slice(353, 355), {
    id: "Asia/Macau",
    regionId: "030",
    utcStandardOffsetSeconds: 28800,
    displayName: "Macao",
    countryId: "MO"
}, {
    id: "Asia/Makassar",
    regionId: "035",
    utcStandardOffsetSeconds: 28800,
    displayName: "Macassar",
    countryId: "ID"
}, {
    id: "Asia/Manila",
    regionId: "035",
    utcStandardOffsetSeconds: 28800,
    displayName: "Manille",
    countryId: "PH"
}, {
    id: "Asia/Ulaanbaatar",
    regionId: "030",
    utcStandardOffsetSeconds: 28800,
    displayName: "Oulan-Bator",
    countryId: "MN"
}, P.timeZones.slice(358, 360), {
    id: "Asia/Singapore",
    regionId: "035",
    utcStandardOffsetSeconds: 28800,
    displayName: "Singapour",
    countryId: "SG"
}, P.timeZones[361], {
    id: "Asia/Choibalsan",
    regionId: "030",
    utcStandardOffsetSeconds: 28800,
    displayName: "Tchoïbalsan",
    countryId: "MN"
}, P.timeZones[363], P.timeZones[365], {
    id: "Asia/Yakutsk",
    regionId: "151",
    utcStandardOffsetSeconds: 32400,
    displayName: "Iakoutsk",
    countryId: "RU"
}, P.timeZones.slice(366, 370), {
    id: "Asia/Seoul",
    regionId: "030",
    utcStandardOffsetSeconds: 32400,
    displayName: "Séoul",
    countryId: "KR"
}, {
    id: "Asia/Chita",
    regionId: "151",
    utcStandardOffsetSeconds: 32400,
    displayName: "Tchita",
    countryId: "RU"
}, P.timeZones[371], {
    id: "Australia/Adelaide",
    regionId: "053",
    utcStandardOffsetSeconds: 34200,
    displayName: "Adélaïde",
    countryId: "AU"
}, P.timeZones.slice(374, 392), P.timeZones.slice(393, 397), {
    id: "Pacific/Noumea",
    regionId: "054",
    utcStandardOffsetSeconds: 39600,
    displayName: "Nouméa",
    countryId: "NC"
}, P.timeZones[398], {
    id: "Asia/Sakhalin",
    regionId: "151",
    utcStandardOffsetSeconds: 39600,
    displayName: "Sakhaline",
    countryId: "RU"
}, P.timeZones[400], {
    id: "Pacific/Efate",
    regionId: "054",
    utcStandardOffsetSeconds: 39600,
    displayName: "Éfaté",
    countryId: "VU"
}, P.timeZones.slice(401, 403), {
    id: "Pacific/Fiji",
    regionId: "054",
    utcStandardOffsetSeconds: 43200,
    displayName: "Fidji",
    countryId: "FJ"
}, P.timeZones[404], {
    id: "Asia/Kamchatka",
    regionId: "151",
    utcStandardOffsetSeconds: 43200,
    displayName: "Kamtchatka",
    countryId: "RU"
}, P.timeZones.slice(406, 419));

inter.territories = [ _kckd376, _kckd413, _kckd465, _kckd466, _kckd408, _kckd481, _kckd471, _kckd490, _kckd256, _kckd257, _kckd336, _kckd472, _kckd457, _kckd493, _kckd427, _kckd258, _kckd230, _kckd299, _kckd158, _kckd437, _kckd414, _kckd337, _kckd259, _kckd198, _kckd387, _kckd452, _kckd445, _kckd458, _kckd467, _kckd454, _kckd446, _kckd338, _kckd300, _kckd377, _kckd260, _kckd261, _kckd356, _kckd262, _kckd301, _kckd231, _kckd302, _kckd263, _kckd378, _kckd264, _kckd438, _kckd303, _kckd428, _kckd232, _kckd304, _kckd388, _kckd265, _kckd199, _kckd305, _kckd306, _kckd233, _kckd307, _kckd419, _kckd176, _kckd200, _kckd201, _kckd234, _kckd308, _kckd266, _kckd429, _kckd409, _kckd398, _kckd389, _kckd357, _kckd267, _kckd179, _kckd268, _kckd399, _kckd309, _kckd166, _kckd310, _kckd339, _kckd379, _kckd269, _kckd270, _kckd410, _kckd459, _kckd477, _kckd478, _kckd489, _kckd202, _kckd311, _kckd235, _kckd203, _kckd236, _kckd204, _kckd340, _kckd271, _kckd341, _kckd205, _kckd358, _kckd180, _kckd342, _kckd343, _kckd237, _kckd439, _kckd400, _kckd238, _kckd420, _kckd272, _kckd460, _kckd206, _kckd312, _kckd273, _kckd181, _kckd344, _kckd182, _kckd183, _kckd274, _kckd275, _kckd239, _kckd240, _kckd313, _kckd207, _kckd241, _kckd314, _kckd359, _kckd208, _kckd390, _kckd315, _kckd276, _kckd242, _kckd360, _kckd184, _kckd277, _kckd316, _kckd209, _kckd210, _kckd278, _kckd401, _kckd317, _kckd361, _kckd345, _kckd362, _kckd318, _kckd243, _kckd319, _kckd185, _kckd211, _kckd212, _kckd363, _kckd279, _kckd364, _kckd280, _kckd281, _kckd320, _kckd244, _kckd132, _kckd321, _kckd365, _kckd366, _kckd367, _kckd440, _kckd430, _kckd282, _kckd213, _kckd346, _kckd214, _kckd283, _kckd186, _kckd284, _kckd441, _kckd421, _kckd215, _kckd415, _kckd187, _kckd285, _kckd380, _kckd322, _kckd245, _kckd246, _kckd473, _kckd323, _kckd324, _kckd442, _kckd381, _kckd286, _kckd431, _kckd447, _kckd368, _kckd325, _kckd216, _kckd217, _kckd487, _kckd468, _kckd326, _kckd382, _kckd247, _kckd248, _kckd474, _kckd455, _kckd443, _kckd432, _kckd422, _kckd479, _kckd383, _kckd391, _kckd499, _kckd469, _kckd494, _kckd402, _kckd392, _kckd218, _kckd433, _kckd451, _kckd249, _kckd369, _kckd393, _kckd347, _kckd348, _kckd327, _kckd287, _kckd250, _kckd403, _kckd349, _kckd251, _kckd328, _kckd219, _kckd453, _kckd350, _kckd220, _kckd288, _kckd384, _kckd329, _kckd252, _kckd221, _kckd394, _kckd475, _kckd470, _kckd351, _kckd411, _kckd188, _kckd330, _kckd222, _kckd434, _kckd177, _kckd289, _kckd395, _kckd290, _kckd253, _kckd291, _kckd292, _kckd293, _kckd352, _kckd294, _kckd423, _kckd223, _kckd254, _kckd331, _kckd488, {
    id: "QO",
    displayName: "régions éloignées de l’Océanie",
    regionId: "009",
    hasTimeZones: false
}, _kckd255, _kckd448, _kckd332, _kckd333, _kckd480, _kckd482, _kckd370, _kckd334, _kckd159, _kckd167, _kckd173, _kckd385, _kckd371, _kckd189, _kckd169, _kckd396, _kckd146, _kckd353, _kckd372, _kckd335, _kckd412, _kckd456, _kckd404, _kckd405, _kckd397, _kckd461, _kckd476, _kckd483, _kckd462, _kckd373 ];

inter.regions = [ _kckd413, _kckd465, _kckd466, _kckd481, _kckd471, _kckd490, _kckd472, _kckd457, _kckd493, _kckd427, _kckd387, _kckd452, _kckd445, _kckd458, _kckd467, _kckd454, _kckd446, _kckd419, _kckd410, _kckd459, _kckd477, _kckd478, _kckd489, _kckd132, _kckd430, _kckd415, _kckd431, _kckd488 ];

inter.countries = [ _kckd376, _kckd408, _kckd256, _kckd257, _kckd336, _kckd258, _kckd230, _kckd299, _kckd158, _kckd437, _kckd414, _kckd337, _kckd259, _kckd198, _kckd338, _kckd300, _kckd377, _kckd260, _kckd261, _kckd356, _kckd262, _kckd301, _kckd231, _kckd302, _kckd263, _kckd378, _kckd264, _kckd438, _kckd303, _kckd428, _kckd232, _kckd304, _kckd388, _kckd265, _kckd199, _kckd305, _kckd306, _kckd233, _kckd307, _kckd176, _kckd200, _kckd201, _kckd234, _kckd308, _kckd266, _kckd429, _kckd409, _kckd398, _kckd389, _kckd357, _kckd267, _kckd179, _kckd268, _kckd399, _kckd309, _kckd166, _kckd310, _kckd339, _kckd379, _kckd269, _kckd270, _kckd202, _kckd311, _kckd235, _kckd203, _kckd236, _kckd204, _kckd340, _kckd271, _kckd341, _kckd205, _kckd358, _kckd180, _kckd342, _kckd343, _kckd237, _kckd439, _kckd400, _kckd238, _kckd420, _kckd272, _kckd460, _kckd206, _kckd312, _kckd273, _kckd181, _kckd344, _kckd182, _kckd183, _kckd274, _kckd275, _kckd239, _kckd240, _kckd313, _kckd207, _kckd241, _kckd314, _kckd359, _kckd208, _kckd390, _kckd315, _kckd276, _kckd242, _kckd360, _kckd184, _kckd277, _kckd316, _kckd209, _kckd210, _kckd278, _kckd401, _kckd317, _kckd361, _kckd345, _kckd362, _kckd318, _kckd243, _kckd319, _kckd185, _kckd211, _kckd212, _kckd363, _kckd279, _kckd364, _kckd280, _kckd281, _kckd320, _kckd244, _kckd321, _kckd365, _kckd366, _kckd367, _kckd440, _kckd282, _kckd213, _kckd346, _kckd214, _kckd283, _kckd186, _kckd284, _kckd441, _kckd421, _kckd215, _kckd187, _kckd285, _kckd380, _kckd322, _kckd245, _kckd246, _kckd473, _kckd323, _kckd324, _kckd442, _kckd381, _kckd286, _kckd447, _kckd368, _kckd325, _kckd216, _kckd217, _kckd487, _kckd468, _kckd326, _kckd382, _kckd247, _kckd248, _kckd474, _kckd455, _kckd443, _kckd432, _kckd422, _kckd479, _kckd383, _kckd391, _kckd499, _kckd469, _kckd494, _kckd402, _kckd392, _kckd218, _kckd433, _kckd451, _kckd249, _kckd369, _kckd393, _kckd347, _kckd348, _kckd327, _kckd287, _kckd250, _kckd403, _kckd349, _kckd251, _kckd328, _kckd219, _kckd453, _kckd350, _kckd220, _kckd288, _kckd384, _kckd329, _kckd252, _kckd221, _kckd394, _kckd475, _kckd470, _kckd351, _kckd411, _kckd188, _kckd330, _kckd222, _kckd434, _kckd177, _kckd289, _kckd395, _kckd290, _kckd253, _kckd291, _kckd292, _kckd293, _kckd352, _kckd294, _kckd423, _kckd223, _kckd254, _kckd331, _kckd255, _kckd448, _kckd332, _kckd333, _kckd480, _kckd482, _kckd370, _kckd334, _kckd159, _kckd167, _kckd173, _kckd385, _kckd371, _kckd189, _kckd169, _kckd396, _kckd146, _kckd353, _kckd372, _kckd335, _kckd412, _kckd456, _kckd404, _kckd405, _kckd397, _kckd461, _kckd476, _kckd483, _kckd462, _kckd373 ];

inter.languages = [ {
    id: "ab",
    displayName: "abkhaze"
}, {
    id: "ace",
    displayName: "aceh"
}, {
    id: "ach",
    displayName: "acoli"
}, {
    id: "ada",
    displayName: "adangme"
}, {
    id: "ady",
    displayName: "adyghéen"
}, {
    id: "aa",
    displayName: "afar"
}, {
    id: "afh",
    displayName: "afrihili"
}, {
    id: "af",
    displayName: "afrikaans",
    nativeDisplayName: "Afrikaans"
}, {
    id: "agq",
    displayName: "aghem",
    nativeDisplayName: "Aghem"
}, {
    id: "ak",
    displayName: "akan",
    nativeDisplayName: "Akan"
}, {
    id: "akk",
    displayName: "akkadien"
}, {
    id: "bss",
    displayName: "akoose"
}, {
    id: "akz",
    displayName: "alabama"
}, {
    id: "pdc",
    displayName: "allemand de Pennsylvanie"
}, {
    id: "pfl",
    displayName: "allemand palatin"
}, {
    id: "alt",
    displayName: "altaï du Sud"
}, {
    id: "ale",
    displayName: "aléoute"
}, {
    id: "en_us",
    displayName: "anglais américain",
    nativeDisplayName: "American English"
}, {
    id: "smn",
    displayName: "sami d’Inari",
    nativeDisplayName: "anarâškielâ"
}, {
    id: "ang",
    displayName: "ancien anglais"
}, {
    id: "fro",
    displayName: "ancien français"
}, {
    id: "goh",
    displayName: "ancien haut allemand"
}, {
    id: "sga",
    displayName: "ancien irlandais"
}, {
    id: "anp",
    displayName: "angika"
}, {
    id: "njo",
    displayName: "ao naga"
}, {
    id: "arq",
    displayName: "arabe algérien"
}, {
    id: "ary",
    displayName: "arabe marocain"
}, {
    id: "shu",
    displayName: "arabe tchadien"
}, {
    id: "aeb",
    displayName: "arabe tunisien"
}, {
    id: "arz",
    displayName: "arabe égyptien"
}, {
    id: "an",
    displayName: "aragonais"
}, {
    id: "arc",
    displayName: "araméen"
}, {
    id: "sam",
    displayName: "araméen samaritain"
}, {
    id: "aro",
    displayName: "araona"
}, {
    id: "arp",
    displayName: "arapaho"
}, {
    id: "arw",
    displayName: "arawak"
}, {
    id: "ast",
    displayName: "asturien",
    nativeDisplayName: "asturianu"
}, {
    id: "cch",
    displayName: "atsam"
}, {
    id: "en_au",
    displayName: "anglais australien",
    nativeDisplayName: "Australian English"
}, {
    id: "av",
    displayName: "avar"
}, {
    id: "ae",
    displayName: "avestique"
}, {
    id: "awa",
    displayName: "awadhi"
}, {
    id: "ay",
    displayName: "aymara"
}, {
    id: "az",
    displayName: "azéri",
    nativeDisplayName: "azərbaycan dili"
}, {
    id: "ain",
    displayName: "aïnou"
}, {
    id: "ba",
    displayName: "bachkir"
}, {
    id: "bfq",
    displayName: "badaga"
}, {
    id: "bfd",
    displayName: "bafut"
}, {
    id: "ms",
    displayName: "malais",
    nativeDisplayName: "Bahasa Melayu"
}, {
    id: "bqi",
    displayName: "bakhtiari"
}, {
    id: "ban",
    displayName: "balinais"
}, {
    id: "bal",
    displayName: "baloutchi"
}, {
    id: "bgn",
    displayName: "baloutchi occidental"
}, {
    id: "bm",
    displayName: "bambara",
    nativeDisplayName: "bamanakan"
}, {
    id: "bax",
    displayName: "bamoun"
}, {
    id: "bjn",
    displayName: "banjar"
}, {
    id: "nds",
    displayName: "bas-allemand"
}, {
    id: "pdt",
    displayName: "bas-prussien"
}, {
    id: "nds_nl",
    displayName: "bas-saxon néerlandais"
}, {
    id: "sli",
    displayName: "bas-silésien"
}, {
    id: "bbc",
    displayName: "batak toba"
}, {
    id: "bar",
    displayName: "bavarois"
}, {
    id: "bej",
    displayName: "bedja"
}, {
    id: "bew",
    displayName: "betawi"
}, {
    id: "bho",
    displayName: "bhojpuri"
}, {
    id: "bi",
    displayName: "bichelamar"
}, {
    id: "bik",
    displayName: "bikol"
}, {
    id: "bin",
    displayName: "bini"
}, {
    id: "bpy",
    displayName: "bishnupriya"
}, {
    id: "byn",
    displayName: "blin"
}, {
    id: "bs",
    displayName: "bosniaque",
    nativeDisplayName: "bosanski"
}, {
    id: "bum",
    displayName: "boulou"
}, {
    id: "bua",
    displayName: "bouriate"
}, {
    id: "brh",
    displayName: "brahoui"
}, {
    id: "bra",
    displayName: "braj"
}, {
    id: "br",
    displayName: "breton",
    nativeDisplayName: "brezhoneg"
}, {
    id: "en_gb",
    displayName: "anglais britannique",
    nativeDisplayName: "British English"
}, {
    id: "bug",
    displayName: "bugi"
}, {
    id: "cad",
    displayName: "caddo"
}, {
    id: "kgp",
    displayName: "caingangue"
}, {
    id: "en_ca",
    displayName: "anglais canadien",
    nativeDisplayName: "Canadian English"
}, {
    id: "cps",
    displayName: "capiznon"
}, {
    id: "car",
    displayName: "caribe"
}, {
    id: "krl",
    displayName: "carélien"
}, {
    id: "ca",
    displayName: "catalan",
    nativeDisplayName: "català"
}, {
    id: "cay",
    displayName: "cayuga"
}, {
    id: "ceb",
    displayName: "cebuano"
}, {
    id: "ch",
    displayName: "chamorro"
}, {
    id: "chy",
    displayName: "cheyenne"
}, {
    id: "chb",
    displayName: "chibcha"
}, {
    id: "kde",
    displayName: "makonde",
    nativeDisplayName: "Chimakonde"
}, {
    id: "lzh",
    displayName: "chinois littéraire"
}, {
    id: "chp",
    displayName: "chipewyan"
}, {
    id: "sn",
    displayName: "shona",
    nativeDisplayName: "chiShona"
}, {
    id: "cho",
    displayName: "choctaw"
}, {
    id: "chk",
    displayName: "chuuk"
}, {
    id: "swb",
    displayName: "comorien"
}, {
    id: "cop",
    displayName: "copte"
}, {
    id: "co",
    displayName: "corse"
}, {
    id: "cr",
    displayName: "cree"
}, {
    id: "mus",
    displayName: "creek"
}, {
    id: "ht",
    displayName: "créole haïtien"
}, {
    id: "jam",
    displayName: "créole jamaïcain"
}, {
    id: "cy",
    displayName: "gallois",
    nativeDisplayName: "Cymraeg"
}, {
    id: "dak",
    displayName: "dakota"
}, {
    id: "da",
    displayName: "danois",
    nativeDisplayName: "dansk"
}, {
    id: "dar",
    displayName: "dargwa"
}, {
    id: "gbz",
    displayName: "dari zoroastrien"
}, {
    id: "se",
    displayName: "sami du Nord",
    nativeDisplayName: "davvisámegiella"
}, {
    id: "dzg",
    displayName: "dazaga"
}, {
    id: "del",
    displayName: "delaware"
}, {
    id: "de",
    displayName: "allemand",
    nativeDisplayName: "Deutsch"
}, {
    id: "luo",
    displayName: "luo",
    nativeDisplayName: "Dholuo"
}, {
    id: "din",
    displayName: "dinka"
}, {
    id: "dyu",
    displayName: "dioula"
}, {
    id: "doi",
    displayName: "dogri"
}, {
    id: "dgr",
    displayName: "dogrib"
}, {
    id: "dsb",
    displayName: "bas-sorabe",
    nativeDisplayName: "dolnoserbšćina"
}, {
    id: "dtp",
    displayName: "dusun central"
}, {
    id: "dua",
    displayName: "douala",
    nativeDisplayName: "duálá"
}, {
    id: "et",
    displayName: "estonien",
    nativeDisplayName: "eesti"
}, {
    id: "efi",
    displayName: "efik"
}, {
    id: "eka",
    displayName: "ekajuk"
}, {
    id: "guz",
    displayName: "gusii",
    nativeDisplayName: "Ekegusii"
}, {
    id: "en",
    displayName: "anglais",
    nativeDisplayName: "English"
}, {
    id: "myv",
    displayName: "erzya"
}, {
    id: "es",
    displayName: "espagnol",
    nativeDisplayName: "español"
}, {
    id: "es_es",
    displayName: "espagnol européen",
    nativeDisplayName: "español de España"
}, {
    id: "es_mx",
    displayName: "espagnol mexicain",
    nativeDisplayName: "español de México"
}, {
    id: "es_419",
    displayName: "espagnol latino-américain",
    nativeDisplayName: "español latinoamericano"
}, {
    id: "eo",
    displayName: "espéranto",
    nativeDisplayName: "esperanto"
}, {
    id: "ext",
    displayName: "estrémègne"
}, {
    id: "eu",
    displayName: "basque",
    nativeDisplayName: "euskara"
}, {
    id: "ewo",
    displayName: "éwondo",
    nativeDisplayName: "ewondo"
}, {
    id: "ee",
    displayName: "éwé",
    nativeDisplayName: "Eʋegbe"
}, {
    id: "fan",
    displayName: "fang"
}, {
    id: "fat",
    displayName: "fanti"
}, {
    id: "fj",
    displayName: "fidjien"
}, {
    id: "fil",
    displayName: "filipino",
    nativeDisplayName: "Filipino"
}, {
    id: "fit",
    displayName: "finnois tornédalien"
}, {
    id: "vls",
    displayName: "flamand occidental"
}, {
    id: "fon",
    displayName: "fon"
}, {
    id: "frp",
    displayName: "franco-provençal"
}, {
    id: "vmf",
    displayName: "franconien du Main"
}, {
    id: "fr",
    displayName: "français",
    nativeDisplayName: "français"
}, {
    id: "frc",
    displayName: "français cadien"
}, {
    id: "fr_ca",
    displayName: "français canadien",
    nativeDisplayName: "français canadien"
}, {
    id: "fr_ch",
    displayName: "français suisse",
    nativeDisplayName: "français suisse"
}, {
    id: "stq",
    displayName: "frison de Saterland"
}, {
    id: "frr",
    displayName: "frison du Nord"
}, {
    id: "frs",
    displayName: "frison oriental"
}, {
    id: "fur",
    displayName: "frioulan",
    nativeDisplayName: "furlan"
}, {
    id: "fo",
    displayName: "féroïen",
    nativeDisplayName: "føroyskt"
}, {
    id: "gaa",
    displayName: "ga"
}, {
    id: "ga",
    displayName: "irlandais",
    nativeDisplayName: "Gaeilge"
}, {
    id: "gv",
    displayName: "manx",
    nativeDisplayName: "Gaelg"
}, {
    id: "gag",
    displayName: "gagaouze"
}, {
    id: "gl",
    displayName: "galicien",
    nativeDisplayName: "galego"
}, {
    id: "gan",
    displayName: "gan"
}, {
    id: "gay",
    displayName: "gayo"
}, {
    id: "gba",
    displayName: "gbaya"
}, {
    id: "bbj",
    displayName: "ghomala"
}, {
    id: "ki",
    displayName: "kikuyu",
    nativeDisplayName: "Gikuyu"
}, {
    id: "glk",
    displayName: "gilaki"
}, {
    id: "gil",
    displayName: "gilbertais"
}, {
    id: "gon",
    displayName: "gondi"
}, {
    id: "gor",
    displayName: "gorontalo"
}, {
    id: "got",
    displayName: "gotique"
}, {
    id: "grb",
    displayName: "grebo"
}, {
    id: "grc",
    displayName: "grec ancien"
}, {
    id: "gn",
    displayName: "guarani"
}, {
    id: "gur",
    displayName: "gurenne"
}, {
    id: "aln",
    displayName: "guègue"
}, {
    id: "gez",
    displayName: "guèze"
}, {
    id: "gwi",
    displayName: "gwichʼin"
}, {
    id: "gd",
    displayName: "gaélique écossais",
    nativeDisplayName: "Gàidhlig"
}, {
    id: "hai",
    displayName: "haida"
}, {
    id: "hak",
    displayName: "hakka"
}, {
    id: "ha",
    displayName: "haoussa",
    nativeDisplayName: "Hausa"
}, {
    id: "bez",
    displayName: "béna",
    nativeDisplayName: "Hibena"
}, {
    id: "hil",
    displayName: "hiligaynon"
}, {
    id: "hif",
    displayName: "hindi fidjien"
}, {
    id: "ho",
    displayName: "hiri motu"
}, {
    id: "hit",
    displayName: "hittite"
}, {
    id: "hmn",
    displayName: "hmong"
}, {
    id: "hsb",
    displayName: "haut-sorabe",
    nativeDisplayName: "hornjoserbšćina"
}, {
    id: "hr",
    displayName: "croate",
    nativeDisplayName: "hrvatski"
}, {
    id: "hup",
    displayName: "hupa"
}, {
    id: "hz",
    displayName: "héréro"
}, {
    id: "iba",
    displayName: "iban"
}, {
    id: "ibb",
    displayName: "ibibio"
}, {
    id: "bem",
    displayName: "bemba",
    nativeDisplayName: "Ichibemba"
}, {
    id: "io",
    displayName: "ido"
}, {
    id: "ig",
    displayName: "igbo",
    nativeDisplayName: "Igbo"
}, {
    id: "rn",
    displayName: "roundi",
    nativeDisplayName: "Ikirundi"
}, {
    id: "ilo",
    displayName: "ilokano"
}, {
    id: "id",
    displayName: "indonésien",
    nativeDisplayName: "Indonesia"
}, {
    id: "inh",
    displayName: "ingouche"
}, {
    id: "izh",
    displayName: "ingrien"
}, {
    id: "ia",
    displayName: "interlingua"
}, {
    id: "ie",
    displayName: "interlingue"
}, {
    id: "iu",
    displayName: "inuktitut"
}, {
    id: "ik",
    displayName: "inupiaq"
}, {
    id: "sbp",
    displayName: "sangu",
    nativeDisplayName: "Ishisangu"
}, {
    id: "nd",
    displayName: "ndébélé du Nord",
    nativeDisplayName: "isiNdebele"
}, {
    id: "zu",
    displayName: "zoulou",
    nativeDisplayName: "isiZulu"
}, {
    id: "it",
    displayName: "italien",
    nativeDisplayName: "italiano"
}, {
    id: "chn",
    displayName: "jargon chinook"
}, {
    id: "jv",
    displayName: "javanais"
}, {
    id: "kaj",
    displayName: "jju"
}, {
    id: "dyo",
    displayName: "diola-fogny",
    nativeDisplayName: "joola"
}, {
    id: "jrb",
    displayName: "judéo-arabe"
}, {
    id: "jpr",
    displayName: "judéo-persan"
}, {
    id: "jut",
    displayName: "jute"
}, {
    id: "kbd",
    displayName: "kabardin"
}, {
    id: "kea",
    displayName: "capverdien",
    nativeDisplayName: "kabuverdianu"
}, {
    id: "kac",
    displayName: "kachin"
}, {
    id: "csb",
    displayName: "kachoube"
}, {
    id: "kkj",
    displayName: "kako",
    nativeDisplayName: "kakɔ"
}, {
    id: "kl",
    displayName: "groenlandais",
    nativeDisplayName: "kalaallisut"
}, {
    id: "kln",
    displayName: "kalenjin",
    nativeDisplayName: "Kalenjin"
}, {
    id: "xal",
    displayName: "kalmouk"
}, {
    id: "kbl",
    displayName: "kanembou"
}, {
    id: "kr",
    displayName: "kanouri"
}, {
    id: "kaa",
    displayName: "karakalpak"
}, {
    id: "krc",
    displayName: "karatchaï balkar"
}, {
    id: "kaw",
    displayName: "kawi"
}, {
    id: "ken",
    displayName: "kenyang"
}, {
    id: "kw",
    displayName: "cornique",
    nativeDisplayName: "kernewek"
}, {
    id: "kha",
    displayName: "khasi"
}, {
    id: "naq",
    displayName: "nama",
    nativeDisplayName: "Khoekhoegowab"
}, {
    id: "kho",
    displayName: "khotanais"
}, {
    id: "khw",
    displayName: "khowar"
}, {
    id: "rof",
    displayName: "rombo",
    nativeDisplayName: "Kihorombo"
}, {
    id: "kam",
    displayName: "kamba",
    nativeDisplayName: "Kikamba"
}, {
    id: "jmc",
    displayName: "machame",
    nativeDisplayName: "Kimachame"
}, {
    id: "kmb",
    displayName: "kiMboundou"
}, {
    id: "krj",
    displayName: "kinaray-a"
}, {
    id: "rw",
    displayName: "rwanda",
    nativeDisplayName: "Kinyarwanda"
}, {
    id: "asa",
    displayName: "assou",
    nativeDisplayName: "Kipare"
}, {
    id: "kiu",
    displayName: "kirmanjki"
}, {
    id: "rwk",
    displayName: "rwa",
    nativeDisplayName: "Kiruwa"
}, {
    id: "saq",
    displayName: "samburu",
    nativeDisplayName: "Kisampur"
}, {
    id: "ksb",
    displayName: "chambala",
    nativeDisplayName: "Kishambaa"
}, {
    id: "sw",
    displayName: "swahili",
    nativeDisplayName: "Kiswahili"
}, {
    id: "sw_cd",
    displayName: "swahili du Congo",
    nativeDisplayName: "Kiswahili ya Kongo"
}, {
    id: "dav",
    displayName: "taita",
    nativeDisplayName: "Kitaita"
}, {
    id: "teo",
    displayName: "teso",
    nativeDisplayName: "Kiteso"
}, {
    id: "tlh",
    displayName: "klingon"
}, {
    id: "bkm",
    displayName: "kom"
}, {
    id: "kv",
    displayName: "komi"
}, {
    id: "koi",
    displayName: "komi-permiak"
}, {
    id: "kg",
    displayName: "kongo"
}, {
    id: "gom",
    displayName: "konkani de Goa"
}, {
    id: "kfo",
    displayName: "koro"
}, {
    id: "avk",
    displayName: "kotava"
}, {
    id: "kum",
    displayName: "koumyk"
}, {
    id: "khq",
    displayName: "koyra chiini",
    nativeDisplayName: "Koyra ciini"
}, {
    id: "ses",
    displayName: "koyraboro senni",
    nativeDisplayName: "Koyraboro senni"
}, {
    id: "kpe",
    displayName: "kpellé"
}, {
    id: "mfe",
    displayName: "créole mauricien",
    nativeDisplayName: "kreol morisien"
}, {
    id: "kri",
    displayName: "krio"
}, {
    id: "kj",
    displayName: "kuanyama"
}, {
    id: "ku",
    displayName: "kurde"
}, {
    id: "sdh",
    displayName: "kurde du Sud"
}, {
    id: "kru",
    displayName: "kurukh"
}, {
    id: "kos",
    displayName: "kusaien"
}, {
    id: "kut",
    displayName: "kutenai"
}, {
    id: "nmg",
    displayName: "kwasio",
    nativeDisplayName: "Kwasio"
}, {
    id: "vun",
    displayName: "vunjo",
    nativeDisplayName: "Kyivunjo"
}, {
    id: "ksh",
    displayName: "francique ripuaire",
    nativeDisplayName: "Kölsch"
}, {
    id: "ebu",
    displayName: "embou",
    nativeDisplayName: "Kĩembu"
}, {
    id: "mer",
    displayName: "merou",
    nativeDisplayName: "Kĩmĩrũ"
}, {
    id: "lag",
    displayName: "langi",
    nativeDisplayName: "Kɨlaangi"
}, {
    id: "quc",
    displayName: "k’iche’"
}, {
    id: "lad",
    displayName: "ladino"
}, {
    id: "lah",
    displayName: "lahnda"
}, {
    id: "lkt",
    displayName: "lakota",
    nativeDisplayName: "Lakȟólʼiyapi"
}, {
    id: "lam",
    displayName: "lamba"
}, {
    id: "ase",
    displayName: "langue des signes américaine"
}, {
    id: "und",
    displayName: "langue indéterminée"
}, {
    id: "ltg",
    displayName: "latgalien"
}, {
    id: "la",
    displayName: "latin"
}, {
    id: "lv",
    displayName: "letton",
    nativeDisplayName: "latviešu"
}, {
    id: "lzz",
    displayName: "laze"
}, {
    id: "to",
    displayName: "tonguien",
    nativeDisplayName: "lea fakatonga"
}, {
    id: "lez",
    displayName: "lezghien"
}, {
    id: "lt",
    displayName: "lituanien",
    nativeDisplayName: "lietuvių"
}, {
    id: "lij",
    displayName: "ligure"
}, {
    id: "li",
    displayName: "limbourgeois"
}, {
    id: "lfn",
    displayName: "lingua franca nova"
}, {
    id: "ln",
    displayName: "lingala",
    nativeDisplayName: "lingála"
}, {
    id: "liv",
    displayName: "livonien"
}, {
    id: "jbo",
    displayName: "lojban"
}, {
    id: "lmo",
    displayName: "lombard"
}, {
    id: "loz",
    displayName: "lozi"
}, {
    id: "lua",
    displayName: "luba-lulua"
}, {
    id: "lg",
    displayName: "ganda",
    nativeDisplayName: "Luganda"
}, {
    id: "lui",
    displayName: "luiseno"
}, {
    id: "luy",
    displayName: "oluluyia",
    nativeDisplayName: "Luluhia"
}, {
    id: "lun",
    displayName: "lunda"
}, {
    id: "lus",
    displayName: "lushai"
}, {
    id: "lb",
    displayName: "luxembourgeois",
    nativeDisplayName: "Lëtzebuergesch"
}, {
    id: "mas",
    displayName: "masai",
    nativeDisplayName: "Maa"
}, {
    id: "mde",
    displayName: "maba"
}, {
    id: "mad",
    displayName: "madurais"
}, {
    id: "maf",
    displayName: "mafa"
}, {
    id: "mag",
    displayName: "magahi"
}, {
    id: "hu",
    displayName: "hongrois",
    nativeDisplayName: "magyar"
}, {
    id: "mai",
    displayName: "maithili"
}, {
    id: "mak",
    displayName: "makassar"
}, {
    id: "mgh",
    displayName: "makhuwa-meetto",
    nativeDisplayName: "Makua"
}, {
    id: "mg",
    displayName: "malgache",
    nativeDisplayName: "Malagasy"
}, {
    id: "dv",
    displayName: "maldivien"
}, {
    id: "mt",
    displayName: "maltais",
    nativeDisplayName: "Malti"
}, {
    id: "mdr",
    displayName: "mandar"
}, {
    id: "mnc",
    displayName: "mandchou"
}, {
    id: "man",
    displayName: "mandingue"
}, {
    id: "mni",
    displayName: "manipuri"
}, {
    id: "mi",
    displayName: "maori"
}, {
    id: "arn",
    displayName: "mapuche"
}, {
    id: "chm",
    displayName: "mari"
}, {
    id: "mrj",
    displayName: "mari occidental"
}, {
    id: "mh",
    displayName: "marshall"
}, {
    id: "mwr",
    displayName: "marwarî"
}, {
    id: "byv",
    displayName: "medumba"
}, {
    id: "men",
    displayName: "mendé"
}, {
    id: "mwv",
    displayName: "mentawaï"
}, {
    id: "mgo",
    displayName: "méta’",
    nativeDisplayName: "metaʼ"
}, {
    id: "mic",
    displayName: "micmac"
}, {
    id: "min",
    displayName: "minangkabau"
}, {
    id: "xmf",
    displayName: "mingrélien"
}, {
    id: "nan",
    displayName: "minnan"
}, {
    id: "mwl",
    displayName: "mirandais"
}, {
    id: "moh",
    displayName: "mohawk"
}, {
    id: "mdf",
    displayName: "moksa"
}, {
    id: "ro_md",
    displayName: "moldave",
    nativeDisplayName: "moldovenească"
}, {
    id: "lol",
    displayName: "mongo"
}, {
    id: "mos",
    displayName: "moré"
}, {
    id: "enm",
    displayName: "moyen anglais"
}, {
    id: "frm",
    displayName: "moyen français"
}, {
    id: "gmh",
    displayName: "moyen haut-allemand"
}, {
    id: "mga",
    displayName: "moyen irlandais"
}, {
    id: "dum",
    displayName: "moyen néerlandais"
}, {
    id: "mul",
    displayName: "multilingue"
}, {
    id: "mua",
    displayName: "mundang",
    nativeDisplayName: "MUNDAŊ"
}, {
    id: "mye",
    displayName: "myènè"
}, {
    id: "nap",
    displayName: "napolitain"
}, {
    id: "na",
    displayName: "nauruan"
}, {
    id: "nv",
    displayName: "navaho"
}, {
    id: "jgo",
    displayName: "ngomba",
    nativeDisplayName: "Ndaꞌa"
}, {
    id: "ng",
    displayName: "ndonga"
}, {
    id: "nr",
    displayName: "ndébélé du Sud"
}, {
    id: "nl",
    displayName: "néerlandais",
    nativeDisplayName: "Nederlands"
}, {
    id: "new",
    displayName: "newari"
}, {
    id: "nwc",
    displayName: "newarî classique"
}, {
    id: "sba",
    displayName: "ngambay"
}, {
    id: "yrl",
    displayName: "nheengatou"
}, {
    id: "nia",
    displayName: "nias"
}, {
    id: "niu",
    displayName: "niué"
}, {
    id: "nog",
    displayName: "nogaï"
}, {
    id: "nb",
    displayName: "norvégien bokmål",
    nativeDisplayName: "norsk bokmål"
}, {
    id: "no",
    displayName: "norvégien"
}, {
    id: "nov",
    displayName: "novial"
}, {
    id: "yav",
    displayName: "yangben",
    nativeDisplayName: "nuasue"
}, {
    id: "nym",
    displayName: "nyamwezi"
}, {
    id: "ny",
    displayName: "nyanja"
}, {
    id: "nn",
    displayName: "norvégien nynorsk",
    nativeDisplayName: "nynorsk"
}, {
    id: "nyo",
    displayName: "nyoro"
}, {
    id: "nzi",
    displayName: "nzema"
}, {
    id: "nqo",
    displayName: "n’ko"
}, {
    id: "oc",
    displayName: "occitan"
}, {
    id: "oj",
    displayName: "ojibwa"
}, {
    id: "xog",
    displayName: "soga",
    nativeDisplayName: "Olusoga"
}, {
    id: "om",
    displayName: "oromo",
    nativeDisplayName: "Oromoo"
}, {
    id: "osa",
    displayName: "osage"
}, {
    id: "udm",
    displayName: "oudmourte"
}, {
    id: "uga",
    displayName: "ougaritique"
}, {
    id: "uz",
    displayName: "ouzbek",
    nativeDisplayName: "o‘zbek"
}, {
    id: "pal",
    displayName: "pahlavi"
}, {
    id: "pau",
    displayName: "palau"
}, {
    id: "pi",
    displayName: "pali"
}, {
    id: "pam",
    displayName: "pampangan"
}, {
    id: "pag",
    displayName: "pangasinan"
}, {
    id: "pap",
    displayName: "papiamento"
}, {
    id: "peo",
    displayName: "persan ancien"
}, {
    id: "phn",
    displayName: "phénicien"
}, {
    id: "pcd",
    displayName: "picard"
}, {
    id: "pms",
    displayName: "piémontais"
}, {
    id: "pon",
    displayName: "pohnpei"
}, {
    id: "pl",
    displayName: "polonais",
    nativeDisplayName: "polski"
}, {
    id: "pnt",
    displayName: "pontique"
}, {
    id: "pt",
    displayName: "portugais",
    nativeDisplayName: "português"
}, {
    id: "pt_br",
    displayName: "portugais brésilien",
    nativeDisplayName: "português do Brasil"
}, {
    id: "pt_pt",
    displayName: "portugais européen",
    nativeDisplayName: "português europeu"
}, {
    id: "pro",
    displayName: "provençal ancien"
}, {
    id: "prg",
    displayName: "prussien",
    nativeDisplayName: "prūsiskan"
}, {
    id: "ff",
    displayName: "peul",
    nativeDisplayName: "Pulaar"
}, {
    id: "qug",
    displayName: "quichua du Haut-Chimborazo"
}, {
    id: "root",
    displayName: "racine"
}, {
    id: "raj",
    displayName: "rajasthani"
}, {
    id: "rap",
    displayName: "rapanui"
}, {
    id: "rar",
    displayName: "rarotongien"
}, {
    id: "rif",
    displayName: "riffain"
}, {
    id: "ksf",
    displayName: "bafia",
    nativeDisplayName: "rikpa"
}, {
    id: "rgn",
    displayName: "romagnol"
}, {
    id: "ro",
    displayName: "roumain",
    nativeDisplayName: "română"
}, {
    id: "rtm",
    displayName: "rotuman"
}, {
    id: "rug",
    displayName: "roviana"
}, {
    id: "cgg",
    displayName: "kiga",
    nativeDisplayName: "Rukiga"
}, {
    id: "rm",
    displayName: "romanche",
    nativeDisplayName: "rumantsch"
}, {
    id: "qu",
    displayName: "quechua",
    nativeDisplayName: "Runasimi"
}, {
    id: "nyn",
    displayName: "nyankolé",
    nativeDisplayName: "Runyankore"
}, {
    id: "rue",
    displayName: "ruthène"
}, {
    id: "ssy",
    displayName: "saho"
}, {
    id: "smj",
    displayName: "sami de Lule"
}, {
    id: "sma",
    displayName: "sami du Sud"
}, {
    id: "sms",
    displayName: "sami skolt"
}, {
    id: "sm",
    displayName: "samoan"
}, {
    id: "sgs",
    displayName: "samogitien"
}, {
    id: "sad",
    displayName: "sandawe"
}, {
    id: "zxx",
    displayName: "sans contenu linguistique"
}, {
    id: "sa",
    displayName: "sanskrit"
}, {
    id: "sat",
    displayName: "santal"
}, {
    id: "sc",
    displayName: "sarde"
}, {
    id: "sdc",
    displayName: "sarde sassarais"
}, {
    id: "sas",
    displayName: "sasak"
}, {
    id: "saz",
    displayName: "saurashtra"
}, {
    id: "de_ch",
    displayName: "allemand suisse",
    nativeDisplayName: "Schweizer Hochdeutsch"
}, {
    id: "gsw",
    displayName: "suisse allemand",
    nativeDisplayName: "Schwiizertüütsch"
}, {
    id: "sly",
    displayName: "selayar"
}, {
    id: "sel",
    displayName: "selkoupe"
}, {
    id: "seh",
    displayName: "sena",
    nativeDisplayName: "sena"
}, {
    id: "see",
    displayName: "seneca"
}, {
    id: "sh",
    displayName: "serbo-croate"
}, {
    id: "st",
    displayName: "sesotho"
}, {
    id: "shn",
    displayName: "shan"
}, {
    id: "sq",
    displayName: "albanais",
    nativeDisplayName: "shqip"
}, {
    id: "nnh",
    displayName: "ngiemboon",
    nativeDisplayName: "Shwóŋò ngiembɔɔn"
}, {
    id: "scn",
    displayName: "sicilien"
}, {
    id: "sid",
    displayName: "sidamo"
}, {
    id: "bla",
    displayName: "siksika"
}, {
    id: "szl",
    displayName: "silésien"
}, {
    id: "sd",
    displayName: "sindhi"
}, {
    id: "den",
    displayName: "slavey"
}, {
    id: "sk",
    displayName: "slovaque",
    nativeDisplayName: "slovenčina"
}, {
    id: "sl",
    displayName: "slovène",
    nativeDisplayName: "slovenščina"
}, {
    id: "sog",
    displayName: "sogdien"
}, {
    id: "snk",
    displayName: "soninké"
}, {
    id: "so",
    displayName: "somali",
    nativeDisplayName: "Soomaali"
}, {
    id: "nso",
    displayName: "sotho du Nord"
}, {
    id: "su",
    displayName: "soundanais"
}, {
    id: "sus",
    displayName: "soussou"
}, {
    id: "srn",
    displayName: "sranan tongo"
}, {
    id: "suk",
    displayName: "sukuma"
}, {
    id: "sux",
    displayName: "sumérien"
}, {
    id: "fi",
    displayName: "finnois",
    nativeDisplayName: "suomi"
}, {
    id: "sv",
    displayName: "suédois",
    nativeDisplayName: "svenska"
}, {
    id: "ss",
    displayName: "swati"
}, {
    id: "zbl",
    displayName: "symboles Bliss"
}, {
    id: "syr",
    displayName: "syriaque"
}, {
    id: "syc",
    displayName: "syriaque classique"
}, {
    id: "sg",
    displayName: "sangho",
    nativeDisplayName: "Sängö"
}, {
    id: "sei",
    displayName: "séri"
}, {
    id: "srr",
    displayName: "sérère"
}, {
    id: "tg",
    displayName: "tadjik"
}, {
    id: "tl",
    displayName: "tagalog"
}, {
    id: "ty",
    displayName: "tahitien"
}, {
    id: "tly",
    displayName: "talysh"
}, {
    id: "tmh",
    displayName: "tamacheq"
}, {
    id: "tzm",
    displayName: "tamazight",
    nativeDisplayName: "Tamaziɣt n laṭlaṣ"
}, {
    id: "kab",
    displayName: "kabyle",
    nativeDisplayName: "Taqbaylit"
}, {
    id: "trv",
    displayName: "taroko"
}, {
    id: "twq",
    displayName: "tasawaq",
    nativeDisplayName: "Tasawaq senni"
}, {
    id: "tt",
    displayName: "tatar"
}, {
    id: "ttt",
    displayName: "tati caucasien"
}, {
    id: "chg",
    displayName: "tchaghataï"
}, {
    id: "cv",
    displayName: "tchouvache"
}, {
    id: "tem",
    displayName: "temne"
}, {
    id: "ter",
    displayName: "tereno"
}, {
    id: "tet",
    displayName: "tetum"
}, {
    id: "nus",
    displayName: "nuer",
    nativeDisplayName: "Thok Nath"
}, {
    id: "tig",
    displayName: "tigré"
}, {
    id: "tiv",
    displayName: "tiv"
}, {
    id: "vi",
    displayName: "vietnamien",
    nativeDisplayName: "Tiếng Việt"
}, {
    id: "tli",
    displayName: "tlingit"
}, {
    id: "tpi",
    displayName: "tok pisin"
}, {
    id: "tkl",
    displayName: "tokelau"
}, {
    id: "tog",
    displayName: "tonga nyasa"
}, {
    id: "tcy",
    displayName: "toulou"
}, {
    id: "tyv",
    displayName: "touva"
}, {
    id: "tkr",
    displayName: "tsakhur"
}, {
    id: "tsd",
    displayName: "tsakonien"
}, {
    id: "lu",
    displayName: "luba-katanga",
    nativeDisplayName: "Tshiluba"
}, {
    id: "tsi",
    displayName: "tsimshian"
}, {
    id: "ts",
    displayName: "tsonga"
}, {
    id: "tn",
    displayName: "tswana"
}, {
    id: "tum",
    displayName: "tumbuka"
}, {
    id: "crh",
    displayName: "turc de Crimée"
}, {
    id: "ota",
    displayName: "turc ottoman"
}, {
    id: "tru",
    displayName: "turoyo"
}, {
    id: "tvl",
    displayName: "tuvalu"
}, {
    id: "tw",
    displayName: "twi"
}, {
    id: "kcg",
    displayName: "tyap"
}, {
    id: "rom",
    displayName: "tzigane"
}, {
    id: "tk",
    displayName: "turkmène",
    nativeDisplayName: "türkmençe"
}, {
    id: "tr",
    displayName: "turc",
    nativeDisplayName: "Türkçe"
}, {
    id: "umb",
    displayName: "umbundu"
}, {
    id: "rup",
    displayName: "valaque"
}, {
    id: "ve",
    displayName: "venda"
}, {
    id: "vep",
    displayName: "vepse"
}, {
    id: "non",
    displayName: "vieux norrois"
}, {
    id: "nl_be",
    displayName: "flamand",
    nativeDisplayName: "Vlaams"
}, {
    id: "vo",
    displayName: "volapuk",
    nativeDisplayName: "Volapük"
}, {
    id: "vot",
    displayName: "vote"
}, {
    id: "vec",
    displayName: "vénitien"
}, {
    id: "vro",
    displayName: "võro"
}, {
    id: "wal",
    displayName: "walamo"
}, {
    id: "wa",
    displayName: "wallon"
}, {
    id: "wae",
    displayName: "walser",
    nativeDisplayName: "Walser"
}, {
    id: "war",
    displayName: "waray"
}, {
    id: "wbp",
    displayName: "warlpiri"
}, {
    id: "was",
    displayName: "washo"
}, {
    id: "guc",
    displayName: "wayuu"
}, {
    id: "fy",
    displayName: "frison occidental",
    nativeDisplayName: "West-Frysk"
}, {
    id: "wo",
    displayName: "wolof"
}, {
    id: "wuu",
    displayName: "wu"
}, {
    id: "xh",
    displayName: "xhosa"
}, {
    id: "hsn",
    displayName: "xiang"
}, {
    id: "yao",
    displayName: "yao"
}, {
    id: "yap",
    displayName: "yapois"
}, {
    id: "ybb",
    displayName: "yemba"
}, {
    id: "esu",
    displayName: "youpik central"
}, {
    id: "zap",
    displayName: "zapotèque"
}, {
    id: "dje",
    displayName: "zarma",
    nativeDisplayName: "Zarmaciine"
}, {
    id: "zza",
    displayName: "zazaki"
}, {
    id: "zen",
    displayName: "zenaga"
}, {
    id: "za",
    displayName: "zhuang"
}, {
    id: "zun",
    displayName: "zuni"
}, {
    id: "zea",
    displayName: "zélandais"
}, {
    id: "yo",
    displayName: "yoruba",
    nativeDisplayName: "Èdè Yorùbá"
}, {
    id: "sco",
    displayName: "écossais"
}, {
    id: "egy",
    displayName: "égyptien ancien"
}, {
    id: "elx",
    displayName: "élamite"
}, {
    id: "egl",
    displayName: "émilien"
}, {
    id: "is",
    displayName: "islandais",
    nativeDisplayName: "íslenska"
}, {
    id: "de_at",
    displayName: "allemand autrichien",
    nativeDisplayName: "Österreichisches Deutsch"
}, {
    id: "cs",
    displayName: "tchèque",
    nativeDisplayName: "čeština"
}, {
    id: "bas",
    displayName: "bassa",
    nativeDisplayName: "Ɓàsàa"
}, {
    id: "haw",
    displayName: "hawaïen",
    nativeDisplayName: "ʻŌlelo Hawaiʻi"
}, {
    id: "el",
    displayName: "grec",
    nativeDisplayName: "Ελληνικά"
}, {
    id: "be",
    displayName: "biélorusse",
    nativeDisplayName: "беларуская"
}, {
    id: "bg",
    displayName: "bulgare",
    nativeDisplayName: "български"
}, {
    id: "os",
    displayName: "ossète",
    nativeDisplayName: "ирон"
}, {
    id: "ky",
    displayName: "kirghize",
    nativeDisplayName: "кыргызча"
}, {
    id: "mk",
    displayName: "macédonien",
    nativeDisplayName: "македонски"
}, {
    id: "mn",
    displayName: "mongol",
    nativeDisplayName: "монгол"
}, {
    id: "ce",
    displayName: "tchétchène",
    nativeDisplayName: "нохчийн"
}, {
    id: "ru",
    displayName: "russe",
    nativeDisplayName: "русский"
}, {
    id: "sah",
    displayName: "iakoute",
    nativeDisplayName: "саха тыла"
}, {
    id: "sr",
    displayName: "serbe",
    nativeDisplayName: "српски"
}, {
    id: "uk",
    displayName: "ukrainien",
    nativeDisplayName: "українська"
}, {
    id: "cu",
    displayName: "slavon d’église",
    nativeDisplayName: "церковнослове́нскїй"
}, {
    id: "kk",
    displayName: "kazakh",
    nativeDisplayName: "қазақ тілі"
}, {
    id: "hy",
    displayName: "arménien",
    nativeDisplayName: "հայերեն"
}, {
    id: "yi",
    displayName: "yiddish",
    nativeDisplayName: "ייִדיש"
}, {
    id: "he",
    displayName: "hébreu",
    nativeDisplayName: "עברית"
}, {
    id: "ug",
    displayName: "ouïghour",
    nativeDisplayName: "ئۇيغۇرچە"
}, {
    id: "ur",
    displayName: "ourdou",
    nativeDisplayName: "اردو"
}, {
    id: "ar",
    displayName: "arabe",
    nativeDisplayName: "العربية"
}, {
    id: "ar_001",
    displayName: "arabe standard moderne",
    nativeDisplayName: "العربية الرسمية الحديثة"
}, {
    id: "fa",
    displayName: "persan",
    nativeDisplayName: "فارسی"
}, {
    id: "lrc",
    displayName: "lori du Nord",
    nativeDisplayName: "لۊری شومالی"
}, {
    id: "mzn",
    displayName: "mazandérani",
    nativeDisplayName: "مازرونی"
}, {
    id: "ps",
    displayName: "pachto",
    nativeDisplayName: "پښتو"
}, {
    id: "ckb",
    displayName: "sorani",
    nativeDisplayName: "کوردیی ناوەندی"
}, {
    id: "ks",
    displayName: "kashmiri",
    nativeDisplayName: "کٲشُر"
}, {
    id: "kok",
    displayName: "konkani",
    nativeDisplayName: "कोंकणी"
}, {
    id: "ne",
    displayName: "népalais",
    nativeDisplayName: "नेपाली"
}, {
    id: "brx",
    displayName: "bodo",
    nativeDisplayName: "बड़ो"
}, {
    id: "mr",
    displayName: "marathe",
    nativeDisplayName: "मराठी"
}, {
    id: "hi",
    displayName: "hindi",
    nativeDisplayName: "हिन्दी"
}, {
    id: "as",
    displayName: "assamais",
    nativeDisplayName: "অসমীয়া"
}, {
    id: "bn",
    displayName: "bengali",
    nativeDisplayName: "বাংলা"
}, {
    id: "pa",
    displayName: "pendjabi",
    nativeDisplayName: "ਪੰਜਾਬੀ"
}, {
    id: "gu",
    displayName: "gujarati",
    nativeDisplayName: "ગુજરાતી"
}, {
    id: "or",
    displayName: "oriya",
    nativeDisplayName: "ଓଡ଼ିଆ"
}, {
    id: "ta",
    displayName: "tamoul",
    nativeDisplayName: "தமிழ்"
}, {
    id: "te",
    displayName: "télougou",
    nativeDisplayName: "తెలుగు"
}, {
    id: "kn",
    displayName: "kannada",
    nativeDisplayName: "ಕನ್ನಡ"
}, {
    id: "ml",
    displayName: "malayalam",
    nativeDisplayName: "മലയാളം"
}, {
    id: "si",
    displayName: "cinghalais",
    nativeDisplayName: "සිංහල"
}, {
    id: "th",
    displayName: "thaï",
    nativeDisplayName: "ไทย"
}, {
    id: "lo",
    displayName: "lao",
    nativeDisplayName: "ລາວ"
}, {
    id: "bo",
    displayName: "tibétain",
    nativeDisplayName: "བོད་སྐད་"
}, {
    id: "dz",
    displayName: "dzongkha",
    nativeDisplayName: "རྫོང་ཁ"
}, {
    id: "my",
    displayName: "birman",
    nativeDisplayName: "ဗမာ"
}, {
    id: "ka",
    displayName: "géorgien",
    nativeDisplayName: "ქართული"
}, {
    id: "ti",
    displayName: "tigrigna",
    nativeDisplayName: "ትግርኛ"
}, {
    id: "am",
    displayName: "amharique",
    nativeDisplayName: "አማርኛ"
}, {
    id: "km",
    displayName: "khmer",
    nativeDisplayName: "ខ្មែរ"
}, {
    id: "zgh",
    displayName: "amazighe standard marocain",
    nativeDisplayName: "ⵜⴰⵎⴰⵣⵉⵖⵜ"
}, {
    id: "shi",
    displayName: "chleuh",
    nativeDisplayName: "ⵜⴰⵛⵍⵃⵉⵜ"
}, {
    id: "zh",
    displayName: "chinois",
    nativeDisplayName: "中文"
}, {
    id: "ja",
    displayName: "japonais",
    nativeDisplayName: "日本語"
}, {
    id: "zh_hans",
    displayName: "chinois simplifié",
    nativeDisplayName: "简体中文"
}, {
    id: "yue",
    displayName: "cantonais",
    nativeDisplayName: "粵語"
}, {
    id: "zh_hant",
    displayName: "chinois traditionnel",
    nativeDisplayName: "繁體中文"
}, {
    id: "ii",
    displayName: "yi du Sichuan",
    nativeDisplayName: "ꆈꌠꉙ"
}, {
    id: "vai",
    displayName: "vaï",
    nativeDisplayName: "ꕙꔤ"
}, {
    id: "chr",
    displayName: "cherokee",
    nativeDisplayName: "ᏣᎳᎩ"
}, {
    id: "ko",
    displayName: "coréen",
    nativeDisplayName: "한국어"
} ];

inter.scripts = [ {
    id: "Afak",
    displayName: "afaka"
}, {
    id: "Aghb",
    displayName: "aghbanie"
}, {
    id: "Ahom",
    displayName: "ahom"
}, {
    id: "Hung",
    displayName: "ancien hongrois"
}, {
    id: "Ital",
    displayName: "ancien italique"
}, {
    id: "Perm",
    displayName: "ancien permien"
}, {
    id: "Arab",
    displayName: "arabe"
}, {
    id: "Armi",
    displayName: "araméen impérial"
}, {
    id: "Armn",
    displayName: "arménien"
}, {
    id: "Avst",
    displayName: "avestique"
}, {
    id: "Bali",
    displayName: "balinais"
}, {
    id: "Bamu",
    displayName: "bamoum"
}, {
    id: "Bass",
    displayName: "bassa"
}, {
    id: "Batk",
    displayName: "batak"
}, {
    id: "Beng",
    displayName: "bengali"
}, {
    id: "Mymr",
    displayName: "birman"
}, {
    id: "Bopo",
    displayName: "bopomofo"
}, {
    id: "Bugi",
    displayName: "bouguis"
}, {
    id: "Buhd",
    displayName: "bouhide"
}, {
    id: "Brai",
    displayName: "braille"
}, {
    id: "Brah",
    displayName: "brâhmî"
}, {
    id: "Cari",
    displayName: "carien"
}, {
    id: "Cakm",
    displayName: "chakma"
}, {
    id: "Cham",
    displayName: "cham"
}, {
    id: "Shrd",
    displayName: "charada"
}, {
    id: "Cher",
    displayName: "cherokee"
}, {
    id: "Sinh",
    displayName: "cinghalais"
}, {
    id: "Cirt",
    displayName: "cirth"
}, {
    id: "Zyyy",
    displayName: "commun"
}, {
    id: "Copt",
    displayName: "copte"
}, {
    id: "Kore",
    displayName: "coréen"
}, {
    id: "Xpeo",
    displayName: "cunéiforme persépolitain"
}, {
    id: "Xsux",
    displayName: "cunéiforme suméro-akkadien"
}, {
    id: "Cyrl",
    displayName: "cyrillique"
}, {
    id: "Cyrs",
    displayName: "cyrillique (variante slavonne)"
}, {
    id: "Egyd",
    displayName: "démotique égyptien"
}, {
    id: "Dsrt",
    displayName: "déséret"
}, {
    id: "Deva",
    displayName: "dévanâgarî"
}, {
    id: "Elba",
    displayName: "elbasan"
}, {
    id: "Glag",
    displayName: "glagolitique"
}, {
    id: "Goth",
    displayName: "gotique"
}, {
    id: "Gujr",
    displayName: "goudjarâtî"
}, {
    id: "Guru",
    displayName: "gourmoukhî"
}, {
    id: "Gran",
    displayName: "grantha"
}, {
    id: "Grek",
    displayName: "grec"
}, {
    id: "Geor",
    displayName: "géorgien"
}, {
    id: "Geok",
    displayName: "géorgien khoutsouri"
}, {
    id: "Hang",
    displayName: "hangûl"
}, {
    id: "Hano",
    displayName: "hanounóo"
}, {
    id: "Hatr",
    displayName: "hatran"
}, {
    id: "Hira",
    displayName: "hiragana"
}, {
    id: "Egyh",
    displayName: "hiératique égyptien"
}, {
    id: "Hluw",
    displayName: "hiéroglyphes hittites"
}, {
    id: "Maya",
    displayName: "hiéroglyphes mayas"
}, {
    id: "Egyp",
    displayName: "hiéroglyphes égyptiens"
}, {
    id: "Hebr",
    displayName: "hébreu"
}, {
    id: "Zinh",
    displayName: "hérité"
}, {
    id: "Inds",
    displayName: "indus"
}, {
    id: "Jpan",
    displayName: "japonais"
}, {
    id: "Java",
    displayName: "javanais"
}, {
    id: "Jurc",
    displayName: "jurchen"
}, {
    id: "Kthi",
    displayName: "kaithî"
}, {
    id: "Knda",
    displayName: "kannara"
}, {
    id: "Kana",
    displayName: "katakana"
}, {
    id: "Hrkt",
    displayName: "katakana ou hiragana"
}, {
    id: "Kali",
    displayName: "kayah li"
}, {
    id: "Khar",
    displayName: "kharochthî"
}, {
    id: "Khmr",
    displayName: "khmer"
}, {
    id: "Khoj",
    displayName: "khojkî"
}, {
    id: "Kpel",
    displayName: "kpellé"
}, {
    id: "Lana",
    displayName: "lanna"
}, {
    id: "Laoo",
    displayName: "lao"
}, {
    id: "Latn",
    displayName: "latin"
}, {
    id: "Latf",
    displayName: "latin (variante brisée)"
}, {
    id: "Latg",
    displayName: "latin (variante gaélique)"
}, {
    id: "Lepc",
    displayName: "lepcha"
}, {
    id: "Limb",
    displayName: "limbou"
}, {
    id: "Lina",
    displayName: "linéaire A"
}, {
    id: "Linb",
    displayName: "linéaire B"
}, {
    id: "Lisu",
    displayName: "lisu"
}, {
    id: "Loma",
    displayName: "loma"
}, {
    id: "Lyci",
    displayName: "lycien"
}, {
    id: "Lydi",
    displayName: "lydien"
}, {
    id: "Mahj",
    displayName: "mahajani"
}, {
    id: "Mlym",
    displayName: "malayalam"
}, {
    id: "Mand",
    displayName: "mandéen"
}, {
    id: "Mani",
    displayName: "manichéen"
}, {
    id: "Mtei",
    displayName: "meitei mayek"
}, {
    id: "Mend",
    displayName: "mendé"
}, {
    id: "Modi",
    displayName: "modi"
}, {
    id: "Mong",
    displayName: "mongol"
}, {
    id: "Moon",
    displayName: "moon"
}, {
    id: "Mroo",
    displayName: "mro"
}, {
    id: "Mult",
    displayName: "multani"
}, {
    id: "Mero",
    displayName: "méroïtique"
}, {
    id: "Merc",
    displayName: "méroïtique cursif"
}, {
    id: "Nbat",
    displayName: "nabatéen"
}, {
    id: "Nkgb",
    displayName: "nakhi géba"
}, {
    id: "Zxxx",
    displayName: "non écrit"
}, {
    id: "Narb",
    displayName: "nord-arabique"
}, {
    id: "Zmth",
    displayName: "notation mathématique"
}, {
    id: "Talu",
    displayName: "nouveau taï-lue"
}, {
    id: "Nshu",
    displayName: "nüshu"
}, {
    id: "Nkoo",
    displayName: "n’ko"
}, {
    id: "Ogam",
    displayName: "ogam"
}, {
    id: "Olck",
    displayName: "ol tchiki"
}, {
    id: "Orya",
    displayName: "oriya"
}, {
    id: "Orkh",
    displayName: "orkhon"
}, {
    id: "Osma",
    displayName: "osmanais"
}, {
    id: "Ugar",
    displayName: "ougaritique"
}, {
    id: "Hmng",
    displayName: "pahawh hmong"
}, {
    id: "Palm",
    displayName: "palmyrène"
}, {
    id: "Visp",
    displayName: "parole visible"
}, {
    id: "Prti",
    displayName: "parthe des inscriptions"
}, {
    id: "Pauc",
    displayName: "pau-cin-hau"
}, {
    id: "Phli",
    displayName: "pehlevi des inscriptions"
}, {
    id: "Phlv",
    displayName: "pehlevi des livres"
}, {
    id: "Phlp",
    displayName: "pehlevi des psautiers"
}, {
    id: "Phag",
    displayName: "phags pa"
}, {
    id: "Plrd",
    displayName: "phonétique de Pollard"
}, {
    id: "Phnx",
    displayName: "phénicien"
}, {
    id: "Rjng",
    displayName: "rejang"
}, {
    id: "Roro",
    displayName: "rongorongo"
}, {
    id: "Runr",
    displayName: "runique"
}, {
    id: "Samr",
    displayName: "samaritain"
}, {
    id: "Sara",
    displayName: "sarati"
}, {
    id: "Saur",
    displayName: "saurashtra"
}, {
    id: "Shaw",
    displayName: "shavien"
}, {
    id: "Sidd",
    displayName: "siddham"
}, {
    id: "Hans",
    displayName: "simplifié"
}, {
    id: "Sind",
    displayName: "sindhi"
}, {
    id: "Hani",
    displayName: "sinogrammes"
}, {
    id: "Sora",
    displayName: "sora sompeng"
}, {
    id: "Dupl",
    displayName: "sténographie Duployé"
}, {
    id: "Sarb",
    displayName: "sud-arabique ancien"
}, {
    id: "Sund",
    displayName: "sundanais"
}, {
    id: "Cans",
    displayName: "syllabaire autochtone canadien unifié"
}, {
    id: "Cprt",
    displayName: "syllabaire chypriote"
}, {
    id: "Sylo",
    displayName: "sylotî nâgrî"
}, {
    id: "Zsym",
    displayName: "symboles"
}, {
    id: "Blis",
    displayName: "symboles Bliss"
}, {
    id: "Syrc",
    displayName: "syriaque"
}, {
    id: "Syre",
    displayName: "syriaque estranghélo"
}, {
    id: "Syrj",
    displayName: "syriaque occidental"
}, {
    id: "Syrn",
    displayName: "syriaque oriental"
}, {
    id: "Tglg",
    displayName: "tagal"
}, {
    id: "Tagb",
    displayName: "tagbanoua"
}, {
    id: "Taml",
    displayName: "tamoul"
}, {
    id: "Tang",
    displayName: "tangoute"
}, {
    id: "Tavt",
    displayName: "taï viêt"
}, {
    id: "Tale",
    displayName: "taï-le"
}, {
    id: "Teng",
    displayName: "tengwar"
}, {
    id: "Thai",
    displayName: "thaï"
}, {
    id: "Thaa",
    displayName: "thâna"
}, {
    id: "Tibt",
    displayName: "tibétain"
}, {
    id: "Tfng",
    displayName: "tifinagh"
}, {
    id: "Tirh",
    displayName: "tirhouta"
}, {
    id: "Hant",
    displayName: "traditionnel"
}, {
    id: "Takr",
    displayName: "tâkrî"
}, {
    id: "Telu",
    displayName: "télougou"
}, {
    id: "Qaaa",
    displayName: "utilisation privée (Qaaa)"
}, {
    id: "Qaab",
    displayName: "utilisation privée (Qaab)"
}, {
    id: "Qaac",
    displayName: "utilisation privée (Qaac)"
}, {
    id: "Qaad",
    displayName: "utilisation privée (Qaad)"
}, {
    id: "Qaae",
    displayName: "utilisation privée (Qaae)"
}, {
    id: "Qaaf",
    displayName: "utilisation privée (Qaaf)"
}, {
    id: "Qaag",
    displayName: "utilisation privée (Qaag)"
}, {
    id: "Qaah",
    displayName: "utilisation privée (Qaah)"
}, {
    id: "Qaak",
    displayName: "utilisation privée (Qaak)"
}, {
    id: "Qaal",
    displayName: "utilisation privée (Qaal)"
}, {
    id: "Qaam",
    displayName: "utilisation privée (Qaam)"
}, {
    id: "Qaan",
    displayName: "utilisation privée (Qaan)"
}, {
    id: "Qaao",
    displayName: "utilisation privée (Qaao)"
}, {
    id: "Qaap",
    displayName: "utilisation privée (Qaap)"
}, {
    id: "Qaaq",
    displayName: "utilisation privée (Qaaq)"
}, {
    id: "Qaar",
    displayName: "utilisation privée (Qaar)"
}, {
    id: "Qaas",
    displayName: "utilisation privée (Qaas)"
}, {
    id: "Qaat",
    displayName: "utilisation privée (Qaat)"
}, {
    id: "Qaau",
    displayName: "utilisation privée (Qaau)"
}, {
    id: "Qaav",
    displayName: "utilisation privée (Qaav)"
}, {
    id: "Qaaw",
    displayName: "utilisation privée (Qaaw)"
}, {
    id: "Qaax",
    displayName: "utilisation privée (Qaax)"
}, {
    id: "Qaay",
    displayName: "utilisation privée (Qaay)"
}, {
    id: "Qaaz",
    displayName: "utilisation privée (Qaaz)"
}, {
    id: "Qaba",
    displayName: "utilisation privée (Qaba)"
}, {
    id: "Qabb",
    displayName: "utilisation privée (Qabb)"
}, {
    id: "Qabc",
    displayName: "utilisation privée (Qabc)"
}, {
    id: "Qabd",
    displayName: "utilisation privée (Qabd)"
}, {
    id: "Qabe",
    displayName: "utilisation privée (Qabe)"
}, {
    id: "Qabf",
    displayName: "utilisation privée (Qabf)"
}, {
    id: "Qabg",
    displayName: "utilisation privée (Qabg)"
}, {
    id: "Qabh",
    displayName: "utilisation privée (Qabh)"
}, {
    id: "Qabi",
    displayName: "utilisation privée (Qabi)"
}, {
    id: "Qabj",
    displayName: "utilisation privée (Qabj)"
}, {
    id: "Qabk",
    displayName: "utilisation privée (Qabk)"
}, {
    id: "Qabl",
    displayName: "utilisation privée (Qabl)"
}, {
    id: "Qabm",
    displayName: "utilisation privée (Qabm)"
}, {
    id: "Qabn",
    displayName: "utilisation privée (Qabn)"
}, {
    id: "Qabo",
    displayName: "utilisation privée (Qabo)"
}, {
    id: "Qabp",
    displayName: "utilisation privée (Qabp)"
}, {
    id: "Qabq",
    displayName: "utilisation privée (Qabq)"
}, {
    id: "Qabr",
    displayName: "utilisation privée (Qabr)"
}, {
    id: "Qabs",
    displayName: "utilisation privée (Qabs)"
}, {
    id: "Qabt",
    displayName: "utilisation privée (Qabt)"
}, {
    id: "Qabu",
    displayName: "utilisation privée (Qabu)"
}, {
    id: "Qabv",
    displayName: "utilisation privée (Qabv)"
}, {
    id: "Qabw",
    displayName: "utilisation privée (Qabw)"
}, {
    id: "Qabx",
    displayName: "utilisation privée (Qabx)"
}, {
    id: "Vaii",
    displayName: "vaï"
}, {
    id: "Wara",
    displayName: "warang citi"
}, {
    id: "Wole",
    displayName: "woléaï"
}, {
    id: "Yiii",
    displayName: "yi"
}, {
    id: "Sgnw",
    displayName: "écriture des signes"
}, {
    id: "Zzzz",
    displayName: "écriture inconnue"
}, {
    id: "Ethi",
    displayName: "éthiopique"
} ];

inter.currencies = [ {
    id: "XTS",
    displayName: "(devise de test)",
    symbol: "XTS",
    one: "(devise de test)",
    other: "(devises de test)"
}, {
    id: "AFA",
    displayName: "afghani (1927–2002)",
    symbol: "AFA",
    one: "afghani (1927–2002)",
    other: "afghanis (1927–2002)"
}, {
    id: "AFN",
    displayName: "afghani afghan",
    symbol: "AFN",
    one: "afghani afghan",
    other: "afghanis afghan"
}, {
    id: "ROL",
    displayName: "ancien leu roumain",
    one: "leu roumain (1952–2005)",
    other: "lei roumains (1952–2005)"
}, {
    id: "XAG",
    displayName: "argent",
    symbol: "XAG",
    one: "once troy d’argent",
    other: "onces troy d’argent"
}, {
    id: "MGA",
    displayName: "ariary malgache",
    symbol: "MGA",
    one: "ariary malgache",
    other: "ariarys malgaches"
}, {
    id: "ARA",
    displayName: "austral argentin",
    symbol: "ARA",
    one: "austral argentin",
    other: "australs argentins"
}, {
    id: "THB",
    displayName: "baht thaïlandais",
    symbol: "THB",
    one: "baht thaïlandais",
    other: "bahts thaïlandais"
}, {
    id: "PAB",
    displayName: "balboa panaméen",
    symbol: "PAB",
    one: "balboa panaméen",
    other: "balboas panaméens"
}, {
    id: "ETB",
    displayName: "birr éthiopien",
    symbol: "ETB",
    one: "birr éthiopien",
    other: "birrs éthiopiens"
}, {
    id: "VEF",
    displayName: "bolivar vénézuélien",
    symbol: "VEF",
    one: "bolivar vénézuélien",
    other: "bolivars vénézuéliens"
}, {
    id: "VEB",
    displayName: "bolivar vénézuélien (1871–2008)",
    symbol: "VEB",
    one: "bolivar vénézuélien (1871–2008)",
    other: "bolivar vénézuélien (1871–2008)"
}, {
    id: "BOB",
    displayName: "boliviano bolivien",
    symbol: "BOB",
    one: "boliviano bolivien",
    other: "bolivianos boliviens"
}, {
    id: "BOL",
    displayName: "boliviano bolivien (1863–1963)",
    symbol: "BOL",
    one: "boliviano bolivien (1863–1963)",
    other: "bolivianos boliviens (1863–1963)"
}, {
    id: "CRC",
    displayName: "colón costaricain",
    symbol: "CRC",
    one: "colón costaricain",
    other: "colóns costaricains"
}, {
    id: "SVC",
    displayName: "colón salvadorien",
    symbol: "SVC",
    one: "colón salvadorien",
    other: "colóns salvadoriens"
}, {
    id: "NIC",
    displayName: "cordoba",
    symbol: "NIC",
    one: "córdoba nicaraguayen (1912–1988)",
    other: "córdobas nicaraguayens (1912–1988)"
}, {
    id: "GEK",
    displayName: "coupon de lari géorgien",
    symbol: "GEK",
    one: "coupon de lari géorgien",
    other: "coupons de lari géorgiens"
}, {
    id: "DKK",
    displayName: "couronne danoise",
    symbol: "DKK",
    one: "couronne danoise",
    other: "couronnes danoises"
}, {
    id: "EEK",
    displayName: "couronne estonienne",
    one: "couronne estonienne",
    other: "couronnes estoniennes"
}, {
    id: "CSK",
    displayName: "couronne forte tchécoslovaque",
    one: "couronne forte tchécoslovaque",
    other: "couronnes fortes tchécoslovaques"
}, {
    id: "ISK",
    displayName: "couronne islandaise",
    symbol: "ISK",
    one: "couronne islandaise",
    other: "couronnes islandaises"
}, {
    id: "NOK",
    displayName: "couronne norvégienne",
    symbol: "NOK",
    one: "couronne norvégienne",
    other: "couronnes norvégiennes"
}, {
    id: "SKK",
    displayName: "couronne slovaque",
    one: "couronne slovaque",
    other: "couronnes slovaques"
}, {
    id: "SEK",
    displayName: "couronne suédoise",
    symbol: "SEK",
    one: "couronne suédoise",
    other: "couronnes suédoises"
}, {
    id: "CZK",
    displayName: "couronne tchèque",
    symbol: "CZK",
    one: "couronne tchèque",
    other: "couronnes tchèques"
}, {
    id: "BRC",
    displayName: "cruzado brésilien (1986–1989)",
    symbol: "BRC",
    one: "cruzado brésilien (1986–1989)",
    other: "cruzados brésiliens (1986–1989)"
}, {
    id: "BRR",
    displayName: "cruzeiro",
    symbol: "BRR",
    one: "cruzeiro réal brésilien (1993–1994)",
    other: "cruzeiros réals brésiliens (1993–1994)"
}, {
    id: "BRZ",
    displayName: "cruzeiro brésilien (1942–1967)",
    symbol: "BRZ",
    one: "cruzeiro brésilien (1942–1967)",
    other: "cruzeiros brésiliens (1942–1967)"
}, {
    id: "BRE",
    displayName: "cruzeiro brésilien (1990–1993)",
    symbol: "BRE",
    one: "cruzeiro brésilien (1990–1993)",
    other: "cruzeiros brésiliens (1990–1993)"
}, {
    id: "GHC",
    displayName: "cédi",
    one: "cédi ghanéen (1967–2007)",
    other: "cédis ghanéens (1967–2007)"
}, {
    id: "GHS",
    displayName: "cédi ghanéen",
    symbol: "GHS",
    one: "cédi ghanéen",
    other: "cédis ghanéens"
}, {
    id: "NIO",
    displayName: "córdoba oro nicaraguayen",
    symbol: "NIO",
    one: "córdoba oro nicaraguayen",
    other: "córdobas oro nicaraguayens"
}, {
    id: "GMD",
    displayName: "dalasi gambien",
    symbol: "GMD",
    one: "dalasi gambien",
    other: "dalasis gambiens"
}, {
    id: "MKD",
    displayName: "denar macédonien",
    symbol: "MKD",
    one: "denar macédonien",
    other: "denars macédoniens"
}, {
    id: "XXX",
    displayName: "devise inconnue ou non valide",
    symbol: "XXX",
    one: "devise inconnue",
    other: "devises inconnues"
}, {
    id: "DZD",
    displayName: "dinar algérien",
    symbol: "DZD",
    one: "dinar algérien",
    other: "dinars algériens"
}, {
    id: "BHD",
    displayName: "dinar bahreïni",
    symbol: "BHD",
    one: "dinar bahreïni",
    other: "dinars bahreïnis"
}, {
    id: "BAD",
    displayName: "dinar bosniaque",
    one: "dinar bosniaque",
    other: "dinars bosniaques"
}, {
    id: "HRD",
    displayName: "dinar croate",
    one: "dinar croate",
    other: "dinars croates"
}, {
    id: "YDD",
    displayName: "dinar du Yémen",
    symbol: "YDD",
    one: "dinar nord-yéménite",
    other: "dinars nord-yéménites"
}, {
    id: "IQD",
    displayName: "dinar irakien",
    symbol: "IQD",
    one: "dinar irakien",
    other: "dinars irakiens"
}, {
    id: "JOD",
    displayName: "dinar jordanien",
    symbol: "JOD",
    one: "dinar jordanien",
    other: "dinars jordaniens"
}, {
    id: "KWD",
    displayName: "dinar koweïtien",
    symbol: "KWD",
    one: "dinar koweïtien",
    other: "dinar koweïtiens"
}, {
    id: "LYD",
    displayName: "dinar libyen",
    symbol: "LYD",
    one: "dinar libyen",
    other: "dinars libyens"
}, {
    id: "RSD",
    displayName: "dinar serbe",
    symbol: "RSD",
    one: "dinar serbe",
    other: "dinars serbes"
}, {
    id: "CSD",
    displayName: "dinar serbo-monténégrin",
    one: "dinar serbo-monténégrin",
    other: "dinars serbo-monténégrins"
}, {
    id: "SDD",
    displayName: "dinar soudanais",
    symbol: "SDD",
    one: "dinar soudanais (1992–2007)",
    other: "dinars soudanais (1992–2007)"
}, {
    id: "TND",
    displayName: "dinar tunisien",
    symbol: "TND",
    one: "dinar tunisien",
    other: "dinars tunisiens"
}, {
    id: "YUM",
    displayName: "dinar yougoslave Noviy",
    one: "nouveau dinar yougoslave (1994–2003)",
    other: "nouveaux dinars yougoslaves (1994–2003)"
}, {
    id: "YUN",
    displayName: "dinar yougoslave convertible",
    one: "dinar convertible yougoslave (1990–1992)",
    other: "dinars convertibles yougoslaves (1990–1992)"
}, {
    id: "AED",
    displayName: "dirham des Émirats arabes unis",
    symbol: "AED",
    one: "dirham des Émirats arabes unis",
    other: "dirhams des Émirats arabes unis"
}, {
    id: "MAD",
    displayName: "dirham marocain",
    symbol: "MAD",
    one: "dirham marocain",
    other: "dirhams marocains"
}, {
    id: "STD",
    displayName: "dobra santoméen",
    symbol: "STD",
    one: "dobra santoméen",
    other: "dobras santoméens"
}, {
    id: "AUD",
    displayName: "dollar australien",
    symbol: "$AU",
    one: "dollar australien",
    other: "dollars australiens"
}, {
    id: "BSD",
    displayName: "dollar bahaméen",
    symbol: "$BS",
    one: "dollar bahaméen",
    other: "dollars bahaméens"
}, {
    id: "BBD",
    displayName: "dollar barbadien",
    symbol: "BBD",
    one: "dollar barbadien",
    other: "dollars barbadiens"
}, {
    id: "BMD",
    displayName: "dollar bermudien",
    symbol: "$BM",
    one: "dollar bermudien",
    other: "dollars bermudiens"
}, {
    id: "BND",
    displayName: "dollar brunéien",
    symbol: "$BN",
    one: "dollar brunéien",
    other: "dollars brunéiens"
}, {
    id: "BZD",
    displayName: "dollar bélizéen",
    symbol: "$BZ",
    one: "dollar bélizéen",
    other: "dollars bélizéens"
}, {
    id: "CAD",
    displayName: "dollar canadien",
    symbol: "$CA",
    one: "dollar canadien",
    other: "dollars canadiens"
}, {
    id: "HKD",
    displayName: "dollar de Hong Kong",
    symbol: "HKD",
    one: "dollar de Hong Kong",
    other: "dollars de Hong Kong"
}, {
    id: "SGD",
    displayName: "dollar de Singapour",
    symbol: "$SG",
    one: "dollar de Singapour",
    other: "dollars de Singapour"
}, {
    id: "CNX",
    displayName: "dollar de la Banque populaire chinoise",
    symbol: "CNX",
    one: "dollar de la Banque populaire chinoise",
    other: "dollars de la Banque populaire chinoise"
}, {
    id: "XCD",
    displayName: "dollar des Caraïbes orientales",
    symbol: "XCD",
    one: "dollar des Caraïbes orientales",
    other: "dollars des Caraïbes orientales"
}, {
    id: "USS",
    displayName: "dollar des Etats-Unis (jour même)",
    symbol: "USS",
    one: "dollar des États-Unis (jour même)",
    other: "dollars des États-Unis (jour même)"
}, {
    id: "USN",
    displayName: "dollar des Etats-Unis (jour suivant)",
    symbol: "USN",
    one: "dollar des États-Unis (jour suivant)",
    other: "dollars des États-Unis (jour suivant)"
}, {
    id: "USD",
    displayName: "dollar des États-Unis",
    symbol: "$US",
    one: "dollar des États-Unis",
    other: "dollars des États-Unis"
}, {
    id: "KYD",
    displayName: "dollar des îles Caïmans",
    symbol: "KYD",
    one: "dollar des îles Caïmans",
    other: "dollars des îles Caïmans"
}, {
    id: "SBD",
    displayName: "dollar des îles Salomon",
    symbol: "$SB",
    one: "dollar des îles Salomon",
    other: "dollars des îles Salomon"
}, {
    id: "GYD",
    displayName: "dollar du Guyana",
    symbol: "GYD",
    one: "dollar du Guyana",
    other: "dollars du Guyana"
}, {
    id: "FJD",
    displayName: "dollar fidjien",
    symbol: "$FJ",
    one: "dollar fidjien",
    other: "dollars fidjiens"
}, {
    id: "JMD",
    displayName: "dollar jamaïcain",
    symbol: "JMD",
    one: "dollar jamaïcain",
    other: "dollars jamaïcains"
}, {
    id: "LRD",
    displayName: "dollar libérien",
    symbol: "LRD",
    one: "dollar libérien",
    other: "dollars libériens"
}, {
    id: "NAD",
    displayName: "dollar namibien",
    symbol: "$NA",
    one: "dollar namibien",
    other: "dollars namibiens"
}, {
    id: "NZD",
    displayName: "dollar néo-zélandais",
    symbol: "$NZ",
    one: "dollar néo-zélandais",
    other: "dollars néo-zélandais"
}, {
    id: "RHD",
    displayName: "dollar rhodésien",
    symbol: "$RH",
    one: "dollar rhodésien",
    other: "dollars rhodésiens"
}, {
    id: "SRD",
    displayName: "dollar surinamais",
    symbol: "$SR",
    one: "dollar surinamais",
    other: "dollars surinamais"
}, {
    id: "TTD",
    displayName: "dollar trinidadien",
    symbol: "$TT",
    one: "dollar de Trinité-et-Tobago",
    other: "dollars de Trinité-et-Tobago"
}, {
    id: "ZWD",
    displayName: "dollar zimbabwéen",
    symbol: "ZWD",
    one: "dollar zimbabwéen",
    other: "dollars zimbabwéens"
}, {
    id: "ZWR",
    displayName: "dollar zimbabwéen (2008)",
    symbol: "ZWR",
    one: "dollar zimbabwéen (2008)",
    other: "dollars zimbabwéens (2008)"
}, {
    id: "ZWL",
    displayName: "dollar zimbabwéen (2009)",
    symbol: "ZWL",
    one: "dollar zimbabwéen (2009)",
    other: "dollars zimbabwéens (2009)"
}, {
    id: "GRD",
    displayName: "drachme grecque",
    one: "drachme grecque",
    other: "drachmes grecques"
}, {
    id: "AMD",
    displayName: "dram arménien",
    symbol: "AMD",
    one: "dram arménien",
    other: "drams arméniens"
}, {
    id: "XDR",
    displayName: "droit de tirage spécial",
    symbol: "DTS",
    one: "droit de tirage spécial",
    other: "droits de tirage spéciaux"
}, {
    id: "VND",
    displayName: "dông vietnamien",
    symbol: "₫",
    one: "dông vietnamien",
    other: "dôngs vietnamiens"
}, {
    id: "VNN",
    displayName: "dông vietnamien (1978–1985)",
    symbol: "VNN",
    one: "dông vietnamien (1978–1985)",
    other: "dôngs vietnamiens (1978–1985)"
}, {
    id: "GQE",
    displayName: "ekwélé équatoguinéen",
    symbol: "GQE",
    one: "ekwélé équatoguinéen",
    other: "ekwélés équatoguinéens"
}, {
    id: "CVE",
    displayName: "escudo capverdien",
    symbol: "CVE",
    one: "escudo capverdien",
    other: "escudos capverdiens"
}, {
    id: "CLE",
    displayName: "escudo chilien",
    symbol: "CLE",
    one: "escudo chilien",
    other: "escudos chiliens"
}, {
    id: "GWE",
    displayName: "escudo de Guinée portugaise",
    one: "escudo de Guinée portugaise",
    other: "escudos de Guinée portugaise"
}, {
    id: "MZE",
    displayName: "escudo mozambicain",
    symbol: "MZE",
    one: "escudo mozambicain",
    other: "escudos mozambicains"
}, {
    id: "PTE",
    displayName: "escudo portugais",
    one: "escudo portugais",
    other: "escudos portugais"
}, {
    id: "TPE",
    displayName: "escudo timorais",
    symbol: "TPE",
    one: "escudo timorais",
    other: "escudos timorais"
}, {
    id: "EUR",
    displayName: "euro",
    symbol: "€",
    one: "euro",
    other: "euros"
}, {
    id: "CHE",
    displayName: "euro WIR",
    one: "euro WIR",
    other: "euros WIR"
}, {
    id: "ANG",
    displayName: "florin antillais",
    symbol: "ANG",
    one: "florin antillais",
    other: "florins antillais"
}, {
    id: "AWG",
    displayName: "florin arubais",
    symbol: "AWG",
    one: "florin arubais",
    other: "florins arubais"
}, {
    id: "NLG",
    displayName: "florin néerlandais",
    one: "florin néerlandais",
    other: "florins néerlandais"
}, {
    id: "SRG",
    displayName: "florin surinamais",
    symbol: "SRG",
    one: "florin surinamais",
    other: "florins surinamais"
}, {
    id: "HUF",
    displayName: "forint hongrois",
    symbol: "HUF",
    one: "forint hongrois",
    other: "forints hongrois"
}, {
    id: "XOF",
    displayName: "franc CFA (BCEAO)",
    symbol: "CFA",
    one: "franc CFA (BCEAO)",
    other: "francs CFA (BCEAO)"
}, {
    id: "XAF",
    displayName: "franc CFA (BEAC)",
    symbol: "FCFA",
    one: "franc CFA (BEAC)",
    other: "francs CFA (BEAC)"
}, {
    id: "XPF",
    displayName: "franc CFP",
    symbol: "FCFP",
    one: "franc CFP",
    other: "francs CFP"
}, {
    id: "XFU",
    displayName: "franc UIC",
    symbol: "XFU",
    one: "franc UIC",
    other: "francs UIC"
}, {
    id: "CHW",
    displayName: "franc WIR",
    one: "franc WIR",
    other: "francs WIR"
}, {
    id: "BEF",
    displayName: "franc belge",
    symbol: "FB",
    one: "franc belge",
    other: "francs belges"
}, {
    id: "BEC",
    displayName: "franc belge (convertible)",
    one: "franc belge (convertible)",
    other: "francs belges (convertibles)"
}, {
    id: "BEL",
    displayName: "franc belge (financier)",
    one: "franc belge (financier)",
    other: "francs belges (financiers)"
}, {
    id: "BIF",
    displayName: "franc burundais",
    symbol: "BIF",
    one: "franc burundais",
    other: "francs burundais"
}, {
    id: "KMF",
    displayName: "franc comorien",
    symbol: "KMF",
    one: "franc comorien",
    other: "francs comoriens"
}, {
    id: "CDF",
    displayName: "franc congolais",
    symbol: "CDF",
    one: "franc congolais",
    other: "francs congolais"
}, {
    id: "LUC",
    displayName: "franc convertible luxembourgeois",
    one: "franc convertible luxembourgeois",
    other: "francs convertibles luxembourgeois"
}, {
    id: "DJF",
    displayName: "franc djiboutien",
    symbol: "DJF",
    one: "franc djiboutien",
    other: "francs djiboutiens"
}, {
    id: "LUL",
    displayName: "franc financier luxembourgeois",
    one: "franc financier luxembourgeois",
    other: "francs financiers luxembourgeois"
}, {
    id: "FRF",
    displayName: "franc français",
    symbol: "F",
    one: "franc français",
    other: "francs français"
}, {
    id: "GNF",
    displayName: "franc guinéen",
    symbol: "GNF",
    one: "franc guinéen",
    other: "francs guinéens"
}, {
    id: "LUF",
    displayName: "franc luxembourgeois",
    one: "franc luxembourgeois",
    other: "francs luxembourgeois"
}, {
    id: "MGF",
    displayName: "franc malgache",
    symbol: "Fmg",
    one: "franc malgache",
    other: "francs malgaches"
}, {
    id: "MLF",
    displayName: "franc malien",
    one: "franc malien",
    other: "francs maliens"
}, {
    id: "MAF",
    displayName: "franc marocain",
    symbol: "fMA",
    one: "franc marocain",
    other: "francs marocains"
}, {
    id: "XFO",
    displayName: "franc or",
    symbol: "XFO",
    one: "franc or",
    other: "francs or"
}, {
    id: "RWF",
    displayName: "franc rwandais",
    symbol: "RWF",
    one: "franc rwandais",
    other: "francs rwandais"
}, {
    id: "CHF",
    displayName: "franc suisse",
    symbol: "CHF",
    one: "franc suisse",
    other: "francs suisses"
}, {
    id: "HTG",
    displayName: "gourde haïtienne",
    symbol: "HTG",
    one: "gourde haïtienne",
    other: "gourdes haïtiennes"
}, {
    id: "PYG",
    displayName: "guaraní paraguayen",
    symbol: "PYG",
    one: "guaraní paraguayen",
    other: "guaranís paraguayens"
}, {
    id: "UAH",
    displayName: "hryvnia ukrainienne",
    symbol: "UAH",
    one: "hryvnia ukrainienne",
    other: "hryvnias ukrainiennes"
}, {
    id: "KRH",
    displayName: "hwan sud-coréen (1953–1962)",
    symbol: "KRH",
    one: "hwan sud-coréen (1953–1962)",
    other: "hwans sud-coréens (1953–1962)"
}, {
    id: "PEI",
    displayName: "inti péruvien",
    symbol: "PEI",
    one: "inti péruvien",
    other: "intis péruviens"
}, {
    id: "UAK",
    displayName: "karbovanetz",
    one: "karbovanets ukrainien (1992–1996)",
    other: "karbovanets ukrainiens (1992–1996)"
}, {
    id: "PGK",
    displayName: "kina papouan-néo-guinéen",
    symbol: "PGK",
    one: "kina papouan-néo-guinéen",
    other: "kinas papouan-néo-guinéens"
}, {
    id: "LAK",
    displayName: "kip loatien",
    symbol: "LAK",
    one: "kip loatien",
    other: "kips loatiens"
}, {
    id: "HRK",
    displayName: "kuna croate",
    symbol: "HRK",
    one: "kuna croate",
    other: "kunas croates"
}, {
    id: "MWK",
    displayName: "kwacha malawite",
    symbol: "MWK",
    one: "kwacha malawite",
    other: "kwachas malawites"
}, {
    id: "ZMW",
    displayName: "kwacha zambien",
    symbol: "ZMW",
    one: "kwacha zambien",
    other: "kwachas zambiens"
}, {
    id: "ZMK",
    displayName: "kwacha zambien (1968–2012)",
    symbol: "ZMK",
    one: "kwacha zambien (1968–2012)",
    other: "kwachas zambiens (1968–2012)"
}, {
    id: "AOA",
    displayName: "kwanza angolais",
    symbol: "AOA",
    one: "kwanza angolais",
    other: "kwanzas angolais"
}, {
    id: "AOK",
    displayName: "kwanza angolais (1977–1990)",
    symbol: "AOK",
    one: "kwanza angolais (1977–1990)",
    other: "kwanzas angolais (1977–1990)"
}, {
    id: "AOR",
    displayName: "kwanza angolais réajusté (1995–1999)",
    symbol: "AOR",
    one: "kwanza angolais réajusté (1995–1999)",
    other: "kwanzas angolais réajustés (1995–1999)"
}, {
    id: "BUK",
    displayName: "kyat birman",
    symbol: "BUK",
    one: "kyat birman",
    other: "kyats birmans"
}, {
    id: "MMK",
    displayName: "kyat myanmarais",
    symbol: "MMK",
    one: "kyat myanmarais",
    other: "kyats myanmarais"
}, {
    id: "GEL",
    displayName: "lari géorgien",
    symbol: "GEL",
    one: "lari géorgien",
    other: "lari géorgiens"
}, {
    id: "LVL",
    displayName: "lats letton",
    symbol: "LVL",
    one: "lats letton",
    other: "lats lettons"
}, {
    id: "ALL",
    displayName: "lek albanais",
    symbol: "ALL",
    one: "lek albanais",
    other: "leks albanais"
}, {
    id: "ALK",
    displayName: "lek albanais (1947–1961)",
    one: "lek albanais (1947–1961)",
    other: "leks albanais (1947–1961)"
}, {
    id: "HNL",
    displayName: "lempira hondurien",
    symbol: "HNL",
    one: "lempira hondurien",
    other: "lempiras honduriens"
}, {
    id: "SLL",
    displayName: "leone sierra-léonais",
    symbol: "SLL",
    one: "leone sierra-léonais",
    other: "leones sierra-léonais"
}, {
    id: "MDL",
    displayName: "leu moldave",
    symbol: "MDL",
    one: "leu moldave",
    other: "leus moldaves"
}, {
    id: "RON",
    displayName: "leu roumain",
    symbol: "RON",
    one: "leu roumain",
    other: "lei roumains"
}, {
    id: "BGN",
    displayName: "lev bulgare",
    symbol: "BGN",
    one: "lev bulgare",
    other: "levs bulgares"
}, {
    id: "BGL",
    displayName: "lev bulgare (1962–1999)",
    one: "lev bulgare (1962–1999)",
    other: "levs bulgares (1962–1999)"
}, {
    id: "SZL",
    displayName: "lilangeni swazi",
    symbol: "SZL",
    one: "lilangeni swazi",
    other: "lilangenis swazis"
}, {
    id: "ITL",
    displayName: "lire italienne",
    symbol: "₤IT",
    one: "lire italienne",
    other: "lires italiennes"
}, {
    id: "MTL",
    displayName: "lire maltaise",
    one: "lire maltaise",
    other: "lires maltaises"
}, {
    id: "LTL",
    displayName: "litas lituanien",
    symbol: "LTL",
    one: "litas lituanien",
    other: "litas lituaniens"
}, {
    id: "CYP",
    displayName: "livre chypriote",
    symbol: "£CY",
    one: "livre chypriote",
    other: "livres chypriotes"
}, {
    id: "GIP",
    displayName: "livre de Gibraltar",
    symbol: "£GI",
    one: "livre de Gibraltar",
    other: "livres de Gibraltar"
}, {
    id: "SHP",
    displayName: "livre de Sainte-Hélène",
    symbol: "SHP",
    one: "livre de Sainte-Hélène",
    other: "livres de Sainte-Hélène"
}, {
    id: "FKP",
    displayName: "livre des îles Malouines",
    symbol: "£FK",
    one: "livre des îles Malouines",
    other: "livres des îles Malouines"
}, {
    id: "IEP",
    displayName: "livre irlandaise",
    symbol: "£IE",
    one: "livre irlandaise",
    other: "livres irlandaises"
}, {
    id: "ILP",
    displayName: "livre israélienne",
    symbol: "£IL",
    one: "livre israélienne",
    other: "livres israéliennes"
}, {
    id: "LBP",
    displayName: "livre libanaise",
    symbol: "£LB",
    one: "livre libanaise",
    other: "livres libanaises"
}, {
    id: "MTP",
    displayName: "livre maltaise",
    symbol: "£MT",
    one: "livre maltaise",
    other: "livres maltaises"
}, {
    id: "SDG",
    displayName: "livre soudanaise",
    symbol: "SDG",
    one: "livre soudanaise",
    other: "livres soudanaises"
}, {
    id: "SDP",
    displayName: "livre soudanaise (1956–2007)",
    symbol: "SDP",
    one: "livre soudanaise (1956–2007)",
    other: "livres soudanaises (1956–2007)"
}, {
    id: "GBP",
    displayName: "livre sterling",
    symbol: "£GB",
    one: "livre sterling",
    other: "livres sterling"
}, {
    id: "SSP",
    displayName: "livre sud-soudanaise",
    symbol: "SSP",
    one: "livre sud-soudanaise",
    other: "livres sud-soudanaises"
}, {
    id: "SYP",
    displayName: "livre syrienne",
    symbol: "SYP",
    one: "livre syrienne",
    other: "livres syriennes"
}, {
    id: "TRY",
    displayName: "livre turque",
    symbol: "TRY",
    one: "livre turque",
    other: "livres turques"
}, {
    id: "TRL",
    displayName: "livre turque (1844–2005)",
    symbol: "TRL",
    one: "livre turque (1844–2005)",
    other: "livres turques (1844–2005)"
}, {
    id: "EGP",
    displayName: "livre égyptienne",
    symbol: "EGP",
    one: "livre égyptienne",
    other: "livres égyptiennes"
}, {
    id: "LSL",
    displayName: "loti lesothan",
    symbol: "lLS",
    one: "loti lesothan",
    other: "maloti lesothans"
}, {
    id: "AZN",
    displayName: "manat azéri",
    symbol: "AZN",
    one: "manat azéri",
    other: "manats azéris"
}, {
    id: "AZM",
    displayName: "manat azéri (1993–2006)",
    symbol: "AZM",
    one: "manat azéri (1993–2006)",
    other: "manats azéris (1993–2006)"
}, {
    id: "TMM",
    displayName: "manat turkmène",
    one: "manat turkmène",
    other: "manats turkmènes"
}, {
    id: "DEM",
    displayName: "mark allemand",
    one: "mark allemand",
    other: "marks allemands"
}, {
    id: "BAM",
    displayName: "mark convertible bosniaque",
    symbol: "BAM",
    one: "mark convertible bosniaque",
    other: "marks convertibles bosniaques"
}, {
    id: "DDM",
    displayName: "mark est-allemand",
    one: "mark est-allemand",
    other: "marks est-allemands"
}, {
    id: "FIM",
    displayName: "mark finlandais",
    one: "mark finlandais",
    other: "marks finlandais"
}, {
    id: "MZN",
    displayName: "metical mozambicain",
    symbol: "MZN",
    one: "metical mozambicain",
    other: "meticais mozambicains"
}, {
    id: "BOV",
    displayName: "mvdol bolivien",
    symbol: "BOV",
    one: "mvdol bolivien",
    other: "mvdols boliviens"
}, {
    id: "MZM",
    displayName: "métical",
    symbol: "MZM",
    one: "metical mozambicain (1980–2006)",
    other: "meticais mozambicains (1980–2006)"
}, {
    id: "ERN",
    displayName: "nafka érythréen",
    symbol: "ERN",
    one: "nafka érythréen",
    other: "nafkas érythréens"
}, {
    id: "NGN",
    displayName: "naira nigérian",
    symbol: "NGN",
    one: "naira nigérian",
    other: "nairas nigérians"
}, {
    id: "BTN",
    displayName: "ngultrum bouthanais",
    symbol: "BTN",
    one: "ngultrum bouthanais",
    other: "ngultrums bouthanais"
}, {
    id: "BRN",
    displayName: "nouveau cruzado",
    symbol: "BRN",
    one: "nouveau cruzado brésilien (1989–1990)",
    other: "nouveaux cruzados brésiliens (1989–1990)"
}, {
    id: "BRB",
    displayName: "nouveau cruzeiro brésilien (1967–1986)",
    symbol: "BRB",
    one: "nouveau cruzeiro brésilien (1967–1986)",
    other: "nouveaux cruzeiros brésiliens (1967–1986)"
}, {
    id: "YUD",
    displayName: "nouveau dinar yougoslave",
    one: "dinar fort yougoslave (1966–1989)",
    other: "dinars forts yougoslaves (1966–1989)"
}, {
    id: "TWD",
    displayName: "nouveau dollar taïwanais",
    symbol: "TWD",
    one: "nouveau dollar taïwanais",
    other: "nouveaux dollars taïwanais"
}, {
    id: "AON",
    displayName: "nouveau kwanza angolais (1990–2000)",
    symbol: "AON",
    one: "nouveau kwanza angolais (1990–2000)",
    other: "nouveaux kwanzas angolais (1990–2000)"
}, {
    id: "TMT",
    displayName: "nouveau manat turkmène",
    symbol: "TMT",
    one: "nouveau manat turkmène",
    other: "nouveaux manats turkmènes"
}, {
    id: "BYB",
    displayName: "nouveau rouble biélorusse (1994–1999)",
    one: "nouveau rouble biélorusse (1994–1999)",
    other: "nouveaux roubles biélorusses (1994–1999)"
}, {
    id: "ILS",
    displayName: "nouveau shekel israélien",
    symbol: "₪",
    one: "nouveau shekel israélien",
    other: "nouveaux shekels israéliens"
}, {
    id: "PEN",
    displayName: "nouveau sol péruvien",
    symbol: "PEN",
    one: "nouveau sol péruvien",
    other: "nouveaux sols péruviens"
}, {
    id: "ZRN",
    displayName: "nouveau zaïre zaïrien",
    symbol: "ZRN",
    one: "nouveau zaïre zaïrien",
    other: "nouveaux zaïres zaïriens"
}, {
    id: "XAU",
    displayName: "or",
    symbol: "XAU",
    one: "once troy d’or",
    other: "onces troy d’or"
}, {
    id: "MRO",
    displayName: "ouguiya mauritanien",
    symbol: "MRO",
    one: "ouguiya mauritanien",
    other: "ouguiyas mauritaniens"
}, {
    id: "XPD",
    displayName: "palladium",
    symbol: "XPD",
    one: "once troy de palladium",
    other: "onces troy de palladium"
}, {
    id: "MOP",
    displayName: "pataca macanaise",
    symbol: "MOP",
    one: "pataca macanaise",
    other: "patacas macanaises"
}, {
    id: "TOP",
    displayName: "pa’anga tongan",
    symbol: "TOP",
    one: "pa’anga tongan",
    other: "pa’angas tongans"
}, {
    id: "ADP",
    displayName: "peseta andorrane",
    one: "peseta andorrane",
    other: "pesetas andorranes"
}, {
    id: "ESP",
    displayName: "peseta espagnole",
    symbol: "₧",
    one: "peseta espagnole",
    other: "pesetas espagnoles"
}, {
    id: "ESA",
    displayName: "peseta espagnole (compte A)",
    one: "peseta espagnole (compte A)",
    other: "pesetas espagnoles (compte A)"
}, {
    id: "ESB",
    displayName: "peseta espagnole (compte convertible)",
    one: "peseta espagnole (compte convertible)",
    other: "pesetas espagnoles (compte convertible)"
}, {
    id: "ARS",
    displayName: "peso argentin",
    symbol: "$AR",
    one: "peso argentin",
    other: "pesos argentins"
}, {
    id: "ARM",
    displayName: "peso argentin (1881–1970)",
    symbol: "ARM",
    one: "peso argentin (1881–1970)",
    other: "pesos argentins (1881–1970)"
}, {
    id: "ARP",
    displayName: "peso argentin (1983–1985)",
    symbol: "ARP",
    one: "peso argentin (1983–1985)",
    other: "pesos argentins (1983–1985)"
}, {
    id: "GWP",
    displayName: "peso bissau-guinéen",
    one: "peso bissau-guinéen",
    other: "pesos bissau-guinéens"
}, {
    id: "BOP",
    displayName: "peso bolivien",
    symbol: "BOP",
    one: "peso bolivien",
    other: "pesos boliviens"
}, {
    id: "CLP",
    displayName: "peso chilien",
    symbol: "$CL",
    one: "peso chilien",
    other: "pesos chiliens"
}, {
    id: "COP",
    displayName: "peso colombien",
    symbol: "$CO",
    one: "peso colombien",
    other: "pesos colombiens"
}, {
    id: "CUP",
    displayName: "peso cubain",
    symbol: "CUP",
    one: "peso cubain",
    other: "pesos cubains"
}, {
    id: "CUC",
    displayName: "peso cubain convertible",
    symbol: "CUC",
    one: "peso cubain convertible",
    other: "pesos cubains convertibles"
}, {
    id: "DOP",
    displayName: "peso dominicain",
    symbol: "DOP",
    one: "peso dominicain",
    other: "pesos dominicains"
}, {
    id: "MXP",
    displayName: "peso d’argent mexicain (1861–1992)",
    symbol: "MXP",
    one: "peso d’argent mexicain (1861–1992)",
    other: "pesos d’argent mexicains (1861–1992)"
}, {
    id: "ARL",
    displayName: "peso lourd argentin (1970–1983)",
    symbol: "ARL",
    one: "peso lourd argentin (1970–1983)",
    other: "pesos lourds argentins (1970–1983)"
}, {
    id: "MXN",
    displayName: "peso mexicain",
    symbol: "$MX",
    one: "peso mexicain",
    other: "pesos mexicains"
}, {
    id: "PHP",
    displayName: "peso philippin",
    symbol: "PHP",
    one: "peso philippin",
    other: "pesos philippins"
}, {
    id: "UYU",
    displayName: "peso uruguayen",
    symbol: "$UY",
    one: "peso uruguayen",
    other: "pesos uruguayens"
}, {
    id: "UYP",
    displayName: "peso uruguayen (1975–1993)",
    symbol: "UYP",
    one: "peso uruguayen (1975–1993)",
    other: "pesos uruguayens (1975–1993)"
}, {
    id: "UYI",
    displayName: "peso uruguayen (unités indexées)",
    symbol: "UYI",
    one: "peso uruguayen (unités indexées)",
    other: "pesos uruguayen (unités indexées)"
}, {
    id: "XPT",
    displayName: "platine",
    symbol: "XPT",
    one: "once troy de platine",
    other: "onces troy de platine"
}, {
    id: "BWP",
    displayName: "pula botswanais",
    symbol: "BWP",
    one: "pula botswanais",
    other: "pulas botswanais"
}, {
    id: "GTQ",
    displayName: "quetzal guatémaltèque",
    symbol: "GTQ",
    one: "quetzal guatémaltèque",
    other: "quetzals guatémaltèques"
}, {
    id: "ZAR",
    displayName: "rand sud-africain",
    symbol: "ZAR",
    one: "rand sud-africain",
    other: "rands sud-africains"
}, {
    id: "ZAL",
    displayName: "rand sud-africain (financier)",
    symbol: "ZAL",
    one: "rand sud-africain (financier)",
    other: "rands sud-africains (financiers)"
}, {
    id: "IRR",
    displayName: "rial iranien",
    symbol: "IRR",
    one: "rial iranien",
    other: "rials iraniens"
}, {
    id: "OMR",
    displayName: "rial omanais",
    symbol: "OMR",
    one: "rial omanais",
    other: "rials omanis"
}, {
    id: "QAR",
    displayName: "rial qatari",
    symbol: "QAR",
    one: "rial qatari",
    other: "rials qataris"
}, {
    id: "SAR",
    displayName: "rial saoudien",
    symbol: "SAR",
    one: "rial saoudien",
    other: "rials saoudiens"
}, {
    id: "YER",
    displayName: "rial yéménite",
    symbol: "YER",
    one: "rial yéménite",
    other: "rials yéménites"
}, {
    id: "KHR",
    displayName: "riel cambodgien",
    symbol: "KHR",
    one: "riel cambodgien",
    other: "riels cambodgiens"
}, {
    id: "MYR",
    displayName: "ringgit malais",
    symbol: "MYR",
    one: "ringgit malais",
    other: "ringgits malais"
}, {
    id: "BYR",
    displayName: "rouble biélorusse",
    symbol: "BYR",
    one: "rouble biélorusse",
    other: "roubles biélorusses"
}, {
    id: "LVR",
    displayName: "rouble letton",
    one: "rouble letton",
    other: "roubles lettons"
}, {
    id: "RUB",
    displayName: "rouble russe",
    symbol: "RUB",
    one: "rouble russe",
    other: "roubles russes"
}, {
    id: "RUR",
    displayName: "rouble russe (1991–1998)",
    symbol: "р.",
    one: "rouble russe (1991–1998)",
    other: "roubles russes (1991–1998)"
}, {
    id: "SUR",
    displayName: "rouble soviétique",
    one: "rouble soviétique",
    other: "roubles soviétiques"
}, {
    id: "TJR",
    displayName: "rouble tadjik",
    one: "rouble tadjik",
    other: "roubles tadjiks"
}, {
    id: "SCR",
    displayName: "roupie des Seychelles",
    symbol: "SCR",
    one: "roupie des Seychelles",
    other: "roupies des Seychelles"
}, {
    id: "INR",
    displayName: "roupie indienne",
    symbol: "₹",
    one: "roupie indienne",
    other: "roupies indiennes"
}, {
    id: "IDR",
    displayName: "roupie indonésienne",
    symbol: "IDR",
    one: "roupie indonésienne",
    other: "roupies indonésiennes"
}, {
    id: "MVP",
    displayName: "roupie maldivienne",
    symbol: "MVP",
    one: "roupie maldivienne",
    other: "roupies maldiviennes"
}, {
    id: "MUR",
    displayName: "roupie mauricienne",
    symbol: "MUR",
    one: "roupie mauricienne",
    other: "roupies mauriciennes"
}, {
    id: "NPR",
    displayName: "roupie népalaise",
    symbol: "NPR",
    one: "roupie népalaise",
    other: "roupies népalaises"
}, {
    id: "PKR",
    displayName: "roupie pakistanaise",
    symbol: "PKR",
    one: "roupie pakistanaise",
    other: "roupies pakistanaises"
}, {
    id: "LKR",
    displayName: "roupie srilankaise",
    symbol: "LKR",
    one: "roupie srilankaise",
    other: "roupies srilankaises"
}, {
    id: "MVR",
    displayName: "rufiyaa maldivien",
    symbol: "MVR",
    one: "rufiyaa maldivienne",
    other: "rufiyaas maldiviennes"
}, {
    id: "BRL",
    displayName: "réal brésilien",
    symbol: "R$",
    one: "réal brésilien",
    other: "réals brésiliens"
}, {
    id: "ATS",
    displayName: "schilling autrichien",
    one: "schilling autrichien",
    other: "schillings autrichiens"
}, {
    id: "ILR",
    displayName: "shekel israélien (1980–1985)",
    symbol: "ILR",
    one: "shekel israélien (1980–1985)",
    other: "shekels israéliens (1980–1985)"
}, {
    id: "KES",
    displayName: "shilling kényan",
    symbol: "KES",
    one: "shilling kényan",
    other: "shillings kényans"
}, {
    id: "UGX",
    displayName: "shilling ougandais",
    symbol: "UGX",
    one: "shilling ougandais",
    other: "shillings ougandais"
}, {
    id: "UGS",
    displayName: "shilling ougandais (1966–1987)",
    symbol: "UGS",
    one: "shilling ougandais (1966–1987)",
    other: "shillings ougandais (1966–1987)"
}, {
    id: "SOS",
    displayName: "shilling somalien",
    symbol: "SOS",
    one: "shilling somalien",
    other: "shillings somaliens"
}, {
    id: "TZS",
    displayName: "shilling tanzanien",
    symbol: "TZS",
    one: "shilling tanzanien",
    other: "shillings tanzaniens"
}, {
    id: "PES",
    displayName: "sol péruvien",
    symbol: "PES",
    one: "sol péruvien (1863–1985)",
    other: "sols péruviens (1863–1985)"
}, {
    id: "KGS",
    displayName: "som kirghize",
    symbol: "KGS",
    one: "som kirghize",
    other: "soms kirghizes"
}, {
    id: "TJS",
    displayName: "somoni tadjik",
    symbol: "TJS",
    one: "somoni tadjik",
    other: "somonis tadjiks"
}, {
    id: "XSU",
    displayName: "sucre",
    symbol: "XSU",
    one: "sucre",
    other: "sucres"
}, {
    id: "ECS",
    displayName: "sucre équatorien",
    symbol: "ECS",
    one: "sucre équatorien",
    other: "sucres équatoriens"
}, {
    id: "UZS",
    displayName: "sum ouzbek",
    symbol: "UZS",
    one: "sum ouzbek",
    other: "sums ouzbeks"
}, {
    id: "GNS",
    displayName: "syli guinéen",
    one: "syli guinéen",
    other: "sylis guinéens"
}, {
    id: "BDT",
    displayName: "taka bangladeshi",
    symbol: "BDT",
    one: "taka bangladeshi",
    other: "takas bangladeshis"
}, {
    id: "WST",
    displayName: "tala samoan",
    symbol: "WS$",
    one: "tala samoan",
    other: "talas samoans"
}, {
    id: "LTT",
    displayName: "talonas lituanien",
    one: "talonas lituanien",
    other: "talonas lituaniens"
}, {
    id: "KZT",
    displayName: "tenge kazakh",
    symbol: "KZT",
    one: "tenge kazakh",
    other: "tenges kazakhs"
}, {
    id: "SIT",
    displayName: "tolar slovène",
    one: "tolar slovène",
    other: "tolars slovènes"
}, {
    id: "MNT",
    displayName: "tugrik mongol",
    symbol: "MNT",
    one: "tugrik mongol",
    other: "tugriks mongols"
}, {
    id: "XRE",
    displayName: "type de fonds RINET",
    symbol: "XRE",
    one: "unité de fonds RINET",
    other: "unités de fonds RINET"
}, {
    id: "XUA",
    displayName: "unité de compte ADB",
    symbol: "XUA",
    one: "unité de compte ADB",
    other: "unités de compte ADB"
}, {
    id: "XEU",
    displayName: "unité de compte européenne (ECU)",
    one: "unité de compte européenne (ECU)",
    other: "unités de compte européennes (ECU)"
}, {
    id: "XBC",
    displayName: "unité de compte européenne (XBC)",
    symbol: "XBC",
    one: "unité de compte 9 européenne (UEC–9)",
    other: "unités de compte 9 européennes (UEC–9)"
}, {
    id: "XBD",
    displayName: "unité de compte européenne (XBD)",
    symbol: "XBD",
    one: "unité de compte 17 européenne (UEC–17)",
    other: "unités de compte 17 européennes (UEC–17)"
}, {
    id: "MXV",
    displayName: "unité de conversion mexicaine (UDI)",
    symbol: "MXV",
    one: "unité de conversion mexicaine (UDI)",
    other: "unités de conversion mexicaines (UDI)"
}, {
    id: "ECV",
    displayName: "unité de valeur constante équatoriale (UVC)",
    symbol: "ECV",
    one: "unité de valeur constante équatorienne (UVC)",
    other: "unités de valeur constante équatoriennes (UVC)"
}, {
    id: "COU",
    displayName: "unité de valeur réelle colombienne",
    symbol: "COU",
    one: "unité de valeur réelle colombienne",
    other: "unités de valeur réelle colombiennes"
}, {
    id: "CLF",
    displayName: "unité d’investissement chilienne",
    symbol: "CLF",
    one: "unité d’investissement chilienne",
    other: "unités d’investissement chiliennes"
}, {
    id: "XBA",
    displayName: "unité européenne composée",
    symbol: "XBA",
    one: "unité composée européenne (EURCO)",
    other: "unités composées européennes (EURCO)"
}, {
    id: "XBB",
    displayName: "unité monétaire européenne",
    symbol: "XBB",
    one: "unité monétaire européenne (UME–6)",
    other: "unités monétaires européennes (UME–6)"
}, {
    id: "VUV",
    displayName: "vatu vanuatuan",
    symbol: "VUV",
    one: "vatu vanuatuan",
    other: "vatus vanuatuans"
}, {
    id: "KPW",
    displayName: "won nord-coréen",
    symbol: "KPW",
    one: "won nord-coréen",
    other: "wons nord-coréens"
}, {
    id: "KRW",
    displayName: "won sud-coréen",
    symbol: "₩",
    one: "won sud-coréen",
    other: "wons sud-coréens"
}, {
    id: "KRO",
    displayName: "won sud-coréen (1945–1953)",
    symbol: "KRO",
    one: "won sud-coréen (1945–1953)",
    other: "wons sud-coréens (1945–1953)"
}, {
    id: "JPY",
    displayName: "yen japonais",
    symbol: "JPY",
    one: "yen japonais",
    other: "yens japonais"
}, {
    id: "CNY",
    displayName: "yuan renminbi chinois",
    symbol: "CNY",
    one: "yuan renminbi chinois",
    other: "yuans renminbi chinois"
}, {
    id: "ZRZ",
    displayName: "zaïre zaïrois",
    symbol: "ZRZ",
    one: "zaïre zaïrois",
    other: "zaïres zaïrois"
}, {
    id: "PLZ",
    displayName: "zloty (1950–1995)",
    one: "zloty polonais (1950–1995)",
    other: "zlotys polonais (1950–1995)"
}, {
    id: "PLN",
    displayName: "zloty polonais",
    symbol: "PLN",
    one: "zloty polonais",
    other: "zlotys polonais"
} ];

module.exports = inter;