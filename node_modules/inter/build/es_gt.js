function defaults(targetObj) {
    for (var i = 1; i < arguments.length; i += 1) {
        if (arguments[i] && typeof arguments[i] === "object") {
            for (var propertyName in arguments[i]) {
                if (typeof targetObj[propertyName] === "undefined") {
                    targetObj[propertyName] = arguments[i][propertyName];
                }
            }
        }
    }
    return targetObj;
}

var P = require("./es.js"), inter = defaults({
    renderers: {}
}, P);

var _1f5d1 = {
    "default": "#,##0 %"
}, _1f5d2 = [ "T1", "T2", "T3", "T4" ], _1f5d3 = {
    all: {
        leap: "{0}bis"
    }
}, _1f5d4 = {
    one: "00k",
    other: "00k"
}, _1f5d5 = {
    one: "0 M",
    other: "0 M"
}, _1f5d6 = {
    one: "0 B",
    other: "0 B"
}, _1f5d7 = {
    one: "¤0K",
    other: "¤0K"
}, _1f5d8 = {
    one: "¤0M",
    other: "¤0M"
}, _1f5d9 = {
    one: "{0}°",
    other: "{0}°"
}, _1f5d10 = {
    one: "000k",
    other: "000k"
}, _1f5d11 = {
    one: "00 M",
    other: "00 M"
}, _1f5d12 = {
    one: "0k M",
    other: "0k M"
}, _1f5d13 = {
    one: "00 B",
    other: "00 B"
}, _1f5d14 = {
    one: "¤00K",
    other: "¤00K"
}, _1f5d15 = {
    one: "¤00M",
    other: "¤00M"
}, _1f5d16 = {
    one: "¤0 B",
    other: "¤0 B"
}, _1f5d17 = {
    a: "h a – h a",
    h: "h–h a"
}, _1f5d18 = {
    displayName: "a.m./p.m."
}, _1f5d19 = {
    one: "0 mil",
    other: "0 mil"
}, _1f5d20 = {
    one: "000 M",
    other: "000 M"
}, _1f5d21 = {
    one: "00k M",
    other: "00k M"
}, _1f5d22 = {
    one: "000 B",
    other: "000 B"
}, _1f5d23 = {
    one: "¤000K",
    other: "¤000K"
}, _1f5d24 = {
    one: "¤000M",
    other: "¤000M"
}, _1f5d25 = {
    one: "¤00 B",
    other: "¤00 B"
}, _1f5d26 = {
    displayName: "Zona horaria"
}, _1f5d27 = [ "antes de R.O.C.", "R.O.C." ], _1f5d28 = {
    one: "00 mil",
    other: "00 mil"
}, _1f5d29 = {
    one: "000k M",
    other: "000k M"
}, _1f5d30 = {
    one: "¤0000M",
    other: "¤0000M"
}, _1f5d31 = {
    one: "¤000 B",
    other: "¤000 B"
}, _1f5d32 = {
    a: "h a – h a v",
    h: "h–h a v"
}, _1f5d33 = [ "d", "l", "m", "m", "j", "v", "s" ], _1f5d34 = [ "D", "L", "M", "M", "J", "V", "S" ], _1f5d35 = {
    one: "{0} cal",
    other: "{0} cal"
}, _1f5d36 = {
    one: "000 mil",
    other: "000 mil"
}, _1f5d37 = {
    one: "¤00MRD ",
    other: "¤00MRD "
}, _1f5d38 = {
    d: "MMM d–d",
    M: "MMM d – MMM d"
}, _1f5d39 = {
    M: "d 'de' MMM 'al' d 'de' MMM"
}, _1f5d40 = {
    displayName: "día de la semana"
}, _1f5d41 = {
    wide: [ "AH" ],
    abbreviated: [ "AH" ]
}, _1f5d42 = {
    one: "¤000MRD ",
    other: "¤000MRD "
}, _1f5d43 = {
    h: "h:mm–h:mm a",
    m: "h:mm–h:mm a"
}, _1f5d44 = {
    H: "HH:mm–HH:mm",
    m: "HH:mm–HH:mm"
}, _1f5d45 = {
    d: "d/MM – d/MM",
    M: "d/MM – d/MM"
}, _1f5d46 = {
    M: "MM/y – MM/y",
    y: "MM/y – MM/y"
}, _1f5d47 = {
    M: "y-MM – y-MM",
    y: "y-MM – y-MM"
}, _1f5d48 = {
    M: "U MMM–MMM",
    y: "U MMM – U MMM"
}, _1f5d49 = {
    one: "0 millón",
    other: "0 millones"
}, _1f5d50 = {
    one: "0 billón",
    other: "0 billones"
}, _1f5d51 = [ "DO", "LU", "MA", "MI", "JU", "VI", "SA" ], _1f5d52 = {
    h: "h:mm–h:mm a v",
    m: "h:mm–h:mm a v"
}, _1f5d53 = {
    H: "HH:mm–HH:mm v",
    m: "HH:mm–HH:mm v"
}, _1f5d54 = {
    one: "hace {0} a",
    other: "hace {0} a"
}, _1f5d55 = {
    one: "hace {0} m",
    other: "hace {0} m"
}, _1f5d56 = {
    one: "hace {0} h",
    other: "hace {0} h"
}, _1f5d57 = {
    one: "hace {0} s",
    other: "hace {0} s"
}, _1f5d58 = {
    d: "MM-dd – MM-dd",
    M: "MM-dd – MM-dd"
}, _1f5d59 = {
    M: "U MMMM–MMMM",
    y: "U MMMM – U MMMM"
}, _1f5d60 = {
    one: "00 millones",
    other: "00 millones"
}, _1f5d61 = {
    one: "00 billones",
    other: "00 billones"
}, _1f5d62 = {
    one: "{0} quilate",
    other: "{0} quilates"
}, _1f5d63 = {
    one: "{0} caloría",
    other: "{0} calorías"
}, _1f5d64 = {
    one: "000 millones",
    other: "000 millones"
}, _1f5d65 = {
    one: "000 billones",
    other: "000 billones"
}, _1f5d66 = {
    d: "E d/MM – E d/MM",
    M: "E d/MM – E d/MM"
}, _1f5d67 = {
    one: "hace {0} min",
    other: "hace {0} min"
}, _1f5d68 = {
    one: "hace {0} año",
    other: "hace {0} años"
}, _1f5d69 = {
    one: "hace {0} día",
    other: "hace {0} días"
}, _1f5d70 = {
    one: "hace {0} mes",
    other: "hace {0} meses"
}, _1f5d71 = {
    one: "hace {0} sem.",
    other: "hace {0} sem."
}, _1f5d72 = {
    one: "hace {0} hora",
    other: "hace {0} horas"
}, _1f5d73 = {
    one: "0 mil millones",
    other: "0 mil millones"
}, _1f5d74 = {
    one: "hace {0} trim.",
    other: "hace {0} trim."
}, _1f5d75 = {
    one: "00 mil millones",
    other: "00 mil millones"
}, _1f5d76 = {
    one: "dentro de {0} a",
    other: "dentro de {0} a"
}, _1f5d77 = {
    one: "dentro de {0} m",
    other: "dentro de {0} m"
}, _1f5d78 = {
    one: "dentro de {0} h",
    other: "dentro de {0} h"
}, _1f5d79 = {
    one: "dentro de {0} s",
    other: "dentro de {0} s"
}, _1f5d80 = {
    one: "hace {0} semana",
    other: "hace {0} semanas"
}, _1f5d81 = {
    one: "hace {0} minuto",
    other: "hace {0} minutos"
}, _1f5d82 = {
    one: "000 mil millones",
    other: "000 mil millones"
}, _1f5d83 = [ "e", "f", "m", "a", "m", "j", "j", "a", "s", "o", "n", "d" ], _1f5d84 = {
    d: "MM-dd, E – MM-dd, E",
    M: "MM-dd, E – MM-dd, E"
}, _1f5d85 = {
    d: "MMM d, E – MMM d, E",
    M: "MMM d, E – MMM d, E"
}, _1f5d86 = {
    M: "MMM–MMM 'de' y",
    y: "MMM 'de' y 'a' MMM 'de' y"
}, _1f5d87 = [ "dom.", "lun.", "mar.", "mié.", "jue.", "vie.", "sáb." ], _1f5d88 = {
    one: "hace {0} segundo",
    other: "hace {0} segundos"
}, _1f5d89 = {
    wide: [ "ERA0", "ERA1" ],
    abbreviated: [ "ERA0", "ERA1" ]
}, _1f5d90 = {
    one: "dentro de {0} min",
    other: "dentro de {0} min"
}, _1f5d91 = {
    "0": "este DO",
    "1": "el próximo DO",
    "-1": "el DO pasado"
}, _1f5d92 = {
    "0": "este LU",
    "1": "el próximo LU",
    "-1": "el LU pasado"
}, _1f5d93 = {
    "0": "este MA",
    "1": "el próximo MA",
    "-1": "el MA pasado"
}, _1f5d94 = {
    "0": "este MI",
    "1": "el próximo MI",
    "-1": "el MI pasado"
}, _1f5d95 = {
    "0": "este JU",
    "1": "el próximo JU",
    "-1": "el JU pasado"
}, _1f5d96 = {
    "0": "este VI",
    "1": "el próximo VI",
    "-1": "el VI pasado"
}, _1f5d97 = {
    "0": "este SA",
    "1": "el próximo SA",
    "-1": "el SA pasado"
}, _1f5d98 = {
    one: "dentro de {0} año",
    other: "dentro de {0} años"
}, _1f5d99 = {
    one: "dentro de {0} día",
    other: "dentro de {0} días"
}, _1f5d100 = [ "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" ], _1f5d101 = {
    one: "dentro de {0} mes",
    other: "dentro de {0} meses"
}, _1f5d102 = {
    one: "dentro de {0} sem.",
    other: "dentro de {0} sem."
}, _1f5d103 = {
    a: "h:mm a – h:mm a",
    h: "h:mm–h:mm a",
    m: "h:mm–h:mm a"
}, _1f5d104 = {
    "0": "este año",
    "1": "el próximo año",
    "-1": "el año pasado"
}, _1f5d105 = {
    one: "hace {0} trimestre",
    other: "hace {0} trimestres"
}, _1f5d106 = {
    "0": "este mes",
    "1": "el próximo mes",
    "-1": "el mes pasado"
}, _1f5d107 = {
    one: "dentro de {0} hora",
    other: "dentro de {0} horas"
}, _1f5d108 = {
    "0": "this quarter",
    "1": "next quarter",
    "-1": "last quarter"
}, _1f5d109 = {
    one: "dentro de {0} trim.",
    other: "dentro de {0} trim."
}, _1f5d110 = {
    M: "MMMM–MMMM 'de' y G",
    y: "MMMM 'de' y – MMMM 'de' y G"
}, _1f5d111 = {
    "0": "este dom.",
    "1": "el próximo dom.",
    "-1": "el dom. pasado"
}, _1f5d112 = {
    "0": "este lun.",
    "1": "el próximo lun.",
    "-1": "el lun. pasado"
}, _1f5d113 = {
    "0": "este mar.",
    "1": "el próximo mar.",
    "-1": "el mar. pasado"
}, _1f5d114 = {
    "0": "este mié.",
    "1": "el próximo mié.",
    "-1": "el mié. pasado"
}, _1f5d115 = {
    "0": "este jue.",
    "1": "el próximo jue.",
    "-1": "el jue. pasado"
}, _1f5d116 = {
    "0": "este vie.",
    "1": "el próximo vie.",
    "-1": "el vie. pasado"
}, _1f5d117 = {
    "0": "este sáb.",
    "1": "el próximo sáb.",
    "-1": "el sáb. pasado"
}, _1f5d118 = {
    d: "U MMM d–d",
    M: "U MMM d – MMM d",
    y: "U MMM d – U MMM d"
}, _1f5d119 = [ "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13" ], _1f5d120 = {
    id: "IC",
    displayName: "islas Canarias",
    hasTimeZones: false
}, _1f5d121 = {
    one: "dentro de {0} semana",
    other: "dentro de {0} semanas"
}, _1f5d122 = {
    one: "dentro de {0} minuto",
    other: "dentro de {0} minutos"
}, _1f5d123 = {
    a: "h:mm a – h:mm a v",
    h: "h:mm–h:mm a v",
    m: "h:mm–h:mm a v"
}, _1f5d124 = {
    one: "dentro de {0} segundo",
    other: "dentro de {0} segundos"
}, _1f5d125 = {
    "0": "este lunes",
    "1": "el próximo lunes",
    "-1": "el lunes pasado"
}, _1f5d126 = {
    d: "d/MM/y – d/MM/y",
    M: "d/MM/y – d/MM/y",
    y: "d/MM/y – d/MM/y"
}, _1f5d127 = {
    d: "E d 'al' E d 'de' MMM",
    M: "E d 'de' MMM 'al' E d 'de' MMM"
}, _1f5d128 = {
    relative: _1f5d91
}, _1f5d129 = {
    relative: _1f5d92
}, _1f5d130 = {
    relative: _1f5d93
}, _1f5d131 = {
    relative: _1f5d94
}, _1f5d132 = {
    relative: _1f5d95
}, _1f5d133 = {
    relative: _1f5d96
}, _1f5d134 = {
    relative: _1f5d97
}, _1f5d135 = {
    id: "GB",
    displayName: "R. U.",
    regionId: "154",
    hasTimeZones: true
}, _1f5d136 = {
    "0": "esta semana",
    "1": "la próxima semana",
    "-1": "la semana pasada"
}, _1f5d137 = {
    "0": "este martes",
    "1": "el próximo martes",
    "-1": "el martes pasado"
}, _1f5d138 = {
    "0": "este jueves",
    "1": "el próximo jueves",
    "-1": "el jueves pasado"
}, _1f5d139 = {
    "0": "este sábado",
    "1": "el próximo sábado",
    "-1": "el sábado pasado"
}, _1f5d140 = {
    one: "dentro de {0} trimestre",
    other: "dentro de {0} trimestres"
}, _1f5d141 = {
    "0": "hoy",
    "1": "mañana",
    "2": "pasado mañana",
    "-2": "antier",
    "-1": "ayer"
}, _1f5d142 = {
    "0": "hoy",
    "1": "mañana",
    "2": "pasado mañana",
    "-2": "anteayer",
    "-1": "ayer"
}, _1f5d143 = {
    "0": "este domingo",
    "1": "el próximo domingo",
    "-1": "el domingo pasado"
}, _1f5d144 = {
    "0": "este viernes",
    "1": "el próximo viernes",
    "-1": "el viernes pasado"
}, _1f5d145 = [ "1.er trimestre", "2.º trimestre", "3.er trimestre", "4.º trimestre" ], _1f5d146 = {
    d: "y-MM-dd – y-MM-dd",
    M: "y-MM-dd – y-MM-dd",
    y: "y-MM-dd – y-MM-dd"
}, _1f5d147 = [ "domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado" ], _1f5d148 = {
    relative: _1f5d111
}, _1f5d149 = {
    relative: _1f5d112
}, _1f5d150 = {
    relative: _1f5d113
}, _1f5d151 = {
    relative: _1f5d114
}, _1f5d152 = {
    relative: _1f5d115
}, _1f5d153 = {
    relative: _1f5d116
}, _1f5d154 = {
    relative: _1f5d117
}, _1f5d155 = {
    relative: _1f5d125
}, _1f5d156 = {
    abbreviated: {
        leap: "{0}bis"
    },
    narrow: {
        leap: "{0}b"
    },
    wide: {
        leap: "{0}bis"
    }
}, _1f5d157 = {
    "0": "este miércoles",
    "1": "el próximo miércoles",
    "-1": "el miércoles pasado"
}, _1f5d158 = {
    d: "E d/MM/y – E d/MM/y",
    M: "E d/MM/y – E d/MM/y",
    y: "E d/MM/y – E d/MM/y"
}, _1f5d159 = [ "M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12" ], _1f5d160 = {
    relative: _1f5d137
}, _1f5d161 = {
    relative: _1f5d138
}, _1f5d162 = {
    relative: _1f5d139
}, _1f5d163 = [ undefined, "zi", "chou", "yin", "mao", "chen", "si", "wu", "wei", "shen", "you", "xu" ], _1f5d164 = {
    relative: _1f5d143
}, _1f5d165 = {
    relative: _1f5d144
}, _1f5d166 = {
    d: "U MMM d, E – MMM d, E",
    M: "U MMM d, E – MMM d, E",
    y: "U MMM d, E – U MMM d, E"
}, _1f5d167 = {
    id: "035",
    displayName: "Asia sudoriental",
    hasTimeZones: false,
    parentRegionId: "142"
}, _1f5d168 = {
    relative: _1f5d157
}, _1f5d169 = [ "ene.", "feb.", "mar.", "abr.", "may.", "jun.", "jul.", "ago.", "sep.", "oct.", "nov.", "dic." ], _1f5d170 = {
    d: "y-MM-dd, E – y-MM-dd, E",
    M: "y-MM-dd, E – y-MM-dd, E",
    y: "y-MM-dd, E – y-MM-dd, E"
}, _1f5d171 = {
    future: _1f5d76,
    past: _1f5d54
}, _1f5d172 = {
    future: _1f5d77,
    past: _1f5d55
}, _1f5d173 = {
    future: _1f5d78,
    past: _1f5d56
}, _1f5d174 = {
    future: _1f5d79,
    past: _1f5d57
}, _1f5d175 = {
    noon: "m.",
    morning1: "madrugada",
    morning2: "mañana",
    evening1: "tarde",
    night1: "noche",
    am: "a. m.",
    pm: "p. m."
}, _1f5d176 = [ "Muh.", "Saf.", "Rab. I", "Rab. II", "Jum. I", "Jum. II", "Raj.", "Sha.", "Ram.", "Shaw.", "Dhuʻl-Q.", "Dhuʻl-H." ], _1f5d177 = [ "Tishri", "Heshvan", "Kislev", "Tevet", "Shevat", "Adar I", "Adar", "Nisan", "Iyar", "Sivan", "Tamuz", "Av", "Elul" ], _1f5d178 = {
    future: _1f5d90,
    past: _1f5d67
}, _1f5d179 = {
    d: "d–d 'de' MMM 'de' y",
    M: "d 'de' MMM 'al' d 'de' MMM 'de' y",
    y: "d 'de' MMM 'de' y 'al' d 'de' MMM 'de' y"
}, _1f5d180 = {
    am: "a.m.",
    pm: "p.m.",
    noon: "mediodía",
    morning1: "madrugada",
    morning2: "mañana",
    evening1: "tarde",
    night1: "noche"
}, _1f5d181 = {
    future: _1f5d98,
    past: _1f5d68
}, _1f5d182 = {
    future: _1f5d99,
    past: _1f5d69
}, _1f5d183 = [ "Farvardin", "Ordibehesht", "Khordad", "Tir", "Mordad", "Shahrivar", "Mehr", "Aban", "Azar", "Dey", "Bahman", "Esfand" ], _1f5d184 = {
    future: _1f5d101,
    past: _1f5d70
}, _1f5d185 = {
    future: _1f5d102,
    past: _1f5d71
}, _1f5d186 = [ "Tout", "Baba", "Hator", "Kiahk", "Toba", "Amshir", "Baramhat", "Baramouda", "Bashans", "Paona", "Epep", "Mesra", "Nasie" ], _1f5d187 = {
    future: _1f5d107,
    past: _1f5d72
}, _1f5d188 = [ "enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre" ], _1f5d189 = {
    future: _1f5d109,
    past: _1f5d74
}, _1f5d190 = [ "Meskerem", "Tekemt", "Hedar", "Tahsas", "Ter", "Yekatit", "Megabit", "Miazia", "Genbot", "Sene", "Hamle", "Nehasse", "Pagumen" ], _1f5d191 = [ "Chaitra", "Vaisakha", "Jyaistha", "Asadha", "Sravana", "Bhadra", "Asvina", "Kartika", "Agrahayana", "Pausa", "Magha", "Phalguna" ], _1f5d192 = {
    future: _1f5d121,
    past: _1f5d80
}, _1f5d193 = {
    future: _1f5d122,
    past: _1f5d81
}, _1f5d194 = {
    d: "E d 'al' E d 'de' MMM 'de' y",
    M: "E d 'de' MMM 'al' E d 'de' MMM 'de' y",
    y: "E d 'de' MMM 'de' y 'al' E d 'de' MMM 'de' y"
}, _1f5d195 = {
    future: _1f5d124,
    past: _1f5d88
}, _1f5d196 = {
    displayName: "h",
    relativeTime: _1f5d173
}, _1f5d197 = {
    displayName: "s",
    relativeTime: _1f5d174
}, _1f5d198 = [ "Muharram", "Safar", "Rabiʻ I", "Rabiʻ II", "Jumada I", "Jumada II", "Rajab", "Shaʻban", "Ramadan", "Shawwal", "Dhuʻl-Qiʻdah", "Dhuʻl-Hijjah" ], _1f5d199 = {
    abbreviated: _1f5d2,
    narrow: [ "1", "2", "3", "4" ],
    wide: _1f5d145
}, _1f5d200 = {
    future: _1f5d140,
    past: _1f5d105
}, _1f5d201 = {
    am: "a.m.",
    pm: "p.m.",
    noon: "del mediodía",
    morning1: "de la madrugada",
    morning2: "de la mañana",
    evening1: "de la tarde",
    night1: "de la noche"
}, _1f5d202 = {
    displayName: "min",
    relativeTime: _1f5d178
}, _1f5d203 = {
    displayName: "sem.",
    relativeTime: _1f5d185
}, _1f5d204 = {
    displayName: "hora",
    relativeTime: _1f5d187
}, _1f5d205 = {
    displayName: "trim.",
    relativeTime: _1f5d189
}, _1f5d206 = {
    displayName: "minuto",
    relativeTime: _1f5d193
}, _1f5d207 = {
    decimal: ".",
    group: ",",
    list: ";",
    percentSign: "%",
    plusSign: "+",
    minusSign: "-",
    exponential: "E",
    superscriptingExponent: "×",
    perMille: "‰",
    infinity: "∞",
    nan: "NaN",
    timeSeparator: ":"
}, _1f5d208 = {
    displayName: "segundo",
    relative: [ "ahora" ],
    relativeTime: _1f5d195
}, _1f5d209 = {
    symbols: _1f5d207
}, _1f5d210 = {
    format: _1f5d156,
    numeric: _1f5d3,
    standAlone: _1f5d156
}, _1f5d211 = {
    displayName: "a",
    relative: _1f5d104,
    relativeTime: _1f5d171
}, _1f5d212 = {
    displayName: "m",
    relative: _1f5d106,
    relativeTime: _1f5d172
}, _1f5d213 = {
    displayName: "año",
    relative: _1f5d104,
    relativeTime: _1f5d181
}, _1f5d214 = {
    displayName: "mes",
    relative: _1f5d106,
    relativeTime: _1f5d184
}, _1f5d215 = {
    symbols: _1f5d207,
    digits: "renderSpelloutCardinal"
}, _1f5d216 = {
    displayName: "día",
    relative: _1f5d141,
    relativeTime: _1f5d182
}, _1f5d217 = {
    displayName: "d",
    relative: _1f5d142,
    relativeTime: _1f5d182
}, _1f5d218 = {
    abbreviated: _1f5d87,
    narrow: _1f5d33,
    wide: _1f5d147,
    "short": _1f5d51
}, _1f5d219 = {
    abbreviated: _1f5d87,
    narrow: _1f5d34,
    wide: _1f5d147,
    "short": _1f5d51
}, _1f5d220 = {
    symbols: _1f5d207,
    digits: "renderSpelloutCardinalFinancial"
}, _1f5d221 = {
    abbreviated: _1f5d159,
    narrow: _1f5d100,
    wide: _1f5d159
}, _1f5d222 = {
    displayName: "semana",
    relative: _1f5d136,
    relativeTime: _1f5d192
}, _1f5d223 = {
    displayName: "trimestre",
    relative: _1f5d108,
    relativeTime: _1f5d200
}, _1f5d224 = {
    abbreviated: _1f5d163,
    narrow: _1f5d163,
    wide: _1f5d163
}, _1f5d225 = {
    format: _1f5d224
}, _1f5d226 = {
    abbreviated: _1f5d169,
    narrow: _1f5d83,
    wide: _1f5d188
}, _1f5d227 = {
    format: _1f5d199,
    standAlone: _1f5d199
}, _1f5d228 = {
    abbreviated: _1f5d177,
    narrow: _1f5d119,
    wide: _1f5d177
}, _1f5d229 = {
    fullDate: "EEEE, d-M-y",
    longDate: "d-M-y",
    mediumDate: "d-M-y",
    shortDate: "d-M-y",
    fullTime: "HH:mm:ss zzzz",
    longTime: "HH:mm:ss z",
    mediumTime: "HH:mm:ss",
    shortTime: "HH:mm",
    shortDateTime: "d-M-y HH:mm",
    mediumDateTime: "d-M-y HH:mm:ss",
    longDateTime: "d-M-y HH:mm:ss z",
    fullDateTime: "EEEE, d-M-y HH:mm:ss zzzz"
}, _1f5d230 = {
    abbreviated: _1f5d183,
    narrow: _1f5d100,
    wide: _1f5d183
}, _1f5d231 = {
    abbreviated: _1f5d186,
    narrow: _1f5d119,
    wide: _1f5d186
}, _1f5d232 = {
    abbreviated: _1f5d176,
    narrow: _1f5d100,
    wide: _1f5d198
}, _1f5d233 = {
    abbreviated: _1f5d190,
    narrow: _1f5d119,
    wide: _1f5d190
}, _1f5d234 = {
    abbreviated: _1f5d191,
    narrow: _1f5d100,
    wide: _1f5d191
}, _1f5d235 = {
    abbreviated: _1f5d180,
    narrow: _1f5d180,
    wide: _1f5d180
}, _1f5d236 = {
    "1000": {
        one: "0",
        other: "0"
    },
    "10000": _1f5d4,
    "100000": _1f5d10,
    "1000000": _1f5d5,
    "10000000": _1f5d11,
    "100000000": _1f5d20,
    "1000000000": _1f5d12,
    "10000000000": _1f5d21,
    "100000000000": _1f5d29,
    "1000000000000": _1f5d6,
    "10000000000000": _1f5d13,
    "100000000000000": _1f5d22
}, _1f5d237 = {
    mediumDate: "d/MM/y G",
    shortDate: "d/MM/yy GGGGG",
    fullDate: "EEEE, d 'de' MMMM 'de' y G",
    longDate: "d 'de' MMMM 'de' y G",
    fullTime: "HH:mm:ss zzzz",
    longTime: "HH:mm:ss z",
    mediumTime: "HH:mm:ss",
    shortTime: "HH:mm",
    shortDateTime: "d/MM/yy GGGGG HH:mm",
    mediumDateTime: "d/MM/y G HH:mm:ss",
    longDateTime: "d 'de' MMMM 'de' y G, HH:mm:ss z",
    fullDateTime: "EEEE, d 'de' MMMM 'de' y G, HH:mm:ss zzzz"
}, _1f5d238 = {
    "1000": _1f5d7,
    "10000": _1f5d14,
    "100000": _1f5d23,
    "1000000": _1f5d8,
    "10000000": _1f5d15,
    "100000000": _1f5d24,
    "1000000000": _1f5d30,
    "10000000000": _1f5d37,
    "100000000000": _1f5d42,
    "1000000000000": _1f5d16,
    "10000000000000": _1f5d25,
    "100000000000000": _1f5d31
}, _1f5d239 = {
    abbreviated: _1f5d201,
    narrow: _1f5d175,
    wide: _1f5d201
}, _1f5d240 = {
    format: _1f5d218,
    standAlone: _1f5d219
}, _1f5d241 = {
    d: "d",
    Ed: "E d",
    Gy: "y",
    GyMMM: "M-y",
    GyMMMd: "d-M-y",
    GyMMMEd: "E, d-M-y",
    h: "hh a",
    H: "HH",
    hm: "hh:mm a",
    Hm: "HH:mm",
    hms: "hh:mm:ss a",
    Hms: "HH:mm:ss",
    M: "L",
    Md: "d-M",
    MEd: "E, d-M",
    MMM: "L",
    MMMd: "d-M",
    MMMEd: "E d-M",
    ms: "mm:ss",
    y: "y",
    yyyy: "y",
    yyyyM: "M-y",
    yyyyMd: "d-M-y",
    yyyyMEd: "E, d-M-y",
    yyyyMMM: "M-y",
    yyyyMMMd: "d-M-y",
    yyyyMMMEd: "E, d-M-y",
    yyyyMMMM: "M-y",
    yyyyQQQ: "QQQ y",
    yyyyQQQQ: "QQQQ y",
    E: "ccc",
    MMMMd: "MMMM d",
    UM: "U MM",
    UMd: "U MM-d",
    UMMM: "U MMM",
    UMMMd: "U MMM d",
    yMd: "r-MM-dd"
}, _1f5d242 = {
    format: _1f5d221,
    standAlone: _1f5d221
}, _1f5d243 = {
    "1000": _1f5d19,
    "10000": _1f5d28,
    "100000": _1f5d36,
    "1000000": _1f5d49,
    "10000000": _1f5d60,
    "100000000": _1f5d64,
    "1000000000": _1f5d73,
    "10000000000": _1f5d75,
    "100000000000": _1f5d82,
    "1000000000000": _1f5d50,
    "10000000000000": _1f5d61,
    "100000000000000": _1f5d65
}, _1f5d244 = {
    currencyMatch: /[^\u0024+<->\u005E`\u007C~¢-¦¨©¬®-±´¸×÷˂-˅˒-˟˥-˫˭˯-˿͵΄΅϶҂֏؆-؈؋؎؏۞۩۽۾߶৲৳৺৻૱୰௳-௺౿൹฿༁-༃༓༕-༗༚-༟༴༶༸྾-࿅࿇-࿌࿎࿏࿕-࿘႞႟᎐-᎙៛᥀᧞-᧿᭡-᭪᭴-᭼᾽᾿-῁῍-῏῝-῟῭-`´῾⁄⁒⁺-⁼₊-₌₠-₹℀℁℃-℆℈℉℔№-℘℞-℣℥℧℩℮℺℻⅀-⅄⅊-⅍⅏←-⌨⌫-⏳␀-␦⑀-⑊⒜-ⓩ─-⛿✁-❧➔-⟄⟇-⟥⟰-⦂⦙-⧗⧜-⧻⧾-⭌⭐-⭙⳥-⳪⺀-⺙⺛-⻳⼀-⿕⿰-⿻〄〒〓〠〶〷〾〿゛゜㆐㆑㆖-㆟㇀-㇣㈀-㈞㈪-㉇㉐㉠-㉿㊊-㊰㋀-㋾㌀-㏿䷀-䷿꒐-꓆꜀-꜖꜠꜡꞉꞊꠨-꠫꠶-꠹꩷-꩹﬩﮲-﯁﷼﷽﹢﹤-﹦﹩＄＋＜-＞＾｀｜～￠-￦￨-￮￼�]/,
    surroundingMatch: /[0-9²³¹¼-¾٠-٩۰-۹߀-߉०-९০-৯৴-৹੦-੯૦-૯୦-୯୲-୷௦-௲౦-౯౸-౾೦-೯൦-൵๐-๙໐-໙༠-༳၀-၉႐-႙፩-፼ᛮ-ᛰ០-៩៰-៹᠐-᠙᥆-᥏᧐-᧚᪀-᪉᪐-᪙᭐-᭙᮰-᮹᱀-᱉᱐-᱙⁰⁴-⁹₀-₉⅐-ↂↅ-↉①-⒛⓪-⓿❶-➓⳽〇〡-〩〸-〺㆒-㆕㈠-㈩㉈-㉏㉑-㉟㊀-㊉㊱-㊿꘠-꘩ꛦ-ꛯ꠰-꠵꣐-꣙꤀-꤉꧐-꧙꩐-꩙꯰-꯹０-９]/,
    insertBetween: " "
}, _1f5d245 = {
    format: _1f5d226,
    standAlone: _1f5d226
}, _1f5d246 = [ undefined, "jia-zi", "yi-chou", "bing-yin", "ding-mao", "wu-chen", "ji-si", "geng-wu", "xin-wei", "ren-shen", "gui-you", "jia-xu", "yi-hai", "bing-zi", "ding-chou", "wu-yin", "ji-mao", "geng-chen", "xin-si", "ren-wu", "gui-wei", "jia-shen", "yi-you", "bing-xu", "ding-hai", "wu-zi", "ji-chou", "geng-yin", "xin-mao", "ren-chen", "gui-si", "jia-wu", "yi-wei", "bing-shen", "ding-you", "wu-xu", "ji-hai", "geng-zi", "xin-chou", "ren-yin", "gui-mao", "jia-chen", "yi-si", "bing-wu", "ding-wei", "wu-shen", "ji-you", "geng-xu", "xin-hai", "ren-zi", "gui-chou", "jia-yin", "yi-mao", "bing-chen", "ding-si", "wu-wu", "ji-wei", "geng-shen", "xin-you", "ren-xu" ], _1f5d247 = {
    format: _1f5d232,
    standAlone: _1f5d232
}, _1f5d248 = {
    GyMMM: "MMM 'de' y G",
    GyMMMd: "d 'de' MMM 'de' y G",
    MMMd: "d 'de' MMM",
    MMMEd: "E, d 'de' MMM",
    yMEd: "E d/M/y G",
    d: "d",
    E: "ccc",
    Ed: "E d",
    Gy: "y G",
    GyMMMEd: "E, d MMM y G",
    GyMMMM: "MMMM 'de' y G",
    GyMMMMd: "d 'de' MMMM 'de' y G",
    GyMMMMEd: "E, d 'de' MMMM 'de' y G",
    h: "hh a",
    H: "HH",
    hm: "hh:mm a",
    Hm: "HH:mm",
    hms: "hh:mm:ss a",
    Hms: "HH:mm:ss",
    M: "L",
    Md: "d/M",
    MEd: "E, d/M",
    MMM: "LLL",
    MMMMd: "d 'de' MMMM",
    MMMMEd: "E, d 'de' MMMM",
    ms: "mm:ss",
    y: "y G",
    yyyy: "y G",
    yyyyM: "M/y GGGGG",
    yyyyMd: "d/M/y GGGGG",
    yyyyMEd: "E, d/M/y GGGGG",
    yyyyMMM: "MMM y G",
    yyyyMMMd: "d MMM y G",
    yyyyMMMEd: "EEE, d MMM y G",
    yyyyMMMM: "MMMM 'de' y G",
    yyyyMMMMd: "d 'de' MMMM 'de' y G",
    yyyyMMMMEd: "EEE, d 'de' MMMM 'de' y G",
    yyyyQQQ: "QQQ y G",
    yyyyQQQQ: "QQQQ 'de' y G",
    Ehm: "E h:mm a",
    EHm: "E HH:mm",
    Ehms: "E h:mm:ss a",
    EHms: "E HH:mm:ss"
}, _1f5d249 = {
    basic: _1f5d229,
    cldr: _1f5d241
}, _1f5d250 = {
    format: _1f5d239,
    standAlone: _1f5d235
}, _1f5d251 = {
    "long": _1f5d243,
    "short": _1f5d236,
    "default": "#,##0.###"
}, _1f5d252 = {
    d: {
        d: "d–d"
    },
    h: _1f5d17,
    H: {
        H: "HH–HH"
    },
    hm: _1f5d103,
    Hm: _1f5d44,
    hmv: _1f5d123,
    Hmv: _1f5d53,
    hv: _1f5d32,
    Hv: {
        H: "HH–HH v"
    },
    M: {
        M: "MM–MM"
    },
    Md: _1f5d58,
    MEd: _1f5d84,
    MMM: {
        M: "LLL–LLL"
    },
    MMMd: _1f5d38,
    MMMEd: _1f5d85,
    y: {
        y: "U–U"
    },
    yM: _1f5d47,
    yMd: _1f5d146,
    yMEd: _1f5d170,
    yMMM: _1f5d48,
    yMMMd: _1f5d118,
    yMMMEd: _1f5d166,
    yMMMM: _1f5d59
}, _1f5d253 = {
    hm: _1f5d43,
    Hm: _1f5d44,
    hmv: _1f5d52,
    Hmv: _1f5d53,
    Md: _1f5d45,
    MEd: _1f5d66,
    MMMd: _1f5d39,
    MMMEd: _1f5d127,
    yM: _1f5d46,
    yMd: _1f5d126,
    yMEd: _1f5d158,
    yMMM: _1f5d86,
    yMMMd: _1f5d179,
    yMMMEd: _1f5d194,
    d: {
        d: "d–d"
    },
    h: _1f5d17,
    H: {
        H: "HH–HH"
    },
    hv: _1f5d32,
    Hv: {
        H: "HH–HH v"
    },
    M: {
        M: "M–M"
    },
    MMM: {
        M: "MMM–MMM"
    },
    y: {
        y: "y–y G"
    },
    yMMMM: _1f5d110
}, _1f5d254 = {
    beforeCurrency: _1f5d244,
    afterCurrency: _1f5d244
}, _1f5d255 = {
    basic: _1f5d237,
    cldr: _1f5d248
}, _1f5d256 = {
    "short": _1f5d238,
    "default": "¤#,##0.00",
    one: "{1} {0}",
    other: "{1} {0}",
    currencySpacing: _1f5d254
}, _1f5d257 = {
    abbreviated: _1f5d246,
    narrow: _1f5d246,
    wide: _1f5d246
}, _1f5d258 = {
    format: _1f5d257
}, _1f5d259 = {
    scientific: {
        "default": "#E0"
    },
    decimal: _1f5d251,
    currency: _1f5d256,
    percent: _1f5d1
}, _1f5d260 = [ "Taika (645–650)", "Hakuchi (650–671)", "Hakuhō (672–686)", "Shuchō (686–701)", "Taihō (701–704)", "Keiun (704–708)", "Wadō (708–715)", "Reiki (715–717)", "Yōrō (717–724)", "Jinki (724–729)", "Tenpyō (729–749)", "Tenpyō-kampō (749-749)", "Tenpyō-shōhō (749-757)", "Tenpyō-hōji (757-765)", "Tenpyō-jingo (765-767)", "Jingo-keiun (767-770)", "Hōki (770–780)", "Ten-ō (781-782)", "Enryaku (782–806)", "Daidō (806–810)", "Kōnin (810–824)", "Tenchō (824–834)", "Jōwa (834–848)", "Kajō (848–851)", "Ninju (851–854)", "Saikō (854–857)", "Ten-an (857-859)", "Jōgan (859–877)", "Gangyō (877–885)", "Ninna (885–889)", "Kanpyō (889–898)", "Shōtai (898–901)", "Engi (901–923)", "Enchō (923–931)", "Jōhei (931–938)", "Tengyō (938–947)", "Tenryaku (947–957)", "Tentoku (957–961)", "Ōwa (961–964)", "Kōhō (964–968)", "Anna (968–970)", "Tenroku (970–973)", "Ten’en (973–976)", "Jōgen (976–978)", "Tengen (978–983)", "Eikan (983–985)", "Kanna (985–987)", "Eien (987–989)", "Eiso (989–990)", "Shōryaku (990–995)", "Chōtoku (995–999)", "Chōhō (999–1004)", "Kankō (1004–1012)", "Chōwa (1012–1017)", "Kannin (1017–1021)", "Jian (1021–1024)", "Manju (1024–1028)", "Chōgen (1028–1037)", "Chōryaku (1037–1040)", "Chōkyū (1040–1044)", "Kantoku (1044–1046)", "Eishō (1046–1053)", "Tengi (1053–1058)", "Kōhei (1058–1065)", "Jiryaku (1065–1069)", "Enkyū (1069–1074)", "Shōho (1074–1077)", "Shōryaku (1077–1081)", "Eihō (1081–1084)", "Ōtoku (1084–1087)", "Kanji (1087–1094)", "Kahō (1094–1096)", "Eichō (1096–1097)", "Jōtoku (1097–1099)", "Kōwa (1099–1104)", "Chōji (1104–1106)", "Kashō (1106–1108)", "Tennin (1108–1110)", "Ten-ei (1110-1113)", "Eikyū (1113–1118)", "Gen’ei (1118–1120)", "Hōan (1120–1124)", "Tenji (1124–1126)", "Daiji (1126–1131)", "Tenshō (1131–1132)", "Chōshō (1132–1135)", "Hōen (1135–1141)", "Eiji (1141–1142)", "Kōji (1142–1144)", "Ten’yō (1144–1145)", "Kyūan (1145–1151)", "Ninpei (1151–1154)", "Kyūju (1154–1156)", "Hōgen (1156–1159)", "Heiji (1159–1160)", "Eiryaku (1160–1161)", "Ōho (1161–1163)", "Chōkan (1163–1165)", "Eiman (1165–1166)", "Nin’an (1166–1169)", "Kaō (1169–1171)", "Shōan (1171–1175)", "Angen (1175–1177)", "Jishō (1177–1181)", "Yōwa (1181–1182)", "Juei (1182–1184)", "Genryaku (1184–1185)", "Bunji (1185–1190)", "Kenkyū (1190–1199)", "Shōji (1199–1201)", "Kennin (1201–1204)", "Genkyū (1204–1206)", "Ken’ei (1206–1207)", "Jōgen (1207–1211)", "Kenryaku (1211–1213)", "Kenpō (1213–1219)", "Jōkyū (1219–1222)", "Jōō (1222–1224)", "Gennin (1224–1225)", "Karoku (1225–1227)", "Antei (1227–1229)", "Kanki (1229–1232)", "Jōei (1232–1233)", "Tenpuku (1233–1234)", "Bunryaku (1234–1235)", "Katei (1235–1238)", "Ryakunin (1238–1239)", "En’ō (1239–1240)", "Ninji (1240–1243)", "Kangen (1243–1247)", "Hōji (1247–1249)", "Kenchō (1249–1256)", "Kōgen (1256–1257)", "Shōka (1257–1259)", "Shōgen (1259–1260)", "Bun’ō (1260–1261)", "Kōchō (1261–1264)", "Bun’ei (1264–1275)", "Kenji (1275–1278)", "Kōan (1278–1288)", "Shōō (1288–1293)", "Einin (1293–1299)", "Shōan (1299–1302)", "Kengen (1302–1303)", "Kagen (1303–1306)", "Tokuji (1306–1308)", "Enkyō (1308–1311)", "Ōchō (1311–1312)", "Shōwa (1312–1317)", "Bunpō (1317–1319)", "Genō (1319–1321)", "Genkō (1321–1324)", "Shōchū (1324–1326)", "Karyaku (1326–1329)", "Gentoku (1329–1331)", "Genkō (1331–1334)", "Kenmu (1334–1336)", "Engen (1336–1340)", "Kōkoku (1340–1346)", "Shōhei (1346–1370)", "Kentoku (1370–1372)", "Bunchū (1372–1375)", "Tenju (1375–1379)", "Kōryaku (1379–1381)", "Kōwa (1381–1384)", "Genchū (1384–1392)", "Meitoku (1384–1387)", "Kakei (1387–1389)", "Kōō (1389–1390)", "Meitoku (1390–1394)", "Ōei (1394–1428)", "Shōchō (1428–1429)", "Eikyō (1429–1441)", "Kakitsu (1441–1444)", "Bun’an (1444–1449)", "Hōtoku (1449–1452)", "Kyōtoku (1452–1455)", "Kōshō (1455–1457)", "Chōroku (1457–1460)", "Kanshō (1460–1466)", "Bunshō (1466–1467)", "Ōnin (1467–1469)", "Bunmei (1469–1487)", "Chōkyō (1487–1489)", "Entoku (1489–1492)", "Meiō (1492–1501)", "Bunki (1501–1504)", "Eishō (1504–1521)", "Taiei (1521–1528)", "Kyōroku (1528–1532)", "Tenbun (1532–1555)", "Kōji (1555–1558)", "Eiroku (1558–1570)", "Genki (1570–1573)", "Tenshō (1573–1592)", "Bunroku (1592–1596)", "Keichō (1596–1615)", "Genna (1615–1624)", "Kan’ei (1624–1644)", "Shōho (1644–1648)", "Keian (1648–1652)", "Jōō (1652–1655)", "Meireki (1655–1658)", "Manji (1658–1661)", "Kanbun (1661–1673)", "Enpō (1673–1681)", "Tenna (1681–1684)", "Jōkyō (1684–1688)", "Genroku (1688–1704)", "Hōei (1704–1711)", "Shōtoku (1711–1716)", "Kyōhō (1716–1736)", "Genbun (1736–1741)", "Kanpō (1741–1744)", "Enkyō (1744–1748)", "Kan’en (1748–1751)", "Hōreki (1751–1764)", "Meiwa (1764–1772)", "An’ei (1772–1781)", "Tenmei (1781–1789)", "Kansei (1789–1801)", "Kyōwa (1801–1804)", "Bunka (1804–1818)", "Bunsei (1818–1830)", "Tenpō (1830–1844)", "Kōka (1844–1848)", "Kaei (1848–1854)", "Ansei (1854–1860)", "Man’en (1860–1861)", "Bunkyū (1861–1864)", "Genji (1864–1865)", "Keiō (1865–1868)", "Meiji", "Taishō", "Shōwa", "Heisei" ], _1f5d261 = {
    dayParts: _1f5d225,
    days: _1f5d258,
    months: _1f5d258,
    years: _1f5d258,
    zodiacs: _1f5d225
}, _1f5d262 = {
    dayperiod: _1f5d18,
    zone: _1f5d26,
    era: {
        displayName: "era"
    },
    year: _1f5d213,
    "year-short": _1f5d211,
    "year-narrow": _1f5d211,
    quarter: _1f5d223,
    "quarter-short": _1f5d205,
    "quarter-narrow": _1f5d205,
    month: _1f5d214,
    "month-short": _1f5d212,
    "month-narrow": _1f5d212,
    week: _1f5d222,
    "week-short": _1f5d203,
    "week-narrow": _1f5d203,
    day: _1f5d216,
    "day-short": _1f5d217,
    "day-narrow": _1f5d217,
    weekday: _1f5d40,
    hour: _1f5d204,
    "hour-short": _1f5d196,
    "hour-narrow": _1f5d196,
    minute: _1f5d206,
    "minute-short": _1f5d202,
    "minute-narrow": _1f5d202,
    second: _1f5d208,
    "second-short": _1f5d197,
    "second-narrow": _1f5d197,
    sun: _1f5d164,
    "sun-short": _1f5d148,
    "sun-narrow": _1f5d128,
    mon: _1f5d155,
    "mon-short": _1f5d149,
    "mon-narrow": _1f5d129,
    tue: _1f5d160,
    "tue-short": _1f5d150,
    "tue-narrow": _1f5d130,
    wed: _1f5d168,
    "wed-short": _1f5d151,
    "wed-narrow": _1f5d131,
    thu: _1f5d161,
    "thu-short": _1f5d152,
    "thu-narrow": _1f5d132,
    fri: _1f5d165,
    "fri-short": _1f5d153,
    "fri-narrow": _1f5d133,
    sat: _1f5d162,
    "sat-short": _1f5d154,
    "sat-narrow": _1f5d134
}, _1f5d263 = {
    dateFormats: {
        basic: {},
        cldr: {}
    },
    fields: _1f5d262
}, _1f5d264 = {
    dateFormats: _1f5d255,
    datePartsOrder: "dmy",
    dateIntervalFormats: _1f5d253,
    dateIntervalFallbackFormat: "{0} a el {1}",
    dayNames: _1f5d240,
    dayPeriods: _1f5d250,
    monthNames: _1f5d247,
    eraNames: _1f5d41,
    quarterNames: _1f5d227,
    fields: _1f5d262
}, _1f5d265 = {
    dateFormats: _1f5d249,
    datePartsOrder: "dmy",
    dateIntervalFormats: _1f5d252,
    dateIntervalFallbackFormat: "{0} – {1}",
    dayNames: _1f5d240,
    dayPeriods: _1f5d250,
    cyclicNames: _1f5d261,
    monthNames: _1f5d242,
    monthPatterns: _1f5d210,
    quarterNames: _1f5d227,
    fields: _1f5d262
};

inter.id = "es_gt";

inter.unitPatterns = {
    "long": {
        unit: {
            electricAmpere: {
                one: "{0} amperio",
                other: "{0} amperios"
            },
            electricMilliampere: {
                one: "{0} miliamperio",
                other: "{0} miliamperios"
            },
            electricOhm: {
                one: "{0} ohmio",
                other: "{0} ohmios"
            },
            electricVolt: {
                one: "{0} voltio",
                other: "{0} voltios"
            },
            energyKilojoule: {
                one: "{0} kilojulio",
                other: "{0} kilojulios"
            },
            energyJoule: {
                one: "{0} julio",
                other: "{0} julios"
            },
            powerHorsepower: {
                one: "{0} caballos de fuerza",
                other: "{0} caballos de fuerza"
            },
            energyKilowattHour: {
                one: "{0} kilovatio hora",
                other: "{0} kilovatios hora"
            },
            volumeAcreFoot: {
                one: "{0} acre pie",
                other: "{0} acres pies"
            },
            accelerationGForce: P.unitPatterns.long.unit.accelerationGForce,
            accelerationMeterPerSecondSquared: {
                one: "{0} metro por segundo al cuadrado",
                other: "{0} metros por segundo al cuadrado"
            },
            angleRevolution: {
                one: "{0} revolución",
                other: "{0} revoluciones"
            },
            angleRadian: {
                one: "{0} radián",
                other: "{0} radianes"
            },
            angleDegree: {
                one: "{0} grado",
                other: "{0} grados"
            },
            angleArcMinute: {
                one: "{0} minuto de arco",
                other: "{0} minutos de arco"
            },
            angleArcSecond: {
                one: "{0} segundo de arco",
                other: "{0} segundos de arco"
            },
            areaSquareKilometer: {
                one: "{0} kilómetro cuadrado",
                other: "{0} kilómetros cuadrados"
            },
            areaHectare: {
                one: "{0} hectárea",
                other: "{0} hectáreas"
            },
            areaSquareMeter: {
                one: "{0} metro cuadrado",
                other: "{0} metros cuadrados"
            },
            areaSquareCentimeter: {
                one: "{0} centímetro cuadrado",
                other: "{0} centímetros cuadrados"
            },
            areaSquareMile: {
                one: "{0} milla cuadrada",
                other: "{0} millas cuadradas"
            },
            areaAcre: {
                one: "{0} acre",
                other: "{0} acres"
            },
            areaSquareYard: {
                one: "{0} yarda cuadrada",
                other: "{0} yardas cuadradas"
            },
            areaSquareFoot: {
                one: "{0} pie cuadrado",
                other: "{0} pies cuadrados"
            },
            areaSquareInch: {
                one: "{0} pulgada cuadrada",
                other: "{0} pulgadas cuadradas"
            },
            concentrKarat: _1f5d62,
            consumptionLiterPerKilometer: {
                one: "{0} litro por kilómetro",
                other: "{0} litros por kilómetro"
            },
            "consumptionLiterPer-100kilometers": {
                one: "{0} litro por 100 kilómetros",
                other: "{0} litros por 100 kilómetros"
            },
            consumptionMilePerGallon: {
                one: "{0} milla por galón",
                other: "{0} millas por galón"
            },
            digitalTerabyte: {
                one: "{0} terabyte",
                other: "{0} terabytes"
            },
            digitalTerabit: {
                one: "{0} terabit",
                other: "{0} terabits"
            },
            digitalGigabyte: {
                one: "{0} gigabyte",
                other: "{0} gigabytes"
            },
            digitalGigabit: {
                one: "{0} gigabit",
                other: "{0} gigabits"
            },
            digitalMegabyte: {
                one: "{0} megabyte",
                other: "{0} megabytes"
            },
            digitalMegabit: {
                one: "{0} megabit",
                other: "{0} megabits"
            },
            digitalKilobyte: {
                one: "{0} kilobyte",
                other: "{0} kilobytes"
            },
            digitalKilobit: {
                one: "{0} kilobit",
                other: "{0} kilobits"
            },
            digitalByte: {
                one: "{0} byte",
                other: "{0} bytes"
            },
            digitalBit: {
                one: "{0} bit",
                other: "{0} bits"
            },
            durationCentury: {
                one: "{0} siglo",
                other: "{0} siglos"
            },
            durationYear: {
                one: "{0} año",
                other: "{0} años"
            },
            durationMonth: {
                one: "{0} mes",
                other: "{0} meses"
            },
            durationWeek: {
                one: "{0} semana",
                other: "{0} semanas"
            },
            durationDay: {
                one: "{0} día",
                other: "{0} días"
            },
            durationHour: {
                one: "{0} hora",
                other: "{0} horas"
            },
            durationMinute: {
                one: "{0} minuto",
                other: "{0} minutos"
            },
            durationSecond: {
                one: "{0} segundo",
                other: "{0} segundos"
            },
            durationMillisecond: {
                one: "{0} milisegundo",
                other: "{0} milisegundos"
            },
            durationMicrosecond: {
                one: "{0} microsegundo",
                other: "{0} microsegundos"
            },
            durationNanosecond: {
                one: "{0} nanosegundo",
                other: "{0} nanosegundos"
            },
            energyKilocalorie: {
                one: "{0} kilocaloría",
                other: "{0} kilocalorías"
            },
            energyCalorie: _1f5d63,
            energyFoodcalorie: _1f5d63,
            frequencyGigahertz: {
                one: "{0} gigahercio",
                other: "{0} gigahercios"
            },
            frequencyMegahertz: {
                one: "{0} megahercio",
                other: "{0} megahercios"
            },
            frequencyKilohertz: {
                one: "{0} kilohercio",
                other: "{0} kilohercios"
            },
            frequencyHertz: {
                one: "{0} hercio",
                other: "{0} hercios"
            },
            lengthKilometer: {
                one: "{0} kilómetro",
                other: "{0} kilómetros"
            },
            lengthMeter: {
                one: "{0} metro",
                other: "{0} metros"
            },
            lengthDecimeter: {
                one: "{0} decímetro",
                other: "{0} decímetros"
            },
            lengthCentimeter: {
                one: "{0} centímetro",
                other: "{0} centímetros"
            },
            lengthMillimeter: {
                one: "{0} milímetro",
                other: "{0} milímetros"
            },
            lengthMicrometer: {
                one: "{0} micrómetro",
                other: "{0} micrómetros"
            },
            lengthNanometer: {
                one: "{0} nanómetro",
                other: "{0} nanómetros"
            },
            lengthPicometer: {
                one: "{0} picómetro",
                other: "{0} picómetros"
            },
            lengthMile: {
                one: "{0} milla",
                other: "{0} millas"
            },
            lengthYard: {
                one: "{0} yarda",
                other: "{0} yardas"
            },
            lengthFoot: {
                one: "{0} pie",
                other: "{0} pies"
            },
            lengthInch: {
                one: "{0} pulgada",
                other: "{0} pulgadas"
            },
            lengthParsec: {
                one: "{0} parsec",
                other: "{0} parsecs"
            },
            lengthLightYear: {
                one: "{0} año luz",
                other: "{0} años luz"
            },
            lengthAstronomicalUnit: {
                one: "{0} unidad astronómica",
                other: "{0} unidades astronómicas"
            },
            lengthNauticalMile: {
                one: "{0} milla náutica",
                other: "{0} millas náuticas"
            },
            lengthMileScandinavian: {
                one: "{0} milla escandinava",
                other: "{0} millas escandinavas"
            },
            lightLux: {
                one: "{0} lux",
                other: "{0} luxes"
            },
            massMetricTon: {
                one: "{0} tonelada métrica",
                other: "{0} toneladas métricas"
            },
            massKilogram: {
                one: "{0} kilogramo",
                other: "{0} kilogramos"
            },
            massGram: {
                one: "{0} gramo",
                other: "{0} gramos"
            },
            massMilligram: {
                one: "{0} miligramo",
                other: "{0} miligramos"
            },
            massMicrogram: {
                one: "{0} microgramo",
                other: "{0} microgramos"
            },
            massTon: {
                one: "{0} tonelada",
                other: "{0} toneladas"
            },
            massPound: {
                one: "{0} libra",
                other: "{0} libras"
            },
            massOunce: {
                one: "{0} onza",
                other: "{0} onzas"
            },
            massOunceTroy: {
                one: "{0} onza troy",
                other: "{0} onzas troy"
            },
            massCarat: _1f5d62,
            powerGigawatt: {
                one: "{0} gigavatio",
                other: "{0} gigavatios"
            },
            powerMegawatt: {
                one: "{0} megavatio",
                other: "{0} megavatios"
            },
            powerKilowatt: {
                one: "{0} kilovatio",
                other: "{0} kilovatios"
            },
            powerWatt: {
                one: "{0} vatio",
                other: "{0} vatios"
            },
            powerMilliwatt: {
                one: "{0} milivatio",
                other: "{0} milivatios"
            },
            pressureHectopascal: {
                one: "{0} hectopascal",
                other: "{0} hectopascales"
            },
            pressureMillimeterOfMercury: {
                one: "{0} milímetro de mercurio",
                other: "{0} milímetros de mercurio"
            },
            pressurePoundPerSquareInch: {
                one: "{0} libra por pulgada cuadrada",
                other: "{0} libras por pulgada cuadrada"
            },
            pressureInchHg: {
                one: "{0} pulgada de mercurio",
                other: "{0} pulgadas de mercurio"
            },
            pressureMillibar: {
                one: "{0} milibar",
                other: "{0} milibares"
            },
            speedKilometerPerHour: {
                one: "{0} kilómetro por hora",
                other: "{0} kilómetros por hora"
            },
            speedMeterPerSecond: {
                one: "{0} metro por segundo",
                other: "{0} metros por segundo"
            },
            speedMilePerHour: {
                one: "{0} milla por hora",
                other: "{0} millas por hora"
            },
            speedKnot: {
                one: "{0} nudo",
                other: "{0} nudos"
            },
            temperatureGeneric: _1f5d9,
            temperatureCelsius: {
                one: "{0} grado Celsius",
                other: "{0} grados Celsius"
            },
            temperatureFahrenheit: {
                one: "{0} grado Fahrenheit",
                other: "{0} grados Fahrenheit"
            },
            temperatureKelvin: {
                one: "{0} kelvin",
                other: "{0} kelvin"
            },
            volumeCubicKilometer: {
                one: "{0} kilómetro cúbico",
                other: "{0} kilómetros cúbicos"
            },
            volumeCubicMeter: {
                one: "{0} metro cúbico",
                other: "{0} metros cúbicos"
            },
            volumeCubicCentimeter: {
                one: "{0} centímetro cúbico",
                other: "{0} centímetros cúbicos"
            },
            volumeCubicMile: {
                one: "{0} milla cúbica",
                other: "{0} millas cúbicas"
            },
            volumeCubicYard: {
                one: "{0} yarda cúbica",
                other: "{0} yardas cúbicas"
            },
            volumeCubicFoot: {
                one: "{0} pie cúbico",
                other: "{0} pies cúbicos"
            },
            volumeCubicInch: {
                one: "{0} pulgada cúbica",
                other: "{0} pulgadas cúbicas"
            },
            volumeMegaliter: {
                one: "{0} megalitro",
                other: "{0} megalitros"
            },
            volumeHectoliter: {
                one: "{0} hectolitro",
                other: "{0} hectolitros"
            },
            volumeLiter: {
                one: "{0} litro",
                other: "{0} litros"
            },
            volumeDeciliter: {
                one: "{0} decilitro",
                other: "{0} decilitros"
            },
            volumeCentiliter: {
                one: "{0} centilitro",
                other: "{0} centilitros"
            },
            volumeMilliliter: {
                one: "{0} mililitro",
                other: "{0} mililitros"
            },
            volumePintMetric: {
                one: "{0} pinta métrica",
                other: "{0} pintas métricas"
            },
            volumeCupMetric: {
                one: "{0} taza métrica",
                other: "{0} tazas métricas"
            },
            volumeGallon: {
                one: "{0} galón",
                other: "{0} galones"
            },
            volumeQuart: {
                one: "{0} cuarto",
                other: "{0} cuartos"
            },
            volumePint: {
                one: "{0} pinta",
                other: "{0} pintas"
            },
            volumeCup: {
                one: "{0} taza",
                other: "{0} tazas"
            },
            volumeFluidOunce: {
                one: "{0} onza fluida",
                other: "{0} onzas fluidas"
            },
            volumeTablespoon: {
                one: "{0} cucharada",
                other: "{0} cucharadas"
            },
            volumeTeaspoon: {
                one: "{0} cucharadita",
                other: "{0} cucharaditas"
            }
        },
        compoundUnit: {
            per: "{0} por {1}"
        }
    },
    "short": {
        unit: {
            concentrKarat: {
                one: "{0} ct",
                other: "{0} ct"
            },
            durationYear: {
                one: "{0} a.",
                other: "{0} aa."
            },
            durationMonth: {
                one: "{0} m.",
                other: "{0} mm."
            },
            durationWeek: {
                one: "{0} sem.",
                other: "{0} sems."
            },
            durationDay: {
                one: "{0} d.",
                other: "{0} dd."
            },
            lengthLightYear: {
                one: "{0} a. l.",
                other: "{0} aa. l."
            },
            lengthNauticalMile: {
                one: "{0} nmi",
                other: "{0} nmi"
            },
            volumeTablespoon: {
                one: "{0} cda.",
                other: "{0} cdas."
            },
            volumeTeaspoon: {
                one: "{0} cdta.",
                other: "{0} cdtas."
            },
            accelerationGForce: {
                one: "{0} Fg",
                other: "{0} Fg"
            },
            accelerationMeterPerSecondSquared: {
                one: "{0} m/s²",
                other: "{0} m/s²"
            },
            angleRevolution: {
                one: "{0} rev",
                other: "{0} rev"
            },
            angleRadian: {
                one: "{0} rad",
                other: "{0} rad"
            },
            angleDegree: _1f5d9,
            angleArcMinute: {
                one: "{0} arcmin",
                other: "{0} arcmin"
            },
            angleArcSecond: {
                one: "{0} arcsec",
                other: "{0} arcsec"
            },
            areaSquareKilometer: {
                one: "{0} km²",
                other: "{0} km²"
            },
            areaHectare: {
                one: "{0} ha",
                other: "{0} ha"
            },
            areaSquareMeter: {
                one: "{0} m²",
                other: "{0} m²"
            },
            areaSquareCentimeter: {
                one: "{0} cm²",
                other: "{0} cm²"
            },
            areaSquareMile: {
                one: "{0} mi²",
                other: "{0} mi²"
            },
            areaAcre: {
                one: "{0} ac",
                other: "{0} ac"
            },
            areaSquareYard: {
                one: "{0} yd²",
                other: "{0} yd²"
            },
            areaSquareFoot: {
                one: "{0} ft²",
                other: "{0} ft²"
            },
            areaSquareInch: {
                one: "{0} in²",
                other: "{0} in²"
            },
            consumptionLiterPerKilometer: {
                one: "{0} l/km",
                other: "{0} l/km"
            },
            "consumptionLiterPer-100kilometers": {
                one: "{0} l/100 km",
                other: "{0} l/100 km"
            },
            consumptionMilePerGallon: {
                one: "{0} mi/gal",
                other: "{0} mi/gal"
            },
            digitalTerabyte: {
                one: "{0} TB",
                other: "{0} TB"
            },
            digitalTerabit: {
                one: "{0} Tb",
                other: "{0} Tb"
            },
            digitalGigabyte: {
                one: "{0} GB",
                other: "{0} GB"
            },
            digitalGigabit: {
                one: "{0} Gb",
                other: "{0} Gb"
            },
            digitalMegabyte: {
                one: "{0} MB",
                other: "{0} MB"
            },
            digitalMegabit: {
                one: "{0} Mb",
                other: "{0} Mb"
            },
            digitalKilobyte: {
                one: "{0} kB",
                other: "{0} kB"
            },
            digitalKilobit: {
                one: "{0} kb",
                other: "{0} kb"
            },
            digitalByte: {
                one: "{0} B",
                other: "{0} B"
            },
            digitalBit: {
                one: "{0} b",
                other: "{0} b"
            },
            durationCentury: {
                one: "{0} sig.",
                other: "{0} sig."
            },
            durationHour: {
                one: "{0} h",
                other: "{0} h"
            },
            durationMinute: {
                one: "{0} min",
                other: "{0} min"
            },
            durationSecond: {
                one: "{0} s",
                other: "{0} s"
            },
            durationMillisecond: {
                one: "{0} ms",
                other: "{0} ms"
            },
            durationMicrosecond: {
                one: "{0} μs",
                other: "{0} μs"
            },
            durationNanosecond: {
                one: "{0} ns",
                other: "{0} ns"
            },
            electricAmpere: {
                one: "{0} A",
                other: "{0} A"
            },
            electricMilliampere: {
                one: "{0} mA",
                other: "{0} mA"
            },
            electricOhm: {
                one: "{0} Ω",
                other: "{0} Ω"
            },
            electricVolt: {
                one: "{0} V",
                other: "{0} V"
            },
            energyKilocalorie: {
                one: "{0} kcal",
                other: "{0} kcal"
            },
            energyCalorie: _1f5d35,
            energyFoodcalorie: _1f5d35,
            energyKilojoule: {
                one: "{0} kJ",
                other: "{0} kJ"
            },
            energyJoule: {
                one: "{0} J",
                other: "{0} J"
            },
            energyKilowattHour: {
                one: "{0} kWh",
                other: "{0} kWh"
            },
            frequencyGigahertz: {
                one: "{0} GHz",
                other: "{0} GHz"
            },
            frequencyMegahertz: {
                one: "{0} MHz",
                other: "{0} MHz"
            },
            frequencyKilohertz: {
                one: "{0} kHz",
                other: "{0} kHz"
            },
            frequencyHertz: {
                one: "{0} Hz",
                other: "{0} Hz"
            },
            lengthKilometer: {
                one: "{0} km",
                other: "{0} km"
            },
            lengthMeter: {
                one: "{0} m",
                other: "{0} m"
            },
            lengthDecimeter: {
                one: "{0} dm",
                other: "{0} dm"
            },
            lengthCentimeter: {
                one: "{0} cm",
                other: "{0} cm"
            },
            lengthMillimeter: {
                one: "{0} mm",
                other: "{0} mm"
            },
            lengthMicrometer: {
                one: "{0} µm",
                other: "{0} µm"
            },
            lengthNanometer: {
                one: "{0} nm",
                other: "{0} nm"
            },
            lengthPicometer: {
                one: "{0} pm",
                other: "{0} pm"
            },
            lengthMile: {
                one: "{0} mi",
                other: "{0} mi"
            },
            lengthYard: {
                one: "{0} yd",
                other: "{0} yd"
            },
            lengthFoot: {
                one: "{0} ft",
                other: "{0} ft"
            },
            lengthInch: {
                one: "{0} in",
                other: "{0} in"
            },
            lengthParsec: {
                one: "{0} pc",
                other: "{0} pc"
            },
            lengthAstronomicalUnit: {
                one: "{0} au",
                other: "{0} au"
            },
            lengthMileScandinavian: {
                one: "{0} mi esc.",
                other: "{0} mi esc."
            },
            lightLux: {
                one: "{0} lx",
                other: "{0} lx"
            },
            massMetricTon: {
                one: "{0} t",
                other: "{0} t"
            },
            massKilogram: {
                one: "{0} kg",
                other: "{0} kg"
            },
            massGram: {
                one: "{0} g",
                other: "{0} g"
            },
            massMilligram: {
                one: "{0} mg",
                other: "{0} mg"
            },
            massMicrogram: {
                one: "{0} µg",
                other: "{0} µg"
            },
            massTon: {
                one: "{0} ton",
                other: "{0} ton"
            },
            massPound: {
                one: "{0} lb",
                other: "{0} lb"
            },
            massOunce: {
                one: "{0} oz",
                other: "{0} oz"
            },
            massOunceTroy: {
                one: "{0} oz t",
                other: "{0} oz t"
            },
            massCarat: {
                one: "{0} c",
                other: "{0} c"
            },
            powerGigawatt: {
                one: "{0} GW",
                other: "{0} GW"
            },
            powerMegawatt: {
                one: "{0} MW",
                other: "{0} MW"
            },
            powerKilowatt: {
                one: "{0} kW",
                other: "{0} kW"
            },
            powerWatt: {
                one: "{0} W",
                other: "{0} W"
            },
            powerMilliwatt: {
                one: "{0} mW",
                other: "{0} mW"
            },
            powerHorsepower: {
                one: "{0} CV",
                other: "{0} CV"
            },
            pressureHectopascal: {
                one: "{0} hPa",
                other: "{0} hPa"
            },
            pressureMillimeterOfMercury: {
                one: "{0} mmHg",
                other: "{0} mmHg"
            },
            pressurePoundPerSquareInch: {
                one: "{0} psi",
                other: "{0} psi"
            },
            pressureInchHg: {
                one: "{0} inHg",
                other: "{0} inHg"
            },
            pressureMillibar: {
                one: "{0} mbar",
                other: "{0} mbar"
            },
            speedKilometerPerHour: {
                one: "{0} km/h",
                other: "{0} km/h"
            },
            speedMeterPerSecond: {
                one: "{0} m/s",
                other: "{0} m/s"
            },
            speedMilePerHour: {
                one: "{0} mi/h",
                other: "{0} mi/h"
            },
            speedKnot: {
                one: "{0} kn",
                other: "{0} kn"
            },
            temperatureGeneric: _1f5d9,
            temperatureCelsius: {
                one: "{0} °C",
                other: "{0} °C"
            },
            temperatureFahrenheit: {
                one: "{0} °F",
                other: "{0} °F"
            },
            temperatureKelvin: {
                one: "{0} K",
                other: "{0} K"
            },
            volumeCubicKilometer: {
                one: "{0} km³",
                other: "{0} km³"
            },
            volumeCubicMeter: {
                one: "{0} m³",
                other: "{0} m³"
            },
            volumeCubicCentimeter: {
                one: "{0} cm³",
                other: "{0} cm³"
            },
            volumeCubicMile: {
                one: "{0} mi³",
                other: "{0} mi³"
            },
            volumeCubicYard: {
                one: "{0} yd³",
                other: "{0} yd³"
            },
            volumeCubicFoot: {
                one: "{0} ft³",
                other: "{0} ft³"
            },
            volumeCubicInch: {
                one: "{0} in³",
                other: "{0} in³"
            },
            volumeMegaliter: {
                one: "{0} Ml",
                other: "{0} Ml"
            },
            volumeHectoliter: {
                one: "{0} hl",
                other: "{0} hl"
            },
            volumeLiter: {
                one: "{0} l",
                other: "{0} l"
            },
            volumeDeciliter: {
                one: "{0} dl",
                other: "{0} dl"
            },
            volumeCentiliter: {
                one: "{0} cl",
                other: "{0} cl"
            },
            volumeMilliliter: {
                one: "{0} ml",
                other: "{0} ml"
            },
            volumePintMetric: {
                one: "{0} mpt",
                other: "{0} mpt"
            },
            volumeCupMetric: {
                one: "{0} mc",
                other: "{0} mc"
            },
            volumeAcreFoot: {
                one: "{0} ac ft",
                other: "{0} ac ft"
            },
            volumeGallon: {
                one: "{0} gal",
                other: "{0} gal"
            },
            volumeQuart: {
                one: "{0} qt",
                other: "{0} qt"
            },
            volumePint: {
                one: "{0} pt",
                other: "{0} pt"
            },
            volumeCup: {
                one: "{0} tza.",
                other: "{0} tza."
            },
            volumeFluidOunce: {
                one: "{0} fl oz",
                other: "{0} fl oz"
            },
            concentrMilligramPerDeciliter: {
                other: "{0} mg/dL"
            },
            concentrMillimolePerLiter: {
                other: "{0} mmol/L"
            },
            concentrPartPerMillion: {
                other: "{0} ppm"
            },
            consumptionMilePerGallonImperial: {
                other: "{0} mpg Imp."
            },
            lengthFurlong: {
                other: "{0} fur"
            },
            lengthFathom: {
                other: "{0} fm"
            },
            massStone: {
                other: "{0} st"
            },
            volumeBushel: {
                other: "{0} bu"
            },
            volumeGallonImperial: {
                other: "{0} gal Imp."
            }
        },
        compoundUnit: {
            per: "{0}/{1}"
        }
    },
    narrow: {
        unit: {
            durationYear: {
                one: "{0}a.",
                other: "{0}aa."
            },
            durationMonth: {
                one: "{0}m.",
                other: "{0}mm."
            },
            durationWeek: {
                one: "{0}sem.",
                other: "{0}sems."
            },
            durationDay: {
                one: "{0}d.",
                other: "{0}dd."
            },
            accelerationGForce: {
                one: "{0}G",
                other: "{0}G"
            },
            angleDegree: _1f5d9,
            angleArcMinute: {
                one: "{0}'",
                other: "{0}'"
            },
            angleArcSecond: {
                one: '{0}"',
                other: '{0}"'
            },
            areaSquareKilometer: {
                one: "{0}km²",
                other: "{0}km²"
            },
            areaHectare: {
                one: "{0}ha",
                other: "{0}ha"
            },
            areaSquareMeter: {
                one: "{0}m²",
                other: "{0}m²"
            },
            areaSquareMile: {
                one: "{0}mi²",
                other: "{0}mi²"
            },
            areaAcre: {
                one: "{0}ac",
                other: "{0}ac"
            },
            areaSquareFoot: {
                one: "{0}ft²",
                other: "{0}ft²"
            },
            "consumptionLiterPer-100kilometers": {
                one: "{0}l/100km",
                other: "{0}l/100km"
            },
            durationHour: {
                one: "{0}h",
                other: "{0}h"
            },
            durationMinute: {
                one: "{0}min",
                other: "{0}min"
            },
            durationSecond: {
                one: "{0}s",
                other: "{0}s"
            },
            durationMillisecond: {
                one: "{0}ms",
                other: "{0}ms"
            },
            lengthKilometer: {
                one: "{0}km",
                other: "{0}km"
            },
            lengthMeter: {
                one: "{0}m",
                other: "{0}m"
            },
            lengthCentimeter: {
                one: "{0}cm",
                other: "{0}cm"
            },
            lengthMillimeter: {
                one: "{0}mm",
                other: "{0}mm"
            },
            lengthPicometer: {
                one: "{0}pm",
                other: "{0}pm"
            },
            lengthMile: {
                one: "{0}mi",
                other: "{0}mi"
            },
            lengthYard: {
                one: "{0}yd",
                other: "{0}yd"
            },
            lengthFoot: {
                one: "{0}ft",
                other: "{0}ft"
            },
            lengthInch: {
                one: "{0}in",
                other: "{0}in"
            },
            lengthLightYear: {
                one: "{0}a.l.",
                other: "{0}a.l."
            },
            massKilogram: {
                one: "{0}kg",
                other: "{0}kg"
            },
            massGram: {
                one: "{0}g",
                other: "{0}g"
            },
            massPound: {
                one: "{0}lb",
                other: "{0}lb"
            },
            massOunce: {
                one: "{0}oz",
                other: "{0}oz"
            },
            powerKilowatt: {
                one: "{0}kW",
                other: "{0}kW"
            },
            powerWatt: {
                one: "{0}W",
                other: "{0}W"
            },
            powerHorsepower: {
                one: "{0}hp",
                other: "{0}hp"
            },
            pressureHectopascal: {
                one: "{0}hPa",
                other: "{0}hPa"
            },
            pressureInchHg: {
                one: "{0}inHg",
                other: "{0}inHg"
            },
            pressureMillibar: {
                one: "{0}mbar",
                other: "{0}mbar"
            },
            speedKilometerPerHour: {
                one: "{0}km/h",
                other: "{0}km/h"
            },
            speedMeterPerSecond: {
                one: "{0}m/s",
                other: "{0}m/s"
            },
            speedMilePerHour: {
                one: "{0}mi/h",
                other: "{0}mi/h"
            },
            temperatureCelsius: {
                one: "{0}°C",
                other: "{0}°C"
            },
            temperatureFahrenheit: {
                one: "{0}°F",
                other: "{0}°F"
            },
            volumeCubicKilometer: {
                one: "{0}km³",
                other: "{0}km³"
            },
            volumeCubicMile: {
                one: "{0}mi³",
                other: "{0}mi³"
            },
            volumeLiter: {
                one: "{0}l",
                other: "{0}l"
            }
        },
        compoundUnit: {
            per: "{0}/{1}"
        }
    }
};

inter.timeZoneFormats = {
    hour: [ "+HH:mm", "-HH:mm" ],
    gmt: "GMT{0}",
    gmtZero: "GMT",
    region: "hora de verano de {0}",
    fallback: "{1} ({0})",
    regions: {
        daylight: "hora de verano de {0}",
        standard: "hora estándar de {0}"
    }
};

inter.numbers = {
    ahom: {
        symbols: _1f5d207,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    arab: {
        symbols: {
            decimal: "٫",
            group: "٬",
            list: "؛",
            percentSign: "٪",
            plusSign: "‏+",
            minusSign: "‏-",
            exponential: "اس",
            superscriptingExponent: "×",
            perMille: "؉",
            infinity: "∞",
            nan: "NaN",
            timeSeparator: ":"
        },
        formats: _1f5d259,
        digits: [ "٠", "١", "٢", "٣", "٤", "٥", "٦", "٧", "٨", "٩" ]
    },
    arabext: {
        symbols: {
            decimal: "٫",
            group: "٬",
            list: "؛",
            percentSign: "٪",
            plusSign: "‎+‎",
            minusSign: "‎-‎",
            exponential: "×۱۰^",
            superscriptingExponent: "×",
            perMille: "؉",
            infinity: "∞",
            nan: "NaN",
            timeSeparator: "٫"
        },
        formats: _1f5d259,
        digits: [ "۰", "۱", "۲", "۳", "۴", "۵", "۶", "۷", "۸", "۹" ]
    },
    armn: {
        symbols: _1f5d207,
        digits: "renderArmenianUpper"
    },
    armnlow: {
        symbols: _1f5d207,
        digits: "renderArmenianLower"
    },
    bali: {
        symbols: _1f5d207,
        formats: _1f5d259,
        digits: [ "᭐", "᭑", "᭒", "᭓", "᭔", "᭕", "᭖", "᭗", "᭘", "᭙" ]
    },
    beng: {
        symbols: _1f5d207,
        formats: _1f5d259,
        digits: [ "০", "১", "২", "৩", "৪", "৫", "৬", "৭", "৮", "৯" ]
    },
    brah: {
        symbols: _1f5d207,
        formats: _1f5d259,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    cakm: {
        symbols: _1f5d207,
        formats: _1f5d259,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    cham: {
        symbols: _1f5d207,
        formats: _1f5d259,
        digits: [ "꩐", "꩑", "꩒", "꩓", "꩔", "꩕", "꩖", "꩗", "꩘", "꩙" ]
    },
    cyrl: {
        symbols: _1f5d207,
        digits: "renderCyrillicLower"
    },
    deva: {
        symbols: _1f5d207,
        formats: _1f5d259,
        digits: [ "०", "१", "२", "३", "४", "५", "६", "७", "८", "९" ]
    },
    ethi: {
        symbols: _1f5d207,
        digits: "renderEthiopic"
    },
    finance: _1f5d209,
    fullwide: {
        symbols: _1f5d207,
        formats: _1f5d259,
        digits: [ "０", "１", "２", "３", "４", "５", "６", "７", "８", "９" ]
    },
    geor: {
        symbols: _1f5d207,
        digits: "renderGeorgian"
    },
    grek: {
        symbols: _1f5d207,
        digits: "renderGreekUpper"
    },
    greklow: {
        symbols: _1f5d207,
        digits: "renderGreekLower"
    },
    gujr: {
        symbols: _1f5d207,
        formats: _1f5d259,
        digits: [ "૦", "૧", "૨", "૩", "૪", "૫", "૬", "૭", "૮", "૯" ]
    },
    guru: {
        symbols: _1f5d207,
        formats: _1f5d259,
        digits: [ "੦", "੧", "੨", "੩", "੪", "੫", "੬", "੭", "੮", "੯" ]
    },
    hanidays: {
        symbols: _1f5d207,
        digits: "renderSpelloutNumberingDays"
    },
    hanidec: {
        symbols: _1f5d207,
        formats: _1f5d259,
        digits: [ "〇", "一", "二", "三", "四", "五", "六", "七", "八", "九" ]
    },
    hans: _1f5d215,
    hansfin: _1f5d220,
    hant: _1f5d215,
    hantfin: _1f5d220,
    hebr: {
        symbols: _1f5d207,
        digits: "renderHebrew"
    },
    hmng: {
        symbols: _1f5d207,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    java: {
        symbols: _1f5d207,
        formats: _1f5d259,
        digits: [ "꧐", "꧑", "꧒", "꧓", "꧔", "꧕", "꧖", "꧗", "꧘", "꧙" ]
    },
    jpan: _1f5d215,
    jpanfin: _1f5d220,
    kali: {
        symbols: _1f5d207,
        formats: _1f5d259,
        digits: [ "꤀", "꤁", "꤂", "꤃", "꤄", "꤅", "꤆", "꤇", "꤈", "꤉" ]
    },
    khmr: {
        symbols: _1f5d207,
        formats: _1f5d259,
        digits: [ "០", "១", "២", "៣", "៤", "៥", "៦", "៧", "៨", "៩" ]
    },
    knda: {
        symbols: _1f5d207,
        formats: _1f5d259,
        digits: [ "೦", "೧", "೨", "೩", "೪", "೫", "೬", "೭", "೮", "೯" ]
    },
    lana: {
        symbols: _1f5d207,
        formats: _1f5d259,
        digits: [ "᪀", "᪁", "᪂", "᪃", "᪄", "᪅", "᪆", "᪇", "᪈", "᪉" ]
    },
    lanatham: {
        symbols: _1f5d207,
        formats: _1f5d259,
        digits: [ "᪐", "᪑", "᪒", "᪓", "᪔", "᪕", "᪖", "᪗", "᪘", "᪙" ]
    },
    laoo: {
        symbols: _1f5d207,
        formats: _1f5d259,
        digits: [ "໐", "໑", "໒", "໓", "໔", "໕", "໖", "໗", "໘", "໙" ]
    },
    latn: {
        symbols: _1f5d207,
        formats: _1f5d259,
        digits: [ "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" ]
    },
    lepc: {
        symbols: _1f5d207,
        formats: _1f5d259,
        digits: [ "᱀", "᱁", "᱂", "᱃", "᱄", "᱅", "᱆", "᱇", "᱈", "᱉" ]
    },
    limb: {
        symbols: _1f5d207,
        formats: _1f5d259,
        digits: [ "᥆", "᥇", "᥈", "᥉", "᥊", "᥋", "᥌", "᥍", "᥎", "᥏" ]
    },
    mathbold: {
        symbols: _1f5d207,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathdbl: {
        symbols: _1f5d207,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathmono: {
        symbols: _1f5d207,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathsanb: {
        symbols: _1f5d207,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathsans: {
        symbols: _1f5d207,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mlym: {
        symbols: _1f5d207,
        formats: _1f5d259,
        digits: [ "൦", "൧", "൨", "൩", "൪", "൫", "൬", "൭", "൮", "൯" ]
    },
    modi: {
        symbols: _1f5d207,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mong: {
        symbols: _1f5d207,
        formats: _1f5d259,
        digits: [ "᠐", "᠑", "᠒", "᠓", "᠔", "᠕", "᠖", "᠗", "᠘", "᠙" ]
    },
    mroo: {
        symbols: _1f5d207,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mtei: {
        symbols: _1f5d207,
        formats: _1f5d259,
        digits: [ "꯰", "꯱", "꯲", "꯳", "꯴", "꯵", "꯶", "꯷", "꯸", "꯹" ]
    },
    mymr: {
        symbols: _1f5d207,
        formats: _1f5d259,
        digits: [ "၀", "၁", "၂", "၃", "၄", "၅", "၆", "၇", "၈", "၉" ]
    },
    mymrshan: {
        symbols: _1f5d207,
        formats: _1f5d259,
        digits: [ "႐", "႑", "႒", "႓", "႔", "႕", "႖", "႗", "႘", "႙" ]
    },
    mymrtlng: {
        symbols: _1f5d207,
        digits: [ "꧰", "꧱", "꧲", "꧳", "꧴", "꧵", "꧶", "꧷", "꧸", "꧹" ]
    },
    "native": _1f5d209,
    nkoo: {
        symbols: _1f5d207,
        formats: _1f5d259,
        digits: [ "߀", "߁", "߂", "߃", "߄", "߅", "߆", "߇", "߈", "߉" ]
    },
    olck: {
        symbols: _1f5d207,
        formats: _1f5d259,
        digits: [ "᱐", "᱑", "᱒", "᱓", "᱔", "᱕", "᱖", "᱗", "᱘", "᱙" ]
    },
    orya: {
        symbols: _1f5d207,
        formats: _1f5d259,
        digits: [ "୦", "୧", "୨", "୩", "୪", "୫", "୬", "୭", "୮", "୯" ]
    },
    osma: {
        symbols: _1f5d207,
        formats: _1f5d259,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    roman: {
        symbols: _1f5d207,
        digits: "renderRomanUpper"
    },
    romanlow: {
        symbols: _1f5d207,
        digits: "renderRomanLower"
    },
    saur: {
        symbols: _1f5d207,
        formats: _1f5d259,
        digits: [ "꣐", "꣑", "꣒", "꣓", "꣔", "꣕", "꣖", "꣗", "꣘", "꣙" ]
    },
    shrd: {
        symbols: _1f5d207,
        formats: _1f5d259,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    sind: {
        symbols: _1f5d207,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    sinh: {
        symbols: _1f5d207,
        digits: [ "෦", "෧", "෨", "෩", "෪", "෫", "෬", "෭", "෮", "෯" ]
    },
    sora: {
        symbols: _1f5d207,
        formats: _1f5d259,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    sund: {
        symbols: _1f5d207,
        formats: _1f5d259,
        digits: [ "᮰", "᮱", "᮲", "᮳", "᮴", "᮵", "᮶", "᮷", "᮸", "᮹" ]
    },
    takr: {
        symbols: _1f5d207,
        formats: _1f5d259,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    talu: {
        symbols: _1f5d207,
        formats: _1f5d259,
        digits: [ "᧐", "᧑", "᧒", "᧓", "᧔", "᧕", "᧖", "᧗", "᧘", "᧙" ]
    },
    taml: {
        symbols: _1f5d207,
        digits: "renderTamil"
    },
    tamldec: {
        symbols: _1f5d207,
        formats: _1f5d259,
        digits: [ "௦", "௧", "௨", "௩", "௪", "௫", "௬", "௭", "௮", "௯" ]
    },
    telu: {
        symbols: _1f5d207,
        formats: _1f5d259,
        digits: [ "౦", "౧", "౨", "౩", "౪", "౫", "౬", "౭", "౮", "౯" ]
    },
    thai: {
        symbols: _1f5d207,
        formats: _1f5d259,
        digits: [ "๐", "๑", "๒", "๓", "๔", "๕", "๖", "๗", "๘", "๙" ]
    },
    tirh: {
        symbols: _1f5d207,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    tibt: {
        symbols: _1f5d207,
        formats: _1f5d259,
        digits: [ "༠", "༡", "༢", "༣", "༤", "༥", "༦", "༧", "༨", "༩" ]
    },
    traditio: _1f5d209,
    vaii: {
        symbols: _1f5d207,
        formats: _1f5d259,
        digits: [ "꘠", "꘡", "꘢", "꘣", "꘤", "꘥", "꘦", "꘧", "꘨", "꘩" ]
    },
    wara: {
        symbols: _1f5d207,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    }
};

inter.calendars = {
    buddhist: {
        dateFormats: _1f5d255,
        datePartsOrder: "dmy",
        dateIntervalFormats: _1f5d253,
        dateIntervalFallbackFormat: "{0} a el {1}",
        dayNames: _1f5d240,
        dayPeriods: _1f5d250,
        monthNames: _1f5d245,
        eraNames: {
            wide: [ "BE" ],
            abbreviated: [ "BE" ]
        },
        quarterNames: _1f5d227,
        fields: _1f5d262
    },
    chinese: _1f5d265,
    coptic: {
        dateFormats: _1f5d255,
        datePartsOrder: "dmy",
        dateIntervalFormats: _1f5d253,
        dateIntervalFallbackFormat: "{0} a el {1}",
        dayNames: _1f5d240,
        dayPeriods: _1f5d250,
        monthNames: {
            format: _1f5d231,
            standAlone: _1f5d231
        },
        eraNames: _1f5d89,
        quarterNames: _1f5d227,
        fields: _1f5d262
    },
    dangi: _1f5d265,
    ethioaa: _1f5d263,
    ethiopic: {
        dateFormats: _1f5d255,
        datePartsOrder: "dmy",
        dateIntervalFormats: _1f5d253,
        dateIntervalFallbackFormat: "{0} a el {1}",
        dayNames: _1f5d240,
        dayPeriods: _1f5d250,
        monthNames: {
            format: _1f5d233,
            standAlone: _1f5d233
        },
        eraNames: _1f5d89,
        quarterNames: _1f5d227,
        fields: _1f5d262
    },
    gregorian: {
        dateFormats: {
            basic: {
                mediumDate: "d/MM/y",
                shortDate: "d/MM/yy",
                fullDate: "EEEE, d 'de' MMMM 'de' y",
                longDate: "d 'de' MMMM 'de' y",
                fullTime: "HH:mm:ss zzzz",
                longTime: "HH:mm:ss z",
                mediumTime: "HH:mm:ss",
                shortTime: "HH:mm",
                shortDateTime: "d/MM/yy HH:mm",
                mediumDateTime: "d/MM/y HH:mm:ss",
                longDateTime: "d 'de' MMMM 'de' y, HH:mm:ss z",
                fullDateTime: "EEEE, d 'de' MMMM 'de' y, HH:mm:ss zzzz"
            },
            cldr: {
                EHm: "E, HH:mm",
                EHms: "E, HH:mm:ss",
                GyMMMd: "d 'de' MMM 'de' y G",
                H: "HH",
                Hm: "HH:mm",
                Hms: "HH:mm:ss",
                MMMdd: "dd-MMM",
                yMEd: "E d/M/y",
                yMMM: "MMMM 'de' y",
                yMMMd: "d 'de' MMMM 'de' y",
                yMMMEd: "E, d 'de' MMM 'de' y",
                yQQQ: "QQQ 'de' y",
                d: "d",
                E: "ccc",
                Ed: "E d",
                Ehm: "E, h:mm a",
                Ehms: "E, h:mm:ss a",
                Gy: "y G",
                GyMMM: "MMM y G",
                GyMMMEd: "E, d MMM y G",
                GyMMMM: "MMMM 'de' y G",
                GyMMMMd: "d 'de' MMMM 'de' y G",
                GyMMMMEd: "E, d 'de' MMMM 'de' y G",
                h: "h a",
                hm: "h:mm a",
                hms: "h:mm:ss a",
                hmsv: "h:mm:ss a v",
                Hmsv: "H:mm:ss v",
                hmsvvvv: "h:mm:ss a (vvvv)",
                Hmsvvvv: "H:mm:ss (vvvv)",
                hmv: "h:mm a v",
                Hmv: "H:mm v",
                M: "L",
                Md: "d/M",
                MEd: "E, d/M",
                MMd: "d/M",
                MMdd: "d/M",
                MMM: "LLL",
                MMMd: "d MMM",
                MMMEd: "E, d MMM",
                MMMMd: "d 'de' MMMM",
                MMMMEd: "E, d 'de' MMMM",
                ms: "mm:ss",
                y: "y",
                yM: "M/y",
                yMd: "d/M/y",
                yMM: "M/y",
                yMMMM: "MMMM 'de' y",
                yMMMMd: "d 'de' MMMM 'de' y",
                yMMMMEd: "EEE, d 'de' MMMM 'de' y",
                yQQQQ: "QQQQ 'de' y"
            }
        },
        datePartsOrder: "dmy",
        dateIntervalFormats: {
            hm: _1f5d43,
            Md: _1f5d45,
            MEd: _1f5d66,
            MMMd: _1f5d39,
            MMMEd: _1f5d127,
            y: {
                y: "y 'al' y"
            },
            yM: _1f5d46,
            yMd: _1f5d126,
            yMEd: _1f5d158,
            yMMM: {
                y: "MMM 'de' y 'a' MMM 'de' y"
            },
            yMMMd: {
                M: "d 'de' MMM 'al' d 'de' MMM 'de' y",
                y: "d 'de' MMM 'de' y 'al' d 'de' MMM 'de' y"
            },
            yMMMEd: _1f5d194,
            h: {
                a: "h a–h a"
            },
            H: {
                H: "HH – HH"
            },
            Hm: {
                H: "HH:mm – HH:mm",
                m: "HH:mm – HH:mm"
            },
            hmv: {
                a: "h:mm a–h:mm a v"
            },
            Hmv: {
                H: "HH:mm – HH:mm v",
                m: "HH:mm – HH:mm v"
            },
            hv: {
                a: "h a–h a v"
            },
            Hv: {
                H: "HH – HH v"
            },
            yMMMM: {
                y: "MMMM 'de' y–MMMM 'de' y"
            },
            d: {
                d: "d–d"
            },
            M: {
                M: "M–M"
            },
            MMM: {
                M: "MMM–MMM"
            },
            MMMMd: {
                d: "d–d 'de' MMMM",
                M: "d 'de' MMMM–d 'de' MMMM"
            },
            MMMMEd: {
                d: "E, d 'de' MMMM–E, d 'de' MMMM",
                M: "E, d 'de' MMMM–E, d 'de' MMMM"
            },
            yMMMMd: {
                d: "d–d 'de' MMMM 'de' y",
                M: "d 'de' MMMM–d 'de' MMMM 'de' y",
                y: "d 'de' MMMM 'de' y–d 'de' MMMM 'de' y"
            },
            yMMMMEd: {
                d: "E, d 'de' MMMM–E, d 'de' MMMM 'de' y",
                M: "E, d 'de' MMMM–E, d 'de' MMMM 'de' y",
                y: "E, d 'de' MMMM 'de' y–E, d 'de' MMMM 'de' y"
            }
        },
        dateIntervalFallbackFormat: "{0}–{1}",
        dayNames: _1f5d240,
        dayPeriods: _1f5d250,
        monthNames: _1f5d245,
        eraNames: {
            wide: [ "antes de Cristo", "después de Cristo" ],
            abbreviated: [ "a. C.", "d. C." ]
        },
        quarterNames: _1f5d227,
        fields: _1f5d262
    },
    hebrew: {
        dateFormats: _1f5d255,
        datePartsOrder: "dmy",
        dateIntervalFormats: _1f5d253,
        dateIntervalFallbackFormat: "{0} a el {1}",
        dayNames: _1f5d240,
        dayPeriods: _1f5d250,
        monthNames: {
            format: _1f5d228,
            standAlone: _1f5d228
        },
        eraNames: {
            wide: [ "AM" ],
            abbreviated: [ "AM" ]
        },
        quarterNames: _1f5d227,
        fields: _1f5d262
    },
    indian: {
        dateFormats: _1f5d255,
        datePartsOrder: "dmy",
        dateIntervalFormats: _1f5d253,
        dateIntervalFallbackFormat: "{0} a el {1}",
        dayNames: _1f5d240,
        dayPeriods: _1f5d250,
        monthNames: {
            format: _1f5d234,
            standAlone: _1f5d234
        },
        eraNames: {
            wide: [ "Saka" ],
            abbreviated: [ "Saka" ]
        },
        quarterNames: _1f5d227,
        fields: _1f5d262
    },
    islamic: _1f5d264,
    "islamic-umalqura": _1f5d264,
    "islamic-tbla": _1f5d264,
    "islamic-civil": _1f5d264,
    "islamic-rgsa": _1f5d264,
    iso8601: _1f5d263,
    japanese: {
        dateFormats: {
            basic: {
                fullDate: "EEEE, d 'de' MMMM 'de' y G",
                longDate: "d 'de' MMMM 'de' y G",
                mediumDate: "dd/MM/y G",
                shortDate: "dd/MM/yy GGGGG",
                fullTime: "HH:mm:ss zzzz",
                longTime: "HH:mm:ss z",
                mediumTime: "HH:mm:ss",
                shortTime: "HH:mm",
                shortDateTime: "dd/MM/yy GGGGG HH:mm",
                mediumDateTime: "dd/MM/y G HH:mm:ss",
                longDateTime: "d 'de' MMMM 'de' y G, HH:mm:ss z",
                fullDateTime: "EEEE, d 'de' MMMM 'de' y G, HH:mm:ss zzzz"
            },
            cldr: _1f5d248
        },
        datePartsOrder: "dmy",
        dateIntervalFormats: _1f5d253,
        dateIntervalFallbackFormat: "{0} a el {1}",
        dayNames: _1f5d240,
        dayPeriods: _1f5d250,
        monthNames: _1f5d245,
        eraNames: {
            wide: _1f5d260,
            abbreviated: _1f5d260
        },
        quarterNames: _1f5d227,
        fields: _1f5d262
    },
    persian: {
        dateFormats: _1f5d255,
        datePartsOrder: "dmy",
        dateIntervalFormats: _1f5d253,
        dateIntervalFallbackFormat: "{0} a el {1}",
        dayNames: _1f5d240,
        dayPeriods: _1f5d250,
        monthNames: {
            format: _1f5d230,
            standAlone: _1f5d230
        },
        eraNames: {
            wide: [ "AP" ],
            abbreviated: [ "AP" ]
        },
        quarterNames: _1f5d227,
        fields: _1f5d262
    },
    roc: {
        dateFormats: _1f5d255,
        datePartsOrder: "dmy",
        dateIntervalFormats: _1f5d253,
        dateIntervalFallbackFormat: "{0} a el {1}",
        dayNames: _1f5d240,
        dayPeriods: _1f5d250,
        monthNames: _1f5d245,
        eraNames: {
            wide: _1f5d27,
            abbreviated: _1f5d27
        },
        quarterNames: _1f5d227,
        fields: _1f5d262
    },
    islamicc: _1f5d263
};

inter.pluralRule = function(n) {
    if (typeof n === "string") n = parseInt(n, 10);
    if (n === 1) return "one";
    return "other";
};

inter.renderDigitsOrdinal = function(n) {
    if (n < 0) return "−" + this.renderDigitsOrdinal(-n);
    if (n >= 0) return this.renderDigitsOrdinalMasculine(n);
};

inter.renderSpelloutNumbering = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "menos " + this.renderSpelloutNumbering(-n);
    if (isFractional && n > 1) return this.renderSpelloutNumbering(Math.floor(n)) + " punto " + this.renderSpelloutNumbering(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 2e12) return this.renderSpelloutCardinalMasculine(Math.floor(n / 1e12)) + " billiones" + (n === 2e12 ? "" : " " + this.renderSpelloutNumbering(n % 1e12));
    if (n >= 1e12) return "un billón" + (n === 1e12 ? "" : " " + this.renderSpelloutNumbering(n % 1e12));
    if (n >= 2e6) return this.renderSpelloutCardinalMasculine(Math.floor(n / 1e6)) + " millones" + (n === 2e6 ? "" : " " + this.renderSpelloutNumbering(n % 1e6));
    if (n >= 1e6) return "un millón" + (n === 1e6 ? "" : " " + this.renderSpelloutNumbering(n % 1e6));
    if (n >= 2e3) return this.renderSpelloutCardinalMasculine(Math.floor(n / 1e3)) + " mil" + (n === 2e3 ? "" : " " + this.renderSpelloutNumbering(n % 1e3));
    if (n >= 1e3) return "mil" + (n === 1e3 ? "" : " " + this.renderSpelloutNumbering(n % 1e3));
    if (n >= 900) return "novecientos" + (n === 900 ? "" : " " + this.renderSpelloutNumbering(n % 100));
    if (n >= 800) return "ochocientos" + (n === 800 ? "" : " " + this.renderSpelloutNumbering(n % 100));
    if (n >= 700) return "setecientos" + (n === 700 ? "" : " " + this.renderSpelloutNumbering(n % 100));
    if (n >= 600) return "seiscientos" + (n === 600 ? "" : " " + this.renderSpelloutNumbering(n % 100));
    if (n >= 500) return "quinientos" + (n === 500 ? "" : " " + this.renderSpelloutNumbering(n % 100));
    if (n >= 400) return "cuatrocientos" + (n === 400 ? "" : " " + this.renderSpelloutNumbering(n % 100));
    if (n >= 300) return "trescientos" + (n === 300 ? "" : " " + this.renderSpelloutNumbering(n % 100));
    if (n >= 200) return "doscientos" + (n === 200 ? "" : " " + this.renderSpelloutNumbering(n % 100));
    if (n >= 101) return "ciento " + this.renderSpelloutNumbering(n % 100);
    if (n >= 100) return "cien";
    if (n >= 90) return "noventa" + (n === 90 ? "" : " y " + this.renderSpelloutNumbering(n % 10));
    if (n >= 80) return "ochenta" + (n === 80 ? "" : " y " + this.renderSpelloutNumbering(n % 10));
    if (n >= 70) return "setenta" + (n === 70 ? "" : " y " + this.renderSpelloutNumbering(n % 10));
    if (n >= 60) return "sesenta" + (n === 60 ? "" : " y " + this.renderSpelloutNumbering(n % 10));
    if (n >= 50) return "cincuenta" + (n === 50 ? "" : " y " + this.renderSpelloutNumbering(n % 10));
    if (n >= 40) return "cuarenta" + (n === 40 ? "" : " y " + this.renderSpelloutNumbering(n % 10));
    if (n >= 30) return "treinta" + (n === 30 ? "" : " y " + this.renderSpelloutNumbering(n % 10));
    if (n >= 27) return "veinti" + this.renderSpelloutNumbering(n % 10);
    if (n >= 26) return "veintiséis";
    if (n >= 25) return "veinticinco";
    if (n >= 24) return "veinticuatro";
    if (n >= 23) return "veintitrés";
    if (n >= 22) return "veintidós";
    if (n >= 21) return "veintiuno";
    if (n >= 20) return "veinte";
    if (n >= 17) return "dieci" + this.renderSpelloutNumbering(n % 10);
    if (n >= 16) return "dieciséis";
    if (n >= 15) return "quince";
    if (n >= 14) return "catorce";
    if (n >= 13) return "trece";
    if (n >= 12) return "doce";
    if (n >= 11) return "once";
    if (n >= 10) return "diez";
    if (n >= 9) return "nueve";
    if (n >= 8) return "ocho";
    if (n >= 7) return "siete";
    if (n >= 6) return "seis";
    if (n >= 5) return "cinco";
    if (n >= 4) return "cuatro";
    if (n >= 3) return "tres";
    if (n >= 2) return "dos";
    if (n >= 1) return "uno";
    if (n >= 0) return "cero";
};

inter.renderArmenianUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderArmenianUpper(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e4) return this.renderNumber(n, "#,##0");
    if (n >= 9e3) return "Ք" + (n === 9e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 8e3) return "Փ" + (n === 8e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 7e3) return "Ւ" + (n === 7e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 6e3) return "Ց" + (n === 6e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 5e3) return "Ր" + (n === 5e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 4e3) return "Տ" + (n === 4e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 3e3) return "Վ" + (n === 3e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 2e3) return "Ս" + (n === 2e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 1e3) return "Ռ" + (n === 1e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 900) return "Ջ" + (n === 900 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 800) return "Պ" + (n === 800 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 700) return "Չ" + (n === 700 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 600) return "Ո" + (n === 600 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 500) return "Շ" + (n === 500 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 400) return "Ն" + (n === 400 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 300) return "Յ" + (n === 300 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 200) return "Մ" + (n === 200 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 100) return "Ճ" + (n === 100 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 90) return "Ղ" + (n === 90 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 80) return "Ձ" + (n === 80 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 70) return "Հ" + (n === 70 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 60) return "Կ" + (n === 60 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 50) return "Ծ" + (n === 50 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 40) return "Խ" + (n === 40 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 30) return "Լ" + (n === 30 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 20) return "Ի" + (n === 20 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 10) return "Ժ" + (n === 10 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 9) return "Թ";
    if (n >= 8) return "Ը";
    if (n >= 7) return "Է";
    if (n >= 6) return "Զ";
    if (n >= 5) return "Ե";
    if (n >= 4) return "Դ";
    if (n >= 3) return "Գ";
    if (n >= 2) return "Բ";
    if (n >= 1) return "Ա";
    if (n >= 0) return "0";
};

inter.renderArmenianLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderArmenianLower(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e4) return this.renderNumber(n, "#,##0");
    if (n >= 9e3) return "ք" + (n === 9e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 8e3) return "փ" + (n === 8e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 7e3) return "ւ" + (n === 7e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 6e3) return "ց" + (n === 6e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 5e3) return "ր" + (n === 5e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 4e3) return "տ" + (n === 4e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 3e3) return "վ" + (n === 3e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 2e3) return "ս" + (n === 2e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 1e3) return "ռ" + (n === 1e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 900) return "ջ" + (n === 900 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 800) return "պ" + (n === 800 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 700) return "չ" + (n === 700 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 600) return "ո" + (n === 600 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 500) return "շ" + (n === 500 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 400) return "ն" + (n === 400 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 300) return "յ" + (n === 300 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 200) return "մ" + (n === 200 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 100) return "ճ" + (n === 100 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 90) return "ղ" + (n === 90 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 80) return "ձ" + (n === 80 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 70) return "հ" + (n === 70 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 60) return "կ" + (n === 60 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 50) return "ծ" + (n === 50 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 40) return "խ" + (n === 40 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 30) return "լ" + (n === 30 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 20) return "ի" + (n === 20 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 10) return "ժ" + (n === 10 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 9) return "թ";
    if (n >= 8) return "ը";
    if (n >= 7) return "է";
    if (n >= 6) return "զ";
    if (n >= 5) return "ե";
    if (n >= 4) return "դ";
    if (n >= 3) return "գ";
    if (n >= 2) return "բ";
    if (n >= 1) return "ա";
    if (n >= 0) return "0";
};

inter.renderCyrillicLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderCyrillicLower(-n);
    if (isFractional && n > 1) return this.renderCyrillicLower(Math.floor(n)) + "." + this.renderCyrillicLower(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e15) return "҂҂҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e15)) + (n === 1e15 ? "" : " " + this.renderCyrillicLower(n % 1e15));
    if (n >= 1e12) return "҂҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e12)) + (n === 1e12 ? "" : " " + this.renderCyrillicLower(n % 1e12));
    if (n >= 1e9) return "҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e9)) + (n === 1e9 ? "" : " " + this.renderCyrillicLower(n % 1e9));
    if (n >= 1e6) return "҂҂" + this.renderCyrillicLower(Math.floor(n / 1e6)) + (n === 1e6 ? "" : " " + this.renderCyrillicLower(n % 1e6));
    if (n >= 11e3) return this.renderCyrillicLowerThousands(Math.floor(n / 1e4)) + (n === 11e3 ? "" : " " + this.renderCyrillicLower(n % 1e4));
    if (n >= 1e4) return "҂" + this.renderCyrillicLower(Math.floor(n / 1e4)) + (n === 1e4 ? "" : " " + this.renderCyrillicLower(n % 1e4));
    if (n >= 1e3) return "҂" + this.renderCyrillicLower110(Math.floor(n / 1e3)) + this.renderCyrillicLowerPost(n % 1e3);
    if (n >= 900) return "ц" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 801) return "ѿ" + this.renderCyrillicLower(n % 100);
    if (n >= 800) return "ѿ҃";
    if (n >= 700) return "ѱ" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 600) return "х" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 500) return "ф" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 400) return "у" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 300) return "т" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 200) return "с" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 100) return "р" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 90) return "ч" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 80) return "п" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 70) return "ѻ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 60) return "ѯ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 50) return "н" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 40) return "м" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 30) return "л" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 20) return "к" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 19) return "ѳ҃і";
    if (n >= 18) return "и҃і";
    if (n >= 17) return "з҃і";
    if (n >= 16) return "ѕ҃і";
    if (n >= 15) return "є҃і";
    if (n >= 14) return "д҃і";
    if (n >= 13) return "г҃і";
    if (n >= 12) return "в҃і";
    if (n >= 11) return "а҃і";
    if (n >= 1) return this.renderCyrillicLower110(n) + "҃";
    if (n >= 0) return "0҃";
};

inter.renderEthiopic = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderEthiopic(-n);
    if (isFractional && n > 1) return this.renderEthiopic(Math.floor(n)) + "፡" + this.renderEthiopic(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,###0");
    if (n >= 2e16) return this.renderEthiopic(Math.floor(n / 1e16)) + "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 1e16) return "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 2e12) return this.renderEthiopic(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1e12) return "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 2e8) return this.renderEthiopic(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1e8) return "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 2e4) return this.renderEthiopic(Math.floor(n / 1e4)) + "፼" + (n === 2e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 1e4) return "፼" + (n === 1e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 200) return this.renderEthiopic(Math.floor(n / 100)) + "፻" + (n === 200 ? "" : this.renderEthiopic(n % 100));
    if (n >= 100) return "፻" + (n === 100 ? "" : this.renderEthiopic(n % 100));
    if (n >= 90) return "፺" + (n === 90 ? "" : this.renderEthiopic(n % 10));
    if (n >= 80) return "፹" + (n === 80 ? "" : this.renderEthiopic(n % 10));
    if (n >= 70) return "፸" + (n === 70 ? "" : this.renderEthiopic(n % 10));
    if (n >= 60) return "፷" + (n === 60 ? "" : this.renderEthiopic(n % 10));
    if (n >= 50) return "፶" + (n === 50 ? "" : this.renderEthiopic(n % 10));
    if (n >= 40) return "፵" + (n === 40 ? "" : this.renderEthiopic(n % 10));
    if (n >= 30) return "፴" + (n === 30 ? "" : this.renderEthiopic(n % 10));
    if (n >= 20) return "፳" + (n === 20 ? "" : this.renderEthiopic(n % 10));
    if (n >= 10) return "፲" + (n === 10 ? "" : this.renderEthiopic(n % 10));
    if (n >= 9) return "፱";
    if (n >= 8) return "፰";
    if (n >= 7) return "፯";
    if (n >= 6) return "፮";
    if (n >= 5) return "፭";
    if (n >= 4) return "፬";
    if (n >= 3) return "፫";
    if (n >= 2) return "፪";
    if (n >= 1) return "፩";
    if (n >= 0) return "ባዶ";
};

inter.renderGeorgian = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGeorgian(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 2e4) return this.renderNumber(n, "#,##0");
    if (n >= 1e4) return "ჯ" + (n === 1e4 ? "" : this.renderGeorgian(n % 1e4));
    if (n >= 9e3) return "ჵ" + (n === 9e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 8e3) return "ჴ" + (n === 8e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 7e3) return "ხ" + (n === 7e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 6e3) return "ჭ" + (n === 6e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 5e3) return "წ" + (n === 5e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 4e3) return "ძ" + (n === 4e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 3e3) return "ც" + (n === 3e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 2e3) return "ჩ" + (n === 2e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 1e3) return "შ" + (n === 1e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 900) return "ყ" + (n === 900 ? "" : this.renderGeorgian(n % 100));
    if (n >= 800) return "ღ" + (n === 800 ? "" : this.renderGeorgian(n % 100));
    if (n >= 700) return "ქ" + (n === 700 ? "" : this.renderGeorgian(n % 100));
    if (n >= 600) return "ფ" + (n === 600 ? "" : this.renderGeorgian(n % 100));
    if (n >= 500) return "ჳ" + (n === 500 ? "" : this.renderGeorgian(n % 100));
    if (n >= 400) return "უ" + (n === 400 ? "" : this.renderGeorgian(n % 100));
    if (n >= 300) return "ტ" + (n === 300 ? "" : this.renderGeorgian(n % 100));
    if (n >= 200) return "ს" + (n === 200 ? "" : this.renderGeorgian(n % 100));
    if (n >= 100) return "რ" + (n === 100 ? "" : this.renderGeorgian(n % 100));
    if (n >= 90) return "ჟ" + (n === 90 ? "" : this.renderGeorgian(n % 10));
    if (n >= 80) return "პ" + (n === 80 ? "" : this.renderGeorgian(n % 10));
    if (n >= 70) return "ო" + (n === 70 ? "" : this.renderGeorgian(n % 10));
    if (n >= 60) return "ჲ" + (n === 60 ? "" : this.renderGeorgian(n % 10));
    if (n >= 50) return "ნ" + (n === 50 ? "" : this.renderGeorgian(n % 10));
    if (n >= 40) return "მ" + (n === 40 ? "" : this.renderGeorgian(n % 10));
    if (n >= 30) return "ლ" + (n === 30 ? "" : this.renderGeorgian(n % 10));
    if (n >= 20) return "კ" + (n === 20 ? "" : this.renderGeorgian(n % 10));
    if (n >= 10) return "ი" + (n === 10 ? "" : this.renderGeorgian(n % 10));
    if (n >= 9) return "თ";
    if (n >= 8) return "ჱ";
    if (n >= 7) return "ზ";
    if (n >= 6) return "ვ";
    if (n >= 5) return "ე";
    if (n >= 4) return "დ";
    if (n >= 3) return "გ";
    if (n >= 2) return "ბ";
    if (n >= 1) return "ა";
    if (n >= 0) return this.renderNumber(n, "#,##0");
};

inter.renderGreekUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGreekUpper(-n);
    if (isFractional && n > 1) return this.renderGreekUpper(Math.floor(n)) + "." + this.renderGreekUpper(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 0) return this.renderGreekNumeralMajuscules(n) + "´";
};

inter.renderGreekLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGreekLower(-n);
    if (isFractional && n > 1) return this.renderGreekLower(Math.floor(n)) + "." + this.renderGreekLower(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 0) return this.renderGreekNumeralMinuscules(n) + "´";
};

inter.renderSpelloutCardinal = function(n) {
    if (n < 0) return "−" + this.renderSpelloutCardinal(-n);
    if (n >= 0) return this.renderNumber(n, "#,##0.#");
};

inter.renderHebrew = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderHebrew(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1000001) return this.renderNumber(n, "#,##0");
    if (n >= 1e6) return "אלף אלפים";
    if (n >= 3001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 3001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 3e3) return this.renderHebrew(Math.floor(n / 1e3)) + " אלפים";
    if (n >= 2001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 2001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 2e3) return "אלפיים";
    if (n >= 1001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 1001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 1e3) return "אלף";
    if (n >= 901) return "תתק" + this.renderHebrew099(n % 100);
    if (n >= 900) return "תת״ק";
    if (n >= 801) return "תת" + this.renderHebrew099(n % 100);
    if (n >= 800) return "ת״ת";
    if (n >= 745) return "תש" + this.renderHebrew099(n % 100);
    if (n >= 744) return "תשד״מ";
    if (n >= 701) return "תש" + this.renderHebrew099(n % 100);
    if (n >= 700) return "ת״ש";
    if (n >= 699) return "תר" + this.renderHebrew099(n % 100);
    if (n >= 698) return "תרח״צ";
    if (n >= 601) return "תר" + this.renderHebrew099(n % 100);
    if (n >= 600) return "ת״ר";
    if (n >= 501) return "תק" + this.renderHebrew099(n % 100);
    if (n >= 500) return "ת״ק";
    if (n >= 400) return "ת" + this.renderHebrew099(n % 100);
    if (n >= 345) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 344) return "שד״מ";
    if (n >= 305) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 304) return "ד״ש";
    if (n >= 300) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 299) return "ר" + this.renderHebrew099(n % 100);
    if (n >= 298) return "רח״צ";
    if (n >= 200) return "ר" + this.renderHebrew099(n % 100);
    if (n >= 100) return "ק" + this.renderHebrew099(n % 100);
    if (n >= 91) return "צ״" + this.renderHebrewItem(n % 10);
    if (n >= 90) return "צ׳";
    if (n >= 81) return "פ״" + this.renderHebrewItem(n % 10);
    if (n >= 80) return "פ׳";
    if (n >= 71) return "ע״" + this.renderHebrewItem(n % 10);
    if (n >= 70) return "ע׳";
    if (n >= 61) return "ס״" + this.renderHebrewItem(n % 10);
    if (n >= 60) return "ס׳";
    if (n >= 51) return "נ״" + this.renderHebrewItem(n % 10);
    if (n >= 50) return "נ׳";
    if (n >= 41) return "מ״" + this.renderHebrewItem(n % 10);
    if (n >= 40) return "מ׳";
    if (n >= 31) return "ל״" + this.renderHebrewItem(n % 10);
    if (n >= 30) return "ל׳";
    if (n >= 21) return "כ״" + this.renderHebrewItem(n % 10);
    if (n >= 20) return "כ׳";
    if (n >= 17) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "ט״ז";
    if (n >= 15) return "ט״ו";
    if (n >= 11) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 0) return this.renderHebrewItem(n) + "׳";
};

inter.renderRomanUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderRomanUpper(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 4e5) return this.renderNumber(n, "#,##0");
    if (n >= 3e5) return "ↈↈↈ" + (n === 3e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 2e5) return "ↈↈ" + (n === 2e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 1e5) return "ↈ" + (n === 1e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 9e4) return "ↂↈ" + (n === 9e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 8e4) return "ↇↂↂↂ" + (n === 8e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 7e4) return "ↇↂↂ" + (n === 7e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 6e4) return "ↇↂ" + (n === 6e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 5e4) return "ↇ" + (n === 5e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 4e4) return "ↂↇ" + (n === 4e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 3e4) return "ↂↂↂ" + (n === 3e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 2e4) return "ↂↂ" + (n === 2e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 1e4) return "ↂ" + (n === 1e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 9e3) return "Mↂ" + (n === 9e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 8e3) return "ↁMMM" + (n === 8e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 7e3) return "ↁMM" + (n === 7e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 6e3) return "ↁM" + (n === 6e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 5e3) return "ↁ" + (n === 5e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 4e3) return "Mↁ" + (n === 4e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 3e3) return "MMM" + (n === 3e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 2e3) return "MM" + (n === 2e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 1e3) return "M" + (n === 1e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 900) return "CM" + (n === 900 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 800) return "DCCC" + (n === 800 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 700) return "DCC" + (n === 700 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 600) return "DC" + (n === 600 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 500) return "D" + (n === 500 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 400) return "CD" + (n === 400 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 300) return "CCC" + (n === 300 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 200) return "CC" + (n === 200 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 100) return "C" + (n === 100 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 90) return "XC" + (n === 90 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 80) return "LXXX" + (n === 80 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 70) return "LXX" + (n === 70 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 60) return "LX" + (n === 60 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 50) return "L" + (n === 50 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 40) return "XL" + (n === 40 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 30) return "XXX" + (n === 30 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 20) return "XX" + (n === 20 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 10) return "X" + (n === 10 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 9) return "IX";
    if (n >= 8) return "VIII";
    if (n >= 7) return "VII";
    if (n >= 6) return "VI";
    if (n >= 5) return "V";
    if (n >= 4) return "IV";
    if (n >= 3) return "III";
    if (n >= 2) return "II";
    if (n >= 1) return "I";
    if (n >= 0) return "N";
};

inter.renderRomanLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderRomanLower(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 5e3) return this.renderNumber(n, "#,##0");
    if (n >= 4e3) return "mmmm" + (n === 4e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 3e3) return "mmm" + (n === 3e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 2e3) return "mm" + (n === 2e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 1e3) return "m" + (n === 1e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 900) return "cm" + (n === 900 ? "" : this.renderRomanLower(n % 100));
    if (n >= 800) return "dccc" + (n === 800 ? "" : this.renderRomanLower(n % 100));
    if (n >= 700) return "dcc" + (n === 700 ? "" : this.renderRomanLower(n % 100));
    if (n >= 600) return "dc" + (n === 600 ? "" : this.renderRomanLower(n % 100));
    if (n >= 500) return "d" + (n === 500 ? "" : this.renderRomanLower(n % 100));
    if (n >= 400) return "cd" + (n === 400 ? "" : this.renderRomanLower(n % 100));
    if (n >= 300) return "ccc" + (n === 300 ? "" : this.renderRomanLower(n % 100));
    if (n >= 200) return "cc" + (n === 200 ? "" : this.renderRomanLower(n % 100));
    if (n >= 100) return "c" + (n === 100 ? "" : this.renderRomanLower(n % 100));
    if (n >= 90) return "xc" + (n === 90 ? "" : this.renderRomanLower(n % 10));
    if (n >= 80) return "lxxx" + (n === 80 ? "" : this.renderRomanLower(n % 10));
    if (n >= 70) return "lxx" + (n === 70 ? "" : this.renderRomanLower(n % 10));
    if (n >= 60) return "lx" + (n === 60 ? "" : this.renderRomanLower(n % 10));
    if (n >= 50) return "l" + (n === 50 ? "" : this.renderRomanLower(n % 10));
    if (n >= 40) return "xl" + (n === 40 ? "" : this.renderRomanLower(n % 10));
    if (n >= 30) return "xxx" + (n === 30 ? "" : this.renderRomanLower(n % 10));
    if (n >= 20) return "xx" + (n === 20 ? "" : this.renderRomanLower(n % 10));
    if (n >= 10) return "x" + (n === 10 ? "" : this.renderRomanLower(n % 10));
    if (n >= 9) return "ix";
    if (n >= 8) return "viii";
    if (n >= 7) return "vii";
    if (n >= 6) return "vi";
    if (n >= 5) return "v";
    if (n >= 4) return "iv";
    if (n >= 3) return "iii";
    if (n >= 2) return "ii";
    if (n >= 1) return "i";
    if (n >= 0) return "n";
};

inter.renderTamil = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderTamil(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e8) return this.renderNumber(n, "#,##,##0");
    if (n >= 1e6) return this.renderTamil(Math.floor(n / 1e6)) + "௱௲" + (n === 1e6 ? "" : this.renderTamilThousands(n % 1e6));
    if (n >= 2e3) return this.renderTamil(Math.floor(n / 1e3)) + "௲" + (n === 2e3 ? "" : this.renderTamil(n % 1e3));
    if (n >= 1e3) return "௲" + (n === 1e3 ? "" : this.renderTamil(n % 1e3));
    if (n >= 200) return this.renderTamil(Math.floor(n / 100)) + "௱" + (n === 200 ? "" : this.renderTamil(n % 100));
    if (n >= 100) return "௱" + (n === 100 ? "" : this.renderTamil(n % 100));
    if (n >= 20) return this.renderTamil(Math.floor(n / 10)) + "௰" + (n === 20 ? "" : this.renderTamil(n % 10));
    if (n >= 10) return "௰" + (n === 10 ? "" : this.renderTamil(n % 10));
    if (n >= 9) return "௯";
    if (n >= 8) return "௮";
    if (n >= 7) return "௭";
    if (n >= 6) return "௬";
    if (n >= 5) return "௫";
    if (n >= 4) return "௪";
    if (n >= 3) return "௩";
    if (n >= 2) return "௨";
    if (n >= 1) return "௧";
    if (n >= 0) return "௦";
};

inter.renderDigitsOrdinalMasculine = function(n) {
    if (n < 0) return "−" + this.renderDigitsOrdinalMasculine(-n);
    if (n >= 0) return this.renderNumber(n, "#,##0") + "º.";
};

inter.renderSpelloutCardinalMasculine = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "menos " + this.renderSpelloutCardinalMasculine(-n);
    if (isFractional && n > 1) return this.renderSpelloutCardinalMasculine(Math.floor(n)) + " punto " + this.renderSpelloutCardinalMasculine(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 2e12) return this.renderSpelloutCardinalMasculine(Math.floor(n / 1e12)) + " billiones" + (n === 2e12 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e12));
    if (n >= 1e12) return "un billón" + (n === 1e12 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e12));
    if (n >= 2e6) return this.renderSpelloutCardinalMasculine(Math.floor(n / 1e6)) + " millones" + (n === 2e6 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e6));
    if (n >= 1e6) return "un millón" + (n === 1e6 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e6));
    if (n >= 2e3) return this.renderSpelloutCardinalMasculine(Math.floor(n / 1e3)) + " mil" + (n === 2e3 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e3));
    if (n >= 1e3) return "mil" + (n === 1e3 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e3));
    if (n >= 900) return "nove­cientos" + (n === 900 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 100));
    if (n >= 800) return "ocho­cientos" + (n === 800 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 100));
    if (n >= 700) return "sete­cientos" + (n === 700 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 100));
    if (n >= 600) return "seis­cientos" + (n === 600 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 100));
    if (n >= 500) return "quinientos" + (n === 500 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 100));
    if (n >= 400) return "cuatrocientos" + (n === 400 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 100));
    if (n >= 300) return "trescientos" + (n === 300 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 100));
    if (n >= 200) return "doscientos" + (n === 200 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 100));
    if (n >= 101) return "ciento " + this.renderSpelloutCardinalMasculine(n % 100);
    if (n >= 100) return "cien";
    if (n >= 90) return "noventa" + (n === 90 ? "" : " y " + this.renderSpelloutCardinalMasculine(n % 10));
    if (n >= 80) return "ochenta" + (n === 80 ? "" : " y " + this.renderSpelloutCardinalMasculine(n % 10));
    if (n >= 70) return "setenta" + (n === 70 ? "" : " y " + this.renderSpelloutCardinalMasculine(n % 10));
    if (n >= 60) return "sesenta" + (n === 60 ? "" : " y " + this.renderSpelloutCardinalMasculine(n % 10));
    if (n >= 50) return "cincuenta" + (n === 50 ? "" : " y " + this.renderSpelloutCardinalMasculine(n % 10));
    if (n >= 40) return "cuarenta" + (n === 40 ? "" : " y " + this.renderSpelloutCardinalMasculine(n % 10));
    if (n >= 30) return "treinta" + (n === 30 ? "" : " y " + this.renderSpelloutCardinalMasculine(n % 10));
    if (n >= 22) return this.renderSpelloutNumbering(n);
    if (n >= 21) return "veintiún";
    if (n >= 2) return this.renderSpelloutNumbering(n);
    if (n >= 1) return "un";
    if (n >= 0) return "cero";
};

inter.renderCyrillicLowerThousands = function(n) {
    if (n >= 900) return "҂ц" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 800) return "҂ѿ" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 700) return "҂ѱ" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 600) return "҂х" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 500) return "҂ф" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 400) return "҂у" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 300) return "҂т" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 200) return "҂с" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 100) return "҂р" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 90) return "҂ч" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 80) return "҂п" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 70) return "҂ѻ" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 60) return "҂ѯ" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 50) return "҂н" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 40) return "҂м" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 30) return "҂л" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 20) return "҂к" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 19) return "҂ѳ҃҂і";
    if (n >= 18) return "҂и҃҂і";
    if (n >= 17) return "҂з҃҂і";
    if (n >= 16) return "҂ѕ҃҂і";
    if (n >= 15) return "҂є҃҂і";
    if (n >= 14) return "҂д҃҂і";
    if (n >= 13) return "҂г҃҂і";
    if (n >= 12) return "҂в҃҂і";
    if (n >= 11) return "҂а҃҂і";
    if (n >= 10) return "҃҂і";
    if (n >= 9) return "҃҂ѳ";
    if (n >= 8) return "҃҂и";
    if (n >= 7) return "҃҂з";
    if (n >= 6) return "҃҂ѕ";
    if (n >= 5) return "҃҂є";
    if (n >= 4) return "҃҂д";
    if (n >= 3) return "҃҂г";
    if (n >= 2) return "҃҂в";
    if (n >= 1) return "҃҂а";
    if (n >= 0) return "҃";
};

inter.renderCyrillicLower110 = function(n) {
    if (n >= 10) return "і";
    if (n >= 9) return "ѳ";
    if (n >= 8) return "и";
    if (n >= 7) return "з";
    if (n >= 6) return "ѕ";
    if (n >= 5) return "є";
    if (n >= 4) return "д";
    if (n >= 3) return "г";
    if (n >= 2) return "в";
    if (n >= 1) return "а";
};

inter.renderCyrillicLowerPost = function(n) {
    if (n >= 1) return this.renderCyrillicLower(n);
    if (n >= 0) return "҃";
};

inter.renderCyrillicLowerFinal = function(n) {
    if (n >= 91) return "ч" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 90) return "҃ч";
    if (n >= 81) return "п" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 80) return "҃п";
    if (n >= 71) return "ѻ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 70) return "҃ѻ";
    if (n >= 61) return "ѯ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 60) return "҃ѯ";
    if (n >= 51) return "н" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 50) return "҃н";
    if (n >= 41) return "м" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 40) return "҃м";
    if (n >= 31) return "л" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 30) return "҃л";
    if (n >= 21) return "к" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 20) return "҃к";
    if (n >= 19) return "ѳ҃і";
    if (n >= 18) return "и҃і";
    if (n >= 17) return "з҃і";
    if (n >= 16) return "ѕ҃і";
    if (n >= 15) return "є҃і";
    if (n >= 14) return "д҃і";
    if (n >= 13) return "г҃і";
    if (n >= 12) return "в҃і";
    if (n >= 11) return "а҃і";
    if (n >= 1) return "҃" + this.renderCyrillicLower110(n);
    if (n >= 0) return "҃";
};

inter.renderEthiopicP3 = function(n) {
    if (n >= 1e12) return this.renderEthiopic(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1) return "፼፼፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼፼፼";
};

inter.renderEthiopicP2 = function(n) {
    if (n >= 1e8) return this.renderEthiopic(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1) return "፼፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼፼";
};

inter.renderEthiopicP1 = function(n) {
    if (n >= 1e4) return this.renderEthiopic(Math.floor(n / 1e4)) + "፼" + (n === 1e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 1) return "፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼";
};

inter.renderGreekNumeralMajuscules = function(n) {
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e16) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e16)) + "ΜΜΜΜ" + (n === 1e16 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e16));
    if (n >= 1e12) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e12)) + "ΜΜΜ" + (n === 1e12 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e12));
    if (n >= 1e8) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e8)) + "ΜΜ" + (n === 1e8 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e8));
    if (n >= 1e4) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e4)) + "Μ" + (n === 1e4 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e4));
    if (n >= 1e3) return "͵" + this.renderGreekNumeralMajuscules(Math.floor(n / 1e3)) + (n === 1e3 ? "" : this.renderGreekNumeralMajuscules(n % 1e3));
    if (n >= 900) return "Ϡ" + (n === 900 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 800) return "Ω" + (n === 800 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 700) return "Ψ" + (n === 700 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 600) return "Χ" + (n === 600 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 500) return "Φ" + (n === 500 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 400) return "Υ" + (n === 400 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 300) return "Τ" + (n === 300 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 200) return "Σ" + (n === 200 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 100) return "Ρ" + (n === 100 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 90) return "Ϟ" + (n === 90 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 80) return "Π" + (n === 80 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 70) return "Ο" + (n === 70 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 60) return "Ξ" + (n === 60 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 50) return "Ν" + (n === 50 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 40) return "Μ" + (n === 40 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 30) return "Λ" + (n === 30 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 20) return "Κ" + (n === 20 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 10) return "Ι" + (n === 10 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 9) return "Θ";
    if (n >= 8) return "Η";
    if (n >= 7) return "Ζ";
    if (n >= 6) return "Ϝ";
    if (n >= 5) return "Ε";
    if (n >= 4) return "Δ";
    if (n >= 3) return "Γ";
    if (n >= 2) return "Β";
    if (n >= 1) return "Α";
    if (n >= 0) return "𐆊";
};

inter.renderGreekNumeralMinuscules = function(n) {
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e16) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e16)) + "μμμμ" + (n === 1e16 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e16));
    if (n >= 1e12) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e12)) + "μμμ" + (n === 1e12 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e12));
    if (n >= 1e8) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e8)) + "μμ" + (n === 1e8 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e8));
    if (n >= 1e4) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e4)) + "μ" + (n === 1e4 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e4));
    if (n >= 1e3) return "͵" + this.renderGreekNumeralMinuscules(Math.floor(n / 1e3)) + (n === 1e3 ? "" : this.renderGreekNumeralMinuscules(n % 1e3));
    if (n >= 900) return "ϡ" + (n === 900 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 800) return "ω" + (n === 800 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 700) return "ψ" + (n === 700 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 600) return "χ" + (n === 600 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 500) return "φ" + (n === 500 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 400) return "υ" + (n === 400 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 300) return "τ" + (n === 300 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 200) return "σ" + (n === 200 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 100) return "ρ" + (n === 100 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 90) return "ϟ" + (n === 90 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 80) return "π" + (n === 80 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 70) return "ο" + (n === 70 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 60) return "ξ" + (n === 60 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 50) return "ν" + (n === 50 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 40) return "μ" + (n === 40 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 30) return "λ" + (n === 30 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 20) return "κ" + (n === 20 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 10) return "ι" + (n === 10 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 9) return "θ";
    if (n >= 8) return "η";
    if (n >= 7) return "ζ";
    if (n >= 6) return "ϝ";
    if (n >= 5) return "ε";
    if (n >= 4) return "δ";
    if (n >= 3) return "γ";
    if (n >= 2) return "β";
    if (n >= 1) return "α";
    if (n >= 0) return "𐆊";
};

inter.renderHebrewThousands = function(n) {
    if (n >= 401) return this.renderHebrew(n) + "׳";
    if (n >= 100) return this.renderHebrew(n) + (n === 100 ? "" : "׳");
    if (n >= 10) return this.renderHebrew(n) + (n === 10 ? "" : "׳");
    if (n >= 0) return this.renderHebrew(n);
};

inter.renderHebrew099 = function(n) {
    if (n >= 91) return "צ״" + this.renderHebrewItem(n % 10);
    if (n >= 90) return "״צ";
    if (n >= 81) return "פ״" + this.renderHebrewItem(n % 10);
    if (n >= 80) return "״פ";
    if (n >= 71) return "ע״" + this.renderHebrewItem(n % 10);
    if (n >= 70) return "״ע";
    if (n >= 61) return "ס״" + this.renderHebrewItem(n % 10);
    if (n >= 60) return "״ס";
    if (n >= 51) return "נ״" + this.renderHebrewItem(n % 10);
    if (n >= 50) return "״נ";
    if (n >= 41) return "מ״" + this.renderHebrewItem(n % 10);
    if (n >= 40) return "״מ";
    if (n >= 31) return "ל״" + this.renderHebrewItem(n % 10);
    if (n >= 30) return "״ל";
    if (n >= 21) return "כ״" + this.renderHebrewItem(n % 10);
    if (n >= 20) return "״כ";
    if (n >= 17) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "ט״ז";
    if (n >= 15) return "ט״ו";
    if (n >= 11) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 1) return "״" + this.renderHebrewItem(n);
    if (n >= 0) return "׳";
};

inter.renderHebrewItem = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderHebrewItem(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 2100) return this.renderNumber(n, "#,##0");
    if (n >= 2e3) return "תתתתת" + (n === 2e3 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1900) return "תתתתש" + (n === 1900 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1800) return "תתתתר" + (n === 1800 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1700) return "תתתתק" + (n === 1700 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1600) return "תתתת" + (n === 1600 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1500) return "תתתש" + (n === 1500 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1400) return "תתתר" + (n === 1400 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1300) return "תתתק" + (n === 1300 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1200) return "תתת" + (n === 1200 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1100) return "תתש" + (n === 1100 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1e3) return "תתר" + (n === 1e3 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 900) return "תתק" + (n === 900 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 800) return "תת" + (n === 800 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 745) return "תש" + this.renderHebrewItem(n % 100);
    if (n >= 744) return "תשדמ";
    if (n >= 700) return "תש" + (n === 700 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 699) return "תר" + this.renderHebrewItem(n % 100);
    if (n >= 698) return "תרחצ";
    if (n >= 600) return "תר" + (n === 600 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 500) return "תק" + (n === 500 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 400) return "ת" + (n === 400 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 345) return "ש" + this.renderHebrewItem(n % 100);
    if (n >= 344) return "שדמ";
    if (n >= 305) return "ש" + this.renderHebrewItem(n % 100);
    if (n >= 304) return "דש";
    if (n >= 300) return "ש" + (n === 300 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 299) return "ר" + this.renderHebrewItem(n % 100);
    if (n >= 298) return "רחצ";
    if (n >= 200) return "ר" + (n === 200 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 100) return "ק" + (n === 100 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 90) return "צ" + (n === 90 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 80) return "פ" + (n === 80 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 70) return "ע" + (n === 70 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 60) return "ס" + (n === 60 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 50) return "נ" + (n === 50 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 40) return "מ" + (n === 40 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 30) return "ל" + (n === 30 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 20) return "כ" + (n === 20 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 17) return "י" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "טז";
    if (n >= 15) return "טו";
    if (n >= 10) return "י" + (n === 10 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 9) return "ט";
    if (n >= 8) return "ח";
    if (n >= 7) return "ז";
    if (n >= 6) return "ו";
    if (n >= 5) return "ה";
    if (n >= 4) return "ד";
    if (n >= 3) return "ג";
    if (n >= 2) return "ב";
    if (n >= 1) return "א";
    if (n >= 0) return "״";
};

inter.renderTamilThousands = function(n) {
    if (n >= 1e3) return this.renderTamilThousands(Math.floor(n / 1e3)) + "௲" + (n === 1e3 ? "" : this.renderTamilThousands(n % 1e3));
    if (n >= 0) return this.renderTamil(n);
};

inter.renderEthiopicP = function(n) {
    if (n >= 1e16) return this.renderEthiopicP(Math.floor(n / 1e16)) + "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 1e12) return this.renderEthiopicP(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1e8) return this.renderEthiopicP(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1e4) return this.renderEthiopicP(Math.floor(n / 1e4)) + "፼" + (n === 1e4 ? "" : this.renderEthiopicP(n % 1e4));
    if (n >= 1) return this.renderEthiopic(n);
};

inter.timeZones = [].concat(P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[4], P.timeZones[-1], P.timeZones[6], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[15], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[30], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones.slice(34, 38), P.timeZones[-1], P.timeZones[-1], P.timeZones[40], P.timeZones[-1], P.timeZones[-1], P.timeZones[43], P.timeZones[-1], P.timeZones[45], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones.slice(51, 53), P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones.slice(62, 65), P.timeZones[-1], P.timeZones.slice(66, 68), P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[72], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones.slice(78, 80), P.timeZones[-1], P.timeZones.slice(81, 83), P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[87], P.timeZones[-1], P.timeZones[-1], P.timeZones[90], P.timeZones[-1], P.timeZones[92], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones.slice(97, 99), P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones.slice(102, 104), P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[109], P.timeZones[-1], P.timeZones[111], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[115], P.timeZones[-1], P.timeZones[117], {
    id: "America/St_Kitts",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "San Cristóbal",
    countryId: "KN"
}, P.timeZones.slice(118, 120), P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[125], {
    id: "America/St_Johns",
    regionId: "021",
    utcStandardOffsetSeconds: -12600,
    displayName: "San Juan de Terranova",
    countryId: "CA"
}, P.timeZones.slice(127, 130), P.timeZones[-1], P.timeZones[-1], P.timeZones[132], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[137], P.timeZones[-1], P.timeZones[139], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[146], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[150], P.timeZones[-1], P.timeZones.slice(152, 154), P.timeZones[-1], P.timeZones[155], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[159], P.timeZones[-1], P.timeZones[161], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[165], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[169], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones.slice(173, 175), P.timeZones[-1], P.timeZones.slice(176, 179), P.timeZones[-1], P.timeZones[-1], P.timeZones.slice(181, 185), P.timeZones[-1], P.timeZones[186], P.timeZones[-1], P.timeZones[188], P.timeZones[-1], P.timeZones.slice(190, 192), P.timeZones[-1], P.timeZones[-1], P.timeZones[194], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones.slice(199, 204), P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[208], P.timeZones[-1], P.timeZones[-1], P.timeZones[211], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[215], P.timeZones[-1], P.timeZones[-1], P.timeZones[218], P.timeZones[-1], P.timeZones.slice(220, 223), P.timeZones[-1], P.timeZones[-1], P.timeZones.slice(225, 228), P.timeZones[-1], P.timeZones.slice(229, 232), P.timeZones[-1], P.timeZones.slice(233, 236), P.timeZones[-1], P.timeZones[-1], P.timeZones[238], P.timeZones[-1], P.timeZones[-1], P.timeZones[241], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[246], P.timeZones[-1], P.timeZones.slice(248, 251), P.timeZones[-1], P.timeZones[252], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones.slice(263, 267), P.timeZones[-1], P.timeZones.slice(268, 271), P.timeZones[-1], P.timeZones[-1], P.timeZones.slice(273, 278), P.timeZones[-1], P.timeZones[279], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones.slice(285, 287), P.timeZones[-1], P.timeZones[288], P.timeZones[-1], P.timeZones[-1], P.timeZones.slice(291, 294), P.timeZones[-1], P.timeZones.slice(295, 302), P.timeZones[-1], P.timeZones[-1], P.timeZones[304], P.timeZones[-1], P.timeZones[-1], P.timeZones.slice(307, 310), P.timeZones[-1], P.timeZones[311], P.timeZones[-1], P.timeZones[-1], P.timeZones[314], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[318], P.timeZones[-1], P.timeZones[320], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[327], P.timeZones[-1], P.timeZones[-1], P.timeZones[330], P.timeZones[-1], P.timeZones[332], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones.slice(347, 350), P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones.slice(355, 357), P.timeZones[-1], P.timeZones[-1], P.timeZones.slice(359, 363), P.timeZones[-1], P.timeZones[364], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[368], P.timeZones[-1], P.timeZones.slice(370, 372), P.timeZones[-1], P.timeZones[373], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones.slice(385, 387), P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[395], P.timeZones[-1], P.timeZones[397], P.timeZones[-1], P.timeZones[399], {
    id: "Asia/Srednekolymsk",
    regionId: "151",
    utcStandardOffsetSeconds: 39600,
    displayName: "Srednekolymsk",
    countryId: "RU"
}, P.timeZones[-1], P.timeZones[-1], P.timeZones[403], P.timeZones[-1], {
    id: "Pacific/Wake",
    utcStandardOffsetSeconds: 43200,
    displayName: "Isla Wake",
    countryId: "UM"
}, P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1]);

inter.territories = [].concat(P.territories.slice(0, 19), _1f5d167, P.territories.slice(19, 45), P.territories.slice(46, 132), {
    id: "QO",
    displayName: "Islas Ultramarinas",
    regionId: "009",
    hasTimeZones: false
}, P.territories.slice(132, 205), _1f5d135, P.territories.slice(205, 208), P.territories.slice(209, 240), P.territories.slice(241, 256), P.territories.slice(257, 279), _1f5d120, P.territories.slice(279, 285));

inter.regions = [].concat(P.territories[3], P.territories.slice(14, 19), _1f5d167, P.territories[19], P.territories[46], P.territories[49], P.territories.slice(79, 84), P.territories[169], P.territories[176], P.territories[186], P.territories[191], P.territories[200], P.territories[207], P.territories[239], P.territories.slice(279, 285));

inter.countries = [].concat(P.territories.slice(0, 3), P.territories.slice(4, 14), P.territories.slice(20, 45), P.territories.slice(47, 49), P.territories.slice(50, 79), P.territories.slice(84, 169), P.territories.slice(170, 176), P.territories.slice(177, 186), P.territories.slice(187, 191), P.territories.slice(192, 200), P.territories.slice(201, 205), _1f5d135, P.territories.slice(205, 207), P.territories.slice(209, 239), P.territories.slice(241, 256), P.territories.slice(257, 279), _1f5d120);

inter.languages = [].concat(P.languages.slice(0, 52), {
    id: "en_gb",
    displayName: "inglés (R. U.)",
    nativeDisplayName: "British English"
}, P.languages.slice(53, 108), {
    id: "eu",
    displayName: "vasco",
    nativeDisplayName: "euskara"
}, P.languages.slice(109, 207), {
    id: "sw",
    displayName: "swahili",
    nativeDisplayName: "Kiswahili"
}, {
    id: "sw_cd",
    displayName: "swahili del Congo",
    nativeDisplayName: "Kiswahili ya Kongo"
}, P.languages.slice(209, 475), {
    id: "ug",
    displayName: "uighur",
    nativeDisplayName: "ئۇيغۇرچە"
}, P.languages.slice(476, 482), {
    id: "ps",
    displayName: "pashtún",
    nativeDisplayName: "پښتو"
}, P.languages.slice(483, 520));

inter.currencies = [].concat(P.currencies.slice(0, 9), {
    id: "THB",
    displayName: "bat",
    symbol: "THB",
    one: "bat",
    other: "bats"
}, P.currencies.slice(10, 12), {
    id: "VEF",
    displayName: "bolívar venezolano",
    symbol: "BsF",
    one: "bolívar venezolano",
    other: "bolívares venezolanos"
}, P.currencies.slice(13, 56), {
    id: "VND",
    displayName: "dong",
    symbol: "VND",
    one: "dong",
    other: "dongs"
}, P.currencies[57], {
    id: "AMD",
    displayName: "dram armenio",
    symbol: "AMD",
    one: "dram",
    other: "drams"
}, P.currencies.slice(59, 66), {
    id: "CAD",
    displayName: "dólar canadiense",
    symbol: "CAD",
    one: "dólar canadiense",
    other: "dólares canadienses"
}, P.currencies.slice(67, 72), {
    id: "USD",
    displayName: "dólar estadounidense",
    symbol: "USD",
    one: "dólar estadounidense",
    other: "dólares estadounidenses"
}, P.currencies.slice(73, 94), {
    id: "EUR",
    displayName: "euro",
    symbol: "EUR",
    one: "euro",
    other: "euros"
}, P.currencies.slice(95, 155), {
    id: "EGP",
    displayName: "libra egipcia",
    symbol: "E£",
    one: "libra egipcia",
    other: "libras egipcias"
}, P.currencies.slice(156, 182), {
    id: "ERN",
    displayName: "nafka",
    symbol: "ERN",
    one: "nakfa",
    other: "nakfas"
}, P.currencies[182], P.currencies.slice(184, 219), {
    id: "GTQ",
    displayName: "quetzal",
    symbol: "Q",
    one: "quetzal guatemalteco",
    other: "quetzales guatemaltecos"
}, P.currencies.slice(220, 274));

module.exports = inter;