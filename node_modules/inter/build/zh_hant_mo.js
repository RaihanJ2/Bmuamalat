function defaults(targetObj) {
    for (var i = 1; i < arguments.length; i += 1) {
        if (arguments[i] && typeof arguments[i] === "object") {
            for (var propertyName in arguments[i]) {
                if (typeof targetObj[propertyName] === "undefined") {
                    targetObj[propertyName] = arguments[i][propertyName];
                }
            }
        }
    }
    return targetObj;
}

var P = require("./zh_hant.js"), inter = defaults({
    renderers: {}
}, P);

var _fk3r1 = [ "Q1", "Q2", "Q3", "Q4" ], _fk3r2 = {
    displayName: "上午/下午"
}, _fk3r3 = {
    other: "{0} 斯堪地那維亞英里"
}, _fk3r4 = {
    a: "ah時至ah時",
    h: "ah時至h時"
}, _fk3r5 = [ "第1季", "第2季", "第3季", "第4季" ], _fk3r6 = {
    "0": "今年",
    "1": "下年",
    "-1": "上年"
}, _fk3r7 = {
    "0": "今季",
    "1": "下季",
    "-1": "上季"
}, _fk3r8 = {
    "0": "本月",
    "1": "下月",
    "-1": "上月"
}, _fk3r9 = {
    d: "M/d至M/d",
    M: "M/d至M/d"
}, _fk3r10 = {
    M: "r/M至r/M",
    y: "r/M至r/M"
}, _fk3r11 = {
    M: "Gy/M至y/M",
    y: "Gy/M至y/M"
}, _fk3r12 = {
    d: "M月d日至d日",
    M: "M月d日至M月d日"
}, _fk3r13 = {
    "0": "今季",
    "1": "下一季",
    "-1": "上一季"
}, _fk3r14 = {
    "0": "本月",
    "1": "下個月",
    "-1": "上個月"
}, _fk3r15 = {
    M: "y年M月至M月",
    y: "y年M月至y年M月"
}, _fk3r16 = {
    "0": "本星期",
    "1": "下星期",
    "-1": "上星期"
}, _fk3r17 = {
    "0": "本週日",
    "1": "下週日",
    "-1": "上週日"
}, _fk3r18 = {
    "0": "本週一",
    "1": "下週一",
    "-1": "上週一"
}, _fk3r19 = {
    "0": "本週二",
    "1": "下週二",
    "-1": "上週二"
}, _fk3r20 = {
    "0": "本週三",
    "1": "下週三",
    "-1": "上週三"
}, _fk3r21 = {
    "0": "本週四",
    "1": "下週四",
    "-1": "上週四"
}, _fk3r22 = {
    "0": "本週五",
    "1": "下週五",
    "-1": "上週五"
}, _fk3r23 = {
    "0": "本週六",
    "1": "下週六",
    "-1": "上週六"
}, _fk3r24 = {
    d: "d/M 至 d/M",
    M: "d/M 至 d/M"
}, _fk3r25 = {
    M: "Gy年M月至M月",
    y: "Gy年M月至y年M月"
}, _fk3r26 = [ "日", "一", "二", "三", "四", "五", "六" ], _fk3r27 = {
    d: "M/dE至M/dE",
    M: "M/dE至M/dE"
}, _fk3r28 = {
    d: "MMMd日至d日",
    M: "MMMd日至MMMd日"
}, _fk3r29 = {
    d: "M月d日E至d日E",
    M: "M月d日E至M月d日E"
}, _fk3r30 = {
    "0": "本星期日",
    "1": "下星期日",
    "-1": "上星期日"
}, _fk3r31 = {
    "0": "本星期一",
    "1": "下星期一",
    "-1": "上星期一"
}, _fk3r32 = {
    "0": "本星期二",
    "1": "下星期二",
    "-1": "上星期二"
}, _fk3r33 = {
    "0": "本星期三",
    "1": "下星期三",
    "-1": "上星期三"
}, _fk3r34 = {
    "0": "本星期四",
    "1": "下星期四",
    "-1": "上星期四"
}, _fk3r35 = {
    "0": "本星期五",
    "1": "下星期五",
    "-1": "上星期五"
}, _fk3r36 = {
    "0": "本星期六",
    "1": "下星期六",
    "-1": "上星期六"
}, _fk3r37 = {
    symbols: P.numbers.ahom.symbols
}, _fk3r38 = {
    a: "ah時至ah時 [v]",
    h: "ah時至h時 [v]"
}, _fk3r39 = {
    H: "HH:mm–HH:mm",
    m: "HH:mm–HH:mm"
}, _fk3r40 = {
    d: "MMMd日E至d日E",
    M: "MMMd日E至MMMd日E"
}, _fk3r41 = {
    M: "rU年MMM至MMM",
    y: "rU年MMM至rU年MMM"
}, _fk3r42 = [ "週日", "週一", "週二", "週三", "週四", "週五", "週六" ], _fk3r43 = {
    wide: [ "伊斯蘭曆" ],
    abbreviated: [ "伊斯蘭曆" ]
}, _fk3r44 = {
    M: "rU年MMMM至MMMM",
    y: "rU年MMMM至rU年MMMM"
}, _fk3r45 = {
    relative: _fk3r17
}, _fk3r46 = {
    relative: _fk3r18
}, _fk3r47 = {
    relative: _fk3r19
}, _fk3r48 = {
    relative: _fk3r20
}, _fk3r49 = {
    relative: _fk3r21
}, _fk3r50 = {
    relative: _fk3r22
}, _fk3r51 = {
    relative: _fk3r23
}, _fk3r52 = {
    d: "d/M（E） 至 d/M（E）",
    M: "d/M（E） 至 d/M（E）"
}, _fk3r53 = {
    H: "HH:mm–HH:mm [v]",
    m: "HH:mm–HH:mm [v]"
}, _fk3r54 = {
    "0": "今日",
    "1": "明日",
    "2": "後日",
    "-2": "前日",
    "-1": "昨日"
}, _fk3r55 = {
    relative: _fk3r30
}, _fk3r56 = {
    relative: _fk3r31
}, _fk3r57 = {
    relative: _fk3r32
}, _fk3r58 = {
    relative: _fk3r33
}, _fk3r59 = {
    relative: _fk3r34
}, _fk3r60 = {
    relative: _fk3r35
}, _fk3r61 = {
    relative: _fk3r36
}, _fk3r62 = [ "星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六" ], _fk3r63 = {
    future: {
        other: "{0}分後"
    },
    past: {
        other: "{0}分前"
    }
}, _fk3r64 = {
    future: {
        other: "{0}年後"
    },
    past: {
        other: "{0}年前"
    }
}, _fk3r65 = {
    future: {
        other: "+{0}Q"
    },
    past: {
        other: "-{0}Q"
    }
}, _fk3r66 = {
    future: {
        other: "{0}週後"
    },
    past: {
        other: "{0}週前"
    }
}, _fk3r67 = {
    future: {
        other: "{0}日後"
    },
    past: {
        other: "{0}日前"
    }
}, _fk3r68 = {
    future: {
        other: "{0}秒後"
    },
    past: {
        other: "{0}秒前"
    }
}, _fk3r69 = {
    a: "ah:mm至ah:mm",
    h: "ah:mm至h:mm",
    m: "ah:mm至h:mm"
}, _fk3r70 = {
    future: {
        other: "{0}小時後"
    },
    past: {
        other: "{0}小時前"
    }
}, _fk3r71 = {
    future: {
        other: "{0} 年後"
    },
    past: {
        other: "{0} 年前"
    }
}, _fk3r72 = {
    future: {
        other: "{0} 季後"
    },
    past: {
        other: "{0} 季前"
    }
}, _fk3r73 = {
    future: {
        other: "{0}個月後"
    },
    past: {
        other: "{0}個月前"
    }
}, _fk3r74 = {
    future: {
        other: "{0} 日後"
    },
    past: {
        other: "{0} 日前"
    }
}, _fk3r75 = {
    future: {
        other: "{0} 秒後"
    },
    past: {
        other: "{0} 秒前"
    }
}, _fk3r76 = {
    id: "CC",
    displayName: "可可斯群島",
    hasTimeZones: true
}, _fk3r77 = {
    id: "BV",
    displayName: "鮑威特島",
    hasTimeZones: false
}, _fk3r78 = {
    d: "r年MMMd至d",
    M: "r年MMMd至MMMd",
    y: "r年MMMd至r年MMMd"
}, _fk3r79 = {
    id: "CP",
    displayName: "克里珀頓島",
    hasTimeZones: false
}, _fk3r80 = {
    id: "TF",
    displayName: "法屬南部地區",
    hasTimeZones: true
}, _fk3r81 = {
    future: {
        other: "{0} 星期後"
    },
    past: {
        other: "{0} 星期前"
    }
}, _fk3r82 = {
    future: {
        other: "{0} 個月後"
    },
    past: {
        other: "{0} 個月前"
    }
}, _fk3r83 = {
    future: {
        other: "{0} 小時後"
    },
    past: {
        other: "{0} 小時前"
    }
}, _fk3r84 = {
    future: {
        other: "{0} 分鐘後"
    },
    past: {
        other: "{0} 分鐘前"
    }
}, _fk3r85 = {
    d: "r/M/d至r/M/d",
    M: "r/M/d至r/M/d",
    y: "r/M/d至r/M/d"
}, _fk3r86 = {
    id: "IO",
    displayName: "英屬印度洋領土",
    hasTimeZones: true
}, _fk3r87 = {
    wide: [ "ERA0", "ERA1" ],
    abbreviated: [ "ERA0", "ERA1" ]
}, _fk3r88 = [ "正", "二", "三", "四", "五", "六", "七", "八", "九", "十", "十一", "十二" ], _fk3r89 = {
    d: "Gy/M/d至y/M/d",
    M: "Gy/M/d至y/M/d",
    y: "Gy/M/d至y/M/d"
}, _fk3r90 = {
    d: "Gy年M月d日至d日",
    M: "Gy年M月d日至M月d日",
    y: "Gy年M月d日至y年M月d日"
}, _fk3r91 = [ "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" ], _fk3r92 = {
    id: "GS",
    displayName: "南佐治亞島與南桑威奇群島",
    hasTimeZones: true
}, _fk3r93 = {
    d: "r/M/dE至r/M/dE",
    M: "r/M/dE至r/M/dE",
    y: "r/M/dE至r/M/dE"
}, _fk3r94 = [ undefined, "子", "丑", "寅", "卯", "辰", "巳", "午", "未", "申", "酉", "戌" ], _fk3r95 = [ undefined, "鼠", "牛", "虎", "兔", "龍", "蛇", "馬", "羊", "猴", "雞", "狗" ], _fk3r96 = [ "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13" ], _fk3r97 = {
    d: "Gy/M/dE至y/M/dE",
    M: "Gy/M/dE至y/M/dE",
    y: "Gy/M/dE至y/M/dE"
}, _fk3r98 = {
    d: "Gy年M月d日E至d日E",
    M: "Gy年M月d日E至M月d日E",
    y: "Gy年M月d日E至y年M月d日E"
}, _fk3r99 = {
    d: "rU年MMMdE至dE",
    M: "rU年MMMdE至MMMdE",
    y: "rU年MMMdE至rU年MMMdE"
}, _fk3r100 = {
    a: "ah:mm至ah:mm [v]",
    h: "ah:mm至h:mm [v]",
    m: "ah:mm至h:mm [v]"
}, _fk3r101 = {
    id: "TD",
    displayName: "乍得",
    regionId: "017",
    hasTimeZones: true
}, _fk3r102 = {
    id: "YE",
    displayName: "也門",
    regionId: "145",
    hasTimeZones: true
}, _fk3r103 = {
    id: "GH",
    displayName: "加納",
    regionId: "011",
    hasTimeZones: true
}, _fk3r104 = {
    id: "GA",
    displayName: "加蓬",
    regionId: "017",
    hasTimeZones: true
}, _fk3r105 = {
    id: "TO",
    displayName: "湯加",
    regionId: "061",
    hasTimeZones: true
}, _fk3r106 = {
    id: "NR",
    displayName: "瑙魯",
    regionId: "057",
    hasTimeZones: true
}, _fk3r107 = {
    id: "LA",
    displayName: "老撾",
    regionId: "035",
    hasTimeZones: true
}, _fk3r108 = {
    id: "KE",
    displayName: "肯雅",
    regionId: "014",
    hasTimeZones: true
}, _fk3r109 = {
    id: "BJ",
    displayName: "貝寧",
    regionId: "011",
    hasTimeZones: true
}, _fk3r110 = {
    id: "OM",
    displayName: "阿曼",
    regionId: "145",
    hasTimeZones: true
}, _fk3r111 = {
    id: "ML",
    displayName: "馬里",
    regionId: "011",
    hasTimeZones: true
}, _fk3r112 = {
    id: "ME",
    displayName: "黑山",
    regionId: "039",
    hasTimeZones: true
}, _fk3r113 = {
    "2": "{0} {1}",
    start: "{0} {1}",
    middle: "{0} {1}",
    end: "{0} {1}"
}, _fk3r114 = {
    id: "BZ",
    displayName: "伯利茲",
    regionId: "013",
    hasTimeZones: true
}, _fk3r115 = {
    id: "CV",
    displayName: "佛得角",
    regionId: "011",
    hasTimeZones: true
}, _fk3r116 = {
    id: "QA",
    displayName: "卡塔爾",
    regionId: "145",
    hasTimeZones: true
}, _fk3r117 = {
    id: "DJ",
    displayName: "吉布提",
    regionId: "014",
    hasTimeZones: true
}, _fk3r118 = {
    id: "TV",
    displayName: "圖瓦盧",
    regionId: "061",
    hasTimeZones: true
}, _fk3r119 = {
    id: "GY",
    displayName: "圭亞那",
    regionId: "005",
    hasTimeZones: true
}, _fk3r120 = {
    id: "SC",
    displayName: "塞舌爾",
    regionId: "014",
    hasTimeZones: true
}, _fk3r121 = {
    id: "NE",
    displayName: "尼日爾",
    regionId: "011",
    hasTimeZones: true
}, _fk3r122 = {
    id: "GM",
    displayName: "岡比亞",
    regionId: "011",
    hasTimeZones: true
}, _fk3r123 = {
    id: "BI",
    displayName: "布隆迪",
    regionId: "014",
    hasTimeZones: true
}, _fk3r124 = {
    id: "IT",
    displayName: "意大利",
    regionId: "039",
    hasTimeZones: true
}, _fk3r125 = {
    id: "RW",
    displayName: "盧旺達",
    regionId: "014",
    hasTimeZones: true
}, _fk3r126 = {
    id: "KM",
    displayName: "科摩羅",
    regionId: "014",
    hasTimeZones: true
}, _fk3r127 = {
    id: "SO",
    displayName: "索馬里",
    regionId: "014",
    hasTimeZones: true
}, _fk3r128 = {
    id: "LS",
    displayName: "萊索托",
    regionId: "018",
    hasTimeZones: true
}, _fk3r129 = {
    id: "SR",
    displayName: "蘇里南",
    regionId: "005",
    hasTimeZones: true
}, _fk3r130 = {
    id: "ZM",
    displayName: "贊比亞",
    regionId: "014",
    hasTimeZones: true
}, _fk3r131 = {
    id: "AW",
    displayName: "阿魯巴",
    regionId: "029",
    hasTimeZones: true
}, _fk3r132 = {
    id: "IM",
    displayName: "馬恩島",
    regionId: "154",
    hasTimeZones: true
}, _fk3r133 = {
    id: "MW",
    displayName: "馬拉維",
    regionId: "014",
    hasTimeZones: true
}, _fk3r134 = {
    id: "MT",
    displayName: "馬耳他",
    regionId: "039",
    hasTimeZones: true
}, _fk3r135 = {
    id: "HR",
    displayName: "克羅地亞",
    regionId: "039",
    hasTimeZones: true
}, _fk3r136 = {
    id: "LR",
    displayName: "利比里亞",
    regionId: "011",
    hasTimeZones: true
}, _fk3r137 = {
    id: "BW",
    displayName: "博茨瓦納",
    regionId: "018",
    hasTimeZones: true
}, _fk3r138 = {
    id: "GT",
    displayName: "危地馬拉",
    regionId: "013",
    hasTimeZones: true
}, _fk3r139 = {
    id: "EC",
    displayName: "厄瓜多爾",
    regionId: "005",
    hasTimeZones: true
}, _fk3r140 = {
    id: "TZ",
    displayName: "坦桑尼亞",
    regionId: "014",
    hasTimeZones: true
}, _fk3r141 = {
    id: "SL",
    displayName: "塞拉利昂",
    regionId: "011",
    hasTimeZones: true
}, _fk3r142 = {
    id: "CY",
    displayName: "塞浦路斯",
    regionId: "145",
    hasTimeZones: true
}, _fk3r143 = {
    id: "NG",
    displayName: "尼日利亞",
    regionId: "011",
    hasTimeZones: true
}, _fk3r144 = {
    id: "BB",
    displayName: "巴巴多斯",
    regionId: "029",
    hasTimeZones: true
}, _fk3r145 = {
    id: "SZ",
    displayName: "斯威士蘭",
    regionId: "018",
    hasTimeZones: true
}, _fk3r146 = {
    id: "GD",
    displayName: "格林納達",
    regionId: "029",
    hasTimeZones: true
}, _fk3r147 = {
    id: "GE",
    displayName: "格魯吉亞",
    regionId: "145",
    hasTimeZones: true
}, _fk3r148 = {
    id: "MU",
    displayName: "毛里裘斯",
    regionId: "014",
    hasTimeZones: true
}, _fk3r149 = {
    id: "ZW",
    displayName: "津巴布韋",
    regionId: "014",
    hasTimeZones: true
}, _fk3r150 = {
    id: "HN",
    displayName: "洪都拉斯",
    regionId: "013",
    hasTimeZones: true
}, _fk3r151 = {
    id: "VU",
    displayName: "瓦努阿圖",
    regionId: "054",
    hasTimeZones: true
}, _fk3r152 = {
    id: "CI",
    displayName: "科特迪瓦",
    regionId: "011",
    hasTimeZones: true
}, _fk3r153 = {
    id: "LC",
    displayName: "聖盧西亞",
    regionId: "029",
    hasTimeZones: true
}, _fk3r154 = {
    id: "MZ",
    displayName: "莫桑比克",
    regionId: "014",
    hasTimeZones: true
}, _fk3r155 = {
    id: "AZ",
    displayName: "阿塞拜疆",
    regionId: "145",
    hasTimeZones: true
}, _fk3r156 = {
    id: "MV",
    displayName: "馬爾代夫",
    regionId: "034",
    hasTimeZones: true
}, _fk3r157 = {
    id: "LI",
    displayName: "列支敦士登",
    regionId: "155",
    hasTimeZones: true
}, _fk3r158 = {
    id: "ER",
    displayName: "厄立特里亞",
    regionId: "014",
    hasTimeZones: true
}, _fk3r159 = {
    id: "CR",
    displayName: "哥斯達黎加",
    regionId: "013",
    hasTimeZones: true
}, _fk3r160 = {
    id: "ET",
    displayName: "埃塞俄比亞",
    regionId: "014",
    hasTimeZones: true
}, _fk3r161 = {
    id: "TG",
    displayName: "多哥共和國",
    regionId: "011",
    hasTimeZones: true
}, _fk3r162 = {
    id: "BF",
    displayName: "布基納法索",
    regionId: "011",
    hasTimeZones: true
}, _fk3r163 = {
    id: "GW",
    displayName: "幾內亞比紹",
    regionId: "011",
    hasTimeZones: true
}, _fk3r164 = {
    id: "SB",
    displayName: "所羅門群島",
    regionId: "054",
    hasTimeZones: true
}, _fk3r165 = {
    id: "SI",
    displayName: "斯洛文尼亞",
    regionId: "039",
    hasTimeZones: true
}, _fk3r166 = {
    id: "MR",
    displayName: "毛里塔尼亞",
    regionId: "011",
    hasTimeZones: true
}, _fk3r167 = {
    id: "SA",
    displayName: "沙特阿拉伯",
    regionId: "145",
    hasTimeZones: true
}, _fk3r168 = {
    id: "PN",
    displayName: "皮特凱恩島",
    regionId: "061",
    hasTimeZones: true
}, _fk3r169 = {
    id: "BL",
    displayName: "聖巴泰勒米",
    regionId: "029",
    hasTimeZones: true
}, _fk3r170 = {
    id: "MS",
    displayName: "蒙特塞拉特",
    regionId: "029",
    hasTimeZones: true
}, _fk3r171 = [ "正月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月" ], _fk3r172 = {
    symbols: P.numbers.ahom.symbols,
    digits: "renderSpelloutCardinal"
}, _fk3r173 = [ "1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月" ], _fk3r174 = {
    id: "TT",
    displayName: "千里達和多巴哥",
    regionId: "029",
    hasTimeZones: true
}, _fk3r175 = {
    id: "DO",
    displayName: "多米尼加共和國",
    regionId: "029",
    hasTimeZones: true
}, _fk3r176 = {
    id: "AG",
    displayName: "安提瓜和巴布達",
    regionId: "029",
    hasTimeZones: true
}, _fk3r177 = {
    id: "PG",
    displayName: "巴布亞新幾內亞",
    regionId: "054",
    hasTimeZones: true
}, _fk3r178 = {
    id: "PF",
    displayName: "法屬波利尼西亞",
    regionId: "061",
    hasTimeZones: true
}, _fk3r179 = {
    id: "VI",
    displayName: "美屬維爾京群島",
    regionId: "029",
    hasTimeZones: true
}, _fk3r180 = {
    id: "KN",
    displayName: "聖基茨和尼維斯",
    regionId: "029",
    hasTimeZones: true
}, _fk3r181 = {
    id: "VG",
    displayName: "英屬維爾京群島",
    regionId: "029",
    hasTimeZones: true
}, _fk3r182 = {
    id: "CG",
    displayName: "剛果 - 布拉薩",
    regionId: "017",
    hasTimeZones: true
}, _fk3r183 = {
    id: "CD",
    displayName: "剛果 - 金夏沙",
    regionId: "017",
    hasTimeZones: true
}, _fk3r184 = {
    id: "ST",
    displayName: "聖多美和普林西比",
    regionId: "017",
    hasTimeZones: true
}, _fk3r185 = {
    id: "AE",
    displayName: "阿拉伯聯合酋長國",
    regionId: "145",
    hasTimeZones: true
}, _fk3r186 = {
    id: "TC",
    displayName: "特克斯和凱科斯群島",
    regionId: "029",
    hasTimeZones: true
}, _fk3r187 = {
    abbreviated: {
        leap: "閏{0}"
    },
    narrow: {
        leap: "閏{0}"
    },
    wide: {
        leap: "閏{0}"
    }
}, _fk3r188 = {
    id: "BA",
    displayName: "波斯尼亞和黑塞哥維那",
    regionId: "039",
    hasTimeZones: true
}, _fk3r189 = {
    id: "VC",
    displayName: "聖文森特和格林納丁斯",
    regionId: "029",
    hasTimeZones: true
}, _fk3r190 = {
    id: "013",
    displayName: "中美洲",
    hasTimeZones: false,
    parentRegionId: "019"
}, _fk3r191 = {
    id: "029",
    displayName: "加勒比",
    hasTimeZones: false,
    parentRegionId: "019"
}, _fk3r192 = {
    id: "SJ",
    displayName: "斯瓦爾巴特群島及揚馬延島",
    regionId: "154",
    hasTimeZones: true
}, _fk3r193 = [ "1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", "13月" ], _fk3r194 = {
    id: "061",
    displayName: "波利尼西亞",
    hasTimeZones: false,
    parentRegionId: "009"
}, _fk3r195 = {
    symbols: P.numbers.ahom.symbols,
    digits: "renderSpelloutCardinalFinancial"
}, _fk3r196 = {
    displayName: "分",
    relativeTime: _fk3r63
}, _fk3r197 = {
    displayName: "週",
    relativeTime: _fk3r66
}, _fk3r198 = {
    displayName: "秒",
    relativeTime: _fk3r68
}, _fk3r199 = {
    displayName: "時",
    relativeTime: _fk3r70
}, _fk3r200 = {
    displayName: "秒",
    relativeTime: _fk3r75
}, _fk3r201 = {
    displayName: "月",
    relativeTime: _fk3r82
}, _fk3r202 = {
    displayName: "小時",
    relativeTime: _fk3r83
}, _fk3r203 = {
    displayName: "分鐘",
    relativeTime: _fk3r84
}, _fk3r204 = [ "提斯利月", "瑪西班月", "基斯流月", "提別月", "細罷特月", "亞達月 I", "亞達月", "尼散月", "以珥月", "西彎月", "搭模斯月", "埃波月", "以祿月" ], _fk3r205 = [ "制檀邏月", "吠舍佉月", "逝瑟吒月", "頞沙荼月", "室羅伐拏月", "婆羅鉢陀月", "頞涇縛庚闍月", "迦剌底迦月", "末伽始羅月", "報沙月", "磨祛月", "頗勒窶拏月" ], _fk3r206 = {
    abbreviated: _fk3r1,
    narrow: [ "1", "2", "3", "4" ],
    wide: _fk3r5
}, _fk3r207 = {
    displayName: "秒",
    relative: [ "現在" ],
    relativeTime: _fk3r75
}, _fk3r208 = [ "穆哈蘭姆月", "色法爾月", "賴比月 I", "賴比月 II", "主馬達月 I", "主馬達月 II", "賴哲卜月", "舍爾邦月", "賴買丹月", "閃瓦魯月", "都爾喀爾德月", "都爾黑哲月" ], _fk3r209 = {
    displayName: "年",
    relative: _fk3r6,
    relativeTime: _fk3r64
}, _fk3r210 = {
    displayName: "季",
    relative: _fk3r7,
    relativeTime: _fk3r65
}, _fk3r211 = {
    displayName: "年",
    relative: _fk3r6,
    relativeTime: _fk3r71
}, _fk3r212 = {
    displayName: "季",
    relative: _fk3r7,
    relativeTime: _fk3r72
}, _fk3r213 = {
    displayName: "月",
    relative: _fk3r8,
    relativeTime: _fk3r73
}, _fk3r214 = {
    displayName: "季",
    relative: _fk3r13,
    relativeTime: _fk3r72
}, _fk3r215 = {
    midnight: "午夜",
    morning1: "清晨",
    morning2: "早上",
    afternoon1: "中午",
    afternoon2: "下午",
    evening1: "晚上",
    night1: "凌晨",
    am: "上午",
    pm: "下午"
}, _fk3r216 = {
    morning1: "清晨",
    morning2: "早上",
    afternoon1: "中午",
    afternoon2: "下午",
    evening1: "晚上",
    night1: "凌晨",
    midnight: "午夜",
    am: "上午",
    pm: "下午"
}, _fk3r217 = {
    displayName: "月",
    relative: _fk3r14,
    relativeTime: _fk3r82
}, _fk3r218 = {
    displayName: "星期",
    relative: _fk3r16,
    relativeTime: _fk3r81
}, _fk3r219 = {
    displayName: "日",
    relative: _fk3r54,
    relativeTime: _fk3r67
}, _fk3r220 = {
    displayName: "日",
    relative: _fk3r54,
    relativeTime: _fk3r74
}, _fk3r221 = {
    abbreviated: _fk3r42,
    narrow: _fk3r26,
    wide: _fk3r62,
    "short": _fk3r26
}, _fk3r222 = {
    format: _fk3r187,
    numeric: {
        all: {
            leap: "閏{0}"
        }
    },
    standAlone: _fk3r187
}, _fk3r223 = {
    abbreviated: _fk3r94,
    narrow: _fk3r94,
    wide: _fk3r94
}, _fk3r224 = {
    abbreviated: _fk3r95,
    narrow: _fk3r95,
    wide: _fk3r95
}, _fk3r225 = {
    format: _fk3r223
}, _fk3r226 = {
    format: _fk3r224
}, _fk3r227 = {
    format: _fk3r206,
    standAlone: _fk3r206
}, _fk3r228 = {
    abbreviated: _fk3r171,
    narrow: _fk3r88,
    wide: _fk3r171
}, _fk3r229 = {
    abbreviated: _fk3r173,
    narrow: _fk3r91,
    wide: _fk3r173
}, _fk3r230 = {
    "1000": {
        other: "0K"
    },
    "10000": {
        other: "00K"
    },
    "100000": {
        other: "000K"
    },
    "1000000": {
        other: "0M"
    },
    "10000000": {
        other: "00M"
    },
    "100000000": {
        other: "000M"
    },
    "1000000000": {
        other: "0B"
    },
    "10000000000": {
        other: "00B"
    },
    "100000000000": {
        other: "000B"
    },
    "1000000000000": {
        other: "0T"
    },
    "10000000000000": {
        other: "00T"
    },
    "100000000000000": {
        other: "000T"
    }
}, _fk3r231 = {
    "1000": {
        other: "0"
    },
    "10000": {
        other: "0萬"
    },
    "100000": {
        other: "00萬"
    },
    "1000000": {
        other: "000萬"
    },
    "10000000": {
        other: "0000萬"
    },
    "100000000": {
        other: "0億"
    },
    "1000000000": {
        other: "00億"
    },
    "10000000000": {
        other: "000億"
    },
    "100000000000": {
        other: "0000億"
    },
    "1000000000000": {
        other: "0兆"
    },
    "10000000000000": {
        other: "00兆"
    },
    "100000000000000": {
        other: "000兆"
    }
}, _fk3r232 = {
    abbreviated: _fk3r193,
    narrow: _fk3r96,
    wide: _fk3r193
}, _fk3r233 = {
    "1000": {
        other: "¤0K"
    },
    "10000": {
        other: "¤00K"
    },
    "100000": {
        other: "¤000K"
    },
    "1000000": {
        other: "¤0M"
    },
    "10000000": {
        other: "¤00M"
    },
    "100000000": {
        other: "¤000M"
    },
    "1000000000": {
        other: "¤0B"
    },
    "10000000000": {
        other: "¤00B"
    },
    "100000000000": {
        other: "¤000B"
    },
    "1000000000000": {
        other: "¤0T"
    },
    "10000000000000": {
        other: "¤00T"
    },
    "100000000000000": {
        other: "¤000T"
    }
}, _fk3r234 = {
    abbreviated: _fk3r204,
    narrow: _fk3r96,
    wide: _fk3r204
}, _fk3r235 = {
    abbreviated: _fk3r205,
    narrow: _fk3r91,
    wide: _fk3r205
}, _fk3r236 = {
    abbreviated: _fk3r208,
    narrow: _fk3r91,
    wide: _fk3r208
}, _fk3r237 = [ undefined, "甲子", "乙丑", "丙寅", "丁卯", "戊辰", "己巳", "庚午", "辛未", "壬申", "癸酉", "甲戌", "乙亥", "丙子", "丁丑", "戊寅", "己卯", "庚辰", "辛巳", "壬午", "癸未", "甲申", "乙酉", "丙戌", "丁亥", "戊子", "己丑", "庚寅", "辛卯", "壬辰", "癸巳", "甲午", "乙未", "丙申", "丁酉", "戊戌", "己亥", "庚子", "辛丑", "壬寅", "癸卯", "甲辰", "乙巳", "丙午", "丁未", "戊申", "己酉", "庚戌", "辛亥", "壬子", "癸丑", "甲寅", "乙卯", "丙辰", "丁巳", "戊午", "己未", "庚申", "辛酉", "壬戌" ], _fk3r238 = {
    fullDate: "Gy年M月d日EEEE",
    longDate: "Gy年M月d日",
    mediumDate: "Gy年M月d日",
    shortDate: "Gy/M/d",
    fullTime: "ah:mm:ss [zzzz]",
    longTime: "ah:mm:ss [z]",
    mediumTime: "ah:mm:ss",
    shortTime: "ah:mm",
    shortDateTime: "Gy/M/d ah:mm",
    mediumDateTime: "Gy年M月d日 ah:mm:ss",
    longDateTime: "Gy年M月d日 ah:mm:ss [z]",
    fullDateTime: "Gy年M月d日EEEE ah:mm:ss [zzzz]"
}, _fk3r239 = {
    basic: _fk3r238,
    cldr: P.calendars.buddhist.dateFormats
}, _fk3r240 = {
    format: _fk3r221,
    standAlone: _fk3r221
}, _fk3r241 = {
    abbreviated: _fk3r215,
    narrow: _fk3r215,
    wide: _fk3r215
}, _fk3r242 = {
    abbreviated: _fk3r216,
    narrow: _fk3r216,
    wide: _fk3r216
}, _fk3r243 = {
    format: _fk3r228,
    standAlone: _fk3r228
}, _fk3r244 = {
    format: _fk3r229,
    standAlone: _fk3r229
}, _fk3r245 = {
    format: _fk3r232,
    standAlone: _fk3r232
}, _fk3r246 = {
    Ed: "d日E",
    Gy: "Gy年",
    GyMMM: "Gy年M月",
    GyMMMd: "Gy年M月d日",
    GyMMMEd: "Gy年M月d日E",
    Md: "d/M",
    MEd: "E, d/M",
    MMMEd: "M月d日E",
    y: "Gy年",
    yyyy: "Gy年",
    yyyyM: "Gy/M",
    yyyyMd: "Gy/M/d",
    yyyyMEd: "Gy/M/dE",
    yyyyMMM: "Gy年M月",
    yyyyMMMd: "Gy年M月d日",
    yyyyMMMEd: "Gy年M月d日E",
    yyyyMMMM: "Gy年M月",
    yyyyQQQ: "Gy年QQQ",
    yyyyQQQQ: "Gy年QQQQ",
    d: "d日",
    E: "ccc",
    h: "ah時",
    H: "H時",
    hm: "ah:mm",
    Hm: "H:mm",
    hms: "ah:mm:ss",
    Hms: "H:mm:ss",
    M: "M月",
    MMM: "LLL",
    MMMd: "M月d日",
    MMMMd: "M月d日",
    ms: "mm:ss",
    Ehm: "E h:mm a",
    EHm: "E HH:mm",
    Ehms: "E h:mm:ss a",
    EHms: "E HH:mm:ss"
}, _fk3r247 = {
    "long": _fk3r231,
    "short": _fk3r230,
    "default": "#,##0.###"
}, _fk3r248 = {
    d: "d日",
    Ed: "d日E",
    Gy: "rU年",
    GyMMM: "rU年MMM",
    GyMMMd: "r年MMMd",
    GyMMMEd: "rU年MMMdE",
    M: "MMM",
    Md: "M/d",
    MEd: "M/dE",
    MMMd: "MMMd日",
    MMMEd: "MMMd日E",
    MMMMd: "MMMMd日",
    UM: "U年MMM",
    UMd: "U年MMMd",
    UMMM: "U年MMM",
    UMMMd: "U年MMMd",
    y: "rU年",
    yMd: "r年MMMd",
    yyyy: "rU年",
    yyyyM: "rU年MMM",
    yyyyMd: "r年MMMd",
    yyyyMEd: "rU年MMMd，E",
    yyyyMMM: "rU年MMM",
    yyyyMMMd: "r年MMMd",
    yyyyMMMEd: "rU年MMMdE",
    yyyyMMMM: "rU年MMMM",
    yyyyQQQ: "rU年QQQQ",
    yyyyQQQQ: "rU年QQQQ",
    E: "ccc",
    h: "h a",
    H: "HH",
    hm: "h:mm a",
    Hm: "HH:mm",
    hms: "h:mm:ss a",
    Hms: "HH:mm:ss",
    MMM: "LLL",
    ms: "mm:ss"
}, _fk3r249 = {
    currencyMatch: /[^\u0024+<->\u005E`\u007C~¢-¦¨©¬®-±´¸×÷˂-˅˒-˟˥-˫˭˯-˿͵΄΅϶҂֏؆-؈؋؎؏۞۩۽۾߶৲৳৺৻૱୰௳-௺౿൹฿༁-༃༓༕-༗༚-༟༴༶༸྾-࿅࿇-࿌࿎࿏࿕-࿘႞႟᎐-᎙៛᥀᧞-᧿᭡-᭪᭴-᭼᾽᾿-῁῍-῏῝-῟῭-`´῾⁄⁒⁺-⁼₊-₌₠-₹℀℁℃-℆℈℉℔№-℘℞-℣℥℧℩℮℺℻⅀-⅄⅊-⅍⅏←-⌨⌫-⏳␀-␦⑀-⑊⒜-ⓩ─-⛿✁-❧➔-⟄⟇-⟥⟰-⦂⦙-⧗⧜-⧻⧾-⭌⭐-⭙⳥-⳪⺀-⺙⺛-⻳⼀-⿕⿰-⿻〄〒〓〠〶〷〾〿゛゜㆐㆑㆖-㆟㇀-㇣㈀-㈞㈪-㉇㉐㉠-㉿㊊-㊰㋀-㋾㌀-㏿䷀-䷿꒐-꓆꜀-꜖꜠꜡꞉꞊꠨-꠫꠶-꠹꩷-꩹﬩﮲-﯁﷼﷽﹢﹤-﹦﹩＄＋＜-＞＾｀｜～￠-￦￨-￮￼�]/,
    surroundingMatch: /[0-9²³¹¼-¾٠-٩۰-۹߀-߉०-९০-৯৴-৹੦-੯૦-૯୦-୯୲-୷௦-௲౦-౯౸-౾೦-೯൦-൵๐-๙໐-໙༠-༳၀-၉႐-႙፩-፼ᛮ-ᛰ០-៩៰-៹᠐-᠙᥆-᥏᧐-᧚᪀-᪉᪐-᪙᭐-᭙᮰-᮹᱀-᱉᱐-᱙⁰⁴-⁹₀-₉⅐-ↂↅ-↉①-⒛⓪-⓿❶-➓⳽〇〡-〩〸-〺㆒-㆕㈠-㈩㉈-㉏㉑-㉟㊀-㊉㊱-㊿꘠-꘩ꛦ-ꛯ꠰-꠵꣐-꣙꤀-꤉꧐-꧙꩐-꩙꯰-꯹０-９]/,
    insertBetween: " "
}, _fk3r250 = {
    format: _fk3r236,
    standAlone: _fk3r236
}, _fk3r251 = {
    format: _fk3r241,
    standAlone: _fk3r242
}, _fk3r252 = {
    basic: _fk3r238,
    cldr: _fk3r246
}, _fk3r253 = {
    d: {
        d: "d日至d日"
    },
    h: _fk3r4,
    hm: _fk3r69,
    hmv: _fk3r100,
    Hmv: _fk3r53,
    hv: _fk3r38,
    Hv: {
        H: "HH–HH [v]"
    },
    M: {
        M: "MMM至MMM"
    },
    Md: _fk3r9,
    MEd: _fk3r27,
    MMM: {
        M: "LLL至LLL"
    },
    MMMd: _fk3r28,
    MMMEd: _fk3r40,
    MMMM: {
        M: "LLLL至LLLL"
    },
    y: {
        y: "rU至rU"
    },
    yM: _fk3r10,
    yMd: _fk3r85,
    yMEd: _fk3r93,
    yMMM: _fk3r41,
    yMMMd: _fk3r78,
    yMMMEd: _fk3r99,
    yMMMM: _fk3r44,
    H: {
        H: "HH–HH"
    },
    Hm: _fk3r39
}, _fk3r254 = {
    Md: _fk3r24,
    MEd: _fk3r52,
    y: {
        y: "Gy年至y年"
    },
    yM: _fk3r11,
    yMd: _fk3r89,
    yMEd: _fk3r97,
    yMMM: _fk3r25,
    yMMMd: _fk3r90,
    yMMMEd: _fk3r98,
    yMMMM: _fk3r25,
    d: {
        d: "d日至d日"
    },
    h: _fk3r4,
    H: {
        H: "HH–HH"
    },
    hm: _fk3r69,
    Hm: _fk3r39,
    hmv: _fk3r100,
    Hmv: _fk3r53,
    hv: _fk3r38,
    Hv: {
        H: "HH–HH [v]"
    },
    M: {
        M: "M月至M月"
    },
    MMM: {
        M: "LLL至LLL"
    },
    MMMd: _fk3r12,
    MMMEd: _fk3r29,
    MMMM: {
        M: "LLLL至LLLL"
    }
}, _fk3r255 = {
    abbreviated: _fk3r237,
    narrow: _fk3r237,
    wide: _fk3r237
}, _fk3r256 = {
    format: _fk3r255
}, _fk3r257 = {
    beforeCurrency: _fk3r249,
    afterCurrency: _fk3r249
}, _fk3r258 = [ "大化", "白雉", "白鳳", "朱鳥", "大寶", "慶雲", "和銅", "靈龜", "養老", "神龜", "天平", "天平感寶", "天平勝寶", "天平寶字", "天平神護", "神護景雲", "寶龜", "天應", "延曆", "大同", "弘仁", "天長", "承和", "嘉祥", "仁壽", "齊衡", "天安", "貞觀", "元慶", "仁和", "寬平", "昌泰", "延喜", "延長", "承平", "天慶", "天曆", "天德", "應和", "康保", "安和", "天祿", "天延", "貞元", "天元", "永觀", "寬和", "永延", "永祚", "正曆", "長德", "長保", "寬弘", "長和", "寬仁", "治安", "萬壽", "長元", "長曆", "長久", "寬德", "永承", "天喜", "康平", "治曆", "延久", "承保", "承曆", "永保", "應德", "寬治", "嘉保", "永長", "承德", "康和", "長治", "嘉承", "天仁", "天永", "永久", "元永", "保安", "天治", "大治", "天承", "長承", "保延", "永治", "康治", "天養", "久安", "仁平", "久壽", "保元", "平治", "永曆", "應保", "長寬", "永萬", "仁安", "嘉應", "承安", "安元", "治承", "養和", "壽永", "元曆", "文治", "建久", "正治", "建仁", "元久", "建永", "承元", "建曆", "建保", "承久", "貞應", "元仁", "嘉祿", "安貞", "寬喜", "貞永", "天福", "文曆", "嘉禎", "曆仁", "延應", "仁治", "寬元", "寶治", "建長", "康元", "正嘉", "正元", "文應", "弘長", "文永", "建治", "弘安", "正應", "永仁", "正安", "乾元", "嘉元", "德治", "延慶", "應長", "正和", "文保", "元應", "元亨", "正中", "嘉曆", "元德", "元弘", "建武", "延元", "興國", "正平", "建德", "文中", "天授", "康曆", "弘和", "元中", "至德", "嘉慶", "康應", "明德", "應永", "正長", "永享", "嘉吉", "文安", "寶德", "享德", "康正", "長祿", "寬正", "文正", "應仁", "文明", "長享", "延德", "明應", "文龜", "永正", "大永", "享祿", "天文", "弘治", "永祿", "元龜", "天正", "文祿", "慶長", "元和", "寬永", "正保", "慶安", "承應", "明曆", "萬治", "寬文", "延寶", "天和", "貞享", "元祿", "寶永", "正德", "享保", "元文", "寬保", "延享", "寬延", "寶曆", "明和", "安永", "天明", "寬政", "享和", "文化", "文政", "天保", "弘化", "嘉永", "安政", "萬延", "文久", "元治", "慶應", "明治", "大正", "昭和", "平成" ], _fk3r259 = {
    "short": _fk3r233,
    "default": "¤#,##0.00",
    other: "{0} {1}",
    currencySpacing: _fk3r257
}, _fk3r260 = {
    scientific: {
        "default": "#E0"
    },
    decimal: _fk3r247,
    currency: _fk3r259,
    percent: {
        "default": "#,##0%"
    }
}, _fk3r261 = {
    dayParts: _fk3r225,
    days: _fk3r256,
    months: _fk3r256,
    years: _fk3r256,
    zodiacs: _fk3r226
}, _fk3r262 = {
    week: _fk3r218,
    "week-short": _fk3r218,
    weekday: {
        displayName: "星期幾"
    },
    "hour-narrow": _fk3r199,
    "minute-narrow": _fk3r196,
    era: {
        displayName: "年代"
    },
    year: _fk3r211,
    "year-short": _fk3r211,
    "year-narrow": _fk3r209,
    quarter: _fk3r214,
    "quarter-short": _fk3r212,
    "quarter-narrow": _fk3r210,
    month: _fk3r217,
    "month-short": _fk3r201,
    "month-narrow": _fk3r213,
    "week-narrow": _fk3r197,
    day: _fk3r220,
    "day-short": _fk3r220,
    "day-narrow": _fk3r219,
    dayperiod: _fk3r2,
    hour: _fk3r202,
    "hour-short": _fk3r202,
    minute: _fk3r203,
    "minute-short": _fk3r203,
    second: _fk3r207,
    "second-short": _fk3r200,
    "second-narrow": _fk3r198,
    zone: {
        displayName: "時區"
    },
    sun: _fk3r55,
    "sun-short": _fk3r55,
    mon: _fk3r56,
    "mon-short": _fk3r56,
    tue: _fk3r57,
    "tue-short": _fk3r57,
    wed: _fk3r58,
    "wed-short": _fk3r58,
    thu: _fk3r59,
    "thu-short": _fk3r59,
    fri: _fk3r60,
    "fri-short": _fk3r60,
    sat: _fk3r61,
    "sat-short": _fk3r61,
    "sun-narrow": _fk3r45,
    "mon-narrow": _fk3r46,
    "tue-narrow": _fk3r47,
    "wed-narrow": _fk3r48,
    "thu-narrow": _fk3r49,
    "fri-narrow": _fk3r50,
    "sat-narrow": _fk3r51
}, _fk3r263 = {
    dateFormats: {
        basic: {},
        cldr: {}
    },
    fields: _fk3r262
}, _fk3r264 = {
    dateFormats: _fk3r239,
    datePartsOrder: "ymd",
    dateIntervalFormats: _fk3r254,
    dateIntervalFallbackFormat: "{0}至{1}",
    dayNames: _fk3r240,
    dayPeriods: _fk3r251,
    monthNames: _fk3r250,
    eraNames: _fk3r43,
    quarterNames: _fk3r227,
    fields: _fk3r262
}, _fk3r265 = {
    dateFormats: _fk3r252,
    datePartsOrder: "ymd",
    dateIntervalFormats: _fk3r254,
    dateIntervalFallbackFormat: "{0}至{1}",
    dayNames: _fk3r240,
    dayPeriods: _fk3r251,
    monthNames: _fk3r245,
    eraNames: _fk3r87,
    quarterNames: _fk3r227,
    fields: _fk3r262
};

inter.id = "zh_hant_mo";

inter.listPatterns = {
    "default": {
        "2": "{0}及{1}",
        end: "{0}及{1}",
        start: "{0}、{1}",
        middle: "{0}、{1}"
    },
    unit: _fk3r113,
    unitNarrow: {
        "2": "{0}{1}",
        start: "{0}{1}",
        middle: "{0}{1}",
        end: "{0}{1}"
    },
    unitShort: _fk3r113
};

inter.unitPatterns = {
    "long": {
        unit: {
            accelerationMeterPerSecondSquared: {
                other: "{0} 米/平方秒"
            },
            angleRevolution: {
                other: "{0} 周"
            },
            areaSquareMeter: {
                other: "{0} 平方米"
            },
            areaSquareCentimeter: {
                other: "{0} 平方厘米"
            },
            areaSquareFoot: {
                other: "{0} 平方呎"
            },
            areaSquareInch: {
                other: "{0} 平方吋"
            },
            consumptionLiterPerKilometer: {
                other: "{0} 公升/公里"
            },
            digitalByte: {
                other: "{0} 位元組"
            },
            digitalBit: {
                other: "{0} 個位元"
            },
            durationCentury: {
                other: "{0} 世紀"
            },
            durationWeek: {
                other: "{0} 星期"
            },
            durationDay: {
                other: "{0} 日"
            },
            durationNanosecond: {
                other: "{0} 納秒"
            },
            energyKilocalorie: {
                other: "{0} 千卡"
            },
            energyFoodcalorie: {
                other: "{0} 卡路里"
            },
            lengthMeter: {
                other: "{0} 米"
            },
            lengthDecimeter: {
                other: "{0} 分米"
            },
            lengthCentimeter: {
                other: "{0} 厘米"
            },
            lengthMillimeter: {
                other: "{0} 毫米"
            },
            lengthNanometer: {
                other: "{0} 納米"
            },
            lengthFoot: {
                other: "{0} 呎"
            },
            lengthInch: {
                other: "{0} 吋"
            },
            massOunce: {
                other: "{0} 安士"
            },
            massOunceTroy: {
                other: "{0} 金衡安士"
            },
            powerMegawatt: {
                other: "{0} 兆瓦"
            },
            powerKilowatt: {
                other: "{0} 千瓦"
            },
            powerMilliwatt: {
                other: "{0} 毫瓦"
            },
            powerHorsepower: {
                other: "{0} 匹"
            },
            pressureHectopascal: {
                other: "{0} 百帕斯卡"
            },
            pressurePoundPerSquareInch: {
                other: "{0} 磅/平方吋"
            },
            pressureInchHg: {
                other: "{0} 英吋汞柱"
            },
            speedMeterPerSecond: {
                other: "{0} 米/秒"
            },
            temperatureKelvin: {
                other: "{0} 開爾文"
            },
            volumeCubicMeter: {
                other: "{0} 立方米"
            },
            volumeCubicCentimeter: {
                other: "{0} 立方厘米"
            },
            volumeCubicFoot: {
                other: "{0} 立方呎"
            },
            volumeCubicInch: {
                other: "{0} 立方吋"
            },
            volumeCentiliter: {
                other: "{0} 厘升"
            },
            volumeCupMetric: {
                other: "{0} 公制量杯"
            },
            volumeAcreFoot: {
                other: "{0} 英畝呎"
            },
            volumeCup: {
                other: "{0} 量杯"
            },
            volumeFluidOunce: {
                other: "{0} 液安士"
            },
            accelerationGForce: {
                other: "{0} G 力"
            },
            angleRadian: {
                other: "{0} 弧度"
            },
            angleDegree: {
                other: "{0} 度"
            },
            angleArcMinute: {
                other: "{0} 角分"
            },
            angleArcSecond: {
                other: "{0} 角秒"
            },
            areaSquareKilometer: {
                other: "{0} 平方公里"
            },
            areaHectare: {
                other: "{0} 公頃"
            },
            areaSquareMile: {
                other: "{0} 平方英里"
            },
            areaAcre: {
                other: "{0} 英畝"
            },
            areaSquareYard: {
                other: "{0} 平方碼"
            },
            concentrKarat: {
                other: "{0} 克拉"
            },
            "consumptionLiterPer-100kilometers": {
                other: "每 100 公里 {0} 公升"
            },
            consumptionMilePerGallon: {
                other: "每加侖 {0} 英里"
            },
            digitalTerabyte: {
                other: "{0} TB"
            },
            digitalTerabit: {
                other: "{0} Tb"
            },
            digitalGigabyte: {
                other: "{0} GB"
            },
            digitalGigabit: {
                other: "{0} Gb"
            },
            digitalMegabyte: {
                other: "{0} MB"
            },
            digitalMegabit: {
                other: "{0} Mb"
            },
            digitalKilobyte: {
                other: "{0} kB"
            },
            digitalKilobit: {
                other: "{0} kb"
            },
            durationYear: {
                other: "{0} 年"
            },
            durationMonth: {
                other: "{0} 個月"
            },
            durationHour: {
                other: "{0} 小時"
            },
            durationMinute: {
                other: "{0} 分鐘"
            },
            durationSecond: {
                other: "{0} 秒"
            },
            durationMillisecond: {
                other: "{0} 毫秒"
            },
            durationMicrosecond: {
                other: "{0} 微秒"
            },
            electricAmpere: {
                other: "{0} 安培"
            },
            electricMilliampere: {
                other: "{0} 毫安培"
            },
            electricOhm: {
                other: "{0} 歐姆"
            },
            electricVolt: {
                other: "{0} 伏特"
            },
            energyCalorie: {
                other: "{0} 卡路里"
            },
            energyKilojoule: {
                other: "{0} 千焦耳"
            },
            energyJoule: {
                other: "{0} 焦耳"
            },
            energyKilowattHour: {
                other: "{0} 千瓦小時"
            },
            frequencyGigahertz: {
                other: "{0} 吉赫"
            },
            frequencyMegahertz: {
                other: "{0} 兆赫"
            },
            frequencyKilohertz: {
                other: "{0} 千赫"
            },
            frequencyHertz: {
                other: "{0} 赫茲"
            },
            lengthKilometer: {
                other: "{0} 公里"
            },
            lengthMicrometer: {
                other: "{0} 微米"
            },
            lengthPicometer: {
                other: "{0} 皮米"
            },
            lengthMile: {
                other: "{0} 英里"
            },
            lengthYard: {
                other: "{0} 碼"
            },
            lengthParsec: {
                other: "{0} 秒差距"
            },
            lengthLightYear: {
                other: "{0} 光年"
            },
            lengthAstronomicalUnit: {
                other: "{0} 天文單位"
            },
            lengthFurlong: {
                other: "{0} 化朗"
            },
            lengthFathom: {
                other: "{0} 英尋"
            },
            lengthNauticalMile: {
                other: "{0} 海里"
            },
            lengthMileScandinavian: _fk3r3,
            lightLux: {
                other: "{0} 勒克斯"
            },
            massMetricTon: {
                other: "{0} 公噸"
            },
            massKilogram: {
                other: "{0} 公斤"
            },
            massGram: {
                other: "{0} 克"
            },
            massMilligram: {
                other: "{0} 毫克"
            },
            massMicrogram: {
                other: "{0} 微克"
            },
            massTon: {
                other: "{0} 英噸"
            },
            massStone: {
                other: "{0} 英石"
            },
            massPound: {
                other: "{0} 磅"
            },
            massCarat: {
                other: "{0} 克拉"
            },
            powerGigawatt: {
                other: "{0} 吉瓦"
            },
            powerWatt: {
                other: "{0} 瓦特"
            },
            pressureMillimeterOfMercury: {
                other: "{0} 毫米汞柱"
            },
            pressureMillibar: {
                other: "{0} 毫巴"
            },
            speedKilometerPerHour: {
                other: "每小時 {0} 公里"
            },
            speedMilePerHour: {
                other: "每小時 {0} 英里"
            },
            speedKnot: {
                other: "{0} 節"
            },
            temperatureGeneric: {
                other: "{0}°"
            },
            temperatureCelsius: {
                other: "攝氏 {0} 度"
            },
            temperatureFahrenheit: {
                other: "華氏 {0} 度"
            },
            volumeCubicKilometer: {
                other: "{0} 立方公里"
            },
            volumeCubicMile: {
                other: "{0} 立方英里"
            },
            volumeCubicYard: {
                other: "{0} 立方碼"
            },
            volumeMegaliter: {
                other: "{0} 兆升"
            },
            volumeHectoliter: {
                other: "{0} 公石"
            },
            volumeLiter: {
                other: "{0} 公升"
            },
            volumeDeciliter: {
                other: "{0} 公合"
            },
            volumeMilliliter: {
                other: "{0} 毫升"
            },
            volumePintMetric: {
                other: "{0} 公制品脫"
            },
            volumeBushel: {
                other: "{0} 蒲式耳"
            },
            volumeGallon: {
                other: "{0} 加侖"
            },
            volumeQuart: {
                other: "{0} 夸脫"
            },
            volumePint: {
                other: "{0} 品脫"
            },
            volumeTablespoon: {
                other: "{0} 湯匙"
            },
            volumeTeaspoon: {
                other: "{0} 茶匙"
            }
        },
        compoundUnit: {
            per: "每{1} {0}"
        }
    },
    "short": {
        unit: {
            accelerationGForce: {
                other: "{0} G"
            },
            accelerationMeterPerSecondSquared: {
                other: "{0} 米每平方秒"
            },
            angleRevolution: {
                other: "{0} 周"
            },
            angleArcMinute: {
                other: "{0} 分"
            },
            angleArcSecond: {
                other: "{0} 秒"
            },
            areaSquareMeter: {
                other: "{0} 平方米"
            },
            areaSquareCentimeter: {
                other: "{0} 平方厘米"
            },
            areaSquareFoot: {
                other: "{0} 平方呎"
            },
            areaSquareInch: {
                other: "{0} 平方吋"
            },
            consumptionLiterPerKilometer: {
                other: "{0} 升每公里"
            },
            "consumptionLiterPer-100kilometers": {
                other: "{0} L/100km"
            },
            consumptionMilePerGallon: {
                other: "{0} 英里每加侖"
            },
            durationDay: {
                other: "{0} 日"
            },
            durationNanosecond: {
                other: "{0} 納秒"
            },
            electricVolt: {
                other: "{0} 伏特"
            },
            energyFoodcalorie: {
                other: "{0} 千卡"
            },
            energyJoule: {
                other: "{0} 焦耳"
            },
            lengthMeter: {
                other: "{0} 米"
            },
            lengthDecimeter: {
                other: "{0} 分米"
            },
            lengthCentimeter: {
                other: "{0} 厘米"
            },
            lengthMillimeter: {
                other: "{0} 毫米"
            },
            lengthNanometer: {
                other: "{0} 納米"
            },
            lengthMile: {
                other: "{0} 哩"
            },
            lengthNauticalMile: {
                other: "{0} 浬"
            },
            massOunce: {
                other: "{0} 安士"
            },
            massOunceTroy: {
                other: "{0} 金衡安士"
            },
            powerMegawatt: {
                other: "{0} 兆瓦"
            },
            pressurePoundPerSquareInch: {
                other: "{0} 磅每平方吋"
            },
            pressureInchHg: {
                other: "{0} 英吋汞柱"
            },
            speedKilometerPerHour: {
                other: "{0} 公里每小時"
            },
            speedMeterPerSecond: {
                other: "{0} 米/秒"
            },
            speedMilePerHour: {
                other: "{0} 英里每小時"
            },
            volumeCubicMeter: {
                other: "{0} 立方米"
            },
            volumeCubicCentimeter: {
                other: "{0} 立方厘米"
            },
            volumeCubicFoot: {
                other: "{0} 立方呎"
            },
            volumeCubicInch: {
                other: "{0} 立方吋"
            },
            volumeCentiliter: {
                other: "{0} 厘升"
            },
            volumeCupMetric: {
                other: "{0} 公制量杯"
            },
            volumeAcreFoot: {
                other: "{0} 英畝呎"
            },
            volumeCup: {
                other: "{0} 量杯"
            },
            volumeFluidOunce: {
                other: "{0} 液安士"
            },
            angleRadian: {
                other: "{0} 弧度"
            },
            angleDegree: {
                other: "{0} 度"
            },
            areaSquareKilometer: {
                other: "{0} 平方公里"
            },
            areaHectare: {
                other: "{0} 公頃"
            },
            areaSquareMile: {
                other: "{0} 平方英里"
            },
            areaAcre: {
                other: "{0} 英畝"
            },
            areaSquareYard: {
                other: "{0} 平方碼"
            },
            concentrKarat: {
                other: "{0} 克拉"
            },
            digitalTerabyte: {
                other: "{0} TB"
            },
            digitalTerabit: {
                other: "{0} Tb"
            },
            digitalGigabyte: {
                other: "{0} GB"
            },
            digitalGigabit: {
                other: "{0} Gb"
            },
            digitalMegabyte: {
                other: "{0} MB"
            },
            digitalMegabit: {
                other: "{0} Mb"
            },
            digitalKilobyte: {
                other: "{0} kB"
            },
            digitalKilobit: {
                other: "{0} kb"
            },
            digitalByte: {
                other: "{0} byte"
            },
            digitalBit: {
                other: "{0} bit"
            },
            durationCentury: {
                other: "{0} 世紀"
            },
            durationYear: {
                other: "{0} 年"
            },
            durationMonth: {
                other: "{0} 個月"
            },
            durationWeek: {
                other: "{0} 週"
            },
            durationHour: {
                other: "{0} 小時"
            },
            durationMinute: {
                other: "{0} 分鐘"
            },
            durationSecond: {
                other: "{0} 秒"
            },
            durationMillisecond: {
                other: "{0} 毫秒"
            },
            durationMicrosecond: {
                other: "{0} 微秒"
            },
            electricAmpere: {
                other: "{0} 安培"
            },
            electricMilliampere: {
                other: "{0} 毫安培"
            },
            electricOhm: {
                other: "{0} 歐姆"
            },
            energyKilocalorie: {
                other: "{0} 千卡"
            },
            energyCalorie: {
                other: "{0} 卡"
            },
            energyKilojoule: {
                other: "{0} 千焦"
            },
            energyKilowattHour: {
                other: "{0} 千瓦小時"
            },
            frequencyGigahertz: {
                other: "{0} 吉赫"
            },
            frequencyMegahertz: {
                other: "{0} 兆赫"
            },
            frequencyKilohertz: {
                other: "{0} 千赫"
            },
            frequencyHertz: {
                other: "{0} 赫茲"
            },
            lengthKilometer: {
                other: "{0} 公里"
            },
            lengthMicrometer: {
                other: "{0} 微米"
            },
            lengthPicometer: {
                other: "{0} 皮米"
            },
            lengthYard: {
                other: "{0} 碼"
            },
            lengthFoot: {
                other: "{0} 呎"
            },
            lengthInch: {
                other: "{0} 吋"
            },
            lengthParsec: {
                other: "{0} 秒差距"
            },
            lengthLightYear: {
                other: "{0} 光年"
            },
            lengthAstronomicalUnit: {
                other: "{0} 天文單位"
            },
            lengthFurlong: {
                other: "{0} 化朗"
            },
            lengthFathom: {
                other: "{0} 英尋"
            },
            lengthMileScandinavian: _fk3r3,
            lightLux: {
                other: "{0} 勒克斯"
            },
            massMetricTon: {
                other: "{0} 公噸"
            },
            massKilogram: {
                other: "{0} 公斤"
            },
            massGram: {
                other: "{0} 克"
            },
            massMilligram: {
                other: "{0} 毫克"
            },
            massMicrogram: {
                other: "{0} 微克"
            },
            massTon: {
                other: "{0} 英噸"
            },
            massStone: {
                other: "{0} 英石"
            },
            massPound: {
                other: "{0} 磅"
            },
            massCarat: {
                other: "{0} 克拉"
            },
            powerGigawatt: {
                other: "{0} 吉瓦"
            },
            powerKilowatt: {
                other: "{0} 千瓦"
            },
            powerWatt: {
                other: "{0} 瓦"
            },
            powerMilliwatt: {
                other: "{0} 毫瓦"
            },
            powerHorsepower: {
                other: "{0} 匹"
            },
            pressureHectopascal: {
                other: "{0} 百帕"
            },
            pressureMillimeterOfMercury: {
                other: "{0} 毫米汞柱"
            },
            pressureMillibar: {
                other: "{0} 毫巴"
            },
            speedKnot: {
                other: "{0} 節"
            },
            temperatureGeneric: {
                other: "{0}°"
            },
            temperatureCelsius: {
                other: "{0}°C"
            },
            temperatureFahrenheit: {
                other: "{0}°F"
            },
            temperatureKelvin: {
                other: "{0} K"
            },
            volumeCubicKilometer: {
                other: "{0} 立方公里"
            },
            volumeCubicMile: {
                other: "{0} 立方英里"
            },
            volumeCubicYard: {
                other: "{0} 立方碼"
            },
            volumeMegaliter: {
                other: "{0} 兆升"
            },
            volumeHectoliter: {
                other: "{0} 公石"
            },
            volumeLiter: {
                other: "{0} 升"
            },
            volumeDeciliter: {
                other: "{0} 公合"
            },
            volumeMilliliter: {
                other: "{0} 毫升"
            },
            volumePintMetric: {
                other: "{0} 公制品脫"
            },
            volumeBushel: {
                other: "{0} 蒲式耳"
            },
            volumeGallon: {
                other: "{0} 加侖"
            },
            volumeQuart: {
                other: "{0} 夸脫"
            },
            volumePint: {
                other: "{0} 品脫"
            },
            volumeTablespoon: {
                other: "{0} 湯匙"
            },
            volumeTeaspoon: {
                other: "{0} 茶匙"
            },
            concentrMilligramPerDeciliter: {
                other: "{0} mg/dL"
            },
            concentrMillimolePerLiter: {
                other: "{0} mmol/L"
            },
            concentrPartPerMillion: {
                other: "{0} ppm"
            },
            consumptionMilePerGallonImperial: {
                other: "{0} mpg Imp."
            },
            volumeGallonImperial: {
                other: "{0} gal Imp."
            }
        },
        compoundUnit: {
            per: "{0}/{1}"
        }
    },
    narrow: {
        unit: {
            areaSquareMile: {
                other: "{0}mi²"
            },
            areaSquareFoot: {
                other: "{0}ft²"
            },
            "consumptionLiterPer-100kilometers": {
                other: "{0}L/100km"
            },
            durationMonth: {
                other: "{0}個月"
            },
            durationDay: {
                other: "{0}日"
            },
            durationHour: {
                other: "{0}小時"
            },
            lengthMeter: {
                other: "{0}米"
            },
            lengthCentimeter: {
                other: "{0}厘米"
            },
            lengthMillimeter: {
                other: "{0}毫米"
            },
            massOunce: {
                other: "{0} 安士"
            },
            pressureInchHg: {
                other: "{0}″ Hg"
            },
            speedKilometerPerHour: {
                other: "{0}kph"
            },
            speedMeterPerSecond: {
                other: "{0}m/s"
            },
            speedMilePerHour: {
                other: "{0}mph"
            },
            volumeCubicMile: {
                other: "{0}mi³"
            },
            accelerationGForce: {
                other: "{0}G"
            },
            accelerationMeterPerSecondSquared: {
                other: "{0}m/s²"
            },
            angleRadian: {
                other: "{0}弧度"
            },
            angleDegree: {
                other: "{0}度"
            },
            angleArcMinute: {
                other: "{0}角分"
            },
            angleArcSecond: {
                other: "{0}角秒"
            },
            areaSquareKilometer: {
                other: "{0}km²"
            },
            areaHectare: {
                other: "{0}公頃"
            },
            areaSquareMeter: {
                other: "{0}m²"
            },
            areaSquareCentimeter: {
                other: "{0}cm²"
            },
            areaAcre: {
                other: "{0}英畝"
            },
            areaSquareYard: {
                other: "{0}yd²"
            },
            areaSquareInch: {
                other: "{0}in²"
            },
            concentrKarat: {
                other: "{0}kt"
            },
            consumptionLiterPerKilometer: {
                other: "{0}L/km"
            },
            consumptionMilePerGallon: {
                other: "{0}mpg"
            },
            digitalTerabyte: {
                other: "{0}TB"
            },
            digitalTerabit: {
                other: "{0}Tb"
            },
            digitalGigabyte: {
                other: "{0}GB"
            },
            digitalGigabit: {
                other: "{0}Gb"
            },
            digitalMegabyte: {
                other: "{0}MB"
            },
            digitalMegabit: {
                other: "{0}Mb"
            },
            digitalKilobyte: {
                other: "{0}kB"
            },
            digitalKilobit: {
                other: "{0}kb"
            },
            digitalByte: {
                other: "{0}byte"
            },
            digitalBit: {
                other: "{0}bit"
            },
            durationYear: {
                other: "{0}年"
            },
            durationWeek: {
                other: "{0}週"
            },
            durationMinute: {
                other: "{0}分"
            },
            durationSecond: {
                other: "{0}秒"
            },
            durationMillisecond: {
                other: "{0}毫秒"
            },
            durationMicrosecond: {
                other: "{0}μs"
            },
            durationNanosecond: {
                other: "{0}ns"
            },
            electricAmpere: {
                other: "{0}A"
            },
            electricMilliampere: {
                other: "{0}mA"
            },
            electricOhm: {
                other: "{0}Ω"
            },
            electricVolt: {
                other: "{0}V"
            },
            energyKilocalorie: {
                other: "{0}千卡"
            },
            energyCalorie: {
                other: "{0}卡"
            },
            energyFoodcalorie: {
                other: "{0}大卡"
            },
            energyKilojoule: {
                other: "{0}千焦耳"
            },
            energyJoule: {
                other: "{0}焦"
            },
            energyKilowattHour: {
                other: "{0}kWh"
            },
            frequencyGigahertz: {
                other: "{0}GHz"
            },
            frequencyMegahertz: {
                other: "{0}MHz"
            },
            frequencyKilohertz: {
                other: "{0}kHz"
            },
            frequencyHertz: {
                other: "{0}Hz"
            },
            lengthKilometer: {
                other: "{0}公里"
            },
            lengthDecimeter: {
                other: "{0}dm"
            },
            lengthMicrometer: {
                other: "{0}µm"
            },
            lengthNanometer: {
                other: "{0}nm"
            },
            lengthPicometer: {
                other: "{0}皮米"
            },
            lengthMile: {
                other: "{0}英里"
            },
            lengthYard: {
                other: "{0}碼"
            },
            lengthFoot: {
                other: "{0}呎"
            },
            lengthInch: {
                other: "{0}吋"
            },
            lengthParsec: {
                other: "{0}pc"
            },
            lengthLightYear: {
                other: "{0}光年"
            },
            lengthAstronomicalUnit: {
                other: "{0}au"
            },
            lengthFurlong: {
                other: "{0}化朗"
            },
            lengthFathom: {
                other: "{0}fm"
            },
            lengthNauticalMile: {
                other: "{0}nmi"
            },
            lightLux: {
                other: "{0}lx"
            },
            massMetricTon: {
                other: "{0}t"
            },
            massKilogram: {
                other: "{0}公斤"
            },
            massGram: {
                other: "{0}克"
            },
            massMilligram: {
                other: "{0}mg"
            },
            massMicrogram: {
                other: "{0}µg"
            },
            massTon: {
                other: "{0}tn"
            },
            massStone: {
                other: "{0}st"
            },
            massPound: {
                other: "{0}磅"
            },
            massOunceTroy: {
                other: "{0}oz-t"
            },
            massCarat: {
                other: "{0}CD"
            },
            powerGigawatt: {
                other: "{0}GW"
            },
            powerMegawatt: {
                other: "{0}MW"
            },
            powerKilowatt: {
                other: "{0}千瓦"
            },
            powerWatt: {
                other: "{0}瓦特"
            },
            powerMilliwatt: {
                other: "{0}mW"
            },
            powerHorsepower: {
                other: "{0}匹"
            },
            pressureHectopascal: {
                other: "{0}百帕"
            },
            pressureMillimeterOfMercury: {
                other: "{0}mmHg"
            },
            pressurePoundPerSquareInch: {
                other: "{0}psi"
            },
            pressureMillibar: {
                other: "{0}毫巴"
            },
            temperatureCelsius: {
                other: "{0}°C"
            },
            temperatureFahrenheit: {
                other: "{0}°F"
            },
            temperatureKelvin: {
                other: "{0}°K"
            },
            volumeCubicKilometer: {
                other: "{0}km³"
            },
            volumeCubicMeter: {
                other: "{0}m³"
            },
            volumeCubicCentimeter: {
                other: "{0}cm³"
            },
            volumeCubicYard: {
                other: "{0}yd³"
            },
            volumeCubicFoot: {
                other: "{0}ft³"
            },
            volumeCubicInch: {
                other: "{0}in³"
            },
            volumeMegaliter: {
                other: "{0}ML"
            },
            volumeHectoliter: {
                other: "{0}hL"
            },
            volumeLiter: {
                other: "{0}升"
            },
            volumeDeciliter: {
                other: "{0}dL"
            },
            volumeCentiliter: {
                other: "{0}cL"
            },
            volumeMilliliter: {
                other: "{0}mL"
            },
            volumeAcreFoot: {
                other: "{0}ac-ft"
            },
            volumeBushel: {
                other: "{0}bu"
            },
            volumeGallon: {
                other: "{0}gal"
            },
            volumeQuart: {
                other: "{0}qt"
            },
            volumePint: {
                other: "{0}pt"
            },
            volumeCup: {
                other: "{0}c"
            },
            volumeFluidOunce: {
                other: "{0}fl-oz"
            },
            volumeTablespoon: {
                other: "{0}匙"
            },
            volumeTeaspoon: {
                other: "{0}tsp"
            }
        },
        compoundUnit: {
            per: "{0}/{1}"
        }
    }
};

inter.timeZoneFormats = {
    hour: [ "+HH:mm", "-HH:mm" ],
    gmt: "GMT{0}",
    gmtZero: "GMT",
    region: "{0}夏令時間",
    fallback: "{1}（{0}）",
    regions: {
        daylight: "{0}夏令時間",
        standard: "{0}標準時間"
    }
};

inter.characters = {
    exemplar: P.characters.exemplar,
    ellipsis: {
        "final": "{0}⋯",
        initial: "⋯{0}",
        medial: "{0}⋯{1}",
        "word-final": "{0}⋯",
        "word-initial": "⋯{0}",
        "word-medial": "{0}⋯{1}"
    },
    moreInformation: "？"
};

inter.numbers = {
    ahom: P.numbers.ahom,
    arab: {
        symbols: {
            decimal: "٫",
            group: "٬",
            list: "؛",
            percentSign: "٪",
            plusSign: "‏+",
            minusSign: "‏-",
            exponential: "اس",
            superscriptingExponent: "×",
            perMille: "؉",
            infinity: "∞",
            nan: "NaN",
            timeSeparator: ":"
        },
        formats: _fk3r260,
        digits: [ "٠", "١", "٢", "٣", "٤", "٥", "٦", "٧", "٨", "٩" ]
    },
    arabext: {
        symbols: {
            decimal: "٫",
            group: "٬",
            list: "؛",
            percentSign: "٪",
            plusSign: "‎+‎",
            minusSign: "‎-‎",
            exponential: "×۱۰^",
            superscriptingExponent: "×",
            perMille: "؉",
            infinity: "∞",
            nan: "NaN",
            timeSeparator: "٫"
        },
        formats: _fk3r260,
        digits: [ "۰", "۱", "۲", "۳", "۴", "۵", "۶", "۷", "۸", "۹" ]
    },
    armn: {
        symbols: P.numbers.ahom.symbols,
        digits: "renderArmenianUpper"
    },
    armnlow: {
        symbols: P.numbers.ahom.symbols,
        digits: "renderArmenianLower"
    },
    bali: {
        symbols: P.numbers.ahom.symbols,
        formats: _fk3r260,
        digits: [ "᭐", "᭑", "᭒", "᭓", "᭔", "᭕", "᭖", "᭗", "᭘", "᭙" ]
    },
    beng: {
        symbols: P.numbers.ahom.symbols,
        formats: _fk3r260,
        digits: [ "০", "১", "২", "৩", "৪", "৫", "৬", "৭", "৮", "৯" ]
    },
    brah: {
        symbols: P.numbers.ahom.symbols,
        formats: _fk3r260,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    cakm: {
        symbols: P.numbers.ahom.symbols,
        formats: _fk3r260,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    cham: {
        symbols: P.numbers.ahom.symbols,
        formats: _fk3r260,
        digits: [ "꩐", "꩑", "꩒", "꩓", "꩔", "꩕", "꩖", "꩗", "꩘", "꩙" ]
    },
    cyrl: {
        symbols: P.numbers.ahom.symbols,
        digits: "renderCyrillicLower"
    },
    deva: {
        symbols: P.numbers.ahom.symbols,
        formats: _fk3r260,
        digits: [ "०", "१", "२", "३", "४", "५", "६", "७", "८", "९" ]
    },
    ethi: {
        symbols: P.numbers.ahom.symbols,
        digits: "renderEthiopic"
    },
    finance: _fk3r37,
    fullwide: {
        symbols: P.numbers.ahom.symbols,
        formats: _fk3r260,
        digits: [ "０", "１", "２", "３", "４", "５", "６", "７", "８", "９" ]
    },
    geor: {
        symbols: P.numbers.ahom.symbols,
        digits: "renderGeorgian"
    },
    grek: {
        symbols: P.numbers.ahom.symbols,
        digits: "renderGreekUpper"
    },
    greklow: {
        symbols: P.numbers.ahom.symbols,
        digits: "renderGreekLower"
    },
    gujr: {
        symbols: P.numbers.ahom.symbols,
        formats: _fk3r260,
        digits: [ "૦", "૧", "૨", "૩", "૪", "૫", "૬", "૭", "૮", "૯" ]
    },
    guru: {
        symbols: P.numbers.ahom.symbols,
        formats: _fk3r260,
        digits: [ "੦", "੧", "੨", "੩", "੪", "੫", "੬", "੭", "੮", "੯" ]
    },
    hanidays: {
        symbols: P.numbers.ahom.symbols,
        digits: "renderSpelloutNumberingDays"
    },
    hanidec: {
        symbols: P.numbers.ahom.symbols,
        formats: _fk3r260,
        digits: [ "〇", "一", "二", "三", "四", "五", "六", "七", "八", "九" ]
    },
    hans: _fk3r172,
    hansfin: _fk3r195,
    hant: _fk3r172,
    hantfin: _fk3r195,
    hebr: {
        symbols: P.numbers.ahom.symbols,
        digits: "renderHebrew"
    },
    hmng: {
        symbols: P.numbers.ahom.symbols,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    java: {
        symbols: P.numbers.ahom.symbols,
        formats: _fk3r260,
        digits: [ "꧐", "꧑", "꧒", "꧓", "꧔", "꧕", "꧖", "꧗", "꧘", "꧙" ]
    },
    jpan: _fk3r172,
    jpanfin: _fk3r195,
    kali: {
        symbols: P.numbers.ahom.symbols,
        formats: _fk3r260,
        digits: [ "꤀", "꤁", "꤂", "꤃", "꤄", "꤅", "꤆", "꤇", "꤈", "꤉" ]
    },
    khmr: {
        symbols: P.numbers.ahom.symbols,
        formats: _fk3r260,
        digits: [ "០", "១", "២", "៣", "៤", "៥", "៦", "៧", "៨", "៩" ]
    },
    knda: {
        symbols: P.numbers.ahom.symbols,
        formats: _fk3r260,
        digits: [ "೦", "೧", "೨", "೩", "೪", "೫", "೬", "೭", "೮", "೯" ]
    },
    lana: {
        symbols: P.numbers.ahom.symbols,
        formats: _fk3r260,
        digits: [ "᪀", "᪁", "᪂", "᪃", "᪄", "᪅", "᪆", "᪇", "᪈", "᪉" ]
    },
    lanatham: {
        symbols: P.numbers.ahom.symbols,
        formats: _fk3r260,
        digits: [ "᪐", "᪑", "᪒", "᪓", "᪔", "᪕", "᪖", "᪗", "᪘", "᪙" ]
    },
    laoo: {
        symbols: P.numbers.ahom.symbols,
        formats: _fk3r260,
        digits: [ "໐", "໑", "໒", "໓", "໔", "໕", "໖", "໗", "໘", "໙" ]
    },
    latn: {
        symbols: P.numbers.ahom.symbols,
        formats: _fk3r260,
        digits: [ "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" ]
    },
    lepc: {
        symbols: P.numbers.ahom.symbols,
        formats: _fk3r260,
        digits: [ "᱀", "᱁", "᱂", "᱃", "᱄", "᱅", "᱆", "᱇", "᱈", "᱉" ]
    },
    limb: {
        symbols: P.numbers.ahom.symbols,
        formats: _fk3r260,
        digits: [ "᥆", "᥇", "᥈", "᥉", "᥊", "᥋", "᥌", "᥍", "᥎", "᥏" ]
    },
    mathbold: {
        symbols: P.numbers.ahom.symbols,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathdbl: {
        symbols: P.numbers.ahom.symbols,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathmono: {
        symbols: P.numbers.ahom.symbols,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathsanb: {
        symbols: P.numbers.ahom.symbols,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathsans: {
        symbols: P.numbers.ahom.symbols,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mlym: {
        symbols: P.numbers.ahom.symbols,
        formats: _fk3r260,
        digits: [ "൦", "൧", "൨", "൩", "൪", "൫", "൬", "൭", "൮", "൯" ]
    },
    modi: {
        symbols: P.numbers.ahom.symbols,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mong: {
        symbols: P.numbers.ahom.symbols,
        formats: _fk3r260,
        digits: [ "᠐", "᠑", "᠒", "᠓", "᠔", "᠕", "᠖", "᠗", "᠘", "᠙" ]
    },
    mroo: {
        symbols: P.numbers.ahom.symbols,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mtei: {
        symbols: P.numbers.ahom.symbols,
        formats: _fk3r260,
        digits: [ "꯰", "꯱", "꯲", "꯳", "꯴", "꯵", "꯶", "꯷", "꯸", "꯹" ]
    },
    mymr: {
        symbols: P.numbers.ahom.symbols,
        formats: _fk3r260,
        digits: [ "၀", "၁", "၂", "၃", "၄", "၅", "၆", "၇", "၈", "၉" ]
    },
    mymrshan: {
        symbols: P.numbers.ahom.symbols,
        formats: _fk3r260,
        digits: [ "႐", "႑", "႒", "႓", "႔", "႕", "႖", "႗", "႘", "႙" ]
    },
    mymrtlng: {
        symbols: P.numbers.ahom.symbols,
        digits: [ "꧰", "꧱", "꧲", "꧳", "꧴", "꧵", "꧶", "꧷", "꧸", "꧹" ]
    },
    "native": _fk3r37,
    nkoo: {
        symbols: P.numbers.ahom.symbols,
        formats: _fk3r260,
        digits: [ "߀", "߁", "߂", "߃", "߄", "߅", "߆", "߇", "߈", "߉" ]
    },
    olck: {
        symbols: P.numbers.ahom.symbols,
        formats: _fk3r260,
        digits: [ "᱐", "᱑", "᱒", "᱓", "᱔", "᱕", "᱖", "᱗", "᱘", "᱙" ]
    },
    orya: {
        symbols: P.numbers.ahom.symbols,
        formats: _fk3r260,
        digits: [ "୦", "୧", "୨", "୩", "୪", "୫", "୬", "୭", "୮", "୯" ]
    },
    osma: {
        symbols: P.numbers.ahom.symbols,
        formats: _fk3r260,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    roman: {
        symbols: P.numbers.ahom.symbols,
        digits: "renderRomanUpper"
    },
    romanlow: {
        symbols: P.numbers.ahom.symbols,
        digits: "renderRomanLower"
    },
    saur: {
        symbols: P.numbers.ahom.symbols,
        formats: _fk3r260,
        digits: [ "꣐", "꣑", "꣒", "꣓", "꣔", "꣕", "꣖", "꣗", "꣘", "꣙" ]
    },
    shrd: {
        symbols: P.numbers.ahom.symbols,
        formats: _fk3r260,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    sind: {
        symbols: P.numbers.ahom.symbols,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    sinh: {
        symbols: P.numbers.ahom.symbols,
        digits: [ "෦", "෧", "෨", "෩", "෪", "෫", "෬", "෭", "෮", "෯" ]
    },
    sora: {
        symbols: P.numbers.ahom.symbols,
        formats: _fk3r260,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    sund: {
        symbols: P.numbers.ahom.symbols,
        formats: _fk3r260,
        digits: [ "᮰", "᮱", "᮲", "᮳", "᮴", "᮵", "᮶", "᮷", "᮸", "᮹" ]
    },
    takr: {
        symbols: P.numbers.ahom.symbols,
        formats: _fk3r260,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    talu: {
        symbols: P.numbers.ahom.symbols,
        formats: _fk3r260,
        digits: [ "᧐", "᧑", "᧒", "᧓", "᧔", "᧕", "᧖", "᧗", "᧘", "᧙" ]
    },
    taml: {
        symbols: P.numbers.ahom.symbols,
        digits: "renderTamil"
    },
    tamldec: {
        symbols: P.numbers.ahom.symbols,
        formats: _fk3r260,
        digits: [ "௦", "௧", "௨", "௩", "௪", "௫", "௬", "௭", "௮", "௯" ]
    },
    telu: {
        symbols: P.numbers.ahom.symbols,
        formats: _fk3r260,
        digits: [ "౦", "౧", "౨", "౩", "౪", "౫", "౬", "౭", "౮", "౯" ]
    },
    thai: {
        symbols: P.numbers.ahom.symbols,
        formats: _fk3r260,
        digits: [ "๐", "๑", "๒", "๓", "๔", "๕", "๖", "๗", "๘", "๙" ]
    },
    tirh: {
        symbols: P.numbers.ahom.symbols,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    tibt: {
        symbols: P.numbers.ahom.symbols,
        formats: _fk3r260,
        digits: [ "༠", "༡", "༢", "༣", "༤", "༥", "༦", "༧", "༨", "༩" ]
    },
    traditio: _fk3r37,
    vaii: {
        symbols: P.numbers.ahom.symbols,
        formats: _fk3r260,
        digits: [ "꘠", "꘡", "꘢", "꘣", "꘤", "꘥", "꘦", "꘧", "꘨", "꘩" ]
    },
    wara: {
        symbols: P.numbers.ahom.symbols,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    }
};

inter.calendars = {
    buddhist: {
        dateFormats: {
            basic: _fk3r238,
            cldr: {
                Md: "M-d",
                MEd: "M-d（E）",
                d: "d日",
                Ed: "d日（E）",
                Gy: "Gy年",
                GyMMM: "Gy年M月",
                GyMMMd: "Gy年M月d日",
                GyMMMEd: "Gy年M月d日E",
                M: "M月",
                MMM: "LLL",
                MMMd: "M月d日",
                MMMEd: "M月d日E",
                MMMMd: "M月d日",
                y: "Gy年",
                yyyy: "Gy年",
                yyyyM: "Gy/M",
                yyyyMd: "Gy/M/d",
                yyyyMEd: "Gy/M/d（E）",
                yyyyMMM: "Gy年M月",
                yyyyMMMd: "Gy年M月d日",
                yyyyMMMEd: "Gy年M月d日E",
                yyyyMMMM: "Gy年M月",
                yyyyQQQ: "Gy年QQQ",
                yyyyQQQQ: "Gy年QQQQ",
                E: "ccc",
                h: "ah時",
                H: "H時",
                hm: "ah:mm",
                Hm: "H:mm",
                hms: "ah:mm:ss",
                Hms: "H:mm:ss",
                ms: "mm:ss",
                Ehm: "E h:mm a",
                EHm: "E HH:mm",
                Ehms: "E h:mm:ss a",
                EHms: "E HH:mm:ss"
            }
        },
        datePartsOrder: "ymd",
        dateIntervalFormats: _fk3r254,
        dateIntervalFallbackFormat: "{0}至{1}",
        dayNames: _fk3r240,
        dayPeriods: _fk3r251,
        monthNames: _fk3r244,
        eraNames: {
            wide: [ "佛曆" ],
            abbreviated: [ "佛曆" ]
        },
        quarterNames: _fk3r227,
        fields: _fk3r262
    },
    chinese: {
        dateFormats: {
            basic: {
                fullDate: "U（r）年MMMdEEEE",
                longDate: "U（r）年MMMd",
                mediumDate: "U年MMMd",
                shortDate: "U/M/d",
                fullTime: "ah:mm:ss [zzzz]",
                longTime: "ah:mm:ss [z]",
                mediumTime: "ah:mm:ss",
                shortTime: "ah:mm",
                shortDateTime: "U/M/d ah:mm",
                mediumDateTime: "U年MMMd ah:mm:ss",
                longDateTime: "U（r）年MMMd ah:mm:ss [z]",
                fullDateTime: "U（r）年MMMdEEEE ah:mm:ss [zzzz]"
            },
            cldr: _fk3r248
        },
        datePartsOrder: "md",
        dateIntervalFormats: _fk3r253,
        dateIntervalFallbackFormat: "{0}至{1}",
        dayNames: _fk3r240,
        dayPeriods: _fk3r251,
        cyclicNames: _fk3r261,
        monthNames: _fk3r243,
        monthPatterns: _fk3r222,
        quarterNames: _fk3r227,
        fields: _fk3r262
    },
    coptic: _fk3r265,
    dangi: {
        dateFormats: {
            basic: {
                fullDate: "U年MMMd日EEEE",
                longDate: "U年MMMd日",
                mediumDate: "U年MMMd日",
                shortDate: "U/M/d",
                fullTime: "ah:mm:ss [zzzz]",
                longTime: "ah:mm:ss [z]",
                mediumTime: "ah:mm:ss",
                shortTime: "ah:mm",
                shortDateTime: "U/M/d ah:mm",
                mediumDateTime: "U年MMMd日 ah:mm:ss",
                longDateTime: "U年MMMd日 ah:mm:ss [z]",
                fullDateTime: "U年MMMd日EEEE ah:mm:ss [zzzz]"
            },
            cldr: _fk3r248
        },
        datePartsOrder: "md",
        dateIntervalFormats: _fk3r253,
        dateIntervalFallbackFormat: "{0}至{1}",
        dayNames: _fk3r240,
        dayPeriods: _fk3r251,
        cyclicNames: _fk3r261,
        monthNames: _fk3r243,
        monthPatterns: _fk3r222,
        quarterNames: _fk3r227,
        fields: _fk3r262
    },
    ethioaa: _fk3r263,
    ethiopic: _fk3r265,
    gregorian: {
        dateFormats: {
            basic: {
                fullDate: "y年M月d日EEEE",
                shortDate: "d/M/y",
                longDate: "y年M月d日",
                mediumDate: "y年M月d日",
                fullTime: "ah:mm:ss [zzzz]",
                longTime: "ah:mm:ss [z]",
                mediumTime: "ah:mm:ss",
                shortTime: "ah:mm",
                shortDateTime: "d/M/y ah:mm",
                mediumDateTime: "y年M月d日 ah:mm:ss",
                longDateTime: "y年M月d日 ah:mm:ss [z]",
                fullDateTime: "y年M月d日EEEE ah:mm:ss [zzzz]"
            },
            cldr: {
                E: "cccc",
                Ed: "d日E",
                GyMMMEd: "Gy年M月d日E",
                Md: "d/M",
                MEd: "E, d/M",
                MMdd: "dd/MM",
                MMMEd: "M月d日E",
                yM: "M/y",
                yMd: "d/M/y",
                yMEd: "y/M/dE",
                yMM: "MM/y",
                yMMMEd: "y年M月d日E",
                d: "d日",
                Ehm: "E ah:mm",
                EHm: "E HH:mm",
                Ehms: "E ah:mm:ss",
                EHms: "E HH:mm:ss",
                Gy: "Gy年",
                GyMMM: "Gy年M月",
                GyMMMd: "Gy年M月d日",
                h: "ah時",
                H: "H時",
                hm: "ah:mm",
                Hm: "HH:mm",
                hms: "ah:mm:ss",
                Hms: "HH:mm:ss",
                hmsv: "ah:mm:ss [v]",
                Hmsv: "HH:mm:ss [v]",
                hmv: "ah:mm [v]",
                Hmv: "HH:mm [v]",
                M: "M月",
                MMM: "LLL",
                MMMd: "M月d日",
                MMMMd: "M月d日",
                ms: "mm:ss",
                y: "y年",
                yMMM: "y年M月",
                yMMMd: "y年M月d日",
                yMMMM: "y年M月",
                yQQQ: "y年QQQ",
                yQQQQ: "y年QQQQ"
            }
        },
        datePartsOrder: "dmy",
        dateIntervalFormats: {
            Md: _fk3r24,
            MEd: _fk3r52,
            yM: {
                M: "M/y 至 M/y",
                y: "M/y 至 M/y"
            },
            yMd: {
                d: "d/M/y 至 d/M/y",
                M: "d/M/y 至 d/M/y",
                y: "d/M/y 至 d/M/y"
            },
            yMEd: {
                d: "d/M/y（E） 至 d/M/y（E）",
                M: "d/M/y（E） 至 d/M/y（E）",
                y: "d/M/y（E） 至 d/M/y（E）"
            },
            d: {
                d: "d日至d日"
            },
            h: _fk3r4,
            H: {
                H: "HH–HH"
            },
            hm: _fk3r69,
            Hm: {
                H: "HH:mm–HH:mm",
                m: "HH:mm至HH:mm"
            },
            hmv: _fk3r100,
            Hmv: _fk3r53,
            hv: _fk3r38,
            Hv: {
                H: "HH–HH [v]"
            },
            M: {
                M: "M月至M月"
            },
            MMM: {
                M: "LLL至LLL"
            },
            MMMd: _fk3r12,
            MMMEd: _fk3r29,
            MMMM: {
                M: "LLLL至LLLL"
            },
            y: {
                y: "y至y"
            },
            yMMM: _fk3r15,
            yMMMd: {
                d: "y年M月d日至d日",
                M: "y年M月d日至M月d日",
                y: "y年M月d日至y年M月d日"
            },
            yMMMEd: {
                d: "y年M月d日E至d日E",
                M: "y年M月d日E至M月d日E",
                y: "y年M月d日E至y年M月d日E"
            },
            yMMMM: _fk3r15
        },
        dateIntervalFallbackFormat: "{0}至{1}",
        dayNames: _fk3r240,
        dayPeriods: _fk3r251,
        monthNames: _fk3r244,
        eraNames: {
            wide: [ "公元前", "公元" ],
            abbreviated: [ "公元前", "公元" ]
        },
        quarterNames: _fk3r227,
        fields: _fk3r262
    },
    hebrew: {
        dateFormats: _fk3r252,
        datePartsOrder: "ymd",
        dateIntervalFormats: _fk3r254,
        dateIntervalFallbackFormat: "{0}至{1}",
        dayNames: _fk3r240,
        dayPeriods: _fk3r251,
        monthNames: {
            format: _fk3r234,
            standAlone: _fk3r234
        },
        eraNames: {
            wide: [ "創世紀元" ],
            abbreviated: [ "創世紀元" ]
        },
        quarterNames: _fk3r227,
        fields: _fk3r262
    },
    indian: {
        dateFormats: _fk3r252,
        datePartsOrder: "ymd",
        dateIntervalFormats: _fk3r254,
        dateIntervalFallbackFormat: "{0}至{1}",
        dayNames: _fk3r240,
        dayPeriods: _fk3r251,
        monthNames: {
            format: _fk3r235,
            standAlone: _fk3r235
        },
        eraNames: {
            wide: [ "印度曆" ],
            abbreviated: [ "印度曆" ]
        },
        quarterNames: _fk3r227,
        fields: _fk3r262
    },
    islamic: _fk3r264,
    "islamic-umalqura": _fk3r264,
    "islamic-tbla": _fk3r264,
    "islamic-civil": _fk3r264,
    "islamic-rgsa": _fk3r264,
    iso8601: _fk3r263,
    japanese: {
        dateFormats: {
            basic: _fk3r238,
            cldr: {
                d: "d日",
                Ed: "d日（E）",
                Gy: "Gy年",
                GyMMM: "Gy年M月",
                GyMMMd: "Gy年M月d日",
                GyMMMEd: "Gy年M月d日E",
                h: "ah時",
                H: "H時",
                hm: "ah:mm",
                Hm: "HH:mm",
                hms: "ah:mm:ss",
                Hms: "HH:mm:ss",
                M: "M月",
                Md: "M/d",
                MEd: "M/d（E）",
                MMM: "LLL",
                MMMd: "MMM d",
                MMMEd: "M月d日E",
                MMMMd: "MMMM d",
                ms: "mm:ss",
                y: "Gy年",
                yyyy: "Gy年",
                yyyyM: "Gy/M",
                yyyyMd: "Gy/M/d",
                yyyyMEd: "Gy/M/d（E）",
                yyyyMMM: "Gy年M月",
                yyyyMMMd: "Gy年M月d日",
                yyyyMMMEd: "Gy年M月d日E",
                yyyyMMMM: "Gy年M月",
                yyyyQQQ: "Gy年QQQ",
                yyyyQQQQ: "Gy年QQQQ",
                E: "ccc",
                Ehm: "E h:mm a",
                EHm: "E HH:mm",
                Ehms: "E h:mm:ss a",
                EHms: "E HH:mm:ss"
            }
        },
        datePartsOrder: "ymd",
        dateIntervalFormats: _fk3r254,
        dateIntervalFallbackFormat: "{0}至{1}",
        dayNames: _fk3r240,
        dayPeriods: _fk3r251,
        monthNames: _fk3r244,
        eraNames: {
            wide: _fk3r258,
            abbreviated: _fk3r258
        },
        quarterNames: _fk3r227,
        fields: _fk3r262
    },
    persian: {
        dateFormats: _fk3r252,
        datePartsOrder: "ymd",
        dateIntervalFormats: _fk3r254,
        dateIntervalFallbackFormat: "{0}至{1}",
        dayNames: _fk3r240,
        dayPeriods: _fk3r251,
        monthNames: _fk3r244,
        eraNames: {
            wide: [ "波斯曆" ],
            abbreviated: [ "波斯曆" ]
        },
        quarterNames: _fk3r227,
        fields: _fk3r262
    },
    roc: {
        dateFormats: {
            basic: {
                fullDate: "Gy年M月d日 EEEE",
                longDate: "Gy年M月d日",
                mediumDate: "Gy年M月d日",
                shortDate: "Gy/M/d",
                fullTime: "ah:mm:ss [zzzz]",
                longTime: "ah:mm:ss [z]",
                mediumTime: "ah:mm:ss",
                shortTime: "ah:mm",
                shortDateTime: "Gy/M/d ah:mm",
                mediumDateTime: "Gy年M月d日 ah:mm:ss",
                longDateTime: "Gy年M月d日 ah:mm:ss [z]",
                fullDateTime: "Gy年M月d日 EEEE ah:mm:ss [zzzz]"
            },
            cldr: {
                Ed: "d日E",
                Md: "d-M",
                MEd: "d-M（E）",
                yyyyMEd: "Gy/M/dE",
                d: "d日",
                E: "ccc",
                Gy: "Gy年",
                GyMMM: "Gy年M月",
                GyMMMd: "Gy年M月d日",
                GyMMMEd: "Gy年M月d日E",
                M: "M月",
                MMM: "LLL",
                MMMd: "M月d日",
                MMMEd: "M月d日E",
                MMMMd: "M月d日",
                y: "Gy年",
                yyyy: "Gy年",
                yyyyM: "Gy/M",
                yyyyMd: "Gy/M/d",
                yyyyMMM: "Gy年M月",
                yyyyMMMd: "Gy年M月d日",
                yyyyMMMEd: "Gy年M月d日E",
                yyyyMMMM: "Gy年M月",
                yyyyQQQ: "Gy年QQQ",
                yyyyQQQQ: "Gy年QQQQ",
                h: "ah時",
                H: "H時",
                hm: "ah:mm",
                Hm: "H:mm",
                hms: "ah:mm:ss",
                Hms: "H:mm:ss",
                ms: "mm:ss",
                Ehm: "E h:mm a",
                EHm: "E HH:mm",
                Ehms: "E h:mm:ss a",
                EHms: "E HH:mm:ss"
            }
        },
        datePartsOrder: "ymd",
        dateIntervalFormats: _fk3r254,
        dateIntervalFallbackFormat: "{0}至{1}",
        dayNames: _fk3r240,
        dayPeriods: _fk3r251,
        monthNames: _fk3r244,
        eraNames: {
            wide: [ "民國前", "民國" ],
            abbreviated: [ "民國前", "民國" ]
        },
        quarterNames: _fk3r227,
        fields: _fk3r262
    },
    islamicc: _fk3r263
};

inter.pluralRule = function(n) {
    return "other";
};

inter.renderDigitsOrdinal = function(n) {
    if (n < 0) return "第−" + this.renderNumber(-n, "#,###0");
    if (n >= 0) return "第" + this.renderNumber(n, "#,###0");
};

inter.renderSpelloutNumbering = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "負" + this.renderSpelloutNumbering(-n);
    if (isFractional && n > 1) return this.renderSpelloutCardinal(Math.floor(n)) + "點" + this.renderSpelloutNumbering(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,###0");
    if (n >= 1e16) return this.renderSpelloutCardinal(Math.floor(n / 1e16)) + "京" + (n === 1e16 ? "" : this.renderCardinal13(n % 1e16));
    if (n >= 1e12) return this.renderSpelloutCardinal(Math.floor(n / 1e12)) + "兆" + (n === 1e12 ? "" : this.renderCardinal8(n % 1e12));
    if (n >= 1e8) return this.renderSpelloutCardinal(Math.floor(n / 1e8)) + "億" + (n === 1e8 ? "" : this.renderCardinal5(n % 1e8));
    if (n >= 1e4) return this.renderSpelloutCardinal(Math.floor(n / 1e4)) + "萬" + (n === 1e4 ? "" : this.renderCardinal4(n % 1e4));
    if (n >= 1e3) return this.renderSpelloutCardinal(Math.floor(n / 1e3)) + "千" + (n === 1e3 ? "" : this.renderCardinal3(n % 1e3));
    if (n >= 100) return this.renderSpelloutCardinal(Math.floor(n / 100)) + "百" + (n === 100 ? "" : this.renderCardinal2(n % 100));
    if (n >= 20) return this.renderSpelloutNumbering(Math.floor(n / 10)) + "十" + (n === 20 ? "" : this.renderSpelloutNumbering(n % 10));
    if (n >= 10) return "十" + (n === 10 ? "" : this.renderSpelloutNumbering(n % 10));
    if (n >= 9) return "九";
    if (n >= 8) return "八";
    if (n >= 7) return "七";
    if (n >= 6) return "六";
    if (n >= 5) return "五";
    if (n >= 4) return "四";
    if (n >= 3) return "三";
    if (n >= 2) return "二";
    if (n >= 1) return "一";
    if (n >= 0) return "〇";
};

inter.renderArmenianUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderArmenianUpper(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e4) return this.renderNumber(n, "#,##0");
    if (n >= 9e3) return "Ք" + (n === 9e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 8e3) return "Փ" + (n === 8e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 7e3) return "Ւ" + (n === 7e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 6e3) return "Ց" + (n === 6e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 5e3) return "Ր" + (n === 5e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 4e3) return "Տ" + (n === 4e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 3e3) return "Վ" + (n === 3e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 2e3) return "Ս" + (n === 2e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 1e3) return "Ռ" + (n === 1e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 900) return "Ջ" + (n === 900 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 800) return "Պ" + (n === 800 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 700) return "Չ" + (n === 700 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 600) return "Ո" + (n === 600 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 500) return "Շ" + (n === 500 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 400) return "Ն" + (n === 400 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 300) return "Յ" + (n === 300 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 200) return "Մ" + (n === 200 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 100) return "Ճ" + (n === 100 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 90) return "Ղ" + (n === 90 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 80) return "Ձ" + (n === 80 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 70) return "Հ" + (n === 70 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 60) return "Կ" + (n === 60 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 50) return "Ծ" + (n === 50 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 40) return "Խ" + (n === 40 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 30) return "Լ" + (n === 30 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 20) return "Ի" + (n === 20 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 10) return "Ժ" + (n === 10 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 9) return "Թ";
    if (n >= 8) return "Ը";
    if (n >= 7) return "Է";
    if (n >= 6) return "Զ";
    if (n >= 5) return "Ե";
    if (n >= 4) return "Դ";
    if (n >= 3) return "Գ";
    if (n >= 2) return "Բ";
    if (n >= 1) return "Ա";
    if (n >= 0) return "0";
};

inter.renderArmenianLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderArmenianLower(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e4) return this.renderNumber(n, "#,##0");
    if (n >= 9e3) return "ք" + (n === 9e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 8e3) return "փ" + (n === 8e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 7e3) return "ւ" + (n === 7e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 6e3) return "ց" + (n === 6e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 5e3) return "ր" + (n === 5e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 4e3) return "տ" + (n === 4e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 3e3) return "վ" + (n === 3e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 2e3) return "ս" + (n === 2e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 1e3) return "ռ" + (n === 1e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 900) return "ջ" + (n === 900 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 800) return "պ" + (n === 800 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 700) return "չ" + (n === 700 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 600) return "ո" + (n === 600 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 500) return "շ" + (n === 500 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 400) return "ն" + (n === 400 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 300) return "յ" + (n === 300 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 200) return "մ" + (n === 200 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 100) return "ճ" + (n === 100 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 90) return "ղ" + (n === 90 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 80) return "ձ" + (n === 80 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 70) return "հ" + (n === 70 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 60) return "կ" + (n === 60 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 50) return "ծ" + (n === 50 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 40) return "խ" + (n === 40 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 30) return "լ" + (n === 30 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 20) return "ի" + (n === 20 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 10) return "ժ" + (n === 10 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 9) return "թ";
    if (n >= 8) return "ը";
    if (n >= 7) return "է";
    if (n >= 6) return "զ";
    if (n >= 5) return "ե";
    if (n >= 4) return "դ";
    if (n >= 3) return "գ";
    if (n >= 2) return "բ";
    if (n >= 1) return "ա";
    if (n >= 0) return "0";
};

inter.renderCyrillicLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderCyrillicLower(-n);
    if (isFractional && n > 1) return this.renderCyrillicLower(Math.floor(n)) + "." + this.renderCyrillicLower(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e15) return "҂҂҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e15)) + (n === 1e15 ? "" : " " + this.renderCyrillicLower(n % 1e15));
    if (n >= 1e12) return "҂҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e12)) + (n === 1e12 ? "" : " " + this.renderCyrillicLower(n % 1e12));
    if (n >= 1e9) return "҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e9)) + (n === 1e9 ? "" : " " + this.renderCyrillicLower(n % 1e9));
    if (n >= 1e6) return "҂҂" + this.renderCyrillicLower(Math.floor(n / 1e6)) + (n === 1e6 ? "" : " " + this.renderCyrillicLower(n % 1e6));
    if (n >= 11e3) return this.renderCyrillicLowerThousands(Math.floor(n / 1e4)) + (n === 11e3 ? "" : " " + this.renderCyrillicLower(n % 1e4));
    if (n >= 1e4) return "҂" + this.renderCyrillicLower(Math.floor(n / 1e4)) + (n === 1e4 ? "" : " " + this.renderCyrillicLower(n % 1e4));
    if (n >= 1e3) return "҂" + this.renderCyrillicLower110(Math.floor(n / 1e3)) + this.renderCyrillicLowerPost(n % 1e3);
    if (n >= 900) return "ц" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 801) return "ѿ" + this.renderCyrillicLower(n % 100);
    if (n >= 800) return "ѿ҃";
    if (n >= 700) return "ѱ" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 600) return "х" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 500) return "ф" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 400) return "у" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 300) return "т" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 200) return "с" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 100) return "р" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 90) return "ч" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 80) return "п" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 70) return "ѻ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 60) return "ѯ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 50) return "н" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 40) return "м" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 30) return "л" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 20) return "к" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 19) return "ѳ҃і";
    if (n >= 18) return "и҃і";
    if (n >= 17) return "з҃і";
    if (n >= 16) return "ѕ҃і";
    if (n >= 15) return "є҃і";
    if (n >= 14) return "д҃і";
    if (n >= 13) return "г҃і";
    if (n >= 12) return "в҃і";
    if (n >= 11) return "а҃і";
    if (n >= 1) return this.renderCyrillicLower110(n) + "҃";
    if (n >= 0) return "0҃";
};

inter.renderEthiopic = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderEthiopic(-n);
    if (isFractional && n > 1) return this.renderEthiopic(Math.floor(n)) + "፡" + this.renderEthiopic(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,###0");
    if (n >= 2e16) return this.renderEthiopic(Math.floor(n / 1e16)) + "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 1e16) return "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 2e12) return this.renderEthiopic(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1e12) return "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 2e8) return this.renderEthiopic(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1e8) return "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 2e4) return this.renderEthiopic(Math.floor(n / 1e4)) + "፼" + (n === 2e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 1e4) return "፼" + (n === 1e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 200) return this.renderEthiopic(Math.floor(n / 100)) + "፻" + (n === 200 ? "" : this.renderEthiopic(n % 100));
    if (n >= 100) return "፻" + (n === 100 ? "" : this.renderEthiopic(n % 100));
    if (n >= 90) return "፺" + (n === 90 ? "" : this.renderEthiopic(n % 10));
    if (n >= 80) return "፹" + (n === 80 ? "" : this.renderEthiopic(n % 10));
    if (n >= 70) return "፸" + (n === 70 ? "" : this.renderEthiopic(n % 10));
    if (n >= 60) return "፷" + (n === 60 ? "" : this.renderEthiopic(n % 10));
    if (n >= 50) return "፶" + (n === 50 ? "" : this.renderEthiopic(n % 10));
    if (n >= 40) return "፵" + (n === 40 ? "" : this.renderEthiopic(n % 10));
    if (n >= 30) return "፴" + (n === 30 ? "" : this.renderEthiopic(n % 10));
    if (n >= 20) return "፳" + (n === 20 ? "" : this.renderEthiopic(n % 10));
    if (n >= 10) return "፲" + (n === 10 ? "" : this.renderEthiopic(n % 10));
    if (n >= 9) return "፱";
    if (n >= 8) return "፰";
    if (n >= 7) return "፯";
    if (n >= 6) return "፮";
    if (n >= 5) return "፭";
    if (n >= 4) return "፬";
    if (n >= 3) return "፫";
    if (n >= 2) return "፪";
    if (n >= 1) return "፩";
    if (n >= 0) return "ባዶ";
};

inter.renderGeorgian = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGeorgian(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 2e4) return this.renderNumber(n, "#,##0");
    if (n >= 1e4) return "ჯ" + (n === 1e4 ? "" : this.renderGeorgian(n % 1e4));
    if (n >= 9e3) return "ჵ" + (n === 9e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 8e3) return "ჴ" + (n === 8e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 7e3) return "ხ" + (n === 7e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 6e3) return "ჭ" + (n === 6e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 5e3) return "წ" + (n === 5e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 4e3) return "ძ" + (n === 4e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 3e3) return "ც" + (n === 3e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 2e3) return "ჩ" + (n === 2e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 1e3) return "შ" + (n === 1e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 900) return "ყ" + (n === 900 ? "" : this.renderGeorgian(n % 100));
    if (n >= 800) return "ღ" + (n === 800 ? "" : this.renderGeorgian(n % 100));
    if (n >= 700) return "ქ" + (n === 700 ? "" : this.renderGeorgian(n % 100));
    if (n >= 600) return "ფ" + (n === 600 ? "" : this.renderGeorgian(n % 100));
    if (n >= 500) return "ჳ" + (n === 500 ? "" : this.renderGeorgian(n % 100));
    if (n >= 400) return "უ" + (n === 400 ? "" : this.renderGeorgian(n % 100));
    if (n >= 300) return "ტ" + (n === 300 ? "" : this.renderGeorgian(n % 100));
    if (n >= 200) return "ს" + (n === 200 ? "" : this.renderGeorgian(n % 100));
    if (n >= 100) return "რ" + (n === 100 ? "" : this.renderGeorgian(n % 100));
    if (n >= 90) return "ჟ" + (n === 90 ? "" : this.renderGeorgian(n % 10));
    if (n >= 80) return "პ" + (n === 80 ? "" : this.renderGeorgian(n % 10));
    if (n >= 70) return "ო" + (n === 70 ? "" : this.renderGeorgian(n % 10));
    if (n >= 60) return "ჲ" + (n === 60 ? "" : this.renderGeorgian(n % 10));
    if (n >= 50) return "ნ" + (n === 50 ? "" : this.renderGeorgian(n % 10));
    if (n >= 40) return "მ" + (n === 40 ? "" : this.renderGeorgian(n % 10));
    if (n >= 30) return "ლ" + (n === 30 ? "" : this.renderGeorgian(n % 10));
    if (n >= 20) return "კ" + (n === 20 ? "" : this.renderGeorgian(n % 10));
    if (n >= 10) return "ი" + (n === 10 ? "" : this.renderGeorgian(n % 10));
    if (n >= 9) return "თ";
    if (n >= 8) return "ჱ";
    if (n >= 7) return "ზ";
    if (n >= 6) return "ვ";
    if (n >= 5) return "ე";
    if (n >= 4) return "დ";
    if (n >= 3) return "გ";
    if (n >= 2) return "ბ";
    if (n >= 1) return "ა";
    if (n >= 0) return this.renderNumber(n, "#,##0");
};

inter.renderGreekUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGreekUpper(-n);
    if (isFractional && n > 1) return this.renderGreekUpper(Math.floor(n)) + "." + this.renderGreekUpper(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 0) return this.renderGreekNumeralMajuscules(n) + "´";
};

inter.renderGreekLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGreekLower(-n);
    if (isFractional && n > 1) return this.renderGreekLower(Math.floor(n)) + "." + this.renderGreekLower(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 0) return this.renderGreekNumeralMinuscules(n) + "´";
};

inter.renderSpelloutCardinal = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "負" + this.renderSpelloutCardinal(-n);
    if (isFractional && n > 1) return this.renderSpelloutCardinal(Math.floor(n)) + "點" + this.renderSpelloutCardinal(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,###0");
    if (n >= 1e16) return this.renderSpelloutCardinal(Math.floor(n / 1e16)) + "京" + (n === 1e16 ? "" : this.renderCardinal13(n % 1e16));
    if (n >= 1e12) return this.renderSpelloutCardinal(Math.floor(n / 1e12)) + "兆" + (n === 1e12 ? "" : this.renderCardinal8(n % 1e12));
    if (n >= 1e8) return this.renderSpelloutCardinal(Math.floor(n / 1e8)) + "億" + (n === 1e8 ? "" : this.renderCardinal5(n % 1e8));
    if (n >= 1e4) return this.renderSpelloutCardinal(Math.floor(n / 1e4)) + "萬" + (n === 1e4 ? "" : this.renderCardinal4(n % 1e4));
    if (n >= 1e3) return this.renderSpelloutCardinal(Math.floor(n / 1e3)) + "千" + (n === 1e3 ? "" : this.renderCardinal3(n % 1e3));
    if (n >= 100) return this.renderSpelloutCardinal(Math.floor(n / 100)) + "百" + (n === 100 ? "" : this.renderCardinal2(n % 100));
    if (n >= 10) return this.renderSpelloutNumbering(n);
    if (n >= 9) return "九";
    if (n >= 8) return "八";
    if (n >= 7) return "七";
    if (n >= 6) return "六";
    if (n >= 5) return "五";
    if (n >= 4) return "四";
    if (n >= 3) return "三";
    if (n >= 2) return "二";
    if (n >= 1) return "一";
    if (n >= 0) return "零";
};

inter.renderSpelloutCardinalFinancial = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "負" + this.renderSpelloutCardinalFinancial(-n);
    if (isFractional && n > 1) return this.renderSpelloutCardinalFinancial(Math.floor(n)) + "點" + this.renderSpelloutCardinalFinancial(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,###0");
    if (n >= 1e16) return this.renderSpelloutCardinalFinancial(Math.floor(n / 1e16)) + "京" + (n === 1e16 ? "" : this.renderFinancialnumber13(n % 1e16));
    if (n >= 1e12) return this.renderSpelloutCardinalFinancial(Math.floor(n / 1e12)) + "兆" + (n === 1e12 ? "" : this.renderFinancialnumber8(n % 1e12));
    if (n >= 1e8) return this.renderSpelloutCardinalFinancial(Math.floor(n / 1e8)) + "億" + (n === 1e8 ? "" : this.renderFinancialnumber5(n % 1e8));
    if (n >= 1e4) return this.renderSpelloutCardinalFinancial(Math.floor(n / 1e4)) + "萬" + (n === 1e4 ? "" : this.renderFinancialnumber4(n % 1e4));
    if (n >= 1e3) return this.renderSpelloutCardinalFinancial(Math.floor(n / 1e3)) + "仟" + (n === 1e3 ? "" : this.renderFinancialnumber3(n % 1e3));
    if (n >= 100) return this.renderSpelloutCardinalFinancial(Math.floor(n / 100)) + "佰" + (n === 100 ? "" : this.renderFinancialnumber2(n % 100));
    if (n >= 20) return this.renderSpelloutCardinalFinancial(Math.floor(n / 10)) + "拾" + (n === 20 ? "" : this.renderSpelloutCardinalFinancial(n % 10));
    if (n >= 10) return "拾" + (n === 10 ? "" : this.renderSpelloutCardinalFinancial(n % 10));
    if (n >= 9) return "玖";
    if (n >= 8) return "捌";
    if (n >= 7) return "柒";
    if (n >= 6) return "陸";
    if (n >= 5) return "伍";
    if (n >= 4) return "肆";
    if (n >= 3) return "參";
    if (n >= 2) return "貳";
    if (n >= 1) return "壹";
    if (n >= 0) return "零";
};

inter.renderHebrew = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderHebrew(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1000001) return this.renderNumber(n, "#,##0");
    if (n >= 1e6) return "אלף אלפים";
    if (n >= 3001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 3001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 3e3) return this.renderHebrew(Math.floor(n / 1e3)) + " אלפים";
    if (n >= 2001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 2001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 2e3) return "אלפיים";
    if (n >= 1001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 1001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 1e3) return "אלף";
    if (n >= 901) return "תתק" + this.renderHebrew099(n % 100);
    if (n >= 900) return "תת״ק";
    if (n >= 801) return "תת" + this.renderHebrew099(n % 100);
    if (n >= 800) return "ת״ת";
    if (n >= 745) return "תש" + this.renderHebrew099(n % 100);
    if (n >= 744) return "תשד״מ";
    if (n >= 701) return "תש" + this.renderHebrew099(n % 100);
    if (n >= 700) return "ת״ש";
    if (n >= 699) return "תר" + this.renderHebrew099(n % 100);
    if (n >= 698) return "תרח״צ";
    if (n >= 601) return "תר" + this.renderHebrew099(n % 100);
    if (n >= 600) return "ת״ר";
    if (n >= 501) return "תק" + this.renderHebrew099(n % 100);
    if (n >= 500) return "ת״ק";
    if (n >= 400) return "ת" + this.renderHebrew099(n % 100);
    if (n >= 345) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 344) return "שד״מ";
    if (n >= 305) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 304) return "ד״ש";
    if (n >= 300) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 299) return "ר" + this.renderHebrew099(n % 100);
    if (n >= 298) return "רח״צ";
    if (n >= 200) return "ר" + this.renderHebrew099(n % 100);
    if (n >= 100) return "ק" + this.renderHebrew099(n % 100);
    if (n >= 91) return "צ״" + this.renderHebrewItem(n % 10);
    if (n >= 90) return "צ׳";
    if (n >= 81) return "פ״" + this.renderHebrewItem(n % 10);
    if (n >= 80) return "פ׳";
    if (n >= 71) return "ע״" + this.renderHebrewItem(n % 10);
    if (n >= 70) return "ע׳";
    if (n >= 61) return "ס״" + this.renderHebrewItem(n % 10);
    if (n >= 60) return "ס׳";
    if (n >= 51) return "נ״" + this.renderHebrewItem(n % 10);
    if (n >= 50) return "נ׳";
    if (n >= 41) return "מ״" + this.renderHebrewItem(n % 10);
    if (n >= 40) return "מ׳";
    if (n >= 31) return "ל״" + this.renderHebrewItem(n % 10);
    if (n >= 30) return "ל׳";
    if (n >= 21) return "כ״" + this.renderHebrewItem(n % 10);
    if (n >= 20) return "כ׳";
    if (n >= 17) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "ט״ז";
    if (n >= 15) return "ט״ו";
    if (n >= 11) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 0) return this.renderHebrewItem(n) + "׳";
};

inter.renderRomanUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderRomanUpper(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 4e5) return this.renderNumber(n, "#,##0");
    if (n >= 3e5) return "ↈↈↈ" + (n === 3e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 2e5) return "ↈↈ" + (n === 2e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 1e5) return "ↈ" + (n === 1e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 9e4) return "ↂↈ" + (n === 9e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 8e4) return "ↇↂↂↂ" + (n === 8e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 7e4) return "ↇↂↂ" + (n === 7e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 6e4) return "ↇↂ" + (n === 6e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 5e4) return "ↇ" + (n === 5e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 4e4) return "ↂↇ" + (n === 4e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 3e4) return "ↂↂↂ" + (n === 3e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 2e4) return "ↂↂ" + (n === 2e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 1e4) return "ↂ" + (n === 1e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 9e3) return "Mↂ" + (n === 9e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 8e3) return "ↁMMM" + (n === 8e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 7e3) return "ↁMM" + (n === 7e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 6e3) return "ↁM" + (n === 6e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 5e3) return "ↁ" + (n === 5e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 4e3) return "Mↁ" + (n === 4e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 3e3) return "MMM" + (n === 3e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 2e3) return "MM" + (n === 2e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 1e3) return "M" + (n === 1e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 900) return "CM" + (n === 900 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 800) return "DCCC" + (n === 800 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 700) return "DCC" + (n === 700 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 600) return "DC" + (n === 600 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 500) return "D" + (n === 500 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 400) return "CD" + (n === 400 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 300) return "CCC" + (n === 300 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 200) return "CC" + (n === 200 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 100) return "C" + (n === 100 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 90) return "XC" + (n === 90 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 80) return "LXXX" + (n === 80 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 70) return "LXX" + (n === 70 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 60) return "LX" + (n === 60 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 50) return "L" + (n === 50 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 40) return "XL" + (n === 40 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 30) return "XXX" + (n === 30 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 20) return "XX" + (n === 20 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 10) return "X" + (n === 10 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 9) return "IX";
    if (n >= 8) return "VIII";
    if (n >= 7) return "VII";
    if (n >= 6) return "VI";
    if (n >= 5) return "V";
    if (n >= 4) return "IV";
    if (n >= 3) return "III";
    if (n >= 2) return "II";
    if (n >= 1) return "I";
    if (n >= 0) return "N";
};

inter.renderRomanLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderRomanLower(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 5e3) return this.renderNumber(n, "#,##0");
    if (n >= 4e3) return "mmmm" + (n === 4e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 3e3) return "mmm" + (n === 3e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 2e3) return "mm" + (n === 2e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 1e3) return "m" + (n === 1e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 900) return "cm" + (n === 900 ? "" : this.renderRomanLower(n % 100));
    if (n >= 800) return "dccc" + (n === 800 ? "" : this.renderRomanLower(n % 100));
    if (n >= 700) return "dcc" + (n === 700 ? "" : this.renderRomanLower(n % 100));
    if (n >= 600) return "dc" + (n === 600 ? "" : this.renderRomanLower(n % 100));
    if (n >= 500) return "d" + (n === 500 ? "" : this.renderRomanLower(n % 100));
    if (n >= 400) return "cd" + (n === 400 ? "" : this.renderRomanLower(n % 100));
    if (n >= 300) return "ccc" + (n === 300 ? "" : this.renderRomanLower(n % 100));
    if (n >= 200) return "cc" + (n === 200 ? "" : this.renderRomanLower(n % 100));
    if (n >= 100) return "c" + (n === 100 ? "" : this.renderRomanLower(n % 100));
    if (n >= 90) return "xc" + (n === 90 ? "" : this.renderRomanLower(n % 10));
    if (n >= 80) return "lxxx" + (n === 80 ? "" : this.renderRomanLower(n % 10));
    if (n >= 70) return "lxx" + (n === 70 ? "" : this.renderRomanLower(n % 10));
    if (n >= 60) return "lx" + (n === 60 ? "" : this.renderRomanLower(n % 10));
    if (n >= 50) return "l" + (n === 50 ? "" : this.renderRomanLower(n % 10));
    if (n >= 40) return "xl" + (n === 40 ? "" : this.renderRomanLower(n % 10));
    if (n >= 30) return "xxx" + (n === 30 ? "" : this.renderRomanLower(n % 10));
    if (n >= 20) return "xx" + (n === 20 ? "" : this.renderRomanLower(n % 10));
    if (n >= 10) return "x" + (n === 10 ? "" : this.renderRomanLower(n % 10));
    if (n >= 9) return "ix";
    if (n >= 8) return "viii";
    if (n >= 7) return "vii";
    if (n >= 6) return "vi";
    if (n >= 5) return "v";
    if (n >= 4) return "iv";
    if (n >= 3) return "iii";
    if (n >= 2) return "ii";
    if (n >= 1) return "i";
    if (n >= 0) return "n";
};

inter.renderTamil = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderTamil(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e8) return this.renderNumber(n, "#,##,##0");
    if (n >= 1e6) return this.renderTamil(Math.floor(n / 1e6)) + "௱௲" + (n === 1e6 ? "" : this.renderTamilThousands(n % 1e6));
    if (n >= 2e3) return this.renderTamil(Math.floor(n / 1e3)) + "௲" + (n === 2e3 ? "" : this.renderTamil(n % 1e3));
    if (n >= 1e3) return "௲" + (n === 1e3 ? "" : this.renderTamil(n % 1e3));
    if (n >= 200) return this.renderTamil(Math.floor(n / 100)) + "௱" + (n === 200 ? "" : this.renderTamil(n % 100));
    if (n >= 100) return "௱" + (n === 100 ? "" : this.renderTamil(n % 100));
    if (n >= 20) return this.renderTamil(Math.floor(n / 10)) + "௰" + (n === 20 ? "" : this.renderTamil(n % 10));
    if (n >= 10) return "௰" + (n === 10 ? "" : this.renderTamil(n % 10));
    if (n >= 9) return "௯";
    if (n >= 8) return "௮";
    if (n >= 7) return "௭";
    if (n >= 6) return "௬";
    if (n >= 5) return "௫";
    if (n >= 4) return "௪";
    if (n >= 3) return "௩";
    if (n >= 2) return "௨";
    if (n >= 1) return "௧";
    if (n >= 0) return "௦";
};

inter.renderCardinal13 = function(n) {
    if (n >= 1e12) return this.renderSpelloutCardinal(n);
    if (n >= 20) return "零" + this.renderSpelloutCardinal(n);
    if (n >= 10) return "零一" + this.renderSpelloutCardinal(n);
    if (n >= 1) return "零" + this.renderSpelloutNumbering(n);
};

inter.renderCardinal8 = function(n) {
    if (n >= 1e7) return this.renderSpelloutCardinal(n);
    if (n >= 20) return "零" + this.renderSpelloutCardinal(n);
    if (n >= 10) return "零一" + this.renderSpelloutCardinal(n);
    if (n >= 1) return "零" + this.renderSpelloutNumbering(n);
};

inter.renderCardinal5 = function(n) {
    if (n >= 1e4) return this.renderSpelloutCardinal(n);
    if (n >= 20) return "零" + this.renderSpelloutCardinal(n);
    if (n >= 10) return "零一" + this.renderSpelloutCardinal(n);
    if (n >= 1) return "零" + this.renderSpelloutNumbering(n);
};

inter.renderCardinal4 = function(n) {
    if (n >= 1e3) return this.renderSpelloutCardinal(n);
    if (n >= 20) return "零" + this.renderSpelloutCardinal(n);
    if (n >= 10) return "零一" + this.renderSpelloutCardinal(n);
    if (n >= 1) return "零" + this.renderSpelloutNumbering(n);
};

inter.renderCardinal3 = function(n) {
    if (n >= 100) return this.renderSpelloutCardinal(n);
    if (n >= 20) return "零" + this.renderSpelloutCardinal(n);
    if (n >= 10) return "零一" + this.renderSpelloutCardinal(n);
    if (n >= 1) return "零" + this.renderSpelloutNumbering(n);
};

inter.renderCardinal2 = function(n) {
    if (n >= 20) return this.renderSpelloutNumbering(n);
    if (n >= 10) return "一" + this.renderSpelloutNumbering(n);
    if (n >= 1) return "零" + this.renderSpelloutNumbering(n);
};

inter.renderCyrillicLowerThousands = function(n) {
    if (n >= 900) return "҂ц" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 800) return "҂ѿ" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 700) return "҂ѱ" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 600) return "҂х" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 500) return "҂ф" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 400) return "҂у" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 300) return "҂т" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 200) return "҂с" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 100) return "҂р" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 90) return "҂ч" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 80) return "҂п" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 70) return "҂ѻ" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 60) return "҂ѯ" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 50) return "҂н" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 40) return "҂м" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 30) return "҂л" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 20) return "҂к" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 19) return "҂ѳ҃҂і";
    if (n >= 18) return "҂и҃҂і";
    if (n >= 17) return "҂з҃҂і";
    if (n >= 16) return "҂ѕ҃҂і";
    if (n >= 15) return "҂є҃҂і";
    if (n >= 14) return "҂д҃҂і";
    if (n >= 13) return "҂г҃҂і";
    if (n >= 12) return "҂в҃҂і";
    if (n >= 11) return "҂а҃҂і";
    if (n >= 10) return "҃҂і";
    if (n >= 9) return "҃҂ѳ";
    if (n >= 8) return "҃҂и";
    if (n >= 7) return "҃҂з";
    if (n >= 6) return "҃҂ѕ";
    if (n >= 5) return "҃҂є";
    if (n >= 4) return "҃҂д";
    if (n >= 3) return "҃҂г";
    if (n >= 2) return "҃҂в";
    if (n >= 1) return "҃҂а";
    if (n >= 0) return "҃";
};

inter.renderCyrillicLower110 = function(n) {
    if (n >= 10) return "і";
    if (n >= 9) return "ѳ";
    if (n >= 8) return "и";
    if (n >= 7) return "з";
    if (n >= 6) return "ѕ";
    if (n >= 5) return "є";
    if (n >= 4) return "д";
    if (n >= 3) return "г";
    if (n >= 2) return "в";
    if (n >= 1) return "а";
};

inter.renderCyrillicLowerPost = function(n) {
    if (n >= 1) return this.renderCyrillicLower(n);
    if (n >= 0) return "҃";
};

inter.renderCyrillicLowerFinal = function(n) {
    if (n >= 91) return "ч" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 90) return "҃ч";
    if (n >= 81) return "п" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 80) return "҃п";
    if (n >= 71) return "ѻ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 70) return "҃ѻ";
    if (n >= 61) return "ѯ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 60) return "҃ѯ";
    if (n >= 51) return "н" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 50) return "҃н";
    if (n >= 41) return "м" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 40) return "҃м";
    if (n >= 31) return "л" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 30) return "҃л";
    if (n >= 21) return "к" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 20) return "҃к";
    if (n >= 19) return "ѳ҃і";
    if (n >= 18) return "и҃і";
    if (n >= 17) return "з҃і";
    if (n >= 16) return "ѕ҃і";
    if (n >= 15) return "є҃і";
    if (n >= 14) return "д҃і";
    if (n >= 13) return "г҃і";
    if (n >= 12) return "в҃і";
    if (n >= 11) return "а҃і";
    if (n >= 1) return "҃" + this.renderCyrillicLower110(n);
    if (n >= 0) return "҃";
};

inter.renderEthiopicP3 = function(n) {
    if (n >= 1e12) return this.renderEthiopic(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1) return "፼፼፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼፼፼";
};

inter.renderEthiopicP2 = function(n) {
    if (n >= 1e8) return this.renderEthiopic(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1) return "፼፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼፼";
};

inter.renderEthiopicP1 = function(n) {
    if (n >= 1e4) return this.renderEthiopic(Math.floor(n / 1e4)) + "፼" + (n === 1e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 1) return "፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼";
};

inter.renderGreekNumeralMajuscules = function(n) {
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e16) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e16)) + "ΜΜΜΜ" + (n === 1e16 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e16));
    if (n >= 1e12) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e12)) + "ΜΜΜ" + (n === 1e12 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e12));
    if (n >= 1e8) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e8)) + "ΜΜ" + (n === 1e8 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e8));
    if (n >= 1e4) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e4)) + "Μ" + (n === 1e4 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e4));
    if (n >= 1e3) return "͵" + this.renderGreekNumeralMajuscules(Math.floor(n / 1e3)) + (n === 1e3 ? "" : this.renderGreekNumeralMajuscules(n % 1e3));
    if (n >= 900) return "Ϡ" + (n === 900 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 800) return "Ω" + (n === 800 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 700) return "Ψ" + (n === 700 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 600) return "Χ" + (n === 600 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 500) return "Φ" + (n === 500 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 400) return "Υ" + (n === 400 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 300) return "Τ" + (n === 300 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 200) return "Σ" + (n === 200 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 100) return "Ρ" + (n === 100 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 90) return "Ϟ" + (n === 90 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 80) return "Π" + (n === 80 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 70) return "Ο" + (n === 70 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 60) return "Ξ" + (n === 60 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 50) return "Ν" + (n === 50 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 40) return "Μ" + (n === 40 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 30) return "Λ" + (n === 30 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 20) return "Κ" + (n === 20 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 10) return "Ι" + (n === 10 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 9) return "Θ";
    if (n >= 8) return "Η";
    if (n >= 7) return "Ζ";
    if (n >= 6) return "Ϝ";
    if (n >= 5) return "Ε";
    if (n >= 4) return "Δ";
    if (n >= 3) return "Γ";
    if (n >= 2) return "Β";
    if (n >= 1) return "Α";
    if (n >= 0) return "𐆊";
};

inter.renderGreekNumeralMinuscules = function(n) {
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e16) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e16)) + "μμμμ" + (n === 1e16 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e16));
    if (n >= 1e12) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e12)) + "μμμ" + (n === 1e12 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e12));
    if (n >= 1e8) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e8)) + "μμ" + (n === 1e8 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e8));
    if (n >= 1e4) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e4)) + "μ" + (n === 1e4 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e4));
    if (n >= 1e3) return "͵" + this.renderGreekNumeralMinuscules(Math.floor(n / 1e3)) + (n === 1e3 ? "" : this.renderGreekNumeralMinuscules(n % 1e3));
    if (n >= 900) return "ϡ" + (n === 900 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 800) return "ω" + (n === 800 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 700) return "ψ" + (n === 700 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 600) return "χ" + (n === 600 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 500) return "φ" + (n === 500 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 400) return "υ" + (n === 400 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 300) return "τ" + (n === 300 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 200) return "σ" + (n === 200 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 100) return "ρ" + (n === 100 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 90) return "ϟ" + (n === 90 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 80) return "π" + (n === 80 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 70) return "ο" + (n === 70 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 60) return "ξ" + (n === 60 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 50) return "ν" + (n === 50 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 40) return "μ" + (n === 40 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 30) return "λ" + (n === 30 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 20) return "κ" + (n === 20 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 10) return "ι" + (n === 10 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 9) return "θ";
    if (n >= 8) return "η";
    if (n >= 7) return "ζ";
    if (n >= 6) return "ϝ";
    if (n >= 5) return "ε";
    if (n >= 4) return "δ";
    if (n >= 3) return "γ";
    if (n >= 2) return "β";
    if (n >= 1) return "α";
    if (n >= 0) return "𐆊";
};

inter.renderFinancialnumber13 = function(n) {
    if (n >= 1e12) return this.renderSpelloutCardinalFinancial(n);
    if (n >= 20) return "零" + this.renderSpelloutCardinalFinancial(n);
    if (n >= 10) return "零壹" + this.renderSpelloutCardinalFinancial(n);
    if (n >= 1) return "零" + this.renderSpelloutCardinalFinancial(n);
};

inter.renderFinancialnumber8 = function(n) {
    if (n >= 1e7) return this.renderSpelloutCardinalFinancial(n);
    if (n >= 20) return "零" + this.renderSpelloutCardinalFinancial(n);
    if (n >= 10) return "零壹" + this.renderSpelloutCardinalFinancial(n);
    if (n >= 1) return "零" + this.renderSpelloutCardinalFinancial(n);
};

inter.renderFinancialnumber5 = function(n) {
    if (n >= 1e4) return this.renderSpelloutCardinalFinancial(n);
    if (n >= 20) return "零" + this.renderSpelloutCardinalFinancial(n);
    if (n >= 10) return "零壹" + this.renderSpelloutCardinalFinancial(n);
    if (n >= 1) return "零" + this.renderSpelloutCardinalFinancial(n);
};

inter.renderFinancialnumber4 = function(n) {
    if (n >= 1e3) return this.renderSpelloutCardinalFinancial(n);
    if (n >= 20) return "零" + this.renderSpelloutCardinalFinancial(n);
    if (n >= 10) return "零壹" + this.renderSpelloutCardinalFinancial(n);
    if (n >= 1) return "零" + this.renderSpelloutCardinalFinancial(n);
};

inter.renderFinancialnumber3 = function(n) {
    if (n >= 100) return this.renderSpelloutCardinalFinancial(n);
    if (n >= 20) return "零" + this.renderSpelloutCardinalFinancial(n);
    if (n >= 10) return "零壹" + this.renderSpelloutCardinalFinancial(n);
    if (n >= 1) return "零" + this.renderSpelloutCardinalFinancial(n);
};

inter.renderFinancialnumber2 = function(n) {
    if (n >= 20) return this.renderSpelloutCardinalFinancial(n);
    if (n >= 10) return "壹" + this.renderSpelloutCardinalFinancial(n);
    if (n >= 1) return "零" + this.renderSpelloutCardinalFinancial(n);
};

inter.renderHebrewThousands = function(n) {
    if (n >= 401) return this.renderHebrew(n) + "׳";
    if (n >= 100) return this.renderHebrew(n) + (n === 100 ? "" : "׳");
    if (n >= 10) return this.renderHebrew(n) + (n === 10 ? "" : "׳");
    if (n >= 0) return this.renderHebrew(n);
};

inter.renderHebrew099 = function(n) {
    if (n >= 91) return "צ״" + this.renderHebrewItem(n % 10);
    if (n >= 90) return "״צ";
    if (n >= 81) return "פ״" + this.renderHebrewItem(n % 10);
    if (n >= 80) return "״פ";
    if (n >= 71) return "ע״" + this.renderHebrewItem(n % 10);
    if (n >= 70) return "״ע";
    if (n >= 61) return "ס״" + this.renderHebrewItem(n % 10);
    if (n >= 60) return "״ס";
    if (n >= 51) return "נ״" + this.renderHebrewItem(n % 10);
    if (n >= 50) return "״נ";
    if (n >= 41) return "מ״" + this.renderHebrewItem(n % 10);
    if (n >= 40) return "״מ";
    if (n >= 31) return "ל״" + this.renderHebrewItem(n % 10);
    if (n >= 30) return "״ל";
    if (n >= 21) return "כ״" + this.renderHebrewItem(n % 10);
    if (n >= 20) return "״כ";
    if (n >= 17) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "ט״ז";
    if (n >= 15) return "ט״ו";
    if (n >= 11) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 1) return "״" + this.renderHebrewItem(n);
    if (n >= 0) return "׳";
};

inter.renderHebrewItem = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderHebrewItem(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 2100) return this.renderNumber(n, "#,##0");
    if (n >= 2e3) return "תתתתת" + (n === 2e3 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1900) return "תתתתש" + (n === 1900 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1800) return "תתתתר" + (n === 1800 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1700) return "תתתתק" + (n === 1700 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1600) return "תתתת" + (n === 1600 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1500) return "תתתש" + (n === 1500 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1400) return "תתתר" + (n === 1400 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1300) return "תתתק" + (n === 1300 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1200) return "תתת" + (n === 1200 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1100) return "תתש" + (n === 1100 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1e3) return "תתר" + (n === 1e3 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 900) return "תתק" + (n === 900 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 800) return "תת" + (n === 800 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 745) return "תש" + this.renderHebrewItem(n % 100);
    if (n >= 744) return "תשדמ";
    if (n >= 700) return "תש" + (n === 700 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 699) return "תר" + this.renderHebrewItem(n % 100);
    if (n >= 698) return "תרחצ";
    if (n >= 600) return "תר" + (n === 600 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 500) return "תק" + (n === 500 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 400) return "ת" + (n === 400 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 345) return "ש" + this.renderHebrewItem(n % 100);
    if (n >= 344) return "שדמ";
    if (n >= 305) return "ש" + this.renderHebrewItem(n % 100);
    if (n >= 304) return "דש";
    if (n >= 300) return "ש" + (n === 300 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 299) return "ר" + this.renderHebrewItem(n % 100);
    if (n >= 298) return "רחצ";
    if (n >= 200) return "ר" + (n === 200 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 100) return "ק" + (n === 100 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 90) return "צ" + (n === 90 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 80) return "פ" + (n === 80 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 70) return "ע" + (n === 70 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 60) return "ס" + (n === 60 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 50) return "נ" + (n === 50 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 40) return "מ" + (n === 40 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 30) return "ל" + (n === 30 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 20) return "כ" + (n === 20 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 17) return "י" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "טז";
    if (n >= 15) return "טו";
    if (n >= 10) return "י" + (n === 10 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 9) return "ט";
    if (n >= 8) return "ח";
    if (n >= 7) return "ז";
    if (n >= 6) return "ו";
    if (n >= 5) return "ה";
    if (n >= 4) return "ד";
    if (n >= 3) return "ג";
    if (n >= 2) return "ב";
    if (n >= 1) return "א";
    if (n >= 0) return "״";
};

inter.renderTamilThousands = function(n) {
    if (n >= 1e3) return this.renderTamilThousands(Math.floor(n / 1e3)) + "௲" + (n === 1e3 ? "" : this.renderTamilThousands(n % 1e3));
    if (n >= 0) return this.renderTamil(n);
};

inter.renderEthiopicP = function(n) {
    if (n >= 1e16) return this.renderEthiopicP(Math.floor(n / 1e16)) + "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 1e12) return this.renderEthiopicP(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1e8) return this.renderEthiopicP(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1e4) return this.renderEthiopicP(Math.floor(n / 1e4)) + "፼" + (n === 1e4 ? "" : this.renderEthiopicP(n % 1e4));
    if (n >= 1) return this.renderEthiopic(n);
};

inter.timeZones = [].concat(P.timeZones[0], {
    id: "Pacific/Pago_Pago",
    regionId: "061",
    utcStandardOffsetSeconds: -39600,
    displayName: "帕果帕果",
    countryId: "AS"
}, P.timeZones[2], {
    id: "America/Adak",
    regionId: "021",
    utcStandardOffsetSeconds: -36e3,
    displayName: "埃達克",
    countryId: "US"
}, P.timeZones.slice(3, 5), P.timeZones[-1], {
    id: "Pacific/Marquesas",
    regionId: "061",
    utcStandardOffsetSeconds: -34200,
    displayName: "馬克薩斯群島",
    countryId: "PF"
}, {
    id: "America/Yakutat",
    regionId: "021",
    utcStandardOffsetSeconds: -32400,
    displayName: "亞庫塔特",
    countryId: "US"
}, {
    id: "America/Anchorage",
    regionId: "021",
    utcStandardOffsetSeconds: -32400,
    displayName: "安克雷奇",
    countryId: "US"
}, P.timeZones[9], P.timeZones[-1], {
    id: "Pacific/Gambier",
    regionId: "061",
    utcStandardOffsetSeconds: -32400,
    displayName: "甘比爾",
    countryId: "PF"
}, P.timeZones.slice(12, 14), P.timeZones.slice(16, 18), {
    id: "Pacific/Pitcairn",
    regionId: "061",
    utcStandardOffsetSeconds: -28800,
    displayName: "皮特康群島",
    countryId: "PN"
}, {
    id: "America/Tijuana",
    regionId: "013",
    utcStandardOffsetSeconds: -28800,
    displayName: "蒂華納",
    countryId: "MX"
}, P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], {
    id: "America/Inuvik",
    regionId: "021",
    utcStandardOffsetSeconds: -25200,
    displayName: "伊努維克",
    countryId: "CA"
}, P.timeZones.slice(23, 25), {
    id: "America/Boise",
    regionId: "021",
    utcStandardOffsetSeconds: -25200,
    displayName: "博伊西",
    countryId: "US"
}, P.timeZones[25], {
    id: "America/Edmonton",
    regionId: "021",
    utcStandardOffsetSeconds: -25200,
    displayName: "愛民頓",
    countryId: "CA"
}, {
    id: "America/Whitehorse",
    regionId: "021",
    utcStandardOffsetSeconds: -25200,
    displayName: "白馬市",
    countryId: "CA"
}, P.timeZones[-1], {
    id: "America/Dawson_Creek",
    regionId: "021",
    utcStandardOffsetSeconds: -25200,
    displayName: "道森灣",
    countryId: "CA"
}, P.timeZones.slice(32, 34), {
    id: "America/Yellowknife",
    regionId: "021",
    utcStandardOffsetSeconds: -25200,
    displayName: "黃刀鎮",
    countryId: "CA"
}, {
    id: "America/Belize",
    regionId: "013",
    utcStandardOffsetSeconds: -21600,
    displayName: "伯利茲",
    countryId: "BZ"
}, P.timeZones[34], {
    id: "America/North_Dakota/Center",
    regionId: "021",
    utcStandardOffsetSeconds: -21600,
    displayName: "北達科他州中心市",
    countryId: "US"
}, {
    id: "America/North_Dakota/New_Salem",
    regionId: "021",
    utcStandardOffsetSeconds: -21600,
    displayName: "北達科他州新薩勒姆",
    countryId: "US"
}, {
    id: "America/North_Dakota/Beulah",
    regionId: "021",
    utcStandardOffsetSeconds: -21600,
    displayName: "北達科他州比尤拉",
    countryId: "US"
}, {
    id: "America/Indiana/Tell_City",
    regionId: "021",
    utcStandardOffsetSeconds: -21600,
    displayName: "印第安納州特爾城",
    countryId: "US"
}, {
    id: "America/Indiana/Knox",
    regionId: "021",
    utcStandardOffsetSeconds: -21600,
    displayName: "印第安納州諾克斯",
    countryId: "US"
}, {
    id: "America/Guatemala",
    regionId: "013",
    utcStandardOffsetSeconds: -21600,
    displayName: "危地馬拉",
    countryId: "GT"
}, {
    id: "America/Costa_Rica",
    regionId: "013",
    utcStandardOffsetSeconds: -21600,
    displayName: "哥斯達黎加",
    countryId: "CR"
}, {
    id: "America/Mexico_City",
    regionId: "013",
    utcStandardOffsetSeconds: -21600,
    displayName: "墨西哥城",
    countryId: "MX"
}, P.timeZones[43], {
    id: "America/Bahia_Banderas",
    regionId: "013",
    utcStandardOffsetSeconds: -21600,
    displayName: "巴伊亞德班德拉斯",
    countryId: "MX"
}, P.timeZones[45], P.timeZones[47], {
    id: "America/Menominee",
    regionId: "021",
    utcStandardOffsetSeconds: -21600,
    displayName: "梅諾米尼",
    countryId: "US"
}, P.timeZones.slice(48, 50), {
    id: "America/Tegucigalpa",
    regionId: "013",
    utcStandardOffsetSeconds: -21600,
    displayName: "特古西加爾巴",
    countryId: "HN"
}, P.timeZones[51], P.timeZones[-1], {
    id: "America/Chihuahua",
    regionId: "013",
    utcStandardOffsetSeconds: -21600,
    displayName: "芝華華",
    countryId: "MX"
}, {
    id: "America/Monterrey",
    regionId: "013",
    utcStandardOffsetSeconds: -21600,
    displayName: "蒙特雷",
    countryId: "MX"
}, P.timeZones.slice(55, 57), P.timeZones.slice(58, 60), {
    id: "America/Managua",
    regionId: "013",
    utcStandardOffsetSeconds: -21600,
    displayName: "馬那瓜",
    countryId: "NI"
}, P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[65], {
    id: "America/Indiana/Winamac",
    regionId: "021",
    utcStandardOffsetSeconds: -18e3,
    displayName: "印第安納州威納馬克",
    countryId: "US"
}, {
    id: "America/Indiana/Petersburg",
    regionId: "021",
    utcStandardOffsetSeconds: -18e3,
    displayName: "印第安納州彼得堡",
    countryId: "US"
}, {
    id: "America/Indiana/Vincennes",
    regionId: "021",
    utcStandardOffsetSeconds: -18e3,
    displayName: "印第安納州溫森斯",
    countryId: "US"
}, {
    id: "America/Indiana/Vevay",
    regionId: "021",
    utcStandardOffsetSeconds: -18e3,
    displayName: "印第安納州韋韋",
    countryId: "US"
}, {
    id: "America/Indiana/Marengo",
    regionId: "021",
    utcStandardOffsetSeconds: -18e3,
    displayName: "印第安納州馬倫哥",
    countryId: "US"
}, P.timeZones[-1], P.timeZones[-1], P.timeZones.slice(73, 75), P.timeZones[-1], P.timeZones[76], P.timeZones[-1], {
    id: "America/Nassau",
    regionId: "029",
    utcStandardOffsetSeconds: -18e3,
    displayName: "拿騷",
    countryId: "BS"
}, P.timeZones[-1], P.timeZones.slice(80, 83), {
    id: "America/Kentucky/Monticello",
    regionId: "021",
    utcStandardOffsetSeconds: -18e3,
    displayName: "肯塔基州蒙蒂塞洛",
    countryId: "US"
}, P.timeZones[84], {
    id: "America/Rio_Branco",
    regionId: "005",
    utcStandardOffsetSeconds: -18e3,
    displayName: "里約布蘭科",
    countryId: "BR"
}, P.timeZones.slice(86, 88), P.timeZones[90], {
    id: "America/Caracas",
    regionId: "005",
    utcStandardOffsetSeconds: -14400,
    displayName: "加拉加斯",
    countryId: "VE"
}, {
    id: "America/Boa_Vista",
    regionId: "005",
    utcStandardOffsetSeconds: -14400,
    displayName: "博阿維斯塔",
    countryId: "BR"
}, {
    id: "America/Halifax",
    regionId: "021",
    utcStandardOffsetSeconds: -14400,
    displayName: "哈利法克斯",
    countryId: "CA"
}, {
    id: "America/Thule",
    regionId: "021",
    utcStandardOffsetSeconds: -14400,
    displayName: "圖勒",
    countryId: "GL"
}, {
    id: "America/Guyana",
    regionId: "005",
    utcStandardOffsetSeconds: -14400,
    displayName: "圭亞那",
    countryId: "GY"
}, {
    id: "America/Dominica",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "多米尼克",
    countryId: "DM"
}, {
    id: "America/Campo_Grande",
    regionId: "005",
    utcStandardOffsetSeconds: -14400,
    displayName: "大坎普",
    countryId: "BR"
}, {
    id: "America/Anguilla",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "安圭拉",
    countryId: "AI"
}, {
    id: "America/Antigua",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "安提瓜",
    countryId: "AG"
}, {
    id: "America/Barbados",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "巴巴多斯",
    countryId: "BB"
}, {
    id: "America/Cuiaba",
    regionId: "005",
    utcStandardOffsetSeconds: -14400,
    displayName: "庫亞巴",
    countryId: "BR"
}, P.timeZones.slice(98, 100), P.timeZones[-1], {
    id: "America/Grenada",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "格林納達",
    countryId: "GD"
}, {
    id: "America/Glace_Bay",
    regionId: "021",
    utcStandardOffsetSeconds: -14400,
    displayName: "格萊斯灣",
    countryId: "CA"
}, P.timeZones[-1], P.timeZones.slice(106, 110), {
    id: "America/Santiago",
    regionId: "005",
    utcStandardOffsetSeconds: -14400,
    displayName: "聖地亞哥",
    countryId: "CL"
}, P.timeZones[112], {
    id: "America/Santo_Domingo",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "聖多明各",
    countryId: "DO"
}, {
    id: "America/St_Barthelemy",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "聖巴泰勒米",
    countryId: "BL"
}, P.timeZones[115], {
    id: "America/St_Vincent",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "聖文森特",
    countryId: "VC"
}, {
    id: "America/St_Lucia",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "聖盧西亞",
    countryId: "LC"
}, P.timeZones[118], {
    id: "America/Montserrat",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "蒙塞拉特島",
    countryId: "MS"
}, P.timeZones[-1], {
    id: "America/Asuncion",
    regionId: "005",
    utcStandardOffsetSeconds: -14400,
    displayName: "阿松森",
    countryId: "PY"
}, {
    id: "America/Aruba",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "阿魯巴",
    countryId: "AW"
}, {
    id: "America/Porto_Velho",
    regionId: "005",
    utcStandardOffsetSeconds: -14400,
    displayName: "韋柳港",
    countryId: "BR"
}, {
    id: "America/Martinique",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "馬提尼克",
    countryId: "MQ"
}, P.timeZones.slice(124, 126), {
    id: "America/St_Johns",
    regionId: "021",
    utcStandardOffsetSeconds: -12600,
    displayName: "聖約翰斯",
    countryId: "CA"
}, P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], {
    id: "America/Cayenne",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "卡宴",
    countryId: "GF"
}, {
    id: "Atlantic/Stanley",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "史丹利",
    countryId: "FK"
}, P.timeZones[134], {
    id: "America/Miquelon",
    regionId: "021",
    utcStandardOffsetSeconds: -10800,
    displayName: "密克隆",
    countryId: "PM"
}, {
    id: "America/Bahia",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "巴希雅",
    countryId: "BR"
}, P.timeZones[137], {
    id: "Antarctica/Palmer",
    utcStandardOffsetSeconds: -10800,
    displayName: "帕爾默",
    countryId: "AQ"
}, {
    id: "America/Argentina/La_Rioja",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "拉里奧哈",
    countryId: "AR"
}, P.timeZones[140], {
    id: "America/Fortaleza",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "福塔萊薩",
    countryId: "BR"
}, {
    id: "America/Recife",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "累西腓",
    countryId: "BR"
}, {
    id: "Antarctica/Rothera",
    utcStandardOffsetSeconds: -10800,
    displayName: "羅瑟拉站",
    countryId: "AQ"
}, P.timeZones.slice(143, 147), {
    id: "America/Montevideo",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "蒙得維的亞",
    countryId: "UY"
}, P.timeZones.slice(148, 151), {
    id: "America/Araguaina",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "阿拉瓜伊納",
    countryId: "BR"
}, {
    id: "America/Maceio",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "馬塞約",
    countryId: "BR"
}, P.timeZones[-1], P.timeZones[156], {
    id: "America/Noronha",
    regionId: "005",
    utcStandardOffsetSeconds: -7200,
    displayName: "諾羅尼亞",
    countryId: "BR"
}, P.timeZones.slice(158, 160), {
    id: "Atlantic/Cape_Verde",
    regionId: "011",
    utcStandardOffsetSeconds: -3600,
    displayName: "佛得角",
    countryId: "CV"
}, P.timeZones[-1], P.timeZones.slice(162, 164), {
    id: "Atlantic/Canary",
    regionId: "039",
    utcStandardOffsetSeconds: 0,
    displayName: "加那利",
    countryId: "ES"
}, {
    id: "Africa/Nouakchott",
    regionId: "011",
    utcStandardOffsetSeconds: 0,
    displayName: "努瓦克肖特",
    countryId: "MR"
}, P.timeZones[165], {
    id: "Europe/Guernsey",
    regionId: "154",
    utcStandardOffsetSeconds: 0,
    displayName: "根西島",
    countryId: "GG"
}, P.timeZones[169], P.timeZones[-1], P.timeZones[171], {
    id: "Antarctica/Troll",
    utcStandardOffsetSeconds: 0,
    displayName: "特羅爾站",
    countryId: "AQ"
}, P.timeZones[172], P.timeZones[-1], {
    id: "Africa/Conakry",
    regionId: "011",
    utcStandardOffsetSeconds: 0,
    displayName: "科納克里",
    countryId: "GN"
}, P.timeZones.slice(175, 179), P.timeZones[180], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], {
    id: "Africa/Abidjan",
    regionId: "011",
    utcStandardOffsetSeconds: 0,
    displayName: "阿比贊",
    countryId: "CI"
}, {
    id: "Atlantic/Reykjavik",
    regionId: "154",
    utcStandardOffsetSeconds: 0,
    displayName: "雷克雅未克",
    countryId: "IS"
}, {
    id: "Atlantic/Madeira",
    regionId: "039",
    utcStandardOffsetSeconds: 0,
    displayName: "馬德拉島",
    countryId: "PT"
}, {
    id: "Europe/Isle_of_Man",
    regionId: "154",
    utcStandardOffsetSeconds: 0,
    displayName: "馬恩島",
    countryId: "IM"
}, P.timeZones[187], {
    id: "Europe/Bratislava",
    regionId: "151",
    utcStandardOffsetSeconds: 3600,
    displayName: "伯拉第斯拉瓦",
    countryId: "SK"
}, {
    id: "Africa/Libreville",
    regionId: "017",
    utcStandardOffsetSeconds: 3600,
    displayName: "利布維",
    countryId: "GA"
}, P.timeZones[188], P.timeZones[-1], P.timeZones[-1], P.timeZones.slice(193, 196), P.timeZones[-1], P.timeZones[198], P.timeZones[-1], P.timeZones[-1], P.timeZones.slice(201, 204), {
    id: "Africa/Lagos",
    regionId: "011",
    utcStandardOffsetSeconds: 3600,
    displayName: "拉各斯",
    countryId: "NG"
}, P.timeZones.slice(205, 207), {
    id: "Europe/Skopje",
    regionId: "039",
    utcStandardOffsetSeconds: 3600,
    displayName: "斯科普里",
    countryId: "MK"
}, {
    id: "Arctic/Longyearbyen",
    regionId: "154",
    utcStandardOffsetSeconds: 3600,
    displayName: "朗伊爾城",
    countryId: "SJ"
}, P.timeZones[-1], P.timeZones[-1], P.timeZones.slice(210, 212), {
    id: "Europe/Podgorica",
    regionId: "039",
    utcStandardOffsetSeconds: 3600,
    displayName: "波德戈里察",
    countryId: "ME"
}, {
    id: "Africa/Bangui",
    regionId: "017",
    utcStandardOffsetSeconds: 3600,
    displayName: "班基",
    countryId: "CF"
}, {
    id: "Africa/Luanda",
    regionId: "017",
    utcStandardOffsetSeconds: 3600,
    displayName: "盧安達",
    countryId: "AO"
}, {
    id: "Europe/Ljubljana",
    regionId: "039",
    utcStandardOffsetSeconds: 3600,
    displayName: "盧布爾雅那",
    countryId: "SI"
}, P.timeZones[215], P.timeZones[217], P.timeZones[-1], P.timeZones[219], P.timeZones.slice(221, 223), {
    id: "Europe/Vaduz",
    regionId: "155",
    utcStandardOffsetSeconds: 3600,
    displayName: "華杜茲",
    countryId: "LI"
}, P.timeZones[224], {
    id: "Europe/Sarajevo",
    regionId: "039",
    utcStandardOffsetSeconds: 3600,
    displayName: "薩拉熱窩",
    countryId: "BA"
}, {
    id: "Europe/Zagreb",
    regionId: "039",
    utcStandardOffsetSeconds: 3600,
    displayName: "薩格勒布",
    countryId: "HR"
}, P.timeZones[225], {
    id: "Europe/Belgrade",
    regionId: "039",
    utcStandardOffsetSeconds: 3600,
    displayName: "貝爾格萊德",
    countryId: "RS"
}, {
    id: "Africa/Kinshasa",
    regionId: "017",
    utcStandardOffsetSeconds: 3600,
    displayName: "金沙薩",
    countryId: "CD"
}, P.timeZones[-1], P.timeZones[-1], P.timeZones[230], P.timeZones.slice(232, 234), {
    id: "Europe/Malta",
    regionId: "039",
    utcStandardOffsetSeconds: 3600,
    displayName: "馬耳他",
    countryId: "MT"
}, P.timeZones[-1], P.timeZones[-1], {
    id: "Asia/Gaza",
    regionId: "145",
    utcStandardOffsetSeconds: 7200,
    displayName: "加沙",
    countryId: "PS"
}, P.timeZones[238], P.timeZones[-1], P.timeZones[-1], P.timeZones[241], P.timeZones[-1], {
    id: "Europe/Chisinau",
    regionId: "151",
    utcStandardOffsetSeconds: 7200,
    displayName: "基希訥烏",
    countryId: "MD"
}, P.timeZones[-1], P.timeZones[244], {
    id: "Asia/Nicosia",
    regionId: "145",
    utcStandardOffsetSeconds: 7200,
    displayName: "尼科西亞",
    countryId: "CY"
}, P.timeZones[-1], P.timeZones.slice(248, 250), {
    id: "Asia/Hebron",
    regionId: "145",
    utcStandardOffsetSeconds: 7200,
    displayName: "希伯侖",
    countryId: "PS"
}, P.timeZones[-1], {
    id: "Africa/Windhoek",
    regionId: "018",
    utcStandardOffsetSeconds: 7200,
    displayName: "溫特和克",
    countryId: "NA"
}, P.timeZones[252], P.timeZones[-1], P.timeZones[254], {
    id: "Africa/Lusaka",
    regionId: "014",
    utcStandardOffsetSeconds: 7200,
    displayName: "盧薩卡",
    countryId: "ZM"
}, {
    id: "Africa/Johannesburg",
    regionId: "018",
    utcStandardOffsetSeconds: 7200,
    displayName: "約翰內斯堡",
    countryId: "ZA"
}, P.timeZones.slice(256, 258), P.timeZones[-1], P.timeZones[259], P.timeZones[261], P.timeZones[-1], P.timeZones[264], P.timeZones[-1], {
    id: "Africa/Maseru",
    regionId: "018",
    utcStandardOffsetSeconds: 7200,
    displayName: "馬塞魯",
    countryId: "LS"
}, P.timeZones[266], P.timeZones[-1], P.timeZones[-1], P.timeZones.slice(270, 273), {
    id: "Africa/Nairobi",
    regionId: "014",
    utcStandardOffsetSeconds: 10800,
    displayName: "內羅畢",
    countryId: "KE"
}, {
    id: "Asia/Riyadh",
    regionId: "145",
    utcStandardOffsetSeconds: 10800,
    displayName: "利雅得",
    countryId: "SA"
}, {
    id: "Asia/Qatar",
    regionId: "145",
    utcStandardOffsetSeconds: 10800,
    displayName: "卡塔爾",
    countryId: "QA"
}, {
    id: "Africa/Djibouti",
    regionId: "014",
    utcStandardOffsetSeconds: 10800,
    displayName: "吉布提",
    countryId: "DJ"
}, P.timeZones[-1], P.timeZones[277], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[282], {
    id: "Africa/Mogadishu",
    regionId: "014",
    utcStandardOffsetSeconds: 10800,
    displayName: "摩加迪沙",
    countryId: "SO"
}, P.timeZones[-1], {
    id: "Antarctica/Syowa",
    utcStandardOffsetSeconds: 10800,
    displayName: "昭和站",
    countryId: "AQ"
}, P.timeZones[-1], {
    id: "Indian/Comoro",
    regionId: "014",
    utcStandardOffsetSeconds: 10800,
    displayName: "科摩羅",
    countryId: "KM"
}, P.timeZones[-1], P.timeZones[290], {
    id: "Africa/Dar_es_Salaam",
    regionId: "014",
    utcStandardOffsetSeconds: 10800,
    displayName: "達累斯薩拉姆",
    countryId: "TZ"
}, P.timeZones[291], {
    id: "Indian/Mayotte",
    regionId: "014",
    utcStandardOffsetSeconds: 10800,
    displayName: "馬約特",
    countryId: "YT"
}, P.timeZones[293], P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones.slice(297, 299), {
    id: "Indian/Mauritius",
    regionId: "014",
    utcStandardOffsetSeconds: 14400,
    displayName: "毛里裘斯",
    countryId: "MU"
}, P.timeZones[300], {
    id: "Indian/Reunion",
    regionId: "014",
    utcStandardOffsetSeconds: 14400,
    displayName: "留尼旺",
    countryId: "RE"
}, P.timeZones[-1], {
    id: "Asia/Yerevan",
    regionId: "145",
    utcStandardOffsetSeconds: 14400,
    displayName: "耶烈萬",
    countryId: "AM"
}, P.timeZones[304], {
    id: "Asia/Muscat",
    regionId: "145",
    utcStandardOffsetSeconds: 14400,
    displayName: "馬斯喀特",
    countryId: "OM"
}, P.timeZones[306], P.timeZones[-1], P.timeZones[308], {
    id: "Indian/Kerguelen",
    utcStandardOffsetSeconds: 18e3,
    displayName: "凱爾蓋朗群島",
    countryId: "TF"
}, {
    id: "Asia/Karachi",
    regionId: "034",
    utcStandardOffsetSeconds: 18e3,
    displayName: "卡拉奇",
    countryId: "PK"
}, P.timeZones[-1], P.timeZones[312], {
    id: "Asia/Dushanbe",
    regionId: "143",
    utcStandardOffsetSeconds: 18e3,
    displayName: "杜尚別",
    countryId: "TJ"
}, P.timeZones[314], {
    id: "Antarctica/Mawson",
    utcStandardOffsetSeconds: 18e3,
    displayName: "莫森站",
    countryId: "AQ"
}, {
    id: "Asia/Yekaterinburg",
    regionId: "151",
    utcStandardOffsetSeconds: 18e3,
    displayName: "葉卡捷琳堡",
    countryId: "RU"
}, {
    id: "Asia/Ashgabat",
    regionId: "143",
    utcStandardOffsetSeconds: 18e3,
    displayName: "阿什哈巴德",
    countryId: "TM"
}, P.timeZones[-1], P.timeZones[319], {
    id: "Indian/Maldives",
    regionId: "034",
    utcStandardOffsetSeconds: 18e3,
    displayName: "馬爾代夫",
    countryId: "MV"
}, P.timeZones[-1], {
    id: "Asia/Colombo",
    regionId: "034",
    utcStandardOffsetSeconds: 19800,
    displayName: "科倫坡",
    countryId: "LK"
}, P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], {
    id: "Indian/Chagos",
    utcStandardOffsetSeconds: 21600,
    displayName: "查戈斯群島",
    countryId: "IO"
}, {
    id: "Asia/Bishkek",
    regionId: "143",
    utcStandardOffsetSeconds: 21600,
    displayName: "比斯凱克",
    countryId: "KG"
}, P.timeZones[-1], P.timeZones.slice(329, 331), P.timeZones[-1], P.timeZones[332], P.timeZones[-1], {
    id: "Indian/Cocos",
    utcStandardOffsetSeconds: 23400,
    displayName: "可可斯群島",
    countryId: "CC"
}, P.timeZones[-1], P.timeZones[-1], P.timeZones[-1], P.timeZones[338], P.timeZones[-1], {
    id: "Antarctica/Davis",
    utcStandardOffsetSeconds: 25200,
    displayName: "戴維斯站",
    countryId: "AQ"
}, P.timeZones.slice(341, 343), P.timeZones[-1], P.timeZones[344], P.timeZones[-1], P.timeZones.slice(346, 349), P.timeZones[-1], {
    id: "Asia/Irkutsk",
    regionId: "151",
    utcStandardOffsetSeconds: 28800,
    displayName: "伊爾庫茨克",
    countryId: "RU"
}, P.timeZones[354], P.timeZones[-1], P.timeZones[-1], P.timeZones[357], P.timeZones[-1], P.timeZones[359], {
    id: "Asia/Macau",
    regionId: "030",
    utcStandardOffsetSeconds: 28800,
    displayName: "澳門",
    countryId: "MO"
}, P.timeZones[360], {
    id: "Australia/Perth",
    regionId: "053",
    utcStandardOffsetSeconds: 28800,
    displayName: "珀斯",
    countryId: "AU"
}, {
    id: "Asia/Makassar",
    regionId: "035",
    utcStandardOffsetSeconds: 28800,
    displayName: "錫江",
    countryId: "ID"
}, {
    id: "Asia/Hong_Kong",
    regionId: "030",
    utcStandardOffsetSeconds: 28800,
    displayName: "香港",
    countryId: "HK"
}, P.timeZones[362], P.timeZones[-1], P.timeZones.slice(365, 367), P.timeZones[-1], P.timeZones[-1], P.timeZones[369], {
    id: "Asia/Jayapura",
    regionId: "035",
    utcStandardOffsetSeconds: 32400,
    displayName: "查雅普拉",
    countryId: "ID"
}, P.timeZones[-1], {
    id: "Asia/Yakutsk",
    regionId: "151",
    utcStandardOffsetSeconds: 32400,
    displayName: "雅庫茨克",
    countryId: "RU"
}, P.timeZones.slice(372, 375), {
    id: "Australia/Adelaide",
    regionId: "053",
    utcStandardOffsetSeconds: 34200,
    displayName: "阿德萊德",
    countryId: "AU"
}, P.timeZones[-1], P.timeZones[-1], P.timeZones[378], {
    id: "Australia/Brisbane",
    regionId: "053",
    utcStandardOffsetSeconds: 36e3,
    displayName: "布里斯本",
    countryId: "AU"
}, {
    id: "Australia/Sydney",
    regionId: "053",
    utcStandardOffsetSeconds: 36e3,
    displayName: "悉尼",
    countryId: "AU"
}, {
    id: "Antarctica/DumontDUrville",
    utcStandardOffsetSeconds: 36e3,
    displayName: "杜蒙迪維爾站",
    countryId: "AQ"
}, P.timeZones[-1], P.timeZones.slice(382, 384), {
    id: "Australia/Hobart",
    regionId: "053",
    utcStandardOffsetSeconds: 36e3,
    displayName: "荷伯特",
    countryId: "AU"
}, P.timeZones.slice(385, 387), {
    id: "Antarctica/Macquarie",
    regionId: "053",
    utcStandardOffsetSeconds: 36e3,
    displayName: "麥夸里",
    countryId: "AU"
}, P.timeZones[389], P.timeZones[-1], P.timeZones[-1], {
    id: "Antarctica/Casey",
    utcStandardOffsetSeconds: 39600,
    displayName: "凱西站",
    countryId: "AQ"
}, {
    id: "Pacific/Noumea",
    regionId: "054",
    utcStandardOffsetSeconds: 39600,
    displayName: "努美阿",
    countryId: "NC"
}, P.timeZones[-1], {
    id: "Pacific/Bougainville",
    regionId: "054",
    utcStandardOffsetSeconds: 39600,
    displayName: "布干維爾島",
    countryId: "PG"
}, P.timeZones[395], {
    id: "Pacific/Guadalcanal",
    regionId: "054",
    utcStandardOffsetSeconds: 39600,
    displayName: "瓜達爾卡納爾島",
    countryId: "SB"
}, {
    id: "Pacific/Kosrae",
    regionId: "057",
    utcStandardOffsetSeconds: 39600,
    displayName: "科斯雷",
    countryId: "FM"
}, P.timeZones[398], P.timeZones[400], P.timeZones[-1], P.timeZones[-1], P.timeZones[403], {
    id: "Pacific/Wake",
    utcStandardOffsetSeconds: 43200,
    displayName: "威克島",
    countryId: "UM"
}, P.timeZones.slice(405, 407), {
    id: "Pacific/Nauru",
    regionId: "057",
    utcStandardOffsetSeconds: 43200,
    displayName: "瑙魯",
    countryId: "NR"
}, {
    id: "Pacific/Kwajalein",
    regionId: "057",
    utcStandardOffsetSeconds: 43200,
    displayName: "瓜加林環礁",
    countryId: "MH"
}, P.timeZones[-1], {
    id: "Asia/Anadyr",
    regionId: "151",
    utcStandardOffsetSeconds: 43200,
    displayName: "阿納德爾",
    countryId: "RU"
}, {
    id: "Pacific/Majuro",
    regionId: "057",
    utcStandardOffsetSeconds: 43200,
    displayName: "馬久羅",
    countryId: "MH"
}, {
    id: "Antarctica/McMurdo",
    utcStandardOffsetSeconds: 43200,
    displayName: "麥克默多站",
    countryId: "AQ"
}, {
    id: "Pacific/Chatham",
    regionId: "053",
    utcStandardOffsetSeconds: 45900,
    displayName: "查塔姆",
    countryId: "NZ"
}, P.timeZones[-1], {
    id: "Pacific/Fakaofo",
    regionId: "061",
    utcStandardOffsetSeconds: 46800,
    displayName: "法考福環礁",
    countryId: "TK"
}, {
    id: "Pacific/Tongatapu",
    regionId: "061",
    utcStandardOffsetSeconds: 46800,
    displayName: "湯加塔布島",
    countryId: "TO"
}, P.timeZones.slice(417, 419));

inter.territories = [].concat(P.territories[-1], P.territories[-1], P.territories[2], _fk3r190, P.territories.slice(4, 7), P.territories[-1], P.territories.slice(8, 10), _fk3r101, _fk3r102, P.territories.slice(11, 13), P.territories[-1], P.territories[-1], P.territories[-1], P.territories[16], _fk3r114, _fk3r115, P.territories.slice(17, 19), _fk3r135, _fk3r79, P.territories[21], _fk3r157, P.territories[24], _fk3r136, _fk3r182, _fk3r183, _fk3r191, P.territories[-1], _fk3r103, _fk3r104, P.territories[30], P.territories[-1], P.territories.slice(32, 34), P.territories[-1], P.territories.slice(35, 37), _fk3r174, P.territories[38], _fk3r92, P.territories.slice(40, 42), P.territories[-1], P.territories[43], P.territories[-1], P.territories[45], _fk3r137, _fk3r116, P.territories[47], P.territories[-1], _fk3r138, _fk3r139, _fk3r158, P.territories[-1], _fk3r76, P.territories[52], _fk3r117, P.territories.slice(55, 57), P.territories.slice(58, 60), _fk3r159, P.territories[61], _fk3r118, P.territories[64], P.territories[-1], _fk3r119, _fk3r140, P.territories[-1], _fk3r160, P.territories.slice(68, 70), _fk3r141, _fk3r142, P.territories[71], _fk3r120, P.territories[-1], _fk3r161, P.territories[-1], _fk3r175, P.territories[-1], P.territories[77], P.territories.slice(79, 83), P.territories[-1], P.territories[-1], _fk3r176, P.territories[86], P.territories.slice(88, 90), P.territories[-1], _fk3r143, _fk3r121, P.territories[94], _fk3r122, P.territories.slice(95, 97), P.territories[-1], _fk3r144, _fk3r177, P.territories[-1], P.territories[100], P.territories[-1], P.territories[-1], _fk3r162, _fk3r123, P.territories.slice(106, 109), _fk3r163, P.territories.slice(110, 113), _fk3r124, P.territories.slice(113, 115), _fk3r164, P.territories.slice(115, 117), P.territories[-1], P.territories[118], P.territories[-1], P.territories.slice(120, 124), _fk3r145, P.territories[-1], _fk3r165, _fk3r192, P.territories[126], P.territories[-1], P.territories[128], P.territories[-1], P.territories[-1], P.territories[132], P.territories.slice(134, 138), P.territories[-1], P.territories[140], _fk3r146, P.territories[142], _fk3r147, P.territories[143], P.territories.slice(145, 147), _fk3r166, _fk3r148, P.territories[147], _fk3r167, P.territories[149], _fk3r80, P.territories[151], _fk3r178, P.territories.slice(153, 155), _fk3r194, P.territories[-1], _fk3r188, P.territories.slice(158, 160), _fk3r149, _fk3r150, P.territories[-1], _fk3r105, P.territories.slice(161, 169), _fk3r186, P.territories[169], P.territories[171], _fk3r106, P.territories[-1], P.territories[-1], P.territories[175], P.territories[177], _fk3r151, P.territories.slice(179, 182), _fk3r168, _fk3r125, P.territories.slice(184, 187), P.territories[-1], _fk3r126, _fk3r152, P.territories[-1], P.territories.slice(190, 192), P.territories[-1], P.territories.slice(193, 197), _fk3r127, P.territories.slice(200, 204), _fk3r179, P.territories.slice(205, 207), P.territories[-1], _fk3r107, _fk3r180, _fk3r184, _fk3r169, _fk3r189, P.territories[213], _fk3r153, P.territories.slice(214, 216), P.territories[217], _fk3r108, P.territories.slice(219, 221), _fk3r86, _fk3r181, P.territories[224], P.territories.slice(226, 228), _fk3r154, P.territories[229], _fk3r128, P.territories[-1], P.territories[-1], _fk3r170, P.territories.slice(239, 242), _fk3r129, P.territories[244], P.territories[-1], P.territories[246], P.territories[-1], P.territories[-1], P.territories[249], _fk3r109, _fk3r130, P.territories.slice(257, 259), P.territories[-1], P.territories.slice(262, 265), _fk3r155, P.territories[-1], _fk3r185, _fk3r110, P.territories[-1], P.territories.slice(269, 272), _fk3r131, P.territories[-1], P.territories.slice(273, 277), _fk3r132, _fk3r133, _fk3r156, P.territories.slice(281, 283), _fk3r134, P.territories[283], _fk3r111, _fk3r77, P.territories[-1], _fk3r112);

inter.regions = [].concat(P.territories[-1], P.territories[2], _fk3r190, P.territories[-1], P.territories[11], _fk3r191, P.territories.slice(32, 34), P.territories[-1], P.territories[38], P.territories[41], P.territories[-1], P.territories[-1], P.territories[88], P.territories[132], P.territories[134], P.territories.slice(136, 138), P.territories[145], _fk3r194, P.territories[163], P.territories[206], P.territories[-1], P.territories[244], P.territories[246], P.territories[-1], P.territories[-1], P.territories[273]);

inter.countries = [].concat(P.territories[-1], P.territories.slice(4, 7), P.territories.slice(8, 10), _fk3r101, _fk3r102, P.territories[12], P.territories[-1], P.territories[-1], P.territories[-1], P.territories[16], _fk3r114, _fk3r115, P.territories.slice(17, 19), _fk3r135, _fk3r79, P.territories[21], _fk3r157, P.territories[24], _fk3r136, _fk3r182, _fk3r183, P.territories[-1], _fk3r103, _fk3r104, P.territories[30], P.territories[-1], P.territories.slice(35, 37), _fk3r174, _fk3r92, P.territories[40], P.territories[43], P.territories[-1], P.territories[45], _fk3r137, _fk3r116, P.territories[47], P.territories[-1], _fk3r138, _fk3r139, _fk3r158, P.territories[-1], _fk3r76, P.territories[52], _fk3r117, P.territories.slice(55, 57), P.territories.slice(58, 60), _fk3r159, P.territories[61], _fk3r118, P.territories[64], P.territories[-1], _fk3r119, _fk3r140, P.territories[-1], _fk3r160, P.territories.slice(68, 70), _fk3r141, _fk3r142, P.territories[71], _fk3r120, P.territories[-1], _fk3r161, P.territories[-1], _fk3r175, P.territories.slice(79, 83), P.territories[-1], P.territories[-1], _fk3r176, P.territories[86], P.territories[89], P.territories[-1], _fk3r143, _fk3r121, P.territories[94], _fk3r122, P.territories.slice(95, 97), P.territories[-1], _fk3r144, _fk3r177, P.territories[-1], P.territories[100], P.territories[-1], P.territories[-1], _fk3r162, _fk3r123, P.territories.slice(106, 109), _fk3r163, P.territories.slice(110, 113), _fk3r124, P.territories.slice(113, 115), _fk3r164, P.territories.slice(115, 117), P.territories[-1], P.territories[118], P.territories[-1], P.territories.slice(120, 124), _fk3r145, P.territories[-1], _fk3r165, _fk3r192, P.territories[126], P.territories[-1], P.territories[128], P.territories[-1], P.territories[-1], P.territories[135], P.territories[-1], P.territories[140], _fk3r146, P.territories[142], _fk3r147, P.territories[143], P.territories[146], _fk3r166, _fk3r148, P.territories[147], _fk3r167, P.territories[149], _fk3r80, P.territories[151], _fk3r178, P.territories.slice(153, 155), P.territories[-1], _fk3r188, P.territories.slice(158, 160), _fk3r149, _fk3r150, P.territories[-1], _fk3r105, P.territories.slice(161, 163), P.territories.slice(164, 169), _fk3r186, P.territories[169], P.territories[171], _fk3r106, P.territories[-1], P.territories[-1], P.territories[175], P.territories[177], _fk3r151, P.territories.slice(179, 182), _fk3r168, _fk3r125, P.territories.slice(184, 187), P.territories[-1], _fk3r126, _fk3r152, P.territories[-1], P.territories.slice(190, 192), P.territories[-1], P.territories.slice(193, 197), _fk3r127, P.territories.slice(200, 204), _fk3r179, P.territories[205], _fk3r107, _fk3r180, _fk3r184, _fk3r169, _fk3r189, P.territories[213], _fk3r153, P.territories.slice(214, 216), P.territories[217], _fk3r108, P.territories.slice(219, 221), _fk3r86, _fk3r181, P.territories[224], P.territories.slice(226, 228), _fk3r154, P.territories[229], _fk3r128, P.territories[-1], P.territories[-1], _fk3r170, P.territories.slice(239, 242), _fk3r129, P.territories[-1], P.territories[-1], P.territories[249], _fk3r109, _fk3r130, P.territories.slice(257, 259), P.territories[-1], P.territories.slice(262, 265), _fk3r155, P.territories[-1], _fk3r185, _fk3r110, P.territories[-1], P.territories.slice(269, 272), _fk3r131, P.territories.slice(274, 277), _fk3r132, _fk3r133, _fk3r156, P.territories.slice(281, 283), _fk3r134, P.territories[283], _fk3r111, _fk3r77, P.territories[-1], _fk3r112);

inter.languages = [].concat(P.languages.slice(0, 3), {
    id: "en_us",
    displayName: "美國英文",
    nativeDisplayName: "American English"
}, {
    id: "smn",
    displayName: "伊納里薩米文",
    nativeDisplayName: "anarâškielâ"
}, P.languages[4], {
    id: "en_au",
    displayName: "澳洲英文",
    nativeDisplayName: "Australian English"
}, {
    id: "az",
    displayName: "阿塞拜疆文",
    nativeDisplayName: "azərbaycan dili"
}, P.languages[6], P.languages[-1], {
    id: "bs",
    displayName: "波斯尼亞文",
    nativeDisplayName: "bosanski"
}, {
    id: "br",
    displayName: "布里多尼文",
    nativeDisplayName: "brezhoneg"
}, {
    id: "en_gb",
    displayName: "英國英文",
    nativeDisplayName: "British English"
}, {
    id: "en_ca",
    displayName: "加拿大英文",
    nativeDisplayName: "Canadian English"
}, {
    id: "ca",
    displayName: "加泰隆尼亞文",
    nativeDisplayName: "català"
}, P.languages[11], {
    id: "sn",
    displayName: "修納文",
    nativeDisplayName: "chiShona"
}, P.languages.slice(13, 16), P.languages[-1], P.languages[17], P.languages[-1], P.languages.slice(19, 21), P.languages[-1], P.languages[-1], P.languages[-1], {
    id: "es_es",
    displayName: "歐洲西班牙文",
    nativeDisplayName: "español de España"
}, {
    id: "es_mx",
    displayName: "墨西哥西班牙文",
    nativeDisplayName: "español de México"
}, {
    id: "es_419",
    displayName: "拉丁美洲西班牙文",
    nativeDisplayName: "español latinoamericano"
}, {
    id: "eo",
    displayName: "世界語",
    nativeDisplayName: "esperanto"
}, P.languages[-1], P.languages.slice(26, 29), P.languages[-1], {
    id: "fr_ca",
    displayName: "加拿大法文",
    nativeDisplayName: "français canadien"
}, {
    id: "fr_ch",
    displayName: "瑞士法文",
    nativeDisplayName: "français suisse"
}, P.languages[-1], P.languages.slice(31, 34), {
    id: "gl",
    displayName: "加里西亞文",
    nativeDisplayName: "galego"
}, P.languages.slice(35, 39), P.languages[-1], {
    id: "hr",
    displayName: "克羅地亞文",
    nativeDisplayName: "hrvatski"
}, P.languages[41], P.languages[-1], P.languages.slice(43, 45), P.languages[-1], P.languages.slice(46, 48), {
    id: "it",
    displayName: "意大利文",
    nativeDisplayName: "italiano"
}, P.languages[-1], P.languages.slice(50, 57), P.languages[-1], P.languages[58], {
    id: "rw",
    displayName: "盧旺達文",
    nativeDisplayName: "Kinyarwanda"
}, P.languages.slice(60, 65), {
    id: "sw_cd",
    displayName: "剛果史瓦希里文",
    nativeDisplayName: "Kiswahili ya Kongo"
}, P.languages[-1], P.languages[-1], P.languages[-1], P.languages[69], {
    id: "mfe",
    displayName: "毛里裘斯克里奧爾文",
    nativeDisplayName: "kreol morisien"
}, P.languages.slice(71, 73), P.languages[-1], P.languages[-1], P.languages[75], P.languages[-1], P.languages[-1], P.languages[78], {
    id: "to",
    displayName: "湯加文",
    nativeDisplayName: "lea fakatonga"
}, P.languages[-1], P.languages[-1], P.languages.slice(82, 86), P.languages[-1], P.languages[87], {
    id: "mg",
    displayName: "馬拉加斯文",
    nativeDisplayName: "Malagasy"
}, {
    id: "mt",
    displayName: "馬耳他文",
    nativeDisplayName: "Malti"
}, P.languages[90], {
    id: "ro_md",
    displayName: "摩爾多瓦羅馬尼亞文",
    nativeDisplayName: "moldovenească"
}, P.languages.slice(92, 96), P.languages[-1], P.languages[97], P.languages[-1], P.languages.slice(99, 102), P.languages[-1], {
    id: "pt_br",
    displayName: "巴西葡萄牙語",
    nativeDisplayName: "português do Brasil"
}, {
    id: "pt_pt",
    displayName: "歐洲葡萄牙文",
    nativeDisplayName: "português europeu"
}, P.languages.slice(103, 107), P.languages[-1], P.languages.slice(108, 111), {
    id: "de_ch",
    displayName: "瑞士德語",
    nativeDisplayName: "Schweizer Hochdeutsch"
}, {
    id: "gsw",
    displayName: "瑞士德文",
    nativeDisplayName: "Schwiizertüütsch"
}, P.languages.slice(113, 115), P.languages[-1], P.languages[-1], {
    id: "sl",
    displayName: "斯洛文尼亞文",
    nativeDisplayName: "slovenščina"
}, {
    id: "so",
    displayName: "索馬里文",
    nativeDisplayName: "Soomaali"
}, P.languages[119], P.languages[-1], P.languages[-1], P.languages.slice(122, 124), P.languages[-1], P.languages[125], P.languages[-1], P.languages.slice(127, 129), P.languages[-1], P.languages[130], P.languages[-1], P.languages.slice(132, 137), {
    id: "de_at",
    displayName: "奧地利德文",
    nativeDisplayName: "Österreichisches Deutsch"
}, P.languages[-1], P.languages[138], P.languages[-1], P.languages.slice(140, 146), P.languages[-1], P.languages[147], P.languages[-1], P.languages.slice(149, 152), P.languages[-1], P.languages.slice(153, 157), {
    id: "ug",
    displayName: "維吾爾語",
    nativeDisplayName: "ئۇيغۇرچە"
}, {
    id: "ur",
    displayName: "烏爾都文",
    nativeDisplayName: "اردو"
}, P.languages[-1], P.languages[160], P.languages[-1], P.languages.slice(162, 164), {
    id: "ps",
    displayName: "普什圖語",
    nativeDisplayName: "پښتو"
}, P.languages.slice(165, 169), P.languages[-1], P.languages.slice(170, 173), P.languages[-1], P.languages[-1], P.languages[-1], {
    id: "or",
    displayName: "奧里雅文",
    nativeDisplayName: "ଓଡ଼ିଆ"
}, {
    id: "ta",
    displayName: "泰米爾文",
    nativeDisplayName: "தமிழ்"
}, P.languages[178], {
    id: "kn",
    displayName: "坎納達文",
    nativeDisplayName: "ಕನ್ನಡ"
}, {
    id: "ml",
    displayName: "馬拉雅拉姆文",
    nativeDisplayName: "മലയാളം"
}, P.languages[181], P.languages[-1], {
    id: "lo",
    displayName: "老撾文",
    nativeDisplayName: "ລາວ"
}, P.languages[-1], P.languages.slice(185, 187), {
    id: "ka",
    displayName: "格魯吉亞文",
    nativeDisplayName: "ქართული"
}, P.languages[188], P.languages[-1], P.languages[-1], {
    id: "zgh",
    displayName: "摩洛哥標準塔馬齊格特文",
    nativeDisplayName: "ⵜⴰⵎⴰⵣⵉⵖⵜ"
}, P.languages[192], P.languages[-1], P.languages.slice(194, 196), P.languages[-1], P.languages[-1], P.languages[198], P.languages[-1], P.languages[200], P.languages[-1], P.languages.slice(202, 204), P.languages[-1], P.languages.slice(205, 207), P.languages[-1], P.languages[-1], P.languages.slice(210, 212), {
    id: "sd",
    displayName: "信德語"
}, P.languages[-1], P.languages[214], P.languages[-1], P.languages.slice(216, 218), P.languages[-1], P.languages.slice(219, 229), P.languages[-1], P.languages.slice(230, 234), {
    id: "az_arab",
    displayName: "南阿塞拜疆文"
}, P.languages.slice(234, 237), P.languages[-1], P.languages[-1], P.languages[-1], P.languages[-1], P.languages.slice(241, 245), P.languages[-1], P.languages[246], P.languages[-1], P.languages.slice(248, 250), P.languages[-1], P.languages[251], P.languages[-1], P.languages[-1], P.languages[254], P.languages[-1], P.languages.slice(256, 261), P.languages[-1], P.languages[262], P.languages[-1], P.languages.slice(264, 287), P.languages[-1], P.languages[288], P.languages[-1], P.languages.slice(290, 292), P.languages[-1], P.languages.slice(293, 303), P.languages[-1], P.languages.slice(304, 329), {
    id: "ba",
    displayName: "巴什基爾文"
}, P.languages.slice(330, 332), P.languages[-1], P.languages[333], P.languages[-1], P.languages.slice(335, 337), P.languages[-1], P.languages.slice(338, 340), P.languages[-1], P.languages.slice(341, 360), P.languages[-1], P.languages.slice(361, 364), P.languages[-1], P.languages.slice(365, 371), P.languages[-1], P.languages[-1], P.languages.slice(373, 385), P.languages[-1], P.languages.slice(386, 390), P.languages[-1], P.languages[-1], P.languages.slice(392, 395), P.languages[-1], P.languages[396], P.languages.slice(398, 405), P.languages[-1], P.languages.slice(406, 409), P.languages[-1], P.languages[410], P.languages[-1], P.languages[-1], P.languages[-1], P.languages.slice(414, 418), P.languages[-1], P.languages.slice(419, 422), P.languages[-1], P.languages[-1], P.languages[-1], P.languages.slice(426, 434), P.languages[-1], P.languages.slice(435, 444), P.languages[-1], P.languages[445], P.languages[-1], P.languages.slice(447, 456), P.languages[-1], P.languages[457], P.languages[-1], {
    id: "wbp",
    displayName: "瓦爾皮里文"
}, P.languages.slice(459, 461), P.languages[-1], P.languages[-1], P.languages.slice(463, 467), P.languages[-1], P.languages.slice(468, 470), P.languages[-1], P.languages.slice(471, 473), P.languages[-1], P.languages.slice(474, 476), P.languages[-1], P.languages.slice(477, 487), P.languages[-1], P.languages.slice(488, 499), P.languages[-1], P.languages[500], P.languages[-1], P.languages[-1], P.languages.slice(503, 505), P.languages[506], P.languages[-1], P.languages[508], {
    id: "nds_nl",
    displayName: "荷蘭低地德文"
}, P.languages[-1], P.languages[-1], P.languages.slice(511, 515), {
    id: "lol",
    displayName: "蒙古語"
}, P.languages.slice(515, 530), P.languages[-1], P.languages.slice(531, 533), P.languages[-1], P.languages[534], {
    id: "nqo",
    displayName: "西非書面語言（N’ko）"
}, P.languages.slice(535, 543), P.languages[-1], P.languages.slice(544, 546), P.languages[-1], P.languages.slice(547, 555), P.languages[-1], P.languages.slice(556, 560), P.languages[-1], P.languages[561], P.languages[-1], P.languages.slice(563, 565), P.languages[-1], P.languages.slice(566, 569), P.languages[-1], P.languages[-1], P.languages[-1], P.languages.slice(572, 574), P.languages[-1], P.languages.slice(575, 579), P.languages[-1], P.languages.slice(580, 583), P.languages[-1], P.languages.slice(584, 596), P.languages[-1], P.languages[-1], P.languages.slice(598, 600));

inter.scripts = [].concat(P.scripts.slice(0, 2), P.scripts[-1], P.scripts.slice(3, 5), {
    id: "Sinh",
    displayName: "僧伽羅文"
}, P.scripts[-1], P.scripts.slice(6, 8), P.scripts[-1], P.scripts.slice(9, 12), P.scripts[-1], P.scripts.slice(13, 16), P.scripts[-1], P.scripts.slice(17, 19), P.scripts[-1], P.scripts[-1], P.scripts.slice(21, 25), P.scripts[-1], {
    id: "Guru",
    displayName: "古木基文"
}, P.scripts[-1], P.scripts.slice(28, 30), P.scripts[31], {
    id: "Knda",
    displayName: "坎納達文"
}, {
    id: "Ethi",
    displayName: "埃塞俄比亞文"
}, P.scripts.slice(34, 36), P.scripts[-1], P.scripts[38], {
    id: "Orya",
    displayName: "奧里雅文"
}, P.scripts.slice(40, 43), P.scripts[-1], {
    id: "Thaa",
    displayName: "它拿字母"
}, P.scripts[44], P.scripts.slice(46, 50), P.scripts[-1], P.scripts[-1], P.scripts[52], P.scripts[-1], P.scripts.slice(54, 56), P.scripts[-1], P.scripts.slice(57, 62), P.scripts[-1], P.scripts.slice(63, 68), {
    id: "Latn",
    displayName: "拉丁字母"
}, P.scripts.slice(69, 73), P.scripts[-1], P.scripts.slice(74, 80), P.scripts[-1], P.scripts.slice(82, 85), P.scripts[-1], P.scripts.slice(86, 92), P.scripts[-1], P.scripts[93], {
    id: "Geor",
    displayName: "格魯吉亞文"
}, P.scripts[-1], {
    id: "Deva",
    displayName: "梵文"
}, P.scripts.slice(95, 97), P.scripts.slice(98, 101), P.scripts[-1], P.scripts[102], P.scripts[-1], P.scripts[104], {
    id: "Taml",
    displayName: "泰米爾文"
}, P.scripts.slice(105, 108), P.scripts[-1], P.scripts[-1], P.scripts[-1], P.scripts[111], P.scripts[-1], P.scripts[-1], P.scripts.slice(114, 118), {
    id: "Hans",
    displayName: "簡體字"
}, P.scripts.slice(119, 122), P.scripts[-1], P.scripts.slice(123, 127), {
    id: "Hant",
    displayName: "繁體字"
}, P.scripts[128], {
    id: "Laoo",
    displayName: "老撾文"
}, P.scripts[-1], P.scripts[-1], P.scripts[-1], P.scripts.slice(132, 134), {
    id: "Tibt",
    displayName: "藏文"
}, P.scripts[134], P.scripts[136], {
    id: "Cyrl",
    displayName: "西里爾文"
}, P.scripts.slice(138, 147), P.scripts[148], P.scripts[-1], P.scripts.slice(150, 152), P.scripts[-1], P.scripts.slice(153, 155), {
    id: "Hang",
    displayName: "韓文字母"
}, {
    id: "Mlym",
    displayName: "馬拉雅拉姆文"
}, P.scripts[157], P.scripts[-1], P.scripts.slice(159, 161));

inter.currencies = [].concat(P.currencies.slice(0, 2), {
    id: "XAF",
    displayName: "中非法郎",
    symbol: "FCFA",
    other: "法郎 (CFA–BEAC)"
}, P.currencies[2], {
    id: "YER",
    displayName: "也門里雅",
    symbol: "YER",
    other: "葉門里亞爾"
}, P.currencies[4], {
    id: "AZN",
    displayName: "亞塞拜疆馬納特",
    symbol: "AZN",
    other: "亞塞拜然馬納特"
}, P.currencies.slice(5, 13), {
    id: "BZD",
    displayName: "伯利茲元",
    symbol: "BZD",
    other: "貝里斯元"
}, {
    id: "CVE",
    displayName: "佛得角埃斯庫多",
    symbol: "CVE",
    other: "維德角埃斯庫多"
}, P.currencies.slice(13, 19), {
    id: "HRK",
    displayName: "克羅地亞庫納",
    symbol: "HRK",
    other: "克羅埃西亞庫納"
}, P.currencies.slice(20, 24), {
    id: "LRD",
    displayName: "利比利亞元",
    symbol: "LRD",
    other: "賴比瑞亞元"
}, P.currencies[24], {
    id: "CAD",
    displayName: "加拿大元",
    symbol: "CA$",
    other: "加幣"
}, {
    id: "GHS",
    displayName: "加納塞地",
    symbol: "GHS",
    other: "迦納塞地"
}, P.currencies[-1], {
    id: "KPW",
    displayName: "北韓圜",
    symbol: "KPW",
    other: "北韓圓"
}, {
    id: "TTD",
    displayName: "千里達和多巴哥元",
    symbol: "TTD",
    other: "千里達及托巴哥元"
}, P.currencies.slice(29, 38), {
    id: "BWP",
    displayName: "博茨瓦納普拉",
    symbol: "BWP",
    other: "波札那普拉"
}, {
    id: "QAR",
    displayName: "卡塔爾里亞爾",
    symbol: "QAR",
    other: "卡達里亞爾"
}, P.currencies[39], P.currencies.slice(41, 43), {
    id: "GTQ",
    displayName: "危地馬拉格查爾",
    symbol: "GTQ",
    other: "瓜地馬拉格查爾"
}, P.currencies.slice(43, 48), {
    id: "DJF",
    displayName: "吉布提法郎",
    symbol: "DJF",
    other: "吉布地法郎"
}, P.currencies[50], {
    id: "KZT",
    displayName: "哈薩克坦吉",
    symbol: "KZT",
    other: "卡扎克斯坦坦吉"
}, P.currencies.slice(51, 53), {
    id: "CRC",
    displayName: "哥斯達黎加科郎",
    symbol: "CRC",
    other: "哥斯大黎加科朗"
}, P.currencies[54], P.currencies.slice(56, 60), {
    id: "TZS",
    displayName: "坦桑尼亞先令",
    symbol: "TZS",
    other: "坦尚尼亞先令"
}, P.currencies[61], {
    id: "ETB",
    displayName: "埃塞俄比亞比爾",
    symbol: "ETB",
    other: "衣索比亞比爾"
}, P.currencies.slice(62, 64), {
    id: "SLL",
    displayName: "塞拉利昂利昂",
    symbol: "SLL",
    other: "獅子山利昂"
}, {
    id: "RSD",
    displayName: "塞爾維亞第納爾",
    symbol: "RSD",
    other: "塞爾維亞戴納"
}, {
    id: "SCR",
    displayName: "塞舌爾盧比",
    symbol: "SCR",
    other: "塞席爾盧比"
}, P.currencies.slice(66, 69), {
    id: "XOF",
    displayName: "多哥非洲共同體法郎",
    symbol: "CFA",
    other: "法郎 (CFA–BCEAO)"
}, {
    id: "DOP",
    displayName: "多米尼加披索",
    symbol: "DOP",
    other: "多明尼加披索"
}, {
    id: "XPF",
    displayName: "太平洋法郎",
    symbol: "CFPF",
    other: "法郎 (CFP)"
}, P.currencies.slice(71, 74), P.currencies[-1], P.currencies.slice(75, 80), P.currencies.slice(82, 84), P.currencies[-1], {
    id: "NGN",
    displayName: "尼日利亞奈拉",
    symbol: "NGN",
    other: "奈及利亞奈拉"
}, P.currencies[85], {
    id: "GMD",
    displayName: "岡比亞達拉西",
    symbol: "GMD",
    other: "甘比亞達拉西"
}, P.currencies.slice(86, 88), {
    id: "BBD",
    displayName: "巴巴多斯元",
    symbol: "BBD",
    other: "巴貝多元"
}, {
    id: "PGK",
    displayName: "巴布亞新幾內亞基那",
    symbol: "PGK",
    other: "巴布亞紐幾內亞基那"
}, P.currencies[-1], P.currencies.slice(90, 99), {
    id: "BIF",
    displayName: "布隆迪法郎",
    symbol: "BIF",
    other: "蒲隆地法郎"
}, P.currencies.slice(100, 107), {
    id: "ITL",
    displayName: "意大利里拉",
    symbol: "ITL",
    other: "義大利里拉"
}, P.currencies.slice(107, 109), {
    id: "SBD",
    displayName: "所羅門群島元",
    symbol: "SBD",
    other: "索羅門群島元"
}, P.currencies.slice(109, 111), P.currencies[-1], P.currencies.slice(112, 114), P.currencies[-1], P.currencies[-1], {
    id: "MDL",
    displayName: "摩爾多瓦列伊",
    symbol: "MDL",
    other: "摩杜雲列伊"
}, P.currencies.slice(117, 121), {
    id: "SZL",
    displayName: "斯威士蘭里朗吉尼",
    symbol: "SZL",
    other: "史瓦濟蘭里朗吉尼"
}, P.currencies[-1], P.currencies.slice(122, 124), {
    id: "SGD",
    displayName: "新加坡元",
    symbol: "SGD",
    other: "新加坡幣"
}, {
    id: "TWD",
    displayName: "新台幣",
    symbol: "NT$",
    other: "新台幣"
}, P.currencies.slice(126, 131), {
    id: "XCD",
    displayName: "東加勒比元",
    symbol: "EC$",
    other: "格瑞那達元"
}, P.currencies[132], {
    id: "KHR",
    displayName: "柬埔寨里爾",
    symbol: "KHR",
    other: "柬埔寨瑞爾"
}, {
    id: "GEL",
    displayName: "格魯吉亞拉里",
    symbol: "GEL",
    other: "喬治亞拉里"
}, P.currencies.slice(136, 146), {
    id: "MRO",
    displayName: "毛里塔尼亞烏吉亞",
    symbol: "MRO",
    other: "茅利塔尼亞烏吉亞"
}, {
    id: "MUR",
    displayName: "毛里裘斯盧布",
    symbol: "MUR",
    other: "模里西斯盧比"
}, P.currencies[146], {
    id: "SAR",
    displayName: "沙特阿拉伯里亞爾",
    symbol: "SAR",
    other: "沙烏地里亞爾"
}, P.currencies.slice(148, 151), P.currencies[-1], P.currencies[156], {
    id: "BAM",
    displayName: "波斯尼亞-赫塞哥維納可轉換馬克",
    symbol: "BAM",
    other: "波士尼亞-赫塞哥維納可轉換馬克"
}, {
    id: "BAD",
    displayName: "波斯尼亞-赫塞哥維納第納爾",
    symbol: "BAD",
    other: "波士尼亞-赫塞哥維納第納爾"
}, P.currencies.slice(159, 163), P.currencies[-1], P.currencies[164], {
    id: "HKD",
    displayName: "港元",
    symbol: "HK$",
    other: "港幣"
}, {
    id: "TOP",
    displayName: "湯加潘加",
    symbol: "TOP",
    other: "東加潘加"
}, {
    id: "AUD",
    displayName: "澳元",
    symbol: "AU$",
    other: "澳幣"
}, {
    id: "MOP",
    displayName: "澳門元",
    symbol: "MOP$",
    other: "澳門元"
}, P.currencies.slice(168, 178), P.currencies.slice(179, 183), P.currencies[-1], P.currencies[-1], {
    id: "VUV",
    displayName: "瓦努阿圖瓦圖",
    symbol: "VUV",
    other: "萬那杜瓦圖"
}, P.currencies.slice(187, 192), {
    id: "RWF",
    displayName: "盧旺達法郎",
    symbol: "RWF",
    other: "盧安達法郎"
}, P.currencies.slice(193, 205), P.currencies[-1], P.currencies.slice(206, 208), {
    id: "NZD",
    displayName: "紐西蘭元",
    symbol: "NZ$",
    other: "紐西蘭幣"
}, {
    id: "SOS",
    displayName: "索馬里先令",
    symbol: "SOS",
    other: "索馬利亞先令"
}, P.currencies.slice(212, 216), P.currencies[-1], P.currencies[-1], P.currencies[218], {
    id: "LAK",
    displayName: "老撾基普",
    symbol: "LAK",
    other: "寮國基普"
}, {
    id: "STD",
    displayName: "聖多美和普林西比多布拉",
    symbol: "STD",
    other: "聖多美島和普林西比島多布拉"
}, P.currencies[221], {
    id: "KES",
    displayName: "肯雅先令",
    symbol: "KES",
    other: "肯尼亞先令"
}, P.currencies.slice(223, 228), P.currencies.slice(229, 232), P.currencies[233], {
    id: "MZN",
    displayName: "莫桑比克梅蒂卡爾",
    symbol: "MZN",
    other: "莫三比克梅蒂卡爾"
}, P.currencies[234], P.currencies[236], P.currencies.slice(238, 241), P.currencies.slice(242, 248), P.currencies.slice(249, 251), {
    id: "SRD",
    displayName: "蘇里南元",
    symbol: "SRD",
    other: "蘇利南元"
}, P.currencies.slice(252, 256), P.currencies.slice(258, 260), {
    id: "ZMW",
    displayName: "贊比亞克瓦查",
    symbol: "ZMW",
    other: "尚比亞克瓦查"
}, P.currencies[260], P.currencies[-1], P.currencies.slice(262, 266), P.currencies.slice(267, 269), P.currencies[-1], P.currencies[270], {
    id: "AED",
    displayName: "阿拉伯聯合酋長國迪爾汗",
    symbol: "AED",
    other: "阿拉伯聯合大公國迪爾汗"
}, {
    id: "OMR",
    displayName: "阿曼里奧",
    symbol: "OMR",
    other: "阿曼里亞爾"
}, P.currencies.slice(273, 281), {
    id: "AWG",
    displayName: "阿魯巴盾",
    symbol: "AWG",
    other: "阿路巴盾"
}, {
    id: "KRW",
    displayName: "韓圓",
    symbol: "₩",
    other: "韓圓"
}, P.currencies.slice(283, 289), {
    id: "MVR",
    displayName: "馬爾代夫盧非亞",
    symbol: "MVR",
    other: "馬爾地夫盧非亞"
}, P.currencies[289], P.currencies.slice(291, 296));

module.exports = inter;