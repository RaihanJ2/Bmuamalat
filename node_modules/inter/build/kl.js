function defaults(targetObj) {
    for (var i = 1; i < arguments.length; i += 1) {
        if (arguments[i] && typeof arguments[i] === "object") {
            for (var propertyName in arguments[i]) {
                if (typeof targetObj[propertyName] === "undefined") {
                    targetObj[propertyName] = arguments[i][propertyName];
                }
            }
        }
    }
    return targetObj;
}

var P = require("./root.js"), inter = defaults({
    renderers: {}
}, P);

var _bds1 = {
    "default": "#,##0 %"
}, _bds2 = {
    am: "u.t.",
    pm: "u.k."
}, _bds3 = [ "S1", "S2", "S3", "S4" ], _bds4 = {
    all: {
        leap: "{0}bis"
    }
}, _bds5 = {
    one: "{0}°",
    other: "{0}°"
}, _bds6 = {
    one: "{0}′",
    other: "{0}′"
}, _bds7 = {
    one: "{0}″",
    other: "{0}″"
}, _bds8 = {
    one: "{0}m",
    other: "{0}m"
}, _bds9 = {
    one: "0 td",
    other: "0 td"
}, _bds10 = {
    one: "0 mn",
    other: "0 mn"
}, _bds11 = {
    one: "0 md",
    other: "0 md"
}, _bds12 = {
    one: "0 bn",
    other: "0 bn"
}, _bds13 = {
    a: "h a – h a",
    h: "h–h a"
}, _bds14 = [ "Before R.O.C.", "R.O.C." ], _bds15 = {
    one: "{0}°F",
    other: "{0}°F"
}, _bds16 = {
    one: "00 td",
    other: "00 td"
}, _bds17 = {
    one: "00 mn",
    other: "00 mn"
}, _bds18 = {
    one: "00 md",
    other: "00 md"
}, _bds19 = {
    one: "00 bn",
    other: "00 bn"
}, _bds20 = {
    one: "¤0 td",
    other: "¤0 td"
}, _bds21 = {
    one: "¤0 mn",
    other: "¤0 mn"
}, _bds22 = {
    one: "¤0 md",
    other: "¤0 md"
}, _bds23 = {
    one: "¤0 bn",
    other: "¤0 bn"
}, _bds24 = {
    one: "{0} fm",
    other: "{0} fm"
}, _bds25 = {
    one: "{0} ac",
    other: "{0} ac"
}, _bds26 = {
    one: "{0} mi",
    other: "{0} mi"
}, _bds27 = {
    one: "{0} yd",
    other: "{0} yd"
}, _bds28 = {
    one: "{0} ML",
    other: "{0} ML"
}, _bds29 = {
    one: "{0} hL",
    other: "{0} hL"
}, _bds30 = {
    one: "{0} mL",
    other: "{0} mL"
}, _bds31 = {
    one: "000 td",
    other: "000 td"
}, _bds32 = {
    one: "000 mn",
    other: "000 mn"
}, _bds33 = {
    one: "000 md",
    other: "000 md"
}, _bds34 = {
    one: "000 bn",
    other: "000 bn"
}, _bds35 = {
    one: "¤00 td",
    other: "¤00 td"
}, _bds36 = {
    one: "¤00 mn",
    other: "¤00 mn"
}, _bds37 = {
    one: "¤00 md",
    other: "¤00 md"
}, _bds38 = {
    one: "¤00 bn",
    other: "¤00 bn"
}, _bds39 = {
    a: "h a – h a v",
    h: "h–h a v"
}, _bds40 = [ "S", "A", "M", "P", "S", "T", "A" ], _bds41 = {
    d: "MM-d – d",
    M: "MM-d – MM-d"
}, _bds42 = {
    one: "{0} fod",
    other: "{0} fod"
}, _bds43 = {
    one: "{0} fur",
    other: "{0} fur"
}, _bds44 = {
    one: "{0} mi²",
    other: "{0} mi²"
}, _bds45 = {
    one: "{0} ft²",
    other: "{0} ft²"
}, _bds46 = {
    one: "{0} mi³",
    other: "{0} mi³"
}, _bds47 = {
    one: "{0} ssk",
    other: "{0} ssk"
}, _bds48 = {
    one: "{0} tsk",
    other: "{0} tsk"
}, _bds49 = {
    one: "¤000 td",
    other: "¤000 td"
}, _bds50 = {
    one: "¤000 mn",
    other: "¤000 mn"
}, _bds51 = {
    one: "¤000 md",
    other: "¤000 md"
}, _bds52 = {
    one: "¤000 bn",
    other: "¤000 bn"
}, _bds53 = {
    M: "y-MM – MM",
    y: "y-MM – y-MM"
}, _bds54 = {
    displayName: "piffissaq ulloq"
}, _bds55 = {
    d: "MMM d–d",
    M: "MMM d – MMM d"
}, _bds56 = {
    wide: [ "AH" ],
    abbreviated: [ "AH" ]
}, _bds57 = {
    one: "{0} m/s²",
    other: "{0} m/s²"
}, _bds58 = {
    one: "{0} inHg",
    other: "{0} inHg"
}, _bds59 = {
    one: "{0} mi/h",
    other: "{0} mi/h"
}, _bds60 = {
    one: "0 tusind",
    other: "0 tusind"
}, _bds61 = {
    H: "HH:mm–HH:mm",
    m: "HH:mm–HH:mm"
}, _bds62 = {
    M: "y-MM – y-MM",
    y: "y-MM – y-MM"
}, _bds63 = {
    M: "U MMM–MMM",
    y: "U MMM – U MMM"
}, _bds64 = {
    one: "{0} unse",
    other: "{0} unser"
}, _bds65 = {
    d: "MM-dd – dd",
    M: "MM-dd – MM-dd"
}, _bds66 = {
    one: "{0} ukioq",
    other: "{0} ukioq"
}, _bds67 = {
    one: "00 tusind",
    other: "00 tusind"
}, _bds68 = {
    one: "{0} tomme",
    other: "{0} tommer"
}, _bds69 = {
    one: "{0} lysåri",
    other: "{0} lysåri"
}, _bds70 = {
    one: "{0} sømili",
    other: "{0} sømili"
}, _bds71 = {
    one: "000 tusind",
    other: "000 tusind"
}, _bds72 = {
    one: "0 million",
    other: "0 millioner"
}, _bds73 = {
    one: "0 billion",
    other: "0 billioner"
}, _bds74 = {
    H: "HH:mm–HH:mm v",
    m: "HH:mm–HH:mm v"
}, _bds75 = {
    d: "MM-dd – MM-dd",
    M: "MM-dd – MM-dd"
}, _bds76 = {
    M: "U MMMM–MMMM",
    y: "U MMMM – U MMMM"
}, _bds77 = {
    one: "00 million",
    other: "00 millioner"
}, _bds78 = {
    one: "0 milliard",
    other: "0 milliarder"
}, _bds79 = {
    one: "00 billion",
    other: "00 billioner"
}, _bds80 = {
    displayName: "nalunaaqutaqaqatigiissut"
}, _bds81 = {
    one: "{0} skålpund",
    other: "{0} skålpund"
}, _bds82 = {
    one: "000 million",
    other: "000 millioner"
}, _bds83 = {
    one: "00 milliard",
    other: "00 milliarder"
}, _bds84 = {
    one: "000 billion",
    other: "000 billioner"
}, _bds85 = {
    one: "om {0} ukioq",
    other: "om {0} ukioq"
}, _bds86 = {
    displayName: "sapaatip akunnerata ullui"
}, _bds87 = {
    one: "000 milliard",
    other: "000 milliarder"
}, _bds88 = [ "sab", "ata", "mar", "pin", "sis", "tal", "arf" ], _bds89 = {
    d: "E, MM-d – E, MM-d",
    M: "E, MM-d – E, MM-d"
}, _bds90 = {
    one: "om {0} qaammat",
    other: "om {0} qaammat"
}, _bds91 = {
    one: "om {0} minutsi",
    other: "om {0} minutsi"
}, _bds92 = {
    one: "om {0} sekundi",
    other: "om {0} sekundi"
}, _bds93 = {
    future: {
        other: "+{0} Q"
    },
    past: {
        other: "-{0} Q"
    }
}, _bds94 = {
    d: "E, MM-dd – E, MM-dd",
    M: "E, MM-dd – E, MM-dd"
}, _bds95 = [ "J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D" ], _bds96 = {
    d: "MM-dd, E – MM-dd, E",
    M: "MM-dd, E – MM-dd, E"
}, _bds97 = {
    d: "MMM d, E – MMM d, E",
    M: "MMM d, E – MMM d, E"
}, _bds98 = {
    wide: [ "ERA0", "ERA1" ],
    abbreviated: [ "ERA0", "ERA1" ]
}, _bds99 = {
    am: "ulloqeqqata-tungaa",
    pm: "ulloqeqqata-kingorna"
}, _bds100 = [ "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" ], _bds101 = {
    a: "h:mm a – h:mm a",
    h: "h:mm–h:mm a",
    m: "h:mm–h:mm a"
}, _bds102 = {
    id: "001",
    displayName: "silarsuaq",
    hasTimeZones: false
}, _bds103 = {
    id: "CX",
    displayName: "Jul-qeqertaq",
    hasTimeZones: true
}, _bds104 = {
    one: "for {0} ukioq siden",
    other: "for {0} ukioq siden"
}, _bds105 = {
    "0": "this quarter",
    "1": "next quarter",
    "-1": "last quarter"
}, _bds106 = {
    id: "DG",
    displayName: "Diego Garcia",
    hasTimeZones: false
}, _bds107 = {
    id: "CC",
    displayName: "Cocos qeqertaq",
    hasTimeZones: true
}, _bds108 = {
    d: "y-MM-d – d",
    M: "y-MM-dd – MM-d",
    y: "y-MM-dd – y-MM-dd"
}, _bds109 = {
    "0": "manna ukioq",
    "1": "tulleq ukioq",
    "-1": "kingulleq ukioq"
}, _bds110 = {
    d: "U MMM d–d",
    M: "U MMM d – MMM d",
    y: "U MMM d – U MMM d"
}, _bds111 = [ "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13" ], _bds112 = {
    id: "BV",
    displayName: "Bouvet qeqertaq",
    hasTimeZones: false
}, _bds113 = {
    a: "h:mm a – h:mm a v",
    h: "h:mm–h:mm a v",
    m: "h:mm–h:mm a v"
}, _bds114 = {
    one: "for {0} qaammat siden",
    other: "for {0} qaammat siden"
}, _bds115 = {
    one: "om {0} ulloq unnuarlu",
    other: "om {0} ulloq unnuarlu"
}, _bds116 = {
    one: "for {0} minutsi siden",
    other: "for {0} minutsi siden"
}, _bds117 = {
    one: "for {0} sekundi siden",
    other: "for {0} sekundi siden"
}, _bds118 = {
    id: "IC",
    displayName: "Kanaria qeqertaq",
    hasTimeZones: false
}, _bds119 = {
    id: "TA",
    displayName: "Tristan da Cunha",
    hasTimeZones: false
}, _bds120 = {
    d: "y-MM-dd – dd",
    M: "y-MM-dd – MM-dd",
    y: "y-MM-dd – y-MM-dd"
}, _bds121 = {
    id: "AC",
    displayName: "Ascension qeqertaq",
    hasTimeZones: false
}, _bds122 = {
    id: "TD",
    displayName: "Chad",
    regionId: "017",
    hasTimeZones: true
}, _bds123 = {
    id: "FJ",
    displayName: "Fiji",
    regionId: "054",
    hasTimeZones: true
}, _bds124 = {
    id: "GU",
    displayName: "Guam",
    regionId: "057",
    hasTimeZones: true
}, _bds125 = {
    id: "IQ",
    displayName: "Irak",
    regionId: "145",
    hasTimeZones: true
}, _bds126 = {
    id: "IR",
    displayName: "Iran",
    regionId: "034",
    hasTimeZones: true
}, _bds127 = {
    id: "CN",
    displayName: "Kina",
    regionId: "030",
    hasTimeZones: true
}, _bds128 = {
    id: "CU",
    displayName: "Kuba",
    regionId: "029",
    hasTimeZones: true
}, _bds129 = {
    id: "LA",
    displayName: "Laos",
    regionId: "035",
    hasTimeZones: true
}, _bds130 = {
    id: "ML",
    displayName: "Mali",
    regionId: "011",
    hasTimeZones: true
}, _bds131 = {
    id: "NU",
    displayName: "Niue",
    regionId: "061",
    hasTimeZones: true
}, _bds132 = {
    id: "OM",
    displayName: "Oman",
    regionId: "145",
    hasTimeZones: true
}, _bds133 = {
    id: "PE",
    displayName: "Peru",
    regionId: "005",
    hasTimeZones: true
}, _bds134 = {
    id: "TG",
    displayName: "Togo",
    regionId: "011",
    hasTimeZones: true
}, _bds135 = {
    id: "AW",
    displayName: "Aruba",
    regionId: "029",
    hasTimeZones: true
}, _bds136 = {
    id: "BJ",
    displayName: "Benin",
    regionId: "011",
    hasTimeZones: true
}, _bds137 = {
    id: "MM",
    displayName: "Burma",
    regionId: "035",
    hasTimeZones: true
}, _bds138 = {
    id: "EA",
    displayName: "Ceuta aamma Melilla",
    hasTimeZones: false
}, _bds139 = {
    id: "CL",
    displayName: "Chile",
    regionId: "005",
    hasTimeZones: true
}, _bds140 = {
    id: "CP",
    displayName: "Clipperton qeqertaq",
    hasTimeZones: false
}, _bds141 = {
    id: "GA",
    displayName: "Gabon",
    regionId: "017",
    hasTimeZones: true
}, _bds142 = {
    id: "GH",
    displayName: "Ghana",
    regionId: "011",
    hasTimeZones: true
}, _bds143 = {
    id: "HT",
    displayName: "Haiti",
    regionId: "029",
    hasTimeZones: true
}, _bds144 = {
    id: "IN",
    displayName: "India",
    regionId: "034",
    hasTimeZones: true
}, _bds145 = {
    id: "YE",
    displayName: "Jemen",
    regionId: "145",
    hasTimeZones: true
}, _bds146 = {
    id: "KE",
    displayName: "Kenya",
    regionId: "014",
    hasTimeZones: true
}, _bds147 = {
    id: "LY",
    displayName: "Libya",
    regionId: "015",
    hasTimeZones: true
}, _bds148 = {
    id: "MO",
    displayName: "Macao",
    regionId: "030",
    hasTimeZones: true
}, _bds149 = {
    id: "MT",
    displayName: "Malta",
    regionId: "039",
    hasTimeZones: true
}, _bds150 = {
    id: "NR",
    displayName: "Nauru",
    regionId: "057",
    hasTimeZones: true
}, _bds151 = {
    id: "NP",
    displayName: "Nepal",
    regionId: "034",
    hasTimeZones: true
}, _bds152 = {
    id: "NE",
    displayName: "Niger",
    regionId: "011",
    hasTimeZones: true
}, _bds153 = {
    id: "NO",
    displayName: "Norge",
    regionId: "154",
    hasTimeZones: true
}, _bds154 = {
    id: "PW",
    displayName: "Palau",
    regionId: "057",
    hasTimeZones: true
}, _bds155 = {
    id: "AQ",
    displayName: "Qalasersuaq Kujalleq",
    hasTimeZones: true
}, _bds156 = {
    id: "WS",
    displayName: "Samoa",
    regionId: "061",
    hasTimeZones: true
}, _bds157 = {
    id: "SY",
    displayName: "Syria",
    regionId: "145",
    hasTimeZones: true
}, _bds158 = {
    id: "TO",
    displayName: "Tonga",
    regionId: "061",
    hasTimeZones: true
}, _bds159 = {
    "0": "manna qaammat",
    "1": "tulleq qaammat",
    "-1": "kingulleq qaammat"
}, _bds160 = {
    id: "AO",
    displayName: "Angola",
    regionId: "017",
    hasTimeZones: true
}, _bds161 = {
    id: "BE",
    displayName: "Belgia",
    regionId: "155",
    hasTimeZones: true
}, _bds162 = {
    id: "BZ",
    displayName: "Belize",
    regionId: "013",
    hasTimeZones: true
}, _bds163 = {
    id: "BT",
    displayName: "Bhutan",
    regionId: "034",
    hasTimeZones: true
}, _bds164 = {
    id: "BR",
    displayName: "Brazil",
    regionId: "005",
    hasTimeZones: true
}, _bds165 = {
    id: "BN",
    displayName: "Brunei",
    regionId: "035",
    hasTimeZones: true
}, _bds166 = {
    id: "CA",
    displayName: "Canada",
    regionId: "021",
    hasTimeZones: true
}, _bds167 = {
    id: "CY",
    displayName: "Cypern",
    regionId: "145",
    hasTimeZones: true
}, _bds168 = {
    id: "GM",
    displayName: "Gambia",
    regionId: "011",
    hasTimeZones: true
}, _bds169 = {
    id: "GN",
    displayName: "Guinea",
    regionId: "011",
    hasTimeZones: true
}, _bds170 = {
    id: "GY",
    displayName: "Guyana",
    regionId: "005",
    hasTimeZones: true
}, _bds171 = {
    id: "IL",
    displayName: "Israel",
    regionId: "145",
    hasTimeZones: true
}, _bds172 = {
    id: "IT",
    displayName: "Italia",
    regionId: "039",
    hasTimeZones: true
}, _bds173 = {
    id: "JP",
    displayName: "Japani",
    regionId: "030",
    hasTimeZones: true
}, _bds174 = {
    id: "JE",
    displayName: "Jersey",
    regionId: "154",
    hasTimeZones: true
}, _bds175 = {
    id: "KW",
    displayName: "Kuwait",
    regionId: "145",
    hasTimeZones: true
}, _bds176 = {
    id: "MW",
    displayName: "Malawi",
    regionId: "014",
    hasTimeZones: true
}, _bds177 = {
    id: "MX",
    displayName: "Mexiko",
    regionId: "013",
    hasTimeZones: true
}, _bds178 = {
    id: "MC",
    displayName: "Monaco",
    regionId: "155",
    hasTimeZones: true
}, _bds179 = {
    id: "PA",
    displayName: "Panama",
    regionId: "013",
    hasTimeZones: true
}, _bds180 = {
    id: "PL",
    displayName: "Poleni",
    regionId: "151",
    hasTimeZones: true
}, _bds181 = {
    id: "QA",
    displayName: "Quatar",
    regionId: "145",
    hasTimeZones: true
}, _bds182 = {
    id: "RW",
    displayName: "Rwanda",
    regionId: "014",
    hasTimeZones: true
}, _bds183 = {
    id: "RS",
    displayName: "Serbia",
    regionId: "039",
    hasTimeZones: true
}, _bds184 = {
    id: "ES",
    displayName: "Spania",
    regionId: "039",
    hasTimeZones: true
}, _bds185 = {
    id: "TW",
    displayName: "Taiwan",
    regionId: "030",
    hasTimeZones: true
}, _bds186 = {
    id: "TV",
    displayName: "Tuvalu",
    regionId: "061",
    hasTimeZones: true
}, _bds187 = {
    id: "TR",
    displayName: "Tyrkia",
    regionId: "145",
    hasTimeZones: true
}, _bds188 = {
    id: "UG",
    displayName: "Uganda",
    regionId: "014",
    hasTimeZones: true
}, _bds189 = {
    id: "ZM",
    displayName: "Zambia",
    regionId: "014",
    hasTimeZones: true
}, _bds190 = {
    id: "AX",
    displayName: "Ålandi",
    regionId: "154",
    hasTimeZones: true
}, _bds191 = {
    id: "AL",
    displayName: "Albania",
    regionId: "039",
    hasTimeZones: true
}, _bds192 = {
    id: "AD",
    displayName: "Andorra",
    regionId: "039",
    hasTimeZones: true
}, _bds193 = {
    id: "AM",
    displayName: "Armenia",
    regionId: "145",
    hasTimeZones: true
}, _bds194 = {
    id: "BS",
    displayName: "Bahamas",
    regionId: "029",
    hasTimeZones: true
}, _bds195 = {
    id: "BH",
    displayName: "Bahrain",
    regionId: "145",
    hasTimeZones: true
}, _bds196 = {
    id: "BM",
    displayName: "Bermuda",
    regionId: "021",
    hasTimeZones: true
}, _bds197 = {
    id: "BO",
    displayName: "Bolivia",
    regionId: "005",
    hasTimeZones: true
}, _bds198 = {
    id: "BI",
    displayName: "Burundi",
    regionId: "014",
    hasTimeZones: true
}, _bds199 = {
    id: "KM",
    displayName: "Comoros",
    regionId: "014",
    hasTimeZones: true
}, _bds200 = {
    id: "CW",
    displayName: "Curaçao",
    regionId: "029",
    hasTimeZones: true
}, _bds201 = {
    id: "EC",
    displayName: "Ecuador",
    regionId: "005",
    hasTimeZones: true
}, _bds202 = {
    id: "EG",
    displayName: "Egypten",
    regionId: "015",
    hasTimeZones: true
}, _bds203 = {
    id: "ER",
    displayName: "Eritrea",
    regionId: "014",
    hasTimeZones: true
}, _bds204 = {
    id: "GE",
    displayName: "Georgia",
    regionId: "145",
    hasTimeZones: true
}, _bds205 = {
    id: "GD",
    displayName: "Grenada",
    regionId: "029",
    hasTimeZones: true
}, _bds206 = {
    id: "IE",
    displayName: "Irlandi",
    regionId: "154",
    hasTimeZones: true
}, _bds207 = {
    id: "IS",
    displayName: "Islandi",
    regionId: "154",
    hasTimeZones: true
}, _bds208 = {
    id: "JM",
    displayName: "Jamaica",
    regionId: "029",
    hasTimeZones: true
}, _bds209 = {
    id: "JO",
    displayName: "Jordani",
    regionId: "145",
    hasTimeZones: true
}, _bds210 = {
    id: "CM",
    displayName: "Kamerun",
    regionId: "017",
    hasTimeZones: true
}, _bds211 = {
    id: "XK",
    displayName: "Kosovo",
    regionId: "039",
    hasTimeZones: false
}, _bds212 = {
    id: "HR",
    displayName: "Kroatia",
    regionId: "039",
    hasTimeZones: true
}, _bds213 = {
    id: "LS",
    displayName: "Lesotho",
    regionId: "018",
    hasTimeZones: true
}, _bds214 = {
    id: "LB",
    displayName: "Libanon",
    regionId: "145",
    hasTimeZones: true
}, _bds215 = {
    id: "LR",
    displayName: "Liberia",
    regionId: "011",
    hasTimeZones: true
}, _bds216 = {
    id: "MA",
    displayName: "Marocko",
    regionId: "015",
    hasTimeZones: true
}, _bds217 = {
    id: "YT",
    displayName: "Mayotte",
    regionId: "014",
    hasTimeZones: true
}, _bds218 = {
    id: "MD",
    displayName: "Moldova",
    regionId: "151",
    hasTimeZones: true
}, _bds219 = {
    id: "NA",
    displayName: "Namibia",
    regionId: "018",
    hasTimeZones: true
}, _bds220 = {
    id: "NG",
    displayName: "Nigeria",
    regionId: "011",
    hasTimeZones: true
}, _bds221 = {
    id: "RO",
    displayName: "Rumænia",
    regionId: "151",
    hasTimeZones: true
}, _bds222 = {
    id: "RE",
    displayName: "Réunion",
    regionId: "014",
    hasTimeZones: true
}, _bds223 = {
    id: "SN",
    displayName: "Senegal",
    regionId: "011",
    hasTimeZones: true
}, _bds224 = {
    id: "SO",
    displayName: "Somalia",
    regionId: "014",
    hasTimeZones: true
}, _bds225 = {
    id: "SE",
    displayName: "Sverige",
    regionId: "154",
    hasTimeZones: true
}, _bds226 = {
    id: "CZ",
    displayName: "Tjekkia",
    regionId: "151",
    hasTimeZones: true
}, _bds227 = {
    id: "TK",
    displayName: "Tokelau",
    regionId: "061",
    hasTimeZones: true
}, _bds228 = {
    id: "TN",
    displayName: "Tunisia",
    regionId: "015",
    hasTimeZones: true
}, _bds229 = {
    id: "UA",
    displayName: "Ukraina",
    regionId: "151",
    hasTimeZones: true
}, _bds230 = {
    id: "HU",
    displayName: "Ungarni",
    regionId: "151",
    hasTimeZones: true
}, _bds231 = {
    id: "UY",
    displayName: "Uruguay",
    regionId: "005",
    hasTimeZones: true
}, _bds232 = {
    id: "VU",
    displayName: "Vanuatu",
    regionId: "054",
    hasTimeZones: true
}, _bds233 = {
    id: "VN",
    displayName: "Vietnam",
    regionId: "035",
    hasTimeZones: true
}, _bds234 = {
    id: "AT",
    displayName: "Østrigi",
    regionId: "155",
    hasTimeZones: true
}, _bds235 = {
    one: "om {0} sapaatip-akunnera",
    other: "om {0} sapaatip-akunnera"
}, _bds236 = {
    id: "DZ",
    displayName: "Algeriet",
    regionId: "015",
    hasTimeZones: true
}, _bds237 = {
    id: "AI",
    displayName: "Anguilla",
    regionId: "029",
    hasTimeZones: true
}, _bds238 = {
    id: "BB",
    displayName: "Barbados",
    regionId: "029",
    hasTimeZones: true
}, _bds239 = {
    id: "BW",
    displayName: "Botswana",
    regionId: "018",
    hasTimeZones: true
}, _bds240 = {
    id: "BG",
    displayName: "Bulgaria",
    regionId: "151",
    hasTimeZones: true
}, _bds241 = {
    id: "CO",
    displayName: "Colombia",
    regionId: "005",
    hasTimeZones: true
}, _bds242 = {
    id: "DK",
    displayName: "Danmarki",
    regionId: "154",
    hasTimeZones: true
}, _bds243 = {
    id: "DJ",
    displayName: "Djibouti",
    regionId: "014",
    hasTimeZones: true
}, _bds244 = {
    id: "DM",
    displayName: "Dominica",
    regionId: "029",
    hasTimeZones: true
}, _bds245 = {
    id: "EE",
    displayName: "Estlandi",
    regionId: "154",
    hasTimeZones: true
}, _bds246 = {
    id: "ET",
    displayName: "Ethiopia",
    regionId: "014",
    hasTimeZones: true
}, _bds247 = {
    id: "FI",
    displayName: "Finlandi",
    regionId: "154",
    hasTimeZones: true
}, _bds248 = {
    id: "GG",
    displayName: "Guernsey",
    regionId: "154",
    hasTimeZones: true
}, _bds249 = {
    id: "NL",
    displayName: "Hollandi",
    regionId: "155",
    hasTimeZones: true
}, _bds250 = {
    id: "HN",
    displayName: "Honduras",
    regionId: "013",
    hasTimeZones: true
}, _bds251 = {
    id: "HK",
    displayName: "Hongkong",
    regionId: "030",
    hasTimeZones: true
}, _bds252 = {
    id: "KH",
    displayName: "Kambodia",
    regionId: "035",
    hasTimeZones: true
}, _bds253 = {
    id: "KI",
    displayName: "Kiribati",
    regionId: "057",
    hasTimeZones: true
}, _bds254 = {
    id: "LV",
    displayName: "Letlandi",
    regionId: "154",
    hasTimeZones: true
}, _bds255 = {
    id: "LT",
    displayName: "Litaueni",
    regionId: "154",
    hasTimeZones: true
}, _bds256 = {
    id: "MY",
    displayName: "Malaysia",
    regionId: "035",
    hasTimeZones: true
}, _bds257 = {
    id: "PY",
    displayName: "Paraguay",
    regionId: "005",
    hasTimeZones: true
}, _bds258 = {
    id: "RU",
    displayName: "Ruslandi",
    regionId: "151",
    hasTimeZones: true
}, _bds259 = {
    id: "CH",
    displayName: "Schweizi",
    regionId: "155",
    hasTimeZones: true
}, _bds260 = {
    id: "SK",
    displayName: "Slovakia",
    regionId: "151",
    hasTimeZones: true
}, _bds261 = {
    id: "SI",
    displayName: "Slovenia",
    regionId: "039",
    hasTimeZones: true
}, _bds262 = {
    id: "SR",
    displayName: "Suriname",
    regionId: "005",
    hasTimeZones: true
}, _bds263 = {
    id: "TZ",
    displayName: "Tanzania",
    regionId: "014",
    hasTimeZones: true
}, _bds264 = {
    id: "VA",
    displayName: "Vatikani",
    regionId: "039",
    hasTimeZones: true
}, _bds265 = {
    id: "ZW",
    displayName: "Zimbabwe",
    regionId: "014",
    hasTimeZones: true
}, _bds266 = {
    id: "AR",
    displayName: "Argentina",
    regionId: "005",
    hasTimeZones: true
}, _bds267 = {
    id: "AU",
    displayName: "Australia",
    regionId: "053",
    hasTimeZones: true
}, _bds268 = {
    id: "CV",
    displayName: "Cap Verde",
    regionId: "011",
    hasTimeZones: true
}, _bds269 = {
    id: "FR",
    displayName: "Frankrigi",
    regionId: "155",
    hasTimeZones: true
}, _bds270 = {
    id: "GI",
    displayName: "Gibraltar",
    regionId: "039",
    hasTimeZones: true
}, _bds271 = {
    id: "GT",
    displayName: "Guatemala",
    regionId: "013",
    hasTimeZones: true
}, _bds272 = {
    id: "ID",
    displayName: "Indonesia",
    regionId: "035",
    hasTimeZones: true
}, _bds273 = {
    id: "MK",
    displayName: "Makedonia",
    regionId: "039",
    hasTimeZones: true
}, _bds274 = {
    id: "MU",
    displayName: "Mauritius",
    regionId: "014",
    hasTimeZones: true
}, _bds275 = {
    id: "NI",
    displayName: "Nicaragua",
    regionId: "013",
    hasTimeZones: true
}, _bds276 = {
    id: "PK",
    displayName: "Pakistani",
    regionId: "034",
    hasTimeZones: true
}, _bds277 = {
    id: "PT",
    displayName: "Portugali",
    regionId: "039",
    hasTimeZones: true
}, _bds278 = {
    id: "SG",
    displayName: "Singapore",
    regionId: "035",
    hasTimeZones: true
}, _bds279 = {
    id: "LK",
    displayName: "Sri Lanka",
    regionId: "034",
    hasTimeZones: true
}, _bds280 = {
    id: "TH",
    displayName: "Thailandi",
    regionId: "035",
    hasTimeZones: true
}, _bds281 = {
    id: "DE",
    displayName: "Tysklandi",
    regionId: "155",
    hasTimeZones: true
}, _bds282 = {
    id: "VE",
    displayName: "Venezuela",
    regionId: "005",
    hasTimeZones: true
}, _bds283 = {
    d: "y-MM-dd – y-MM-dd",
    M: "y-MM-dd – y-MM-dd",
    y: "y-MM-dd – y-MM-dd"
}, _bds284 = {
    id: "BD",
    displayName: "Bangladesh",
    regionId: "034",
    hasTimeZones: true
}, _bds285 = {
    id: "CR",
    displayName: "Costa Rica",
    regionId: "013",
    hasTimeZones: true
}, _bds286 = {
    id: "GP",
    displayName: "Guadeloupe",
    regionId: "029",
    hasTimeZones: true
}, _bds287 = {
    id: "LU",
    displayName: "Luxembourg",
    regionId: "155",
    hasTimeZones: true
}, _bds288 = {
    id: "MG",
    displayName: "Madagaskar",
    regionId: "014",
    hasTimeZones: true
}, _bds289 = {
    id: "MQ",
    displayName: "Martinique",
    regionId: "029",
    hasTimeZones: true
}, _bds290 = {
    id: "MR",
    displayName: "Mauritania",
    regionId: "011",
    hasTimeZones: true
}, _bds291 = {
    id: "FM",
    displayName: "Micronesia",
    regionId: "057",
    hasTimeZones: true
}, _bds292 = {
    id: "ME",
    displayName: "Montenegro",
    regionId: "039",
    hasTimeZones: true
}, _bds293 = {
    id: "MS",
    displayName: "Montserrat",
    regionId: "029",
    hasTimeZones: true
}, _bds294 = {
    id: "MZ",
    displayName: "Moçambique",
    regionId: "014",
    hasTimeZones: true
}, _bds295 = {
    id: "SM",
    displayName: "San Marino",
    regionId: "039",
    hasTimeZones: true
}, _bds296 = {
    id: "SZ",
    displayName: "Swazilandi",
    regionId: "018",
    hasTimeZones: true
}, _bds297 = {
    id: "SV",
    displayName: "El Salvador",
    regionId: "013",
    hasTimeZones: true
}, _bds298 = {
    id: "GR",
    displayName: "Grækenlandi",
    regionId: "039",
    hasTimeZones: true
}, _bds299 = {
    id: "IM",
    displayName: "Isle of Man",
    regionId: "154",
    hasTimeZones: true
}, _bds300 = {
    id: "KZ",
    displayName: "Kasakhstani",
    regionId: "143",
    hasTimeZones: true
}, _bds301 = {
    id: "PR",
    displayName: "Puerto Rico",
    regionId: "029",
    hasTimeZones: true
}, _bds302 = {
    id: "LC",
    displayName: "Saint Lucia",
    regionId: "029",
    hasTimeZones: true
}, _bds303 = {
    id: "FO",
    displayName: "Savalimmiut",
    regionId: "154",
    hasTimeZones: true
}, _bds304 = {
    id: "TJ",
    displayName: "Tajikistani",
    regionId: "143",
    hasTimeZones: true
}, _bds305 = {
    id: "UZ",
    displayName: "Uzbekistani",
    regionId: "143",
    hasTimeZones: true
}, _bds306 = {
    "0": "ullumi",
    "1": "aqagu",
    "2": "aqaguagu",
    "-2": "ippassaani",
    "-1": "ippassaq"
}, _bds307 = {
    id: "AF",
    displayName: "Afghanistani",
    regionId: "034",
    hasTimeZones: true
}, _bds308 = {
    id: "142",
    displayName: "Asia",
    hasTimeZones: false,
    parentRegionId: "001"
}, _bds309 = {
    id: "BF",
    displayName: "Burkina Faso",
    regionId: "011",
    hasTimeZones: true
}, _bds310 = {
    id: "SH",
    displayName: "Saint Helena",
    regionId: "011",
    hasTimeZones: true
}, _bds311 = {
    id: "SA",
    displayName: "Saudi Arabia",
    regionId: "145",
    hasTimeZones: true
}, _bds312 = {
    id: "SL",
    displayName: "Sierra Leone",
    regionId: "011",
    hasTimeZones: true
}, _bds313 = {
    id: "CK",
    displayName: "Cook qeqertaq",
    regionId: "061",
    hasTimeZones: true
}, _bds314 = {
    id: "GW",
    displayName: "Guinea-Bissau",
    regionId: "011",
    hasTimeZones: true
}, _bds315 = {
    id: "BY",
    displayName: "Hvideruslandi",
    regionId: "151",
    hasTimeZones: true
}, _bds316 = {
    id: "SS",
    displayName: "Kujalleqsudan",
    regionId: "014",
    hasTimeZones: true
}, _bds317 = {
    id: "GB",
    displayName: "Tuluit Nunaat",
    regionId: "154",
    hasTimeZones: true
}, _bds318 = {
    id: "TM",
    displayName: "Turkmenistani",
    regionId: "143",
    hasTimeZones: true
}, _bds319 = {
    abbreviated: {
        leap: "{0}bis"
    },
    narrow: {
        leap: "{0}b"
    },
    wide: {
        leap: "{0}bis"
    }
}, _bds320 = {
    id: "002",
    displayName: "Afrika",
    hasTimeZones: false,
    parentRegionId: "001"
}, _bds321 = {
    id: "150",
    displayName: "Europa",
    hasTimeZones: false,
    parentRegionId: "001"
}, _bds322 = {
    id: "CD",
    displayName: "Kongo-Kinshasa",
    regionId: "017",
    hasTimeZones: true
}, _bds323 = {
    id: "KR",
    displayName: "Korea Kujalleq",
    regionId: "030",
    hasTimeZones: true
}, _bds324 = {
    id: "ZA",
    displayName: "Kujalleqafrika",
    regionId: "018",
    hasTimeZones: true
}, _bds325 = {
    id: "LI",
    displayName: "Liechtensteini",
    regionId: "155",
    hasTimeZones: true
}, _bds326 = {
    id: "EH",
    displayName: "Sahara Killiit",
    regionId: "015",
    hasTimeZones: true
}, _bds327 = {
    id: "019",
    displayName: "Amerika",
    hasTimeZones: false,
    parentRegionId: "001"
}, _bds328 = {
    id: "SD",
    displayName: "Avannarleqsudan",
    regionId: "015",
    hasTimeZones: true
}, _bds329 = {
    id: "KY",
    displayName: "Cayman qeqertaq",
    regionId: "029",
    hasTimeZones: true
}, _bds330 = {
    id: "NZ",
    displayName: "Nutaaq Zeelandi",
    regionId: "053",
    hasTimeZones: true
}, _bds331 = {
    id: "009",
    displayName: "Oceania",
    hasTimeZones: false,
    parentRegionId: "001"
}, _bds332 = [ "jan", "feb", "mar", "apr", "maj", "jun", "jul", "aug", "sep", "okt", "nov", "dec" ], _bds333 = {
    one: "for {0} ulloq unnuarlu siden",
    other: "for {0} ulloq unnuarlu siden"
}, _bds334 = [ "M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12" ], _bds335 = {
    id: "GL",
    displayName: "Kalaallit Nunaat",
    regionId: "021",
    hasTimeZones: true
}, _bds336 = {
    id: "KP",
    displayName: "Korea Avannarleq",
    regionId: "030",
    hasTimeZones: true
}, _bds337 = {
    id: "NC",
    displayName: "Nutaaq Caledonia",
    regionId: "054",
    hasTimeZones: true
}, _bds338 = {
    id: "BL",
    displayName: "Saint Barthélemy",
    regionId: "029",
    hasTimeZones: true
}, _bds339 = {
    id: "TL",
    displayName: "Timor Kangilliit",
    regionId: "035",
    hasTimeZones: true
}, _bds340 = {
    id: "CG",
    displayName: "Kongo-Brazzaville",
    regionId: "017",
    hasTimeZones: true
}, _bds341 = {
    id: "054",
    displayName: "Melanesia",
    hasTimeZones: false,
    parentRegionId: "009"
}, _bds342 = {
    id: "061",
    displayName: "Polynesia",
    hasTimeZones: false,
    parentRegionId: "009"
}, _bds343 = {
    one: "om {0} nalunaaquttap-akunnera",
    other: "om {0} nalunaaquttap-akunnera"
}, _bds344 = {
    id: "FK",
    displayName: "Falklandi qeqertaq",
    regionId: "005",
    hasTimeZones: true
}, _bds345 = [ undefined, "zi", "chou", "yin", "mao", "chen", "si", "wu", "wei", "shen", "you", "xu" ], _bds346 = {
    id: "US",
    displayName: "Naalagaaffeqatigiit",
    regionId: "021",
    hasTimeZones: true
}, _bds347 = {
    id: "PG",
    displayName: "Papua Nutaaq Guinea",
    regionId: "054",
    hasTimeZones: true
}, _bds348 = {
    id: "WF",
    displayName: "Wallis aamma Futuna",
    regionId: "061",
    hasTimeZones: true
}, _bds349 = {
    id: "145",
    displayName: "Asia Killiit",
    hasTimeZones: false,
    parentRegionId: "142"
}, _bds350 = {
    id: "AG",
    displayName: "Antigua aamma Barbuda",
    regionId: "029",
    hasTimeZones: true
}, _bds351 = {
    id: "034",
    displayName: "Asia Kujalleq",
    hasTimeZones: false,
    parentRegionId: "142"
}, _bds352 = {
    id: "TT",
    displayName: "Trinidad aamma Tobago",
    regionId: "029",
    hasTimeZones: true
}, _bds353 = {
    one: "for {0} sapaatip-akunnera siden",
    other: "for {0} sapaatip-akunnera siden"
}, _bds354 = {
    id: "011",
    displayName: "Afrika Killiit",
    hasTimeZones: false,
    parentRegionId: "002"
}, _bds355 = {
    id: "155",
    displayName: "Europa Killiit",
    hasTimeZones: false,
    parentRegionId: "150"
}, _bds356 = {
    id: "MF",
    displayName: "Frankrigi Saint Martin",
    regionId: "029",
    hasTimeZones: true
}, _bds357 = {
    id: "018",
    displayName: "Afrika Kujalleq",
    hasTimeZones: false,
    parentRegionId: "002"
}, _bds358 = {
    id: "030",
    displayName: "Asia Kangilliit",
    hasTimeZones: false,
    parentRegionId: "142"
}, _bds359 = {
    id: "143",
    displayName: "Asia Qitiusumik",
    hasTimeZones: false,
    parentRegionId: "142"
}, _bds360 = {
    id: "039",
    displayName: "Europa Kujalleq",
    hasTimeZones: false,
    parentRegionId: "150"
}, _bds361 = {
    id: "KN",
    displayName: "Saint Kitts aamma Nevis",
    regionId: "029",
    hasTimeZones: true
}, _bds362 = {
    id: "ST",
    displayName: "São Tomé aamma Príncipe",
    regionId: "017",
    hasTimeZones: true
}, _bds363 = {
    d: "U MMM d, E – MMM d, E",
    M: "U MMM d, E – MMM d, E",
    y: "U MMM d, E – U MMM d, E"
}, _bds364 = {
    id: "005",
    displayName: "Amerika Kujalleq",
    hasTimeZones: false,
    parentRegionId: "019"
}, _bds365 = {
    id: "BA",
    displayName: "Bosnia aamma Herzegovina",
    regionId: "039",
    hasTimeZones: true
}, _bds366 = {
    id: "SJ",
    displayName: "Svalbard aamma Jan Mayen",
    regionId: "154",
    hasTimeZones: true
}, _bds367 = {
    id: "015",
    displayName: "Afrika Avannarleq",
    hasTimeZones: false,
    parentRegionId: "002"
}, _bds368 = {
    id: "014",
    displayName: "Afrika Kangilliit",
    hasTimeZones: false,
    parentRegionId: "002"
}, _bds369 = {
    id: "017",
    displayName: "Afrika Qitiusumik",
    hasTimeZones: false,
    parentRegionId: "002"
}, _bds370 = {
    id: "154",
    displayName: "Europa Avannarleq",
    hasTimeZones: false,
    parentRegionId: "150"
}, _bds371 = {
    id: "151",
    displayName: "Europa Kangilliit",
    hasTimeZones: false,
    parentRegionId: "150"
}, _bds372 = {
    id: "013",
    displayName: "America Qitiusumik",
    hasTimeZones: false,
    parentRegionId: "019"
}, _bds373 = {
    id: "PM",
    displayName: "Saint Pierre aamma Miquelon",
    regionId: "021",
    hasTimeZones: true
}, _bds374 = {
    d: "E, y-MM-dd – E, y-MM-dd",
    M: "E, y-MM-dd – E, y-MM-dd",
    y: "E, y-MM-dd – E, y-MM-dd"
}, _bds375 = {
    d: "y-MM-dd, E – y-MM-dd, E",
    M: "y-MM-dd, E – y-MM-dd, E",
    y: "y-MM-dd, E – y-MM-dd, E"
}, _bds376 = {
    one: "for {0} nalunaaquttap-akunnera siden",
    other: "for {0} nalunaaquttap-akunnera siden"
}, _bds377 = {
    abbreviated: _bds2,
    narrow: _bds2,
    wide: _bds2
}, _bds378 = {
    "0": "manna sapaatip-akunnera",
    "1": "tulleq sapaatip-akunnera",
    "-1": "kingulleq sapaatip-akunnera"
}, _bds379 = {
    id: "053",
    displayName: "Australia aamma Nutaaq Zeelandi",
    hasTimeZones: false,
    parentRegionId: "009"
}, _bds380 = [ "Muh.", "Saf.", "Rab. I", "Rab. II", "Jum. I", "Jum. II", "Raj.", "Sha.", "Ram.", "Shaw.", "Dhuʻl-Q.", "Dhuʻl-H." ], _bds381 = [ "Tishri", "Heshvan", "Kislev", "Tevet", "Shevat", "Adar I", "Adar", "Nisan", "Iyar", "Sivan", "Tamuz", "Av", "Elul" ], _bds382 = [ "ukiup sisamararterutaa 1", "ukiup sisamararterutaa 2", "ukiup sisamararterutaa 3", "ukiup sisamararterutaa 4" ], _bds383 = [ "Farvardin", "Ordibehesht", "Khordad", "Tir", "Mordad", "Shahrivar", "Mehr", "Aban", "Azar", "Dey", "Bahman", "Esfand" ], _bds384 = {
    future: _bds85,
    past: _bds104
}, _bds385 = [ "Tout", "Baba", "Hator", "Kiahk", "Toba", "Amshir", "Baramhat", "Baramouda", "Bashans", "Paona", "Epep", "Mesra", "Nasie" ], _bds386 = [ "sabaat", "ataasinngorneq", "marlunngorneq", "pingasunngorneq", "sisamanngorneq", "tallimanngorneq", "arfininngorneq" ], _bds387 = {
    "0": "sapaat manna sapaatip-akunnera",
    "1": "sapaat tulleq sapaatip-akunnera",
    "-1": "sapaat kingulleq sapaatip-akunnera"
}, _bds388 = [ "Meskerem", "Tekemt", "Hedar", "Tahsas", "Ter", "Yekatit", "Megabit", "Miazia", "Genbot", "Sene", "Hamle", "Nehasse", "Pagumen" ], _bds389 = {
    future: _bds90,
    past: _bds114
}, _bds390 = {
    future: _bds91,
    past: _bds116
}, _bds391 = {
    future: _bds92,
    past: _bds117
}, _bds392 = [ "Chaitra", "Vaisakha", "Jyaistha", "Asadha", "Sravana", "Bhadra", "Asvina", "Kartika", "Agrahayana", "Pausa", "Magha", "Phalguna" ], _bds393 = {
    abbreviated: _bds2,
    narrow: _bds2,
    wide: _bds99
}, _bds394 = [ "januari", "februari", "martsi", "aprili", "maji", "juni", "juli", "augustusi", "septemberi", "oktoberi", "novemberi", "decemberi" ], _bds395 = {
    relative: _bds387
}, _bds396 = [ "Muharram", "Safar", "Rabiʻ I", "Rabiʻ II", "Jumada I", "Jumada II", "Rajab", "Shaʻban", "Ramadan", "Shawwal", "Dhuʻl-Qiʻdah", "Dhuʻl-Hijjah" ], _bds397 = {
    "0": "marlunngorneq manna sapaatip-akunnera",
    "1": "marlunngorneq tulleq sapaatip-akunnera",
    "-1": "marlunngorneq kingulleq sapaatip-akunnera"
}, _bds398 = {
    "0": "ataasinngorneq manna sapaatip-akunnera",
    "1": "ataasinngorneq tulleq sapaatip-akunnera",
    "-1": "ataasinngorneq kingulleq sapaatip-akunnera"
}, _bds399 = {
    "0": "sisamanngorneq manna sapaatip-akunnera",
    "1": "sisamanngorneq tulleq sapaatip-akunnera",
    "-1": "sisamanngorneq kingulleq sapaatip-akunnera"
}, _bds400 = {
    "0": "arfininngorneq manna sapaatip-akunnera",
    "1": "arfininngorneq tulleq sapaatip-akunnera",
    "-1": "arfininngorneq kingulleq sapaatip-akunnera"
}, _bds401 = {
    "0": "pingasunngorneq manna sapaatip-akunnera",
    "1": "pingasunngorneq tulleq sapaatip-akunnera",
    "-1": "pingasunngorneq kingulleq sapaatip-akunnera"
}, _bds402 = {
    "0": "tallimanngorneq manna sapaatip-akunnera",
    "1": "tallimanngorneq tulleq sapaatip-akunnera",
    "-1": "tallimanngorneq kingulleq sapaatip-akunnera"
}, _bds403 = {
    relative: _bds397
}, _bds404 = {
    future: _bds115,
    past: _bds333
}, _bds405 = {
    displayName: "Quarter",
    relative: _bds105,
    relativeTime: _bds93
}, _bds406 = {
    relative: _bds398
}, _bds407 = {
    relative: _bds399
}, _bds408 = {
    relative: _bds400
}, _bds409 = {
    relative: _bds401
}, _bds410 = {
    relative: _bds402
}, _bds411 = {
    displayName: "minutsi",
    relativeTime: _bds390
}, _bds412 = {
    future: _bds235,
    past: _bds353
}, _bds413 = {
    displayName: "sekundi",
    relative: [ "now" ],
    relativeTime: _bds391
}, _bds414 = {
    decimal: ",",
    group: ".",
    list: ";",
    percentSign: "%",
    plusSign: "+",
    minusSign: "-",
    exponential: "×10^",
    superscriptingExponent: "·",
    perMille: "‰",
    infinity: "∞",
    nan: "¤¤¤",
    timeSeparator: ":"
}, _bds415 = {
    abbreviated: _bds3,
    narrow: _bds3,
    wide: _bds382
}, _bds416 = {
    future: _bds343,
    past: _bds376
}, _bds417 = {
    symbols: _bds414
}, _bds418 = {
    format: _bds319,
    numeric: _bds4,
    standAlone: _bds319
}, _bds419 = {
    displayName: "ukioq",
    relative: _bds109,
    relativeTime: _bds384
}, _bds420 = {
    symbols: _bds414,
    digits: "renderSpelloutCardinal"
}, _bds421 = {
    symbols: _bds414,
    digits: "renderSpelloutCardinalFinancial"
}, _bds422 = {
    abbreviated: _bds334,
    narrow: _bds100,
    wide: _bds334
}, _bds423 = {
    displayName: "qaammat",
    relative: _bds159,
    relativeTime: _bds389
}, _bds424 = {
    displayName: "nalunaaquttap-akunnera",
    relativeTime: _bds416
}, _bds425 = {
    format: _bds393,
    standAlone: _bds377
}, _bds426 = {
    abbreviated: _bds345,
    narrow: _bds345,
    wide: _bds345
}, _bds427 = {
    displayName: "ulloq",
    relative: _bds306,
    relativeTime: _bds404
}, _bds428 = {
    abbreviated: _bds88,
    narrow: _bds40,
    wide: _bds386,
    "short": _bds88
}, _bds429 = {
    format: _bds426
}, _bds430 = {
    abbreviated: _bds332,
    narrow: _bds95,
    wide: _bds394
}, _bds431 = {
    abbreviated: _bds381,
    narrow: _bds111,
    wide: _bds381
}, _bds432 = {
    abbreviated: _bds383,
    narrow: _bds100,
    wide: _bds383
}, _bds433 = {
    abbreviated: _bds385,
    narrow: _bds111,
    wide: _bds385
}, _bds434 = {
    displayName: "sapaatip-akunnera",
    relative: _bds378,
    relativeTime: _bds412
}, _bds435 = {
    abbreviated: _bds380,
    narrow: _bds100,
    wide: _bds396
}, _bds436 = {
    abbreviated: _bds388,
    narrow: _bds111,
    wide: _bds388
}, _bds437 = {
    abbreviated: _bds392,
    narrow: _bds100,
    wide: _bds392
}, _bds438 = {
    fullDate: "r(U) MMMM d, EEEE",
    longDate: "r(U) MMMM d",
    mediumDate: "r MMM d",
    shortDate: "r-MM-dd",
    fullTime: "h:mm:ss a zzzz",
    longTime: "h:mm:ss a z",
    mediumTime: "h:mm:ss a",
    shortTime: "h:mm a",
    shortDateTime: "r-MM-dd h:mm a",
    mediumDateTime: "r MMM d h:mm:ss a",
    longDateTime: "r(U) MMMM d h:mm:ss a z",
    fullDateTime: "r(U) MMMM d, EEEE h:mm:ss a zzzz"
}, _bds439 = {
    fullDate: "EEEE dd MMMM y G",
    longDate: "dd MMMM y G",
    mediumDate: "MMM dd, y G",
    shortDate: "GGGGG y-MM-dd",
    fullTime: "h:mm:ss a zzzz",
    longTime: "h:mm:ss a z",
    mediumTime: "h:mm:ss a",
    shortTime: "h:mm a",
    shortDateTime: "GGGGG y-MM-dd h:mm a",
    mediumDateTime: "MMM dd, y G h:mm:ss a",
    longDateTime: "dd MMMM y G h:mm:ss a z",
    fullDateTime: "EEEE dd MMMM y G h:mm:ss a zzzz"
}, _bds440 = {
    format: _bds415,
    standAlone: _bds415
}, _bds441 = {
    "1000": _bds9,
    "10000": _bds16,
    "100000": _bds31,
    "1000000": _bds10,
    "10000000": _bds17,
    "100000000": _bds32,
    "1000000000": _bds11,
    "10000000000": _bds18,
    "100000000000": _bds33,
    "1000000000000": _bds12,
    "10000000000000": _bds19,
    "100000000000000": _bds34
}, _bds442 = {
    "1000": _bds20,
    "10000": _bds35,
    "100000": _bds49,
    "1000000": _bds21,
    "10000000": _bds36,
    "100000000": _bds50,
    "1000000000": _bds22,
    "10000000000": _bds37,
    "100000000000": _bds51,
    "1000000000000": _bds23,
    "10000000000000": _bds38,
    "100000000000000": _bds52
}, _bds443 = {
    format: _bds422,
    standAlone: _bds422
}, _bds444 = {
    d: "d",
    E: "ccc",
    Ed: "d, E",
    Gy: "r U",
    GyMMM: "r(U) MMM",
    GyMMMd: "r MMM d",
    GyMMMEd: "r(U) MMM d, E",
    h: "h a",
    H: "HH",
    hm: "h:mm a",
    Hm: "HH:mm",
    hms: "h:mm:ss a",
    Hms: "HH:mm:ss",
    M: "L",
    Md: "MM-dd",
    MEd: "MM-dd, E",
    MMM: "LLL",
    MMMd: "MMM d",
    MMMEd: "MMM d, E",
    MMMMd: "MMMM d",
    ms: "mm:ss",
    UM: "U MM",
    UMd: "U MM-d",
    UMMM: "U MMM",
    UMMMd: "U MMM d",
    y: "r(U)",
    yMd: "r-MM-dd",
    yyyy: "r(U)",
    yyyyM: "r-MM",
    yyyyMd: "r-MM-dd",
    yyyyMEd: "r-MM-dd, E",
    yyyyMMM: "r(U) MMM",
    yyyyMMMd: "r MMM d",
    yyyyMMMEd: "r(U) MMM d, E",
    yyyyMMMM: "r(U) MMMM",
    yyyyQQQ: "r(U) QQQ",
    yyyyQQQQ: "r(U) QQQQ"
}, _bds445 = {
    "1000": _bds60,
    "10000": _bds67,
    "100000": _bds71,
    "1000000": _bds72,
    "10000000": _bds77,
    "100000000": _bds82,
    "1000000000": _bds78,
    "10000000000": _bds83,
    "100000000000": _bds87,
    "1000000000000": _bds73,
    "10000000000000": _bds79,
    "100000000000000": _bds84
}, _bds446 = {
    format: _bds428,
    standAlone: _bds428
}, _bds447 = {
    currencyMatch: /[^\u0024+<->\u005E`\u007C~¢-¦¨©¬®-±´¸×÷˂-˅˒-˟˥-˫˭˯-˿͵΄΅϶҂֏؆-؈؋؎؏۞۩۽۾߶৲৳৺৻૱୰௳-௺౿൹฿༁-༃༓༕-༗༚-༟༴༶༸྾-࿅࿇-࿌࿎࿏࿕-࿘႞႟᎐-᎙៛᥀᧞-᧿᭡-᭪᭴-᭼᾽᾿-῁῍-῏῝-῟῭-`´῾⁄⁒⁺-⁼₊-₌₠-₹℀℁℃-℆℈℉℔№-℘℞-℣℥℧℩℮℺℻⅀-⅄⅊-⅍⅏←-⌨⌫-⏳␀-␦⑀-⑊⒜-ⓩ─-⛿✁-❧➔-⟄⟇-⟥⟰-⦂⦙-⧗⧜-⧻⧾-⭌⭐-⭙⳥-⳪⺀-⺙⺛-⻳⼀-⿕⿰-⿻〄〒〓〠〶〷〾〿゛゜㆐㆑㆖-㆟㇀-㇣㈀-㈞㈪-㉇㉐㉠-㉿㊊-㊰㋀-㋾㌀-㏿䷀-䷿꒐-꓆꜀-꜖꜠꜡꞉꞊꠨-꠫꠶-꠹꩷-꩹﬩﮲-﯁﷼﷽﹢﹤-﹦﹩＄＋＜-＞＾｀｜～￠-￦￨-￮￼�]/,
    surroundingMatch: /[0-9²³¹¼-¾٠-٩۰-۹߀-߉०-९০-৯৴-৹੦-੯૦-૯୦-୯୲-୷௦-௲౦-౯౸-౾೦-೯൦-൵๐-๙໐-໙༠-༳၀-၉႐-႙፩-፼ᛮ-ᛰ០-៩៰-៹᠐-᠙᥆-᥏᧐-᧚᪀-᪉᪐-᪙᭐-᭙᮰-᮹᱀-᱉᱐-᱙⁰⁴-⁹₀-₉⅐-ↂↅ-↉①-⒛⓪-⓿❶-➓⳽〇〡-〩〸-〺㆒-㆕㈠-㈩㉈-㉏㉑-㉟㊀-㊉㊱-㊿꘠-꘩ꛦ-ꛯ꠰-꠵꣐-꣙꤀-꤉꧐-꧙꩐-꩙꯰-꯹０-９]/,
    insertBetween: " "
}, _bds448 = {
    format: _bds430,
    standAlone: _bds430
}, _bds449 = [ undefined, "jia-zi", "yi-chou", "bing-yin", "ding-mao", "wu-chen", "ji-si", "geng-wu", "xin-wei", "ren-shen", "gui-you", "jia-xu", "yi-hai", "bing-zi", "ding-chou", "wu-yin", "ji-mao", "geng-chen", "xin-si", "ren-wu", "gui-wei", "jia-shen", "yi-you", "bing-xu", "ding-hai", "wu-zi", "ji-chou", "geng-yin", "xin-mao", "ren-chen", "gui-si", "jia-wu", "yi-wei", "bing-shen", "ding-you", "wu-xu", "ji-hai", "geng-zi", "xin-chou", "ren-yin", "gui-mao", "jia-chen", "yi-si", "bing-wu", "ding-wei", "wu-shen", "ji-you", "geng-xu", "xin-hai", "ren-zi", "gui-chou", "jia-yin", "yi-mao", "bing-chen", "ding-si", "wu-wu", "ji-wei", "geng-shen", "xin-you", "ren-xu" ], _bds450 = {
    Ed: "E, d",
    h: "h a",
    H: "HH",
    hm: "h:mm a",
    Hm: "HH:mm",
    hms: "h:mm:ss a",
    Hms: "HH:mm:ss",
    M: "L",
    Md: "d/M",
    MEd: "E, d/M",
    ms: "mm:ss",
    yM: "y-MM",
    yMd: "y-MM-dd",
    yMEd: "E, y-MM-dd",
    yMMM: "MMM y",
    yMMMd: "MMM d, y",
    yMMMEd: "E, MMM d, y",
    yQQQ: "y QQQQ",
    yQQQQ: "y QQQQ",
    d: "d",
    E: "ccc",
    Ehm: "E h:mm a",
    EHm: "E HH:mm",
    Ehms: "E h:mm:ss a",
    EHms: "E HH:mm:ss",
    Gy: "G y",
    GyMMM: "G y MMM",
    GyMMMd: "G y MMM d",
    GyMMMEd: "G y MMM d, E",
    MMM: "LLL",
    MMMd: "MMM d",
    MMMEd: "MMM d, E",
    MMMMd: "MMMM d",
    y: "G y",
    yyyy: "G y",
    yyyyM: "GGGGG y-MM",
    yyyyMd: "GGGGG y-MM-dd",
    yyyyMEd: "GGGGG y-MM-dd, E",
    yyyyMMM: "G y MMM",
    yyyyMMMd: "G y MMM d",
    yyyyMMMEd: "G y MMM d, E",
    yyyyMMMM: "G y MMMM",
    yyyyQQQ: "G y QQQ",
    yyyyQQQQ: "G y QQQQ"
}, _bds451 = {
    format: _bds435,
    standAlone: _bds435
}, _bds452 = {
    basic: _bds438,
    cldr: _bds444
}, _bds453 = {
    d: {
        d: "d–d"
    },
    h: _bds13,
    H: {
        H: "HH–HH"
    },
    hm: _bds101,
    Hm: _bds61,
    hmv: _bds113,
    Hmv: _bds74,
    hv: _bds39,
    Hv: {
        H: "HH–HH v"
    },
    M: {
        M: "M–M"
    },
    Md: _bds65,
    MEd: _bds94,
    MMM: {
        M: "LLL–LLL"
    },
    MMMd: _bds41,
    MMMEd: _bds89,
    y: {
        y: "y–y"
    },
    yM: _bds53,
    yMd: _bds120,
    yMEd: _bds374,
    yMMM: _bds53,
    yMMMd: _bds108,
    yMMMEd: _bds374,
    yMMMM: _bds53
}, _bds454 = {
    "long": _bds445,
    "short": _bds441,
    "default": "#,##0.###"
}, _bds455 = {
    d: {
        d: "d–d"
    },
    h: _bds13,
    H: {
        H: "HH–HH"
    },
    hm: _bds101,
    Hm: _bds61,
    hmv: _bds113,
    Hmv: _bds74,
    hv: _bds39,
    Hv: {
        H: "HH–HH v"
    },
    M: {
        M: "MM–MM"
    },
    Md: _bds75,
    MEd: _bds96,
    MMM: {
        M: "LLL–LLL"
    },
    MMMd: _bds55,
    MMMEd: _bds97,
    y: {
        y: "U–U"
    },
    yM: _bds62,
    yMd: _bds283,
    yMEd: _bds375,
    yMMM: _bds63,
    yMMMd: _bds110,
    yMMMEd: _bds363,
    yMMMM: _bds76
}, _bds456 = {
    basic: _bds439,
    cldr: _bds450
}, _bds457 = {
    beforeCurrency: _bds447,
    afterCurrency: _bds447
}, _bds458 = {
    "short": _bds442,
    "default": "¤#,##0.00;¤-#,##0.00",
    one: "{0} {1}",
    other: "{0} {1}",
    currencySpacing: _bds457
}, _bds459 = {
    abbreviated: _bds449,
    narrow: _bds449,
    wide: _bds449
}, _bds460 = {
    format: _bds459
}, _bds461 = {
    scientific: {
        "default": "#E0"
    },
    decimal: _bds454,
    currency: _bds458,
    percent: _bds1
}, _bds462 = {
    era: {
        displayName: "æra"
    },
    year: _bds419,
    month: _bds423,
    week: _bds434,
    day: _bds427,
    weekday: _bds86,
    dayperiod: _bds54,
    hour: _bds424,
    minute: _bds411,
    second: _bds413,
    zone: _bds80,
    quarter: _bds405,
    sun: _bds395,
    mon: _bds406,
    tue: _bds403,
    wed: _bds409,
    thu: _bds407,
    fri: _bds410,
    sat: _bds408
}, _bds463 = {
    dateFormats: {
        basic: {},
        cldr: {}
    },
    fields: _bds462
}, _bds464 = [ "Taika (645–650)", "Hakuchi (650–671)", "Hakuhō (672–686)", "Shuchō (686–701)", "Taihō (701–704)", "Keiun (704–708)", "Wadō (708–715)", "Reiki (715–717)", "Yōrō (717–724)", "Jinki (724–729)", "Tenpyō (729–749)", "Tenpyō-kampō (749-749)", "Tenpyō-shōhō (749-757)", "Tenpyō-hōji (757-765)", "Tenpyō-jingo (765-767)", "Jingo-keiun (767-770)", "Hōki (770–780)", "Ten-ō (781-782)", "Enryaku (782–806)", "Daidō (806–810)", "Kōnin (810–824)", "Tenchō (824–834)", "Jōwa (834–848)", "Kajō (848–851)", "Ninju (851–854)", "Saikō (854–857)", "Ten-an (857-859)", "Jōgan (859–877)", "Gangyō (877–885)", "Ninna (885–889)", "Kanpyō (889–898)", "Shōtai (898–901)", "Engi (901–923)", "Enchō (923–931)", "Jōhei (931–938)", "Tengyō (938–947)", "Tenryaku (947–957)", "Tentoku (957–961)", "Ōwa (961–964)", "Kōhō (964–968)", "Anna (968–970)", "Tenroku (970–973)", "Ten’en (973–976)", "Jōgen (976–978)", "Tengen (978–983)", "Eikan (983–985)", "Kanna (985–987)", "Eien (987–989)", "Eiso (989–990)", "Shōryaku (990–995)", "Chōtoku (995–999)", "Chōhō (999–1004)", "Kankō (1004–1012)", "Chōwa (1012–1017)", "Kannin (1017–1021)", "Jian (1021–1024)", "Manju (1024–1028)", "Chōgen (1028–1037)", "Chōryaku (1037–1040)", "Chōkyū (1040–1044)", "Kantoku (1044–1046)", "Eishō (1046–1053)", "Tengi (1053–1058)", "Kōhei (1058–1065)", "Jiryaku (1065–1069)", "Enkyū (1069–1074)", "Shōho (1074–1077)", "Shōryaku (1077–1081)", "Eihō (1081–1084)", "Ōtoku (1084–1087)", "Kanji (1087–1094)", "Kahō (1094–1096)", "Eichō (1096–1097)", "Jōtoku (1097–1099)", "Kōwa (1099–1104)", "Chōji (1104–1106)", "Kashō (1106–1108)", "Tennin (1108–1110)", "Ten-ei (1110-1113)", "Eikyū (1113–1118)", "Gen’ei (1118–1120)", "Hōan (1120–1124)", "Tenji (1124–1126)", "Daiji (1126–1131)", "Tenshō (1131–1132)", "Chōshō (1132–1135)", "Hōen (1135–1141)", "Eiji (1141–1142)", "Kōji (1142–1144)", "Ten’yō (1144–1145)", "Kyūan (1145–1151)", "Ninpei (1151–1154)", "Kyūju (1154–1156)", "Hōgen (1156–1159)", "Heiji (1159–1160)", "Eiryaku (1160–1161)", "Ōho (1161–1163)", "Chōkan (1163–1165)", "Eiman (1165–1166)", "Nin’an (1166–1169)", "Kaō (1169–1171)", "Shōan (1171–1175)", "Angen (1175–1177)", "Jishō (1177–1181)", "Yōwa (1181–1182)", "Juei (1182–1184)", "Genryaku (1184–1185)", "Bunji (1185–1190)", "Kenkyū (1190–1199)", "Shōji (1199–1201)", "Kennin (1201–1204)", "Genkyū (1204–1206)", "Ken’ei (1206–1207)", "Jōgen (1207–1211)", "Kenryaku (1211–1213)", "Kenpō (1213–1219)", "Jōkyū (1219–1222)", "Jōō (1222–1224)", "Gennin (1224–1225)", "Karoku (1225–1227)", "Antei (1227–1229)", "Kanki (1229–1232)", "Jōei (1232–1233)", "Tenpuku (1233–1234)", "Bunryaku (1234–1235)", "Katei (1235–1238)", "Ryakunin (1238–1239)", "En’ō (1239–1240)", "Ninji (1240–1243)", "Kangen (1243–1247)", "Hōji (1247–1249)", "Kenchō (1249–1256)", "Kōgen (1256–1257)", "Shōka (1257–1259)", "Shōgen (1259–1260)", "Bun’ō (1260–1261)", "Kōchō (1261–1264)", "Bun’ei (1264–1275)", "Kenji (1275–1278)", "Kōan (1278–1288)", "Shōō (1288–1293)", "Einin (1293–1299)", "Shōan (1299–1302)", "Kengen (1302–1303)", "Kagen (1303–1306)", "Tokuji (1306–1308)", "Enkyō (1308–1311)", "Ōchō (1311–1312)", "Shōwa (1312–1317)", "Bunpō (1317–1319)", "Genō (1319–1321)", "Genkō (1321–1324)", "Shōchū (1324–1326)", "Karyaku (1326–1329)", "Gentoku (1329–1331)", "Genkō (1331–1334)", "Kenmu (1334–1336)", "Engen (1336–1340)", "Kōkoku (1340–1346)", "Shōhei (1346–1370)", "Kentoku (1370–1372)", "Bunchū (1372–1375)", "Tenju (1375–1379)", "Kōryaku (1379–1381)", "Kōwa (1381–1384)", "Genchū (1384–1392)", "Meitoku (1384–1387)", "Kakei (1387–1389)", "Kōō (1389–1390)", "Meitoku (1390–1394)", "Ōei (1394–1428)", "Shōchō (1428–1429)", "Eikyō (1429–1441)", "Kakitsu (1441–1444)", "Bun’an (1444–1449)", "Hōtoku (1449–1452)", "Kyōtoku (1452–1455)", "Kōshō (1455–1457)", "Chōroku (1457–1460)", "Kanshō (1460–1466)", "Bunshō (1466–1467)", "Ōnin (1467–1469)", "Bunmei (1469–1487)", "Chōkyō (1487–1489)", "Entoku (1489–1492)", "Meiō (1492–1501)", "Bunki (1501–1504)", "Eishō (1504–1521)", "Taiei (1521–1528)", "Kyōroku (1528–1532)", "Tenbun (1532–1555)", "Kōji (1555–1558)", "Eiroku (1558–1570)", "Genki (1570–1573)", "Tenshō (1573–1592)", "Bunroku (1592–1596)", "Keichō (1596–1615)", "Genna (1615–1624)", "Kan’ei (1624–1644)", "Shōho (1644–1648)", "Keian (1648–1652)", "Jōō (1652–1655)", "Meireki (1655–1658)", "Manji (1658–1661)", "Kanbun (1661–1673)", "Enpō (1673–1681)", "Tenna (1681–1684)", "Jōkyō (1684–1688)", "Genroku (1688–1704)", "Hōei (1704–1711)", "Shōtoku (1711–1716)", "Kyōhō (1716–1736)", "Genbun (1736–1741)", "Kanpō (1741–1744)", "Enkyō (1744–1748)", "Kan’en (1748–1751)", "Hōreki (1751–1764)", "Meiwa (1764–1772)", "An’ei (1772–1781)", "Tenmei (1781–1789)", "Kansei (1789–1801)", "Kyōwa (1801–1804)", "Bunka (1804–1818)", "Bunsei (1818–1830)", "Tenpō (1830–1844)", "Kōka (1844–1848)", "Kaei (1848–1854)", "Ansei (1854–1860)", "Man’en (1860–1861)", "Bunkyū (1861–1864)", "Genji (1864–1865)", "Keiō (1865–1868)", "Meiji", "Taishō", "Shōwa", "Heisei" ], _bds465 = {
    dayParts: _bds429,
    days: _bds460,
    months: _bds460,
    years: _bds460,
    zodiacs: _bds429
}, _bds466 = {
    dateFormats: _bds456,
    datePartsOrder: "ymd",
    dateIntervalFormats: _bds453,
    dateIntervalFallbackFormat: "{0} – {1}",
    dayNames: _bds446,
    dayPeriods: _bds425,
    monthNames: _bds451,
    eraNames: _bds56,
    quarterNames: _bds440,
    fields: _bds462
}, _bds467 = {
    dateFormats: _bds452,
    datePartsOrder: "md",
    dateIntervalFormats: _bds455,
    dateIntervalFallbackFormat: "{0} – {1}",
    dayNames: _bds446,
    dayPeriods: _bds425,
    cyclicNames: _bds465,
    monthNames: _bds443,
    monthPatterns: _bds418,
    quarterNames: _bds440,
    fields: _bds462
};

inter.id = "kl";

inter.delimiters = {
    quotationStart: "»",
    quotationEnd: "«",
    alternateQuotationStart: "›",
    alternateQuotationEnd: "‹"
};

inter.listPatterns = {
    "default": {
        "2": "{0} aamma {1}",
        start: "{0}, {1}",
        middle: "{0}, {1}",
        end: "{0} aamma {1}"
    },
    unit: P.listPatterns.default,
    unitNarrow: {
        "2": "{0} {1}",
        start: "{0} {1}",
        middle: "{0} {1}",
        end: "{0} {1}"
    },
    unitShort: P.listPatterns.default
};

inter.unitPatterns = {
    "long": {
        unit: {
            accelerationGForce: {
                one: "{0} nutsuinera nunarsuaq",
                other: "{0} nutsuinera nunarsuaq"
            },
            angleDegree: {
                one: "{0} gradi",
                other: "{0} gradi"
            },
            angleArcMinute: {
                one: "{0} bueminutsi",
                other: "{0} bueminutsi"
            },
            angleArcSecond: {
                one: "{0} buesekundi",
                other: "{0} buesekundi"
            },
            areaSquareKilometer: {
                one: "{0} kvadratkilometeri",
                other: "{0} kvadratkilometeri"
            },
            areaHectare: {
                one: "{0} hektari",
                other: "{0} hektari"
            },
            areaSquareMeter: {
                one: "{0} kvadratmeteri",
                other: "{0} kvadratmeteri"
            },
            areaSquareMile: {
                one: "{0} engelsk kvadratmil",
                other: "{0} engelske kvadratmil"
            },
            areaAcre: {
                one: "{0} amerikanskt tønde land",
                other: "{0} amerikanske tønde land"
            },
            areaSquareFoot: {
                one: "{0} kvadratfod",
                other: "{0} kvadratfod"
            },
            durationYear: _bds66,
            durationMonth: {
                one: "{0} qaammat",
                other: "{0} qaammat"
            },
            durationWeek: {
                one: "{0} sapaatip-akunnera",
                other: "{0} sapaatip-akunnera"
            },
            durationDay: {
                one: "{0} ulloq unnuarlu",
                other: "{0} ulloq unnuarlu"
            },
            durationHour: {
                one: "{0} nalunaaquttap-akunnera",
                other: "{0} nalunaaquttap-akunnera"
            },
            durationMinute: {
                one: "{0} minutsi",
                other: "{0} minutsi"
            },
            durationSecond: {
                one: "{0} sekundi",
                other: "{0} sekundi"
            },
            durationMillisecond: {
                one: "{0} millisekundi",
                other: "{0} millisekundi"
            },
            lengthKilometer: {
                one: "{0} kilometeri",
                other: "{0} kilometeri"
            },
            lengthMeter: {
                one: "{0} meteri",
                other: "{0} meteri"
            },
            lengthDecimeter: {
                one: "{0} decimeteri",
                other: "{0} decimeteri"
            },
            lengthCentimeter: {
                one: "{0} centimeteri",
                other: "{0} centimeteri"
            },
            lengthMillimeter: {
                one: "{0} millimeteri",
                other: "{0} millimeteri"
            },
            lengthPicometer: {
                one: "{0} pikometeri",
                other: "{0} pikometeri"
            },
            lengthMile: {
                one: "{0} engelsk mil",
                other: "{0} engelske mil"
            },
            lengthYard: {
                one: "{0} engelsk yard",
                other: "{0} engelske yard"
            },
            lengthFoot: _bds42,
            lengthInch: _bds68,
            lengthLightYear: _bds69,
            lengthFurlong: _bds43,
            lengthFathom: _bds24,
            lengthNauticalMile: _bds70,
            massKilogram: {
                one: "{0} kilogrammi",
                other: "{0} kilogrammi"
            },
            massGram: {
                one: "{0} grammi",
                other: "{0} grammi"
            },
            massPound: _bds81,
            massOunce: _bds64,
            powerKilowatt: {
                one: "{0} kilowatti",
                other: "{0} kilowatti"
            },
            powerWatt: {
                one: "{0} watti",
                other: "{0} watti"
            },
            powerHorsepower: {
                one: "{0} hestekraft",
                other: "{0} hestekrafter"
            },
            pressureHectopascal: {
                one: "{0} hektopascali",
                other: "{0} hektopascali"
            },
            pressureInchHg: {
                one: "{0} tomme kviksølv",
                other: "{0} tommer kviksølv"
            },
            pressureMillibar: {
                one: "{0} millibari",
                other: "{0} millibari"
            },
            speedKilometerPerHour: {
                one: "{0} kilometeri per nalunaaquttap-akunnera",
                other: "{0} kilometeri per nalunaaquttap-akunnera"
            },
            speedMeterPerSecond: {
                one: "{0} meteri per sekundi",
                other: "{0} meteri per sekundi"
            },
            speedMilePerHour: {
                one: "{0} engelsk mil per nalunaaquttap-akunnera",
                other: "{0} engelske mil per nalunaaquttap-akunnera"
            },
            temperatureCelsius: {
                one: "{0} gradi Celsius",
                other: "{0} gradi Celsius"
            },
            temperatureFahrenheit: {
                one: "{0} gradi Fahrenheit",
                other: "{0} gradi Fahrenheit"
            },
            volumeCubicKilometer: {
                one: "{0} kubikkilometeri",
                other: "{0} kubikkilometeri"
            },
            volumeCubicMile: {
                one: "{0} engelsk kubikmil",
                other: "{0} engelske kubikmil"
            },
            volumeMegaliter: {
                one: "{0} megaliteri",
                other: "{0} megaliteri"
            },
            volumeHectoliter: {
                one: "{0} hectoliteri",
                other: "{0} hectoliteri"
            },
            volumeLiter: {
                one: "{0} literi",
                other: "{0} literi"
            },
            volumeMilliliter: {
                one: "{0} milliliteri",
                other: "{0} milliliteri"
            },
            volumeTablespoon: {
                one: "{0} alussaatip imai",
                other: "{0} alussaatip imai"
            },
            volumeTeaspoon: {
                one: "{0} alussaateeqqap imai",
                other: "{0} alussaateeqqap imai"
            }
        },
        compoundUnit: {
            per: "{0} per {1}"
        }
    },
    "short": {
        unit: {
            accelerationGForce: {
                one: "{0} G",
                other: "{0} G"
            },
            accelerationMeterPerSecondSquared: _bds57,
            angleDegree: _bds5,
            angleArcMinute: _bds6,
            angleArcSecond: _bds7,
            areaSquareKilometer: {
                one: "{0} km²",
                other: "{0} km²"
            },
            areaHectare: {
                one: "{0} ha",
                other: "{0} ha"
            },
            areaSquareMeter: {
                one: "{0} m²",
                other: "{0} m²"
            },
            areaSquareMile: _bds44,
            areaAcre: _bds25,
            areaSquareFoot: _bds45,
            durationYear: _bds66,
            durationMonth: {
                one: "{0} mån",
                other: "{0} mån"
            },
            durationWeek: {
                one: "{0} u",
                other: "{0} u"
            },
            durationDay: {
                one: "{0} d",
                other: "{0} d"
            },
            durationHour: {
                one: "{0} h",
                other: "{0} h"
            },
            durationMinute: {
                one: "{0} min",
                other: "{0} min"
            },
            durationSecond: {
                one: "{0} s",
                other: "{0} s"
            },
            durationMillisecond: {
                one: "{0} ms",
                other: "{0} ms"
            },
            lengthKilometer: {
                one: "{0} km",
                other: "{0} km"
            },
            lengthMeter: {
                one: "{0} m",
                other: "{0} m"
            },
            lengthDecimeter: {
                one: "{0} dm",
                other: "{0} dm"
            },
            lengthCentimeter: {
                one: "{0} cm",
                other: "{0} cm"
            },
            lengthMillimeter: {
                one: "{0} mm",
                other: "{0} mm"
            },
            lengthNanometer: {
                one: "{0} nm",
                other: "{0} nm"
            },
            lengthPicometer: {
                one: "{0} pm",
                other: "{0} pm"
            },
            lengthMile: _bds26,
            lengthYard: _bds27,
            lengthFoot: _bds42,
            lengthInch: _bds68,
            lengthLightYear: _bds69,
            lengthFurlong: _bds43,
            lengthFathom: _bds24,
            lengthNauticalMile: _bds70,
            massKilogram: {
                one: "{0} kg",
                other: "{0} kg"
            },
            massGram: {
                one: "{0} g",
                other: "{0} g"
            },
            massPound: _bds81,
            massOunce: _bds64,
            powerKilowatt: {
                one: "{0} kW",
                other: "{0} kW"
            },
            powerWatt: {
                one: "{0} W",
                other: "{0} W"
            },
            powerHorsepower: {
                one: "{0} hk",
                other: "{0} hk"
            },
            pressureHectopascal: {
                one: "{0} hPa",
                other: "{0} hPa"
            },
            pressureInchHg: _bds58,
            pressureMillibar: {
                one: "{0} mbar",
                other: "{0} mbar"
            },
            speedKilometerPerHour: {
                one: "{0} km/h",
                other: "{0} km/h"
            },
            speedMeterPerSecond: {
                one: "{0} m/s",
                other: "{0} m/s"
            },
            speedMilePerHour: _bds59,
            temperatureCelsius: {
                one: "{0}°C",
                other: "{0}°C"
            },
            temperatureFahrenheit: _bds15,
            volumeCubicKilometer: {
                one: "{0} km³",
                other: "{0} km³"
            },
            volumeCubicMile: _bds46,
            volumeMegaliter: _bds28,
            volumeHectoliter: _bds29,
            volumeLiter: {
                one: "{0} L",
                other: "{0} L"
            },
            volumeMilliliter: _bds30,
            volumeTablespoon: _bds47,
            volumeTeaspoon: _bds48,
            angleRevolution: {
                other: "{0} rev"
            },
            angleRadian: {
                other: "{0} rad"
            },
            areaSquareCentimeter: {
                other: "{0} cm²"
            },
            areaSquareYard: {
                other: "{0} yd²"
            },
            areaSquareInch: {
                other: "{0} in²"
            },
            concentrKarat: {
                other: "{0} kt"
            },
            concentrMilligramPerDeciliter: {
                other: "{0} mg/dL"
            },
            concentrMillimolePerLiter: {
                other: "{0} mmol/L"
            },
            concentrPartPerMillion: {
                other: "{0} ppm"
            },
            consumptionLiterPerKilometer: {
                other: "{0} L/km"
            },
            "consumptionLiterPer-100kilometers": {
                other: "{0} L/100km"
            },
            consumptionMilePerGallon: {
                other: "{0} mpg US"
            },
            consumptionMilePerGallonImperial: {
                other: "{0} mpg Imp."
            },
            digitalTerabyte: {
                other: "{0} TB"
            },
            digitalTerabit: {
                other: "{0} Tb"
            },
            digitalGigabyte: {
                other: "{0} GB"
            },
            digitalGigabit: {
                other: "{0} Gb"
            },
            digitalMegabyte: {
                other: "{0} MB"
            },
            digitalMegabit: {
                other: "{0} Mb"
            },
            digitalKilobyte: {
                other: "{0} kB"
            },
            digitalKilobit: {
                other: "{0} kb"
            },
            digitalByte: {
                other: "{0} byte"
            },
            digitalBit: {
                other: "{0} bit"
            },
            durationCentury: {
                other: "{0} c"
            },
            durationMicrosecond: {
                other: "{0} μs"
            },
            durationNanosecond: {
                other: "{0} ns"
            },
            electricAmpere: {
                other: "{0} A"
            },
            electricMilliampere: {
                other: "{0} mA"
            },
            electricOhm: {
                other: "{0} Ω"
            },
            electricVolt: {
                other: "{0} V"
            },
            energyKilocalorie: {
                other: "{0} kcal"
            },
            energyCalorie: {
                other: "{0} cal"
            },
            energyFoodcalorie: {
                other: "{0} Cal"
            },
            energyKilojoule: {
                other: "{0} kJ"
            },
            energyJoule: {
                other: "{0} J"
            },
            energyKilowattHour: {
                other: "{0} kWh"
            },
            frequencyGigahertz: {
                other: "{0} GHz"
            },
            frequencyMegahertz: {
                other: "{0} MHz"
            },
            frequencyKilohertz: {
                other: "{0} kHz"
            },
            frequencyHertz: {
                other: "{0} Hz"
            },
            lengthMicrometer: {
                other: "{0} µm"
            },
            lengthParsec: {
                other: "{0} pc"
            },
            lengthAstronomicalUnit: {
                other: "{0} au"
            },
            lengthMileScandinavian: {
                other: "{0} smi"
            },
            lightLux: {
                other: "{0} lx"
            },
            massMetricTon: {
                other: "{0} t"
            },
            massMilligram: {
                other: "{0} mg"
            },
            massMicrogram: {
                other: "{0} µg"
            },
            massTon: {
                other: "{0} tn"
            },
            massStone: {
                other: "{0} st"
            },
            massOunceTroy: {
                other: "{0} oz t"
            },
            massCarat: {
                other: "{0} CD"
            },
            powerGigawatt: {
                other: "{0} GW"
            },
            powerMegawatt: {
                other: "{0} MW"
            },
            powerMilliwatt: {
                other: "{0} mW"
            },
            pressureMillimeterOfMercury: {
                other: "{0} mm Hg"
            },
            pressurePoundPerSquareInch: {
                other: "{0} psi"
            },
            speedKnot: {
                other: "{0} kn"
            },
            temperatureGeneric: {
                other: "{0}°"
            },
            temperatureKelvin: {
                other: "{0} K"
            },
            volumeCubicMeter: {
                other: "{0} m³"
            },
            volumeCubicCentimeter: {
                other: "{0} cm³"
            },
            volumeCubicYard: {
                other: "{0} yd³"
            },
            volumeCubicFoot: {
                other: "{0} ft³"
            },
            volumeCubicInch: {
                other: "{0} in³"
            },
            volumeDeciliter: {
                other: "{0} dL"
            },
            volumeCentiliter: {
                other: "{0} cL"
            },
            volumePintMetric: {
                other: "{0} mpt"
            },
            volumeCupMetric: {
                other: "{0} mc"
            },
            volumeAcreFoot: {
                other: "{0} ac ft"
            },
            volumeBushel: {
                other: "{0} bu"
            },
            volumeGallon: {
                other: "{0} gal US"
            },
            volumeGallonImperial: {
                other: "{0} gal Imp."
            },
            volumeQuart: {
                other: "{0} qt"
            },
            volumePint: {
                other: "{0} pt"
            },
            volumeCup: {
                other: "{0} c"
            },
            volumeFluidOunce: {
                other: "{0} fl oz"
            }
        },
        compoundUnit: {
            per: "{0}/{1}"
        }
    },
    narrow: {
        unit: {
            accelerationGForce: {
                one: "{0}G",
                other: "{0}G"
            },
            accelerationMeterPerSecondSquared: _bds57,
            angleDegree: _bds5,
            angleArcMinute: _bds6,
            angleArcSecond: _bds7,
            areaSquareKilometer: {
                one: "{0}km²",
                other: "{0}km²"
            },
            areaHectare: {
                one: "{0}ha",
                other: "{0}ha"
            },
            areaSquareMeter: {
                one: "{0}m²",
                other: "{0}m²"
            },
            areaSquareMile: _bds44,
            areaAcre: _bds25,
            areaSquareFoot: _bds45,
            durationYear: {
                one: "{0}å",
                other: "{0}å"
            },
            durationMonth: _bds8,
            durationWeek: {
                one: "{0}u",
                other: "{0}u"
            },
            durationDay: {
                one: "{0}d",
                other: "{0}d"
            },
            durationHour: {
                one: "{0}h",
                other: "{0}h"
            },
            durationMinute: _bds8,
            durationSecond: {
                one: "{0}s",
                other: "{0}s"
            },
            durationMillisecond: {
                one: "{0}ms",
                other: "{0}ms"
            },
            lengthKilometer: {
                one: "{0}km",
                other: "{0}km"
            },
            lengthMeter: _bds8,
            lengthDecimeter: {
                one: "{0}dm",
                other: "{0}dm"
            },
            lengthCentimeter: {
                one: "{0}cm",
                other: "{0}cm"
            },
            lengthMillimeter: {
                one: "{0}mm",
                other: "{0}mm"
            },
            lengthPicometer: {
                one: "{0}pm",
                other: "{0}pm"
            },
            lengthMile: _bds26,
            lengthYard: _bds27,
            lengthFoot: _bds42,
            lengthInch: _bds68,
            lengthLightYear: {
                one: "{0} lå",
                other: "{0} lå"
            },
            lengthFurlong: _bds43,
            lengthFathom: _bds24,
            lengthNauticalMile: _bds70,
            massKilogram: {
                one: "{0}kg",
                other: "{0}kg"
            },
            massGram: {
                one: "{0}g",
                other: "{0}g"
            },
            massPound: _bds81,
            massOunce: _bds64,
            powerKilowatt: {
                one: "{0}kW",
                other: "{0}kW"
            },
            powerWatt: {
                one: "{0}W",
                other: "{0}W"
            },
            powerHorsepower: {
                one: "{0}hk",
                other: "{0}hk"
            },
            pressureHectopascal: {
                one: "{0}hPa",
                other: "{0}hPa"
            },
            pressureInchHg: _bds58,
            pressureMillibar: {
                one: "{0}mbar",
                other: "{0}mbar"
            },
            speedKilometerPerHour: {
                one: "{0}km/h",
                other: "{0}km/h"
            },
            speedMeterPerSecond: {
                one: "{0}m/s",
                other: "{0}m/s"
            },
            speedMilePerHour: _bds59,
            temperatureCelsius: _bds5,
            temperatureFahrenheit: _bds15,
            volumeCubicKilometer: {
                one: "{0}km³",
                other: "{0}km³"
            },
            volumeCubicMile: _bds46,
            volumeMegaliter: _bds28,
            volumeHectoliter: _bds29,
            volumeLiter: {
                one: "{0}L",
                other: "{0}L"
            },
            volumeMilliliter: _bds30,
            volumeTablespoon: _bds47,
            volumeTeaspoon: _bds48
        },
        compoundUnit: {
            per: "{0}/{1}"
        }
    }
};

inter.timeZoneFormats = {
    hour: [ "+HH:mm", "−HH:mm" ],
    gmt: "GMT{0}",
    gmtZero: "GMT",
    region: "{0}",
    fallback: "{0} ({1})",
    regions: {
        daylight: "{0} (+1)",
        standard: "{0} (+0)"
    }
};

inter.characters = {
    exemplar: {
        "default": [ "a", "á", "â", "ã", "b", "c", "d", "e", "é", "ê", "f", "g", "h", "i", "í", "î", "ĩ", "j", "k", "l", "m", "n", "o", "ô", "p", "q", "ĸ", "r", "s", "t", "u", "ú", "û", "ũ", "v", "w", "x", "y", "z", "æ", "ø", "å" ],
        auxiliary: [ "" ],
        index: [ "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "Æ", "Ø", "Å" ],
        punctuation: [ "\\-", ",", ";", "\\:", "!", "?", ".", "(", ")", "\\[", "\\]", "\\{", "\\}" ]
    },
    ellipsis: {
        "final": "{0}…",
        initial: "…{0}",
        medial: "{0}…{1}",
        "word-final": "{0} …",
        "word-initial": "… {0}",
        "word-medial": "{0} … {1}"
    },
    moreInformation: "?"
};

inter.numbers = {
    ahom: {
        symbols: _bds414,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    arab: {
        symbols: P.numbers.ahom.symbols,
        formats: _bds461,
        digits: [ "٠", "١", "٢", "٣", "٤", "٥", "٦", "٧", "٨", "٩" ]
    },
    arabext: {
        symbols: {
            decimal: "٫",
            group: "٬",
            list: "؛",
            percentSign: "٪",
            plusSign: "‎+‎",
            minusSign: "‎-‎",
            exponential: "×۱۰^",
            superscriptingExponent: "×",
            perMille: "؉",
            infinity: "∞",
            nan: "NaN",
            timeSeparator: "٫"
        },
        formats: _bds461,
        digits: [ "۰", "۱", "۲", "۳", "۴", "۵", "۶", "۷", "۸", "۹" ]
    },
    armn: {
        symbols: _bds414,
        digits: "renderArmenianUpper"
    },
    armnlow: {
        symbols: _bds414,
        digits: "renderArmenianLower"
    },
    bali: {
        symbols: _bds414,
        formats: _bds461,
        digits: [ "᭐", "᭑", "᭒", "᭓", "᭔", "᭕", "᭖", "᭗", "᭘", "᭙" ]
    },
    beng: {
        symbols: _bds414,
        formats: _bds461,
        digits: [ "০", "১", "২", "৩", "৪", "৫", "৬", "৭", "৮", "৯" ]
    },
    brah: {
        symbols: _bds414,
        formats: _bds461,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    cakm: {
        symbols: _bds414,
        formats: _bds461,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    cham: {
        symbols: _bds414,
        formats: _bds461,
        digits: [ "꩐", "꩑", "꩒", "꩓", "꩔", "꩕", "꩖", "꩗", "꩘", "꩙" ]
    },
    cyrl: {
        symbols: _bds414,
        digits: "renderCyrillicLower"
    },
    deva: {
        symbols: _bds414,
        formats: _bds461,
        digits: [ "०", "१", "२", "३", "४", "५", "६", "७", "८", "९" ]
    },
    ethi: {
        symbols: _bds414,
        digits: "renderEthiopic"
    },
    finance: _bds417,
    fullwide: {
        symbols: _bds414,
        formats: _bds461,
        digits: [ "０", "１", "２", "３", "４", "５", "６", "７", "８", "９" ]
    },
    geor: {
        symbols: _bds414,
        digits: "renderGeorgian"
    },
    grek: {
        symbols: _bds414,
        digits: "renderGreekUpper"
    },
    greklow: {
        symbols: _bds414,
        digits: "renderGreekLower"
    },
    gujr: {
        symbols: _bds414,
        formats: _bds461,
        digits: [ "૦", "૧", "૨", "૩", "૪", "૫", "૬", "૭", "૮", "૯" ]
    },
    guru: {
        symbols: _bds414,
        formats: _bds461,
        digits: [ "੦", "੧", "੨", "੩", "੪", "੫", "੬", "੭", "੮", "੯" ]
    },
    hanidays: {
        symbols: _bds414,
        digits: "renderSpelloutNumberingDays"
    },
    hanidec: {
        symbols: _bds414,
        formats: _bds461,
        digits: [ "〇", "一", "二", "三", "四", "五", "六", "七", "八", "九" ]
    },
    hans: _bds420,
    hansfin: _bds421,
    hant: _bds420,
    hantfin: _bds421,
    hebr: {
        symbols: _bds414,
        digits: "renderHebrew"
    },
    hmng: {
        symbols: _bds414,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    java: {
        symbols: _bds414,
        formats: _bds461,
        digits: [ "꧐", "꧑", "꧒", "꧓", "꧔", "꧕", "꧖", "꧗", "꧘", "꧙" ]
    },
    jpan: _bds420,
    jpanfin: _bds421,
    kali: {
        symbols: _bds414,
        formats: _bds461,
        digits: [ "꤀", "꤁", "꤂", "꤃", "꤄", "꤅", "꤆", "꤇", "꤈", "꤉" ]
    },
    khmr: {
        symbols: _bds414,
        formats: _bds461,
        digits: [ "០", "១", "២", "៣", "៤", "៥", "៦", "៧", "៨", "៩" ]
    },
    knda: {
        symbols: _bds414,
        formats: _bds461,
        digits: [ "೦", "೧", "೨", "೩", "೪", "೫", "೬", "೭", "೮", "೯" ]
    },
    lana: {
        symbols: _bds414,
        formats: _bds461,
        digits: [ "᪀", "᪁", "᪂", "᪃", "᪄", "᪅", "᪆", "᪇", "᪈", "᪉" ]
    },
    lanatham: {
        symbols: _bds414,
        formats: _bds461,
        digits: [ "᪐", "᪑", "᪒", "᪓", "᪔", "᪕", "᪖", "᪗", "᪘", "᪙" ]
    },
    laoo: {
        symbols: _bds414,
        formats: _bds461,
        digits: [ "໐", "໑", "໒", "໓", "໔", "໕", "໖", "໗", "໘", "໙" ]
    },
    latn: {
        symbols: _bds414,
        formats: _bds461,
        digits: [ "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" ]
    },
    lepc: {
        symbols: _bds414,
        formats: _bds461,
        digits: [ "᱀", "᱁", "᱂", "᱃", "᱄", "᱅", "᱆", "᱇", "᱈", "᱉" ]
    },
    limb: {
        symbols: _bds414,
        formats: _bds461,
        digits: [ "᥆", "᥇", "᥈", "᥉", "᥊", "᥋", "᥌", "᥍", "᥎", "᥏" ]
    },
    mathbold: {
        symbols: _bds414,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathdbl: {
        symbols: _bds414,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathmono: {
        symbols: _bds414,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathsanb: {
        symbols: _bds414,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathsans: {
        symbols: _bds414,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mlym: {
        symbols: _bds414,
        formats: _bds461,
        digits: [ "൦", "൧", "൨", "൩", "൪", "൫", "൬", "൭", "൮", "൯" ]
    },
    modi: {
        symbols: _bds414,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mong: {
        symbols: _bds414,
        formats: _bds461,
        digits: [ "᠐", "᠑", "᠒", "᠓", "᠔", "᠕", "᠖", "᠗", "᠘", "᠙" ]
    },
    mroo: {
        symbols: _bds414,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mtei: {
        symbols: _bds414,
        formats: _bds461,
        digits: [ "꯰", "꯱", "꯲", "꯳", "꯴", "꯵", "꯶", "꯷", "꯸", "꯹" ]
    },
    mymr: {
        symbols: _bds414,
        formats: _bds461,
        digits: [ "၀", "၁", "၂", "၃", "၄", "၅", "၆", "၇", "၈", "၉" ]
    },
    mymrshan: {
        symbols: _bds414,
        formats: _bds461,
        digits: [ "႐", "႑", "႒", "႓", "႔", "႕", "႖", "႗", "႘", "႙" ]
    },
    mymrtlng: {
        symbols: _bds414,
        digits: [ "꧰", "꧱", "꧲", "꧳", "꧴", "꧵", "꧶", "꧷", "꧸", "꧹" ]
    },
    "native": _bds417,
    nkoo: {
        symbols: _bds414,
        formats: _bds461,
        digits: [ "߀", "߁", "߂", "߃", "߄", "߅", "߆", "߇", "߈", "߉" ]
    },
    olck: {
        symbols: _bds414,
        formats: _bds461,
        digits: [ "᱐", "᱑", "᱒", "᱓", "᱔", "᱕", "᱖", "᱗", "᱘", "᱙" ]
    },
    orya: {
        symbols: _bds414,
        formats: _bds461,
        digits: [ "୦", "୧", "୨", "୩", "୪", "୫", "୬", "୭", "୮", "୯" ]
    },
    osma: {
        symbols: _bds414,
        formats: _bds461,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    roman: {
        symbols: _bds414,
        digits: "renderRomanUpper"
    },
    romanlow: {
        symbols: _bds414,
        digits: "renderRomanLower"
    },
    saur: {
        symbols: _bds414,
        formats: _bds461,
        digits: [ "꣐", "꣑", "꣒", "꣓", "꣔", "꣕", "꣖", "꣗", "꣘", "꣙" ]
    },
    shrd: {
        symbols: _bds414,
        formats: _bds461,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    sind: {
        symbols: _bds414,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    sinh: {
        symbols: _bds414,
        digits: [ "෦", "෧", "෨", "෩", "෪", "෫", "෬", "෭", "෮", "෯" ]
    },
    sora: {
        symbols: _bds414,
        formats: _bds461,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    sund: {
        symbols: _bds414,
        formats: _bds461,
        digits: [ "᮰", "᮱", "᮲", "᮳", "᮴", "᮵", "᮶", "᮷", "᮸", "᮹" ]
    },
    takr: {
        symbols: _bds414,
        formats: _bds461,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    talu: {
        symbols: _bds414,
        formats: _bds461,
        digits: [ "᧐", "᧑", "᧒", "᧓", "᧔", "᧕", "᧖", "᧗", "᧘", "᧙" ]
    },
    taml: {
        symbols: _bds414,
        digits: "renderTamil"
    },
    tamldec: {
        symbols: _bds414,
        formats: _bds461,
        digits: [ "௦", "௧", "௨", "௩", "௪", "௫", "௬", "௭", "௮", "௯" ]
    },
    telu: {
        symbols: _bds414,
        formats: _bds461,
        digits: [ "౦", "౧", "౨", "౩", "౪", "౫", "౬", "౭", "౮", "౯" ]
    },
    thai: {
        symbols: _bds414,
        formats: _bds461,
        digits: [ "๐", "๑", "๒", "๓", "๔", "๕", "๖", "๗", "๘", "๙" ]
    },
    tirh: {
        symbols: _bds414,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    tibt: {
        symbols: _bds414,
        formats: _bds461,
        digits: [ "༠", "༡", "༢", "༣", "༤", "༥", "༦", "༧", "༨", "༩" ]
    },
    traditio: _bds417,
    vaii: {
        symbols: _bds414,
        formats: _bds461,
        digits: [ "꘠", "꘡", "꘢", "꘣", "꘤", "꘥", "꘦", "꘧", "꘨", "꘩" ]
    },
    wara: {
        symbols: _bds414,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    }
};

inter.calendars = {
    buddhist: {
        dateFormats: _bds456,
        datePartsOrder: "ymd",
        dateIntervalFormats: _bds453,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _bds446,
        dayPeriods: _bds425,
        monthNames: _bds448,
        eraNames: {
            wide: [ "BE" ],
            abbreviated: [ "BE" ]
        },
        quarterNames: _bds440,
        fields: _bds462
    },
    chinese: _bds467,
    coptic: {
        dateFormats: _bds456,
        datePartsOrder: "ymd",
        dateIntervalFormats: _bds453,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _bds446,
        dayPeriods: _bds425,
        monthNames: {
            format: _bds433,
            standAlone: _bds433
        },
        eraNames: _bds98,
        quarterNames: _bds440,
        fields: _bds462
    },
    dangi: _bds467,
    ethioaa: _bds463,
    ethiopic: {
        dateFormats: _bds456,
        datePartsOrder: "ymd",
        dateIntervalFormats: _bds453,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _bds446,
        dayPeriods: _bds425,
        monthNames: {
            format: _bds436,
            standAlone: _bds436
        },
        eraNames: _bds98,
        quarterNames: _bds440,
        fields: _bds462
    },
    gregorian: {
        dateFormats: {
            basic: {
                fullDate: "EEEE dd MMMM y",
                longDate: "dd MMMM y",
                mediumDate: "MMM dd, y",
                shortDate: "y-MM-dd",
                fullTime: "h:mm:ss a zzzz",
                longTime: "h:mm:ss a z",
                mediumTime: "h:mm:ss a",
                shortTime: "h:mm a",
                shortDateTime: "y-MM-dd h:mm a",
                mediumDateTime: "MMM dd, y h:mm:ss a",
                longDateTime: "dd MMMM y h:mm:ss a z",
                fullDateTime: "EEEE dd MMMM y h:mm:ss a zzzz"
            },
            cldr: {
                Ed: "E, d",
                h: "h a",
                H: "HH",
                hm: "h:mm a",
                Hm: "HH:mm",
                hms: "h:mm:ss a",
                Hms: "HH:mm:ss",
                M: "L",
                Md: "d/M",
                MEd: "E, d/M",
                ms: "mm:ss",
                yM: "y-MM",
                yMd: "y-MM-dd",
                yMEd: "E, y-MM-dd",
                yMMM: "MMM y",
                yMMMd: "MMM d, y",
                yMMMEd: "E, MMM d, y",
                yQQQ: "y QQQQ",
                yQQQQ: "y QQQQ",
                d: "d",
                E: "ccc",
                Ehm: "E h:mm a",
                EHm: "E HH:mm",
                Ehms: "E h:mm:ss a",
                EHms: "E HH:mm:ss",
                Gy: "G y",
                GyMMM: "G y MMM",
                GyMMMd: "G y MMM d",
                GyMMMEd: "G y MMM d, E",
                hmsv: "h:mm:ss a v",
                Hmsv: "HH:mm:ss v",
                hmv: "h:mm a v",
                Hmv: "HH:mm v",
                MMM: "LLL",
                MMMd: "MMM d",
                MMMEd: "MMM d, E",
                MMMMd: "MMMM d",
                y: "y",
                yMMMM: "y MMMM"
            }
        },
        datePartsOrder: "ymd",
        dateIntervalFormats: _bds453,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _bds446,
        dayPeriods: _bds425,
        monthNames: _bds448,
        eraNames: {
            wide: [ "Kristusip inunngornerata siornagut", "Kristusip inunngornerata kingornagut" ],
            abbreviated: [ "Kr.in.si.", "Kr.in.king." ]
        },
        quarterNames: _bds440,
        fields: _bds462
    },
    hebrew: {
        dateFormats: _bds456,
        datePartsOrder: "ymd",
        dateIntervalFormats: _bds453,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _bds446,
        dayPeriods: _bds425,
        monthNames: {
            format: _bds431,
            standAlone: _bds431
        },
        eraNames: {
            wide: [ "AM" ],
            abbreviated: [ "AM" ]
        },
        quarterNames: _bds440,
        fields: _bds462
    },
    indian: {
        dateFormats: _bds456,
        datePartsOrder: "ymd",
        dateIntervalFormats: _bds453,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _bds446,
        dayPeriods: _bds425,
        monthNames: {
            format: _bds437,
            standAlone: _bds437
        },
        eraNames: {
            wide: [ "Saka" ],
            abbreviated: [ "Saka" ]
        },
        quarterNames: _bds440,
        fields: _bds462
    },
    islamic: _bds466,
    "islamic-umalqura": _bds466,
    "islamic-tbla": _bds466,
    "islamic-civil": _bds466,
    "islamic-rgsa": _bds466,
    iso8601: _bds463,
    japanese: {
        dateFormats: _bds456,
        datePartsOrder: "ymd",
        dateIntervalFormats: _bds453,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _bds446,
        dayPeriods: _bds425,
        monthNames: _bds448,
        eraNames: {
            wide: _bds464,
            abbreviated: _bds464
        },
        quarterNames: _bds440,
        fields: _bds462
    },
    persian: {
        dateFormats: _bds456,
        datePartsOrder: "ymd",
        dateIntervalFormats: _bds453,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _bds446,
        dayPeriods: _bds425,
        monthNames: {
            format: _bds432,
            standAlone: _bds432
        },
        eraNames: {
            wide: [ "AP" ],
            abbreviated: [ "AP" ]
        },
        quarterNames: _bds440,
        fields: _bds462
    },
    roc: {
        dateFormats: _bds456,
        datePartsOrder: "ymd",
        dateIntervalFormats: _bds453,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _bds446,
        dayPeriods: _bds425,
        monthNames: _bds448,
        eraNames: {
            wide: _bds14,
            abbreviated: _bds14
        },
        quarterNames: _bds440,
        fields: _bds462
    },
    islamicc: _bds463
};

inter.pluralRule = function(n) {
    if (typeof n === "string") n = parseInt(n, 10);
    if (n === 1) return "one";
    return "other";
};

inter.renderDigitsOrdinal = function(n) {
    if (n < 0) return "−" + this.renderDigitsOrdinal(-n);
    if (n >= 0) return this.renderNumber(n, "#,##0") + ".";
};

inter.renderSpelloutNumbering = function(n) {
    if (n < 0) return "−" + this.renderSpelloutNumbering(-n);
    if (n >= 0) return this.renderSpelloutCardinal(n);
};

inter.renderArmenianUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderArmenianUpper(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e4) return this.renderNumber(n, "#,##0");
    if (n >= 9e3) return "Ք" + (n === 9e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 8e3) return "Փ" + (n === 8e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 7e3) return "Ւ" + (n === 7e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 6e3) return "Ց" + (n === 6e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 5e3) return "Ր" + (n === 5e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 4e3) return "Տ" + (n === 4e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 3e3) return "Վ" + (n === 3e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 2e3) return "Ս" + (n === 2e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 1e3) return "Ռ" + (n === 1e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 900) return "Ջ" + (n === 900 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 800) return "Պ" + (n === 800 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 700) return "Չ" + (n === 700 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 600) return "Ո" + (n === 600 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 500) return "Շ" + (n === 500 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 400) return "Ն" + (n === 400 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 300) return "Յ" + (n === 300 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 200) return "Մ" + (n === 200 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 100) return "Ճ" + (n === 100 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 90) return "Ղ" + (n === 90 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 80) return "Ձ" + (n === 80 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 70) return "Հ" + (n === 70 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 60) return "Կ" + (n === 60 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 50) return "Ծ" + (n === 50 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 40) return "Խ" + (n === 40 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 30) return "Լ" + (n === 30 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 20) return "Ի" + (n === 20 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 10) return "Ժ" + (n === 10 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 9) return "Թ";
    if (n >= 8) return "Ը";
    if (n >= 7) return "Է";
    if (n >= 6) return "Զ";
    if (n >= 5) return "Ե";
    if (n >= 4) return "Դ";
    if (n >= 3) return "Գ";
    if (n >= 2) return "Բ";
    if (n >= 1) return "Ա";
    if (n >= 0) return "0";
};

inter.renderArmenianLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderArmenianLower(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e4) return this.renderNumber(n, "#,##0");
    if (n >= 9e3) return "ք" + (n === 9e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 8e3) return "փ" + (n === 8e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 7e3) return "ւ" + (n === 7e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 6e3) return "ց" + (n === 6e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 5e3) return "ր" + (n === 5e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 4e3) return "տ" + (n === 4e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 3e3) return "վ" + (n === 3e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 2e3) return "ս" + (n === 2e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 1e3) return "ռ" + (n === 1e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 900) return "ջ" + (n === 900 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 800) return "պ" + (n === 800 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 700) return "չ" + (n === 700 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 600) return "ո" + (n === 600 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 500) return "շ" + (n === 500 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 400) return "ն" + (n === 400 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 300) return "յ" + (n === 300 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 200) return "մ" + (n === 200 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 100) return "ճ" + (n === 100 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 90) return "ղ" + (n === 90 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 80) return "ձ" + (n === 80 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 70) return "հ" + (n === 70 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 60) return "կ" + (n === 60 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 50) return "ծ" + (n === 50 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 40) return "խ" + (n === 40 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 30) return "լ" + (n === 30 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 20) return "ի" + (n === 20 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 10) return "ժ" + (n === 10 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 9) return "թ";
    if (n >= 8) return "ը";
    if (n >= 7) return "է";
    if (n >= 6) return "զ";
    if (n >= 5) return "ե";
    if (n >= 4) return "դ";
    if (n >= 3) return "գ";
    if (n >= 2) return "բ";
    if (n >= 1) return "ա";
    if (n >= 0) return "0";
};

inter.renderCyrillicLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderCyrillicLower(-n);
    if (isFractional && n > 1) return this.renderCyrillicLower(Math.floor(n)) + "." + this.renderCyrillicLower(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e15) return "҂҂҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e15)) + (n === 1e15 ? "" : " " + this.renderCyrillicLower(n % 1e15));
    if (n >= 1e12) return "҂҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e12)) + (n === 1e12 ? "" : " " + this.renderCyrillicLower(n % 1e12));
    if (n >= 1e9) return "҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e9)) + (n === 1e9 ? "" : " " + this.renderCyrillicLower(n % 1e9));
    if (n >= 1e6) return "҂҂" + this.renderCyrillicLower(Math.floor(n / 1e6)) + (n === 1e6 ? "" : " " + this.renderCyrillicLower(n % 1e6));
    if (n >= 11e3) return this.renderCyrillicLowerThousands(Math.floor(n / 1e4)) + (n === 11e3 ? "" : " " + this.renderCyrillicLower(n % 1e4));
    if (n >= 1e4) return "҂" + this.renderCyrillicLower(Math.floor(n / 1e4)) + (n === 1e4 ? "" : " " + this.renderCyrillicLower(n % 1e4));
    if (n >= 1e3) return "҂" + this.renderCyrillicLower110(Math.floor(n / 1e3)) + this.renderCyrillicLowerPost(n % 1e3);
    if (n >= 900) return "ц" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 801) return "ѿ" + this.renderCyrillicLower(n % 100);
    if (n >= 800) return "ѿ҃";
    if (n >= 700) return "ѱ" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 600) return "х" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 500) return "ф" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 400) return "у" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 300) return "т" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 200) return "с" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 100) return "р" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 90) return "ч" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 80) return "п" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 70) return "ѻ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 60) return "ѯ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 50) return "н" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 40) return "м" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 30) return "л" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 20) return "к" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 19) return "ѳ҃і";
    if (n >= 18) return "и҃і";
    if (n >= 17) return "з҃і";
    if (n >= 16) return "ѕ҃і";
    if (n >= 15) return "є҃і";
    if (n >= 14) return "д҃і";
    if (n >= 13) return "г҃і";
    if (n >= 12) return "в҃і";
    if (n >= 11) return "а҃і";
    if (n >= 1) return this.renderCyrillicLower110(n) + "҃";
    if (n >= 0) return "0҃";
};

inter.renderEthiopic = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderEthiopic(-n);
    if (isFractional && n > 1) return this.renderEthiopic(Math.floor(n)) + "፡" + this.renderEthiopic(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,###0");
    if (n >= 2e16) return this.renderEthiopic(Math.floor(n / 1e16)) + "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 1e16) return "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 2e12) return this.renderEthiopic(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1e12) return "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 2e8) return this.renderEthiopic(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1e8) return "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 2e4) return this.renderEthiopic(Math.floor(n / 1e4)) + "፼" + (n === 2e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 1e4) return "፼" + (n === 1e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 200) return this.renderEthiopic(Math.floor(n / 100)) + "፻" + (n === 200 ? "" : this.renderEthiopic(n % 100));
    if (n >= 100) return "፻" + (n === 100 ? "" : this.renderEthiopic(n % 100));
    if (n >= 90) return "፺" + (n === 90 ? "" : this.renderEthiopic(n % 10));
    if (n >= 80) return "፹" + (n === 80 ? "" : this.renderEthiopic(n % 10));
    if (n >= 70) return "፸" + (n === 70 ? "" : this.renderEthiopic(n % 10));
    if (n >= 60) return "፷" + (n === 60 ? "" : this.renderEthiopic(n % 10));
    if (n >= 50) return "፶" + (n === 50 ? "" : this.renderEthiopic(n % 10));
    if (n >= 40) return "፵" + (n === 40 ? "" : this.renderEthiopic(n % 10));
    if (n >= 30) return "፴" + (n === 30 ? "" : this.renderEthiopic(n % 10));
    if (n >= 20) return "፳" + (n === 20 ? "" : this.renderEthiopic(n % 10));
    if (n >= 10) return "፲" + (n === 10 ? "" : this.renderEthiopic(n % 10));
    if (n >= 9) return "፱";
    if (n >= 8) return "፰";
    if (n >= 7) return "፯";
    if (n >= 6) return "፮";
    if (n >= 5) return "፭";
    if (n >= 4) return "፬";
    if (n >= 3) return "፫";
    if (n >= 2) return "፪";
    if (n >= 1) return "፩";
    if (n >= 0) return "ባዶ";
};

inter.renderGeorgian = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGeorgian(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 2e4) return this.renderNumber(n, "#,##0");
    if (n >= 1e4) return "ჯ" + (n === 1e4 ? "" : this.renderGeorgian(n % 1e4));
    if (n >= 9e3) return "ჵ" + (n === 9e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 8e3) return "ჴ" + (n === 8e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 7e3) return "ხ" + (n === 7e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 6e3) return "ჭ" + (n === 6e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 5e3) return "წ" + (n === 5e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 4e3) return "ძ" + (n === 4e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 3e3) return "ც" + (n === 3e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 2e3) return "ჩ" + (n === 2e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 1e3) return "შ" + (n === 1e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 900) return "ყ" + (n === 900 ? "" : this.renderGeorgian(n % 100));
    if (n >= 800) return "ღ" + (n === 800 ? "" : this.renderGeorgian(n % 100));
    if (n >= 700) return "ქ" + (n === 700 ? "" : this.renderGeorgian(n % 100));
    if (n >= 600) return "ფ" + (n === 600 ? "" : this.renderGeorgian(n % 100));
    if (n >= 500) return "ჳ" + (n === 500 ? "" : this.renderGeorgian(n % 100));
    if (n >= 400) return "უ" + (n === 400 ? "" : this.renderGeorgian(n % 100));
    if (n >= 300) return "ტ" + (n === 300 ? "" : this.renderGeorgian(n % 100));
    if (n >= 200) return "ს" + (n === 200 ? "" : this.renderGeorgian(n % 100));
    if (n >= 100) return "რ" + (n === 100 ? "" : this.renderGeorgian(n % 100));
    if (n >= 90) return "ჟ" + (n === 90 ? "" : this.renderGeorgian(n % 10));
    if (n >= 80) return "პ" + (n === 80 ? "" : this.renderGeorgian(n % 10));
    if (n >= 70) return "ო" + (n === 70 ? "" : this.renderGeorgian(n % 10));
    if (n >= 60) return "ჲ" + (n === 60 ? "" : this.renderGeorgian(n % 10));
    if (n >= 50) return "ნ" + (n === 50 ? "" : this.renderGeorgian(n % 10));
    if (n >= 40) return "მ" + (n === 40 ? "" : this.renderGeorgian(n % 10));
    if (n >= 30) return "ლ" + (n === 30 ? "" : this.renderGeorgian(n % 10));
    if (n >= 20) return "კ" + (n === 20 ? "" : this.renderGeorgian(n % 10));
    if (n >= 10) return "ი" + (n === 10 ? "" : this.renderGeorgian(n % 10));
    if (n >= 9) return "თ";
    if (n >= 8) return "ჱ";
    if (n >= 7) return "ზ";
    if (n >= 6) return "ვ";
    if (n >= 5) return "ე";
    if (n >= 4) return "დ";
    if (n >= 3) return "გ";
    if (n >= 2) return "ბ";
    if (n >= 1) return "ა";
    if (n >= 0) return this.renderNumber(n, "#,##0");
};

inter.renderGreekUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGreekUpper(-n);
    if (isFractional && n > 1) return this.renderGreekUpper(Math.floor(n)) + "." + this.renderGreekUpper(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 0) return this.renderGreekNumeralMajuscules(n) + "´";
};

inter.renderGreekLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGreekLower(-n);
    if (isFractional && n > 1) return this.renderGreekLower(Math.floor(n)) + "." + this.renderGreekLower(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 0) return this.renderGreekNumeralMinuscules(n) + "´";
};

inter.renderSpelloutCardinal = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "minus " + this.renderSpelloutCardinal(-n);
    if (isFractional && n > 1) return this.renderSpelloutCardinal(Math.floor(n)) + " komma " + this.renderSpelloutCardinal(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 2e15) return this.renderNumbertimes(Math.floor(n / 1e15)) + " billiardillit" + (n === 2e15 ? "" : " " + this.renderSpelloutCardinal(n % 1e15));
    if (n >= 1e15) return "billiardit" + (n === 1e15 ? "" : " " + this.renderSpelloutCardinal(n % 1e15));
    if (n >= 2e12) return this.renderNumbertimes(Math.floor(n / 1e12)) + " billioniillit" + (n === 2e12 ? "" : " " + this.renderSpelloutCardinal(n % 1e12));
    if (n >= 1e12) return "billionit" + (n === 1e12 ? "" : " " + this.renderSpelloutCardinal(n % 1e12));
    if (n >= 2e9) return this.renderNumbertimes(Math.floor(n / 1e9)) + " milliardillit" + (n === 2e9 ? "" : " " + this.renderSpelloutCardinal(n % 1e9));
    if (n >= 1e9) return "milliardit" + (n === 1e9 ? "" : " " + this.renderSpelloutCardinal(n % 1e9));
    if (n >= 2e6) return this.renderNumbertimes(Math.floor(n / 1e6)) + " millionillit" + (n === 2e6 ? "" : " " + this.renderSpelloutCardinal(n % 1e6));
    if (n >= 1e6) return "millionit" + (n === 1e6 ? "" : " " + this.renderSpelloutCardinal(n % 1e6));
    if (n >= 2e3) return this.renderNumbertimes(Math.floor(n / 1e3)) + " tuusintillit" + (n === 2e3 ? "" : " " + this.renderSpelloutCardinal(n % 1e3));
    if (n >= 1e3) return "tuusintit" + (n === 1e3 ? "" : " " + this.renderSpelloutCardinal(n % 1e3));
    if (n >= 200) return this.renderNumbertimes(Math.floor(n / 100)) + " uutritillit" + (n === 200 ? "" : " " + this.renderSpelloutCardinal(n % 100));
    if (n >= 100) return "uutritit" + (n === 100 ? "" : " " + this.renderSpelloutCardinal(n % 100));
    if (n >= 20) return this.renderNumbertimes(Math.floor(n / 10)) + " qulillit" + (n === 20 ? "" : " " + this.renderSpelloutCardinal(n % 10));
    if (n >= 19) return "arfersaneq-sisamat";
    if (n >= 18) return "arfersaneq-pingasut";
    if (n >= 17) return "arfersaneq-marluk";
    if (n >= 16) return "arfersanillit";
    if (n >= 15) return "aqqaneq-tallimat";
    if (n >= 14) return "aqqaneq-sisamat";
    if (n >= 13) return "aqqaneq-pingasut";
    if (n >= 12) return "aqqaneq-marluk";
    if (n >= 11) return "aqqanilit";
    if (n >= 10) return "qulit";
    if (n >= 9) return "arfineq-sisamat";
    if (n >= 8) return "arfineq-pingasut";
    if (n >= 7) return "arfineq-marluk";
    if (n >= 6) return "arfinillit";
    if (n >= 5) return "tallimat";
    if (n >= 4) return "sisamat";
    if (n >= 3) return "pingasut";
    if (n >= 2) return "marluk";
    if (n >= 1) return "ataaseq";
    if (n >= 0) return "nuulu";
};

inter.renderHebrew = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderHebrew(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1000001) return this.renderNumber(n, "#,##0");
    if (n >= 1e6) return "אלף אלפים";
    if (n >= 3001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 3001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 3e3) return this.renderHebrew(Math.floor(n / 1e3)) + " אלפים";
    if (n >= 2001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 2001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 2e3) return "אלפיים";
    if (n >= 1001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 1001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 1e3) return "אלף";
    if (n >= 901) return "תתק" + this.renderHebrew099(n % 100);
    if (n >= 900) return "תת״ק";
    if (n >= 801) return "תת" + this.renderHebrew099(n % 100);
    if (n >= 800) return "ת״ת";
    if (n >= 745) return "תש" + this.renderHebrew099(n % 100);
    if (n >= 744) return "תשד״מ";
    if (n >= 701) return "תש" + this.renderHebrew099(n % 100);
    if (n >= 700) return "ת״ש";
    if (n >= 699) return "תר" + this.renderHebrew099(n % 100);
    if (n >= 698) return "תרח״צ";
    if (n >= 601) return "תר" + this.renderHebrew099(n % 100);
    if (n >= 600) return "ת״ר";
    if (n >= 501) return "תק" + this.renderHebrew099(n % 100);
    if (n >= 500) return "ת״ק";
    if (n >= 400) return "ת" + this.renderHebrew099(n % 100);
    if (n >= 345) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 344) return "שד״מ";
    if (n >= 305) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 304) return "ד״ש";
    if (n >= 300) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 299) return "ר" + this.renderHebrew099(n % 100);
    if (n >= 298) return "רח״צ";
    if (n >= 200) return "ר" + this.renderHebrew099(n % 100);
    if (n >= 100) return "ק" + this.renderHebrew099(n % 100);
    if (n >= 91) return "צ״" + this.renderHebrewItem(n % 10);
    if (n >= 90) return "צ׳";
    if (n >= 81) return "פ״" + this.renderHebrewItem(n % 10);
    if (n >= 80) return "פ׳";
    if (n >= 71) return "ע״" + this.renderHebrewItem(n % 10);
    if (n >= 70) return "ע׳";
    if (n >= 61) return "ס״" + this.renderHebrewItem(n % 10);
    if (n >= 60) return "ס׳";
    if (n >= 51) return "נ״" + this.renderHebrewItem(n % 10);
    if (n >= 50) return "נ׳";
    if (n >= 41) return "מ״" + this.renderHebrewItem(n % 10);
    if (n >= 40) return "מ׳";
    if (n >= 31) return "ל״" + this.renderHebrewItem(n % 10);
    if (n >= 30) return "ל׳";
    if (n >= 21) return "כ״" + this.renderHebrewItem(n % 10);
    if (n >= 20) return "כ׳";
    if (n >= 17) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "ט״ז";
    if (n >= 15) return "ט״ו";
    if (n >= 11) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 0) return this.renderHebrewItem(n) + "׳";
};

inter.renderRomanUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderRomanUpper(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 4e5) return this.renderNumber(n, "#,##0");
    if (n >= 3e5) return "ↈↈↈ" + (n === 3e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 2e5) return "ↈↈ" + (n === 2e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 1e5) return "ↈ" + (n === 1e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 9e4) return "ↂↈ" + (n === 9e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 8e4) return "ↇↂↂↂ" + (n === 8e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 7e4) return "ↇↂↂ" + (n === 7e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 6e4) return "ↇↂ" + (n === 6e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 5e4) return "ↇ" + (n === 5e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 4e4) return "ↂↇ" + (n === 4e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 3e4) return "ↂↂↂ" + (n === 3e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 2e4) return "ↂↂ" + (n === 2e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 1e4) return "ↂ" + (n === 1e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 9e3) return "Mↂ" + (n === 9e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 8e3) return "ↁMMM" + (n === 8e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 7e3) return "ↁMM" + (n === 7e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 6e3) return "ↁM" + (n === 6e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 5e3) return "ↁ" + (n === 5e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 4e3) return "Mↁ" + (n === 4e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 3e3) return "MMM" + (n === 3e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 2e3) return "MM" + (n === 2e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 1e3) return "M" + (n === 1e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 900) return "CM" + (n === 900 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 800) return "DCCC" + (n === 800 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 700) return "DCC" + (n === 700 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 600) return "DC" + (n === 600 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 500) return "D" + (n === 500 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 400) return "CD" + (n === 400 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 300) return "CCC" + (n === 300 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 200) return "CC" + (n === 200 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 100) return "C" + (n === 100 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 90) return "XC" + (n === 90 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 80) return "LXXX" + (n === 80 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 70) return "LXX" + (n === 70 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 60) return "LX" + (n === 60 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 50) return "L" + (n === 50 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 40) return "XL" + (n === 40 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 30) return "XXX" + (n === 30 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 20) return "XX" + (n === 20 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 10) return "X" + (n === 10 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 9) return "IX";
    if (n >= 8) return "VIII";
    if (n >= 7) return "VII";
    if (n >= 6) return "VI";
    if (n >= 5) return "V";
    if (n >= 4) return "IV";
    if (n >= 3) return "III";
    if (n >= 2) return "II";
    if (n >= 1) return "I";
    if (n >= 0) return "N";
};

inter.renderRomanLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderRomanLower(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 5e3) return this.renderNumber(n, "#,##0");
    if (n >= 4e3) return "mmmm" + (n === 4e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 3e3) return "mmm" + (n === 3e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 2e3) return "mm" + (n === 2e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 1e3) return "m" + (n === 1e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 900) return "cm" + (n === 900 ? "" : this.renderRomanLower(n % 100));
    if (n >= 800) return "dccc" + (n === 800 ? "" : this.renderRomanLower(n % 100));
    if (n >= 700) return "dcc" + (n === 700 ? "" : this.renderRomanLower(n % 100));
    if (n >= 600) return "dc" + (n === 600 ? "" : this.renderRomanLower(n % 100));
    if (n >= 500) return "d" + (n === 500 ? "" : this.renderRomanLower(n % 100));
    if (n >= 400) return "cd" + (n === 400 ? "" : this.renderRomanLower(n % 100));
    if (n >= 300) return "ccc" + (n === 300 ? "" : this.renderRomanLower(n % 100));
    if (n >= 200) return "cc" + (n === 200 ? "" : this.renderRomanLower(n % 100));
    if (n >= 100) return "c" + (n === 100 ? "" : this.renderRomanLower(n % 100));
    if (n >= 90) return "xc" + (n === 90 ? "" : this.renderRomanLower(n % 10));
    if (n >= 80) return "lxxx" + (n === 80 ? "" : this.renderRomanLower(n % 10));
    if (n >= 70) return "lxx" + (n === 70 ? "" : this.renderRomanLower(n % 10));
    if (n >= 60) return "lx" + (n === 60 ? "" : this.renderRomanLower(n % 10));
    if (n >= 50) return "l" + (n === 50 ? "" : this.renderRomanLower(n % 10));
    if (n >= 40) return "xl" + (n === 40 ? "" : this.renderRomanLower(n % 10));
    if (n >= 30) return "xxx" + (n === 30 ? "" : this.renderRomanLower(n % 10));
    if (n >= 20) return "xx" + (n === 20 ? "" : this.renderRomanLower(n % 10));
    if (n >= 10) return "x" + (n === 10 ? "" : this.renderRomanLower(n % 10));
    if (n >= 9) return "ix";
    if (n >= 8) return "viii";
    if (n >= 7) return "vii";
    if (n >= 6) return "vi";
    if (n >= 5) return "v";
    if (n >= 4) return "iv";
    if (n >= 3) return "iii";
    if (n >= 2) return "ii";
    if (n >= 1) return "i";
    if (n >= 0) return "n";
};

inter.renderTamil = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderTamil(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e8) return this.renderNumber(n, "#,##,##0");
    if (n >= 1e6) return this.renderTamil(Math.floor(n / 1e6)) + "௱௲" + (n === 1e6 ? "" : this.renderTamilThousands(n % 1e6));
    if (n >= 2e3) return this.renderTamil(Math.floor(n / 1e3)) + "௲" + (n === 2e3 ? "" : this.renderTamil(n % 1e3));
    if (n >= 1e3) return "௲" + (n === 1e3 ? "" : this.renderTamil(n % 1e3));
    if (n >= 200) return this.renderTamil(Math.floor(n / 100)) + "௱" + (n === 200 ? "" : this.renderTamil(n % 100));
    if (n >= 100) return "௱" + (n === 100 ? "" : this.renderTamil(n % 100));
    if (n >= 20) return this.renderTamil(Math.floor(n / 10)) + "௰" + (n === 20 ? "" : this.renderTamil(n % 10));
    if (n >= 10) return "௰" + (n === 10 ? "" : this.renderTamil(n % 10));
    if (n >= 9) return "௯";
    if (n >= 8) return "௮";
    if (n >= 7) return "௭";
    if (n >= 6) return "௬";
    if (n >= 5) return "௫";
    if (n >= 4) return "௪";
    if (n >= 3) return "௩";
    if (n >= 2) return "௨";
    if (n >= 1) return "௧";
    if (n >= 0) return "௦";
};

inter.renderCyrillicLowerThousands = function(n) {
    if (n >= 900) return "҂ц" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 800) return "҂ѿ" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 700) return "҂ѱ" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 600) return "҂х" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 500) return "҂ф" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 400) return "҂у" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 300) return "҂т" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 200) return "҂с" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 100) return "҂р" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 90) return "҂ч" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 80) return "҂п" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 70) return "҂ѻ" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 60) return "҂ѯ" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 50) return "҂н" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 40) return "҂м" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 30) return "҂л" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 20) return "҂к" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 19) return "҂ѳ҃҂і";
    if (n >= 18) return "҂и҃҂і";
    if (n >= 17) return "҂з҃҂і";
    if (n >= 16) return "҂ѕ҃҂і";
    if (n >= 15) return "҂є҃҂і";
    if (n >= 14) return "҂д҃҂і";
    if (n >= 13) return "҂г҃҂і";
    if (n >= 12) return "҂в҃҂і";
    if (n >= 11) return "҂а҃҂і";
    if (n >= 10) return "҃҂і";
    if (n >= 9) return "҃҂ѳ";
    if (n >= 8) return "҃҂и";
    if (n >= 7) return "҃҂з";
    if (n >= 6) return "҃҂ѕ";
    if (n >= 5) return "҃҂є";
    if (n >= 4) return "҃҂д";
    if (n >= 3) return "҃҂г";
    if (n >= 2) return "҃҂в";
    if (n >= 1) return "҃҂а";
    if (n >= 0) return "҃";
};

inter.renderCyrillicLower110 = function(n) {
    if (n >= 10) return "і";
    if (n >= 9) return "ѳ";
    if (n >= 8) return "и";
    if (n >= 7) return "з";
    if (n >= 6) return "ѕ";
    if (n >= 5) return "є";
    if (n >= 4) return "д";
    if (n >= 3) return "г";
    if (n >= 2) return "в";
    if (n >= 1) return "а";
};

inter.renderCyrillicLowerPost = function(n) {
    if (n >= 1) return this.renderCyrillicLower(n);
    if (n >= 0) return "҃";
};

inter.renderCyrillicLowerFinal = function(n) {
    if (n >= 91) return "ч" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 90) return "҃ч";
    if (n >= 81) return "п" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 80) return "҃п";
    if (n >= 71) return "ѻ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 70) return "҃ѻ";
    if (n >= 61) return "ѯ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 60) return "҃ѯ";
    if (n >= 51) return "н" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 50) return "҃н";
    if (n >= 41) return "м" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 40) return "҃м";
    if (n >= 31) return "л" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 30) return "҃л";
    if (n >= 21) return "к" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 20) return "҃к";
    if (n >= 19) return "ѳ҃і";
    if (n >= 18) return "и҃і";
    if (n >= 17) return "з҃і";
    if (n >= 16) return "ѕ҃і";
    if (n >= 15) return "є҃і";
    if (n >= 14) return "д҃і";
    if (n >= 13) return "г҃і";
    if (n >= 12) return "в҃і";
    if (n >= 11) return "а҃і";
    if (n >= 1) return "҃" + this.renderCyrillicLower110(n);
    if (n >= 0) return "҃";
};

inter.renderEthiopicP3 = function(n) {
    if (n >= 1e12) return this.renderEthiopic(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1) return "፼፼፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼፼፼";
};

inter.renderEthiopicP2 = function(n) {
    if (n >= 1e8) return this.renderEthiopic(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1) return "፼፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼፼";
};

inter.renderEthiopicP1 = function(n) {
    if (n >= 1e4) return this.renderEthiopic(Math.floor(n / 1e4)) + "፼" + (n === 1e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 1) return "፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼";
};

inter.renderGreekNumeralMajuscules = function(n) {
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e16) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e16)) + "ΜΜΜΜ" + (n === 1e16 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e16));
    if (n >= 1e12) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e12)) + "ΜΜΜ" + (n === 1e12 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e12));
    if (n >= 1e8) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e8)) + "ΜΜ" + (n === 1e8 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e8));
    if (n >= 1e4) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e4)) + "Μ" + (n === 1e4 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e4));
    if (n >= 1e3) return "͵" + this.renderGreekNumeralMajuscules(Math.floor(n / 1e3)) + (n === 1e3 ? "" : this.renderGreekNumeralMajuscules(n % 1e3));
    if (n >= 900) return "Ϡ" + (n === 900 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 800) return "Ω" + (n === 800 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 700) return "Ψ" + (n === 700 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 600) return "Χ" + (n === 600 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 500) return "Φ" + (n === 500 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 400) return "Υ" + (n === 400 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 300) return "Τ" + (n === 300 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 200) return "Σ" + (n === 200 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 100) return "Ρ" + (n === 100 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 90) return "Ϟ" + (n === 90 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 80) return "Π" + (n === 80 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 70) return "Ο" + (n === 70 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 60) return "Ξ" + (n === 60 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 50) return "Ν" + (n === 50 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 40) return "Μ" + (n === 40 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 30) return "Λ" + (n === 30 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 20) return "Κ" + (n === 20 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 10) return "Ι" + (n === 10 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 9) return "Θ";
    if (n >= 8) return "Η";
    if (n >= 7) return "Ζ";
    if (n >= 6) return "Ϝ";
    if (n >= 5) return "Ε";
    if (n >= 4) return "Δ";
    if (n >= 3) return "Γ";
    if (n >= 2) return "Β";
    if (n >= 1) return "Α";
    if (n >= 0) return "𐆊";
};

inter.renderGreekNumeralMinuscules = function(n) {
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e16) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e16)) + "μμμμ" + (n === 1e16 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e16));
    if (n >= 1e12) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e12)) + "μμμ" + (n === 1e12 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e12));
    if (n >= 1e8) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e8)) + "μμ" + (n === 1e8 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e8));
    if (n >= 1e4) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e4)) + "μ" + (n === 1e4 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e4));
    if (n >= 1e3) return "͵" + this.renderGreekNumeralMinuscules(Math.floor(n / 1e3)) + (n === 1e3 ? "" : this.renderGreekNumeralMinuscules(n % 1e3));
    if (n >= 900) return "ϡ" + (n === 900 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 800) return "ω" + (n === 800 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 700) return "ψ" + (n === 700 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 600) return "χ" + (n === 600 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 500) return "φ" + (n === 500 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 400) return "υ" + (n === 400 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 300) return "τ" + (n === 300 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 200) return "σ" + (n === 200 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 100) return "ρ" + (n === 100 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 90) return "ϟ" + (n === 90 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 80) return "π" + (n === 80 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 70) return "ο" + (n === 70 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 60) return "ξ" + (n === 60 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 50) return "ν" + (n === 50 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 40) return "μ" + (n === 40 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 30) return "λ" + (n === 30 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 20) return "κ" + (n === 20 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 10) return "ι" + (n === 10 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 9) return "θ";
    if (n >= 8) return "η";
    if (n >= 7) return "ζ";
    if (n >= 6) return "ϝ";
    if (n >= 5) return "ε";
    if (n >= 4) return "δ";
    if (n >= 3) return "γ";
    if (n >= 2) return "β";
    if (n >= 1) return "α";
    if (n >= 0) return "𐆊";
};

inter.renderNumbertimes = function(n) {
    if (n >= 200) return this.renderNumbertimes(Math.floor(n / 100)) + " uutritillit" + (n === 200 ? "" : " " + this.renderNumbertimes(n % 100));
    if (n >= 100) return "uutritit" + (n === 100 ? "" : " " + this.renderNumbertimes(n % 100));
    if (n >= 20) return this.renderNumbertimes(Math.floor(n / 10)) + " qulillit" + (n === 20 ? "" : " " + this.renderNumbertimes(n % 10));
    if (n >= 19) return "arfersaneq-sisamanik";
    if (n >= 18) return "arfersaneq-pingasunik";
    if (n >= 17) return "arfersaneq-marlunnik";
    if (n >= 16) return "arfersanilinnik";
    if (n >= 15) return "aqqaneq-tallimanik";
    if (n >= 14) return "aqqaneq-sisamanik";
    if (n >= 13) return "aqqaneq-pingasunik";
    if (n >= 12) return "aqqaneq-marlunnik";
    if (n >= 11) return "aqqanilinik";
    if (n >= 10) return "qulinik";
    if (n >= 9) return "arfineq-sisamanik";
    if (n >= 8) return "arfineq-pingasunik";
    if (n >= 7) return "arfineq-marlunnik";
    if (n >= 6) return "arfinilinnik";
    if (n >= 5) return "tallimanik";
    if (n >= 4) return "sisamanik";
    if (n >= 3) return "pingasunik";
    if (n >= 2) return "marlunnik";
    if (n >= 1) return "ataaseq";
};

inter.renderHebrewThousands = function(n) {
    if (n >= 401) return this.renderHebrew(n) + "׳";
    if (n >= 100) return this.renderHebrew(n) + (n === 100 ? "" : "׳");
    if (n >= 10) return this.renderHebrew(n) + (n === 10 ? "" : "׳");
    if (n >= 0) return this.renderHebrew(n);
};

inter.renderHebrew099 = function(n) {
    if (n >= 91) return "צ״" + this.renderHebrewItem(n % 10);
    if (n >= 90) return "״צ";
    if (n >= 81) return "פ״" + this.renderHebrewItem(n % 10);
    if (n >= 80) return "״פ";
    if (n >= 71) return "ע״" + this.renderHebrewItem(n % 10);
    if (n >= 70) return "״ע";
    if (n >= 61) return "ס״" + this.renderHebrewItem(n % 10);
    if (n >= 60) return "״ס";
    if (n >= 51) return "נ״" + this.renderHebrewItem(n % 10);
    if (n >= 50) return "״נ";
    if (n >= 41) return "מ״" + this.renderHebrewItem(n % 10);
    if (n >= 40) return "״מ";
    if (n >= 31) return "ל״" + this.renderHebrewItem(n % 10);
    if (n >= 30) return "״ל";
    if (n >= 21) return "כ״" + this.renderHebrewItem(n % 10);
    if (n >= 20) return "״כ";
    if (n >= 17) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "ט״ז";
    if (n >= 15) return "ט״ו";
    if (n >= 11) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 1) return "״" + this.renderHebrewItem(n);
    if (n >= 0) return "׳";
};

inter.renderHebrewItem = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderHebrewItem(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 2100) return this.renderNumber(n, "#,##0");
    if (n >= 2e3) return "תתתתת" + (n === 2e3 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1900) return "תתתתש" + (n === 1900 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1800) return "תתתתר" + (n === 1800 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1700) return "תתתתק" + (n === 1700 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1600) return "תתתת" + (n === 1600 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1500) return "תתתש" + (n === 1500 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1400) return "תתתר" + (n === 1400 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1300) return "תתתק" + (n === 1300 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1200) return "תתת" + (n === 1200 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1100) return "תתש" + (n === 1100 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1e3) return "תתר" + (n === 1e3 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 900) return "תתק" + (n === 900 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 800) return "תת" + (n === 800 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 745) return "תש" + this.renderHebrewItem(n % 100);
    if (n >= 744) return "תשדמ";
    if (n >= 700) return "תש" + (n === 700 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 699) return "תר" + this.renderHebrewItem(n % 100);
    if (n >= 698) return "תרחצ";
    if (n >= 600) return "תר" + (n === 600 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 500) return "תק" + (n === 500 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 400) return "ת" + (n === 400 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 345) return "ש" + this.renderHebrewItem(n % 100);
    if (n >= 344) return "שדמ";
    if (n >= 305) return "ש" + this.renderHebrewItem(n % 100);
    if (n >= 304) return "דש";
    if (n >= 300) return "ש" + (n === 300 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 299) return "ר" + this.renderHebrewItem(n % 100);
    if (n >= 298) return "רחצ";
    if (n >= 200) return "ר" + (n === 200 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 100) return "ק" + (n === 100 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 90) return "צ" + (n === 90 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 80) return "פ" + (n === 80 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 70) return "ע" + (n === 70 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 60) return "ס" + (n === 60 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 50) return "נ" + (n === 50 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 40) return "מ" + (n === 40 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 30) return "ל" + (n === 30 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 20) return "כ" + (n === 20 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 17) return "י" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "טז";
    if (n >= 15) return "טו";
    if (n >= 10) return "י" + (n === 10 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 9) return "ט";
    if (n >= 8) return "ח";
    if (n >= 7) return "ז";
    if (n >= 6) return "ו";
    if (n >= 5) return "ה";
    if (n >= 4) return "ד";
    if (n >= 3) return "ג";
    if (n >= 2) return "ב";
    if (n >= 1) return "א";
    if (n >= 0) return "״";
};

inter.renderTamilThousands = function(n) {
    if (n >= 1e3) return this.renderTamilThousands(Math.floor(n / 1e3)) + "௲" + (n === 1e3 ? "" : this.renderTamilThousands(n % 1e3));
    if (n >= 0) return this.renderTamil(n);
};

inter.renderEthiopicP = function(n) {
    if (n >= 1e16) return this.renderEthiopicP(Math.floor(n / 1e16)) + "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 1e12) return this.renderEthiopicP(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1e8) return this.renderEthiopicP(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1e4) return this.renderEthiopicP(Math.floor(n / 1e4)) + "፼" + (n === 1e4 ? "" : this.renderEthiopicP(n % 1e4));
    if (n >= 1) return this.renderEthiopic(n);
};

inter.timeZones = [].concat(P.timeZones.slice(0, 117), {
    id: "America/Thule",
    regionId: "021",
    utcStandardOffsetSeconds: -14400,
    displayName: "Qaanaaq",
    countryId: "GL"
}, P.timeZones.slice(117, 124), P.timeZones.slice(125, 419));

inter.territories = [ _bds307, _bds320, _bds367, _bds368, _bds354, _bds357, _bds369, _bds191, _bds236, _bds372, _bds327, _bds364, _bds192, _bds160, _bds237, _bds350, _bds266, _bds193, _bds135, _bds121, _bds308, _bds358, _bds349, _bds351, _bds359, _bds267, _bds379, _bds328, _bds194, _bds195, _bds284, _bds238, _bds161, _bds162, _bds136, _bds196, _bds163, _bds197, _bds365, _bds239, _bds112, _bds164, _bds165, _bds240, _bds309, _bds137, _bds198, _bds166, _bds268, _bds329, _bds138, _bds122, _bds139, _bds140, _bds107, _bds241, _bds199, _bds313, _bds285, _bds200, _bds167, _bds242, _bds106, _bds243, _bds244, _bds201, _bds202, _bds297, _bds203, _bds245, _bds246, _bds321, _bds370, _bds371, _bds355, _bds360, _bds344, _bds123, _bds247, _bds269, _bds356, _bds141, _bds168, _bds204, _bds142, _bds270, _bds205, _bds298, _bds286, _bds124, _bds271, _bds248, _bds169, _bds314, _bds170, _bds143, _bds249, _bds250, _bds251, _bds315, _bds144, _bds272, _bds125, _bds126, _bds206, _bds207, _bds299, _bds171, _bds172, _bds208, _bds173, _bds145, _bds174, _bds209, _bds103, _bds335, _bds252, _bds210, _bds118, _bds300, _bds146, _bds127, _bds253, _bds340, _bds322, _bds336, _bds323, _bds211, _bds212, _bds128, _bds324, _bds316, _bds175, _bds129, _bds213, _bds254, _bds214, _bds215, _bds147, _bds325, _bds255, _bds287, _bds148, _bds288, _bds273, _bds176, _bds256, _bds130, _bds149, _bds216, _bds289, _bds290, _bds274, _bds217, _bds341, _bds177, _bds291, _bds218, _bds178, _bds292, _bds293, _bds294, _bds346, _bds219, _bds150, _bds151, _bds275, _bds152, _bds220, _bds131, _bds153, _bds337, _bds330, _bds331, _bds132, _bds276, _bds154, _bds179, _bds347, _bds257, _bds133, _bds180, _bds342, _bds277, _bds301, _bds155, _bds181, _bds221, _bds258, _bds182, _bds222, _bds326, _bds338, _bds310, _bds361, _bds302, _bds373, _bds156, _bds295, _bds311, _bds303, _bds259, _bds223, _bds183, _bds312, _bds278, _bds260, _bds261, _bds224, _bds184, _bds279, _bds262, _bds366, _bds225, _bds296, _bds157, _bds362, _bds185, _bds304, _bds263, _bds280, _bds339, _bds226, _bds134, _bds227, _bds158, _bds352, _bds119, _bds317, _bds228, _bds318, _bds186, _bds187, _bds281, _bds188, _bds229, _bds230, _bds231, _bds305, _bds232, _bds264, _bds282, _bds233, _bds348, _bds189, _bds265, _bds102, _bds190, _bds234 ];

inter.regions = [ _bds320, _bds367, _bds368, _bds354, _bds357, _bds369, _bds372, _bds327, _bds364, _bds308, _bds358, _bds349, _bds351, _bds359, _bds379, _bds321, _bds370, _bds371, _bds355, _bds360, _bds341, _bds331, _bds342, _bds102 ];

inter.countries = [ _bds307, _bds191, _bds236, _bds192, _bds160, _bds237, _bds350, _bds266, _bds193, _bds135, _bds121, _bds267, _bds328, _bds194, _bds195, _bds284, _bds238, _bds161, _bds162, _bds136, _bds196, _bds163, _bds197, _bds365, _bds239, _bds112, _bds164, _bds165, _bds240, _bds309, _bds137, _bds198, _bds166, _bds268, _bds329, _bds138, _bds122, _bds139, _bds140, _bds107, _bds241, _bds199, _bds313, _bds285, _bds200, _bds167, _bds242, _bds106, _bds243, _bds244, _bds201, _bds202, _bds297, _bds203, _bds245, _bds246, _bds344, _bds123, _bds247, _bds269, _bds356, _bds141, _bds168, _bds204, _bds142, _bds270, _bds205, _bds298, _bds286, _bds124, _bds271, _bds248, _bds169, _bds314, _bds170, _bds143, _bds249, _bds250, _bds251, _bds315, _bds144, _bds272, _bds125, _bds126, _bds206, _bds207, _bds299, _bds171, _bds172, _bds208, _bds173, _bds145, _bds174, _bds209, _bds103, _bds335, _bds252, _bds210, _bds118, _bds300, _bds146, _bds127, _bds253, _bds340, _bds322, _bds336, _bds323, _bds211, _bds212, _bds128, _bds324, _bds316, _bds175, _bds129, _bds213, _bds254, _bds214, _bds215, _bds147, _bds325, _bds255, _bds287, _bds148, _bds288, _bds273, _bds176, _bds256, _bds130, _bds149, _bds216, _bds289, _bds290, _bds274, _bds217, _bds177, _bds291, _bds218, _bds178, _bds292, _bds293, _bds294, _bds346, _bds219, _bds150, _bds151, _bds275, _bds152, _bds220, _bds131, _bds153, _bds337, _bds330, _bds132, _bds276, _bds154, _bds179, _bds347, _bds257, _bds133, _bds180, _bds277, _bds301, _bds155, _bds181, _bds221, _bds258, _bds182, _bds222, _bds326, _bds338, _bds310, _bds361, _bds302, _bds373, _bds156, _bds295, _bds311, _bds303, _bds259, _bds223, _bds183, _bds312, _bds278, _bds260, _bds261, _bds224, _bds184, _bds279, _bds262, _bds366, _bds225, _bds296, _bds157, _bds362, _bds185, _bds304, _bds263, _bds280, _bds339, _bds226, _bds134, _bds227, _bds158, _bds352, _bds119, _bds317, _bds228, _bds318, _bds186, _bds187, _bds281, _bds188, _bds229, _bds230, _bds231, _bds305, _bds232, _bds264, _bds282, _bds233, _bds348, _bds189, _bds265, _bds190, _bds234 ];

inter.languages = [ {
    id: "und",
    displayName: "(atorsinnaanngitsoq oqaatsit)"
}, {
    id: "az",
    displayName: "aserbajdsjaniskisut",
    nativeDisplayName: "azərbaycan dili"
}, {
    id: "da",
    displayName: "qallunaatut",
    nativeDisplayName: "dansk"
}, {
    id: "de",
    displayName: "tyskisut",
    nativeDisplayName: "Deutsch"
}, {
    id: "et",
    displayName: "estlandimiutut",
    nativeDisplayName: "eesti"
}, {
    id: "en",
    displayName: "tuluttut",
    nativeDisplayName: "English"
}, {
    id: "es",
    displayName: "spanskisut",
    nativeDisplayName: "español"
}, {
    id: "eo",
    displayName: "esperanto",
    nativeDisplayName: "esperanto"
}, {
    id: "fr",
    displayName: "franskisut",
    nativeDisplayName: "français"
}, {
    id: "fo",
    displayName: "savalimmiutut",
    nativeDisplayName: "føroyskt"
}, {
    id: "ga",
    displayName: "irlandimiutut",
    nativeDisplayName: "Gaeilge"
}, {
    id: "id",
    displayName: "indonesiamiutut",
    nativeDisplayName: "Indonesia"
}, {
    id: "it",
    displayName: "italiamiutut",
    nativeDisplayName: "italiano"
}, {
    id: "kl",
    displayName: "kalaallisut",
    nativeDisplayName: "kalaallisut"
}, {
    id: "sw",
    displayName: "swahilimiutut",
    nativeDisplayName: "Kiswahili"
}, {
    id: "ku",
    displayName: "kurdiskisut"
}, {
    id: "la",
    displayName: "latiinerisut"
}, {
    id: "lv",
    displayName: "letlandimiutut",
    nativeDisplayName: "latviešu"
}, {
    id: "lt",
    displayName: "litauenimiutut",
    nativeDisplayName: "lietuvių"
}, {
    id: "mg",
    displayName: "malagassiskisut",
    nativeDisplayName: "Malagasy"
}, {
    id: "mi",
    displayName: "maorimiutut"
}, {
    id: "nl",
    displayName: "hollandimiutut",
    nativeDisplayName: "Nederlands"
}, {
    id: "pl",
    displayName: "polenimiutut",
    nativeDisplayName: "polski"
}, {
    id: "pt",
    displayName: "portugalimiutut",
    nativeDisplayName: "português"
}, {
    id: "ro",
    displayName: "rumænimiutut",
    nativeDisplayName: "română"
}, {
    id: "sk",
    displayName: "slovakimiusut",
    nativeDisplayName: "slovenčina"
}, {
    id: "fi",
    displayName: "finlandimiutut",
    nativeDisplayName: "suomi"
}, {
    id: "sv",
    displayName: "svenskisut",
    nativeDisplayName: "svenska"
}, {
    id: "vi",
    displayName: "vietnamimiusut",
    nativeDisplayName: "Tiếng Việt"
}, {
    id: "tr",
    displayName: "tyrkiskisut",
    nativeDisplayName: "Türkçe"
}, {
    id: "is",
    displayName: "islandimiusut",
    nativeDisplayName: "íslenska"
}, {
    id: "cs",
    displayName: "tjekkiamut",
    nativeDisplayName: "čeština"
}, {
    id: "ru",
    displayName: "russisut",
    nativeDisplayName: "русский"
}, {
    id: "uk",
    displayName: "ukrainimiusut",
    nativeDisplayName: "українська"
}, {
    id: "he",
    displayName: "hebraimiutut",
    nativeDisplayName: "עברית"
}, {
    id: "ur",
    displayName: "urdumiutut",
    nativeDisplayName: "اردو"
}, {
    id: "ar",
    displayName: "arabiamiusut",
    nativeDisplayName: "العربية"
}, {
    id: "fa",
    displayName: "persiskisut",
    nativeDisplayName: "فارسی"
}, {
    id: "ps",
    displayName: "pashtomiutut",
    nativeDisplayName: "پښتو"
}, {
    id: "hi",
    displayName: "hindimiutut",
    nativeDisplayName: "हिन्दी"
}, {
    id: "bn",
    displayName: "bengalimiutut",
    nativeDisplayName: "বাংলা"
}, {
    id: "th",
    displayName: "thailandimiutut",
    nativeDisplayName: "ไทย"
}, {
    id: "zh",
    displayName: "kineserisut",
    nativeDisplayName: "中文"
}, {
    id: "ja",
    displayName: "japanimiusut",
    nativeDisplayName: "日本語"
}, {
    id: "ko",
    displayName: "koreamiusut",
    nativeDisplayName: "한국어"
} ];

inter.scripts = [ {
    id: "Zsym",
    displayName: "assersuut"
}, {
    id: "Zzzz",
    displayName: "atorsinnaanngitsoq allakkat"
}, {
    id: "Latn",
    displayName: "latin allakkat"
}, {
    id: "Zyyy",
    displayName: "peqatigiipput"
} ];

inter.currencies = [ {
    id: "DKK",
    displayName: "danmarkimut koruuni",
    symbol: "kr.",
    one: "danskinut koruuni",
    other: "danmarkimut koruuni"
}, {
    id: "EUR",
    displayName: "euro",
    symbol: "€",
    one: "euro",
    other: "euro"
}, {
    id: "NOK",
    displayName: "norskit koruuni",
    symbol: "Nkr",
    one: "norskit koruuni",
    other: "norskit koruuni"
}, {
    id: "SEK",
    displayName: "svenskit koruuni",
    symbol: "Skr",
    one: "svenskit koruuni",
    other: "svenskit koruuni"
} ];

module.exports = inter;