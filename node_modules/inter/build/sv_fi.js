function defaults(targetObj) {
    for (var i = 1; i < arguments.length; i += 1) {
        if (arguments[i] && typeof arguments[i] === "object") {
            for (var propertyName in arguments[i]) {
                if (typeof targetObj[propertyName] === "undefined") {
                    targetObj[propertyName] = arguments[i][propertyName];
                }
            }
        }
    }
    return targetObj;
}

var P = require("./sv.js"), inter = defaults({
    renderers: {}
}, P);

var _b5fv1 = {
    all: {
        leap: "{0}bis"
    }
}, _b5fv2 = [ "K1", "K2", "K3", "K4" ], _b5fv3 = {
    displayName: "fm/em"
}, _b5fv4 = {
    displayName: "tidszon"
}, _b5fv5 = {
    d: "d–d/M",
    M: "d/M–d/M"
}, _b5fv6 = {
    displayName: "veckodag"
}, _b5fv7 = {
    one: "{0}°",
    other: "{0}°"
}, _b5fv8 = {
    one: "{0}′",
    other: "{0}′"
}, _b5fv9 = {
    one: "{0}″",
    other: "{0}″"
}, _b5fv10 = {
    one: "{0}m",
    other: "{0}m"
}, _b5fv11 = {
    a: "h a – h a",
    h: "h–h a"
}, _b5fv12 = {
    one: "{0} l",
    other: "{0} l"
}, _b5fv13 = {
    one: "{0} ac",
    other: "{0} ac"
}, _b5fv14 = {
    one: "{0} °C",
    other: "{0} °C"
}, _b5fv15 = {
    a: "h a – h a v",
    h: "h–h a v"
}, _b5fv16 = [ "S", "M", "T", "O", "T", "F", "L" ], _b5fv17 = {
    one: "−{0} v",
    other: "−{0} v"
}, _b5fv18 = {
    one: "+{0} d",
    other: "+{0} d"
}, _b5fv19 = {
    one: "−{0} d",
    other: "−{0} d"
}, _b5fv20 = {
    one: "+{0} h",
    other: "+{0} h"
}, _b5fv21 = {
    one: "−{0} h",
    other: "−{0} h"
}, _b5fv22 = {
    one: "+{0} s",
    other: "+{0} s"
}, _b5fv23 = {
    one: "−{0} s",
    other: "−{0} s"
}, _b5fv24 = {
    one: "{0} cal",
    other: "{0} cal"
}, _b5fv25 = {
    one: "{0} fot",
    other: "{0} fot"
}, _b5fv26 = {
    one: "{0} tum",
    other: "{0} tum"
}, _b5fv27 = {
    one: "{0} uns",
    other: "{0} uns"
}, _b5fv28 = {
    d: "MMM d–d",
    M: "MMM d – MMM d"
}, _b5fv29 = {
    one: "+{0} år",
    other: "+{0} år"
}, _b5fv30 = {
    one: "−{0} år",
    other: "−{0} år"
}, _b5fv31 = {
    one: "−{0} kv",
    other: "−{0} kv"
}, _b5fv32 = {
    one: "+{0} v.",
    other: "+{0} v."
}, _b5fv33 = {
    d: "d–d MMM",
    M: "d MMM – d MMM"
}, _b5fv34 = {
    wide: [ "AH" ],
    abbreviated: [ "AH" ]
}, _b5fv35 = {
    one: "{0} km/h",
    other: "{0} km/h"
}, _b5fv36 = {
    one: "{0} tum²",
    other: "{0} tum²"
}, _b5fv37 = {
    one: "{0} kcal",
    other: "{0} kcal"
}, _b5fv38 = {
    one: "{0} mi/h",
    other: "{0} mi/h"
}, _b5fv39 = {
    one: "{0} fot³",
    other: "{0} fot³"
}, _b5fv40 = {
    one: "{0} tum³",
    other: "{0} tum³"
}, _b5fv41 = {
    H: "HH:mm–HH:mm",
    m: "HH:mm–HH:mm"
}, _b5fv42 = {
    M: "y-MM – y-MM",
    y: "y-MM – y-MM"
}, _b5fv43 = {
    M: "U MMM–MMM",
    y: "U MMM – U MMM"
}, _b5fv44 = {
    one: "+{0} kv.",
    other: "+{0} kv."
}, _b5fv45 = {
    one: "−{0} mån",
    other: "−{0} mån"
}, _b5fv46 = {
    one: "om {0} d",
    other: "om {0} d"
}, _b5fv47 = {
    one: "+{0} min",
    other: "+{0} min"
}, _b5fv48 = {
    one: "−{0} min",
    other: "−{0} min"
}, _b5fv49 = {
    one: "{0} famn",
    other: "{0} famnar"
}, _b5fv50 = {
    one: "om {0} år",
    other: "om {0} år"
}, _b5fv51 = {
    one: "+{0} mån.",
    other: "+{0} mån."
}, _b5fv52 = {
    one: "om {0} v.",
    other: "om {0} v."
}, _b5fv53 = {
    M: "G y-MM – MM",
    y: "G y-MM – y-MM"
}, _b5fv54 = [ "sö", "må", "ti", "on", "to", "fr", "lö" ], _b5fv55 = {
    one: "{0} tum Hg",
    other: "{0} tum Hg"
}, _b5fv56 = {
    H: "HH:mm–HH:mm v",
    m: "HH:mm–HH:mm v"
}, _b5fv57 = {
    d: "MM-dd – MM-dd",
    M: "MM-dd – MM-dd"
}, _b5fv58 = {
    M: "U MMMM–MMMM",
    y: "U MMMM – U MMMM"
}, _b5fv59 = {
    "0": "i år",
    "1": "nästa år",
    "-1": "i fjol"
}, _b5fv60 = {
    one: "om {0} kv.",
    other: "om {0} kv."
}, _b5fv61 = {
    one: "om {0} tim",
    other: "om {0} tim"
}, _b5fv62 = {
    one: "om {0} min",
    other: "om {0} min"
}, _b5fv63 = {
    one: "om {0} sek",
    other: "om {0} sek"
}, _b5fv64 = {
    d: "E d/M – E d/M",
    M: "E d/M – E d/M"
}, _b5fv65 = {
    M: "MMM–MMM y G",
    y: "MMM y – MMM y G"
}, _b5fv66 = {
    one: "{0} skäppa",
    other: "{0} skäppor"
}, _b5fv67 = {
    one: "om {0} mån.",
    other: "om {0} mån."
}, _b5fv68 = {
    one: "om {0} dag",
    other: "om {0} dagar"
}, _b5fv69 = {
    one: "{0} l/100 km",
    other: "{0} l/100 km"
}, _b5fv70 = {
    d: "E d – E d MMM",
    M: "E d MMM – E d MMM"
}, _b5fv71 = {
    M: "MMMM–MMMM y G",
    y: "MMMM y – MMMM y G"
}, _b5fv72 = {
    one: "om {0} vecka",
    other: "om {0} veckor"
}, _b5fv73 = {
    one: "om {0} timme",
    other: "om {0} timmar"
}, _b5fv74 = {
    one: "om {0} månad",
    other: "om {0} månader"
}, _b5fv75 = {
    "0": "denna v.",
    "1": "nästa v.",
    "-1": "förra v."
}, _b5fv76 = {
    one: "om {0} minut",
    other: "om {0} minuter"
}, _b5fv77 = [ "sön", "mån", "tis", "ons", "tors", "fre", "lör" ], _b5fv78 = {
    one: "om {0} kvartal",
    other: "om {0} kvartal"
}, _b5fv79 = {
    one: "om {0} sekund",
    other: "om {0} sekunder"
}, _b5fv80 = {
    "0": "detta kv.",
    "1": "nästa kv.",
    "-1": "förra kv."
}, _b5fv81 = {
    one: "för {0} d sedan",
    other: "för {0} d sedan"
}, _b5fv82 = {
    d: "MM-dd, E – MM-dd, E",
    M: "MM-dd, E – MM-dd, E"
}, _b5fv83 = {
    d: "MMM d, E – MMM d, E",
    M: "MMM d, E – MMM d, E"
}, _b5fv84 = {
    one: "för {0} år sedan",
    other: "för {0} år sedan"
}, _b5fv85 = {
    "0": "denna mån.",
    "1": "nästa mån.",
    "-1": "förra mån."
}, _b5fv86 = {
    one: "för {0} v. sedan",
    other: "för {0} v. sedan"
}, _b5fv87 = {
    "0": "denna sön.",
    "1": "nästa sön.",
    "-1": "förra sön."
}, _b5fv88 = {
    "0": "denna tis.",
    "1": "nästa tis.",
    "-1": "förra tis."
}, _b5fv89 = {
    "0": "denna ons.",
    "1": "nästa ons.",
    "-1": "förra ons."
}, _b5fv90 = {
    "0": "denna fre.",
    "1": "nästa fre.",
    "-1": "förra fre."
}, _b5fv91 = {
    "0": "denna lör.",
    "1": "nästa lör.",
    "-1": "förra lör."
}, _b5fv92 = [ "J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D" ], _b5fv93 = {
    wide: [ "ERA0", "ERA1" ],
    abbreviated: [ "ERA0", "ERA1" ]
}, _b5fv94 = {
    one: "för {0} kv. sedan",
    other: "för {0} kv. sedan"
}, _b5fv95 = {
    one: "för {0} tim sedan",
    other: "för {0} tim sedan"
}, _b5fv96 = {
    one: "för {0} min sedan",
    other: "för {0} min sedan"
}, _b5fv97 = {
    one: "för {0} sek sedan",
    other: "för {0} sek sedan"
}, _b5fv98 = [ "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" ], _b5fv99 = {
    "0": "denna tors.",
    "1": "nästa tors.",
    "-1": "förra tors."
}, _b5fv100 = {
    a: "h:mm a – h:mm a",
    h: "h:mm–h:mm a",
    m: "h:mm–h:mm a"
}, _b5fv101 = {
    one: "för {0} mån. sedan",
    other: "för {0} mån. sedan"
}, _b5fv102 = {
    "0": "denna vecka",
    "1": "nästa vecka",
    "-1": "förra veckan"
}, _b5fv103 = {
    one: "för {0} dag sedan",
    other: "för {0} dagar sedan"
}, _b5fv104 = {
    "0": "denna månad",
    "1": "nästa månad",
    "-1": "förra månaden"
}, _b5fv105 = {
    one: "för {0} vecka sedan",
    other: "för {0} veckor sedan"
}, _b5fv106 = {
    one: "för {0} timme sedan",
    other: "för {0} timmar sedan"
}, _b5fv107 = {
    d: "U MMM d–d",
    M: "U MMM d – MMM d",
    y: "U MMM d – U MMM d"
}, _b5fv108 = {
    one: "för {0} månad sedan",
    other: "för {0} månader sedan"
}, _b5fv109 = {
    one: "för {0} minut sedan",
    other: "för {0} minuter sedan"
}, _b5fv110 = [ "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13" ], _b5fv111 = {
    a: "h:mm a – h:mm a v",
    h: "h:mm–h:mm a v",
    m: "h:mm–h:mm a v"
}, _b5fv112 = {
    one: "för {0} kvartal sedan",
    other: "för {0} kvartal sedan"
}, _b5fv113 = {
    one: "för {0} sekund sedan",
    other: "för {0} sekunder sedan"
}, _b5fv114 = {
    d: "d–d MMM y G",
    M: "d MMM–d MMM y G",
    y: "d MMM y–d MMM y G"
}, _b5fv115 = {
    "0": "detta kvartal",
    "1": "nästa kvartal",
    "-1": "förra kvartalet"
}, _b5fv116 = {
    relative: _b5fv87
}, _b5fv117 = {
    relative: _b5fv85
}, _b5fv118 = {
    relative: _b5fv88
}, _b5fv119 = {
    relative: _b5fv89
}, _b5fv120 = {
    relative: _b5fv90
}, _b5fv121 = {
    relative: _b5fv91
}, _b5fv122 = {
    relative: _b5fv99
}, _b5fv123 = [ "söndag", "måndag", "tisdag", "onsdag", "torsdag", "fredag", "lördag" ], _b5fv124 = [ "1:a kvartalet", "2:a kvartalet", "3:e kvartalet", "4:e kvartalet" ], _b5fv125 = {
    d: "G y-MM-dd – dd",
    M: "G y-MM-dd – MM-dd",
    y: "G y-MM-dd – y-MM-dd"
}, _b5fv126 = {
    d: "y-MM-dd – y-MM-dd",
    M: "y-MM-dd – y-MM-dd",
    y: "y-MM-dd – y-MM-dd"
}, _b5fv127 = {
    "0": "sön. denna vecka",
    "1": "sön. nästa vecka",
    "-1": "sön. förra veckan"
}, _b5fv128 = {
    "0": "mån. denna vecka",
    "1": "mån. nästa vecka",
    "-1": "mån. förra veckan"
}, _b5fv129 = {
    "0": "tis. denna vecka",
    "1": "tis. nästa vecka",
    "-1": "tis. förra veckan"
}, _b5fv130 = {
    "0": "ons. denna vecka",
    "1": "ons. nästa vecka",
    "-1": "ons. förra veckan"
}, _b5fv131 = {
    "0": "fre. denna vecka",
    "1": "fre. nästa vecka",
    "-1": "fre. förra veckan"
}, _b5fv132 = {
    "0": "lör. denna vecka",
    "1": "lör. nästa vecka",
    "-1": "lör. förra veckan"
}, _b5fv133 = {
    abbreviated: {
        leap: "{0}bis"
    },
    narrow: {
        leap: "{0}b"
    },
    wide: {
        leap: "{0}bis"
    }
}, _b5fv134 = {
    "0": "i dag",
    "1": "i morgon",
    "2": "i övermorgon",
    "-2": "i förrgår",
    "-1": "i går"
}, _b5fv135 = {
    "0": "tors. denna vecka",
    "1": "tors. nästa vecka",
    "-1": "tors. förra veckan"
}, _b5fv136 = [ "M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12" ], _b5fv137 = {
    future: _b5fv18,
    past: _b5fv19
}, _b5fv138 = {
    future: _b5fv20,
    past: _b5fv21
}, _b5fv139 = {
    future: _b5fv22,
    past: _b5fv23
}, _b5fv140 = {
    "0": "söndag denna vecka",
    "1": "söndag nästa vecka",
    "-1": "söndag förra veckan"
}, _b5fv141 = {
    "0": "måndag denna vecka",
    "1": "måndag nästa vecka",
    "-1": "måndag förra veckan"
}, _b5fv142 = {
    "0": "tisdag denna vecka",
    "1": "tisdag nästa vecka",
    "-1": "tisdag förra veckan"
}, _b5fv143 = {
    "0": "onsdag denna vecka",
    "1": "onsdag nästa vecka",
    "-1": "onsdag förra veckan"
}, _b5fv144 = {
    "0": "fredag denna vecka",
    "1": "fredag nästa vecka",
    "-1": "fredag förra veckan"
}, _b5fv145 = {
    "0": "lördag denna vecka",
    "1": "lördag nästa vecka",
    "-1": "lördag förra veckan"
}, _b5fv146 = {
    future: _b5fv32,
    past: _b5fv17
}, _b5fv147 = [ undefined, "zi", "chou", "yin", "mao", "chen", "si", "wu", "wei", "shen", "you", "xu" ], _b5fv148 = {
    future: _b5fv29,
    past: _b5fv30
}, _b5fv149 = {
    "0": "torsdag denna vecka",
    "1": "torsdag nästa vecka",
    "-1": "torsdag förra veckan"
}, _b5fv150 = {
    future: _b5fv44,
    past: _b5fv31
}, _b5fv151 = {
    relative: _b5fv127
}, _b5fv152 = {
    relative: _b5fv128
}, _b5fv153 = {
    relative: _b5fv129
}, _b5fv154 = {
    relative: _b5fv130
}, _b5fv155 = {
    relative: _b5fv131
}, _b5fv156 = {
    relative: _b5fv132
}, _b5fv157 = {
    d: "U MMM d, E – MMM d, E",
    M: "U MMM d, E – MMM d, E",
    y: "U MMM d, E – U MMM d, E"
}, _b5fv158 = {
    future: _b5fv47,
    past: _b5fv48
}, _b5fv159 = {
    d: "E dd MMM–E dd MMM y G",
    M: "E dd MMM–E dd MMM y G",
    y: "E dd MMM y–E dd MMM y G"
}, _b5fv160 = {
    relative: _b5fv135
}, _b5fv161 = {
    future: _b5fv51,
    past: _b5fv45
}, _b5fv162 = {
    d: "E y-MM-dd – E y-MM-dd",
    M: "E y-MM-dd – E y-MM-dd G",
    y: "E y-MM-dd – E y-MM-dd G"
}, _b5fv163 = [ "jan.", "feb.", "mars", "apr.", "maj", "juni", "juli", "aug.", "sep.", "okt.", "nov.", "dec." ], _b5fv164 = {
    d: "y-MM-dd, E – y-MM-dd, E",
    M: "y-MM-dd, E – y-MM-dd, E",
    y: "y-MM-dd, E – y-MM-dd, E"
}, _b5fv165 = {
    relative: _b5fv140
}, _b5fv166 = {
    relative: _b5fv141
}, _b5fv167 = {
    relative: _b5fv142
}, _b5fv168 = {
    relative: _b5fv143
}, _b5fv169 = {
    relative: _b5fv144
}, _b5fv170 = {
    relative: _b5fv145
}, _b5fv171 = {
    relative: _b5fv149
}, _b5fv172 = {
    future: _b5fv46,
    past: _b5fv81
}, _b5fv173 = {
    future: _b5fv50,
    past: _b5fv84
}, _b5fv174 = {
    future: _b5fv52,
    past: _b5fv86
}, _b5fv175 = {
    future: _b5fv60,
    past: _b5fv94
}, _b5fv176 = {
    future: _b5fv61,
    past: _b5fv95
}, _b5fv177 = {
    future: _b5fv62,
    past: _b5fv96
}, _b5fv178 = {
    future: _b5fv63,
    past: _b5fv97
}, _b5fv179 = {
    displayName: "h",
    relativeTime: _b5fv138
}, _b5fv180 = {
    displayName: "s",
    relativeTime: _b5fv139
}, _b5fv181 = [ "Muh.", "Saf.", "Rab. I", "Rab. II", "Jum. I", "Jum. II", "Raj.", "Sha.", "Ram.", "Shaw.", "Dhuʻl-Q.", "Dhuʻl-H." ], _b5fv182 = {
    future: _b5fv67,
    past: _b5fv101
}, _b5fv183 = {
    future: _b5fv68,
    past: _b5fv103
}, _b5fv184 = [ "tishrí", "heshván", "kislév", "tevét", "shevát", "adár I", "adár", "nisán", "ijjár", "siván", "tammúz", "ab", "elúl" ], _b5fv185 = [ "Tishrí", "Heshván", "Kislév", "Tevét", "Shevát", "Adár I", "Adár", "Nisán", "Ijjár", "Siván", "Tammúz", "Ab", "Elúl" ], _b5fv186 = [ "farvardin", "ordibehesht", "khordād", "tir", "mordād", "shahrivar", "mehr", "ābān", "āzar", "dey", "bahman", "esfand" ], _b5fv187 = [ "Farvardin", "Ordibehesht", "Khordād", "Tir", "Mordād", "Shahrivar", "Mehr", "Ābān", "Āzar", "Dey", "Bahman", "Esfand" ], _b5fv188 = [ "januari", "februari", "mars", "april", "maj", "juni", "juli", "augusti", "september", "oktober", "november", "december" ], _b5fv189 = {
    displayName: "m",
    relativeTime: _b5fv158
}, _b5fv190 = {
    future: _b5fv72,
    past: _b5fv105
}, _b5fv191 = {
    future: _b5fv73,
    past: _b5fv106
}, _b5fv192 = {
    future: _b5fv74,
    past: _b5fv108
}, _b5fv193 = {
    future: _b5fv76,
    past: _b5fv109
}, _b5fv194 = {
    future: _b5fv78,
    past: _b5fv112
}, _b5fv195 = {
    future: _b5fv79,
    past: _b5fv113
}, _b5fv196 = [ "tout", "bâbâ", "hâtour", "kiahk", "toubah", "amshîr", "barmahât", "barmoudah", "bashans", "ba’ounah", "abîb", "misra", "al-nasi" ], _b5fv197 = [ "Tout", "Bâbâ", "Hâtour", "Kiahk", "Toubah", "Amshîr", "Barmahât", "Barmoudah", "Bashans", "Ba’ounah", "Abîb", "Misra", "Al-nasi" ], _b5fv198 = [ "mäskäräm", "teqemt", "hedar", "tahesas", "ter", "yäkatit", "mägabit", "miyazya", "guenbot", "säné", "hamlé", "nähasé", "pagumén" ], _b5fv199 = [ "Mäskäräm", "Teqemt", "Hedar", "Tahesas", "Ter", "Yäkatit", "Mägabit", "Miyazya", "Guenbot", "Säné", "Hamlé", "Nähasé", "Pagumén" ], _b5fv200 = {
    midnight: "midn.",
    am: "fm",
    pm: "em",
    morning1: "morg.",
    morning2: "förm.",
    afternoon1: "efterm.",
    evening1: "kväll",
    night1: "natt"
}, _b5fv201 = [ "chaitra", "vaishākh", "jyaishtha", "āshādha", "shrāvana", "bhādrapad", "āshwin", "kārtik", "mārgashīrsha", "paush", "māgh", "phālgun" ], _b5fv202 = [ "Chaitra", "Vaishākh", "Jyaishtha", "Āshādha", "Shrāvana", "Bhādrapad", "Āshwin", "Kārtik", "Mārgashīrsha", "Paush", "Māgh", "Phālgun" ], _b5fv203 = {
    midnight: "midnatt",
    am: "f.m.",
    pm: "e.m.",
    morning1: "morgon",
    morning2: "förm.",
    afternoon1: "efterm.",
    evening1: "kväll",
    night1: "natt"
}, _b5fv204 = {
    abbreviated: _b5fv2,
    narrow: [ "1", "2", "3", "4" ],
    wide: _b5fv124
}, _b5fv205 = {
    displayName: "tim",
    relativeTime: _b5fv176
}, _b5fv206 = {
    displayName: "min",
    relativeTime: _b5fv177
}, _b5fv207 = {
    displayName: "sek",
    relativeTime: _b5fv178
}, _b5fv208 = {
    midnight: "midn.",
    am: "fm",
    pm: "em",
    morning1: "på morg.",
    morning2: "på förm.",
    afternoon1: "på efterm.",
    evening1: "på kvällen",
    night1: "på natten"
}, _b5fv209 = {
    midnight: "midnatt",
    am: "fm",
    pm: "em",
    morning1: "på morg.",
    morning2: "på förm.",
    afternoon1: "på efterm.",
    evening1: "på kvällen",
    night1: "på natten"
}, _b5fv210 = {
    midnight: "midnatt",
    am: "förmiddag",
    pm: "eftermiddag",
    morning1: "morgon",
    morning2: "förmiddag",
    afternoon1: "eftermiddag",
    evening1: "kväll",
    night1: "natt"
}, _b5fv211 = {
    displayName: "timme",
    relativeTime: _b5fv191
}, _b5fv212 = {
    displayName: "minut",
    relativeTime: _b5fv193
}, _b5fv213 = [ "muharram", "safar", "rabi’ al-awwal", "rabi’ al-akhir", "jumada-l-ula", "jumada-l-akhira", "rajab", "sha’ban", "ramadan", "shawwal", "dhu-l-ga’da", "dhu-l-hijja" ], _b5fv214 = [ "Muharram", "Safar", "Rabi’ al-awwal", "Rabi’ al-akhir", "Jumada-l-ula", "Jumada-l-akhira", "Rajab", "Sha’ban", "Ramadan", "Shawwal", "Dhu-l-ga’da", "Dhu-l-hijja" ], _b5fv215 = {
    midnight: "midnatt",
    am: "fm",
    pm: "em",
    morning1: "på morgonen",
    morning2: "på förmiddagen",
    afternoon1: "på eftermiddagen",
    evening1: "på kvällen",
    night1: "på natten"
}, _b5fv216 = {
    displayName: "år",
    relative: _b5fv59,
    relativeTime: _b5fv148
}, _b5fv217 = {
    displayName: "v",
    relative: _b5fv75,
    relativeTime: _b5fv146
}, _b5fv218 = {
    displayName: "kv.",
    relative: _b5fv80,
    relativeTime: _b5fv150
}, _b5fv219 = {
    displayName: "sekund",
    relative: [ "nu" ],
    relativeTime: _b5fv195
}, _b5fv220 = {
    displayName: "m",
    relative: _b5fv85,
    relativeTime: _b5fv161
}, _b5fv221 = {
    displayName: "år",
    relative: _b5fv59,
    relativeTime: _b5fv173
}, _b5fv222 = {
    displayName: "v",
    relative: _b5fv75,
    relativeTime: _b5fv174
}, _b5fv223 = {
    displayName: "dag",
    relative: _b5fv134,
    relativeTime: _b5fv137
}, _b5fv224 = {
    displayName: "kv.",
    relative: _b5fv80,
    relativeTime: _b5fv175
}, _b5fv225 = {
    format: _b5fv133,
    numeric: _b5fv1,
    standAlone: _b5fv133
}, _b5fv226 = {
    displayName: "m",
    relative: _b5fv85,
    relativeTime: _b5fv182
}, _b5fv227 = {
    displayName: "dag",
    relative: _b5fv134,
    relativeTime: _b5fv172
}, _b5fv228 = {
    abbreviated: _b5fv77,
    narrow: _b5fv16,
    wide: _b5fv123,
    "short": _b5fv54
}, _b5fv229 = {
    displayName: "vecka",
    relative: _b5fv102,
    relativeTime: _b5fv190
}, _b5fv230 = {
    displayName: "månad",
    relative: _b5fv104,
    relativeTime: _b5fv192
}, _b5fv231 = {
    displayName: "dag",
    relative: _b5fv134,
    relativeTime: _b5fv183
}, _b5fv232 = {
    abbreviated: _b5fv136,
    narrow: _b5fv98,
    wide: _b5fv136
}, _b5fv233 = {
    displayName: "kvartal",
    relative: _b5fv115,
    relativeTime: _b5fv194
}, _b5fv234 = {
    abbreviated: _b5fv147,
    narrow: _b5fv147,
    wide: _b5fv147
}, _b5fv235 = {
    format: _b5fv234
}, _b5fv236 = {
    abbreviated: _b5fv163,
    narrow: _b5fv92,
    wide: _b5fv188
}, _b5fv237 = {
    format: _b5fv204,
    standAlone: _b5fv204
}, _b5fv238 = {
    abbreviated: _b5fv181,
    narrow: _b5fv98,
    wide: _b5fv213
}, _b5fv239 = {
    abbreviated: _b5fv181,
    narrow: _b5fv98,
    wide: _b5fv214
}, _b5fv240 = {
    fullDate: "r(U) MMMM d, EEEE",
    longDate: "r(U) MMMM d",
    mediumDate: "r MMM d",
    shortDate: "r-MM-dd",
    fullTime: "'kl'. HH:mm:ss zzzz",
    longTime: "HH:mm:ss z",
    mediumTime: "HH:mm:ss",
    shortTime: "HH:mm",
    shortDateTime: "r-MM-dd HH:mm",
    mediumDateTime: "r MMM d HH:mm:ss",
    longDateTime: "r(U) MMMM d HH:mm:ss z",
    fullDateTime: "r(U) MMMM d, EEEE 'kl'. HH:mm:ss zzzz"
}, _b5fv241 = {
    abbreviated: _b5fv203,
    narrow: _b5fv200,
    wide: _b5fv210
}, _b5fv242 = {
    format: _b5fv228,
    standAlone: _b5fv228
}, _b5fv243 = {
    abbreviated: _b5fv209,
    narrow: _b5fv208,
    wide: _b5fv215
}, _b5fv244 = {
    format: _b5fv232,
    standAlone: _b5fv232
}, _b5fv245 = {
    d: "d",
    E: "ccc",
    Ed: "d, E",
    Gy: "r U",
    GyMMM: "r(U) MMM",
    GyMMMd: "r MMM d",
    GyMMMEd: "r(U) MMM d, E",
    h: "h a",
    H: "HH",
    hm: "h:mm a",
    Hm: "HH:mm",
    hms: "h:mm:ss a",
    Hms: "HH:mm:ss",
    M: "L",
    Md: "MM-dd",
    MEd: "MM-dd, E",
    MMM: "LLL",
    MMMd: "MMM d",
    MMMEd: "MMM d, E",
    MMMMd: "MMMM d",
    ms: "mm:ss",
    UM: "U MM",
    UMd: "U MM-d",
    UMMM: "U MMM",
    UMMMd: "U MMM d",
    y: "r(U)",
    yMd: "r-MM-dd",
    yyyy: "r(U)",
    yyyyM: "r-MM",
    yyyyMd: "r-MM-dd",
    yyyyMEd: "r-MM-dd, E",
    yyyyMMM: "r(U) MMM",
    yyyyMMMd: "r MMM d",
    yyyyMMMEd: "r(U) MMM d, E",
    yyyyMMMM: "r(U) MMMM",
    yyyyQQQ: "r(U) QQQ",
    yyyyQQQQ: "r(U) QQQQ"
}, _b5fv246 = {
    format: _b5fv236,
    standAlone: _b5fv236
}, _b5fv247 = [ undefined, "jia-zi", "yi-chou", "bing-yin", "ding-mao", "wu-chen", "ji-si", "geng-wu", "xin-wei", "ren-shen", "gui-you", "jia-xu", "yi-hai", "bing-zi", "ding-chou", "wu-yin", "ji-mao", "geng-chen", "xin-si", "ren-wu", "gui-wei", "jia-shen", "yi-you", "bing-xu", "ding-hai", "wu-zi", "ji-chou", "geng-yin", "xin-mao", "ren-chen", "gui-si", "jia-wu", "yi-wei", "bing-shen", "ding-you", "wu-xu", "ji-hai", "geng-zi", "xin-chou", "ren-yin", "gui-mao", "jia-chen", "yi-si", "bing-wu", "ding-wei", "wu-shen", "ji-you", "geng-xu", "xin-hai", "ren-zi", "gui-chou", "jia-yin", "yi-mao", "bing-chen", "ding-si", "wu-wu", "ji-wei", "geng-shen", "xin-you", "ren-xu" ], _b5fv248 = {
    format: _b5fv238,
    standAlone: _b5fv239
}, _b5fv249 = {
    basic: _b5fv240,
    cldr: _b5fv245
}, _b5fv250 = {
    format: _b5fv243,
    standAlone: _b5fv241
}, _b5fv251 = {
    d: {
        d: "d–d"
    },
    h: _b5fv11,
    H: {
        H: "HH–HH"
    },
    hm: _b5fv100,
    Hm: _b5fv41,
    hmv: _b5fv111,
    Hmv: _b5fv56,
    hv: _b5fv15,
    Hv: {
        H: "HH–HH v"
    },
    M: {
        M: "M–M"
    },
    Md: _b5fv5,
    MEd: _b5fv64,
    MMM: {
        M: "MMM–MMM"
    },
    MMMd: _b5fv33,
    MMMEd: _b5fv70,
    y: {
        y: "y–y G"
    },
    yM: _b5fv53,
    yMd: _b5fv125,
    yMEd: _b5fv162,
    yMMM: _b5fv65,
    yMMMd: _b5fv114,
    yMMMEd: _b5fv159,
    yMMMM: _b5fv71
}, _b5fv252 = {
    d: {
        d: "d–d"
    },
    h: _b5fv11,
    H: {
        H: "HH–HH"
    },
    hm: _b5fv100,
    Hm: _b5fv41,
    hmv: _b5fv111,
    Hmv: _b5fv56,
    hv: _b5fv15,
    Hv: {
        H: "HH–HH v"
    },
    M: {
        M: "MM–MM"
    },
    Md: _b5fv57,
    MEd: _b5fv82,
    MMM: {
        M: "LLL–LLL"
    },
    MMMd: _b5fv28,
    MMMEd: _b5fv83,
    y: {
        y: "U–U"
    },
    yM: _b5fv42,
    yMd: _b5fv126,
    yMEd: _b5fv164,
    yMMM: _b5fv43,
    yMMMd: _b5fv107,
    yMMMEd: _b5fv157,
    yMMMM: _b5fv58
}, _b5fv253 = {
    abbreviated: _b5fv247,
    narrow: _b5fv247,
    wide: _b5fv247
}, _b5fv254 = {
    format: _b5fv253
}, _b5fv255 = [ "Taika (645–650)", "Hakuchi (650–671)", "Hakuhō (672–686)", "Shuchō (686–701)", "Taihō (701–704)", "Keiun (704–708)", "Wadō (708–715)", "Reiki (715–717)", "Yōrō (717–724)", "Jinki (724–729)", "Tempyō (729–749)", "Tempyō-kampō (749–749)", "Tempyō-shōhō (749–757)", "Tempyō-hōji (757–765)", "Temphō-jingo (765–767)", "Jingo-keiun (767–770)", "Hōki (770–780)", "Ten-ō (781–782)", "Enryaku (782–806)", "Daidō (806–810)", "Kōnin (810–824)", "Tenchō (824–834)", "Jōwa (834–848)", "Kajō (848–851)", "Ninju (851–854)", "Saiko (854–857)", "Tennan (857–859)", "Jōgan (859–877)", "Genkei (877–885)", "Ninna (885–889)", "Kampyō (889–898)", "Shōtai (898–901)", "Engi (901–923)", "Enchō (923–931)", "Shōhei (931–938)", "Tengyō (938–947)", "Tenryaku (947–957)", "Tentoku (957–961)", "Ōwa (961–964)", "Kōhō (964–968)", "Anna (968–970)", "Tenroku (970–973)", "Ten-en (973–976)", "Jōgen (976–978)", "Tengen (978–983)", "Eikan (983–985)", "Kanna (985–987)", "Ei-en (987–989)", "Eiso (989–990)", "Shōryaku (990–995)", "Chōtoku (995–999)", "Chōhō (999–1004)", "Kankō (1004–1012)", "Chōwa (1012–1017)", "Kannin (1017–1021)", "Jian (1021–1024)", "Manju (1024–1028)", "Chōgen (1028–1037)", "Chōryaku (1037–1040)", "Chōkyū (1040–1044)", "Kantoku (1044–1046)", "Eishō (1046–1053)", "Tengi (1053–1058)", "Kōhei (1058–1065)", "Jiryaku (1065–1069)", "Enkyū (1069–1074)", "Shōho (1074–1077)", "Shōryaku (1077–1081)", "Eiho (1081–1084)", "Ōtoku (1084–1087)", "Kanji (1087–1094)", "Kaho (1094–1096)", "Eichō (1096–1097)", "Shōtoku (1097–1099)", "Kōwa (1099–1104)", "Chōji (1104–1106)", "Kashō (1106–1108)", "Tennin (1108–1110)", "Ten-ei (1110–1113)", "Eikyū (1113–1118)", "Gen-ei (1118–1120)", "Hoan (1120–1124)", "Tenji (1124–1126)", "Daiji (1126–1131)", "Tenshō (1131–1132)", "Chōshō (1132–1135)", "Hoen (1135–1141)", "Eiji (1141–1142)", "Kōji (1142–1144)", "Tenyō (1144–1145)", "Kyūan (1145–1151)", "Ninpei (1151–1154)", "Kyūju (1154–1156)", "Hogen (1156–1159)", "Heiji (1159–1160)", "Eiryaku (1160–1161)", "Ōho (1161–1163)", "Chōkan (1163–1165)", "Eiman (1165–1166)", "Nin-an (1166–1169)", "Kaō (1169–1171)", "Shōan (1171–1175)", "Angen (1175–1177)", "Jishō (1177–1181)", "Yōwa (1181–1182)", "Juei (1182–1184)", "Genryuku (1184–1185)", "Bunji (1185–1190)", "Kenkyū (1190–1199)", "Shōji (1199–1201)", "Kennin (1201–1204)", "Genkyū (1204–1206)", "Ken-ei (1206–1207)", "Shōgen (1207–1211)", "Kenryaku (1211–1213)", "Kenpō (1213–1219)", "Shōkyū (1219–1222)", "Jōō (1222–1224)", "Gennin (1224–1225)", "Karoku (1225–1227)", "Antei (1227–1229)", "Kanki (1229–1232)", "Jōei (1232–1233)", "Tempuku (1233–1234)", "Bunryaku (1234–1235)", "Katei (1235–1238)", "Ryakunin (1238–1239)", "En-ō (1239–1240)", "Ninji (1240–1243)", "Kangen (1243–1247)", "Hōji (1247–1249)", "Kenchō (1249–1256)", "Kōgen (1256–1257)", "Shōka (1257–1259)", "Shōgen (1259–1260)", "Bun-ō (1260–1261)", "Kōchō (1261–1264)", "Bun-ei (1264–1275)", "Kenji (1275–1278)", "Kōan (1278–1288)", "Shōō (1288–1293)", "Einin (1293–1299)", "Shōan (1299–1302)", "Kengen (1302–1303)", "Kagen (1303–1306)", "Tokuji (1306–1308)", "Enkei (1308–1311)", "Ōchō (1311–1312)", "Shōwa (1312–1317)", "Bunpō (1317–1319)", "Genō (1319–1321)", "Genkyō (1321–1324)", "Shōchū (1324–1326)", "Kareki (1326–1329)", "Gentoku (1329–1331)", "Genkō (1331–1334)", "Kemmu (1334–1336)", "Engen (1336–1340)", "Kōkoku (1340–1346)", "Shōhei (1346–1370)", "Kentoku (1370–1372)", "Bunchū (1372–1375)", "Tenju (1375–1379)", "Kōryaku (1379–1381)", "Kōwa (1381–1384)", "Genchū (1384–1392)", "Meitoku (1384–1387)", "Kakei (1387–1389)", "Kōō (1389–1390)", "Meitoku (1390–1394)", "Ōei (1394–1428)", "Shōchō (1428–1429)", "Eikyō (1429–1441)", "Kakitsu (1441–1444)", "Bun-an (1444–1449)", "Hōtoku (1449–1452)", "Kyōtoku (1452–1455)", "Kōshō (1455–1457)", "Chōroku (1457–1460)", "Kanshō (1460–1466)", "Bunshō (1466–1467)", "Ōnin (1467–1469)", "Bunmei (1469–1487)", "Chōkyō (1487–1489)", "Entoku (1489–1492)", "Meiō (1492–1501)", "Bunki (1501–1504)", "Eishō (1504–1521)", "Taiei (1521–1528)", "Kyōroku (1528–1532)", "Tenmon (1532–1555)", "Kōji (1555–1558)", "Eiroku (1558–1570)", "Genki (1570–1573)", "Tenshō (1573–1592)", "Bunroku (1592–1596)", "Keichō (1596–1615)", "Genwa (1615–1624)", "Kan-ei (1624–1644)", "Shōho (1644–1648)", "Keian (1648–1652)", "Shōō (1652–1655)", "Meiryaku (1655–1658)", "Manji (1658–1661)", "Kanbun (1661–1673)", "Enpō (1673–1681)", "Tenwa (1681–1684)", "Jōkyō (1684–1688)", "Genroku (1688–1704)", "Hōei (1704–1711)", "Shōtoku (1711–1716)", "Kyōhō (1716–1736)", "Genbun (1736–1741)", "Kanpō (1741–1744)", "Enkyō (1744–1748)", "Kan-en (1748–1751)", "Hōryaku (1751–1764)", "Meiwa (1764–1772)", "An-ei (1772–1781)", "Tenmei (1781–1789)", "Kansei (1789–1801)", "Kyōwa (1801–1804)", "Bunka (1804–1818)", "Bunsei (1818–1830)", "Tenpō (1830–1844)", "Kōka (1844–1848)", "Kaei (1848–1854)", "Ansei (1854–1860)", "Man-en (1860–1861)", "Bunkyū (1861–1864)", "Genji (1864–1865)", "Keiō (1865–1868)", "Meiji", "Taishō", "Shōwa", "Heisei" ], _b5fv256 = {
    dayParts: _b5fv235,
    days: _b5fv254,
    months: _b5fv254,
    years: _b5fv254,
    zodiacs: _b5fv235
}, _b5fv257 = {
    era: {
        displayName: "era"
    },
    year: _b5fv221,
    "year-short": _b5fv221,
    "year-narrow": _b5fv216,
    quarter: _b5fv233,
    "quarter-short": _b5fv224,
    "quarter-narrow": _b5fv218,
    month: _b5fv230,
    "month-short": _b5fv226,
    "month-narrow": _b5fv220,
    week: _b5fv229,
    "week-short": _b5fv222,
    "week-narrow": _b5fv217,
    day: _b5fv231,
    "day-short": _b5fv227,
    "day-narrow": _b5fv223,
    weekday: _b5fv6,
    dayperiod: _b5fv3,
    hour: _b5fv211,
    "hour-short": _b5fv205,
    "hour-narrow": _b5fv179,
    minute: _b5fv212,
    "minute-short": _b5fv206,
    "minute-narrow": _b5fv189,
    second: _b5fv219,
    "second-short": _b5fv207,
    "second-narrow": _b5fv180,
    zone: _b5fv4,
    sun: _b5fv165,
    "sun-short": _b5fv151,
    "sun-narrow": _b5fv116,
    mon: _b5fv166,
    "mon-short": _b5fv152,
    "mon-narrow": _b5fv117,
    tue: _b5fv167,
    "tue-short": _b5fv153,
    "tue-narrow": _b5fv118,
    wed: _b5fv168,
    "wed-short": _b5fv154,
    "wed-narrow": _b5fv119,
    thu: _b5fv171,
    "thu-short": _b5fv160,
    "thu-narrow": _b5fv122,
    fri: _b5fv169,
    "fri-short": _b5fv155,
    "fri-narrow": _b5fv120,
    sat: _b5fv170,
    "sat-short": _b5fv156,
    "sat-narrow": _b5fv121
}, _b5fv258 = {
    dateFormats: {
        basic: {},
        cldr: {}
    },
    fields: _b5fv257
}, _b5fv259 = {
    dateFormats: P.calendars.buddhist.dateFormats,
    datePartsOrder: "ymd",
    dateIntervalFormats: _b5fv251,
    dateIntervalFallbackFormat: "{0} – {1}",
    dayNames: _b5fv242,
    dayPeriods: _b5fv250,
    monthNames: _b5fv248,
    eraNames: _b5fv34,
    quarterNames: _b5fv237,
    fields: _b5fv257
}, _b5fv260 = {
    dateFormats: _b5fv249,
    datePartsOrder: "md",
    dateIntervalFormats: _b5fv252,
    dateIntervalFallbackFormat: "{0} – {1}",
    dayNames: _b5fv242,
    dayPeriods: _b5fv250,
    cyclicNames: _b5fv256,
    monthNames: _b5fv244,
    monthPatterns: _b5fv225,
    quarterNames: _b5fv237,
    fields: _b5fv257
};

inter.id = "sv_fi";

inter.unitPatterns = {
    narrow: {
        unit: {
            speedKilometerPerHour: _b5fv35,
            accelerationGForce: {
                one: "{0}G",
                other: "{0}G"
            },
            accelerationMeterPerSecondSquared: {
                one: "{0}m/s²",
                other: "{0}m/s²"
            },
            angleRevolution: {
                one: "{0}varv",
                other: "{0}varv"
            },
            angleRadian: {
                one: "{0}rad",
                other: "{0}rad"
            },
            angleDegree: _b5fv7,
            angleArcMinute: _b5fv8,
            angleArcSecond: _b5fv9,
            areaSquareKilometer: {
                one: "{0}km²",
                other: "{0}km²"
            },
            areaHectare: {
                one: "{0}ha",
                other: "{0}ha"
            },
            areaSquareMeter: {
                one: "{0}m²",
                other: "{0}m²"
            },
            areaSquareCentimeter: {
                one: "{0}cm²",
                other: "{0}cm²"
            },
            areaSquareMile: {
                one: "{0} mi²",
                other: "{0} mi²"
            },
            areaAcre: _b5fv13,
            areaSquareYard: {
                one: "{0} en. yrd²",
                other: "{0} en. yrd²"
            },
            areaSquareFoot: {
                one: "{0} fot²",
                other: "{0} fot²"
            },
            areaSquareInch: _b5fv36,
            consumptionLiterPerKilometer: {
                one: "{0}L/km",
                other: "{0}L/km"
            },
            "consumptionLiterPer-100kilometers": _b5fv69,
            consumptionMilePerGallon: {
                one: "{0}e.mil/gn",
                other: "{0}e.mil/gn"
            },
            digitalTerabit: {
                one: "{0}Tb",
                other: "{0}Tb"
            },
            digitalGigabit: {
                one: "{0}Gb",
                other: "{0}Gb"
            },
            digitalMegabit: {
                one: "{0}Mb",
                other: "{0}Mb"
            },
            digitalKilobit: {
                one: "{0}kb",
                other: "{0}kb"
            },
            digitalByte: {
                one: "{0}B",
                other: "{0}B"
            },
            digitalBit: {
                one: "{0}b",
                other: "{0}b"
            },
            durationCentury: {
                one: "{0}årh",
                other: "{0}årh"
            },
            durationYear: {
                one: "{0}å",
                other: "{0}å"
            },
            durationMonth: _b5fv10,
            durationWeek: {
                one: "{0}v",
                other: "{0}v"
            },
            durationDay: {
                one: "{0}d",
                other: "{0}d"
            },
            durationHour: {
                one: "{0}h",
                other: "{0}h"
            },
            durationMinute: _b5fv10,
            durationSecond: {
                one: "{0}s",
                other: "{0}s"
            },
            durationMillisecond: {
                one: "{0}ms",
                other: "{0}ms"
            },
            durationMicrosecond: {
                one: "{0}μs",
                other: "{0}μs"
            },
            durationNanosecond: {
                one: "{0}ns",
                other: "{0}ns"
            },
            electricAmpere: {
                one: "{0}A",
                other: "{0}A"
            },
            electricMilliampere: {
                one: "{0}mA",
                other: "{0}mA"
            },
            electricOhm: {
                one: "{0}Ω",
                other: "{0}Ω"
            },
            electricVolt: {
                one: "{0}V",
                other: "{0}V"
            },
            energyKilocalorie: _b5fv37,
            energyCalorie: _b5fv24,
            energyFoodcalorie: _b5fv37,
            energyKilojoule: {
                one: "{0}kJ",
                other: "{0}kJ"
            },
            energyJoule: {
                one: "{0}J",
                other: "{0}J"
            },
            energyKilowattHour: {
                one: "{0}kWh",
                other: "{0}kWh"
            },
            frequencyGigahertz: {
                one: "{0}GHz",
                other: "{0}GHz"
            },
            frequencyMegahertz: {
                one: "{0}MHz",
                other: "{0}MHz"
            },
            frequencyKilohertz: {
                one: "{0}kHz",
                other: "{0}kHz"
            },
            frequencyHertz: {
                one: "{0}Hz",
                other: "{0}Hz"
            },
            lengthKilometer: {
                one: "{0}km",
                other: "{0}km"
            },
            lengthMeter: _b5fv10,
            lengthDecimeter: {
                one: "{0}dm",
                other: "{0}dm"
            },
            lengthCentimeter: {
                one: "{0}cm",
                other: "{0}cm"
            },
            lengthMillimeter: {
                one: "{0}mm",
                other: "{0}mm"
            },
            lengthMicrometer: {
                one: "{0}μm",
                other: "{0}μm"
            },
            lengthNanometer: {
                one: "{0}nm",
                other: "{0}nm"
            },
            lengthPicometer: {
                one: "{0}pm",
                other: "{0}pm"
            },
            lengthMile: {
                one: "{0} mi",
                other: "{0}mi"
            },
            lengthYard: {
                one: "{0}yd",
                other: "{0}yd"
            },
            lengthFoot: _b5fv25,
            lengthInch: _b5fv26,
            lengthParsec: {
                one: "{0} parsek",
                other: "{0} parsek"
            },
            lengthLightYear: {
                one: "{0} ljusår",
                other: "{0} ljusår"
            },
            lengthAstronomicalUnit: {
                one: "{0}AE",
                other: "{0}AE"
            },
            lengthFurlong: {
                one: "{0}en.pfrld",
                other: "{0}en.pfrld"
            },
            lengthFathom: _b5fv49,
            lengthNauticalMile: {
                one: "{0}M",
                other: "{0}M"
            },
            lengthMileScandinavian: {
                one: "{0}mil",
                other: "{0}mil"
            },
            lightLux: {
                one: "{0} lx",
                other: "{0} lx"
            },
            massMetricTon: {
                one: "{0}t",
                other: "{0}t"
            },
            massKilogram: {
                one: "{0}kg",
                other: "{0}kg"
            },
            massGram: {
                one: "{0}g",
                other: "{0}g"
            },
            massMilligram: {
                one: "{0}mg",
                other: "{0}mg"
            },
            massMicrogram: {
                one: "{0}μg",
                other: "{0}μg"
            },
            massTon: {
                one: "{0} en.k.ton",
                other: "{0} en.k.ton"
            },
            massStone: {
                one: "{0} eng. s:n",
                other: "{0} eng. s:n"
            },
            massPound: {
                one: "{0} skålpund",
                other: "{0} skålpund"
            },
            massOunce: _b5fv27,
            massOunceTroy: {
                one: "{0} tr.uns",
                other: "{0} tr.uns"
            },
            massCarat: {
                one: "{0} karat",
                other: "{0} karat"
            },
            powerGigawatt: {
                one: "{0}GW",
                other: "{0}GW"
            },
            powerMegawatt: {
                one: "{0}MW",
                other: "{0}MW"
            },
            powerKilowatt: {
                one: "{0}kW",
                other: "{0}kW"
            },
            powerWatt: {
                one: "{0}W",
                other: "{0}W"
            },
            powerMilliwatt: {
                one: "{0}mW",
                other: "{0}mW"
            },
            powerHorsepower: {
                one: "{0}hk",
                other: "{0}hk"
            },
            pressureHectopascal: {
                one: "{0}hPa",
                other: "{0}hPa"
            },
            pressureMillimeterOfMercury: {
                one: "{0}mm Hg",
                other: "{0}mm Hg"
            },
            pressurePoundPerSquareInch: {
                one: "{0}s:d/tum²",
                other: "{0}s:d/tum²"
            },
            pressureInchHg: _b5fv55,
            pressureMillibar: {
                one: "{0}mbar",
                other: "{0}mbar"
            },
            speedMeterPerSecond: {
                one: "{0}m/s",
                other: "{0}m/s"
            },
            speedMilePerHour: _b5fv38,
            speedKnot: {
                one: "{0}knop",
                other: "{0}knop"
            },
            temperatureGeneric: _b5fv7,
            temperatureCelsius: _b5fv14,
            temperatureFahrenheit: {
                one: "{0}°F",
                other: "{0}°F"
            },
            temperatureKelvin: {
                one: "{0}K",
                other: "{0}K"
            },
            volumeCubicKilometer: {
                one: "{0}km³",
                other: "{0}km³"
            },
            volumeCubicMeter: {
                one: "{0}m³",
                other: "{0} m³"
            },
            volumeCubicCentimeter: {
                one: "{0}cm³",
                other: "{0}cm³"
            },
            volumeCubicMile: {
                one: "{0} mi³",
                other: "{0} mi³"
            },
            volumeCubicYard: {
                one: "{0} en. yrd³",
                other: "{0} en. yrd³"
            },
            volumeCubicFoot: _b5fv39,
            volumeCubicInch: _b5fv40,
            volumeMegaliter: {
                one: "{0}ML",
                other: "{0}ML"
            },
            volumeHectoliter: {
                one: "{0}hL",
                other: "{0}hL"
            },
            volumeLiter: _b5fv12,
            volumeDeciliter: {
                one: "{0}dL",
                other: "{0}dL"
            },
            volumeCentiliter: {
                one: "{0}cL",
                other: "{0}cL"
            },
            volumeMilliliter: {
                one: "{0}mL",
                other: "{0}mL"
            },
            volumePintMetric: {
                one: "{0}pt·50cL",
                other: "{0}pt·50cL"
            },
            volumeCupMetric: {
                one: "{0}kp·2½dl",
                other: "{0}kp·2½dl"
            },
            volumeAcreFoot: {
                one: "{0}en.td·fot",
                other: "{0}en.td·fot"
            },
            volumeBushel: _b5fv66,
            volumeGallon: {
                one: "{0} v:egal:n",
                other: "{0} v:egal:n"
            },
            volumeQuart: {
                one: "{0} v:equart",
                other: "{0} v:equart"
            },
            volumePint: {
                one: "{0} v:epint",
                other: "{0} v:epint"
            },
            volumeCup: {
                one: "{0}kp·2½dL",
                other: "{0}kp·2½dL"
            },
            volumeFluidOunce: {
                one: "{0} v:euns",
                other: "{0} v:euns"
            },
            volumeTablespoon: {
                one: "{0}msk",
                other: "{0}msk"
            },
            volumeTeaspoon: {
                one: "{0}tsk",
                other: "{0}tsk"
            }
        },
        compoundUnit: {
            per: "{0}/{1}"
        }
    },
    "long": P.unitPatterns.long,
    "short": {
        unit: {
            accelerationGForce: {
                one: "{0} G",
                other: "{0} G"
            },
            accelerationMeterPerSecondSquared: {
                one: "{0} m/s²",
                other: "{0} m/s²"
            },
            angleRevolution: {
                one: "{0} varv",
                other: "{0} varv"
            },
            angleRadian: {
                one: "{0} rad",
                other: "{0} rad"
            },
            angleDegree: _b5fv7,
            angleArcMinute: _b5fv8,
            angleArcSecond: _b5fv9,
            areaSquareKilometer: {
                one: "{0} km²",
                other: "{0} km²"
            },
            areaHectare: {
                one: "{0} ha",
                other: "{0} ha"
            },
            areaSquareMeter: {
                one: "{0} m²",
                other: "{0} m²"
            },
            areaSquareCentimeter: {
                one: "{0} cm²",
                other: "{0} cm²"
            },
            areaSquareMile: {
                one: "{0} eng.mil²",
                other: "{0} eng.mil²"
            },
            areaAcre: _b5fv13,
            areaSquareYard: {
                one: "{0} yard²",
                other: "{0} yard²"
            },
            areaSquareFoot: {
                one: "{0} kvadratfot",
                other: "{0} kvadratfot"
            },
            areaSquareInch: _b5fv36,
            concentrKarat: {
                one: "{0} kt",
                other: "{0} kt"
            },
            consumptionLiterPerKilometer: {
                one: "{0} l/km",
                other: "{0} l/km"
            },
            "consumptionLiterPer-100kilometers": _b5fv69,
            consumptionMilePerGallon: {
                one: "{0} mpg",
                other: "{0} mpg"
            },
            digitalTerabyte: {
                one: "{0} TB",
                other: "{0} TB"
            },
            digitalTerabit: {
                one: "{0} Tb",
                other: "{0} Tb"
            },
            digitalGigabyte: {
                one: "{0} GB",
                other: "{0} GB"
            },
            digitalGigabit: {
                one: "{0} Gb",
                other: "{0} Gb"
            },
            digitalMegabyte: {
                one: "{0} MB",
                other: "{0} MB"
            },
            digitalMegabit: {
                one: "{0} Mb",
                other: "{0} Mb"
            },
            digitalKilobyte: {
                one: "{0} kB",
                other: "{0} kB"
            },
            digitalKilobit: {
                one: "{0} kb",
                other: "{0} kb"
            },
            digitalByte: {
                one: "{0} B",
                other: "{0} B"
            },
            digitalBit: {
                one: "{0} b",
                other: "{0} b"
            },
            durationCentury: {
                one: "{0} årh",
                other: "{0} årh"
            },
            durationYear: {
                one: "{0} år",
                other: "{0} år"
            },
            durationMonth: {
                one: "{0} mån",
                other: "{0} mån"
            },
            durationWeek: {
                one: "{0} v",
                other: "{0} v"
            },
            durationDay: {
                one: "{0} d",
                other: "{0} d"
            },
            durationHour: {
                one: "{0} tim",
                other: "{0} tim"
            },
            durationMinute: {
                one: "{0} min",
                other: "{0} min"
            },
            durationSecond: {
                one: "{0} s",
                other: "{0} s"
            },
            durationMillisecond: {
                one: "{0} ms",
                other: "{0} ms"
            },
            durationMicrosecond: {
                one: "{0} μs",
                other: "{0} μs"
            },
            durationNanosecond: {
                one: "{0} ns",
                other: "{0} ns"
            },
            electricAmpere: {
                one: "{0} A",
                other: "{0} A"
            },
            electricMilliampere: {
                one: "{0} mA",
                other: "{0} mA"
            },
            electricOhm: {
                one: "{0} Ω",
                other: "{0} Ω"
            },
            electricVolt: {
                one: "{0} V",
                other: "{0} V"
            },
            energyKilocalorie: _b5fv37,
            energyCalorie: _b5fv24,
            energyFoodcalorie: _b5fv37,
            energyKilojoule: {
                one: "{0} kJ",
                other: "{0} kJ"
            },
            energyJoule: {
                one: "{0} J",
                other: "{0} J"
            },
            energyKilowattHour: {
                one: "{0} kWh",
                other: "{0} kWh"
            },
            frequencyGigahertz: {
                one: "{0} GHz",
                other: "{0} GHz"
            },
            frequencyMegahertz: {
                one: "{0} MHz",
                other: "{0} MHz"
            },
            frequencyKilohertz: {
                one: "{0} kHz",
                other: "{0} kHz"
            },
            frequencyHertz: {
                one: "{0} Hz",
                other: "{0} Hz"
            },
            lengthKilometer: {
                one: "{0} km",
                other: "{0} km"
            },
            lengthMeter: {
                one: "{0} m",
                other: "{0} m"
            },
            lengthDecimeter: {
                one: "{0} dm",
                other: "{0} dm"
            },
            lengthCentimeter: {
                one: "{0} cm",
                other: "{0} cm"
            },
            lengthMillimeter: {
                one: "{0} mm",
                other: "{0} mm"
            },
            lengthMicrometer: {
                one: "{0} μm",
                other: "{0} μm"
            },
            lengthNanometer: {
                one: "{0} nm",
                other: "{0} nm"
            },
            lengthPicometer: {
                one: "{0} pm",
                other: "{0} pm"
            },
            lengthMile: {
                one: "{0} eng. mil",
                other: "{0} eng. mil"
            },
            lengthYard: {
                one: "{0} eng. yard",
                other: "{0} eng. yard"
            },
            lengthFoot: _b5fv25,
            lengthInch: _b5fv26,
            lengthParsec: {
                one: "{0} parsec",
                other: "{0} parsec"
            },
            lengthLightYear: {
                one: "{0} ly",
                other: "{0} ly"
            },
            lengthAstronomicalUnit: {
                one: "{0} AU",
                other: "{0} AU"
            },
            lengthFurlong: {
                one: "{0} eng. plogfårelgd",
                other: "{0} eng. plogfårelgd"
            },
            lengthFathom: _b5fv49,
            lengthNauticalMile: {
                one: "{0} naut. mil",
                other: "{0} naut. mil"
            },
            lengthMileScandinavian: {
                one: "{0} mil",
                other: "{0} mil"
            },
            lightLux: {
                one: "{0} lux",
                other: "{0} lux"
            },
            massMetricTon: {
                one: "{0} t",
                other: "{0} t"
            },
            massKilogram: {
                one: "{0} kg",
                other: "{0} kg"
            },
            massGram: {
                one: "{0} g",
                other: "{0} g"
            },
            massMilligram: {
                one: "{0} mg",
                other: "{0} mg"
            },
            massMicrogram: {
                one: "{0} μg",
                other: "{0} μg"
            },
            massTon: {
                one: "{0} eng. k. ton",
                other: "{0} eng. k. ton"
            },
            massStone: {
                one: "{0} eng. sten",
                other: "{0} eng. sten"
            },
            massPound: {
                one: "{0} pund",
                other: "{0} pund"
            },
            massOunce: _b5fv27,
            massOunceTroy: {
                one: "{0} ozt",
                other: "{0} ozt"
            },
            massCarat: {
                one: "{0} ct",
                other: "{0} ct"
            },
            powerGigawatt: {
                one: "{0} GW",
                other: "{0} GW"
            },
            powerMegawatt: {
                one: "{0} MW",
                other: "{0} MW"
            },
            powerKilowatt: {
                one: "{0} kW",
                other: "{0} kW"
            },
            powerWatt: {
                one: "{0} W",
                other: "{0} W"
            },
            powerMilliwatt: {
                one: "{0} mW",
                other: "{0} mW"
            },
            powerHorsepower: {
                one: "{0} hk",
                other: "{0} hk"
            },
            pressureHectopascal: {
                one: "{0} hPa",
                other: "{0} hPa"
            },
            pressureMillimeterOfMercury: {
                one: "{0} mm Hg",
                other: "{0} mm Hg"
            },
            pressurePoundPerSquareInch: {
                one: "{0} psi",
                other: "{0} psi"
            },
            pressureInchHg: _b5fv55,
            pressureMillibar: {
                one: "{0} mbar",
                other: "{0} mbar"
            },
            speedKilometerPerHour: _b5fv35,
            speedMeterPerSecond: {
                one: "{0} m/s",
                other: "{0} m/s"
            },
            speedMilePerHour: _b5fv38,
            speedKnot: {
                one: "{0} knop",
                other: "{0} knop"
            },
            temperatureGeneric: _b5fv7,
            temperatureCelsius: _b5fv14,
            temperatureFahrenheit: {
                one: "{0} °F",
                other: "{0} °F"
            },
            temperatureKelvin: {
                one: "{0} K",
                other: "{0} K"
            },
            volumeCubicKilometer: {
                one: "{0} km³",
                other: "{0} km³"
            },
            volumeCubicMeter: {
                one: "{0} m³",
                other: "{0} m³"
            },
            volumeCubicCentimeter: {
                one: "{0} cm³",
                other: "{0} cm³"
            },
            volumeCubicMile: {
                one: "{0} eng. mil³",
                other: "{0} eng. mil³"
            },
            volumeCubicYard: {
                one: "{0} eng. yard³",
                other: "{0} eng. yard³"
            },
            volumeCubicFoot: _b5fv39,
            volumeCubicInch: _b5fv40,
            volumeMegaliter: {
                one: "{0} Ml",
                other: "{0} Ml"
            },
            volumeHectoliter: {
                one: "{0} hl",
                other: "{0} hl"
            },
            volumeLiter: _b5fv12,
            volumeDeciliter: {
                one: "{0} dl",
                other: "{0} dl"
            },
            volumeCentiliter: {
                one: "{0} cl",
                other: "{0} cl"
            },
            volumeMilliliter: {
                one: "{0} ml",
                other: "{0} ml"
            },
            volumePintMetric: {
                one: "{0} pt à 500 ml",
                other: "{0} pt à 500 ml"
            },
            volumeCupMetric: {
                one: "{0} kp 2,5dl",
                other: "{0} kp 2,5dl"
            },
            volumeAcreFoot: {
                one: "{0} eng. t:d·fot",
                other: "{0} eng. t:d·fot"
            },
            volumeBushel: _b5fv66,
            volumeGallon: {
                one: "{0} gal",
                other: "{0} gal"
            },
            volumeQuart: {
                one: "{0} quart",
                other: "{0} quart"
            },
            volumePint: {
                one: "{0} pint",
                other: "{0} pint"
            },
            volumeCup: {
                one: "{0} kopp",
                other: "{0} koppar"
            },
            volumeFluidOunce: {
                one: "{0} fl oz",
                other: "{0} fl oz"
            },
            volumeTablespoon: {
                one: "{0} msk",
                other: "{0} msk"
            },
            volumeTeaspoon: {
                one: "{0} tsk",
                other: "{0} tsk"
            },
            concentrMilligramPerDeciliter: {
                other: "{0} mg/dL"
            },
            concentrMillimolePerLiter: {
                other: "{0} mmol/L"
            },
            concentrPartPerMillion: {
                other: "{0} ppm"
            },
            consumptionMilePerGallonImperial: {
                other: "{0} mpg Imp."
            },
            volumeGallonImperial: {
                other: "{0} gal Imp."
            }
        },
        compoundUnit: {
            per: "{0}/{1}"
        }
    }
};

inter.characters = {
    exemplar: {
        "default": [ "a", "à", "b", "c", "d", "e", "é", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "x", "y", "z", "å", "ä", "ö" ],
        auxiliary: [ "á", "â", "ã", "ā", "ç", "ë", "í", "î", "ï", "ī", "ñ", "ó", "ú", "ÿ", "ü", "æ", "ø" ],
        index: [ "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "Å", "Ä", "Ö" ],
        punctuation: [ "\\-", "‐", "–", "—", ",", ";", "\\:", "!", "?", ".", "…", "'", "‘", "’", '"', "“", "”", "(", ")", "\\[", "\\]", "§", "@", "*", "/", "\\&", "#", "†", "‡", "′", "″" ]
    },
    ellipsis: {
        "final": "{0}…",
        initial: "…{0}",
        medial: "{0}…{1}",
        "word-final": "{0} …",
        "word-initial": "… {0}",
        "word-medial": "{0} … {1}"
    },
    moreInformation: "?"
};

inter.calendars = {
    buddhist: P.calendars.buddhist,
    chinese: _b5fv260,
    coptic: {
        dateFormats: P.calendars.buddhist.dateFormats,
        datePartsOrder: "ymd",
        dateIntervalFormats: _b5fv251,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _b5fv242,
        dayPeriods: _b5fv250,
        monthNames: {
            format: {
                abbreviated: _b5fv196,
                narrow: _b5fv110,
                wide: _b5fv196
            },
            standAlone: {
                abbreviated: _b5fv197,
                narrow: _b5fv110,
                wide: _b5fv197
            }
        },
        eraNames: _b5fv93,
        quarterNames: _b5fv237,
        fields: _b5fv257
    },
    dangi: _b5fv260,
    ethioaa: _b5fv258,
    ethiopic: {
        dateFormats: P.calendars.buddhist.dateFormats,
        datePartsOrder: "ymd",
        dateIntervalFormats: _b5fv251,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _b5fv242,
        dayPeriods: _b5fv250,
        monthNames: {
            format: {
                abbreviated: _b5fv198,
                narrow: _b5fv110,
                wide: _b5fv198
            },
            standAlone: {
                abbreviated: _b5fv199,
                narrow: _b5fv110,
                wide: _b5fv199
            }
        },
        eraNames: _b5fv93,
        quarterNames: _b5fv237,
        fields: _b5fv257
    },
    gregorian: {
        dateFormats: {
            basic: {
                shortDate: "dd-MM-y",
                fullDate: "EEEE d MMMM y",
                longDate: "d MMMM y",
                mediumDate: "d MMM y",
                fullTime: "'kl'. HH:mm:ss zzzz",
                longTime: "HH:mm:ss z",
                mediumTime: "HH:mm:ss",
                shortTime: "HH:mm",
                shortDateTime: "dd-MM-y HH:mm",
                mediumDateTime: "d MMM y HH:mm:ss",
                longDateTime: "d MMMM y HH:mm:ss z",
                fullDateTime: "EEEE d MMMM y 'kl'. HH:mm:ss zzzz"
            },
            cldr: {
                d: "d",
                E: "ccc",
                Ed: "E d",
                Ehm: "E h:mm a",
                EHm: "E HH:mm",
                Ehms: "E h:mm:ss a",
                EHms: "E HH:mm:ss",
                Gy: "y G",
                GyMMM: "MMM y G",
                GyMMMd: "d MMM y G",
                GyMMMEd: "E d MMM y G",
                h: "h a",
                H: "HH",
                hm: "h:mm a",
                Hm: "HH:mm",
                hms: "h:mm:ss a",
                Hms: "HH:mm:ss",
                hmsv: "h:mm:ss a v",
                Hmsv: "HH:mm:ss v",
                hmv: "h:mm a v",
                Hmv: "HH:mm v",
                M: "L",
                Md: "d/M",
                MEd: "E d/M",
                MMd: "d/M",
                MMdd: "dd/MM",
                MMM: "LLL",
                MMMd: "d MMM",
                MMMEd: "E d MMM",
                MMMMd: "d MMMM",
                MMMMEd: "E d MMMM",
                ms: "mm:ss",
                y: "y",
                yM: "y-MM",
                yMd: "y-MM-dd",
                yMEd: "E, y-MM-dd",
                yMM: "y-MM",
                yMMM: "MMM y",
                yMMMd: "d MMM y",
                yMMMEd: "E d MMM y",
                yMMMM: "MMMM y",
                yQQQ: "QQQ y",
                yQQQQ: "QQQQ y"
            }
        },
        datePartsOrder: "dmy",
        dateIntervalFormats: {
            d: {
                d: "d–d"
            },
            h: _b5fv11,
            H: {
                H: "HH–HH"
            },
            hm: _b5fv100,
            Hm: _b5fv41,
            hmv: _b5fv111,
            Hmv: _b5fv56,
            hv: _b5fv15,
            Hv: {
                H: "HH–HH v"
            },
            M: {
                M: "M–M"
            },
            Md: _b5fv5,
            MEd: _b5fv64,
            MMM: {
                M: "MMM–MMM"
            },
            MMMd: _b5fv33,
            MMMEd: _b5fv70,
            y: {
                y: "y–y"
            },
            yM: {
                M: "y-MM – MM",
                y: "y-MM – y-MM"
            },
            yMd: {
                d: "y-MM-dd – dd",
                M: "y-MM-dd – MM-dd",
                y: "y-MM-dd – y-MM-dd"
            },
            yMEd: {
                d: "E, y-MM-dd – E, y-MM-dd",
                M: "E, y-MM-dd – E, y-MM-dd",
                y: "E, y-MM-dd – E, y-MM-dd"
            },
            yMMM: {
                M: "MMM–MMM y",
                y: "MMM y – MMM y"
            },
            yMMMd: {
                d: "d–d MMM y",
                M: "d MMM–d MMM y",
                y: "d MMM y–d MMM y"
            },
            yMMMEd: {
                d: "E dd MMM–E dd MMM y",
                M: "E dd MMM–E dd MMM y",
                y: "E dd MMM y–E dd MMM y"
            },
            yMMMM: {
                M: "MMMM–MMMM y",
                y: "MMMM y – MMMM y"
            }
        },
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _b5fv242,
        dayPeriods: _b5fv250,
        monthNames: _b5fv246,
        eraNames: {
            wide: [ "före Kristus", "efter Kristus" ],
            abbreviated: [ "f.Kr.", "e.Kr." ]
        },
        quarterNames: _b5fv237,
        fields: _b5fv257
    },
    hebrew: {
        dateFormats: P.calendars.buddhist.dateFormats,
        datePartsOrder: "ymd",
        dateIntervalFormats: _b5fv251,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _b5fv242,
        dayPeriods: _b5fv250,
        monthNames: {
            format: {
                abbreviated: _b5fv184,
                narrow: _b5fv110,
                wide: _b5fv184
            },
            standAlone: {
                abbreviated: _b5fv185,
                narrow: _b5fv110,
                wide: _b5fv185
            }
        },
        eraNames: {
            wide: [ "AM" ],
            abbreviated: [ "AM" ]
        },
        quarterNames: _b5fv237,
        fields: _b5fv257
    },
    indian: {
        dateFormats: P.calendars.buddhist.dateFormats,
        datePartsOrder: "ymd",
        dateIntervalFormats: _b5fv251,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _b5fv242,
        dayPeriods: _b5fv250,
        monthNames: {
            format: {
                abbreviated: _b5fv201,
                narrow: _b5fv98,
                wide: _b5fv201
            },
            standAlone: {
                abbreviated: _b5fv202,
                narrow: _b5fv98,
                wide: _b5fv202
            }
        },
        eraNames: {
            wide: [ "Saka-eran" ],
            abbreviated: [ "SAKA" ]
        },
        quarterNames: _b5fv237,
        fields: _b5fv257
    },
    islamic: _b5fv259,
    "islamic-umalqura": _b5fv259,
    "islamic-tbla": _b5fv259,
    "islamic-civil": _b5fv259,
    "islamic-rgsa": _b5fv259,
    iso8601: _b5fv258,
    japanese: {
        dateFormats: P.calendars.buddhist.dateFormats,
        datePartsOrder: "ymd",
        dateIntervalFormats: _b5fv251,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _b5fv242,
        dayPeriods: _b5fv250,
        monthNames: _b5fv246,
        eraNames: {
            wide: _b5fv255,
            abbreviated: _b5fv255
        },
        quarterNames: _b5fv237,
        fields: _b5fv257
    },
    persian: {
        dateFormats: P.calendars.buddhist.dateFormats,
        datePartsOrder: "ymd",
        dateIntervalFormats: _b5fv251,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _b5fv242,
        dayPeriods: _b5fv250,
        monthNames: {
            format: {
                abbreviated: _b5fv186,
                narrow: _b5fv98,
                wide: _b5fv186
            },
            standAlone: {
                abbreviated: _b5fv187,
                narrow: _b5fv98,
                wide: _b5fv187
            }
        },
        eraNames: {
            wide: [ "AP" ],
            abbreviated: [ "AP" ]
        },
        quarterNames: _b5fv237,
        fields: _b5fv257
    },
    roc: {
        dateFormats: P.calendars.buddhist.dateFormats,
        datePartsOrder: "ymd",
        dateIntervalFormats: _b5fv251,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _b5fv242,
        dayPeriods: _b5fv250,
        monthNames: _b5fv246,
        eraNames: {
            wide: [ "före R.K.", "R.K." ],
            abbreviated: [ "före R.K.", "R.K." ]
        },
        quarterNames: _b5fv237,
        fields: _b5fv257
    },
    islamicc: _b5fv258
};

inter.pluralRule = function(n) {
    var i = Math.floor(Math.abs(n)), v = n.toString().replace(/^[^.]*\.?/, "").length;
    if (typeof n === "string") n = parseInt(n, 10);
    if (i === 1 && v === 0) return "one";
    return "other";
};

inter.renderDigitsOrdinal = function(n) {
    if (n < 0) return "−" + this.renderDigitsOrdinal(-n);
    if (n >= 0) return this.renderDigitsOrdinalFeminine(n);
};

inter.renderSpelloutNumbering = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "minus " + this.renderSpelloutNumbering(-n);
    if (isFractional && n > 1) return this.renderSpelloutNumbering(Math.floor(n)) + " komma " + this.renderSpelloutNumbering(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 2e15) return this.renderSpelloutCardinalReale(Math.floor(n / 1e15)) + " biljarder" + (n === 2e15 ? "" : " " + this.renderSpelloutNumbering(n % 1e15));
    if (n >= 1e15) return "en biljard" + (n === 1e15 ? "" : " " + this.renderSpelloutNumbering(n % 1e15));
    if (n >= 2e12) return this.renderSpelloutCardinalReale(Math.floor(n / 1e12)) + " biljoner" + (n === 2e12 ? "" : " " + this.renderSpelloutNumbering(n % 1e12));
    if (n >= 1e12) return "en biljon" + (n === 1e12 ? "" : " " + this.renderSpelloutNumbering(n % 1e12));
    if (n >= 2e9) return this.renderSpelloutCardinalReale(Math.floor(n / 1e9)) + " miljarder" + (n === 2e9 ? "" : " " + this.renderSpelloutNumbering(n % 1e9));
    if (n >= 1e9) return "en miljard" + (n === 1e9 ? "" : " " + this.renderSpelloutNumbering(n % 1e9));
    if (n >= 2e6) return this.renderSpelloutCardinalReale(Math.floor(n / 1e6)) + " miljoner" + (n === 2e6 ? "" : " " + this.renderSpelloutNumbering(n % 1e6));
    if (n >= 1e6) return "en miljon" + (n === 1e6 ? "" : " " + this.renderSpelloutNumbering(n % 1e6));
    if (n >= 1e3) return this.renderSpelloutNumberingT(Math.floor(n / 1e3)) + "­tusen" + (n === 1e3 ? "" : " " + this.renderSpelloutNumbering(n % 1e3));
    if (n >= 100) return this.renderSpelloutNumbering(Math.floor(n / 100)) + "­hundra" + (n === 100 ? "" : "­" + this.renderSpelloutNumbering(n % 100));
    if (n >= 90) return "nittio" + (n === 90 ? "" : "­" + this.renderSpelloutNumbering(n % 10));
    if (n >= 80) return "åttio" + (n === 80 ? "" : "­" + this.renderSpelloutNumbering(n % 10));
    if (n >= 70) return "sjuttio" + (n === 70 ? "" : "­" + this.renderSpelloutNumbering(n % 10));
    if (n >= 60) return "sextio" + (n === 60 ? "" : "­" + this.renderSpelloutNumbering(n % 10));
    if (n >= 50) return "femtio" + (n === 50 ? "" : "­" + this.renderSpelloutNumbering(n % 10));
    if (n >= 40) return "fyrtio" + (n === 40 ? "" : "­" + this.renderSpelloutNumbering(n % 10));
    if (n >= 30) return "trettio" + (n === 30 ? "" : "­" + this.renderSpelloutNumbering(n % 10));
    if (n >= 20) return "tjugo" + (n === 20 ? "" : "­" + this.renderSpelloutNumbering(n % 10));
    if (n >= 19) return "nitton";
    if (n >= 18) return "arton";
    if (n >= 17) return "sjutton";
    if (n >= 16) return "sexton";
    if (n >= 15) return "femton";
    if (n >= 14) return "fjorton";
    if (n >= 13) return "tretton";
    if (n >= 12) return "tolv";
    if (n >= 11) return "elva";
    if (n >= 10) return "tio";
    if (n >= 9) return "nio";
    if (n >= 8) return "åtta";
    if (n >= 7) return "sju";
    if (n >= 6) return "sex";
    if (n >= 5) return "fem";
    if (n >= 4) return "fyra";
    if (n >= 3) return "tre";
    if (n >= 2) return "två";
    if (n >= 1) return "ett";
    if (n >= 0) return "noll";
};

inter.renderArmenianUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderArmenianUpper(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e4) return this.renderNumber(n, "#,##0");
    if (n >= 9e3) return "Ք" + (n === 9e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 8e3) return "Փ" + (n === 8e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 7e3) return "Ւ" + (n === 7e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 6e3) return "Ց" + (n === 6e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 5e3) return "Ր" + (n === 5e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 4e3) return "Տ" + (n === 4e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 3e3) return "Վ" + (n === 3e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 2e3) return "Ս" + (n === 2e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 1e3) return "Ռ" + (n === 1e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 900) return "Ջ" + (n === 900 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 800) return "Պ" + (n === 800 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 700) return "Չ" + (n === 700 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 600) return "Ո" + (n === 600 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 500) return "Շ" + (n === 500 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 400) return "Ն" + (n === 400 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 300) return "Յ" + (n === 300 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 200) return "Մ" + (n === 200 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 100) return "Ճ" + (n === 100 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 90) return "Ղ" + (n === 90 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 80) return "Ձ" + (n === 80 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 70) return "Հ" + (n === 70 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 60) return "Կ" + (n === 60 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 50) return "Ծ" + (n === 50 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 40) return "Խ" + (n === 40 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 30) return "Լ" + (n === 30 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 20) return "Ի" + (n === 20 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 10) return "Ժ" + (n === 10 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 9) return "Թ";
    if (n >= 8) return "Ը";
    if (n >= 7) return "Է";
    if (n >= 6) return "Զ";
    if (n >= 5) return "Ե";
    if (n >= 4) return "Դ";
    if (n >= 3) return "Գ";
    if (n >= 2) return "Բ";
    if (n >= 1) return "Ա";
    if (n >= 0) return "0";
};

inter.renderArmenianLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderArmenianLower(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e4) return this.renderNumber(n, "#,##0");
    if (n >= 9e3) return "ք" + (n === 9e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 8e3) return "փ" + (n === 8e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 7e3) return "ւ" + (n === 7e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 6e3) return "ց" + (n === 6e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 5e3) return "ր" + (n === 5e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 4e3) return "տ" + (n === 4e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 3e3) return "վ" + (n === 3e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 2e3) return "ս" + (n === 2e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 1e3) return "ռ" + (n === 1e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 900) return "ջ" + (n === 900 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 800) return "պ" + (n === 800 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 700) return "չ" + (n === 700 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 600) return "ո" + (n === 600 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 500) return "շ" + (n === 500 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 400) return "ն" + (n === 400 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 300) return "յ" + (n === 300 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 200) return "մ" + (n === 200 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 100) return "ճ" + (n === 100 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 90) return "ղ" + (n === 90 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 80) return "ձ" + (n === 80 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 70) return "հ" + (n === 70 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 60) return "կ" + (n === 60 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 50) return "ծ" + (n === 50 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 40) return "խ" + (n === 40 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 30) return "լ" + (n === 30 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 20) return "ի" + (n === 20 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 10) return "ժ" + (n === 10 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 9) return "թ";
    if (n >= 8) return "ը";
    if (n >= 7) return "է";
    if (n >= 6) return "զ";
    if (n >= 5) return "ե";
    if (n >= 4) return "դ";
    if (n >= 3) return "գ";
    if (n >= 2) return "բ";
    if (n >= 1) return "ա";
    if (n >= 0) return "0";
};

inter.renderCyrillicLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderCyrillicLower(-n);
    if (isFractional && n > 1) return this.renderCyrillicLower(Math.floor(n)) + "." + this.renderCyrillicLower(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e15) return "҂҂҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e15)) + (n === 1e15 ? "" : " " + this.renderCyrillicLower(n % 1e15));
    if (n >= 1e12) return "҂҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e12)) + (n === 1e12 ? "" : " " + this.renderCyrillicLower(n % 1e12));
    if (n >= 1e9) return "҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e9)) + (n === 1e9 ? "" : " " + this.renderCyrillicLower(n % 1e9));
    if (n >= 1e6) return "҂҂" + this.renderCyrillicLower(Math.floor(n / 1e6)) + (n === 1e6 ? "" : " " + this.renderCyrillicLower(n % 1e6));
    if (n >= 11e3) return this.renderCyrillicLowerThousands(Math.floor(n / 1e4)) + (n === 11e3 ? "" : " " + this.renderCyrillicLower(n % 1e4));
    if (n >= 1e4) return "҂" + this.renderCyrillicLower(Math.floor(n / 1e4)) + (n === 1e4 ? "" : " " + this.renderCyrillicLower(n % 1e4));
    if (n >= 1e3) return "҂" + this.renderCyrillicLower110(Math.floor(n / 1e3)) + this.renderCyrillicLowerPost(n % 1e3);
    if (n >= 900) return "ц" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 801) return "ѿ" + this.renderCyrillicLower(n % 100);
    if (n >= 800) return "ѿ҃";
    if (n >= 700) return "ѱ" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 600) return "х" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 500) return "ф" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 400) return "у" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 300) return "т" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 200) return "с" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 100) return "р" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 90) return "ч" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 80) return "п" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 70) return "ѻ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 60) return "ѯ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 50) return "н" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 40) return "м" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 30) return "л" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 20) return "к" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 19) return "ѳ҃і";
    if (n >= 18) return "и҃і";
    if (n >= 17) return "з҃і";
    if (n >= 16) return "ѕ҃і";
    if (n >= 15) return "є҃і";
    if (n >= 14) return "д҃і";
    if (n >= 13) return "г҃і";
    if (n >= 12) return "в҃і";
    if (n >= 11) return "а҃і";
    if (n >= 1) return this.renderCyrillicLower110(n) + "҃";
    if (n >= 0) return "0҃";
};

inter.renderEthiopic = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderEthiopic(-n);
    if (isFractional && n > 1) return this.renderEthiopic(Math.floor(n)) + "፡" + this.renderEthiopic(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,###0");
    if (n >= 2e16) return this.renderEthiopic(Math.floor(n / 1e16)) + "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 1e16) return "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 2e12) return this.renderEthiopic(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1e12) return "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 2e8) return this.renderEthiopic(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1e8) return "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 2e4) return this.renderEthiopic(Math.floor(n / 1e4)) + "፼" + (n === 2e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 1e4) return "፼" + (n === 1e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 200) return this.renderEthiopic(Math.floor(n / 100)) + "፻" + (n === 200 ? "" : this.renderEthiopic(n % 100));
    if (n >= 100) return "፻" + (n === 100 ? "" : this.renderEthiopic(n % 100));
    if (n >= 90) return "፺" + (n === 90 ? "" : this.renderEthiopic(n % 10));
    if (n >= 80) return "፹" + (n === 80 ? "" : this.renderEthiopic(n % 10));
    if (n >= 70) return "፸" + (n === 70 ? "" : this.renderEthiopic(n % 10));
    if (n >= 60) return "፷" + (n === 60 ? "" : this.renderEthiopic(n % 10));
    if (n >= 50) return "፶" + (n === 50 ? "" : this.renderEthiopic(n % 10));
    if (n >= 40) return "፵" + (n === 40 ? "" : this.renderEthiopic(n % 10));
    if (n >= 30) return "፴" + (n === 30 ? "" : this.renderEthiopic(n % 10));
    if (n >= 20) return "፳" + (n === 20 ? "" : this.renderEthiopic(n % 10));
    if (n >= 10) return "፲" + (n === 10 ? "" : this.renderEthiopic(n % 10));
    if (n >= 9) return "፱";
    if (n >= 8) return "፰";
    if (n >= 7) return "፯";
    if (n >= 6) return "፮";
    if (n >= 5) return "፭";
    if (n >= 4) return "፬";
    if (n >= 3) return "፫";
    if (n >= 2) return "፪";
    if (n >= 1) return "፩";
    if (n >= 0) return "ባዶ";
};

inter.renderGeorgian = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGeorgian(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 2e4) return this.renderNumber(n, "#,##0");
    if (n >= 1e4) return "ჯ" + (n === 1e4 ? "" : this.renderGeorgian(n % 1e4));
    if (n >= 9e3) return "ჵ" + (n === 9e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 8e3) return "ჴ" + (n === 8e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 7e3) return "ხ" + (n === 7e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 6e3) return "ჭ" + (n === 6e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 5e3) return "წ" + (n === 5e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 4e3) return "ძ" + (n === 4e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 3e3) return "ც" + (n === 3e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 2e3) return "ჩ" + (n === 2e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 1e3) return "შ" + (n === 1e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 900) return "ყ" + (n === 900 ? "" : this.renderGeorgian(n % 100));
    if (n >= 800) return "ღ" + (n === 800 ? "" : this.renderGeorgian(n % 100));
    if (n >= 700) return "ქ" + (n === 700 ? "" : this.renderGeorgian(n % 100));
    if (n >= 600) return "ფ" + (n === 600 ? "" : this.renderGeorgian(n % 100));
    if (n >= 500) return "ჳ" + (n === 500 ? "" : this.renderGeorgian(n % 100));
    if (n >= 400) return "უ" + (n === 400 ? "" : this.renderGeorgian(n % 100));
    if (n >= 300) return "ტ" + (n === 300 ? "" : this.renderGeorgian(n % 100));
    if (n >= 200) return "ს" + (n === 200 ? "" : this.renderGeorgian(n % 100));
    if (n >= 100) return "რ" + (n === 100 ? "" : this.renderGeorgian(n % 100));
    if (n >= 90) return "ჟ" + (n === 90 ? "" : this.renderGeorgian(n % 10));
    if (n >= 80) return "პ" + (n === 80 ? "" : this.renderGeorgian(n % 10));
    if (n >= 70) return "ო" + (n === 70 ? "" : this.renderGeorgian(n % 10));
    if (n >= 60) return "ჲ" + (n === 60 ? "" : this.renderGeorgian(n % 10));
    if (n >= 50) return "ნ" + (n === 50 ? "" : this.renderGeorgian(n % 10));
    if (n >= 40) return "მ" + (n === 40 ? "" : this.renderGeorgian(n % 10));
    if (n >= 30) return "ლ" + (n === 30 ? "" : this.renderGeorgian(n % 10));
    if (n >= 20) return "კ" + (n === 20 ? "" : this.renderGeorgian(n % 10));
    if (n >= 10) return "ი" + (n === 10 ? "" : this.renderGeorgian(n % 10));
    if (n >= 9) return "თ";
    if (n >= 8) return "ჱ";
    if (n >= 7) return "ზ";
    if (n >= 6) return "ვ";
    if (n >= 5) return "ე";
    if (n >= 4) return "დ";
    if (n >= 3) return "გ";
    if (n >= 2) return "ბ";
    if (n >= 1) return "ა";
    if (n >= 0) return this.renderNumber(n, "#,##0");
};

inter.renderGreekUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGreekUpper(-n);
    if (isFractional && n > 1) return this.renderGreekUpper(Math.floor(n)) + "." + this.renderGreekUpper(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 0) return this.renderGreekNumeralMajuscules(n) + "´";
};

inter.renderGreekLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGreekLower(-n);
    if (isFractional && n > 1) return this.renderGreekLower(Math.floor(n)) + "." + this.renderGreekLower(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 0) return this.renderGreekNumeralMinuscules(n) + "´";
};

inter.renderSpelloutCardinal = function(n) {
    if (n < 0) return "−" + this.renderSpelloutCardinal(-n);
    if (n >= 0) return this.renderNumber(n, "#,##0.#");
};

inter.renderHebrew = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderHebrew(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1000001) return this.renderNumber(n, "#,##0");
    if (n >= 1e6) return "אלף אלפים";
    if (n >= 3001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 3001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 3e3) return this.renderHebrew(Math.floor(n / 1e3)) + " אלפים";
    if (n >= 2001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 2001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 2e3) return "אלפיים";
    if (n >= 1001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 1001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 1e3) return "אלף";
    if (n >= 901) return "תתק" + this.renderHebrew099(n % 100);
    if (n >= 900) return "תת״ק";
    if (n >= 801) return "תת" + this.renderHebrew099(n % 100);
    if (n >= 800) return "ת״ת";
    if (n >= 745) return "תש" + this.renderHebrew099(n % 100);
    if (n >= 744) return "תשד״מ";
    if (n >= 701) return "תש" + this.renderHebrew099(n % 100);
    if (n >= 700) return "ת״ש";
    if (n >= 699) return "תר" + this.renderHebrew099(n % 100);
    if (n >= 698) return "תרח״צ";
    if (n >= 601) return "תר" + this.renderHebrew099(n % 100);
    if (n >= 600) return "ת״ר";
    if (n >= 501) return "תק" + this.renderHebrew099(n % 100);
    if (n >= 500) return "ת״ק";
    if (n >= 400) return "ת" + this.renderHebrew099(n % 100);
    if (n >= 345) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 344) return "שד״מ";
    if (n >= 305) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 304) return "ד״ש";
    if (n >= 300) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 299) return "ר" + this.renderHebrew099(n % 100);
    if (n >= 298) return "רח״צ";
    if (n >= 200) return "ר" + this.renderHebrew099(n % 100);
    if (n >= 100) return "ק" + this.renderHebrew099(n % 100);
    if (n >= 91) return "צ״" + this.renderHebrewItem(n % 10);
    if (n >= 90) return "צ׳";
    if (n >= 81) return "פ״" + this.renderHebrewItem(n % 10);
    if (n >= 80) return "פ׳";
    if (n >= 71) return "ע״" + this.renderHebrewItem(n % 10);
    if (n >= 70) return "ע׳";
    if (n >= 61) return "ס״" + this.renderHebrewItem(n % 10);
    if (n >= 60) return "ס׳";
    if (n >= 51) return "נ״" + this.renderHebrewItem(n % 10);
    if (n >= 50) return "נ׳";
    if (n >= 41) return "מ״" + this.renderHebrewItem(n % 10);
    if (n >= 40) return "מ׳";
    if (n >= 31) return "ל״" + this.renderHebrewItem(n % 10);
    if (n >= 30) return "ל׳";
    if (n >= 21) return "כ״" + this.renderHebrewItem(n % 10);
    if (n >= 20) return "כ׳";
    if (n >= 17) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "ט״ז";
    if (n >= 15) return "ט״ו";
    if (n >= 11) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 0) return this.renderHebrewItem(n) + "׳";
};

inter.renderRomanUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderRomanUpper(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 4e5) return this.renderNumber(n, "#,##0");
    if (n >= 3e5) return "ↈↈↈ" + (n === 3e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 2e5) return "ↈↈ" + (n === 2e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 1e5) return "ↈ" + (n === 1e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 9e4) return "ↂↈ" + (n === 9e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 8e4) return "ↇↂↂↂ" + (n === 8e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 7e4) return "ↇↂↂ" + (n === 7e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 6e4) return "ↇↂ" + (n === 6e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 5e4) return "ↇ" + (n === 5e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 4e4) return "ↂↇ" + (n === 4e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 3e4) return "ↂↂↂ" + (n === 3e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 2e4) return "ↂↂ" + (n === 2e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 1e4) return "ↂ" + (n === 1e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 9e3) return "Mↂ" + (n === 9e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 8e3) return "ↁMMM" + (n === 8e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 7e3) return "ↁMM" + (n === 7e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 6e3) return "ↁM" + (n === 6e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 5e3) return "ↁ" + (n === 5e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 4e3) return "Mↁ" + (n === 4e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 3e3) return "MMM" + (n === 3e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 2e3) return "MM" + (n === 2e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 1e3) return "M" + (n === 1e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 900) return "CM" + (n === 900 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 800) return "DCCC" + (n === 800 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 700) return "DCC" + (n === 700 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 600) return "DC" + (n === 600 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 500) return "D" + (n === 500 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 400) return "CD" + (n === 400 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 300) return "CCC" + (n === 300 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 200) return "CC" + (n === 200 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 100) return "C" + (n === 100 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 90) return "XC" + (n === 90 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 80) return "LXXX" + (n === 80 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 70) return "LXX" + (n === 70 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 60) return "LX" + (n === 60 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 50) return "L" + (n === 50 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 40) return "XL" + (n === 40 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 30) return "XXX" + (n === 30 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 20) return "XX" + (n === 20 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 10) return "X" + (n === 10 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 9) return "IX";
    if (n >= 8) return "VIII";
    if (n >= 7) return "VII";
    if (n >= 6) return "VI";
    if (n >= 5) return "V";
    if (n >= 4) return "IV";
    if (n >= 3) return "III";
    if (n >= 2) return "II";
    if (n >= 1) return "I";
    if (n >= 0) return "N";
};

inter.renderRomanLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderRomanLower(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 5e3) return this.renderNumber(n, "#,##0");
    if (n >= 4e3) return "mmmm" + (n === 4e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 3e3) return "mmm" + (n === 3e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 2e3) return "mm" + (n === 2e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 1e3) return "m" + (n === 1e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 900) return "cm" + (n === 900 ? "" : this.renderRomanLower(n % 100));
    if (n >= 800) return "dccc" + (n === 800 ? "" : this.renderRomanLower(n % 100));
    if (n >= 700) return "dcc" + (n === 700 ? "" : this.renderRomanLower(n % 100));
    if (n >= 600) return "dc" + (n === 600 ? "" : this.renderRomanLower(n % 100));
    if (n >= 500) return "d" + (n === 500 ? "" : this.renderRomanLower(n % 100));
    if (n >= 400) return "cd" + (n === 400 ? "" : this.renderRomanLower(n % 100));
    if (n >= 300) return "ccc" + (n === 300 ? "" : this.renderRomanLower(n % 100));
    if (n >= 200) return "cc" + (n === 200 ? "" : this.renderRomanLower(n % 100));
    if (n >= 100) return "c" + (n === 100 ? "" : this.renderRomanLower(n % 100));
    if (n >= 90) return "xc" + (n === 90 ? "" : this.renderRomanLower(n % 10));
    if (n >= 80) return "lxxx" + (n === 80 ? "" : this.renderRomanLower(n % 10));
    if (n >= 70) return "lxx" + (n === 70 ? "" : this.renderRomanLower(n % 10));
    if (n >= 60) return "lx" + (n === 60 ? "" : this.renderRomanLower(n % 10));
    if (n >= 50) return "l" + (n === 50 ? "" : this.renderRomanLower(n % 10));
    if (n >= 40) return "xl" + (n === 40 ? "" : this.renderRomanLower(n % 10));
    if (n >= 30) return "xxx" + (n === 30 ? "" : this.renderRomanLower(n % 10));
    if (n >= 20) return "xx" + (n === 20 ? "" : this.renderRomanLower(n % 10));
    if (n >= 10) return "x" + (n === 10 ? "" : this.renderRomanLower(n % 10));
    if (n >= 9) return "ix";
    if (n >= 8) return "viii";
    if (n >= 7) return "vii";
    if (n >= 6) return "vi";
    if (n >= 5) return "v";
    if (n >= 4) return "iv";
    if (n >= 3) return "iii";
    if (n >= 2) return "ii";
    if (n >= 1) return "i";
    if (n >= 0) return "n";
};

inter.renderTamil = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderTamil(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e8) return this.renderNumber(n, "#,##,##0");
    if (n >= 1e6) return this.renderTamil(Math.floor(n / 1e6)) + "௱௲" + (n === 1e6 ? "" : this.renderTamilThousands(n % 1e6));
    if (n >= 2e3) return this.renderTamil(Math.floor(n / 1e3)) + "௲" + (n === 2e3 ? "" : this.renderTamil(n % 1e3));
    if (n >= 1e3) return "௲" + (n === 1e3 ? "" : this.renderTamil(n % 1e3));
    if (n >= 200) return this.renderTamil(Math.floor(n / 100)) + "௱" + (n === 200 ? "" : this.renderTamil(n % 100));
    if (n >= 100) return "௱" + (n === 100 ? "" : this.renderTamil(n % 100));
    if (n >= 20) return this.renderTamil(Math.floor(n / 10)) + "௰" + (n === 20 ? "" : this.renderTamil(n % 10));
    if (n >= 10) return "௰" + (n === 10 ? "" : this.renderTamil(n % 10));
    if (n >= 9) return "௯";
    if (n >= 8) return "௮";
    if (n >= 7) return "௭";
    if (n >= 6) return "௬";
    if (n >= 5) return "௫";
    if (n >= 4) return "௪";
    if (n >= 3) return "௩";
    if (n >= 2) return "௨";
    if (n >= 1) return "௧";
    if (n >= 0) return "௦";
};

inter.renderDigitsOrdinalFeminine = function(n) {
    if (n < 0) return "−" + this.renderDigitsOrdinalFeminine(-n);
    if (n >= 0) return this.renderNumber(n, "#,##0") + this.renderDordFemabbrev(n);
};

inter.renderSpelloutCardinalReale = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "minus " + this.renderSpelloutCardinalReale(-n);
    if (isFractional && n > 1) return this.renderSpelloutCardinalReale(Math.floor(n)) + " komma " + this.renderSpelloutCardinalReale(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 2e15) return this.renderSpelloutCardinalReale(Math.floor(n / 1e15)) + " biljarder" + (n === 2e15 ? "" : " " + this.renderSpelloutCardinalReale(n % 1e15));
    if (n >= 1e15) return "en biljard" + (n === 1e15 ? "" : " " + this.renderSpelloutCardinalReale(n % 1e15));
    if (n >= 2e12) return this.renderSpelloutCardinalReale(Math.floor(n / 1e12)) + " biljoner" + (n === 2e12 ? "" : " " + this.renderSpelloutCardinalReale(n % 1e12));
    if (n >= 1e12) return "en biljon" + (n === 1e12 ? "" : " " + this.renderSpelloutCardinalReale(n % 1e12));
    if (n >= 2e9) return this.renderSpelloutCardinalReale(Math.floor(n / 1e9)) + " miljarder" + (n === 2e9 ? "" : " " + this.renderSpelloutCardinalReale(n % 1e9));
    if (n >= 1e9) return "en miljard" + (n === 1e9 ? "" : " " + this.renderSpelloutCardinalReale(n % 1e9));
    if (n >= 2e6) return this.renderSpelloutCardinalReale(Math.floor(n / 1e6)) + " miljoner" + (n === 2e6 ? "" : " " + this.renderSpelloutCardinalReale(n % 1e6));
    if (n >= 1e6) return "en miljon" + (n === 1e6 ? "" : " " + this.renderSpelloutCardinalReale(n % 1e6));
    if (n >= 2e3) return this.renderSpelloutCardinalReale(Math.floor(n / 1e3)) + "­tusen" + (n === 2e3 ? "" : " " + this.renderSpelloutCardinalReale(n % 1e3));
    if (n >= 1e3) return "ettusen" + (n === 1e3 ? "" : " " + this.renderSpelloutCardinalReale(n % 1e3));
    if (n >= 100) return this.renderSpelloutCardinalNeuter(Math.floor(n / 100)) + "­hundra" + (n === 100 ? "" : "­" + this.renderSpelloutCardinalReale(n % 100));
    if (n >= 90) return "nittio" + (n === 90 ? "" : "­" + this.renderSpelloutCardinalReale(n % 10));
    if (n >= 80) return "åttio" + (n === 80 ? "" : "­" + this.renderSpelloutCardinalReale(n % 10));
    if (n >= 70) return "sjuttio" + (n === 70 ? "" : "­" + this.renderSpelloutCardinalReale(n % 10));
    if (n >= 60) return "sextio" + (n === 60 ? "" : "­" + this.renderSpelloutCardinalReale(n % 10));
    if (n >= 50) return "femtio" + (n === 50 ? "" : "­" + this.renderSpelloutCardinalReale(n % 10));
    if (n >= 40) return "fyrtio" + (n === 40 ? "" : "­" + this.renderSpelloutCardinalReale(n % 10));
    if (n >= 30) return "trettio" + (n === 30 ? "" : "­" + this.renderSpelloutCardinalReale(n % 10));
    if (n >= 20) return "tjugo" + (n === 20 ? "" : "­" + this.renderSpelloutCardinalReale(n % 10));
    if (n >= 2) return this.renderSpelloutNumbering(n);
    if (n >= 1) return "en";
    if (n >= 0) return "noll";
};

inter.renderSpelloutNumberingT = function(n) {
    if (n >= 1e3) return "ERROR";
    if (n >= 100) return this.renderSpelloutNumbering(Math.floor(n / 100)) + "­hundra" + (n === 100 ? "" : "­" + this.renderSpelloutNumberingT(n % 100));
    if (n >= 90) return "nittio" + (n === 90 ? "" : "­" + this.renderSpelloutNumberingT(n % 10));
    if (n >= 80) return "åttio" + (n === 80 ? "" : "­" + this.renderSpelloutNumberingT(n % 10));
    if (n >= 70) return "sjuttio" + (n === 70 ? "" : "­" + this.renderSpelloutNumberingT(n % 10));
    if (n >= 60) return "sextio" + (n === 60 ? "" : "­" + this.renderSpelloutNumberingT(n % 10));
    if (n >= 50) return "femtio" + (n === 50 ? "" : "­" + this.renderSpelloutNumberingT(n % 10));
    if (n >= 40) return "fyrtio" + (n === 40 ? "" : "­" + this.renderSpelloutNumberingT(n % 10));
    if (n >= 30) return "trettio" + (n === 30 ? "" : "­" + this.renderSpelloutNumberingT(n % 10));
    if (n >= 20) return "tjugo" + (n === 20 ? "" : "­" + this.renderSpelloutNumberingT(n % 10));
    if (n >= 19) return "nitton";
    if (n >= 18) return "arton";
    if (n >= 17) return "sjutton";
    if (n >= 16) return "sexton";
    if (n >= 15) return "femton";
    if (n >= 14) return "fjorton";
    if (n >= 13) return "tretton";
    if (n >= 12) return "tolv";
    if (n >= 11) return "elva";
    if (n >= 10) return "tio";
    if (n >= 9) return "nio";
    if (n >= 8) return "åtta";
    if (n >= 7) return "sju";
    if (n >= 6) return "sex";
    if (n >= 5) return "fem";
    if (n >= 4) return "fyra";
    if (n >= 3) return "tre";
    if (n >= 2) return "två";
    if (n >= 1) return "et";
};

inter.renderCyrillicLowerThousands = function(n) {
    if (n >= 900) return "҂ц" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 800) return "҂ѿ" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 700) return "҂ѱ" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 600) return "҂х" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 500) return "҂ф" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 400) return "҂у" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 300) return "҂т" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 200) return "҂с" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 100) return "҂р" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 90) return "҂ч" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 80) return "҂п" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 70) return "҂ѻ" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 60) return "҂ѯ" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 50) return "҂н" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 40) return "҂м" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 30) return "҂л" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 20) return "҂к" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 19) return "҂ѳ҃҂і";
    if (n >= 18) return "҂и҃҂і";
    if (n >= 17) return "҂з҃҂і";
    if (n >= 16) return "҂ѕ҃҂і";
    if (n >= 15) return "҂є҃҂і";
    if (n >= 14) return "҂д҃҂і";
    if (n >= 13) return "҂г҃҂і";
    if (n >= 12) return "҂в҃҂і";
    if (n >= 11) return "҂а҃҂і";
    if (n >= 10) return "҃҂і";
    if (n >= 9) return "҃҂ѳ";
    if (n >= 8) return "҃҂и";
    if (n >= 7) return "҃҂з";
    if (n >= 6) return "҃҂ѕ";
    if (n >= 5) return "҃҂є";
    if (n >= 4) return "҃҂д";
    if (n >= 3) return "҃҂г";
    if (n >= 2) return "҃҂в";
    if (n >= 1) return "҃҂а";
    if (n >= 0) return "҃";
};

inter.renderCyrillicLower110 = function(n) {
    if (n >= 10) return "і";
    if (n >= 9) return "ѳ";
    if (n >= 8) return "и";
    if (n >= 7) return "з";
    if (n >= 6) return "ѕ";
    if (n >= 5) return "є";
    if (n >= 4) return "д";
    if (n >= 3) return "г";
    if (n >= 2) return "в";
    if (n >= 1) return "а";
};

inter.renderCyrillicLowerPost = function(n) {
    if (n >= 1) return this.renderCyrillicLower(n);
    if (n >= 0) return "҃";
};

inter.renderCyrillicLowerFinal = function(n) {
    if (n >= 91) return "ч" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 90) return "҃ч";
    if (n >= 81) return "п" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 80) return "҃п";
    if (n >= 71) return "ѻ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 70) return "҃ѻ";
    if (n >= 61) return "ѯ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 60) return "҃ѯ";
    if (n >= 51) return "н" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 50) return "҃н";
    if (n >= 41) return "м" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 40) return "҃м";
    if (n >= 31) return "л" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 30) return "҃л";
    if (n >= 21) return "к" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 20) return "҃к";
    if (n >= 19) return "ѳ҃і";
    if (n >= 18) return "и҃і";
    if (n >= 17) return "з҃і";
    if (n >= 16) return "ѕ҃і";
    if (n >= 15) return "є҃і";
    if (n >= 14) return "д҃і";
    if (n >= 13) return "г҃і";
    if (n >= 12) return "в҃і";
    if (n >= 11) return "а҃і";
    if (n >= 1) return "҃" + this.renderCyrillicLower110(n);
    if (n >= 0) return "҃";
};

inter.renderEthiopicP3 = function(n) {
    if (n >= 1e12) return this.renderEthiopic(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1) return "፼፼፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼፼፼";
};

inter.renderEthiopicP2 = function(n) {
    if (n >= 1e8) return this.renderEthiopic(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1) return "፼፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼፼";
};

inter.renderEthiopicP1 = function(n) {
    if (n >= 1e4) return this.renderEthiopic(Math.floor(n / 1e4)) + "፼" + (n === 1e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 1) return "፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼";
};

inter.renderGreekNumeralMajuscules = function(n) {
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e16) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e16)) + "ΜΜΜΜ" + (n === 1e16 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e16));
    if (n >= 1e12) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e12)) + "ΜΜΜ" + (n === 1e12 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e12));
    if (n >= 1e8) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e8)) + "ΜΜ" + (n === 1e8 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e8));
    if (n >= 1e4) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e4)) + "Μ" + (n === 1e4 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e4));
    if (n >= 1e3) return "͵" + this.renderGreekNumeralMajuscules(Math.floor(n / 1e3)) + (n === 1e3 ? "" : this.renderGreekNumeralMajuscules(n % 1e3));
    if (n >= 900) return "Ϡ" + (n === 900 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 800) return "Ω" + (n === 800 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 700) return "Ψ" + (n === 700 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 600) return "Χ" + (n === 600 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 500) return "Φ" + (n === 500 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 400) return "Υ" + (n === 400 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 300) return "Τ" + (n === 300 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 200) return "Σ" + (n === 200 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 100) return "Ρ" + (n === 100 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 90) return "Ϟ" + (n === 90 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 80) return "Π" + (n === 80 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 70) return "Ο" + (n === 70 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 60) return "Ξ" + (n === 60 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 50) return "Ν" + (n === 50 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 40) return "Μ" + (n === 40 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 30) return "Λ" + (n === 30 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 20) return "Κ" + (n === 20 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 10) return "Ι" + (n === 10 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 9) return "Θ";
    if (n >= 8) return "Η";
    if (n >= 7) return "Ζ";
    if (n >= 6) return "Ϝ";
    if (n >= 5) return "Ε";
    if (n >= 4) return "Δ";
    if (n >= 3) return "Γ";
    if (n >= 2) return "Β";
    if (n >= 1) return "Α";
    if (n >= 0) return "𐆊";
};

inter.renderGreekNumeralMinuscules = function(n) {
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e16) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e16)) + "μμμμ" + (n === 1e16 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e16));
    if (n >= 1e12) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e12)) + "μμμ" + (n === 1e12 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e12));
    if (n >= 1e8) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e8)) + "μμ" + (n === 1e8 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e8));
    if (n >= 1e4) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e4)) + "μ" + (n === 1e4 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e4));
    if (n >= 1e3) return "͵" + this.renderGreekNumeralMinuscules(Math.floor(n / 1e3)) + (n === 1e3 ? "" : this.renderGreekNumeralMinuscules(n % 1e3));
    if (n >= 900) return "ϡ" + (n === 900 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 800) return "ω" + (n === 800 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 700) return "ψ" + (n === 700 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 600) return "χ" + (n === 600 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 500) return "φ" + (n === 500 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 400) return "υ" + (n === 400 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 300) return "τ" + (n === 300 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 200) return "σ" + (n === 200 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 100) return "ρ" + (n === 100 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 90) return "ϟ" + (n === 90 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 80) return "π" + (n === 80 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 70) return "ο" + (n === 70 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 60) return "ξ" + (n === 60 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 50) return "ν" + (n === 50 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 40) return "μ" + (n === 40 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 30) return "λ" + (n === 30 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 20) return "κ" + (n === 20 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 10) return "ι" + (n === 10 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 9) return "θ";
    if (n >= 8) return "η";
    if (n >= 7) return "ζ";
    if (n >= 6) return "ϝ";
    if (n >= 5) return "ε";
    if (n >= 4) return "δ";
    if (n >= 3) return "γ";
    if (n >= 2) return "β";
    if (n >= 1) return "α";
    if (n >= 0) return "𐆊";
};

inter.renderHebrewThousands = function(n) {
    if (n >= 401) return this.renderHebrew(n) + "׳";
    if (n >= 100) return this.renderHebrew(n) + (n === 100 ? "" : "׳");
    if (n >= 10) return this.renderHebrew(n) + (n === 10 ? "" : "׳");
    if (n >= 0) return this.renderHebrew(n);
};

inter.renderHebrew099 = function(n) {
    if (n >= 91) return "צ״" + this.renderHebrewItem(n % 10);
    if (n >= 90) return "״צ";
    if (n >= 81) return "פ״" + this.renderHebrewItem(n % 10);
    if (n >= 80) return "״פ";
    if (n >= 71) return "ע״" + this.renderHebrewItem(n % 10);
    if (n >= 70) return "״ע";
    if (n >= 61) return "ס״" + this.renderHebrewItem(n % 10);
    if (n >= 60) return "״ס";
    if (n >= 51) return "נ״" + this.renderHebrewItem(n % 10);
    if (n >= 50) return "״נ";
    if (n >= 41) return "מ״" + this.renderHebrewItem(n % 10);
    if (n >= 40) return "״מ";
    if (n >= 31) return "ל״" + this.renderHebrewItem(n % 10);
    if (n >= 30) return "״ל";
    if (n >= 21) return "כ״" + this.renderHebrewItem(n % 10);
    if (n >= 20) return "״כ";
    if (n >= 17) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "ט״ז";
    if (n >= 15) return "ט״ו";
    if (n >= 11) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 1) return "״" + this.renderHebrewItem(n);
    if (n >= 0) return "׳";
};

inter.renderHebrewItem = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderHebrewItem(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 2100) return this.renderNumber(n, "#,##0");
    if (n >= 2e3) return "תתתתת" + (n === 2e3 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1900) return "תתתתש" + (n === 1900 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1800) return "תתתתר" + (n === 1800 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1700) return "תתתתק" + (n === 1700 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1600) return "תתתת" + (n === 1600 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1500) return "תתתש" + (n === 1500 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1400) return "תתתר" + (n === 1400 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1300) return "תתתק" + (n === 1300 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1200) return "תתת" + (n === 1200 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1100) return "תתש" + (n === 1100 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1e3) return "תתר" + (n === 1e3 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 900) return "תתק" + (n === 900 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 800) return "תת" + (n === 800 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 745) return "תש" + this.renderHebrewItem(n % 100);
    if (n >= 744) return "תשדמ";
    if (n >= 700) return "תש" + (n === 700 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 699) return "תר" + this.renderHebrewItem(n % 100);
    if (n >= 698) return "תרחצ";
    if (n >= 600) return "תר" + (n === 600 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 500) return "תק" + (n === 500 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 400) return "ת" + (n === 400 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 345) return "ש" + this.renderHebrewItem(n % 100);
    if (n >= 344) return "שדמ";
    if (n >= 305) return "ש" + this.renderHebrewItem(n % 100);
    if (n >= 304) return "דש";
    if (n >= 300) return "ש" + (n === 300 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 299) return "ר" + this.renderHebrewItem(n % 100);
    if (n >= 298) return "רחצ";
    if (n >= 200) return "ר" + (n === 200 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 100) return "ק" + (n === 100 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 90) return "צ" + (n === 90 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 80) return "פ" + (n === 80 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 70) return "ע" + (n === 70 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 60) return "ס" + (n === 60 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 50) return "נ" + (n === 50 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 40) return "מ" + (n === 40 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 30) return "ל" + (n === 30 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 20) return "כ" + (n === 20 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 17) return "י" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "טז";
    if (n >= 15) return "טו";
    if (n >= 10) return "י" + (n === 10 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 9) return "ט";
    if (n >= 8) return "ח";
    if (n >= 7) return "ז";
    if (n >= 6) return "ו";
    if (n >= 5) return "ה";
    if (n >= 4) return "ד";
    if (n >= 3) return "ג";
    if (n >= 2) return "ב";
    if (n >= 1) return "א";
    if (n >= 0) return "״";
};

inter.renderTamilThousands = function(n) {
    if (n >= 1e3) return this.renderTamilThousands(Math.floor(n / 1e3)) + "௲" + (n === 1e3 ? "" : this.renderTamilThousands(n % 1e3));
    if (n >= 0) return this.renderTamil(n);
};

inter.renderDordFemabbrev = function(n) {
    if (n >= 100) return this.renderDordFemabbrev(n % 100);
    if (n >= 20) return this.renderDordFemabbrev(n % 10);
    if (n >= 3) return ":e";
    if (n >= 2) return ":a";
    if (n >= 1) return ":a";
    if (n >= 0) return ":e";
};

inter.renderSpelloutCardinalNeuter = function(n) {
    if (n >= 0) return this.renderSpelloutNumbering(n);
};

inter.renderEthiopicP = function(n) {
    if (n >= 1e16) return this.renderEthiopicP(Math.floor(n / 1e16)) + "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 1e12) return this.renderEthiopicP(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1e8) return this.renderEthiopicP(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1e4) return this.renderEthiopicP(Math.floor(n / 1e4)) + "፼" + (n === 1e4 ? "" : this.renderEthiopicP(n % 1e4));
    if (n >= 1) return this.renderEthiopic(n);
};

inter.languages = [].concat(P.languages.slice(0, 554), {
    id: "ky",
    displayName: "kirgiziska",
    nativeDisplayName: "кыргызча"
}, P.languages.slice(555, 612));

inter.scripts = [].concat(P.scripts.slice(0, 5), P.scripts.slice(6, 117), {
    id: "Arab",
    displayName: "persisk-arabiska"
}, P.scripts.slice(117, 167));

module.exports = inter;