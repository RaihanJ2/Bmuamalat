function defaults(targetObj) {
    for (var i = 1; i < arguments.length; i += 1) {
        if (arguments[i] && typeof arguments[i] === "object") {
            for (var propertyName in arguments[i]) {
                if (typeof targetObj[propertyName] === "undefined") {
                    targetObj[propertyName] = arguments[i][propertyName];
                }
            }
        }
    }
    return targetObj;
}

var P = require("./root.js"), inter = defaults({
    renderers: {}
}, P);

var _kcqq1 = [ "T1", "T2", "T3", "T4" ], _kcqq2 = {
    all: {
        leap: "{0}bis"
    }
}, _kcqq3 = {
    one: "¤ 0K",
    other: "¤ 0K"
}, _kcqq4 = {
    one: "¤ 0M",
    other: "¤ 0M"
}, _kcqq5 = {
    one: "¤ 0G",
    other: "¤ 0G"
}, _kcqq6 = {
    one: "¤ 0T",
    other: "¤ 0T"
}, _kcqq7 = {
    a: "h a – h a",
    h: "h–h a"
}, _kcqq8 = {
    displayName: "toc dal dì"
}, _kcqq9 = [ "Before R.O.C.", "R.O.C." ], _kcqq10 = {
    one: "¤ 00K",
    other: "¤ 00K"
}, _kcqq11 = {
    one: "¤ 00M",
    other: "¤ 00M"
}, _kcqq12 = {
    one: "¤ 00G",
    other: "¤ 00G"
}, _kcqq13 = {
    one: "¤ 00T",
    other: "¤ 00T"
}, _kcqq14 = {
    one: "¤ 000K",
    other: "¤ 000K"
}, _kcqq15 = {
    one: "¤ 000M",
    other: "¤ 000M"
}, _kcqq16 = {
    one: "¤ 000G",
    other: "¤ 000G"
}, _kcqq17 = {
    one: "¤ 000T",
    other: "¤ 000T"
}, _kcqq18 = {
    a: "h a – h a v",
    h: "h–h a v"
}, _kcqq19 = [ "D", "L", "M", "M", "J", "V", "S" ], _kcqq20 = {
    displayName: "dì de setemane"
}, _kcqq21 = {
    M: "MM – MM/y",
    y: "MM/y – MM/y"
}, _kcqq22 = {
    d: "MMM d–d",
    M: "MMM d – MMM d"
}, _kcqq23 = {
    wide: [ "AH" ],
    abbreviated: [ "AH" ]
}, _kcqq24 = {
    H: "HH:mm–HH:mm",
    m: "HH:mm–HH:mm"
}, _kcqq25 = {
    M: "MM/y – MM/y",
    y: "MM/y – MM/y"
}, _kcqq26 = {
    M: "y-MM – y-MM",
    y: "y-MM – y-MM"
}, _kcqq27 = {
    M: "U MMM–MMM",
    y: "U MMM – U MMM"
}, _kcqq28 = {
    H: "HH:mm–HH:mm v",
    m: "HH:mm–HH:mm v"
}, _kcqq29 = {
    d: "dd/MM – dd/MM",
    M: "dd/MM – dd/MM"
}, _kcqq30 = {
    d: "MM-dd – MM-dd",
    M: "MM-dd – MM-dd"
}, _kcqq31 = {
    M: "U MMMM–MMMM",
    y: "U MMMM – U MMMM"
}, _kcqq32 = [ "dom", "lun", "mar", "mie", "joi", "vin", "sab" ], _kcqq33 = {
    one: "ca di {0} an",
    other: "ca di {0} agns"
}, _kcqq34 = {
    one: "ca di {0} mês",
    other: "ca di {0} mês"
}, _kcqq35 = {
    one: "ca di {0} ore",
    other: "ca di {0} oris"
}, _kcqq36 = {
    d: "E dd/MM – E dd/MM",
    M: "E dd/MM – E dd/MM"
}, _kcqq37 = {
    one: "{0} an indaûr",
    other: "{0} agns indaûr"
}, _kcqq38 = {
    one: "{0} mês indaûr",
    other: "{0} mês indaûr"
}, _kcqq39 = {
    d: "d–d 'di' MMM",
    M: "d 'di' MMM – d 'di' MMM"
}, _kcqq40 = {
    "0": "this year",
    "1": "next year",
    "-1": "last year"
}, _kcqq41 = {
    "0": "this week",
    "1": "next week",
    "-1": "last week"
}, _kcqq42 = {
    one: "{0} ore indaûr",
    other: "{0} oris indaûr"
}, _kcqq43 = {
    future: {
        other: "+{0} Q"
    },
    past: {
        other: "-{0} Q"
    }
}, _kcqq44 = {
    one: "ca di {0} minût",
    other: "ca di {0} minûts"
}, _kcqq45 = {
    id: "001",
    displayName: "Mont",
    hasTimeZones: false
}, _kcqq46 = [ "Z", "F", "M", "A", "M", "J", "L", "A", "S", "O", "N", "D" ], _kcqq47 = {
    "0": "this month",
    "1": "next month",
    "-1": "last month"
}, _kcqq48 = {
    d: "MM-dd, E – MM-dd, E",
    M: "MM-dd, E – MM-dd, E"
}, _kcqq49 = {
    d: "MMM d, E – MMM d, E",
    M: "MMM d, E – MMM d, E"
}, _kcqq50 = {
    one: "{0} minût indaûr",
    other: "{0} minûts indaûr"
}, _kcqq51 = {
    one: "ca di {0} secont",
    other: "ca di {0} seconts"
}, _kcqq52 = {
    wide: [ "ERA0", "ERA1" ],
    abbreviated: [ "ERA0", "ERA1" ]
}, _kcqq53 = {
    id: "AQ",
    displayName: "Antartic",
    hasTimeZones: true
}, _kcqq54 = {
    one: "ca di {0} zornade",
    other: "ca di {0} zornadis"
}, _kcqq55 = {
    one: "{0} secont indaûr",
    other: "{0} seconts indaûr"
}, _kcqq56 = {
    "0": "this Sunday",
    "1": "next Sunday",
    "-1": "last Sunday"
}, _kcqq57 = {
    "0": "this Monday",
    "1": "next Monday",
    "-1": "last Monday"
}, _kcqq58 = {
    "0": "this Friday",
    "1": "next Friday",
    "-1": "last Friday"
}, _kcqq59 = [ "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" ], _kcqq60 = {
    a: "h:mm a – h:mm a",
    h: "h:mm–h:mm a",
    m: "h:mm–h:mm a"
}, _kcqq61 = {
    one: "ca di {0} setemane",
    other: "ca di {0} setemanis"
}, _kcqq62 = {
    one: "{0} zornade indaûr",
    other: "{0} zornadis indaûr"
}, _kcqq63 = {
    id: "CC",
    displayName: "Isulis Cocos",
    hasTimeZones: true
}, _kcqq64 = {
    "0": "this quarter",
    "1": "next quarter",
    "-1": "last quarter"
}, _kcqq65 = {
    "0": "this Tuesday",
    "1": "next Tuesday",
    "-1": "last Tuesday"
}, _kcqq66 = {
    id: "DG",
    displayName: "Diego Garcia",
    hasTimeZones: false
}, _kcqq67 = {
    id: "BV",
    displayName: "Isule Bouvet",
    hasTimeZones: false
}, _kcqq68 = {
    d: "E d – E d 'di' MMM",
    M: "E d 'di' MMM – E d 'di' MMM"
}, _kcqq69 = {
    one: "{0} setemane indaûr",
    other: "{0} setemanis indaûr"
}, _kcqq70 = {
    d: "d – d/MM/y",
    M: "dd/MM/y – d/MM",
    y: "dd/MM/y – dd/MM/y"
}, _kcqq71 = {
    d: "U MMM d–d",
    M: "U MMM d – MMM d",
    y: "U MMM d – U MMM d"
}, _kcqq72 = [ "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13" ], _kcqq73 = {
    id: "CX",
    displayName: "Isule Christmas",
    hasTimeZones: true
}, _kcqq74 = {
    "0": "this Thursday",
    "1": "next Thursday",
    "-1": "last Thursday"
}, _kcqq75 = {
    "0": "this Saturday",
    "1": "next Saturday",
    "-1": "last Saturday"
}, _kcqq76 = {
    id: "EA",
    displayName: "Ceuta e Melilla",
    hasTimeZones: false
}, _kcqq77 = {
    id: "IC",
    displayName: "Isulis Canariis",
    hasTimeZones: false
}, _kcqq78 = {
    a: "h:mm a – h:mm a v",
    h: "h:mm–h:mm a v",
    m: "h:mm–h:mm a v"
}, _kcqq79 = {
    id: "CP",
    displayName: "Isule Clipperton",
    hasTimeZones: false
}, _kcqq80 = {
    id: "TA",
    displayName: "Tristan da Cunha",
    hasTimeZones: false
}, _kcqq81 = {
    id: "TD",
    displayName: "Çad",
    regionId: "017",
    hasTimeZones: true
}, _kcqq82 = {
    "0": "this Wednesday",
    "1": "next Wednesday",
    "-1": "last Wednesday"
}, _kcqq83 = {
    id: "CL",
    displayName: "Cile",
    regionId: "005",
    hasTimeZones: true
}, _kcqq84 = {
    id: "CN",
    displayName: "Cine",
    regionId: "030",
    hasTimeZones: true
}, _kcqq85 = {
    id: "CU",
    displayName: "Cuba",
    regionId: "029",
    hasTimeZones: true
}, _kcqq86 = {
    id: "FJ",
    displayName: "Fizi",
    regionId: "054",
    hasTimeZones: true
}, _kcqq87 = {
    id: "GU",
    displayName: "Guam",
    regionId: "057",
    hasTimeZones: true
}, _kcqq88 = {
    id: "IR",
    displayName: "Iran",
    regionId: "034",
    hasTimeZones: true
}, _kcqq89 = {
    id: "IQ",
    displayName: "Iraq",
    regionId: "145",
    hasTimeZones: true
}, _kcqq90 = {
    id: "LA",
    displayName: "Laos",
    regionId: "035",
    hasTimeZones: true
}, _kcqq91 = {
    id: "ML",
    displayName: "Mali",
    regionId: "011",
    hasTimeZones: true
}, _kcqq92 = {
    id: "NU",
    displayName: "Niue",
    regionId: "061",
    hasTimeZones: true
}, _kcqq93 = {
    id: "OM",
    displayName: "Oman",
    regionId: "145",
    hasTimeZones: true
}, _kcqq94 = {
    id: "PE",
    displayName: "Perù",
    regionId: "005",
    hasTimeZones: true
}, _kcqq95 = {
    id: "TG",
    displayName: "Togo",
    regionId: "011",
    hasTimeZones: true
}, _kcqq96 = {
    id: "AW",
    displayName: "Aruba",
    regionId: "029",
    hasTimeZones: true
}, _kcqq97 = {
    id: "BJ",
    displayName: "Benin",
    regionId: "011",
    hasTimeZones: true
}, _kcqq98 = {
    id: "CY",
    displayName: "Cipri",
    regionId: "145",
    hasTimeZones: true
}, _kcqq99 = {
    id: "EG",
    displayName: "Egjit",
    regionId: "015",
    hasTimeZones: true
}, _kcqq100 = {
    id: "GA",
    displayName: "Gabon",
    regionId: "017",
    hasTimeZones: true
}, _kcqq101 = {
    id: "GH",
    displayName: "Ghana",
    regionId: "011",
    hasTimeZones: true
}, _kcqq102 = {
    id: "HT",
    displayName: "Haiti",
    regionId: "029",
    hasTimeZones: true
}, _kcqq103 = {
    id: "IN",
    displayName: "India",
    regionId: "034",
    hasTimeZones: true
}, _kcqq104 = {
    id: "KE",
    displayName: "Kenya",
    regionId: "014",
    hasTimeZones: true
}, _kcqq105 = {
    id: "LB",
    displayName: "Liban",
    regionId: "145",
    hasTimeZones: true
}, _kcqq106 = {
    id: "LY",
    displayName: "Libie",
    regionId: "015",
    hasTimeZones: true
}, _kcqq107 = {
    id: "MT",
    displayName: "Malta",
    regionId: "039",
    hasTimeZones: true
}, _kcqq108 = {
    id: "MA",
    displayName: "Maroc",
    regionId: "015",
    hasTimeZones: true
}, _kcqq109 = {
    id: "NR",
    displayName: "Nauru",
    regionId: "057",
    hasTimeZones: true
}, _kcqq110 = {
    id: "NP",
    displayName: "Nepal",
    regionId: "034",
    hasTimeZones: true
}, _kcqq111 = {
    id: "NE",
    displayName: "Niger",
    regionId: "011",
    hasTimeZones: true
}, _kcqq112 = {
    id: "PW",
    displayName: "Palau",
    regionId: "057",
    hasTimeZones: true
}, _kcqq113 = {
    id: "QA",
    displayName: "Qatar",
    regionId: "145",
    hasTimeZones: true
}, _kcqq114 = {
    id: "WS",
    displayName: "Samoa",
    regionId: "061",
    hasTimeZones: true
}, _kcqq115 = {
    id: "SY",
    displayName: "Sirie",
    regionId: "145",
    hasTimeZones: true
}, _kcqq116 = {
    id: "SD",
    displayName: "Sudan",
    regionId: "015",
    hasTimeZones: true
}, _kcqq117 = {
    id: "TO",
    displayName: "Tonga",
    regionId: "061",
    hasTimeZones: true
}, _kcqq118 = {
    id: "YE",
    displayName: "Yemen",
    regionId: "145",
    hasTimeZones: true
}, _kcqq119 = {
    relative: _kcqq56
}, _kcqq120 = {
    relative: _kcqq57
}, _kcqq121 = {
    relative: _kcqq58
}, _kcqq122 = {
    id: "AO",
    displayName: "Angola",
    regionId: "017",
    hasTimeZones: true
}, _kcqq123 = {
    id: "BZ",
    displayName: "Belize",
    regionId: "013",
    hasTimeZones: true
}, _kcqq124 = {
    id: "BT",
    displayName: "Bhutan",
    regionId: "034",
    hasTimeZones: true
}, _kcqq125 = {
    id: "BR",
    displayName: "Brasîl",
    regionId: "005",
    hasTimeZones: true
}, _kcqq126 = {
    id: "BN",
    displayName: "Brunei",
    regionId: "035",
    hasTimeZones: true
}, _kcqq127 = {
    id: "CA",
    displayName: "Canade",
    regionId: "021",
    hasTimeZones: true
}, _kcqq128 = {
    id: "FR",
    displayName: "France",
    regionId: "155",
    hasTimeZones: true
}, _kcqq129 = {
    id: "GM",
    displayName: "Gambia",
    regionId: "011",
    hasTimeZones: true
}, _kcqq130 = {
    id: "DJ",
    displayName: "Gibuti",
    regionId: "014",
    hasTimeZones: true
}, _kcqq131 = {
    id: "JP",
    displayName: "Gjapon",
    regionId: "030",
    hasTimeZones: true
}, _kcqq132 = {
    id: "GR",
    displayName: "Grecie",
    regionId: "039",
    hasTimeZones: true
}, _kcqq133 = {
    id: "GN",
    displayName: "Guinee",
    regionId: "011",
    hasTimeZones: true
}, _kcqq134 = {
    id: "GY",
    displayName: "Guyana",
    regionId: "005",
    hasTimeZones: true
}, _kcqq135 = {
    id: "IL",
    displayName: "Israêl",
    regionId: "145",
    hasTimeZones: true
}, _kcqq136 = {
    id: "IT",
    displayName: "Italie",
    regionId: "039",
    hasTimeZones: true
}, _kcqq137 = {
    id: "JE",
    displayName: "Jersey",
    regionId: "154",
    hasTimeZones: true
}, _kcqq138 = {
    id: "KW",
    displayName: "Kuwait",
    regionId: "145",
    hasTimeZones: true
}, _kcqq139 = {
    id: "MW",
    displayName: "Malawi",
    regionId: "014",
    hasTimeZones: true
}, _kcqq140 = {
    id: "MX",
    displayName: "Messic",
    regionId: "013",
    hasTimeZones: true
}, _kcqq141 = {
    id: "MC",
    displayName: "Monaco",
    regionId: "155",
    hasTimeZones: true
}, _kcqq142 = {
    id: "PA",
    displayName: "Panamà",
    regionId: "013",
    hasTimeZones: true
}, _kcqq143 = {
    id: "RW",
    displayName: "Ruande",
    regionId: "014",
    hasTimeZones: true
}, _kcqq144 = {
    id: "RU",
    displayName: "Russie",
    regionId: "151",
    hasTimeZones: true
}, _kcqq145 = {
    id: "RS",
    displayName: "Serbie",
    regionId: "039",
    hasTimeZones: true
}, _kcqq146 = {
    id: "ES",
    displayName: "Spagne",
    regionId: "039",
    hasTimeZones: true
}, _kcqq147 = {
    id: "SE",
    displayName: "Svezie",
    regionId: "154",
    hasTimeZones: true
}, _kcqq148 = {
    id: "TW",
    displayName: "Taiwan",
    regionId: "030",
    hasTimeZones: true
}, _kcqq149 = {
    id: "TV",
    displayName: "Tuvalu",
    regionId: "061",
    hasTimeZones: true
}, _kcqq150 = {
    id: "UG",
    displayName: "Uganda",
    regionId: "014",
    hasTimeZones: true
}, _kcqq151 = {
    id: "ZM",
    displayName: "Zambia",
    regionId: "014",
    hasTimeZones: true
}, _kcqq152 = {
    "0": "vuê",
    "1": "doman",
    "2": "passantdoman",
    "-2": "îr l’altri",
    "-1": "îr"
}, _kcqq153 = {
    id: "AL",
    displayName: "Albanie",
    regionId: "039",
    hasTimeZones: true
}, _kcqq154 = {
    id: "DZ",
    displayName: "Alzerie",
    regionId: "015",
    hasTimeZones: true
}, _kcqq155 = {
    id: "AD",
    displayName: "Andorra",
    regionId: "039",
    hasTimeZones: true
}, _kcqq156 = {
    id: "AM",
    displayName: "Armenie",
    regionId: "145",
    hasTimeZones: true
}, _kcqq157 = {
    id: "AT",
    displayName: "Austrie",
    regionId: "155",
    hasTimeZones: true
}, _kcqq158 = {
    id: "BS",
    displayName: "Bahamas",
    regionId: "029",
    hasTimeZones: true
}, _kcqq159 = {
    id: "BH",
    displayName: "Bahrain",
    regionId: "145",
    hasTimeZones: true
}, _kcqq160 = {
    id: "BM",
    displayName: "Bermuda",
    regionId: "021",
    hasTimeZones: true
}, _kcqq161 = {
    id: "BO",
    displayName: "Bolivie",
    regionId: "005",
    hasTimeZones: true
}, _kcqq162 = {
    id: "BI",
    displayName: "Burundi",
    regionId: "014",
    hasTimeZones: true
}, _kcqq163 = {
    id: "KH",
    displayName: "Camboze",
    regionId: "035",
    hasTimeZones: true
}, _kcqq164 = {
    id: "CM",
    displayName: "Camerun",
    regionId: "017",
    hasTimeZones: true
}, _kcqq165 = {
    id: "KM",
    displayName: "Comoris",
    regionId: "014",
    hasTimeZones: true
}, _kcqq166 = {
    id: "EC",
    displayName: "Ecuador",
    regionId: "005",
    hasTimeZones: true
}, _kcqq167 = {
    id: "ER",
    displayName: "Eritree",
    regionId: "014",
    hasTimeZones: true
}, _kcqq168 = {
    id: "EE",
    displayName: "Estonie",
    regionId: "154",
    hasTimeZones: true
}, _kcqq169 = {
    id: "ET",
    displayName: "Etiopie",
    regionId: "014",
    hasTimeZones: true
}, _kcqq170 = {
    id: "GD",
    displayName: "Grenada",
    regionId: "029",
    hasTimeZones: true
}, _kcqq171 = {
    id: "IE",
    displayName: "Irlande",
    regionId: "154",
    hasTimeZones: true
}, _kcqq172 = {
    id: "IS",
    displayName: "Islande",
    regionId: "154",
    hasTimeZones: true
}, _kcqq173 = {
    id: "LS",
    displayName: "Lesotho",
    regionId: "018",
    hasTimeZones: true
}, _kcqq174 = {
    id: "LV",
    displayName: "Letonie",
    regionId: "154",
    hasTimeZones: true
}, _kcqq175 = {
    id: "LR",
    displayName: "Liberie",
    regionId: "011",
    hasTimeZones: true
}, _kcqq176 = {
    id: "MU",
    displayName: "Maurizi",
    regionId: "014",
    hasTimeZones: true
}, _kcqq177 = {
    id: "YT",
    displayName: "Mayotte",
    regionId: "014",
    hasTimeZones: true
}, _kcqq178 = {
    id: "NA",
    displayName: "Namibie",
    regionId: "018",
    hasTimeZones: true
}, _kcqq179 = {
    id: "NG",
    displayName: "Nigerie",
    regionId: "011",
    hasTimeZones: true
}, _kcqq180 = {
    id: "PL",
    displayName: "Polonie",
    regionId: "151",
    hasTimeZones: true
}, _kcqq181 = {
    id: "RE",
    displayName: "Reunion",
    regionId: "014",
    hasTimeZones: true
}, _kcqq182 = {
    id: "RO",
    displayName: "Romanie",
    regionId: "151",
    hasTimeZones: true
}, _kcqq183 = {
    id: "SN",
    displayName: "Senegal",
    regionId: "011",
    hasTimeZones: true
}, _kcqq184 = {
    id: "SO",
    displayName: "Somalie",
    regionId: "014",
    hasTimeZones: true
}, _kcqq185 = {
    id: "TK",
    displayName: "Tokelau",
    regionId: "061",
    hasTimeZones: true
}, _kcqq186 = {
    id: "TN",
    displayName: "Tunisie",
    regionId: "015",
    hasTimeZones: true
}, _kcqq187 = {
    id: "TR",
    displayName: "Turchie",
    regionId: "145",
    hasTimeZones: true
}, _kcqq188 = {
    id: "UA",
    displayName: "Ucraine",
    regionId: "151",
    hasTimeZones: true
}, _kcqq189 = {
    id: "UY",
    displayName: "Uruguay",
    regionId: "005",
    hasTimeZones: true
}, _kcqq190 = {
    id: "VU",
    displayName: "Vanuatu",
    regionId: "054",
    hasTimeZones: true
}, _kcqq191 = {
    id: "VA",
    displayName: "Vatican",
    regionId: "039",
    hasTimeZones: true
}, _kcqq192 = {
    id: "VN",
    displayName: "Vietnam",
    regionId: "035",
    hasTimeZones: true
}, _kcqq193 = [ "domenie", "lunis", "martars", "miercus", "joibe", "vinars", "sabide" ], _kcqq194 = {
    id: "AI",
    displayName: "Anguilla",
    regionId: "029",
    hasTimeZones: true
}, _kcqq195 = {
    id: "BB",
    displayName: "Barbados",
    regionId: "029",
    hasTimeZones: true
}, _kcqq196 = {
    id: "MM",
    displayName: "Birmanie",
    regionId: "035",
    hasTimeZones: true
}, _kcqq197 = {
    id: "BW",
    displayName: "Botswana",
    regionId: "018",
    hasTimeZones: true
}, _kcqq198 = {
    id: "BG",
    displayName: "Bulgarie",
    regionId: "151",
    hasTimeZones: true
}, _kcqq199 = {
    id: "CO",
    displayName: "Colombie",
    regionId: "005",
    hasTimeZones: true
}, _kcqq200 = {
    id: "GG",
    displayName: "Guernsey",
    regionId: "154",
    hasTimeZones: true
}, _kcqq201 = {
    id: "HN",
    displayName: "Honduras",
    regionId: "013",
    hasTimeZones: true
}, _kcqq202 = {
    id: "JO",
    displayName: "Jordanie",
    regionId: "145",
    hasTimeZones: true
}, _kcqq203 = {
    id: "KI",
    displayName: "Kiribati",
    regionId: "057",
    hasTimeZones: true
}, _kcqq204 = {
    id: "LT",
    displayName: "Lituanie",
    regionId: "154",
    hasTimeZones: true
}, _kcqq205 = {
    id: "MY",
    displayName: "Malaysia",
    regionId: "035",
    hasTimeZones: true
}, _kcqq206 = {
    id: "MV",
    displayName: "Maldivis",
    regionId: "034",
    hasTimeZones: true
}, _kcqq207 = {
    id: "MD",
    displayName: "Moldavie",
    regionId: "151",
    hasTimeZones: true
}, _kcqq208 = {
    id: "MN",
    displayName: "Mongolie",
    regionId: "030",
    hasTimeZones: true
}, _kcqq209 = {
    id: "MZ",
    displayName: "Mozambic",
    regionId: "014",
    hasTimeZones: true
}, _kcqq210 = {
    id: "NO",
    displayName: "Norvegje",
    regionId: "154",
    hasTimeZones: true
}, _kcqq211 = {
    id: "HU",
    displayName: "Ongjarie",
    regionId: "151",
    hasTimeZones: true
}, _kcqq212 = {
    id: "PK",
    displayName: "Pakistan",
    regionId: "034",
    hasTimeZones: true
}, _kcqq213 = {
    id: "PY",
    displayName: "Paraguay",
    regionId: "005",
    hasTimeZones: true
}, _kcqq214 = {
    id: "NL",
    displayName: "Paîs bas",
    regionId: "155",
    hasTimeZones: true
}, _kcqq215 = {
    id: "PN",
    displayName: "Pitcairn",
    regionId: "061",
    hasTimeZones: true
}, _kcqq216 = {
    id: "PT",
    displayName: "Portugal",
    regionId: "039",
    hasTimeZones: true
}, _kcqq217 = {
    id: "SI",
    displayName: "Slovenie",
    regionId: "039",
    hasTimeZones: true
}, _kcqq218 = {
    id: "SR",
    displayName: "Suriname",
    regionId: "005",
    hasTimeZones: true
}, _kcqq219 = {
    id: "CH",
    displayName: "Svuizare",
    regionId: "155",
    hasTimeZones: true
}, _kcqq220 = {
    id: "TZ",
    displayName: "Tanzanie",
    regionId: "014",
    hasTimeZones: true
}, _kcqq221 = {
    id: "ZW",
    displayName: "Zimbabwe",
    regionId: "014",
    hasTimeZones: true
}, _kcqq222 = {
    relative: _kcqq65
}, _kcqq223 = {
    id: "AU",
    displayName: "Australie",
    regionId: "053",
    hasTimeZones: true
}, _kcqq224 = {
    id: "BE",
    displayName: "Belgjiche",
    regionId: "155",
    hasTimeZones: true
}, _kcqq225 = {
    id: "CV",
    displayName: "Cjâf vert",
    regionId: "011",
    hasTimeZones: true
}, _kcqq226 = {
    id: "HR",
    displayName: "Cravuazie",
    regionId: "039",
    hasTimeZones: true
}, _kcqq227 = {
    id: "DM",
    displayName: "Dominiche",
    regionId: "029",
    hasTimeZones: true
}, _kcqq228 = {
    id: "PH",
    displayName: "Filipinis",
    regionId: "035",
    hasTimeZones: true
}, _kcqq229 = {
    id: "FI",
    displayName: "Finlandie",
    regionId: "154",
    hasTimeZones: true
}, _kcqq230 = {
    id: "JM",
    displayName: "Gjamaiche",
    regionId: "029",
    hasTimeZones: true
}, _kcqq231 = {
    id: "GE",
    displayName: "Gjeorgjie",
    regionId: "145",
    hasTimeZones: true
}, _kcqq232 = {
    id: "DE",
    displayName: "Gjermanie",
    regionId: "155",
    hasTimeZones: true
}, _kcqq233 = {
    id: "GP",
    displayName: "Guadalupe",
    regionId: "029",
    hasTimeZones: true
}, _kcqq234 = {
    id: "GT",
    displayName: "Guatemala",
    regionId: "013",
    hasTimeZones: true
}, _kcqq235 = {
    id: "ID",
    displayName: "Indonesie",
    regionId: "035",
    hasTimeZones: true
}, _kcqq236 = {
    id: "MK",
    displayName: "Macedonie",
    regionId: "039",
    hasTimeZones: true
}, _kcqq237 = {
    id: "NI",
    displayName: "Nicaragua",
    regionId: "013",
    hasTimeZones: true
}, _kcqq238 = {
    id: "GB",
    displayName: "Ream unît",
    regionId: "154",
    hasTimeZones: true
}, _kcqq239 = {
    id: "SM",
    displayName: "San Marin",
    regionId: "039",
    hasTimeZones: true
}, _kcqq240 = {
    id: "SG",
    displayName: "Singapore",
    regionId: "035",
    hasTimeZones: true
}, _kcqq241 = {
    id: "SK",
    displayName: "Slovachie",
    regionId: "151",
    hasTimeZones: true
}, _kcqq242 = {
    id: "LK",
    displayName: "Sri Lanka",
    regionId: "034",
    hasTimeZones: true
}, _kcqq243 = {
    id: "SZ",
    displayName: "Swaziland",
    regionId: "018",
    hasTimeZones: true
}, _kcqq244 = {
    id: "TH",
    displayName: "Tailandie",
    regionId: "035",
    hasTimeZones: true
}, _kcqq245 = {
    id: "VE",
    displayName: "Venezuela",
    regionId: "005",
    hasTimeZones: true
}, _kcqq246 = {
    d: "dd/MM/y – dd/MM/y",
    M: "dd/MM/y – dd/MM/y",
    y: "dd/MM/y – dd/MM/y"
}, _kcqq247 = {
    d: "y-MM-dd – y-MM-dd",
    M: "y-MM-dd – y-MM-dd",
    y: "y-MM-dd – y-MM-dd"
}, _kcqq248 = {
    id: "AR",
    displayName: "Argjentine",
    regionId: "005",
    hasTimeZones: true
}, _kcqq249 = {
    id: "BD",
    displayName: "Bangladesh",
    regionId: "034",
    hasTimeZones: true
}, _kcqq250 = {
    id: "CR",
    displayName: "Costa Rica",
    regionId: "013",
    hasTimeZones: true
}, _kcqq251 = {
    id: "DK",
    displayName: "Danimarcje",
    regionId: "154",
    hasTimeZones: true
}, _kcqq252 = {
    id: "GI",
    displayName: "Gjibraltar",
    regionId: "039",
    hasTimeZones: true
}, _kcqq253 = {
    id: "GL",
    displayName: "Groenlande",
    regionId: "021",
    hasTimeZones: true
}, _kcqq254 = {
    id: "LU",
    displayName: "Lussemburc",
    regionId: "155",
    hasTimeZones: true
}, _kcqq255 = {
    id: "MG",
    displayName: "Madagascar",
    regionId: "014",
    hasTimeZones: true
}, _kcqq256 = {
    id: "MQ",
    displayName: "Martiniche",
    regionId: "029",
    hasTimeZones: true
}, _kcqq257 = {
    id: "MR",
    displayName: "Mauritanie",
    regionId: "011",
    hasTimeZones: true
}, _kcqq258 = {
    id: "FM",
    displayName: "Micronesie",
    regionId: "057",
    hasTimeZones: true
}, _kcqq259 = {
    id: "ME",
    displayName: "Montenegro",
    regionId: "039",
    hasTimeZones: true
}, _kcqq260 = {
    id: "MS",
    displayName: "Montserrat",
    regionId: "029",
    hasTimeZones: true
}, _kcqq261 = {
    id: "PR",
    displayName: "Porto Rico",
    regionId: "029",
    hasTimeZones: true
}, _kcqq262 = {
    id: "SC",
    displayName: "Seychelles",
    regionId: "014",
    hasTimeZones: true
}, _kcqq263 = {
    id: "TJ",
    displayName: "Tazikistan",
    regionId: "143",
    hasTimeZones: true
}, _kcqq264 = {
    id: "AF",
    displayName: "Afghanistan",
    regionId: "034",
    hasTimeZones: true
}, _kcqq265 = {
    id: "AZ",
    displayName: "Azerbaigian",
    regionId: "145",
    hasTimeZones: true
}, _kcqq266 = {
    id: "BY",
    displayName: "Bielorussie",
    regionId: "151",
    hasTimeZones: true
}, _kcqq267 = {
    id: "SV",
    displayName: "El Salvador",
    regionId: "013",
    hasTimeZones: true
}, _kcqq268 = {
    id: "CK",
    displayName: "Isulis Cook",
    regionId: "061",
    hasTimeZones: true
}, _kcqq269 = {
    id: "KZ",
    displayName: "Kazachistan",
    regionId: "143",
    hasTimeZones: true
}, _kcqq270 = {
    id: "KG",
    displayName: "Kirghizstan",
    regionId: "143",
    hasTimeZones: true
}, _kcqq271 = {
    id: "MF",
    displayName: "Sant Martin",
    regionId: "029",
    hasTimeZones: true
}, _kcqq272 = {
    id: "SH",
    displayName: "Sante Eline",
    regionId: "011",
    hasTimeZones: true
}, _kcqq273 = {
    id: "LC",
    displayName: "Sante Lusie",
    regionId: "029",
    hasTimeZones: true
}, _kcqq274 = {
    id: "US",
    displayName: "Stâts Unîts",
    regionId: "021",
    hasTimeZones: true
}, _kcqq275 = {
    id: "ZA",
    displayName: "Sud Afriche",
    regionId: "018",
    hasTimeZones: true
}, _kcqq276 = {
    id: "UZ",
    displayName: "Uzbechistan",
    regionId: "143",
    hasTimeZones: true
}, _kcqq277 = {
    relative: _kcqq74
}, _kcqq278 = {
    relative: _kcqq75
}, _kcqq279 = {
    id: "142",
    displayName: "Asie",
    hasTimeZones: false,
    parentRegionId: "001"
}, _kcqq280 = {
    id: "BF",
    displayName: "Burkina Faso",
    regionId: "011",
    hasTimeZones: true
}, _kcqq281 = {
    id: "IM",
    displayName: "Isule di Man",
    regionId: "154",
    hasTimeZones: true
}, _kcqq282 = {
    id: "AX",
    displayName: "Isulis Aland",
    regionId: "154",
    hasTimeZones: true
}, _kcqq283 = {
    id: "FO",
    displayName: "Isulis Faroe",
    regionId: "154",
    hasTimeZones: true
}, _kcqq284 = {
    id: "SL",
    displayName: "Sierra Leone",
    regionId: "011",
    hasTimeZones: true
}, _kcqq285 = {
    id: "TM",
    displayName: "Turkmenistan",
    regionId: "143",
    hasTimeZones: true
}, _kcqq286 = {
    id: "KR",
    displayName: "Coree dal sud",
    regionId: "030",
    hasTimeZones: true
}, _kcqq287 = {
    id: "NZ",
    displayName: "Gnove Zelande",
    regionId: "053",
    hasTimeZones: true
}, _kcqq288 = {
    id: "GW",
    displayName: "Guinea-Bissau",
    regionId: "011",
    hasTimeZones: true
}, _kcqq289 = {
    id: "NF",
    displayName: "Isole Norfolk",
    regionId: "053",
    hasTimeZones: true
}, _kcqq290 = {
    id: "KY",
    displayName: "Isulis Cayman",
    regionId: "029",
    hasTimeZones: true
}, _kcqq291 = {
    id: "LI",
    displayName: "Liechtenstein",
    regionId: "155",
    hasTimeZones: true
}, _kcqq292 = {
    id: "TF",
    displayName: "Teritoris meridionâi francês",
    hasTimeZones: true
}, _kcqq293 = {
    abbreviated: {
        leap: "{0}bis"
    },
    narrow: {
        leap: "{0}b"
    },
    wide: {
        leap: "{0}bis"
    }
}, _kcqq294 = {
    id: "SA",
    displayName: "Arabie Saudide",
    regionId: "145",
    hasTimeZones: true
}, _kcqq295 = {
    id: "KP",
    displayName: "Coree dal nord",
    regionId: "030",
    hasTimeZones: true
}, _kcqq296 = {
    id: "150",
    displayName: "Europe",
    hasTimeZones: false,
    parentRegionId: "001"
}, _kcqq297 = {
    id: "GF",
    displayName: "Guiana francês",
    regionId: "005",
    hasTimeZones: true
}, _kcqq298 = {
    id: "SB",
    displayName: "Isulis Salomon",
    regionId: "054",
    hasTimeZones: true
}, _kcqq299 = {
    id: "TL",
    displayName: "Timor orientâl",
    regionId: "035",
    hasTimeZones: true
}, _kcqq300 = {
    relative: _kcqq82
}, _kcqq301 = {
    id: "002",
    displayName: "Afriche",
    hasTimeZones: false,
    parentRegionId: "001"
}, _kcqq302 = {
    id: "CI",
    displayName: "Cueste di Avoli",
    regionId: "011",
    hasTimeZones: true
}, _kcqq303 = {
    id: "NC",
    displayName: "Gnove Caledonie",
    regionId: "054",
    hasTimeZones: true
}, _kcqq304 = {
    id: "HM",
    displayName: "Isule Heard e Isulis McDonald",
    hasTimeZones: false
}, _kcqq305 = {
    id: "FK",
    displayName: "Isulis Falkland",
    regionId: "005",
    hasTimeZones: true
}, _kcqq306 = {
    id: "MH",
    displayName: "Isulis Marshall",
    regionId: "057",
    hasTimeZones: true
}, _kcqq307 = {
    id: "009",
    displayName: "Oceanie",
    hasTimeZones: false,
    parentRegionId: "001"
}, _kcqq308 = {
    id: "AS",
    displayName: "Samoa merecanis",
    regionId: "061",
    hasTimeZones: true
}, _kcqq309 = {
    id: "BL",
    displayName: "Sant Barthélemy",
    regionId: "029",
    hasTimeZones: true
}, _kcqq310 = {
    id: "WF",
    displayName: "Wallis e Futuna",
    regionId: "061",
    hasTimeZones: true
}, _kcqq311 = [ "Zen", "Fev", "Mar", "Avr", "Mai", "Jug", "Lui", "Avo", "Set", "Otu", "Nov", "Dic" ], _kcqq312 = [ "Prin trimestri", "Secont trimestri", "Tierç trimestri", "Cuart trimestri" ], _kcqq313 = [ "M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12" ], _kcqq314 = {
    id: "CZ",
    displayName: "Republiche ceche",
    regionId: "151",
    hasTimeZones: true
}, _kcqq315 = {
    id: "EH",
    displayName: "Sahara ocidentâl",
    regionId: "015",
    hasTimeZones: true
}, _kcqq316 = {
    id: "029",
    displayName: "caraibic",
    hasTimeZones: false,
    parentRegionId: "019"
}, _kcqq317 = {
    id: "019",
    displayName: "Americhis",
    hasTimeZones: false,
    parentRegionId: "001"
}, _kcqq318 = {
    id: "AG",
    displayName: "Antigua e Barbuda",
    regionId: "029",
    hasTimeZones: true
}, _kcqq319 = {
    id: "GQ",
    displayName: "Guinee ecuatoriâl",
    regionId: "017",
    hasTimeZones: true
}, _kcqq320 = {
    id: "054",
    displayName: "Melanesie",
    hasTimeZones: false,
    parentRegionId: "009"
}, _kcqq321 = {
    id: "061",
    displayName: "Polinesie",
    hasTimeZones: false,
    parentRegionId: "009"
}, _kcqq322 = {
    id: "PF",
    displayName: "Polinesie francês",
    regionId: "061",
    hasTimeZones: true
}, _kcqq323 = {
    id: "KN",
    displayName: "San Kitts e Nevis",
    regionId: "029",
    hasTimeZones: true
}, _kcqq324 = {
    id: "TT",
    displayName: "Trinidad e Tobago",
    regionId: "029",
    hasTimeZones: true
}, _kcqq325 = {
    id: "PG",
    displayName: "Papue Gnove Guinee",
    regionId: "054",
    hasTimeZones: true
}, _kcqq326 = [ undefined, "zi", "chou", "yin", "mao", "chen", "si", "wu", "wei", "shen", "you", "xu" ], _kcqq327 = {
    id: "BA",
    displayName: "Bosnie e Ercegovine",
    regionId: "039",
    hasTimeZones: true
}, _kcqq328 = {
    id: "CG",
    displayName: "Congo - Brazzaville",
    regionId: "017",
    hasTimeZones: true
}, _kcqq329 = {
    id: "AE",
    displayName: "Emirâts araps unîts",
    regionId: "145",
    hasTimeZones: true
}, _kcqq330 = {
    id: "ST",
    displayName: "Sao Tomè e Principe",
    regionId: "017",
    hasTimeZones: true
}, _kcqq331 = {
    id: "IO",
    displayName: "Teritori britanic dal Ocean Indian",
    hasTimeZones: true
}, _kcqq332 = {
    id: "143",
    displayName: "Asie centrâl",
    hasTimeZones: false,
    parentRegionId: "142"
}, _kcqq333 = {
    id: "SJ",
    displayName: "Svalbard e Jan Mayen",
    regionId: "154",
    hasTimeZones: true
}, _kcqq334 = {
    id: "PS",
    displayName: "Teritoris palestinês",
    regionId: "145",
    hasTimeZones: true
}, _kcqq335 = {
    id: "030",
    displayName: "Asie orientâl",
    hasTimeZones: false,
    parentRegionId: "142"
}, _kcqq336 = {
    id: "TC",
    displayName: "Isulis Turks e Caicos",
    regionId: "029",
    hasTimeZones: true
}, _kcqq337 = {
    id: "DO",
    displayName: "Republiche dominicane",
    regionId: "029",
    hasTimeZones: true
}, _kcqq338 = {
    id: "PM",
    displayName: "San Pierre e Miquelon",
    regionId: "021",
    hasTimeZones: true
}, _kcqq339 = {
    d: "E dd/MM/y – E dd/MM/y",
    M: "E dd/MM/y – E dd/MM/y",
    y: "E dd/MM/y – E dd/MM/y"
}, _kcqq340 = {
    abbreviated: {
        am: "a.",
        pm: "p."
    },
    narrow: {
        am: "a.",
        pm: "p."
    },
    wide: {
        am: "a.",
        pm: "p."
    }
}, _kcqq341 = {
    id: "145",
    displayName: "Asie ocidentâl",
    hasTimeZones: false,
    parentRegionId: "142"
}, _kcqq342 = {
    id: "017",
    displayName: "Afriche di mieç",
    hasTimeZones: false,
    parentRegionId: "002"
}, _kcqq343 = {
    id: "034",
    displayName: "Asie meridionâl",
    hasTimeZones: false,
    parentRegionId: "142"
}, _kcqq344 = {
    id: "151",
    displayName: "Europe orientâl",
    hasTimeZones: false,
    parentRegionId: "150"
}, _kcqq345 = {
    id: "MP",
    displayName: "Isulis Mariana dal Nord",
    regionId: "057",
    hasTimeZones: true
}, _kcqq346 = {
    d: "U MMM d, E – MMM d, E",
    M: "U MMM d, E – MMM d, E",
    y: "U MMM d, E – U MMM d, E"
}, _kcqq347 = {
    id: "014",
    displayName: "Afriche orientâl",
    hasTimeZones: false,
    parentRegionId: "002"
}, _kcqq348 = {
    id: "013",
    displayName: "Americhe centrâl",
    hasTimeZones: false,
    parentRegionId: "019"
}, _kcqq349 = {
    id: "155",
    displayName: "Europe ocidentâl",
    hasTimeZones: false,
    parentRegionId: "150"
}, _kcqq350 = {
    id: "011",
    displayName: "Afriche ocidentâl",
    hasTimeZones: false,
    parentRegionId: "002"
}, _kcqq351 = {
    id: "035",
    displayName: "Asie sud orientâl",
    hasTimeZones: false,
    parentRegionId: "142"
}, _kcqq352 = {
    id: "039",
    displayName: "Europe meridionâl",
    hasTimeZones: false,
    parentRegionId: "150"
}, _kcqq353 = {
    id: "018",
    displayName: "Afriche meridionâl",
    hasTimeZones: false,
    parentRegionId: "002"
}, _kcqq354 = {
    id: "GS",
    displayName: "Georgia dal Sud e Isulis Sandwich dal Sud",
    hasTimeZones: true
}, _kcqq355 = {
    id: "CF",
    displayName: "Republiche centri africane",
    regionId: "017",
    hasTimeZones: true
}, _kcqq356 = {
    id: "005",
    displayName: "Americhe meridionâl",
    hasTimeZones: false,
    parentRegionId: "019"
}, _kcqq357 = {
    id: "154",
    displayName: "Europe setentrionâl",
    hasTimeZones: false,
    parentRegionId: "150"
}, _kcqq358 = {
    id: "UM",
    displayName: "Isulis periferichis minôrs dai Stâts Unîts",
    hasTimeZones: true
}, _kcqq359 = {
    id: "VI",
    displayName: "Isulis vergjinis americanis",
    regionId: "029",
    hasTimeZones: true
}, _kcqq360 = {
    d: "y-MM-dd, E – y-MM-dd, E",
    M: "y-MM-dd, E – y-MM-dd, E",
    y: "y-MM-dd, E – y-MM-dd, E"
}, _kcqq361 = {
    id: "015",
    displayName: "Afriche setentrionâl",
    hasTimeZones: false,
    parentRegionId: "002"
}, _kcqq362 = {
    id: "VG",
    displayName: "Isulis vergjinis britanichis",
    regionId: "029",
    hasTimeZones: true
}, _kcqq363 = {
    id: "057",
    displayName: "Regjon de Micronesie",
    hasTimeZones: false,
    parentRegionId: "009"
}, _kcqq364 = {
    id: "VC",
    displayName: "San Vincent e lis Grenadinis",
    regionId: "029",
    hasTimeZones: true
}, _kcqq365 = {
    id: "021",
    displayName: "Americhe setentrionâl",
    hasTimeZones: false,
    parentRegionId: "019"
}, _kcqq366 = {
    id: "053",
    displayName: "Australie e Gnove Zelande",
    hasTimeZones: false,
    parentRegionId: "009"
}, _kcqq367 = {
    id: "CD",
    displayName: "Republiche Democratiche dal Congo",
    regionId: "017",
    hasTimeZones: true
}, _kcqq368 = [ "Zenâr", "Fevrâr", "Març", "Avrîl", "Mai", "Jugn", "Lui", "Avost", "Setembar", "Otubar", "Novembar", "Dicembar" ], _kcqq369 = {
    id: "MO",
    displayName: "Regjon aministrative speciâl de Cine di Macao",
    regionId: "030",
    hasTimeZones: true
}, _kcqq370 = {
    future: _kcqq33,
    past: _kcqq37
}, _kcqq371 = {
    future: _kcqq34,
    past: _kcqq38
}, _kcqq372 = [ "Muh.", "Saf.", "Rab. I", "Rab. II", "Jum. I", "Jum. II", "Raj.", "Sha.", "Ram.", "Shaw.", "Dhuʻl-Q.", "Dhuʻl-H." ], _kcqq373 = {
    future: _kcqq35,
    past: _kcqq42
}, _kcqq374 = [ "Tishri", "Heshvan", "Kislev", "Tevet", "Shevat", "Adar I", "Adar", "Nisan", "Iyar", "Sivan", "Tamuz", "Av", "Elul" ], _kcqq375 = {
    id: "HK",
    displayName: "Regjon aministrative speciâl de Cine di Hong Kong",
    regionId: "030",
    hasTimeZones: true
}, _kcqq376 = [ "Farvardin", "Ordibehesht", "Khordad", "Tir", "Mordad", "Shahrivar", "Mehr", "Aban", "Azar", "Dey", "Bahman", "Esfand" ], _kcqq377 = [ "Tout", "Baba", "Hator", "Kiahk", "Toba", "Amshir", "Baramhat", "Baramouda", "Bashans", "Paona", "Epep", "Mesra", "Nasie" ], _kcqq378 = {
    future: _kcqq44,
    past: _kcqq50
}, _kcqq379 = {
    future: _kcqq51,
    past: _kcqq55
}, _kcqq380 = [ "Meskerem", "Tekemt", "Hedar", "Tahsas", "Ter", "Yekatit", "Megabit", "Miazia", "Genbot", "Sene", "Hamle", "Nehasse", "Pagumen" ], _kcqq381 = [ "Chaitra", "Vaisakha", "Jyaistha", "Asadha", "Sravana", "Bhadra", "Asvina", "Kartika", "Agrahayana", "Pausa", "Magha", "Phalguna" ], _kcqq382 = {
    future: _kcqq54,
    past: _kcqq62
}, _kcqq383 = {
    future: _kcqq61,
    past: _kcqq69
}, _kcqq384 = [ "Muharram", "Safar", "Rabiʻ I", "Rabiʻ II", "Jumada I", "Jumada II", "Rajab", "Shaʻban", "Ramadan", "Shawwal", "Dhuʻl-Qiʻdah", "Dhuʻl-Hijjah" ], _kcqq385 = {
    displayName: "ore",
    relativeTime: _kcqq373
}, _kcqq386 = {
    abbreviated: _kcqq1,
    narrow: [ "1", "2", "3", "4" ],
    wide: _kcqq312
}, _kcqq387 = {
    displayName: "minût",
    relativeTime: _kcqq378
}, _kcqq388 = {
    displayName: "Quarter",
    relative: _kcqq64,
    relativeTime: _kcqq43
}, _kcqq389 = {
    displayName: "secont",
    relative: [ "now" ],
    relativeTime: _kcqq379
}, _kcqq390 = {
    decimal: ",",
    group: ".",
    list: ";",
    percentSign: "%",
    plusSign: "+",
    minusSign: "-",
    exponential: "E",
    perMille: "‰",
    infinity: "∞",
    nan: "NaN",
    superscriptingExponent: "×",
    timeSeparator: ":"
}, _kcqq391 = {
    format: _kcqq340,
    standAlone: _kcqq340
}, _kcqq392 = {
    symbols: _kcqq390
}, _kcqq393 = {
    displayName: "an",
    relative: _kcqq40,
    relativeTime: _kcqq370
}, _kcqq394 = {
    format: _kcqq293,
    numeric: _kcqq2,
    standAlone: _kcqq293
}, _kcqq395 = {
    displayName: "mês",
    relative: _kcqq47,
    relativeTime: _kcqq371
}, _kcqq396 = {
    symbols: _kcqq390,
    digits: "renderSpelloutCardinal"
}, _kcqq397 = {
    abbreviated: _kcqq32,
    narrow: _kcqq19,
    wide: _kcqq193,
    "short": _kcqq32
}, _kcqq398 = {
    displayName: "setemane",
    relative: _kcqq41,
    relativeTime: _kcqq383
}, _kcqq399 = {
    "1000": {
        other: "0K"
    },
    "10000": {
        other: "00K"
    },
    "100000": {
        other: "000K"
    },
    "1000000": {
        other: "0M"
    },
    "10000000": {
        other: "00M"
    },
    "100000000": {
        other: "000M"
    },
    "1000000000": {
        other: "0G"
    },
    "10000000000": {
        other: "00G"
    },
    "100000000000": {
        other: "000G"
    },
    "1000000000000": {
        other: "0T"
    },
    "10000000000000": {
        other: "00T"
    },
    "100000000000000": {
        other: "000T"
    }
}, _kcqq400 = {
    symbols: _kcqq390,
    digits: "renderSpelloutCardinalFinancial"
}, _kcqq401 = {
    abbreviated: _kcqq313,
    narrow: _kcqq59,
    wide: _kcqq313
}, _kcqq402 = {
    displayName: "dì",
    relative: _kcqq152,
    relativeTime: _kcqq382
}, _kcqq403 = {
    abbreviated: _kcqq311,
    narrow: _kcqq46,
    wide: _kcqq368
}, _kcqq404 = {
    abbreviated: _kcqq326,
    narrow: _kcqq326,
    wide: _kcqq326
}, _kcqq405 = {
    format: _kcqq404
}, _kcqq406 = {
    abbreviated: _kcqq374,
    narrow: _kcqq72,
    wide: _kcqq374
}, _kcqq407 = {
    abbreviated: _kcqq376,
    narrow: _kcqq59,
    wide: _kcqq376
}, _kcqq408 = {
    format: _kcqq386,
    standAlone: _kcqq386
}, _kcqq409 = {
    abbreviated: _kcqq377,
    narrow: _kcqq72,
    wide: _kcqq377
}, _kcqq410 = {
    abbreviated: _kcqq372,
    narrow: _kcqq59,
    wide: _kcqq384
}, _kcqq411 = {
    abbreviated: _kcqq380,
    narrow: _kcqq72,
    wide: _kcqq380
}, _kcqq412 = {
    abbreviated: _kcqq381,
    narrow: _kcqq59,
    wide: _kcqq381
}, _kcqq413 = {
    fullDate: "r(U) MMMM d, EEEE",
    longDate: "r(U) MMMM d",
    mediumDate: "r MMM d",
    shortDate: "r-MM-dd",
    fullTime: "HH:mm:ss zzzz",
    longTime: "HH:mm:ss z",
    mediumTime: "HH:mm:ss",
    shortTime: "HH:mm",
    shortDateTime: "r-MM-dd HH:mm",
    mediumDateTime: "r MMM d HH:mm:ss",
    longDateTime: "r(U) MMMM d HH:mm:ss z",
    fullDateTime: "r(U) MMMM d, EEEE HH:mm:ss zzzz"
}, _kcqq414 = {
    fullDate: "EEEE d 'di' MMMM 'dal' y G",
    longDate: "d 'di' MMMM 'dal' y G",
    mediumDate: "dd/MM/y G",
    shortDate: "dd/MM/yy GGGGG",
    fullTime: "HH:mm:ss zzzz",
    longTime: "HH:mm:ss z",
    mediumTime: "HH:mm:ss",
    shortTime: "HH:mm",
    shortDateTime: "dd/MM/yy GGGGG HH:mm",
    mediumDateTime: "dd/MM/y G HH:mm:ss",
    longDateTime: "d 'di' MMMM 'dal' y G HH:mm:ss z",
    fullDateTime: "EEEE d 'di' MMMM 'dal' y G HH:mm:ss zzzz"
}, _kcqq415 = {
    "1000": _kcqq3,
    "10000": _kcqq10,
    "100000": _kcqq14,
    "1000000": _kcqq4,
    "10000000": _kcqq11,
    "100000000": _kcqq15,
    "1000000000": _kcqq5,
    "10000000000": _kcqq12,
    "100000000000": _kcqq16,
    "1000000000000": _kcqq6,
    "10000000000000": _kcqq13,
    "100000000000000": _kcqq17
}, _kcqq416 = {
    format: _kcqq397,
    standAlone: _kcqq397
}, _kcqq417 = {
    format: _kcqq401,
    standAlone: _kcqq401
}, _kcqq418 = {
    "long": _kcqq399,
    "short": _kcqq399,
    "default": "#,##0.###"
}, _kcqq419 = {
    d: "d",
    E: "ccc",
    Ed: "d, E",
    Gy: "r U",
    GyMMM: "r(U) MMM",
    GyMMMd: "r MMM d",
    GyMMMEd: "r(U) MMM d, E",
    h: "h a",
    H: "HH",
    hm: "h:mm a",
    Hm: "HH:mm",
    hms: "h:mm:ss a",
    Hms: "HH:mm:ss",
    M: "L",
    Md: "MM-dd",
    MEd: "MM-dd, E",
    MMM: "LLL",
    MMMd: "MMM d",
    MMMEd: "MMM d, E",
    MMMMd: "MMMM d",
    ms: "mm:ss",
    UM: "U MM",
    UMd: "U MM-d",
    UMMM: "U MMM",
    UMMMd: "U MMM d",
    y: "r(U)",
    yMd: "r-MM-dd",
    yyyy: "r(U)",
    yyyyM: "r-MM",
    yyyyMd: "r-MM-dd",
    yyyyMEd: "r-MM-dd, E",
    yyyyMMM: "r(U) MMM",
    yyyyMMMd: "r MMM d",
    yyyyMMMEd: "r(U) MMM d, E",
    yyyyMMMM: "r(U) MMMM",
    yyyyQQQ: "r(U) QQQ",
    yyyyQQQQ: "r(U) QQQQ"
}, _kcqq420 = {
    format: _kcqq403,
    standAlone: _kcqq403
}, _kcqq421 = {
    currencyMatch: /[^\u0024+<->\u005E`\u007C~¢-¦¨©¬®-±´¸×÷˂-˅˒-˟˥-˫˭˯-˿͵΄΅϶҂֏؆-؈؋؎؏۞۩۽۾߶৲৳৺৻૱୰௳-௺౿൹฿༁-༃༓༕-༗༚-༟༴༶༸྾-࿅࿇-࿌࿎࿏࿕-࿘႞႟᎐-᎙៛᥀᧞-᧿᭡-᭪᭴-᭼᾽᾿-῁῍-῏῝-῟῭-`´῾⁄⁒⁺-⁼₊-₌₠-₹℀℁℃-℆℈℉℔№-℘℞-℣℥℧℩℮℺℻⅀-⅄⅊-⅍⅏←-⌨⌫-⏳␀-␦⑀-⑊⒜-ⓩ─-⛿✁-❧➔-⟄⟇-⟥⟰-⦂⦙-⧗⧜-⧻⧾-⭌⭐-⭙⳥-⳪⺀-⺙⺛-⻳⼀-⿕⿰-⿻〄〒〓〠〶〷〾〿゛゜㆐㆑㆖-㆟㇀-㇣㈀-㈞㈪-㉇㉐㉠-㉿㊊-㊰㋀-㋾㌀-㏿䷀-䷿꒐-꓆꜀-꜖꜠꜡꞉꞊꠨-꠫꠶-꠹꩷-꩹﬩﮲-﯁﷼﷽﹢﹤-﹦﹩＄＋＜-＞＾｀｜～￠-￦￨-￮￼�]/,
    surroundingMatch: /[0-9²³¹¼-¾٠-٩۰-۹߀-߉०-९০-৯৴-৹੦-੯૦-૯୦-୯୲-୷௦-௲౦-౯౸-౾೦-೯൦-൵๐-๙໐-໙༠-༳၀-၉႐-႙፩-፼ᛮ-ᛰ០-៩៰-៹᠐-᠙᥆-᥏᧐-᧚᪀-᪉᪐-᪙᭐-᭙᮰-᮹᱀-᱉᱐-᱙⁰⁴-⁹₀-₉⅐-ↂↅ-↉①-⒛⓪-⓿❶-➓⳽〇〡-〩〸-〺㆒-㆕㈠-㈩㉈-㉏㉑-㉟㊀-㊉㊱-㊿꘠-꘩ꛦ-ꛯ꠰-꠵꣐-꣙꤀-꤉꧐-꧙꩐-꩙꯰-꯹０-９]/,
    insertBetween: " "
}, _kcqq422 = [ undefined, "jia-zi", "yi-chou", "bing-yin", "ding-mao", "wu-chen", "ji-si", "geng-wu", "xin-wei", "ren-shen", "gui-you", "jia-xu", "yi-hai", "bing-zi", "ding-chou", "wu-yin", "ji-mao", "geng-chen", "xin-si", "ren-wu", "gui-wei", "jia-shen", "yi-you", "bing-xu", "ding-hai", "wu-zi", "ji-chou", "geng-yin", "xin-mao", "ren-chen", "gui-si", "jia-wu", "yi-wei", "bing-shen", "ding-you", "wu-xu", "ji-hai", "geng-zi", "xin-chou", "ren-yin", "gui-mao", "jia-chen", "yi-si", "bing-wu", "ding-wei", "wu-shen", "ji-you", "geng-xu", "xin-hai", "ren-zi", "gui-chou", "jia-yin", "yi-mao", "bing-chen", "ding-si", "wu-wu", "ji-wei", "geng-shen", "xin-you", "ren-xu" ], _kcqq423 = {
    format: _kcqq410,
    standAlone: _kcqq410
}, _kcqq424 = {
    d: "d",
    Ed: "d E",
    Hm: "H:mm",
    M: "L",
    Md: "d/M",
    MEd: "E d/M",
    MMd: "d/MM",
    MMM: "LLL",
    MMMd: "d MMM",
    MMMEd: "E d MMM",
    MMMMd: "d 'di' MMMM",
    MMMMEd: "E d MMMM",
    ms: "mm:ss",
    y: "y",
    yM: "M/y",
    yMEd: "E, d/M/y",
    yMMM: "MMM y",
    yMMMEd: "E d MMM y",
    yMMMM: "LLLL 'dal' y",
    yQQQ: "QQQ y",
    yQQQQ: "QQQQ y",
    E: "ccc",
    Ehm: "E h:mm a",
    EHm: "E HH:mm",
    Ehms: "E h:mm:ss a",
    EHms: "E HH:mm:ss",
    Gy: "G y",
    GyMMM: "G y MMM",
    GyMMMd: "G y MMM d",
    GyMMMEd: "G y MMM d, E",
    h: "h a",
    H: "HH",
    hm: "h:mm a",
    hms: "h:mm:ss a",
    Hms: "HH:mm:ss",
    yyyy: "G y",
    yyyyM: "GGGGG y-MM",
    yyyyMd: "GGGGG y-MM-dd",
    yyyyMEd: "GGGGG y-MM-dd, E",
    yyyyMMM: "G y MMM",
    yyyyMMMd: "G y MMM d",
    yyyyMMMEd: "G y MMM d, E",
    yyyyMMMM: "G y MMMM",
    yyyyQQQ: "G y QQQ",
    yyyyQQQQ: "G y QQQQ"
}, _kcqq425 = {
    basic: _kcqq413,
    cldr: _kcqq419
}, _kcqq426 = {
    d: {
        d: "d–d"
    },
    h: _kcqq7,
    H: {
        H: "HH–HH"
    },
    hm: _kcqq60,
    Hm: _kcqq24,
    hmv: _kcqq78,
    Hmv: _kcqq28,
    hv: _kcqq18,
    Hv: {
        H: "HH–HH v"
    },
    M: {
        M: "M–M"
    },
    Md: _kcqq29,
    MEd: _kcqq36,
    MMM: {
        M: "LLL–LLL"
    },
    MMMd: _kcqq39,
    MMMEd: _kcqq68,
    y: {
        y: "y–y"
    },
    yM: _kcqq25,
    yMd: _kcqq246,
    yMEd: _kcqq339,
    yMMM: _kcqq21,
    yMMMd: _kcqq70,
    yMMMEd: _kcqq339,
    yMMMM: _kcqq21
}, _kcqq427 = {
    d: {
        d: "d–d"
    },
    h: _kcqq7,
    H: {
        H: "HH–HH"
    },
    hm: _kcqq60,
    Hm: _kcqq24,
    hmv: _kcqq78,
    Hmv: _kcqq28,
    hv: _kcqq18,
    Hv: {
        H: "HH–HH v"
    },
    M: {
        M: "MM–MM"
    },
    Md: _kcqq30,
    MEd: _kcqq48,
    MMM: {
        M: "LLL–LLL"
    },
    MMMd: _kcqq22,
    MMMEd: _kcqq49,
    y: {
        y: "U–U"
    },
    yM: _kcqq26,
    yMd: _kcqq247,
    yMEd: _kcqq360,
    yMMM: _kcqq27,
    yMMMd: _kcqq71,
    yMMMEd: _kcqq346,
    yMMMM: _kcqq31
}, _kcqq428 = {
    basic: _kcqq414,
    cldr: _kcqq424
}, _kcqq429 = {
    beforeCurrency: _kcqq421,
    afterCurrency: _kcqq421
}, _kcqq430 = {
    "short": _kcqq415,
    "default": "¤ #,##0.00",
    one: "{0} {1}",
    other: "{0} {1}",
    currencySpacing: _kcqq429
}, _kcqq431 = {
    abbreviated: _kcqq422,
    narrow: _kcqq422,
    wide: _kcqq422
}, _kcqq432 = {
    format: _kcqq431
}, _kcqq433 = {
    era: {
        displayName: "ere"
    },
    year: _kcqq393,
    month: _kcqq395,
    week: _kcqq398,
    day: _kcqq402,
    weekday: _kcqq20,
    dayperiod: _kcqq8,
    hour: _kcqq385,
    minute: _kcqq387,
    second: _kcqq389,
    zone: {
        displayName: "zone"
    },
    quarter: _kcqq388,
    sun: _kcqq119,
    mon: _kcqq120,
    tue: _kcqq222,
    wed: _kcqq300,
    thu: _kcqq277,
    fri: _kcqq121,
    sat: _kcqq278
}, _kcqq434 = {
    dateFormats: {
        basic: {},
        cldr: {}
    },
    fields: _kcqq433
}, _kcqq435 = {
    scientific: {
        "default": "#E0"
    },
    decimal: _kcqq418,
    currency: _kcqq430,
    percent: {
        "default": "#,##0%"
    }
}, _kcqq436 = [ "Taika (645–650)", "Hakuchi (650–671)", "Hakuhō (672–686)", "Shuchō (686–701)", "Taihō (701–704)", "Keiun (704–708)", "Wadō (708–715)", "Reiki (715–717)", "Yōrō (717–724)", "Jinki (724–729)", "Tenpyō (729–749)", "Tenpyō-kampō (749-749)", "Tenpyō-shōhō (749-757)", "Tenpyō-hōji (757-765)", "Tenpyō-jingo (765-767)", "Jingo-keiun (767-770)", "Hōki (770–780)", "Ten-ō (781-782)", "Enryaku (782–806)", "Daidō (806–810)", "Kōnin (810–824)", "Tenchō (824–834)", "Jōwa (834–848)", "Kajō (848–851)", "Ninju (851–854)", "Saikō (854–857)", "Ten-an (857-859)", "Jōgan (859–877)", "Gangyō (877–885)", "Ninna (885–889)", "Kanpyō (889–898)", "Shōtai (898–901)", "Engi (901–923)", "Enchō (923–931)", "Jōhei (931–938)", "Tengyō (938–947)", "Tenryaku (947–957)", "Tentoku (957–961)", "Ōwa (961–964)", "Kōhō (964–968)", "Anna (968–970)", "Tenroku (970–973)", "Ten’en (973–976)", "Jōgen (976–978)", "Tengen (978–983)", "Eikan (983–985)", "Kanna (985–987)", "Eien (987–989)", "Eiso (989–990)", "Shōryaku (990–995)", "Chōtoku (995–999)", "Chōhō (999–1004)", "Kankō (1004–1012)", "Chōwa (1012–1017)", "Kannin (1017–1021)", "Jian (1021–1024)", "Manju (1024–1028)", "Chōgen (1028–1037)", "Chōryaku (1037–1040)", "Chōkyū (1040–1044)", "Kantoku (1044–1046)", "Eishō (1046–1053)", "Tengi (1053–1058)", "Kōhei (1058–1065)", "Jiryaku (1065–1069)", "Enkyū (1069–1074)", "Shōho (1074–1077)", "Shōryaku (1077–1081)", "Eihō (1081–1084)", "Ōtoku (1084–1087)", "Kanji (1087–1094)", "Kahō (1094–1096)", "Eichō (1096–1097)", "Jōtoku (1097–1099)", "Kōwa (1099–1104)", "Chōji (1104–1106)", "Kashō (1106–1108)", "Tennin (1108–1110)", "Ten-ei (1110-1113)", "Eikyū (1113–1118)", "Gen’ei (1118–1120)", "Hōan (1120–1124)", "Tenji (1124–1126)", "Daiji (1126–1131)", "Tenshō (1131–1132)", "Chōshō (1132–1135)", "Hōen (1135–1141)", "Eiji (1141–1142)", "Kōji (1142–1144)", "Ten’yō (1144–1145)", "Kyūan (1145–1151)", "Ninpei (1151–1154)", "Kyūju (1154–1156)", "Hōgen (1156–1159)", "Heiji (1159–1160)", "Eiryaku (1160–1161)", "Ōho (1161–1163)", "Chōkan (1163–1165)", "Eiman (1165–1166)", "Nin’an (1166–1169)", "Kaō (1169–1171)", "Shōan (1171–1175)", "Angen (1175–1177)", "Jishō (1177–1181)", "Yōwa (1181–1182)", "Juei (1182–1184)", "Genryaku (1184–1185)", "Bunji (1185–1190)", "Kenkyū (1190–1199)", "Shōji (1199–1201)", "Kennin (1201–1204)", "Genkyū (1204–1206)", "Ken’ei (1206–1207)", "Jōgen (1207–1211)", "Kenryaku (1211–1213)", "Kenpō (1213–1219)", "Jōkyū (1219–1222)", "Jōō (1222–1224)", "Gennin (1224–1225)", "Karoku (1225–1227)", "Antei (1227–1229)", "Kanki (1229–1232)", "Jōei (1232–1233)", "Tenpuku (1233–1234)", "Bunryaku (1234–1235)", "Katei (1235–1238)", "Ryakunin (1238–1239)", "En’ō (1239–1240)", "Ninji (1240–1243)", "Kangen (1243–1247)", "Hōji (1247–1249)", "Kenchō (1249–1256)", "Kōgen (1256–1257)", "Shōka (1257–1259)", "Shōgen (1259–1260)", "Bun’ō (1260–1261)", "Kōchō (1261–1264)", "Bun’ei (1264–1275)", "Kenji (1275–1278)", "Kōan (1278–1288)", "Shōō (1288–1293)", "Einin (1293–1299)", "Shōan (1299–1302)", "Kengen (1302–1303)", "Kagen (1303–1306)", "Tokuji (1306–1308)", "Enkyō (1308–1311)", "Ōchō (1311–1312)", "Shōwa (1312–1317)", "Bunpō (1317–1319)", "Genō (1319–1321)", "Genkō (1321–1324)", "Shōchū (1324–1326)", "Karyaku (1326–1329)", "Gentoku (1329–1331)", "Genkō (1331–1334)", "Kenmu (1334–1336)", "Engen (1336–1340)", "Kōkoku (1340–1346)", "Shōhei (1346–1370)", "Kentoku (1370–1372)", "Bunchū (1372–1375)", "Tenju (1375–1379)", "Kōryaku (1379–1381)", "Kōwa (1381–1384)", "Genchū (1384–1392)", "Meitoku (1384–1387)", "Kakei (1387–1389)", "Kōō (1389–1390)", "Meitoku (1390–1394)", "Ōei (1394–1428)", "Shōchō (1428–1429)", "Eikyō (1429–1441)", "Kakitsu (1441–1444)", "Bun’an (1444–1449)", "Hōtoku (1449–1452)", "Kyōtoku (1452–1455)", "Kōshō (1455–1457)", "Chōroku (1457–1460)", "Kanshō (1460–1466)", "Bunshō (1466–1467)", "Ōnin (1467–1469)", "Bunmei (1469–1487)", "Chōkyō (1487–1489)", "Entoku (1489–1492)", "Meiō (1492–1501)", "Bunki (1501–1504)", "Eishō (1504–1521)", "Taiei (1521–1528)", "Kyōroku (1528–1532)", "Tenbun (1532–1555)", "Kōji (1555–1558)", "Eiroku (1558–1570)", "Genki (1570–1573)", "Tenshō (1573–1592)", "Bunroku (1592–1596)", "Keichō (1596–1615)", "Genna (1615–1624)", "Kan’ei (1624–1644)", "Shōho (1644–1648)", "Keian (1648–1652)", "Jōō (1652–1655)", "Meireki (1655–1658)", "Manji (1658–1661)", "Kanbun (1661–1673)", "Enpō (1673–1681)", "Tenna (1681–1684)", "Jōkyō (1684–1688)", "Genroku (1688–1704)", "Hōei (1704–1711)", "Shōtoku (1711–1716)", "Kyōhō (1716–1736)", "Genbun (1736–1741)", "Kanpō (1741–1744)", "Enkyō (1744–1748)", "Kan’en (1748–1751)", "Hōreki (1751–1764)", "Meiwa (1764–1772)", "An’ei (1772–1781)", "Tenmei (1781–1789)", "Kansei (1789–1801)", "Kyōwa (1801–1804)", "Bunka (1804–1818)", "Bunsei (1818–1830)", "Tenpō (1830–1844)", "Kōka (1844–1848)", "Kaei (1848–1854)", "Ansei (1854–1860)", "Man’en (1860–1861)", "Bunkyū (1861–1864)", "Genji (1864–1865)", "Keiō (1865–1868)", "Meiji", "Taishō", "Shōwa", "Heisei" ], _kcqq437 = {
    dateFormats: _kcqq428,
    datePartsOrder: "dmy",
    dateIntervalFormats: _kcqq426,
    dateIntervalFallbackFormat: "{0} – {1}",
    dayNames: _kcqq416,
    dayPeriods: _kcqq391,
    monthNames: _kcqq423,
    eraNames: _kcqq23,
    quarterNames: _kcqq408,
    fields: _kcqq433
}, _kcqq438 = {
    dayParts: _kcqq405,
    days: _kcqq432,
    months: _kcqq432,
    years: _kcqq432,
    zodiacs: _kcqq405
}, _kcqq439 = {
    dateFormats: _kcqq425,
    datePartsOrder: "md",
    dateIntervalFormats: _kcqq427,
    dateIntervalFallbackFormat: "{0} – {1}",
    dayNames: _kcqq416,
    dayPeriods: _kcqq391,
    cyclicNames: _kcqq438,
    monthNames: _kcqq417,
    monthPatterns: _kcqq394,
    quarterNames: _kcqq408,
    fields: _kcqq433
};

inter.id = "fur";

inter.delimiters = {
    quotationStart: "‘",
    quotationEnd: "’",
    alternateQuotationStart: "“",
    alternateQuotationEnd: "”"
};

inter.listPatterns = {
    "default": {
        "2": "{0} e {1}",
        end: "{0} e {1}",
        start: "{0}, {1}",
        middle: "{0}, {1}"
    }
};

inter.unitPatterns = {
    "long": {
        unit: {
            durationYear: {
                one: "{0} an",
                other: "{0} agns"
            },
            durationMonth: {
                one: "{0} mês",
                other: "{0} mês"
            },
            durationWeek: {
                one: "{0} setemane",
                other: "{0} setemanis"
            },
            durationDay: {
                one: "{0} zornade",
                other: "{0} zornadis"
            },
            durationHour: {
                one: "{0} ore",
                other: "{0} oris"
            },
            durationMinute: {
                one: "{0} minût",
                other: "{0} minûts"
            },
            durationSecond: {
                one: "{0} secont",
                other: "{0} seconts"
            }
        }
    },
    "short": P.unitPatterns.short
};

inter.characters = {
    exemplar: {
        "default": [ "a", "à", "â", "b", "c", "ç", "d", "e", "è", "ê", "f", "g", "h", "i", "ì", "î", "j", "k", "l", "m", "n", "o", "ò", "ô", "p", "q", "r", "s", "t", "u", "ù", "û", "v", "w", "x", "y", "z" ],
        auxiliary: [ "å", "č", "é", "ë", "ğ", "ï", "ñ", "ó", "š", "ü" ],
        index: [ "A", "B", "C", "Ç", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z" ],
        punctuation: [ "\\-", ",", ";", "\\:", "!", "?", ".", "(", ")", "\\[", "\\]", "\\{", "\\}" ]
    },
    ellipsis: {
        "final": "{0}…",
        initial: "…{0}",
        medial: "{0}…{1}",
        "word-final": "{0} …",
        "word-initial": "… {0}",
        "word-medial": "{0} … {1}"
    },
    moreInformation: "?"
};

inter.numbers = {
    ahom: {
        symbols: _kcqq390,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    arab: {
        symbols: P.numbers.ahom.symbols,
        formats: _kcqq435,
        digits: [ "٠", "١", "٢", "٣", "٤", "٥", "٦", "٧", "٨", "٩" ]
    },
    arabext: {
        symbols: {
            decimal: "٫",
            group: "٬",
            list: "؛",
            percentSign: "٪",
            plusSign: "‎+‎",
            minusSign: "‎-‎",
            exponential: "×۱۰^",
            superscriptingExponent: "×",
            perMille: "؉",
            infinity: "∞",
            nan: "NaN",
            timeSeparator: "٫"
        },
        formats: _kcqq435,
        digits: [ "۰", "۱", "۲", "۳", "۴", "۵", "۶", "۷", "۸", "۹" ]
    },
    armn: {
        symbols: _kcqq390,
        digits: "renderArmenianUpper"
    },
    armnlow: {
        symbols: _kcqq390,
        digits: "renderArmenianLower"
    },
    bali: {
        symbols: _kcqq390,
        formats: _kcqq435,
        digits: [ "᭐", "᭑", "᭒", "᭓", "᭔", "᭕", "᭖", "᭗", "᭘", "᭙" ]
    },
    beng: {
        symbols: _kcqq390,
        formats: _kcqq435,
        digits: [ "০", "১", "২", "৩", "৪", "৫", "৬", "৭", "৮", "৯" ]
    },
    brah: {
        symbols: _kcqq390,
        formats: _kcqq435,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    cakm: {
        symbols: _kcqq390,
        formats: _kcqq435,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    cham: {
        symbols: _kcqq390,
        formats: _kcqq435,
        digits: [ "꩐", "꩑", "꩒", "꩓", "꩔", "꩕", "꩖", "꩗", "꩘", "꩙" ]
    },
    cyrl: {
        symbols: _kcqq390,
        digits: "renderCyrillicLower"
    },
    deva: {
        symbols: _kcqq390,
        formats: _kcqq435,
        digits: [ "०", "१", "२", "३", "४", "५", "६", "७", "८", "९" ]
    },
    ethi: {
        symbols: _kcqq390,
        digits: "renderEthiopic"
    },
    finance: _kcqq392,
    fullwide: {
        symbols: _kcqq390,
        formats: _kcqq435,
        digits: [ "０", "１", "２", "３", "４", "５", "６", "７", "８", "９" ]
    },
    geor: {
        symbols: _kcqq390,
        digits: "renderGeorgian"
    },
    grek: {
        symbols: _kcqq390,
        digits: "renderGreekUpper"
    },
    greklow: {
        symbols: _kcqq390,
        digits: "renderGreekLower"
    },
    gujr: {
        symbols: _kcqq390,
        formats: _kcqq435,
        digits: [ "૦", "૧", "૨", "૩", "૪", "૫", "૬", "૭", "૮", "૯" ]
    },
    guru: {
        symbols: _kcqq390,
        formats: _kcqq435,
        digits: [ "੦", "੧", "੨", "੩", "੪", "੫", "੬", "੭", "੮", "੯" ]
    },
    hanidays: {
        symbols: _kcqq390,
        digits: "renderSpelloutNumberingDays"
    },
    hanidec: {
        symbols: _kcqq390,
        formats: _kcqq435,
        digits: [ "〇", "一", "二", "三", "四", "五", "六", "七", "八", "九" ]
    },
    hans: _kcqq396,
    hansfin: _kcqq400,
    hant: _kcqq396,
    hantfin: _kcqq400,
    hebr: {
        symbols: _kcqq390,
        digits: "renderHebrew"
    },
    hmng: {
        symbols: _kcqq390,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    java: {
        symbols: _kcqq390,
        formats: _kcqq435,
        digits: [ "꧐", "꧑", "꧒", "꧓", "꧔", "꧕", "꧖", "꧗", "꧘", "꧙" ]
    },
    jpan: _kcqq396,
    jpanfin: _kcqq400,
    kali: {
        symbols: _kcqq390,
        formats: _kcqq435,
        digits: [ "꤀", "꤁", "꤂", "꤃", "꤄", "꤅", "꤆", "꤇", "꤈", "꤉" ]
    },
    khmr: {
        symbols: _kcqq390,
        formats: _kcqq435,
        digits: [ "០", "១", "២", "៣", "៤", "៥", "៦", "៧", "៨", "៩" ]
    },
    knda: {
        symbols: _kcqq390,
        formats: _kcqq435,
        digits: [ "೦", "೧", "೨", "೩", "೪", "೫", "೬", "೭", "೮", "೯" ]
    },
    lana: {
        symbols: _kcqq390,
        formats: _kcqq435,
        digits: [ "᪀", "᪁", "᪂", "᪃", "᪄", "᪅", "᪆", "᪇", "᪈", "᪉" ]
    },
    lanatham: {
        symbols: _kcqq390,
        formats: _kcqq435,
        digits: [ "᪐", "᪑", "᪒", "᪓", "᪔", "᪕", "᪖", "᪗", "᪘", "᪙" ]
    },
    laoo: {
        symbols: _kcqq390,
        formats: _kcqq435,
        digits: [ "໐", "໑", "໒", "໓", "໔", "໕", "໖", "໗", "໘", "໙" ]
    },
    latn: {
        symbols: _kcqq390,
        formats: _kcqq435,
        digits: [ "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" ]
    },
    lepc: {
        symbols: _kcqq390,
        formats: _kcqq435,
        digits: [ "᱀", "᱁", "᱂", "᱃", "᱄", "᱅", "᱆", "᱇", "᱈", "᱉" ]
    },
    limb: {
        symbols: _kcqq390,
        formats: _kcqq435,
        digits: [ "᥆", "᥇", "᥈", "᥉", "᥊", "᥋", "᥌", "᥍", "᥎", "᥏" ]
    },
    mathbold: {
        symbols: _kcqq390,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathdbl: {
        symbols: _kcqq390,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathmono: {
        symbols: _kcqq390,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathsanb: {
        symbols: _kcqq390,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathsans: {
        symbols: _kcqq390,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mlym: {
        symbols: _kcqq390,
        formats: _kcqq435,
        digits: [ "൦", "൧", "൨", "൩", "൪", "൫", "൬", "൭", "൮", "൯" ]
    },
    modi: {
        symbols: _kcqq390,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mong: {
        symbols: _kcqq390,
        formats: _kcqq435,
        digits: [ "᠐", "᠑", "᠒", "᠓", "᠔", "᠕", "᠖", "᠗", "᠘", "᠙" ]
    },
    mroo: {
        symbols: _kcqq390,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mtei: {
        symbols: _kcqq390,
        formats: _kcqq435,
        digits: [ "꯰", "꯱", "꯲", "꯳", "꯴", "꯵", "꯶", "꯷", "꯸", "꯹" ]
    },
    mymr: {
        symbols: _kcqq390,
        formats: _kcqq435,
        digits: [ "၀", "၁", "၂", "၃", "၄", "၅", "၆", "၇", "၈", "၉" ]
    },
    mymrshan: {
        symbols: _kcqq390,
        formats: _kcqq435,
        digits: [ "႐", "႑", "႒", "႓", "႔", "႕", "႖", "႗", "႘", "႙" ]
    },
    mymrtlng: {
        symbols: _kcqq390,
        digits: [ "꧰", "꧱", "꧲", "꧳", "꧴", "꧵", "꧶", "꧷", "꧸", "꧹" ]
    },
    "native": _kcqq392,
    nkoo: {
        symbols: _kcqq390,
        formats: _kcqq435,
        digits: [ "߀", "߁", "߂", "߃", "߄", "߅", "߆", "߇", "߈", "߉" ]
    },
    olck: {
        symbols: _kcqq390,
        formats: _kcqq435,
        digits: [ "᱐", "᱑", "᱒", "᱓", "᱔", "᱕", "᱖", "᱗", "᱘", "᱙" ]
    },
    orya: {
        symbols: _kcqq390,
        formats: _kcqq435,
        digits: [ "୦", "୧", "୨", "୩", "୪", "୫", "୬", "୭", "୮", "୯" ]
    },
    osma: {
        symbols: _kcqq390,
        formats: _kcqq435,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    roman: {
        symbols: _kcqq390,
        digits: "renderRomanUpper"
    },
    romanlow: {
        symbols: _kcqq390,
        digits: "renderRomanLower"
    },
    saur: {
        symbols: _kcqq390,
        formats: _kcqq435,
        digits: [ "꣐", "꣑", "꣒", "꣓", "꣔", "꣕", "꣖", "꣗", "꣘", "꣙" ]
    },
    shrd: {
        symbols: _kcqq390,
        formats: _kcqq435,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    sind: {
        symbols: _kcqq390,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    sinh: {
        symbols: _kcqq390,
        digits: [ "෦", "෧", "෨", "෩", "෪", "෫", "෬", "෭", "෮", "෯" ]
    },
    sora: {
        symbols: _kcqq390,
        formats: _kcqq435,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    sund: {
        symbols: _kcqq390,
        formats: _kcqq435,
        digits: [ "᮰", "᮱", "᮲", "᮳", "᮴", "᮵", "᮶", "᮷", "᮸", "᮹" ]
    },
    takr: {
        symbols: _kcqq390,
        formats: _kcqq435,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    talu: {
        symbols: _kcqq390,
        formats: _kcqq435,
        digits: [ "᧐", "᧑", "᧒", "᧓", "᧔", "᧕", "᧖", "᧗", "᧘", "᧙" ]
    },
    taml: {
        symbols: _kcqq390,
        digits: "renderTamil"
    },
    tamldec: {
        symbols: _kcqq390,
        formats: _kcqq435,
        digits: [ "௦", "௧", "௨", "௩", "௪", "௫", "௬", "௭", "௮", "௯" ]
    },
    telu: {
        symbols: _kcqq390,
        formats: _kcqq435,
        digits: [ "౦", "౧", "౨", "౩", "౪", "౫", "౬", "౭", "౮", "౯" ]
    },
    thai: {
        symbols: _kcqq390,
        formats: _kcqq435,
        digits: [ "๐", "๑", "๒", "๓", "๔", "๕", "๖", "๗", "๘", "๙" ]
    },
    tirh: {
        symbols: _kcqq390,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    tibt: {
        symbols: _kcqq390,
        formats: _kcqq435,
        digits: [ "༠", "༡", "༢", "༣", "༤", "༥", "༦", "༧", "༨", "༩" ]
    },
    traditio: _kcqq392,
    vaii: {
        symbols: _kcqq390,
        formats: _kcqq435,
        digits: [ "꘠", "꘡", "꘢", "꘣", "꘤", "꘥", "꘦", "꘧", "꘨", "꘩" ]
    },
    wara: {
        symbols: _kcqq390,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    }
};

inter.calendars = {
    buddhist: {
        dateFormats: _kcqq428,
        datePartsOrder: "dmy",
        dateIntervalFormats: _kcqq426,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _kcqq416,
        dayPeriods: _kcqq391,
        monthNames: _kcqq420,
        eraNames: {
            wide: [ "BE" ],
            abbreviated: [ "BE" ]
        },
        quarterNames: _kcqq408,
        fields: _kcqq433
    },
    chinese: _kcqq439,
    coptic: {
        dateFormats: _kcqq428,
        datePartsOrder: "dmy",
        dateIntervalFormats: _kcqq426,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _kcqq416,
        dayPeriods: _kcqq391,
        monthNames: {
            format: _kcqq409,
            standAlone: _kcqq409
        },
        eraNames: _kcqq52,
        quarterNames: _kcqq408,
        fields: _kcqq433
    },
    dangi: _kcqq439,
    ethioaa: _kcqq434,
    ethiopic: {
        dateFormats: _kcqq428,
        datePartsOrder: "dmy",
        dateIntervalFormats: _kcqq426,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _kcqq416,
        dayPeriods: _kcqq391,
        monthNames: {
            format: _kcqq411,
            standAlone: _kcqq411
        },
        eraNames: _kcqq52,
        quarterNames: _kcqq408,
        fields: _kcqq433
    },
    gregorian: {
        dateFormats: {
            basic: {
                fullDate: "EEEE d 'di' MMMM 'dal' y",
                longDate: "d 'di' MMMM 'dal' y",
                mediumDate: "dd/MM/y",
                shortDate: "dd/MM/yy",
                fullTime: "HH:mm:ss zzzz",
                longTime: "HH:mm:ss z",
                mediumTime: "HH:mm:ss",
                shortTime: "HH:mm",
                shortDateTime: "dd/MM/yy HH:mm",
                mediumDateTime: "dd/MM/y HH:mm:ss",
                longDateTime: "d 'di' MMMM 'dal' y HH:mm:ss z",
                fullDateTime: "EEEE d 'di' MMMM 'dal' y HH:mm:ss zzzz"
            },
            cldr: {
                d: "d",
                Ed: "d E",
                Hm: "H:mm",
                M: "L",
                Md: "d/M",
                MEd: "E d/M",
                MMd: "d/MM",
                MMM: "LLL",
                MMMd: "d MMM",
                MMMEd: "E d MMM",
                MMMMd: "d 'di' MMMM",
                MMMMEd: "E d MMMM",
                ms: "mm:ss",
                y: "y",
                yM: "M/y",
                yMEd: "E, d/M/y",
                yMMM: "MMM y",
                yMMMEd: "E d MMM y",
                yMMMM: "LLLL 'dal' y",
                yQQQ: "QQQ y",
                yQQQQ: "QQQQ y",
                E: "ccc",
                Ehm: "E h:mm a",
                EHm: "E HH:mm",
                Ehms: "E h:mm:ss a",
                EHms: "E HH:mm:ss",
                Gy: "G y",
                GyMMM: "G y MMM",
                GyMMMd: "G y MMM d",
                GyMMMEd: "G y MMM d, E",
                h: "h a",
                H: "HH",
                hm: "h:mm a",
                hms: "h:mm:ss a",
                Hms: "HH:mm:ss",
                hmsv: "h:mm:ss a v",
                Hmsv: "HH:mm:ss v",
                hmv: "h:mm a v",
                Hmv: "HH:mm v",
                yMd: "y-MM-dd",
                yMMMd: "y MMM d"
            }
        },
        datePartsOrder: "dmy",
        dateIntervalFormats: _kcqq426,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _kcqq416,
        dayPeriods: _kcqq391,
        monthNames: _kcqq420,
        eraNames: {
            wide: [ "pdC", "ddC" ],
            abbreviated: [ "pdC", "ddC" ]
        },
        quarterNames: _kcqq408,
        fields: _kcqq433
    },
    hebrew: {
        dateFormats: _kcqq428,
        datePartsOrder: "dmy",
        dateIntervalFormats: _kcqq426,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _kcqq416,
        dayPeriods: _kcqq391,
        monthNames: {
            format: _kcqq406,
            standAlone: _kcqq406
        },
        eraNames: {
            wide: [ "AM" ],
            abbreviated: [ "AM" ]
        },
        quarterNames: _kcqq408,
        fields: _kcqq433
    },
    indian: {
        dateFormats: _kcqq428,
        datePartsOrder: "dmy",
        dateIntervalFormats: _kcqq426,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _kcqq416,
        dayPeriods: _kcqq391,
        monthNames: {
            format: _kcqq412,
            standAlone: _kcqq412
        },
        eraNames: {
            wide: [ "Saka" ],
            abbreviated: [ "Saka" ]
        },
        quarterNames: _kcqq408,
        fields: _kcqq433
    },
    islamic: _kcqq437,
    "islamic-umalqura": _kcqq437,
    "islamic-tbla": _kcqq437,
    "islamic-civil": _kcqq437,
    "islamic-rgsa": _kcqq437,
    iso8601: _kcqq434,
    japanese: {
        dateFormats: _kcqq428,
        datePartsOrder: "dmy",
        dateIntervalFormats: _kcqq426,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _kcqq416,
        dayPeriods: _kcqq391,
        monthNames: _kcqq420,
        eraNames: {
            wide: _kcqq436,
            abbreviated: _kcqq436
        },
        quarterNames: _kcqq408,
        fields: _kcqq433
    },
    persian: {
        dateFormats: _kcqq428,
        datePartsOrder: "dmy",
        dateIntervalFormats: _kcqq426,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _kcqq416,
        dayPeriods: _kcqq391,
        monthNames: {
            format: _kcqq407,
            standAlone: _kcqq407
        },
        eraNames: {
            wide: [ "AP" ],
            abbreviated: [ "AP" ]
        },
        quarterNames: _kcqq408,
        fields: _kcqq433
    },
    roc: {
        dateFormats: _kcqq428,
        datePartsOrder: "dmy",
        dateIntervalFormats: _kcqq426,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _kcqq416,
        dayPeriods: _kcqq391,
        monthNames: _kcqq420,
        eraNames: {
            wide: _kcqq9,
            abbreviated: _kcqq9
        },
        quarterNames: _kcqq408,
        fields: _kcqq433
    },
    islamicc: _kcqq434
};

inter.pluralRule = function(n) {
    if (typeof n === "string") n = parseInt(n, 10);
    if (n === 1) return "one";
    return "other";
};

inter.renderDigitsOrdinal = function(n) {
    if (n < 0) return "−" + this.renderDigitsOrdinal(-n);
    if (n >= 0) return this.renderNumber(n, "#,##0") + ".";
};

inter.renderSpelloutNumbering = function(n) {
    if (n < 0) return "−" + this.renderSpelloutNumbering(-n);
    if (n >= 0) return this.renderNumber(n, "#,##0.#");
};

inter.renderArmenianUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderArmenianUpper(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e4) return this.renderNumber(n, "#,##0");
    if (n >= 9e3) return "Ք" + (n === 9e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 8e3) return "Փ" + (n === 8e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 7e3) return "Ւ" + (n === 7e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 6e3) return "Ց" + (n === 6e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 5e3) return "Ր" + (n === 5e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 4e3) return "Տ" + (n === 4e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 3e3) return "Վ" + (n === 3e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 2e3) return "Ս" + (n === 2e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 1e3) return "Ռ" + (n === 1e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 900) return "Ջ" + (n === 900 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 800) return "Պ" + (n === 800 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 700) return "Չ" + (n === 700 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 600) return "Ո" + (n === 600 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 500) return "Շ" + (n === 500 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 400) return "Ն" + (n === 400 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 300) return "Յ" + (n === 300 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 200) return "Մ" + (n === 200 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 100) return "Ճ" + (n === 100 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 90) return "Ղ" + (n === 90 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 80) return "Ձ" + (n === 80 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 70) return "Հ" + (n === 70 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 60) return "Կ" + (n === 60 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 50) return "Ծ" + (n === 50 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 40) return "Խ" + (n === 40 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 30) return "Լ" + (n === 30 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 20) return "Ի" + (n === 20 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 10) return "Ժ" + (n === 10 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 9) return "Թ";
    if (n >= 8) return "Ը";
    if (n >= 7) return "Է";
    if (n >= 6) return "Զ";
    if (n >= 5) return "Ե";
    if (n >= 4) return "Դ";
    if (n >= 3) return "Գ";
    if (n >= 2) return "Բ";
    if (n >= 1) return "Ա";
    if (n >= 0) return "0";
};

inter.renderArmenianLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderArmenianLower(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e4) return this.renderNumber(n, "#,##0");
    if (n >= 9e3) return "ք" + (n === 9e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 8e3) return "փ" + (n === 8e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 7e3) return "ւ" + (n === 7e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 6e3) return "ց" + (n === 6e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 5e3) return "ր" + (n === 5e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 4e3) return "տ" + (n === 4e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 3e3) return "վ" + (n === 3e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 2e3) return "ս" + (n === 2e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 1e3) return "ռ" + (n === 1e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 900) return "ջ" + (n === 900 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 800) return "պ" + (n === 800 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 700) return "չ" + (n === 700 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 600) return "ո" + (n === 600 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 500) return "շ" + (n === 500 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 400) return "ն" + (n === 400 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 300) return "յ" + (n === 300 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 200) return "մ" + (n === 200 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 100) return "ճ" + (n === 100 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 90) return "ղ" + (n === 90 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 80) return "ձ" + (n === 80 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 70) return "հ" + (n === 70 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 60) return "կ" + (n === 60 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 50) return "ծ" + (n === 50 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 40) return "խ" + (n === 40 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 30) return "լ" + (n === 30 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 20) return "ի" + (n === 20 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 10) return "ժ" + (n === 10 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 9) return "թ";
    if (n >= 8) return "ը";
    if (n >= 7) return "է";
    if (n >= 6) return "զ";
    if (n >= 5) return "ե";
    if (n >= 4) return "դ";
    if (n >= 3) return "գ";
    if (n >= 2) return "բ";
    if (n >= 1) return "ա";
    if (n >= 0) return "0";
};

inter.renderCyrillicLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderCyrillicLower(-n);
    if (isFractional && n > 1) return this.renderCyrillicLower(Math.floor(n)) + "." + this.renderCyrillicLower(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e15) return "҂҂҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e15)) + (n === 1e15 ? "" : " " + this.renderCyrillicLower(n % 1e15));
    if (n >= 1e12) return "҂҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e12)) + (n === 1e12 ? "" : " " + this.renderCyrillicLower(n % 1e12));
    if (n >= 1e9) return "҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e9)) + (n === 1e9 ? "" : " " + this.renderCyrillicLower(n % 1e9));
    if (n >= 1e6) return "҂҂" + this.renderCyrillicLower(Math.floor(n / 1e6)) + (n === 1e6 ? "" : " " + this.renderCyrillicLower(n % 1e6));
    if (n >= 11e3) return this.renderCyrillicLowerThousands(Math.floor(n / 1e4)) + (n === 11e3 ? "" : " " + this.renderCyrillicLower(n % 1e4));
    if (n >= 1e4) return "҂" + this.renderCyrillicLower(Math.floor(n / 1e4)) + (n === 1e4 ? "" : " " + this.renderCyrillicLower(n % 1e4));
    if (n >= 1e3) return "҂" + this.renderCyrillicLower110(Math.floor(n / 1e3)) + this.renderCyrillicLowerPost(n % 1e3);
    if (n >= 900) return "ц" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 801) return "ѿ" + this.renderCyrillicLower(n % 100);
    if (n >= 800) return "ѿ҃";
    if (n >= 700) return "ѱ" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 600) return "х" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 500) return "ф" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 400) return "у" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 300) return "т" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 200) return "с" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 100) return "р" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 90) return "ч" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 80) return "п" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 70) return "ѻ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 60) return "ѯ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 50) return "н" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 40) return "м" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 30) return "л" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 20) return "к" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 19) return "ѳ҃і";
    if (n >= 18) return "и҃і";
    if (n >= 17) return "з҃і";
    if (n >= 16) return "ѕ҃і";
    if (n >= 15) return "є҃і";
    if (n >= 14) return "д҃і";
    if (n >= 13) return "г҃і";
    if (n >= 12) return "в҃і";
    if (n >= 11) return "а҃і";
    if (n >= 1) return this.renderCyrillicLower110(n) + "҃";
    if (n >= 0) return "0҃";
};

inter.renderEthiopic = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderEthiopic(-n);
    if (isFractional && n > 1) return this.renderEthiopic(Math.floor(n)) + "፡" + this.renderEthiopic(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,###0");
    if (n >= 2e16) return this.renderEthiopic(Math.floor(n / 1e16)) + "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 1e16) return "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 2e12) return this.renderEthiopic(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1e12) return "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 2e8) return this.renderEthiopic(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1e8) return "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 2e4) return this.renderEthiopic(Math.floor(n / 1e4)) + "፼" + (n === 2e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 1e4) return "፼" + (n === 1e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 200) return this.renderEthiopic(Math.floor(n / 100)) + "፻" + (n === 200 ? "" : this.renderEthiopic(n % 100));
    if (n >= 100) return "፻" + (n === 100 ? "" : this.renderEthiopic(n % 100));
    if (n >= 90) return "፺" + (n === 90 ? "" : this.renderEthiopic(n % 10));
    if (n >= 80) return "፹" + (n === 80 ? "" : this.renderEthiopic(n % 10));
    if (n >= 70) return "፸" + (n === 70 ? "" : this.renderEthiopic(n % 10));
    if (n >= 60) return "፷" + (n === 60 ? "" : this.renderEthiopic(n % 10));
    if (n >= 50) return "፶" + (n === 50 ? "" : this.renderEthiopic(n % 10));
    if (n >= 40) return "፵" + (n === 40 ? "" : this.renderEthiopic(n % 10));
    if (n >= 30) return "፴" + (n === 30 ? "" : this.renderEthiopic(n % 10));
    if (n >= 20) return "፳" + (n === 20 ? "" : this.renderEthiopic(n % 10));
    if (n >= 10) return "፲" + (n === 10 ? "" : this.renderEthiopic(n % 10));
    if (n >= 9) return "፱";
    if (n >= 8) return "፰";
    if (n >= 7) return "፯";
    if (n >= 6) return "፮";
    if (n >= 5) return "፭";
    if (n >= 4) return "፬";
    if (n >= 3) return "፫";
    if (n >= 2) return "፪";
    if (n >= 1) return "፩";
    if (n >= 0) return "ባዶ";
};

inter.renderGeorgian = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGeorgian(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 2e4) return this.renderNumber(n, "#,##0");
    if (n >= 1e4) return "ჯ" + (n === 1e4 ? "" : this.renderGeorgian(n % 1e4));
    if (n >= 9e3) return "ჵ" + (n === 9e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 8e3) return "ჴ" + (n === 8e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 7e3) return "ხ" + (n === 7e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 6e3) return "ჭ" + (n === 6e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 5e3) return "წ" + (n === 5e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 4e3) return "ძ" + (n === 4e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 3e3) return "ც" + (n === 3e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 2e3) return "ჩ" + (n === 2e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 1e3) return "შ" + (n === 1e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 900) return "ყ" + (n === 900 ? "" : this.renderGeorgian(n % 100));
    if (n >= 800) return "ღ" + (n === 800 ? "" : this.renderGeorgian(n % 100));
    if (n >= 700) return "ქ" + (n === 700 ? "" : this.renderGeorgian(n % 100));
    if (n >= 600) return "ფ" + (n === 600 ? "" : this.renderGeorgian(n % 100));
    if (n >= 500) return "ჳ" + (n === 500 ? "" : this.renderGeorgian(n % 100));
    if (n >= 400) return "უ" + (n === 400 ? "" : this.renderGeorgian(n % 100));
    if (n >= 300) return "ტ" + (n === 300 ? "" : this.renderGeorgian(n % 100));
    if (n >= 200) return "ს" + (n === 200 ? "" : this.renderGeorgian(n % 100));
    if (n >= 100) return "რ" + (n === 100 ? "" : this.renderGeorgian(n % 100));
    if (n >= 90) return "ჟ" + (n === 90 ? "" : this.renderGeorgian(n % 10));
    if (n >= 80) return "პ" + (n === 80 ? "" : this.renderGeorgian(n % 10));
    if (n >= 70) return "ო" + (n === 70 ? "" : this.renderGeorgian(n % 10));
    if (n >= 60) return "ჲ" + (n === 60 ? "" : this.renderGeorgian(n % 10));
    if (n >= 50) return "ნ" + (n === 50 ? "" : this.renderGeorgian(n % 10));
    if (n >= 40) return "მ" + (n === 40 ? "" : this.renderGeorgian(n % 10));
    if (n >= 30) return "ლ" + (n === 30 ? "" : this.renderGeorgian(n % 10));
    if (n >= 20) return "კ" + (n === 20 ? "" : this.renderGeorgian(n % 10));
    if (n >= 10) return "ი" + (n === 10 ? "" : this.renderGeorgian(n % 10));
    if (n >= 9) return "თ";
    if (n >= 8) return "ჱ";
    if (n >= 7) return "ზ";
    if (n >= 6) return "ვ";
    if (n >= 5) return "ე";
    if (n >= 4) return "დ";
    if (n >= 3) return "გ";
    if (n >= 2) return "ბ";
    if (n >= 1) return "ა";
    if (n >= 0) return this.renderNumber(n, "#,##0");
};

inter.renderGreekUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGreekUpper(-n);
    if (isFractional && n > 1) return this.renderGreekUpper(Math.floor(n)) + "." + this.renderGreekUpper(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 0) return this.renderGreekNumeralMajuscules(n) + "´";
};

inter.renderGreekLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGreekLower(-n);
    if (isFractional && n > 1) return this.renderGreekLower(Math.floor(n)) + "." + this.renderGreekLower(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 0) return this.renderGreekNumeralMinuscules(n) + "´";
};

inter.renderSpelloutCardinal = function(n) {
    if (n < 0) return "−" + this.renderSpelloutCardinal(-n);
    if (n >= 0) return this.renderNumber(n, "#,##0.#");
};

inter.renderHebrew = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderHebrew(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1000001) return this.renderNumber(n, "#,##0");
    if (n >= 1e6) return "אלף אלפים";
    if (n >= 3001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 3001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 3e3) return this.renderHebrew(Math.floor(n / 1e3)) + " אלפים";
    if (n >= 2001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 2001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 2e3) return "אלפיים";
    if (n >= 1001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 1001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 1e3) return "אלף";
    if (n >= 901) return "תתק" + this.renderHebrew099(n % 100);
    if (n >= 900) return "תת״ק";
    if (n >= 801) return "תת" + this.renderHebrew099(n % 100);
    if (n >= 800) return "ת״ת";
    if (n >= 745) return "תש" + this.renderHebrew099(n % 100);
    if (n >= 744) return "תשד״מ";
    if (n >= 701) return "תש" + this.renderHebrew099(n % 100);
    if (n >= 700) return "ת״ש";
    if (n >= 699) return "תר" + this.renderHebrew099(n % 100);
    if (n >= 698) return "תרח״צ";
    if (n >= 601) return "תר" + this.renderHebrew099(n % 100);
    if (n >= 600) return "ת״ר";
    if (n >= 501) return "תק" + this.renderHebrew099(n % 100);
    if (n >= 500) return "ת״ק";
    if (n >= 400) return "ת" + this.renderHebrew099(n % 100);
    if (n >= 345) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 344) return "שד״מ";
    if (n >= 305) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 304) return "ד״ש";
    if (n >= 300) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 299) return "ר" + this.renderHebrew099(n % 100);
    if (n >= 298) return "רח״צ";
    if (n >= 200) return "ר" + this.renderHebrew099(n % 100);
    if (n >= 100) return "ק" + this.renderHebrew099(n % 100);
    if (n >= 91) return "צ״" + this.renderHebrewItem(n % 10);
    if (n >= 90) return "צ׳";
    if (n >= 81) return "פ״" + this.renderHebrewItem(n % 10);
    if (n >= 80) return "פ׳";
    if (n >= 71) return "ע״" + this.renderHebrewItem(n % 10);
    if (n >= 70) return "ע׳";
    if (n >= 61) return "ס״" + this.renderHebrewItem(n % 10);
    if (n >= 60) return "ס׳";
    if (n >= 51) return "נ״" + this.renderHebrewItem(n % 10);
    if (n >= 50) return "נ׳";
    if (n >= 41) return "מ״" + this.renderHebrewItem(n % 10);
    if (n >= 40) return "מ׳";
    if (n >= 31) return "ל״" + this.renderHebrewItem(n % 10);
    if (n >= 30) return "ל׳";
    if (n >= 21) return "כ״" + this.renderHebrewItem(n % 10);
    if (n >= 20) return "כ׳";
    if (n >= 17) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "ט״ז";
    if (n >= 15) return "ט״ו";
    if (n >= 11) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 0) return this.renderHebrewItem(n) + "׳";
};

inter.renderRomanUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderRomanUpper(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 4e5) return this.renderNumber(n, "#,##0");
    if (n >= 3e5) return "ↈↈↈ" + (n === 3e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 2e5) return "ↈↈ" + (n === 2e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 1e5) return "ↈ" + (n === 1e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 9e4) return "ↂↈ" + (n === 9e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 8e4) return "ↇↂↂↂ" + (n === 8e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 7e4) return "ↇↂↂ" + (n === 7e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 6e4) return "ↇↂ" + (n === 6e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 5e4) return "ↇ" + (n === 5e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 4e4) return "ↂↇ" + (n === 4e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 3e4) return "ↂↂↂ" + (n === 3e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 2e4) return "ↂↂ" + (n === 2e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 1e4) return "ↂ" + (n === 1e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 9e3) return "Mↂ" + (n === 9e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 8e3) return "ↁMMM" + (n === 8e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 7e3) return "ↁMM" + (n === 7e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 6e3) return "ↁM" + (n === 6e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 5e3) return "ↁ" + (n === 5e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 4e3) return "Mↁ" + (n === 4e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 3e3) return "MMM" + (n === 3e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 2e3) return "MM" + (n === 2e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 1e3) return "M" + (n === 1e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 900) return "CM" + (n === 900 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 800) return "DCCC" + (n === 800 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 700) return "DCC" + (n === 700 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 600) return "DC" + (n === 600 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 500) return "D" + (n === 500 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 400) return "CD" + (n === 400 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 300) return "CCC" + (n === 300 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 200) return "CC" + (n === 200 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 100) return "C" + (n === 100 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 90) return "XC" + (n === 90 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 80) return "LXXX" + (n === 80 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 70) return "LXX" + (n === 70 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 60) return "LX" + (n === 60 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 50) return "L" + (n === 50 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 40) return "XL" + (n === 40 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 30) return "XXX" + (n === 30 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 20) return "XX" + (n === 20 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 10) return "X" + (n === 10 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 9) return "IX";
    if (n >= 8) return "VIII";
    if (n >= 7) return "VII";
    if (n >= 6) return "VI";
    if (n >= 5) return "V";
    if (n >= 4) return "IV";
    if (n >= 3) return "III";
    if (n >= 2) return "II";
    if (n >= 1) return "I";
    if (n >= 0) return "N";
};

inter.renderRomanLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderRomanLower(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 5e3) return this.renderNumber(n, "#,##0");
    if (n >= 4e3) return "mmmm" + (n === 4e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 3e3) return "mmm" + (n === 3e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 2e3) return "mm" + (n === 2e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 1e3) return "m" + (n === 1e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 900) return "cm" + (n === 900 ? "" : this.renderRomanLower(n % 100));
    if (n >= 800) return "dccc" + (n === 800 ? "" : this.renderRomanLower(n % 100));
    if (n >= 700) return "dcc" + (n === 700 ? "" : this.renderRomanLower(n % 100));
    if (n >= 600) return "dc" + (n === 600 ? "" : this.renderRomanLower(n % 100));
    if (n >= 500) return "d" + (n === 500 ? "" : this.renderRomanLower(n % 100));
    if (n >= 400) return "cd" + (n === 400 ? "" : this.renderRomanLower(n % 100));
    if (n >= 300) return "ccc" + (n === 300 ? "" : this.renderRomanLower(n % 100));
    if (n >= 200) return "cc" + (n === 200 ? "" : this.renderRomanLower(n % 100));
    if (n >= 100) return "c" + (n === 100 ? "" : this.renderRomanLower(n % 100));
    if (n >= 90) return "xc" + (n === 90 ? "" : this.renderRomanLower(n % 10));
    if (n >= 80) return "lxxx" + (n === 80 ? "" : this.renderRomanLower(n % 10));
    if (n >= 70) return "lxx" + (n === 70 ? "" : this.renderRomanLower(n % 10));
    if (n >= 60) return "lx" + (n === 60 ? "" : this.renderRomanLower(n % 10));
    if (n >= 50) return "l" + (n === 50 ? "" : this.renderRomanLower(n % 10));
    if (n >= 40) return "xl" + (n === 40 ? "" : this.renderRomanLower(n % 10));
    if (n >= 30) return "xxx" + (n === 30 ? "" : this.renderRomanLower(n % 10));
    if (n >= 20) return "xx" + (n === 20 ? "" : this.renderRomanLower(n % 10));
    if (n >= 10) return "x" + (n === 10 ? "" : this.renderRomanLower(n % 10));
    if (n >= 9) return "ix";
    if (n >= 8) return "viii";
    if (n >= 7) return "vii";
    if (n >= 6) return "vi";
    if (n >= 5) return "v";
    if (n >= 4) return "iv";
    if (n >= 3) return "iii";
    if (n >= 2) return "ii";
    if (n >= 1) return "i";
    if (n >= 0) return "n";
};

inter.renderTamil = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderTamil(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e8) return this.renderNumber(n, "#,##,##0");
    if (n >= 1e6) return this.renderTamil(Math.floor(n / 1e6)) + "௱௲" + (n === 1e6 ? "" : this.renderTamilThousands(n % 1e6));
    if (n >= 2e3) return this.renderTamil(Math.floor(n / 1e3)) + "௲" + (n === 2e3 ? "" : this.renderTamil(n % 1e3));
    if (n >= 1e3) return "௲" + (n === 1e3 ? "" : this.renderTamil(n % 1e3));
    if (n >= 200) return this.renderTamil(Math.floor(n / 100)) + "௱" + (n === 200 ? "" : this.renderTamil(n % 100));
    if (n >= 100) return "௱" + (n === 100 ? "" : this.renderTamil(n % 100));
    if (n >= 20) return this.renderTamil(Math.floor(n / 10)) + "௰" + (n === 20 ? "" : this.renderTamil(n % 10));
    if (n >= 10) return "௰" + (n === 10 ? "" : this.renderTamil(n % 10));
    if (n >= 9) return "௯";
    if (n >= 8) return "௮";
    if (n >= 7) return "௭";
    if (n >= 6) return "௬";
    if (n >= 5) return "௫";
    if (n >= 4) return "௪";
    if (n >= 3) return "௩";
    if (n >= 2) return "௨";
    if (n >= 1) return "௧";
    if (n >= 0) return "௦";
};

inter.renderCyrillicLowerThousands = function(n) {
    if (n >= 900) return "҂ц" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 800) return "҂ѿ" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 700) return "҂ѱ" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 600) return "҂х" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 500) return "҂ф" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 400) return "҂у" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 300) return "҂т" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 200) return "҂с" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 100) return "҂р" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 90) return "҂ч" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 80) return "҂п" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 70) return "҂ѻ" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 60) return "҂ѯ" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 50) return "҂н" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 40) return "҂м" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 30) return "҂л" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 20) return "҂к" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 19) return "҂ѳ҃҂і";
    if (n >= 18) return "҂и҃҂і";
    if (n >= 17) return "҂з҃҂і";
    if (n >= 16) return "҂ѕ҃҂і";
    if (n >= 15) return "҂є҃҂і";
    if (n >= 14) return "҂д҃҂і";
    if (n >= 13) return "҂г҃҂і";
    if (n >= 12) return "҂в҃҂і";
    if (n >= 11) return "҂а҃҂і";
    if (n >= 10) return "҃҂і";
    if (n >= 9) return "҃҂ѳ";
    if (n >= 8) return "҃҂и";
    if (n >= 7) return "҃҂з";
    if (n >= 6) return "҃҂ѕ";
    if (n >= 5) return "҃҂є";
    if (n >= 4) return "҃҂д";
    if (n >= 3) return "҃҂г";
    if (n >= 2) return "҃҂в";
    if (n >= 1) return "҃҂а";
    if (n >= 0) return "҃";
};

inter.renderCyrillicLower110 = function(n) {
    if (n >= 10) return "і";
    if (n >= 9) return "ѳ";
    if (n >= 8) return "и";
    if (n >= 7) return "з";
    if (n >= 6) return "ѕ";
    if (n >= 5) return "є";
    if (n >= 4) return "д";
    if (n >= 3) return "г";
    if (n >= 2) return "в";
    if (n >= 1) return "а";
};

inter.renderCyrillicLowerPost = function(n) {
    if (n >= 1) return this.renderCyrillicLower(n);
    if (n >= 0) return "҃";
};

inter.renderCyrillicLowerFinal = function(n) {
    if (n >= 91) return "ч" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 90) return "҃ч";
    if (n >= 81) return "п" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 80) return "҃п";
    if (n >= 71) return "ѻ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 70) return "҃ѻ";
    if (n >= 61) return "ѯ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 60) return "҃ѯ";
    if (n >= 51) return "н" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 50) return "҃н";
    if (n >= 41) return "м" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 40) return "҃м";
    if (n >= 31) return "л" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 30) return "҃л";
    if (n >= 21) return "к" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 20) return "҃к";
    if (n >= 19) return "ѳ҃і";
    if (n >= 18) return "и҃і";
    if (n >= 17) return "з҃і";
    if (n >= 16) return "ѕ҃і";
    if (n >= 15) return "є҃і";
    if (n >= 14) return "д҃і";
    if (n >= 13) return "г҃і";
    if (n >= 12) return "в҃і";
    if (n >= 11) return "а҃і";
    if (n >= 1) return "҃" + this.renderCyrillicLower110(n);
    if (n >= 0) return "҃";
};

inter.renderEthiopicP3 = function(n) {
    if (n >= 1e12) return this.renderEthiopic(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1) return "፼፼፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼፼፼";
};

inter.renderEthiopicP2 = function(n) {
    if (n >= 1e8) return this.renderEthiopic(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1) return "፼፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼፼";
};

inter.renderEthiopicP1 = function(n) {
    if (n >= 1e4) return this.renderEthiopic(Math.floor(n / 1e4)) + "፼" + (n === 1e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 1) return "፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼";
};

inter.renderGreekNumeralMajuscules = function(n) {
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e16) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e16)) + "ΜΜΜΜ" + (n === 1e16 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e16));
    if (n >= 1e12) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e12)) + "ΜΜΜ" + (n === 1e12 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e12));
    if (n >= 1e8) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e8)) + "ΜΜ" + (n === 1e8 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e8));
    if (n >= 1e4) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e4)) + "Μ" + (n === 1e4 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e4));
    if (n >= 1e3) return "͵" + this.renderGreekNumeralMajuscules(Math.floor(n / 1e3)) + (n === 1e3 ? "" : this.renderGreekNumeralMajuscules(n % 1e3));
    if (n >= 900) return "Ϡ" + (n === 900 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 800) return "Ω" + (n === 800 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 700) return "Ψ" + (n === 700 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 600) return "Χ" + (n === 600 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 500) return "Φ" + (n === 500 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 400) return "Υ" + (n === 400 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 300) return "Τ" + (n === 300 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 200) return "Σ" + (n === 200 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 100) return "Ρ" + (n === 100 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 90) return "Ϟ" + (n === 90 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 80) return "Π" + (n === 80 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 70) return "Ο" + (n === 70 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 60) return "Ξ" + (n === 60 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 50) return "Ν" + (n === 50 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 40) return "Μ" + (n === 40 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 30) return "Λ" + (n === 30 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 20) return "Κ" + (n === 20 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 10) return "Ι" + (n === 10 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 9) return "Θ";
    if (n >= 8) return "Η";
    if (n >= 7) return "Ζ";
    if (n >= 6) return "Ϝ";
    if (n >= 5) return "Ε";
    if (n >= 4) return "Δ";
    if (n >= 3) return "Γ";
    if (n >= 2) return "Β";
    if (n >= 1) return "Α";
    if (n >= 0) return "𐆊";
};

inter.renderGreekNumeralMinuscules = function(n) {
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e16) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e16)) + "μμμμ" + (n === 1e16 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e16));
    if (n >= 1e12) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e12)) + "μμμ" + (n === 1e12 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e12));
    if (n >= 1e8) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e8)) + "μμ" + (n === 1e8 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e8));
    if (n >= 1e4) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e4)) + "μ" + (n === 1e4 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e4));
    if (n >= 1e3) return "͵" + this.renderGreekNumeralMinuscules(Math.floor(n / 1e3)) + (n === 1e3 ? "" : this.renderGreekNumeralMinuscules(n % 1e3));
    if (n >= 900) return "ϡ" + (n === 900 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 800) return "ω" + (n === 800 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 700) return "ψ" + (n === 700 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 600) return "χ" + (n === 600 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 500) return "φ" + (n === 500 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 400) return "υ" + (n === 400 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 300) return "τ" + (n === 300 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 200) return "σ" + (n === 200 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 100) return "ρ" + (n === 100 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 90) return "ϟ" + (n === 90 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 80) return "π" + (n === 80 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 70) return "ο" + (n === 70 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 60) return "ξ" + (n === 60 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 50) return "ν" + (n === 50 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 40) return "μ" + (n === 40 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 30) return "λ" + (n === 30 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 20) return "κ" + (n === 20 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 10) return "ι" + (n === 10 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 9) return "θ";
    if (n >= 8) return "η";
    if (n >= 7) return "ζ";
    if (n >= 6) return "ϝ";
    if (n >= 5) return "ε";
    if (n >= 4) return "δ";
    if (n >= 3) return "γ";
    if (n >= 2) return "β";
    if (n >= 1) return "α";
    if (n >= 0) return "𐆊";
};

inter.renderHebrewThousands = function(n) {
    if (n >= 401) return this.renderHebrew(n) + "׳";
    if (n >= 100) return this.renderHebrew(n) + (n === 100 ? "" : "׳");
    if (n >= 10) return this.renderHebrew(n) + (n === 10 ? "" : "׳");
    if (n >= 0) return this.renderHebrew(n);
};

inter.renderHebrew099 = function(n) {
    if (n >= 91) return "צ״" + this.renderHebrewItem(n % 10);
    if (n >= 90) return "״צ";
    if (n >= 81) return "פ״" + this.renderHebrewItem(n % 10);
    if (n >= 80) return "״פ";
    if (n >= 71) return "ע״" + this.renderHebrewItem(n % 10);
    if (n >= 70) return "״ע";
    if (n >= 61) return "ס״" + this.renderHebrewItem(n % 10);
    if (n >= 60) return "״ס";
    if (n >= 51) return "נ״" + this.renderHebrewItem(n % 10);
    if (n >= 50) return "״נ";
    if (n >= 41) return "מ״" + this.renderHebrewItem(n % 10);
    if (n >= 40) return "״מ";
    if (n >= 31) return "ל״" + this.renderHebrewItem(n % 10);
    if (n >= 30) return "״ל";
    if (n >= 21) return "כ״" + this.renderHebrewItem(n % 10);
    if (n >= 20) return "״כ";
    if (n >= 17) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "ט״ז";
    if (n >= 15) return "ט״ו";
    if (n >= 11) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 1) return "״" + this.renderHebrewItem(n);
    if (n >= 0) return "׳";
};

inter.renderHebrewItem = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderHebrewItem(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 2100) return this.renderNumber(n, "#,##0");
    if (n >= 2e3) return "תתתתת" + (n === 2e3 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1900) return "תתתתש" + (n === 1900 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1800) return "תתתתר" + (n === 1800 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1700) return "תתתתק" + (n === 1700 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1600) return "תתתת" + (n === 1600 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1500) return "תתתש" + (n === 1500 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1400) return "תתתר" + (n === 1400 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1300) return "תתתק" + (n === 1300 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1200) return "תתת" + (n === 1200 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1100) return "תתש" + (n === 1100 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1e3) return "תתר" + (n === 1e3 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 900) return "תתק" + (n === 900 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 800) return "תת" + (n === 800 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 745) return "תש" + this.renderHebrewItem(n % 100);
    if (n >= 744) return "תשדמ";
    if (n >= 700) return "תש" + (n === 700 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 699) return "תר" + this.renderHebrewItem(n % 100);
    if (n >= 698) return "תרחצ";
    if (n >= 600) return "תר" + (n === 600 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 500) return "תק" + (n === 500 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 400) return "ת" + (n === 400 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 345) return "ש" + this.renderHebrewItem(n % 100);
    if (n >= 344) return "שדמ";
    if (n >= 305) return "ש" + this.renderHebrewItem(n % 100);
    if (n >= 304) return "דש";
    if (n >= 300) return "ש" + (n === 300 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 299) return "ר" + this.renderHebrewItem(n % 100);
    if (n >= 298) return "רחצ";
    if (n >= 200) return "ר" + (n === 200 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 100) return "ק" + (n === 100 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 90) return "צ" + (n === 90 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 80) return "פ" + (n === 80 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 70) return "ע" + (n === 70 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 60) return "ס" + (n === 60 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 50) return "נ" + (n === 50 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 40) return "מ" + (n === 40 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 30) return "ל" + (n === 30 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 20) return "כ" + (n === 20 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 17) return "י" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "טז";
    if (n >= 15) return "טו";
    if (n >= 10) return "י" + (n === 10 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 9) return "ט";
    if (n >= 8) return "ח";
    if (n >= 7) return "ז";
    if (n >= 6) return "ו";
    if (n >= 5) return "ה";
    if (n >= 4) return "ד";
    if (n >= 3) return "ג";
    if (n >= 2) return "ב";
    if (n >= 1) return "א";
    if (n >= 0) return "״";
};

inter.renderTamilThousands = function(n) {
    if (n >= 1e3) return this.renderTamilThousands(Math.floor(n / 1e3)) + "௲" + (n === 1e3 ? "" : this.renderTamilThousands(n % 1e3));
    if (n >= 0) return this.renderTamil(n);
};

inter.renderEthiopicP = function(n) {
    if (n >= 1e16) return this.renderEthiopicP(Math.floor(n / 1e16)) + "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 1e12) return this.renderEthiopicP(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1e8) return this.renderEthiopicP(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1e4) return this.renderEthiopicP(Math.floor(n / 1e4)) + "፼" + (n === 1e4 ? "" : this.renderEthiopicP(n % 1e4));
    if (n >= 1) return this.renderEthiopic(n);
};

inter.timeZones = [].concat(P.timeZones.slice(0, 67), {
    id: "America/New_York",
    regionId: "021",
    utcStandardOffsetSeconds: -18e3,
    displayName: "Gnove York",
    countryId: "US"
}, P.timeZones.slice(67, 78), P.timeZones.slice(79, 150), {
    id: "America/Sao_Paulo",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "San Pauli dal Brasîl",
    countryId: "BR"
}, P.timeZones[150], P.timeZones.slice(152, 158), {
    id: "Atlantic/Azores",
    regionId: "039",
    utcStandardOffsetSeconds: -3600,
    displayName: "Azoris",
    countryId: "PT"
}, P.timeZones.slice(159, 166), {
    id: "Atlantic/Canary",
    regionId: "039",
    utcStandardOffsetSeconds: 0,
    displayName: "Canariis",
    countryId: "ES"
}, P.timeZones.slice(167, 176), {
    id: "Europe/Lisbon",
    regionId: "039",
    utcStandardOffsetSeconds: 0,
    displayName: "Lisbone",
    countryId: "PT"
}, P.timeZones.slice(177, 191), {
    id: "Europe/Belgrade",
    regionId: "039",
    utcStandardOffsetSeconds: 3600,
    displayName: "Belgrât",
    countryId: "RS"
}, P.timeZones.slice(192, 207), P.timeZones.slice(208, 210), {
    id: "Europe/Ljubljana",
    regionId: "039",
    utcStandardOffsetSeconds: 3600,
    displayName: "Lubiane",
    countryId: "SI"
}, {
    id: "Europe/Luxembourg",
    regionId: "155",
    utcStandardOffsetSeconds: 3600,
    displayName: "Lussemburc",
    countryId: "LU"
}, P.timeZones.slice(211, 213), {
    id: "Europe/Malta",
    regionId: "039",
    utcStandardOffsetSeconds: 3600,
    displayName: "Malte",
    countryId: "MT"
}, P.timeZones.slice(214, 221), {
    id: "Europe/Prague",
    regionId: "151",
    utcStandardOffsetSeconds: 3600,
    displayName: "Praghe",
    countryId: "CZ"
}, P.timeZones[222], {
    id: "Europe/San_Marino",
    regionId: "039",
    utcStandardOffsetSeconds: 3600,
    displayName: "San Marin",
    countryId: "SM"
}, P.timeZones.slice(224, 231), {
    id: "Europe/Vienna",
    regionId: "155",
    utcStandardOffsetSeconds: 3600,
    displayName: "Viene",
    countryId: "AT"
}, P.timeZones.slice(232, 286), {
    id: "Europe/Moscow",
    regionId: "151",
    utcStandardOffsetSeconds: 10800,
    displayName: "Mosche",
    countryId: "RU"
}, P.timeZones.slice(287, 419));

inter.territories = [ _kcqq264, _kcqq301, _kcqq342, _kcqq353, _kcqq350, _kcqq347, _kcqq361, _kcqq153, _kcqq154, _kcqq348, _kcqq356, _kcqq365, _kcqq317, _kcqq155, _kcqq122, _kcqq194, _kcqq53, _kcqq318, _kcqq294, _kcqq248, _kcqq156, _kcqq96, _kcqq279, _kcqq332, _kcqq343, _kcqq341, _kcqq335, _kcqq351, _kcqq223, _kcqq366, _kcqq157, _kcqq265, _kcqq158, _kcqq159, _kcqq249, _kcqq195, _kcqq224, _kcqq123, _kcqq97, _kcqq160, _kcqq124, _kcqq266, _kcqq196, _kcqq161, _kcqq327, _kcqq197, _kcqq125, _kcqq126, _kcqq198, _kcqq280, _kcqq162, _kcqq163, _kcqq164, _kcqq127, _kcqq76, _kcqq83, _kcqq84, _kcqq98, _kcqq225, _kcqq199, _kcqq165, _kcqq328, _kcqq295, _kcqq286, _kcqq250, _kcqq226, _kcqq85, _kcqq302, _kcqq251, _kcqq66, _kcqq227, _kcqq166, _kcqq99, _kcqq267, _kcqq329, _kcqq167, _kcqq168, _kcqq169, _kcqq296, _kcqq352, _kcqq349, _kcqq344, _kcqq357, _kcqq228, _kcqq229, _kcqq86, _kcqq128, _kcqq100, _kcqq129, _kcqq354, _kcqq101, _kcqq130, _kcqq230, _kcqq131, _kcqq231, _kcqq232, _kcqq252, _kcqq303, _kcqq287, _kcqq132, _kcqq170, _kcqq253, _kcqq233, _kcqq87, _kcqq234, _kcqq200, _kcqq297, _kcqq288, _kcqq133, _kcqq319, _kcqq134, _kcqq102, _kcqq201, _kcqq103, _kcqq235, _kcqq88, _kcqq89, _kcqq171, _kcqq172, _kcqq289, _kcqq135, _kcqq67, _kcqq73, _kcqq79, _kcqq304, _kcqq281, _kcqq282, _kcqq77, _kcqq290, _kcqq63, _kcqq268, _kcqq305, _kcqq283, _kcqq345, _kcqq306, _kcqq298, _kcqq336, _kcqq358, _kcqq359, _kcqq362, _kcqq136, _kcqq137, _kcqq202, _kcqq269, _kcqq104, _kcqq270, _kcqq203, _kcqq138, _kcqq90, _kcqq173, _kcqq174, _kcqq105, _kcqq175, _kcqq106, _kcqq291, _kcqq204, _kcqq254, _kcqq236, _kcqq255, _kcqq139, _kcqq205, _kcqq206, _kcqq91, _kcqq107, _kcqq108, _kcqq256, _kcqq257, _kcqq176, _kcqq177, _kcqq320, _kcqq140, _kcqq258, _kcqq207, _kcqq141, _kcqq208, _kcqq45, _kcqq259, _kcqq260, _kcqq209, _kcqq178, _kcqq109, _kcqq110, _kcqq237, _kcqq111, _kcqq179, _kcqq92, _kcqq210, _kcqq307, {
    id: "QO",
    displayName: "Oceanie periferiche",
    regionId: "009",
    hasTimeZones: false
}, _kcqq93, _kcqq211, _kcqq212, _kcqq112, _kcqq142, _kcqq325, _kcqq213, _kcqq214, _kcqq94, _kcqq215, _kcqq321, _kcqq322, _kcqq180, _kcqq261, _kcqq216, _kcqq113, _kcqq238, _kcqq375, _kcqq369, _kcqq363, _kcqq367, _kcqq314, _kcqq355, _kcqq337, _kcqq181, _kcqq182, _kcqq143, _kcqq144, _kcqq315, _kcqq114, _kcqq308, _kcqq323, _kcqq239, _kcqq338, _kcqq364, _kcqq309, _kcqq271, _kcqq272, _kcqq273, _kcqq330, _kcqq183, _kcqq145, _kcqq262, _kcqq284, _kcqq240, _kcqq115, _kcqq241, _kcqq217, _kcqq184, _kcqq146, _kcqq242, _kcqq274, _kcqq275, _kcqq116, _kcqq218, _kcqq333, _kcqq147, _kcqq219, _kcqq243, _kcqq244, _kcqq148, _kcqq220, _kcqq263, _kcqq331, _kcqq292, _kcqq334, _kcqq299, _kcqq95, _kcqq185, _kcqq117, _kcqq324, _kcqq80, _kcqq186, _kcqq187, _kcqq285, _kcqq149, _kcqq188, _kcqq150, _kcqq189, _kcqq276, _kcqq190, _kcqq191, _kcqq245, _kcqq192, _kcqq310, _kcqq118, _kcqq151, _kcqq221, _kcqq316, _kcqq81 ];

inter.regions = [ _kcqq301, _kcqq342, _kcqq353, _kcqq350, _kcqq347, _kcqq361, _kcqq348, _kcqq356, _kcqq365, _kcqq317, _kcqq279, _kcqq332, _kcqq343, _kcqq341, _kcqq335, _kcqq351, _kcqq366, _kcqq296, _kcqq352, _kcqq349, _kcqq344, _kcqq357, _kcqq320, _kcqq45, _kcqq307, _kcqq321, _kcqq363, _kcqq316 ];

inter.countries = [ _kcqq264, _kcqq153, _kcqq154, _kcqq155, _kcqq122, _kcqq194, _kcqq53, _kcqq318, _kcqq294, _kcqq248, _kcqq156, _kcqq96, _kcqq223, _kcqq157, _kcqq265, _kcqq158, _kcqq159, _kcqq249, _kcqq195, _kcqq224, _kcqq123, _kcqq97, _kcqq160, _kcqq124, _kcqq266, _kcqq196, _kcqq161, _kcqq327, _kcqq197, _kcqq125, _kcqq126, _kcqq198, _kcqq280, _kcqq162, _kcqq163, _kcqq164, _kcqq127, _kcqq76, _kcqq83, _kcqq84, _kcqq98, _kcqq225, _kcqq199, _kcqq165, _kcqq328, _kcqq295, _kcqq286, _kcqq250, _kcqq226, _kcqq85, _kcqq302, _kcqq251, _kcqq66, _kcqq227, _kcqq166, _kcqq99, _kcqq267, _kcqq329, _kcqq167, _kcqq168, _kcqq169, _kcqq228, _kcqq229, _kcqq86, _kcqq128, _kcqq100, _kcqq129, _kcqq354, _kcqq101, _kcqq130, _kcqq230, _kcqq131, _kcqq231, _kcqq232, _kcqq252, _kcqq303, _kcqq287, _kcqq132, _kcqq170, _kcqq253, _kcqq233, _kcqq87, _kcqq234, _kcqq200, _kcqq297, _kcqq288, _kcqq133, _kcqq319, _kcqq134, _kcqq102, _kcqq201, _kcqq103, _kcqq235, _kcqq88, _kcqq89, _kcqq171, _kcqq172, _kcqq289, _kcqq135, _kcqq67, _kcqq73, _kcqq79, _kcqq304, _kcqq281, _kcqq282, _kcqq77, _kcqq290, _kcqq63, _kcqq268, _kcqq305, _kcqq283, _kcqq345, _kcqq306, _kcqq298, _kcqq336, _kcqq358, _kcqq359, _kcqq362, _kcqq136, _kcqq137, _kcqq202, _kcqq269, _kcqq104, _kcqq270, _kcqq203, _kcqq138, _kcqq90, _kcqq173, _kcqq174, _kcqq105, _kcqq175, _kcqq106, _kcqq291, _kcqq204, _kcqq254, _kcqq236, _kcqq255, _kcqq139, _kcqq205, _kcqq206, _kcqq91, _kcqq107, _kcqq108, _kcqq256, _kcqq257, _kcqq176, _kcqq177, _kcqq140, _kcqq258, _kcqq207, _kcqq141, _kcqq208, _kcqq259, _kcqq260, _kcqq209, _kcqq178, _kcqq109, _kcqq110, _kcqq237, _kcqq111, _kcqq179, _kcqq92, _kcqq210, _kcqq93, _kcqq211, _kcqq212, _kcqq112, _kcqq142, _kcqq325, _kcqq213, _kcqq214, _kcqq94, _kcqq215, _kcqq322, _kcqq180, _kcqq261, _kcqq216, _kcqq113, _kcqq238, _kcqq375, _kcqq369, _kcqq367, _kcqq314, _kcqq355, _kcqq337, _kcqq181, _kcqq182, _kcqq143, _kcqq144, _kcqq315, _kcqq114, _kcqq308, _kcqq323, _kcqq239, _kcqq338, _kcqq364, _kcqq309, _kcqq271, _kcqq272, _kcqq273, _kcqq330, _kcqq183, _kcqq145, _kcqq262, _kcqq284, _kcqq240, _kcqq115, _kcqq241, _kcqq217, _kcqq184, _kcqq146, _kcqq242, _kcqq274, _kcqq275, _kcqq116, _kcqq218, _kcqq333, _kcqq147, _kcqq219, _kcqq243, _kcqq244, _kcqq148, _kcqq220, _kcqq263, _kcqq331, _kcqq292, _kcqq334, _kcqq299, _kcqq95, _kcqq185, _kcqq117, _kcqq324, _kcqq80, _kcqq186, _kcqq187, _kcqq285, _kcqq149, _kcqq188, _kcqq150, _kcqq189, _kcqq276, _kcqq190, _kcqq191, _kcqq245, _kcqq192, _kcqq310, _kcqq118, _kcqq151, _kcqq221, _kcqq81 ];

inter.languages = [ {
    id: "ab",
    displayName: "abcazian"
}, {
    id: "aa",
    displayName: "afar"
}, {
    id: "af",
    displayName: "afrikaans",
    nativeDisplayName: "Afrikaans"
}, {
    id: "en_us",
    displayName: "ingles merecan",
    nativeDisplayName: "American English"
}, {
    id: "an",
    displayName: "aragonês"
}, {
    id: "arc",
    displayName: "aramaic"
}, {
    id: "ast",
    displayName: "asturian",
    nativeDisplayName: "asturianu"
}, {
    id: "en_au",
    displayName: "inglês australian",
    nativeDisplayName: "Australian English"
}, {
    id: "av",
    displayName: "avar"
}, {
    id: "ae",
    displayName: "avestan"
}, {
    id: "ay",
    displayName: "aymarà"
}, {
    id: "az",
    displayName: "azerbaijani",
    nativeDisplayName: "azərbaycan dili"
}, {
    id: "ms",
    displayName: "malês",
    nativeDisplayName: "Bahasa Melayu"
}, {
    id: "nds",
    displayName: "bas todesc"
}, {
    id: "bs",
    displayName: "bosniac",
    nativeDisplayName: "bosanski"
}, {
    id: "br",
    displayName: "breton",
    nativeDisplayName: "brezhoneg"
}, {
    id: "en_gb",
    displayName: "inglês britanic",
    nativeDisplayName: "British English"
}, {
    id: "en_ca",
    displayName: "inglês canadês",
    nativeDisplayName: "Canadian English"
}, {
    id: "ca",
    displayName: "catalan",
    nativeDisplayName: "català"
}, {
    id: "ch",
    displayName: "chamorro"
}, {
    id: "cop",
    displayName: "coptic"
}, {
    id: "co",
    displayName: "cors"
}, {
    id: "cr",
    displayName: "cree"
}, {
    id: "ku",
    displayName: "curd"
}, {
    id: "cy",
    displayName: "galês",
    nativeDisplayName: "Cymraeg"
}, {
    id: "da",
    displayName: "danês",
    nativeDisplayName: "dansk"
}, {
    id: "se",
    displayName: "sami setentrionâl",
    nativeDisplayName: "davvisámegiella"
}, {
    id: "de",
    displayName: "todesc",
    nativeDisplayName: "Deutsch"
}, {
    id: "et",
    displayName: "eston",
    nativeDisplayName: "eesti"
}, {
    id: "en",
    displayName: "inglês",
    nativeDisplayName: "English"
}, {
    id: "es",
    displayName: "spagnûl",
    nativeDisplayName: "español"
}, {
    id: "es_es",
    displayName: "spagnûl iberic",
    nativeDisplayName: "español de España"
}, {
    id: "es_419",
    displayName: "spagnûl de Americhe Latine",
    nativeDisplayName: "español latinoamericano"
}, {
    id: "eo",
    displayName: "esperanto",
    nativeDisplayName: "esperanto"
}, {
    id: "eu",
    displayName: "basc",
    nativeDisplayName: "euskara"
}, {
    id: "fil",
    displayName: "filipin",
    nativeDisplayName: "Filipino"
}, {
    id: "fj",
    displayName: "fizian"
}, {
    id: "fr",
    displayName: "francês",
    nativeDisplayName: "français"
}, {
    id: "fr_ca",
    displayName: "francês dal Canade",
    nativeDisplayName: "français canadien"
}, {
    id: "fr_ch",
    displayName: "francês de Svuizare",
    nativeDisplayName: "français suisse"
}, {
    id: "fur",
    displayName: "furlan",
    nativeDisplayName: "furlan"
}, {
    id: "fo",
    displayName: "faroês",
    nativeDisplayName: "føroyskt"
}, {
    id: "ga",
    displayName: "gaelic irlandês",
    nativeDisplayName: "Gaeilge"
}, {
    id: "gv",
    displayName: "manx",
    nativeDisplayName: "Gaelg"
}, {
    id: "gl",
    displayName: "galizian",
    nativeDisplayName: "galego"
}, {
    id: "got",
    displayName: "gotic"
}, {
    id: "gn",
    displayName: "guaranì"
}, {
    id: "gd",
    displayName: "gaelic scozês",
    nativeDisplayName: "Gàidhlig"
}, {
    id: "ht",
    displayName: "haitian"
}, {
    id: "hr",
    displayName: "cravuat",
    nativeDisplayName: "hrvatski"
}, {
    id: "io",
    displayName: "ido"
}, {
    id: "ig",
    displayName: "igbo",
    nativeDisplayName: "Igbo"
}, {
    id: "und",
    displayName: "indeterminade"
}, {
    id: "id",
    displayName: "indonesian",
    nativeDisplayName: "Indonesia"
}, {
    id: "iu",
    displayName: "inuktitut"
}, {
    id: "ik",
    displayName: "inupiaq"
}, {
    id: "nd",
    displayName: "ndebele setentrionâl",
    nativeDisplayName: "isiNdebele"
}, {
    id: "zu",
    displayName: "zulu",
    nativeDisplayName: "isiZulu"
}, {
    id: "it",
    displayName: "talian",
    nativeDisplayName: "italiano"
}, {
    id: "kl",
    displayName: "kalaallisut",
    nativeDisplayName: "kalaallisut"
}, {
    id: "kw",
    displayName: "cornualiês",
    nativeDisplayName: "kernewek"
}, {
    id: "sw",
    displayName: "swahili",
    nativeDisplayName: "Kiswahili"
}, {
    id: "lad",
    displayName: "ladin"
}, {
    id: "la",
    displayName: "latin"
}, {
    id: "lv",
    displayName: "leton",
    nativeDisplayName: "latviešu"
}, {
    id: "mul",
    displayName: "lenghis multiplis"
}, {
    id: "lt",
    displayName: "lituan",
    nativeDisplayName: "lietuvių"
}, {
    id: "li",
    displayName: "limburghês"
}, {
    id: "ln",
    displayName: "lingala",
    nativeDisplayName: "lingála"
}, {
    id: "lb",
    displayName: "lussemburghês",
    nativeDisplayName: "Lëtzebuergesch"
}, {
    id: "hu",
    displayName: "ongjarês",
    nativeDisplayName: "magyar"
}, {
    id: "mg",
    displayName: "malagasy",
    nativeDisplayName: "Malagasy"
}, {
    id: "mt",
    displayName: "maltês",
    nativeDisplayName: "Malti"
}, {
    id: "mi",
    displayName: "maori"
}, {
    id: "mwl",
    displayName: "mirandês"
}, {
    id: "ro_md",
    displayName: "moldâf",
    nativeDisplayName: "moldovenească"
}, {
    id: "nap",
    displayName: "napoletan"
}, {
    id: "nv",
    displayName: "navajo"
}, {
    id: "nl",
    displayName: "olandês",
    nativeDisplayName: "Nederlands"
}, {
    id: "nb",
    displayName: "norvegjês bokmål",
    nativeDisplayName: "norsk bokmål"
}, {
    id: "no",
    displayName: "norvegjês"
}, {
    id: "nn",
    displayName: "norvegjês nynorsk",
    nativeDisplayName: "nynorsk"
}, {
    id: "oc",
    displayName: "ocitan"
}, {
    id: "uz",
    displayName: "uzbec",
    nativeDisplayName: "o‘zbek"
}, {
    id: "pap",
    displayName: "papiamento"
}, {
    id: "pl",
    displayName: "polac",
    nativeDisplayName: "polski"
}, {
    id: "pt",
    displayName: "portughês",
    nativeDisplayName: "português"
}, {
    id: "pt_br",
    displayName: "portughês brasilian",
    nativeDisplayName: "português do Brasil"
}, {
    id: "pt_pt",
    displayName: "portughês iberic",
    nativeDisplayName: "português europeu"
}, {
    id: "ff",
    displayName: "fulah",
    nativeDisplayName: "Pulaar"
}, {
    id: "ro",
    displayName: "romen",
    nativeDisplayName: "română"
}, {
    id: "rm",
    displayName: "rumanç",
    nativeDisplayName: "rumantsch"
}, {
    id: "qu",
    displayName: "quechua",
    nativeDisplayName: "Runasimi"
}, {
    id: "sm",
    displayName: "samoan"
}, {
    id: "sa",
    displayName: "sanscrit"
}, {
    id: "sc",
    displayName: "sardegnûl"
}, {
    id: "de_ch",
    displayName: "alt todesc de Svuizare",
    nativeDisplayName: "Schweizer Hochdeutsch"
}, {
    id: "den",
    displayName: "sclâf"
}, {
    id: "sco",
    displayName: "scozês"
}, {
    id: "sq",
    displayName: "albanês",
    nativeDisplayName: "shqip"
}, {
    id: "scn",
    displayName: "sicilian"
}, {
    id: "sd",
    displayName: "sindhi"
}, {
    id: "sk",
    displayName: "slovac",
    nativeDisplayName: "slovenčina"
}, {
    id: "sl",
    displayName: "sloven",
    nativeDisplayName: "slovenščina"
}, {
    id: "so",
    displayName: "somal",
    nativeDisplayName: "Soomaali"
}, {
    id: "st",
    displayName: "sotho meridionâl"
}, {
    id: "nso",
    displayName: "sotho setentrionâl"
}, {
    id: "sux",
    displayName: "sumeric"
}, {
    id: "su",
    displayName: "sundanês"
}, {
    id: "fi",
    displayName: "finlandês",
    nativeDisplayName: "suomi"
}, {
    id: "sv",
    displayName: "svedês",
    nativeDisplayName: "svenska"
}, {
    id: "ss",
    displayName: "swati"
}, {
    id: "sg",
    displayName: "sango",
    nativeDisplayName: "Sängö"
}, {
    id: "tl",
    displayName: "tagalog"
}, {
    id: "tg",
    displayName: "tagic"
}, {
    id: "ty",
    displayName: "tahitian"
}, {
    id: "tt",
    displayName: "tartar"
}, {
    id: "tet",
    displayName: "tetum"
}, {
    id: "vi",
    displayName: "vietnamite",
    nativeDisplayName: "Tiếng Việt"
}, {
    id: "ota",
    displayName: "turc otoman"
}, {
    id: "tk",
    displayName: "turcmen",
    nativeDisplayName: "türkmençe"
}, {
    id: "tr",
    displayName: "turc",
    nativeDisplayName: "Türkçe"
}, {
    id: "wa",
    displayName: "valon"
}, {
    id: "ve",
    displayName: "venda"
}, {
    id: "egy",
    displayName: "vieri egjizian"
}, {
    id: "fro",
    displayName: "vieri francês"
}, {
    id: "grc",
    displayName: "vieri grêc"
}, {
    id: "ang",
    displayName: "vieri inglês"
}, {
    id: "sga",
    displayName: "vieri irlandês"
}, {
    id: "non",
    displayName: "vieri norvegjês"
}, {
    id: "peo",
    displayName: "vieri persian"
}, {
    id: "pro",
    displayName: "vieri provenzâl"
}, {
    id: "nl_be",
    displayName: "flamant",
    nativeDisplayName: "Vlaams"
}, {
    id: "fy",
    displayName: "frisian",
    nativeDisplayName: "West-Frysk"
}, {
    id: "wo",
    displayName: "wolof"
}, {
    id: "xh",
    displayName: "xhosa"
}, {
    id: "yo",
    displayName: "yoruba",
    nativeDisplayName: "Èdè Yorùbá"
}, {
    id: "is",
    displayName: "islandês",
    nativeDisplayName: "íslenska"
}, {
    id: "de_at",
    displayName: "todesc de Austrie",
    nativeDisplayName: "Österreichisches Deutsch"
}, {
    id: "cs",
    displayName: "cec",
    nativeDisplayName: "čeština"
}, {
    id: "el",
    displayName: "grêc",
    nativeDisplayName: "Ελληνικά"
}, {
    id: "be",
    displayName: "bielorùs",
    nativeDisplayName: "беларуская"
}, {
    id: "bg",
    displayName: "bulgar",
    nativeDisplayName: "български"
}, {
    id: "os",
    displayName: "osetic",
    nativeDisplayName: "ирон"
}, {
    id: "mk",
    displayName: "macedon",
    nativeDisplayName: "македонски"
}, {
    id: "mn",
    displayName: "mongul",
    nativeDisplayName: "монгол"
}, {
    id: "ce",
    displayName: "cecen",
    nativeDisplayName: "нохчийн"
}, {
    id: "ru",
    displayName: "rus",
    nativeDisplayName: "русский"
}, {
    id: "sr",
    displayName: "serp",
    nativeDisplayName: "српски"
}, {
    id: "uk",
    displayName: "ucrain",
    nativeDisplayName: "українська"
}, {
    id: "cu",
    displayName: "sclâf de glesie",
    nativeDisplayName: "церковнослове́нскїй"
}, {
    id: "kk",
    displayName: "kazac",
    nativeDisplayName: "қазақ тілі"
}, {
    id: "hy",
    displayName: "armen",
    nativeDisplayName: "հայերեն"
}, {
    id: "yi",
    displayName: "yiddish",
    nativeDisplayName: "ייִדיש"
}, {
    id: "he",
    displayName: "ebraic",
    nativeDisplayName: "עברית"
}, {
    id: "ug",
    displayName: "uigur",
    nativeDisplayName: "ئۇيغۇرچە"
}, {
    id: "ur",
    displayName: "urdu",
    nativeDisplayName: "اردو"
}, {
    id: "ar",
    displayName: "arap",
    nativeDisplayName: "العربية"
}, {
    id: "fa",
    displayName: "persian",
    nativeDisplayName: "فارسی"
}, {
    id: "ps",
    displayName: "pashto",
    nativeDisplayName: "پښتو"
}, {
    id: "ne",
    displayName: "nepalês",
    nativeDisplayName: "नेपाली"
}, {
    id: "mr",
    displayName: "marathi",
    nativeDisplayName: "मराठी"
}, {
    id: "hi",
    displayName: "hindi",
    nativeDisplayName: "हिन्दी"
}, {
    id: "as",
    displayName: "assamês",
    nativeDisplayName: "অসমীয়া"
}, {
    id: "bn",
    displayName: "bengalês",
    nativeDisplayName: "বাংলা"
}, {
    id: "pa",
    displayName: "punjabi",
    nativeDisplayName: "ਪੰਜਾਬੀ"
}, {
    id: "gu",
    displayName: "gujarati",
    nativeDisplayName: "ગુજરાતી"
}, {
    id: "or",
    displayName: "oriya",
    nativeDisplayName: "ଓଡ଼ିଆ"
}, {
    id: "ta",
    displayName: "tamil",
    nativeDisplayName: "தமிழ்"
}, {
    id: "te",
    displayName: "telegu",
    nativeDisplayName: "తెలుగు"
}, {
    id: "kn",
    displayName: "kannada",
    nativeDisplayName: "ಕನ್ನಡ"
}, {
    id: "ml",
    displayName: "malayalam",
    nativeDisplayName: "മലയാളം"
}, {
    id: "si",
    displayName: "sinalês",
    nativeDisplayName: "සිංහල"
}, {
    id: "th",
    displayName: "thai",
    nativeDisplayName: "ไทย"
}, {
    id: "lo",
    displayName: "lao",
    nativeDisplayName: "ລາວ"
}, {
    id: "bo",
    displayName: "tibetan",
    nativeDisplayName: "བོད་སྐད་"
}, {
    id: "ka",
    displayName: "gjeorgjian",
    nativeDisplayName: "ქართული"
}, {
    id: "am",
    displayName: "amaric",
    nativeDisplayName: "አማርኛ"
}, {
    id: "km",
    displayName: "khmer",
    nativeDisplayName: "ខ្មែរ"
}, {
    id: "zh",
    displayName: "cinês",
    nativeDisplayName: "中文"
}, {
    id: "ja",
    displayName: "gjaponês",
    nativeDisplayName: "日本語"
}, {
    id: "zh_hans",
    displayName: "cinês semplificât",
    nativeDisplayName: "简体中文"
}, {
    id: "zh_hant",
    displayName: "cinês tradizionâl",
    nativeDisplayName: "繁體中文"
}, {
    id: "ko",
    displayName: "corean",
    nativeDisplayName: "한국어"
} ];

inter.scripts = [ {
    id: "Brai",
    displayName: "Braille"
}, {
    id: "Hans",
    displayName: "Han semplificât"
}, {
    id: "Hant",
    displayName: "Han tradizionâl"
}, {
    id: "Cans",
    displayName: "Silabari unificât aborigjens canadês"
}, {
    id: "Arab",
    displayName: "arap"
}, {
    id: "Armn",
    displayName: "armen"
}, {
    id: "Bali",
    displayName: "balinês"
}, {
    id: "Beng",
    displayName: "bengalês"
}, {
    id: "Bugi",
    displayName: "buginês"
}, {
    id: "Cprt",
    displayName: "cipriot"
}, {
    id: "Cyrl",
    displayName: "cirilic"
}, {
    id: "Cyrs",
    displayName: "cirilic dal vieri slavonic de glesie"
}, {
    id: "Zzzz",
    displayName: "codiç par scrituris no codificadis"
}, {
    id: "Zxxx",
    displayName: "codiç pes lenghis no scritis"
}, {
    id: "Zyyy",
    displayName: "comun"
}, {
    id: "Copt",
    displayName: "copt"
}, {
    id: "Kore",
    displayName: "corean"
}, {
    id: "Xsux",
    displayName: "cuneiform sumeric-acadic"
}, {
    id: "Egyd",
    displayName: "demotic egjizian"
}, {
    id: "Deva",
    displayName: "devanagari"
}, {
    id: "Hebr",
    displayName: "ebreu"
}, {
    id: "Ethi",
    displayName: "etiopic"
}, {
    id: "Geor",
    displayName: "georgjian"
}, {
    id: "Jpan",
    displayName: "gjaponês"
}, {
    id: "Java",
    displayName: "gjavanês"
}, {
    id: "Glag",
    displayName: "glagolitic"
}, {
    id: "Goth",
    displayName: "gotic"
}, {
    id: "Grek",
    displayName: "grêc"
}, {
    id: "Gujr",
    displayName: "gujarati"
}, {
    id: "Hani",
    displayName: "han"
}, {
    id: "Egyh",
    displayName: "jeratic egjizian"
}, {
    id: "Maya",
    displayName: "jeroglifics Maya"
}, {
    id: "Egyp",
    displayName: "jeroglifics egjizians"
}, {
    id: "Knda",
    displayName: "kannada"
}, {
    id: "Hrkt",
    displayName: "katakana o hiragana"
}, {
    id: "Khmr",
    displayName: "khmer"
}, {
    id: "Laoo",
    displayName: "lao"
}, {
    id: "Latn",
    displayName: "latin"
}, {
    id: "Latf",
    displayName: "latin Fraktur"
}, {
    id: "Latg",
    displayName: "latin gaelic"
}, {
    id: "Lina",
    displayName: "lineâr A"
}, {
    id: "Linb",
    displayName: "lineâr B"
}, {
    id: "Mlym",
    displayName: "malayalam"
}, {
    id: "Mong",
    displayName: "mongul"
}, {
    id: "Mymr",
    displayName: "myanmar"
}, {
    id: "Orya",
    displayName: "oriya"
}, {
    id: "Runr",
    displayName: "runic"
}, {
    id: "Sinh",
    displayName: "sinhala"
}, {
    id: "Syrc",
    displayName: "siriac"
}, {
    id: "Syre",
    displayName: "siriac Estrangelo"
}, {
    id: "Syrj",
    displayName: "siriac ocidentâl"
}, {
    id: "Syrn",
    displayName: "siriac orientâl"
}, {
    id: "Tglg",
    displayName: "tagalog"
}, {
    id: "Taml",
    displayName: "tamil"
}, {
    id: "Telu",
    displayName: "telegu"
}, {
    id: "Thaa",
    displayName: "thaana"
}, {
    id: "Thai",
    displayName: "thai"
}, {
    id: "Tibt",
    displayName: "tibetan"
}, {
    id: "Ugar",
    displayName: "ugaritic"
}, {
    id: "Ital",
    displayName: "vieri italic"
}, {
    id: "Hung",
    displayName: "vieri ongjarês"
}, {
    id: "Xpeo",
    displayName: "vieri persian"
} ];

inter.currencies = [ {
    id: "XAG",
    displayName: "Arint"
}, {
    id: "XAU",
    displayName: "Aur"
}, {
    id: "CZK",
    displayName: "Corone de Republiche Ceche",
    symbol: "Kč"
}, {
    id: "SKK",
    displayName: "Corone slovache"
}, {
    id: "NIO",
    displayName: "Córdoba oro nicaraguan",
    symbol: "C$"
}, {
    id: "DZD",
    displayName: "Dinar algerin"
}, {
    id: "HRD",
    displayName: "Dinar cravuat"
}, {
    id: "RSD",
    displayName: "Dinar serp"
}, {
    id: "XDR",
    displayName: "Dirits speciâi di incas"
}, {
    id: "USN",
    displayName: "Dolar american (prossime zornade)"
}, {
    id: "USS",
    displayName: "Dolar american (stesse zornade)"
}, {
    id: "BND",
    displayName: "Dolar dal Brunei",
    symbol: "$"
}, {
    id: "NAD",
    displayName: "Dolar namibian",
    symbol: "$"
}, {
    id: "NZD",
    displayName: "Dollar neozelandês",
    symbol: "NZ$"
}, {
    id: "AMD",
    displayName: "Dram armen"
}, {
    id: "XFU",
    displayName: "Franc UIC francês"
}, {
    id: "XFO",
    displayName: "Franc aur francês"
}, {
    id: "BIF",
    displayName: "Franc burundês"
}, {
    id: "BEF",
    displayName: "Franc de Belgjiche"
}, {
    id: "FRF",
    displayName: "Franc francês"
}, {
    id: "HRK",
    displayName: "Kuna cravuate",
    symbol: "kn"
}, {
    id: "LVL",
    displayName: "Lats leton",
    symbol: "Ls"
}, {
    id: "ITL",
    displayName: "Lire taliane"
}, {
    id: "DEM",
    displayName: "Marc todesc"
}, {
    id: "XXX",
    displayName: "Monede no valide o no cognossude",
    one: "Monede no valide o no cognossude",
    other: "Monedis no validis o no cognossudis"
}, {
    id: "XPD",
    displayName: "Paladi"
}, {
    id: "ARS",
    displayName: "Peso argjentin",
    symbol: "$"
}, {
    id: "CUP",
    displayName: "Peso cuban",
    symbol: "$"
}, {
    id: "XPT",
    displayName: "Platin"
}, {
    id: "IRR",
    displayName: "Rial iranian"
}, {
    id: "BYR",
    displayName: "Rubli bielorùs",
    symbol: "р."
}, {
    id: "PKR",
    displayName: "Rupie pachistane",
    symbol: "Rs"
}, {
    id: "ATS",
    displayName: "Selin austriac"
}, {
    id: "SIT",
    displayName: "Talar sloven"
}, {
    id: "XBA",
    displayName: "Unitât composite europeane"
}, {
    id: "XBC",
    displayName: "Unitât di acont europeane (XBC)"
}, {
    id: "XBD",
    displayName: "Unitât di acont europeane (XBD)"
}, {
    id: "XBB",
    displayName: "Unitât monetarie europeane"
}, {
    id: "TRL",
    displayName: "Viere Lire turche"
}, {
    id: "CSD",
    displayName: "Vieri dinar serp"
}, {
    id: "THB",
    displayName: "baht tailandês",
    symbol: "฿",
    one: "baht tailandês",
    other: "baht tailandês"
}, {
    id: "XTS",
    displayName: "codiç di verifiche de monede"
}, {
    id: "DKK",
    displayName: "corone danese",
    symbol: "kr",
    one: "corone danese",
    other: "coronis danesis"
}, {
    id: "NOK",
    displayName: "corone norvegjese",
    symbol: "kr",
    one: "corone norvegjese",
    other: "coronis norvegjesis"
}, {
    id: "SEK",
    displayName: "corone svedese",
    symbol: "kr",
    one: "corone svedese",
    other: "coronis svedesis"
}, {
    id: "USD",
    displayName: "dolar american",
    symbol: "US$",
    one: "dolar american",
    other: "dolars americans"
}, {
    id: "AUD",
    displayName: "dolar australian",
    symbol: "A$",
    one: "dolar australian",
    other: "dolars australians"
}, {
    id: "CAD",
    displayName: "dolar canadês",
    symbol: "CA$",
    one: "dolar canadês",
    other: "dolars canadês"
}, {
    id: "HKD",
    displayName: "dolar di Hong Kong",
    symbol: "HK$",
    one: "dolar di Hong Kong",
    other: "dolars di Hong Kong"
}, {
    id: "EUR",
    displayName: "euro",
    symbol: "€",
    one: "euro",
    other: "euros"
}, {
    id: "XRE",
    displayName: "fonts RINET"
}, {
    id: "CHF",
    displayName: "franc svuizar",
    one: "franc svuizar",
    other: "francs svuizars"
}, {
    id: "TWD",
    displayName: "gnûf dolar taiwanês",
    symbol: "NT$",
    one: "gnûf dolar taiwanês",
    other: "gnûfs dolars taiwanês"
}, {
    id: "TRY",
    displayName: "lire turche",
    symbol: "₺",
    one: "lire turche",
    other: "liris turchis"
}, {
    id: "MXN",
    displayName: "peso messican",
    symbol: "MX$",
    one: "peso messican",
    other: "pesos messicans"
}, {
    id: "ZAR",
    displayName: "rand sudafrican",
    symbol: "R",
    one: "rand sudafrican",
    other: "rands sudafricans"
}, {
    id: "BRL",
    displayName: "real brasilian",
    symbol: "R$",
    one: "real brasilian",
    other: "real brasilians"
}, {
    id: "SAR",
    displayName: "riyal de Arabie Saudite",
    one: "riyal de Arabie Saudite",
    other: "riyals de Arabie Saudite"
}, {
    id: "RUB",
    displayName: "rubli rus",
    symbol: "₽",
    one: "rubli rus",
    other: "rublis rus"
}, {
    id: "IDR",
    displayName: "rupiah indonesiane",
    symbol: "Rp",
    one: "rupiah indonesiane",
    other: "rupiah indonesianis"
}, {
    id: "INR",
    displayName: "rupie indiane",
    symbol: "₹",
    one: "rupie indiane",
    other: "rupiis indianis"
}, {
    id: "GBP",
    displayName: "sterline britaniche",
    symbol: "£",
    one: "sterline britaniche",
    other: "sterlinis britanichis"
}, {
    id: "KRW",
    displayName: "won de Coree dal Sud",
    symbol: "₩",
    one: "won de Coree dal Sud",
    other: "won de Coree dal Sud"
}, {
    id: "JPY",
    displayName: "yen gjaponês",
    symbol: "JP¥",
    one: "yen gjaponês",
    other: "yen gjaponês"
}, {
    id: "CNY",
    displayName: "yuan cinês",
    symbol: "CN¥",
    one: "yuan cinês",
    other: "yuan cinês"
}, {
    id: "PLN",
    displayName: "zloty polac",
    symbol: "zł",
    one: "zloty polac",
    other: "zloty polacs"
} ];

module.exports = inter;