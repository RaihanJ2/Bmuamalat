function defaults(targetObj) {
    for (var i = 1; i < arguments.length; i += 1) {
        if (arguments[i] && typeof arguments[i] === "object") {
            for (var propertyName in arguments[i]) {
                if (typeof targetObj[propertyName] === "undefined") {
                    targetObj[propertyName] = arguments[i][propertyName];
                }
            }
        }
    }
    return targetObj;
}

var P = require("./da.js"), inter = defaults({
    renderers: {}
}, P);

var _kl461 = {
    displayName: "AM/PM"
}, _kl462 = {
    all: {
        leap: "{0}bis"
    }
}, _kl463 = {
    displayName: "ugedag"
}, _kl464 = {
    displayName: "tidszone"
}, _kl465 = {
    a: "h a – h a",
    h: "h–h a"
}, _kl466 = [ "Before R.O.C.", "Minguo" ], _kl467 = {
    a: "h a – h a v",
    h: "h–h a v"
}, _kl468 = [ "S", "M", "T", "O", "T", "F", "L" ], _kl469 = {
    d: "MMM d–d",
    M: "MMM d – MMM d"
}, _kl4610 = {
    wide: [ "AH" ],
    abbreviated: [ "AH" ]
}, _kl4611 = {
    H: "HH.mm–HH.mm",
    m: "HH.mm–HH.mm"
}, _kl4612 = {
    H: "HH:mm–HH:mm",
    m: "HH:mm–HH:mm"
}, _kl4613 = {
    M: "y-MM – y-MM",
    y: "y-MM – y-MM"
}, _kl4614 = {
    M: "U MMM–MMM",
    y: "U MMM – U MMM"
}, _kl4615 = {
    d: "d.–d. MMM",
    M: "d. MMM – d. MMM"
}, _kl4616 = {
    one: "om {0} år",
    other: "om {0} år"
}, _kl4617 = [ "sø", "ma", "ti", "on", "to", "fr", "lø" ], _kl4618 = {
    H: "HH.mm–HH.mm v",
    m: "HH.mm–HH.mm v"
}, _kl4619 = {
    d: "dd/MM – dd/MM",
    M: "dd/MM – dd/MM"
}, _kl4620 = {
    M: "MM/y – MM/y G",
    y: "MM/y – MM/y G"
}, _kl4621 = {
    M: "MMM–MMM y G",
    y: "MMM y – MMM y G"
}, _kl4622 = {
    one: "om {0} md.",
    other: "om {0} md."
}, _kl4623 = {
    H: "HH:mm–HH:mm v",
    m: "HH:mm–HH:mm v"
}, _kl4624 = {
    d: "MM-dd – MM-dd",
    M: "MM-dd – MM-dd"
}, _kl4625 = {
    M: "U MMMM–MMMM",
    y: "U MMMM – U MMMM"
}, _kl4626 = {
    one: "om {0} uge",
    other: "om {0} uger"
}, _kl4627 = {
    one: "om {0} dag",
    other: "om {0} dage"
}, _kl4628 = {
    one: "om {0} kvt.",
    other: "om {0} kvt."
}, _kl4629 = {
    one: "om {0} min.",
    other: "om {0} min."
}, _kl4630 = {
    one: "om {0} sek.",
    other: "om {0} sek."
}, _kl4631 = {
    "0": "i år",
    "1": "næste år",
    "-1": "sidste år"
}, _kl4632 = {
    one: "om {0} time",
    other: "om {0} timer"
}, _kl4633 = {
    M: "MMMM–MMMM y G",
    y: "MMMM y – MMMM y G"
}, _kl4634 = [ "1. kvt.", "2. kvt.", "3. kvt.", "4. kvt." ], _kl4635 = [ "søn", "man", "tir", "ons", "tor", "fre", "lør" ], _kl4636 = {
    one: "om {0} måned",
    other: "om {0} måneder"
}, _kl4637 = {
    one: "om {0} minut",
    other: "om {0} minutter"
}, _kl4638 = {
    d: "E dd/MM – E dd/MM",
    M: "E dd/MM – E dd/MM"
}, _kl4639 = {
    one: "om {0} sekund",
    other: "om {0} sekunder"
}, _kl4640 = {
    one: "om {0} kvartal",
    other: "om {0} kvartaler"
}, _kl4641 = {
    "0": "denne md.",
    "1": "næste md.",
    "-1": "sidste md."
}, _kl4642 = {
    "0": "denne uge",
    "1": "næste uge",
    "-1": "sidste uge"
}, _kl4643 = {
    "0": "denne sø.",
    "1": "næste sø.",
    "-1": "sidste sø."
}, _kl4644 = {
    "0": "denne ma.",
    "1": "næste ma.",
    "-1": "sidste ma."
}, _kl4645 = {
    "0": "denne ti.",
    "1": "næste ti.",
    "-1": "sidste ti."
}, _kl4646 = {
    "0": "denne on.",
    "1": "næste on.",
    "-1": "sidste on."
}, _kl4647 = {
    "0": "denne to.",
    "1": "næste to.",
    "-1": "sidste to."
}, _kl4648 = {
    "0": "denne fr.",
    "1": "næste fr.",
    "-1": "sidste fr."
}, _kl4649 = {
    "0": "denne lø.",
    "1": "næste lø.",
    "-1": "sidste lø."
}, _kl4650 = [ "J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D" ], _kl4651 = {
    one: "for {0} år siden",
    other: "for {0} år siden"
}, _kl4652 = {
    "0": "denne søn.",
    "1": "næste sø.",
    "-1": "sidste søn."
}, _kl4653 = {
    d: "MM-dd, E – MM-dd, E",
    M: "MM-dd, E – MM-dd, E"
}, _kl4654 = {
    d: "MMM d, E – MMM d, E",
    M: "MMM d, E – MMM d, E"
}, _kl4655 = [ "søn.", "man.", "tir.", "ons.", "tor.", "fre.", "lør." ], _kl4656 = {
    "0": "dette kvt.",
    "1": "næste kvt.",
    "-1": "sidste kvt."
}, _kl4657 = {
    "0": "denne man.",
    "1": "næste man.",
    "-1": "sidste man."
}, _kl4658 = {
    "0": "denne tir.",
    "1": "næste tir.",
    "-1": "sidste tir."
}, _kl4659 = {
    "0": "denne ons.",
    "1": "næste ons.",
    "-1": "sidste ons."
}, _kl4660 = {
    "0": "denne tor.",
    "1": "næste tor.",
    "-1": "sidste tor."
}, _kl4661 = {
    "0": "denne fre.",
    "1": "næste fre.",
    "-1": "sidste fre."
}, _kl4662 = {
    "0": "denne lør.",
    "1": "næste lør.",
    "-1": "sidste lør."
}, _kl4663 = {
    wide: [ "ERA0", "ERA1" ],
    abbreviated: [ "ERA0", "ERA1" ]
}, _kl4664 = {
    one: "for {0} md. siden",
    other: "for {0} md. siden"
}, _kl4665 = {
    one: "for {0} uge siden",
    other: "for {0} uger siden"
}, _kl4666 = {
    one: "for {0} dag siden",
    other: "for {0} dage siden"
}, _kl4667 = [ "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" ], _kl4668 = {
    a: "h.mm a – h.mm a",
    h: "h.mm–h.mm a",
    m: "h.mm–h.mm a"
}, _kl4669 = [ "1. kvartal", "2. kvartal", "3. kvartal", "4. kvartal" ], _kl4670 = {
    one: "for {0} kvt. siden",
    other: "for {0} kvt. siden"
}, _kl4671 = {
    "0": "denne måned",
    "1": "næste måned",
    "-1": "sidste måned"
}, _kl4672 = {
    one: "for {0} min. siden",
    other: "for {0} min. siden"
}, _kl4673 = {
    one: "for {0} sek. siden",
    other: "for {0} sek. siden"
}, _kl4674 = {
    a: "h:mm a – h:mm a",
    h: "h:mm–h:mm a",
    m: "h:mm–h:mm a"
}, _kl4675 = {
    one: "for {0} time siden",
    other: "for {0} timer siden"
}, _kl4676 = {
    "0": "denne søndag",
    "1": "næste søndag",
    "-1": "sidste søndag"
}, _kl4677 = {
    "0": "denne mandag",
    "1": "næste mandag",
    "-1": "sidste mandag"
}, _kl4678 = {
    "0": "denne onsdag",
    "1": "næste onsdag",
    "-1": "sidste onsdag"
}, _kl4679 = {
    "0": "denne fredag",
    "1": "næste fredag",
    "-1": "sidste fredag"
}, _kl4680 = {
    "0": "denne lørdag",
    "1": "næste lørdag",
    "-1": "sidste lørdag"
}, _kl4681 = {
    one: "for {0} måned siden",
    other: "for {0} måneder siden"
}, _kl4682 = {
    d: "U MMM d–d",
    M: "U MMM d – MMM d",
    y: "U MMM d – U MMM d"
}, _kl4683 = [ "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13" ], _kl4684 = {
    one: "for {0} minut siden",
    other: "for {0} minutter siden"
}, _kl4685 = {
    relative: _kl4643
}, _kl4686 = {
    relative: _kl4644
}, _kl4687 = {
    relative: _kl4645
}, _kl4688 = {
    relative: _kl4646
}, _kl4689 = {
    relative: _kl4647
}, _kl4690 = {
    relative: _kl4648
}, _kl4691 = {
    relative: _kl4649
}, _kl4692 = {
    a: "h.mm a – h.mm a v",
    h: "h.mm–h.mm a v",
    m: "h.mm–h.mm a v"
}, _kl4693 = {
    "0": "dette kvartal",
    "1": "næste kvartal",
    "-1": "sidste kvartal"
}, _kl4694 = {
    one: "for {0} sekund siden",
    other: "for {0} sekunder siden"
}, _kl4695 = {
    "0": "denne tirsdag",
    "1": "næste tirsdag",
    "-1": "sidste tirsdag"
}, _kl4696 = {
    "0": "denne torsdag",
    "1": "næste torsdag",
    "-1": "sidste torsdag"
}, _kl4697 = {
    a: "h:mm a – h:mm a v",
    h: "h:mm–h:mm a v",
    m: "h:mm–h:mm a v"
}, _kl4698 = {
    relative: _kl4652
}, _kl4699 = {
    one: "for {0} kvartal siden",
    other: "for {0} kvartaler siden"
}, _kl46100 = {
    relative: _kl4657
}, _kl46101 = {
    relative: _kl4658
}, _kl46102 = {
    relative: _kl4659
}, _kl46103 = {
    relative: _kl4660
}, _kl46104 = {
    relative: _kl4661
}, _kl46105 = {
    relative: _kl4662
}, _kl46106 = [ "søndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "lørdag" ], _kl46107 = {
    relative: _kl4676
}, _kl46108 = {
    relative: _kl4677
}, _kl46109 = {
    relative: _kl4678
}, _kl46110 = {
    relative: _kl4679
}, _kl46111 = {
    relative: _kl4680
}, _kl46112 = {
    d: "y-MM-dd – y-MM-dd",
    M: "y-MM-dd – y-MM-dd",
    y: "y-MM-dd – y-MM-dd"
}, _kl46113 = {
    d: "E 'den' d. – E 'den' d. MMM",
    M: "E 'den' d. MMM – E 'den' d. MMM"
}, _kl46114 = {
    d: "d.–d. MMM y G",
    M: "d. MMM – d. MMM y G",
    y: "d. MMM y – d. MMM y G"
}, _kl46115 = {
    relative: _kl4695
}, _kl46116 = {
    relative: _kl4696
}, _kl46117 = {
    "0": "i dag",
    "1": "i morgen",
    "2": "i overmorgen",
    "-2": "i forgårs",
    "-1": "i går"
}, _kl46118 = {
    abbreviated: {
        leap: "{0}bis"
    },
    narrow: {
        leap: "{0}b"
    },
    wide: {
        leap: "{0}bis"
    }
}, _kl46119 = {
    d: "dd/MM/y – dd/MM/y G",
    M: "dd/MM/y – dd/MM/y G",
    y: "dd/MM/y – dd/MM/y G"
}, _kl46120 = [ "jan", "feb", "mar", "apr", "maj", "jun", "jul", "aug", "sep", "okt", "nov", "dec" ], _kl46121 = [ "M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12" ], _kl46122 = [ undefined, "zi", "chou", "yin", "mao", "chen", "si", "wu", "wei", "shen", "you", "xu" ], _kl46123 = {
    d: "U MMM d, E – MMM d, E",
    M: "U MMM d, E – MMM d, E",
    y: "U MMM d, E – U MMM d, E"
}, _kl46124 = [ "jan.", "feb.", "mar.", "apr.", "maj", "jun.", "jul.", "aug.", "sep.", "okt.", "nov.", "dec." ], _kl46125 = {
    d: "E dd/MM/y – E dd/MM/y G",
    M: "E dd/MM/y – E dd/MM/y G",
    y: "E dd/MM/y – E dd/MM/y G"
}, _kl46126 = {
    d: "y-MM-dd, E – y-MM-dd, E",
    M: "y-MM-dd, E – y-MM-dd, E",
    y: "y-MM-dd, E – y-MM-dd, E"
}, _kl46127 = {
    future: _kl4616,
    past: _kl4651
}, _kl46128 = {
    future: _kl4622,
    past: _kl4664
}, _kl46129 = [ "Muh.", "Saf.", "Rab. I", "Rab. II", "Jum. I", "Jum. II", "Raj.", "Sha.", "Ram.", "Shaw.", "Dhuʻl-Q.", "Dhuʻl-H." ], _kl46130 = {
    future: _kl4626,
    past: _kl4665
}, _kl46131 = {
    future: _kl4627,
    past: _kl4666
}, _kl46132 = [ "Tishri", "Heshvan", "Kislev", "Tevet", "Shevat", "Adar I", "Adar", "Nisan", "Iyar", "Sivan", "Tamuz", "Av", "Elul" ], _kl46133 = {
    future: _kl4628,
    past: _kl4670
}, _kl46134 = {
    future: _kl4629,
    past: _kl4672
}, _kl46135 = {
    future: _kl4630,
    past: _kl4673
}, _kl46136 = [ "januar", "februar", "marts", "april", "maj", "juni", "juli", "august", "september", "oktober", "november", "december" ], _kl46137 = {
    future: _kl4632,
    past: _kl4675
}, _kl46138 = [ "Farvardin", "Ordibehesht", "Khordad", "Tir", "Mordad", "Shahrivar", "Mehr", "Aban", "Azar", "Dey", "Bahman", "Esfand" ], _kl46139 = [ "Tout", "Baba", "Hator", "Kiahk", "Toba", "Amshir", "Baramhat", "Baramouda", "Bashans", "Paona", "Epep", "Mesra", "Nasie" ], _kl46140 = {
    future: _kl4636,
    past: _kl4681
}, _kl46141 = {
    future: _kl4637,
    past: _kl4684
}, _kl46142 = [ "Meskerem", "Tekemt", "Hedar", "Tahsas", "Ter", "Yekatit", "Megabit", "Miazia", "Genbot", "Sene", "Hamle", "Nehasse", "Pagumen" ], _kl46143 = {
    d: "E 'den' d. – E 'den' d. MMM y G",
    M: "E 'den' d. MMM – E 'den' d. MMM y G",
    y: "E 'den' d. MMM y – E 'den' d. MMM y G"
}, _kl46144 = {
    future: _kl4639,
    past: _kl4694
}, _kl46145 = [ "Chaitra", "Vaisakha", "Jyaistha", "Asadha", "Sravana", "Bhadra", "Asvina", "Kartika", "Agrahayana", "Pausa", "Magha", "Phalguna" ], _kl46146 = {
    future: _kl4640,
    past: _kl4699
}, _kl46147 = {
    midnight: "midnat",
    am: "AM",
    pm: "PM",
    morning1: "morgen",
    morning2: "formiddag",
    afternoon1: "eftermiddag",
    evening1: "aften",
    night1: "nat"
}, _kl46148 = [ "Muharram", "Safar", "Rabiʻ I", "Rabiʻ II", "Jumada I", "Jumada II", "Rajab", "Shaʻban", "Ramadan", "Shawwal", "Dhuʻl-Qiʻdah", "Dhuʻl-Hijjah" ], _kl46149 = {
    displayName: "s",
    relativeTime: _kl46135
}, _kl46150 = {
    abbreviated: _kl4634,
    narrow: [ "1", "2", "3", "4" ],
    wide: _kl4669
}, _kl46151 = {
    displayName: "t",
    relativeTime: _kl46137
}, _kl46152 = {
    displayName: "min",
    relativeTime: _kl46134
}, _kl46153 = {
    displayName: "t.",
    relativeTime: _kl46137
}, _kl46154 = {
    displayName: "min.",
    relativeTime: _kl46134
}, _kl46155 = {
    displayName: "sek.",
    relativeTime: _kl46135
}, _kl46156 = {
    displayName: "time",
    relativeTime: _kl46137
}, _kl46157 = {
    displayName: "minut",
    relativeTime: _kl46141
}, _kl46158 = {
    midnight: "midnat",
    am: "a",
    pm: "p",
    morning1: "om morgenen",
    morning2: "om formiddagen",
    afternoon1: "om eftermiddagen",
    evening1: "om aftenen",
    night1: "om natten"
}, _kl46159 = {
    midnight: "midnat",
    am: "AM",
    pm: "PM",
    morning1: "om morgenen",
    morning2: "om formiddagen",
    afternoon1: "om eftermiddagen",
    evening1: "om aftenen",
    night1: "om natten"
}, _kl46160 = {
    displayName: "sekund",
    relative: [ "nu" ],
    relativeTime: _kl46144
}, _kl46161 = {
    displayName: "år",
    relative: _kl4631,
    relativeTime: _kl46127
}, _kl46162 = {
    displayName: "md.",
    relative: _kl4641,
    relativeTime: _kl46128
}, _kl46163 = {
    format: _kl46118,
    numeric: _kl462,
    standAlone: _kl46118
}, _kl46164 = {
    displayName: "uge",
    relative: _kl4642,
    relativeTime: _kl46130
}, _kl46165 = {
    displayName: "kvt.",
    relative: _kl4656,
    relativeTime: _kl46133
}, _kl46166 = {
    abbreviated: _kl4635,
    narrow: _kl468,
    wide: _kl46106,
    "short": _kl4617
}, _kl46167 = {
    displayName: "måned",
    relative: _kl4671,
    relativeTime: _kl46140
}, _kl46168 = {
    abbreviated: _kl4655,
    narrow: _kl468,
    wide: _kl46106,
    "short": _kl4617
}, _kl46169 = {
    displayName: "dag",
    relative: _kl46117,
    relativeTime: _kl46131
}, _kl46170 = {
    abbreviated: _kl46121,
    narrow: _kl4667,
    wide: _kl46121
}, _kl46171 = {
    displayName: "kvartal",
    relative: _kl4693,
    relativeTime: _kl46146
}, _kl46172 = {
    abbreviated: _kl46122,
    narrow: _kl46122,
    wide: _kl46122
}, _kl46173 = {
    abbreviated: _kl46120,
    narrow: _kl4650,
    wide: _kl46136
}, _kl46174 = {
    format: _kl46172
}, _kl46175 = {
    abbreviated: _kl46124,
    narrow: _kl4650,
    wide: _kl46136
}, _kl46176 = {
    abbreviated: _kl46132,
    narrow: _kl4683,
    wide: _kl46132
}, _kl46177 = {
    abbreviated: _kl46138,
    narrow: _kl4667,
    wide: _kl46138
}, _kl46178 = {
    format: _kl46150,
    standAlone: _kl46150
}, _kl46179 = {
    abbreviated: _kl46139,
    narrow: _kl4683,
    wide: _kl46139
}, _kl46180 = {
    abbreviated: _kl46129,
    narrow: _kl4667,
    wide: _kl46148
}, _kl46181 = {
    abbreviated: _kl46142,
    narrow: _kl4683,
    wide: _kl46142
}, _kl46182 = {
    abbreviated: _kl46145,
    narrow: _kl4667,
    wide: _kl46145
}, _kl46183 = {
    fullDate: "EEEE d. MMMM y G",
    longDate: "d. MMMM y G",
    mediumDate: "d. MMM y G",
    shortDate: "d/M/y",
    fullTime: "h.mm.ss a zzzz",
    longTime: "h.mm.ss a z",
    mediumTime: "h.mm.ss a",
    shortTime: "h.mm a",
    shortDateTime: "d/M/y h.mm a",
    mediumDateTime: "d. MMM y G h.mm.ss a",
    longDateTime: "d. MMMM y G h.mm.ss a z",
    fullDateTime: "EEEE d. MMMM y G h.mm.ss a zzzz"
}, _kl46184 = {
    fullDate: "r(U) MMMM d, EEEE",
    longDate: "r(U) MMMM d",
    mediumDate: "r MMM d",
    shortDate: "r-MM-dd",
    fullTime: "h.mm.ss a zzzz",
    longTime: "h.mm.ss a z",
    mediumTime: "h.mm.ss a",
    shortTime: "h.mm a",
    shortDateTime: "r-MM-dd h.mm a",
    mediumDateTime: "r MMM d h.mm.ss a",
    longDateTime: "r(U) MMMM d h.mm.ss a z",
    fullDateTime: "r(U) MMMM d, EEEE h.mm.ss a zzzz"
}, _kl46185 = {
    basic: _kl46183,
    cldr: P.calendars.buddhist.dateFormats
}, _kl46186 = {
    abbreviated: _kl46147,
    narrow: _kl46147,
    wide: _kl46147
}, _kl46187 = {
    format: _kl46168,
    standAlone: _kl46166
}, _kl46188 = {
    format: _kl46170,
    standAlone: _kl46170
}, _kl46189 = {
    abbreviated: _kl46159,
    narrow: _kl46158,
    wide: _kl46159
}, _kl46190 = {
    d: "d",
    E: "ccc",
    Ed: "d, E",
    Gy: "r U",
    GyMMM: "r(U) MMM",
    GyMMMd: "r MMM d",
    GyMMMEd: "r(U) MMM d, E",
    h: "h a",
    H: "HH",
    hm: "h:mm a",
    Hm: "HH:mm",
    hms: "h:mm:ss a",
    Hms: "HH:mm:ss",
    M: "L",
    Md: "MM-dd",
    MEd: "MM-dd, E",
    MMM: "LLL",
    MMMd: "MMM d",
    MMMEd: "MMM d, E",
    MMMMd: "MMMM d",
    ms: "mm:ss",
    UM: "U MM",
    UMd: "U MM-d",
    UMMM: "U MMM",
    UMMMd: "U MMM d",
    y: "r(U)",
    yMd: "r-MM-dd",
    yyyy: "r(U)",
    yyyyM: "r-MM",
    yyyyMd: "r-MM-dd",
    yyyyMEd: "r-MM-dd, E",
    yyyyMMM: "r(U) MMM",
    yyyyMMMd: "r MMM d",
    yyyyMMMEd: "r(U) MMM d, E",
    yyyyMMMM: "r(U) MMMM",
    yyyyQQQ: "r(U) QQQ",
    yyyyQQQQ: "r(U) QQQQ"
}, _kl46191 = {
    format: _kl46175,
    standAlone: _kl46173
}, _kl46192 = [ undefined, "jia-zi", "yi-chou", "bing-yin", "ding-mao", "wu-chen", "ji-si", "geng-wu", "xin-wei", "ren-shen", "gui-you", "jia-xu", "yi-hai", "bing-zi", "ding-chou", "wu-yin", "ji-mao", "geng-chen", "xin-si", "ren-wu", "gui-wei", "jia-shen", "yi-you", "bing-xu", "ding-hai", "wu-zi", "ji-chou", "geng-yin", "xin-mao", "ren-chen", "gui-si", "jia-wu", "yi-wei", "bing-shen", "ding-you", "wu-xu", "ji-hai", "geng-zi", "xin-chou", "ren-yin", "gui-mao", "jia-chen", "yi-si", "bing-wu", "ding-wei", "wu-shen", "ji-you", "geng-xu", "xin-hai", "ren-zi", "gui-chou", "jia-yin", "yi-mao", "bing-chen", "ding-si", "wu-wu", "ji-wei", "geng-shen", "xin-you", "ren-xu" ], _kl46193 = {
    format: _kl46180,
    standAlone: _kl46180
}, _kl46194 = {
    basic: _kl46184,
    cldr: _kl46190
}, _kl46195 = {
    format: _kl46189,
    standAlone: _kl46186
}, _kl46196 = {
    d: {
        d: "d–d"
    },
    h: _kl465,
    H: {
        H: "HH–HH"
    },
    hm: _kl4674,
    Hm: _kl4612,
    hmv: _kl4697,
    Hmv: _kl4623,
    hv: _kl467,
    Hv: {
        H: "HH–HH v"
    },
    M: {
        M: "MM–MM"
    },
    Md: _kl4624,
    MEd: _kl4653,
    MMM: {
        M: "LLL–LLL"
    },
    MMMd: _kl469,
    MMMEd: _kl4654,
    y: {
        y: "U–U"
    },
    yM: _kl4613,
    yMd: _kl46112,
    yMEd: _kl46126,
    yMMM: _kl4614,
    yMMMd: _kl4682,
    yMMMEd: _kl46123,
    yMMMM: _kl4625
}, _kl46197 = {
    d: {
        d: "d.–d."
    },
    h: _kl465,
    H: {
        H: "HH–HH"
    },
    hm: _kl4668,
    Hm: _kl4611,
    hmv: _kl4692,
    Hmv: _kl4618,
    hv: _kl467,
    Hv: {
        H: "HH–HH v"
    },
    M: {
        M: "M–M"
    },
    Md: _kl4619,
    MEd: _kl4638,
    MMM: {
        M: "MMM–MMM"
    },
    MMMd: _kl4615,
    MMMEd: _kl46113,
    y: {
        y: "y–y G"
    },
    yM: _kl4620,
    yMd: _kl46119,
    yMEd: _kl46125,
    yMMM: _kl4621,
    yMMMd: _kl46114,
    yMMMEd: _kl46143,
    yMMMM: _kl4633
}, _kl46198 = {
    abbreviated: _kl46192,
    narrow: _kl46192,
    wide: _kl46192
}, _kl46199 = {
    format: _kl46198
}, _kl46200 = [ "Taika (645–650)", "Hakuchi (650–671)", "Hakuhō (672–686)", "Shuchō (686–701)", "Taihō (701–704)", "Keiun (704–708)", "Wadō (708–715)", "Reiki (715–717)", "Yōrō (717–724)", "Jinki (724–729)", "Tenpyō (729–749)", "Tenpyō-kampō (749-749)", "Tenpyō-shōhō (749-757)", "Tenpyō-hōji (757-765)", "Tenpyō-jingo (765-767)", "Jingo-keiun (767-770)", "Hōki (770–780)", "Ten-ō (781-782)", "Enryaku (782–806)", "Daidō (806–810)", "Kōnin (810–824)", "Tenchō (824–834)", "Jōwa (834–848)", "Kajō (848–851)", "Ninju (851–854)", "Saikō (854–857)", "Ten-an (857-859)", "Jōgan (859–877)", "Gangyō (877–885)", "Ninna (885–889)", "Kanpyō (889–898)", "Shōtai (898–901)", "Engi (901–923)", "Enchō (923–931)", "Jōhei (931–938)", "Tengyō (938–947)", "Tenryaku (947–957)", "Tentoku (957–961)", "Ōwa (961–964)", "Kōhō (964–968)", "Anna (968–970)", "Tenroku (970–973)", "Ten’en (973–976)", "Jōgen (976–978)", "Tengen (978–983)", "Eikan (983–985)", "Kanna (985–987)", "Eien (987–989)", "Eiso (989–990)", "Shōryaku (990–995)", "Chōtoku (995–999)", "Chōhō (999–1004)", "Kankō (1004–1012)", "Chōwa (1012–1017)", "Kannin (1017–1021)", "Jian (1021–1024)", "Manju (1024–1028)", "Chōgen (1028–1037)", "Chōryaku (1037–1040)", "Chōkyū (1040–1044)", "Kantoku (1044–1046)", "Eishō (1046–1053)", "Tengi (1053–1058)", "Kōhei (1058–1065)", "Jiryaku (1065–1069)", "Enkyū (1069–1074)", "Shōho (1074–1077)", "Shōryaku (1077–1081)", "Eihō (1081–1084)", "Ōtoku (1084–1087)", "Kanji (1087–1094)", "Kahō (1094–1096)", "Eichō (1096–1097)", "Jōtoku (1097–1099)", "Kōwa (1099–1104)", "Chōji (1104–1106)", "Kashō (1106–1108)", "Tennin (1108–1110)", "Ten-ei (1110-1113)", "Eikyū (1113–1118)", "Gen’ei (1118–1120)", "Hōan (1120–1124)", "Tenji (1124–1126)", "Daiji (1126–1131)", "Tenshō (1131–1132)", "Chōshō (1132–1135)", "Hōen (1135–1141)", "Eiji (1141–1142)", "Kōji (1142–1144)", "Ten’yō (1144–1145)", "Kyūan (1145–1151)", "Ninpei (1151–1154)", "Kyūju (1154–1156)", "Hōgen (1156–1159)", "Heiji (1159–1160)", "Eiryaku (1160–1161)", "Ōho (1161–1163)", "Chōkan (1163–1165)", "Eiman (1165–1166)", "Nin’an (1166–1169)", "Kaō (1169–1171)", "Shōan (1171–1175)", "Angen (1175–1177)", "Jishō (1177–1181)", "Yōwa (1181–1182)", "Juei (1182–1184)", "Genryaku (1184–1185)", "Bunji (1185–1190)", "Kenkyū (1190–1199)", "Shōji (1199–1201)", "Kennin (1201–1204)", "Genkyū (1204–1206)", "Ken’ei (1206–1207)", "Jōgen (1207–1211)", "Kenryaku (1211–1213)", "Kenpō (1213–1219)", "Jōkyū (1219–1222)", "Jōō (1222–1224)", "Gennin (1224–1225)", "Karoku (1225–1227)", "Antei (1227–1229)", "Kanki (1229–1232)", "Jōei (1232–1233)", "Tenpuku (1233–1234)", "Bunryaku (1234–1235)", "Katei (1235–1238)", "Ryakunin (1238–1239)", "En’ō (1239–1240)", "Ninji (1240–1243)", "Kangen (1243–1247)", "Hōji (1247–1249)", "Kenchō (1249–1256)", "Kōgen (1256–1257)", "Shōka (1257–1259)", "Shōgen (1259–1260)", "Bun’ō (1260–1261)", "Kōchō (1261–1264)", "Bun’ei (1264–1275)", "Kenji (1275–1278)", "Kōan (1278–1288)", "Shōō (1288–1293)", "Einin (1293–1299)", "Shōan (1299–1302)", "Kengen (1302–1303)", "Kagen (1303–1306)", "Tokuji (1306–1308)", "Enkyō (1308–1311)", "Ōchō (1311–1312)", "Shōwa (1312–1317)", "Bunpō (1317–1319)", "Genō (1319–1321)", "Genkō (1321–1324)", "Shōchū (1324–1326)", "Karyaku (1326–1329)", "Gentoku (1329–1331)", "Genkō (1331–1334)", "Kenmu (1334–1336)", "Engen (1336–1340)", "Kōkoku (1340–1346)", "Shōhei (1346–1370)", "Kentoku (1370–1372)", "Bunchū (1372–1375)", "Tenju (1375–1379)", "Kōryaku (1379–1381)", "Kōwa (1381–1384)", "Genchū (1384–1392)", "Meitoku (1384–1387)", "Kakei (1387–1389)", "Kōō (1389–1390)", "Meitoku (1390–1394)", "Ōei (1394–1428)", "Shōchō (1428–1429)", "Eikyō (1429–1441)", "Kakitsu (1441–1444)", "Bun’an (1444–1449)", "Hōtoku (1449–1452)", "Kyōtoku (1452–1455)", "Kōshō (1455–1457)", "Chōroku (1457–1460)", "Kanshō (1460–1466)", "Bunshō (1466–1467)", "Ōnin (1467–1469)", "Bunmei (1469–1487)", "Chōkyō (1487–1489)", "Entoku (1489–1492)", "Meiō (1492–1501)", "Bunki (1501–1504)", "Eishō (1504–1521)", "Taiei (1521–1528)", "Kyōroku (1528–1532)", "Tenbun (1532–1555)", "Kōji (1555–1558)", "Eiroku (1558–1570)", "Genki (1570–1573)", "Tenshō (1573–1592)", "Bunroku (1592–1596)", "Keichō (1596–1615)", "Genna (1615–1624)", "Kan’ei (1624–1644)", "Shōho (1644–1648)", "Keian (1648–1652)", "Jōō (1652–1655)", "Meireki (1655–1658)", "Manji (1658–1661)", "Kanbun (1661–1673)", "Enpō (1673–1681)", "Tenna (1681–1684)", "Jōkyō (1684–1688)", "Genroku (1688–1704)", "Hōei (1704–1711)", "Shōtoku (1711–1716)", "Kyōhō (1716–1736)", "Genbun (1736–1741)", "Kanpō (1741–1744)", "Enkyō (1744–1748)", "Kan’en (1748–1751)", "Hōreki (1751–1764)", "Meiwa (1764–1772)", "An’ei (1772–1781)", "Tenmei (1781–1789)", "Kansei (1789–1801)", "Kyōwa (1801–1804)", "Bunka (1804–1818)", "Bunsei (1818–1830)", "Tenpō (1830–1844)", "Kōka (1844–1848)", "Kaei (1848–1854)", "Ansei (1854–1860)", "Man’en (1860–1861)", "Bunkyū (1861–1864)", "Genji (1864–1865)", "Keiō (1865–1868)", "Meiji", "Taishō", "Shōwa", "Heisei" ], _kl46201 = {
    dayParts: _kl46174,
    days: _kl46199,
    months: _kl46199,
    years: _kl46199,
    zodiacs: _kl46174
}, _kl46202 = {
    era: {
        displayName: "æra"
    },
    year: _kl46161,
    "year-short": _kl46161,
    "year-narrow": _kl46161,
    quarter: _kl46171,
    "quarter-short": _kl46165,
    "quarter-narrow": _kl46165,
    month: _kl46167,
    "month-short": _kl46162,
    "month-narrow": _kl46162,
    week: _kl46164,
    "week-short": _kl46164,
    "week-narrow": _kl46164,
    day: _kl46169,
    "day-short": _kl46169,
    "day-narrow": _kl46169,
    weekday: _kl463,
    dayperiod: _kl461,
    hour: _kl46156,
    "hour-short": _kl46153,
    "hour-narrow": _kl46151,
    minute: _kl46157,
    "minute-short": _kl46154,
    "minute-narrow": _kl46152,
    second: _kl46160,
    "second-short": _kl46155,
    "second-narrow": _kl46149,
    zone: _kl464,
    sun: _kl46107,
    "sun-short": _kl4698,
    "sun-narrow": _kl4685,
    mon: _kl46108,
    "mon-short": _kl46100,
    "mon-narrow": _kl4686,
    tue: _kl46115,
    "tue-short": _kl46101,
    "tue-narrow": _kl4687,
    wed: _kl46109,
    "wed-short": _kl46102,
    "wed-narrow": _kl4688,
    thu: _kl46116,
    "thu-short": _kl46103,
    "thu-narrow": _kl4689,
    fri: _kl46110,
    "fri-short": _kl46104,
    "fri-narrow": _kl4690,
    sat: _kl46111,
    "sat-short": _kl46105,
    "sat-narrow": _kl4691
}, _kl46203 = {
    dateFormats: {
        basic: {},
        cldr: {}
    },
    fields: _kl46202
}, _kl46204 = {
    dateFormats: _kl46185,
    datePartsOrder: "dmy",
    dateIntervalFormats: _kl46197,
    dateIntervalFallbackFormat: "{0} – {1}",
    dayNames: _kl46187,
    dayPeriods: _kl46195,
    monthNames: _kl46193,
    eraNames: _kl4610,
    quarterNames: _kl46178,
    fields: _kl46202
}, _kl46205 = {
    dateFormats: _kl46194,
    datePartsOrder: "md",
    dateIntervalFormats: _kl46196,
    dateIntervalFallbackFormat: "{0} – {1}",
    dayNames: _kl46187,
    dayPeriods: _kl46195,
    cyclicNames: _kl46201,
    monthNames: _kl46188,
    monthPatterns: _kl46163,
    quarterNames: _kl46178,
    fields: _kl46202
};

inter.id = "da_gl";

inter.calendars = {
    buddhist: {
        dateFormats: _kl46185,
        datePartsOrder: "dmy",
        dateIntervalFormats: _kl46197,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _kl46187,
        dayPeriods: _kl46195,
        monthNames: _kl46191,
        eraNames: {
            wide: [ "BE" ],
            abbreviated: [ "BE" ]
        },
        quarterNames: _kl46178,
        fields: _kl46202
    },
    chinese: _kl46205,
    coptic: {
        dateFormats: _kl46185,
        datePartsOrder: "dmy",
        dateIntervalFormats: _kl46197,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _kl46187,
        dayPeriods: _kl46195,
        monthNames: {
            format: _kl46179,
            standAlone: _kl46179
        },
        eraNames: _kl4663,
        quarterNames: _kl46178,
        fields: _kl46202
    },
    dangi: _kl46205,
    ethioaa: _kl46203,
    ethiopic: {
        dateFormats: _kl46185,
        datePartsOrder: "dmy",
        dateIntervalFormats: _kl46197,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _kl46187,
        dayPeriods: _kl46195,
        monthNames: {
            format: _kl46181,
            standAlone: _kl46181
        },
        eraNames: _kl4663,
        quarterNames: _kl46178,
        fields: _kl46202
    },
    gregorian: {
        dateFormats: {
            basic: {
                fullDate: "EEEE 'den' d. MMMM y",
                longDate: "d. MMMM y",
                mediumDate: "d. MMM y",
                shortDate: "dd/MM/y",
                fullTime: "h.mm.ss a zzzz",
                longTime: "h.mm.ss a z",
                mediumTime: "h.mm.ss a",
                shortTime: "h.mm a",
                shortDateTime: "dd/MM/y h.mm a",
                mediumDateTime: "d. MMM y h.mm.ss a",
                longDateTime: "d. MMMM y 'kl'. h.mm.ss a z",
                fullDateTime: "EEEE 'den' d. MMMM y 'kl'. h.mm.ss a zzzz"
            },
            cldr: {
                d: "d.",
                E: "ccc",
                Ed: "E 'den' d.",
                Ehm: "E h.mm a",
                EHm: "E HH.mm",
                Ehms: "E h.mm.ss a",
                EHms: "E HH.mm.ss",
                Gy: "y G",
                GyMMM: "MMM y G",
                GyMMMd: "d. MMM y G",
                GyMMMEd: "E d. MMM y G",
                h: "h a",
                H: "HH",
                hm: "h.mm a",
                Hm: "HH.mm",
                hms: "h.mm.ss a",
                Hms: "HH.mm.ss",
                hmsv: "h.mm.ss a v",
                Hmsv: "HH.mm.ss v",
                hmv: "h.mm a v",
                Hmv: "HH.mm v",
                M: "M",
                Md: "d/M",
                MEd: "E d/M",
                MMdd: "dd/MM",
                MMM: "MMM",
                MMMd: "d. MMM",
                MMMEd: "E d. MMM",
                MMMMd: "d. MMMM",
                MMMMEd: "E d. MMMM",
                ms: "mm.ss",
                y: "y",
                yM: "M/y",
                yMd: "d/M/y",
                yMEd: "E d/M/y",
                yMM: "MM/y",
                yMMM: "MMM y",
                yMMMd: "d. MMM y",
                yMMMEd: "E d. MMM y",
                yMMMM: "MMMM y",
                yQQQ: "QQQ y",
                yQQQQ: "QQQQ y"
            }
        },
        datePartsOrder: "dmy",
        dateIntervalFormats: {
            d: {
                d: "d.–d."
            },
            h: _kl465,
            H: {
                H: "HH–HH"
            },
            hm: _kl4668,
            Hm: _kl4611,
            hmv: _kl4692,
            Hmv: _kl4618,
            hv: _kl467,
            Hv: {
                H: "HH–HH v"
            },
            M: {
                M: "M–M"
            },
            Md: _kl4619,
            MEd: _kl4638,
            MMM: {
                M: "MMM–MMM"
            },
            MMMd: _kl4615,
            MMMEd: _kl46113,
            y: {
                y: "y–y"
            },
            yM: {
                M: "MM/y – MM/y",
                y: "MM/y – MM/y"
            },
            yMd: {
                d: "dd/MM/y – dd/MM/y",
                M: "dd/MM/y – dd/MM/y",
                y: "dd/MM/y – dd/MM/y"
            },
            yMEd: {
                d: "E dd/MM/y – E dd/MM/y",
                M: "E dd/MM/y – E dd/MM/y",
                y: "E dd/MM/y – E dd/MM/y"
            },
            yMMM: {
                M: "MMM–MMM y",
                y: "MMM y – MMM y"
            },
            yMMMd: {
                d: "d.–d. MMM y",
                M: "d. MMM – d. MMM y",
                y: "d. MMM y – d. MMM y"
            },
            yMMMEd: {
                d: "E 'den' d. – E 'den' d. MMM y",
                M: "E 'den' d. MMM – E 'den' d. MMM y",
                y: "E 'den' d. MMM y – E 'den' d. MMM y"
            },
            yMMMM: {
                M: "MMMM–MMMM y",
                y: "MMMM y – MMMM y"
            }
        },
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _kl46187,
        dayPeriods: _kl46195,
        monthNames: _kl46191,
        eraNames: {
            wide: [ "f.Kr.", "e.Kr." ],
            abbreviated: [ "f.Kr.", "e.Kr." ]
        },
        quarterNames: _kl46178,
        fields: _kl46202
    },
    hebrew: {
        dateFormats: _kl46185,
        datePartsOrder: "dmy",
        dateIntervalFormats: _kl46197,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _kl46187,
        dayPeriods: _kl46195,
        monthNames: {
            format: _kl46176,
            standAlone: _kl46176
        },
        eraNames: {
            wide: [ "AM" ],
            abbreviated: [ "AM" ]
        },
        quarterNames: _kl46178,
        fields: _kl46202
    },
    indian: {
        dateFormats: _kl46185,
        datePartsOrder: "dmy",
        dateIntervalFormats: _kl46197,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _kl46187,
        dayPeriods: _kl46195,
        monthNames: {
            format: _kl46182,
            standAlone: _kl46182
        },
        eraNames: {
            wide: [ "Saka" ],
            abbreviated: [ "Saka" ]
        },
        quarterNames: _kl46178,
        fields: _kl46202
    },
    islamic: _kl46204,
    "islamic-umalqura": _kl46204,
    "islamic-tbla": _kl46204,
    "islamic-civil": _kl46204,
    "islamic-rgsa": _kl46204,
    iso8601: _kl46203,
    japanese: {
        dateFormats: _kl46185,
        datePartsOrder: "dmy",
        dateIntervalFormats: _kl46197,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _kl46187,
        dayPeriods: _kl46195,
        monthNames: _kl46191,
        eraNames: {
            wide: _kl46200,
            abbreviated: _kl46200
        },
        quarterNames: _kl46178,
        fields: _kl46202
    },
    persian: {
        dateFormats: _kl46185,
        datePartsOrder: "dmy",
        dateIntervalFormats: _kl46197,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _kl46187,
        dayPeriods: _kl46195,
        monthNames: {
            format: _kl46177,
            standAlone: _kl46177
        },
        eraNames: {
            wide: [ "AP" ],
            abbreviated: [ "AP" ]
        },
        quarterNames: _kl46178,
        fields: _kl46202
    },
    roc: {
        dateFormats: _kl46185,
        datePartsOrder: "dmy",
        dateIntervalFormats: _kl46197,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _kl46187,
        dayPeriods: _kl46195,
        monthNames: _kl46191,
        eraNames: {
            wide: _kl466,
            abbreviated: _kl466
        },
        quarterNames: _kl46178,
        fields: _kl46202
    },
    islamicc: _kl46203
};

inter.pluralRule = function(n) {
    var i = Math.floor(Math.abs(n)), t = parseInt(n.toString().replace(/^[^.]*\.?|0+$/g, ""), 10) || 0;
    if (typeof n === "string") n = parseInt(n, 10);
    if (n === 1 || !(t === 0) && (i === 0 || i === 1)) return "one";
    return "other";
};

inter.renderDigitsOrdinal = function(n) {
    if (n < 0) return "−" + this.renderDigitsOrdinal(-n);
    if (n >= 0) return this.renderNumber(n, "#,##0") + ".";
};

inter.renderSpelloutNumbering = function(n) {
    if (n < 0) return "−" + this.renderSpelloutNumbering(-n);
    if (n >= 0) return this.renderSpelloutCardinalCommon(n);
};

inter.renderArmenianUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderArmenianUpper(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e4) return this.renderNumber(n, "#,##0");
    if (n >= 9e3) return "Ք" + (n === 9e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 8e3) return "Փ" + (n === 8e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 7e3) return "Ւ" + (n === 7e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 6e3) return "Ց" + (n === 6e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 5e3) return "Ր" + (n === 5e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 4e3) return "Տ" + (n === 4e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 3e3) return "Վ" + (n === 3e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 2e3) return "Ս" + (n === 2e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 1e3) return "Ռ" + (n === 1e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 900) return "Ջ" + (n === 900 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 800) return "Պ" + (n === 800 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 700) return "Չ" + (n === 700 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 600) return "Ո" + (n === 600 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 500) return "Շ" + (n === 500 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 400) return "Ն" + (n === 400 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 300) return "Յ" + (n === 300 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 200) return "Մ" + (n === 200 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 100) return "Ճ" + (n === 100 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 90) return "Ղ" + (n === 90 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 80) return "Ձ" + (n === 80 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 70) return "Հ" + (n === 70 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 60) return "Կ" + (n === 60 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 50) return "Ծ" + (n === 50 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 40) return "Խ" + (n === 40 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 30) return "Լ" + (n === 30 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 20) return "Ի" + (n === 20 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 10) return "Ժ" + (n === 10 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 9) return "Թ";
    if (n >= 8) return "Ը";
    if (n >= 7) return "Է";
    if (n >= 6) return "Զ";
    if (n >= 5) return "Ե";
    if (n >= 4) return "Դ";
    if (n >= 3) return "Գ";
    if (n >= 2) return "Բ";
    if (n >= 1) return "Ա";
    if (n >= 0) return "0";
};

inter.renderArmenianLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderArmenianLower(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e4) return this.renderNumber(n, "#,##0");
    if (n >= 9e3) return "ք" + (n === 9e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 8e3) return "փ" + (n === 8e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 7e3) return "ւ" + (n === 7e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 6e3) return "ց" + (n === 6e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 5e3) return "ր" + (n === 5e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 4e3) return "տ" + (n === 4e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 3e3) return "վ" + (n === 3e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 2e3) return "ս" + (n === 2e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 1e3) return "ռ" + (n === 1e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 900) return "ջ" + (n === 900 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 800) return "պ" + (n === 800 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 700) return "չ" + (n === 700 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 600) return "ո" + (n === 600 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 500) return "շ" + (n === 500 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 400) return "ն" + (n === 400 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 300) return "յ" + (n === 300 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 200) return "մ" + (n === 200 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 100) return "ճ" + (n === 100 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 90) return "ղ" + (n === 90 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 80) return "ձ" + (n === 80 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 70) return "հ" + (n === 70 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 60) return "կ" + (n === 60 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 50) return "ծ" + (n === 50 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 40) return "խ" + (n === 40 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 30) return "լ" + (n === 30 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 20) return "ի" + (n === 20 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 10) return "ժ" + (n === 10 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 9) return "թ";
    if (n >= 8) return "ը";
    if (n >= 7) return "է";
    if (n >= 6) return "զ";
    if (n >= 5) return "ե";
    if (n >= 4) return "դ";
    if (n >= 3) return "գ";
    if (n >= 2) return "բ";
    if (n >= 1) return "ա";
    if (n >= 0) return "0";
};

inter.renderCyrillicLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderCyrillicLower(-n);
    if (isFractional && n > 1) return this.renderCyrillicLower(Math.floor(n)) + "." + this.renderCyrillicLower(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e15) return "҂҂҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e15)) + (n === 1e15 ? "" : " " + this.renderCyrillicLower(n % 1e15));
    if (n >= 1e12) return "҂҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e12)) + (n === 1e12 ? "" : " " + this.renderCyrillicLower(n % 1e12));
    if (n >= 1e9) return "҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e9)) + (n === 1e9 ? "" : " " + this.renderCyrillicLower(n % 1e9));
    if (n >= 1e6) return "҂҂" + this.renderCyrillicLower(Math.floor(n / 1e6)) + (n === 1e6 ? "" : " " + this.renderCyrillicLower(n % 1e6));
    if (n >= 11e3) return this.renderCyrillicLowerThousands(Math.floor(n / 1e4)) + (n === 11e3 ? "" : " " + this.renderCyrillicLower(n % 1e4));
    if (n >= 1e4) return "҂" + this.renderCyrillicLower(Math.floor(n / 1e4)) + (n === 1e4 ? "" : " " + this.renderCyrillicLower(n % 1e4));
    if (n >= 1e3) return "҂" + this.renderCyrillicLower110(Math.floor(n / 1e3)) + this.renderCyrillicLowerPost(n % 1e3);
    if (n >= 900) return "ц" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 801) return "ѿ" + this.renderCyrillicLower(n % 100);
    if (n >= 800) return "ѿ҃";
    if (n >= 700) return "ѱ" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 600) return "х" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 500) return "ф" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 400) return "у" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 300) return "т" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 200) return "с" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 100) return "р" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 90) return "ч" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 80) return "п" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 70) return "ѻ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 60) return "ѯ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 50) return "н" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 40) return "м" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 30) return "л" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 20) return "к" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 19) return "ѳ҃і";
    if (n >= 18) return "и҃і";
    if (n >= 17) return "з҃і";
    if (n >= 16) return "ѕ҃і";
    if (n >= 15) return "є҃і";
    if (n >= 14) return "д҃і";
    if (n >= 13) return "г҃і";
    if (n >= 12) return "в҃і";
    if (n >= 11) return "а҃і";
    if (n >= 1) return this.renderCyrillicLower110(n) + "҃";
    if (n >= 0) return "0҃";
};

inter.renderEthiopic = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderEthiopic(-n);
    if (isFractional && n > 1) return this.renderEthiopic(Math.floor(n)) + "፡" + this.renderEthiopic(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,###0");
    if (n >= 2e16) return this.renderEthiopic(Math.floor(n / 1e16)) + "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 1e16) return "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 2e12) return this.renderEthiopic(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1e12) return "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 2e8) return this.renderEthiopic(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1e8) return "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 2e4) return this.renderEthiopic(Math.floor(n / 1e4)) + "፼" + (n === 2e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 1e4) return "፼" + (n === 1e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 200) return this.renderEthiopic(Math.floor(n / 100)) + "፻" + (n === 200 ? "" : this.renderEthiopic(n % 100));
    if (n >= 100) return "፻" + (n === 100 ? "" : this.renderEthiopic(n % 100));
    if (n >= 90) return "፺" + (n === 90 ? "" : this.renderEthiopic(n % 10));
    if (n >= 80) return "፹" + (n === 80 ? "" : this.renderEthiopic(n % 10));
    if (n >= 70) return "፸" + (n === 70 ? "" : this.renderEthiopic(n % 10));
    if (n >= 60) return "፷" + (n === 60 ? "" : this.renderEthiopic(n % 10));
    if (n >= 50) return "፶" + (n === 50 ? "" : this.renderEthiopic(n % 10));
    if (n >= 40) return "፵" + (n === 40 ? "" : this.renderEthiopic(n % 10));
    if (n >= 30) return "፴" + (n === 30 ? "" : this.renderEthiopic(n % 10));
    if (n >= 20) return "፳" + (n === 20 ? "" : this.renderEthiopic(n % 10));
    if (n >= 10) return "፲" + (n === 10 ? "" : this.renderEthiopic(n % 10));
    if (n >= 9) return "፱";
    if (n >= 8) return "፰";
    if (n >= 7) return "፯";
    if (n >= 6) return "፮";
    if (n >= 5) return "፭";
    if (n >= 4) return "፬";
    if (n >= 3) return "፫";
    if (n >= 2) return "፪";
    if (n >= 1) return "፩";
    if (n >= 0) return "ባዶ";
};

inter.renderGeorgian = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGeorgian(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 2e4) return this.renderNumber(n, "#,##0");
    if (n >= 1e4) return "ჯ" + (n === 1e4 ? "" : this.renderGeorgian(n % 1e4));
    if (n >= 9e3) return "ჵ" + (n === 9e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 8e3) return "ჴ" + (n === 8e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 7e3) return "ხ" + (n === 7e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 6e3) return "ჭ" + (n === 6e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 5e3) return "წ" + (n === 5e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 4e3) return "ძ" + (n === 4e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 3e3) return "ც" + (n === 3e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 2e3) return "ჩ" + (n === 2e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 1e3) return "შ" + (n === 1e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 900) return "ყ" + (n === 900 ? "" : this.renderGeorgian(n % 100));
    if (n >= 800) return "ღ" + (n === 800 ? "" : this.renderGeorgian(n % 100));
    if (n >= 700) return "ქ" + (n === 700 ? "" : this.renderGeorgian(n % 100));
    if (n >= 600) return "ფ" + (n === 600 ? "" : this.renderGeorgian(n % 100));
    if (n >= 500) return "ჳ" + (n === 500 ? "" : this.renderGeorgian(n % 100));
    if (n >= 400) return "უ" + (n === 400 ? "" : this.renderGeorgian(n % 100));
    if (n >= 300) return "ტ" + (n === 300 ? "" : this.renderGeorgian(n % 100));
    if (n >= 200) return "ს" + (n === 200 ? "" : this.renderGeorgian(n % 100));
    if (n >= 100) return "რ" + (n === 100 ? "" : this.renderGeorgian(n % 100));
    if (n >= 90) return "ჟ" + (n === 90 ? "" : this.renderGeorgian(n % 10));
    if (n >= 80) return "პ" + (n === 80 ? "" : this.renderGeorgian(n % 10));
    if (n >= 70) return "ო" + (n === 70 ? "" : this.renderGeorgian(n % 10));
    if (n >= 60) return "ჲ" + (n === 60 ? "" : this.renderGeorgian(n % 10));
    if (n >= 50) return "ნ" + (n === 50 ? "" : this.renderGeorgian(n % 10));
    if (n >= 40) return "მ" + (n === 40 ? "" : this.renderGeorgian(n % 10));
    if (n >= 30) return "ლ" + (n === 30 ? "" : this.renderGeorgian(n % 10));
    if (n >= 20) return "კ" + (n === 20 ? "" : this.renderGeorgian(n % 10));
    if (n >= 10) return "ი" + (n === 10 ? "" : this.renderGeorgian(n % 10));
    if (n >= 9) return "თ";
    if (n >= 8) return "ჱ";
    if (n >= 7) return "ზ";
    if (n >= 6) return "ვ";
    if (n >= 5) return "ე";
    if (n >= 4) return "დ";
    if (n >= 3) return "გ";
    if (n >= 2) return "ბ";
    if (n >= 1) return "ა";
    if (n >= 0) return this.renderNumber(n, "#,##0");
};

inter.renderGreekUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGreekUpper(-n);
    if (isFractional && n > 1) return this.renderGreekUpper(Math.floor(n)) + "." + this.renderGreekUpper(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 0) return this.renderGreekNumeralMajuscules(n) + "´";
};

inter.renderGreekLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGreekLower(-n);
    if (isFractional && n > 1) return this.renderGreekLower(Math.floor(n)) + "." + this.renderGreekLower(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 0) return this.renderGreekNumeralMinuscules(n) + "´";
};

inter.renderSpelloutCardinal = function(n) {
    if (n < 0) return "−" + this.renderSpelloutCardinal(-n);
    if (n >= 0) return this.renderNumber(n, "#,##0.#");
};

inter.renderHebrew = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderHebrew(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1000001) return this.renderNumber(n, "#,##0");
    if (n >= 1e6) return "אלף אלפים";
    if (n >= 3001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 3001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 3e3) return this.renderHebrew(Math.floor(n / 1e3)) + " אלפים";
    if (n >= 2001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 2001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 2e3) return "אלפיים";
    if (n >= 1001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 1001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 1e3) return "אלף";
    if (n >= 901) return "תתק" + this.renderHebrew099(n % 100);
    if (n >= 900) return "תת״ק";
    if (n >= 801) return "תת" + this.renderHebrew099(n % 100);
    if (n >= 800) return "ת״ת";
    if (n >= 745) return "תש" + this.renderHebrew099(n % 100);
    if (n >= 744) return "תשד״מ";
    if (n >= 701) return "תש" + this.renderHebrew099(n % 100);
    if (n >= 700) return "ת״ש";
    if (n >= 699) return "תר" + this.renderHebrew099(n % 100);
    if (n >= 698) return "תרח״צ";
    if (n >= 601) return "תר" + this.renderHebrew099(n % 100);
    if (n >= 600) return "ת״ר";
    if (n >= 501) return "תק" + this.renderHebrew099(n % 100);
    if (n >= 500) return "ת״ק";
    if (n >= 400) return "ת" + this.renderHebrew099(n % 100);
    if (n >= 345) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 344) return "שד״מ";
    if (n >= 305) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 304) return "ד״ש";
    if (n >= 300) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 299) return "ר" + this.renderHebrew099(n % 100);
    if (n >= 298) return "רח״צ";
    if (n >= 200) return "ר" + this.renderHebrew099(n % 100);
    if (n >= 100) return "ק" + this.renderHebrew099(n % 100);
    if (n >= 91) return "צ״" + this.renderHebrewItem(n % 10);
    if (n >= 90) return "צ׳";
    if (n >= 81) return "פ״" + this.renderHebrewItem(n % 10);
    if (n >= 80) return "פ׳";
    if (n >= 71) return "ע״" + this.renderHebrewItem(n % 10);
    if (n >= 70) return "ע׳";
    if (n >= 61) return "ס״" + this.renderHebrewItem(n % 10);
    if (n >= 60) return "ס׳";
    if (n >= 51) return "נ״" + this.renderHebrewItem(n % 10);
    if (n >= 50) return "נ׳";
    if (n >= 41) return "מ״" + this.renderHebrewItem(n % 10);
    if (n >= 40) return "מ׳";
    if (n >= 31) return "ל״" + this.renderHebrewItem(n % 10);
    if (n >= 30) return "ל׳";
    if (n >= 21) return "כ״" + this.renderHebrewItem(n % 10);
    if (n >= 20) return "כ׳";
    if (n >= 17) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "ט״ז";
    if (n >= 15) return "ט״ו";
    if (n >= 11) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 0) return this.renderHebrewItem(n) + "׳";
};

inter.renderRomanUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderRomanUpper(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 4e5) return this.renderNumber(n, "#,##0");
    if (n >= 3e5) return "ↈↈↈ" + (n === 3e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 2e5) return "ↈↈ" + (n === 2e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 1e5) return "ↈ" + (n === 1e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 9e4) return "ↂↈ" + (n === 9e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 8e4) return "ↇↂↂↂ" + (n === 8e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 7e4) return "ↇↂↂ" + (n === 7e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 6e4) return "ↇↂ" + (n === 6e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 5e4) return "ↇ" + (n === 5e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 4e4) return "ↂↇ" + (n === 4e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 3e4) return "ↂↂↂ" + (n === 3e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 2e4) return "ↂↂ" + (n === 2e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 1e4) return "ↂ" + (n === 1e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 9e3) return "Mↂ" + (n === 9e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 8e3) return "ↁMMM" + (n === 8e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 7e3) return "ↁMM" + (n === 7e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 6e3) return "ↁM" + (n === 6e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 5e3) return "ↁ" + (n === 5e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 4e3) return "Mↁ" + (n === 4e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 3e3) return "MMM" + (n === 3e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 2e3) return "MM" + (n === 2e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 1e3) return "M" + (n === 1e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 900) return "CM" + (n === 900 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 800) return "DCCC" + (n === 800 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 700) return "DCC" + (n === 700 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 600) return "DC" + (n === 600 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 500) return "D" + (n === 500 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 400) return "CD" + (n === 400 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 300) return "CCC" + (n === 300 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 200) return "CC" + (n === 200 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 100) return "C" + (n === 100 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 90) return "XC" + (n === 90 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 80) return "LXXX" + (n === 80 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 70) return "LXX" + (n === 70 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 60) return "LX" + (n === 60 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 50) return "L" + (n === 50 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 40) return "XL" + (n === 40 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 30) return "XXX" + (n === 30 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 20) return "XX" + (n === 20 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 10) return "X" + (n === 10 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 9) return "IX";
    if (n >= 8) return "VIII";
    if (n >= 7) return "VII";
    if (n >= 6) return "VI";
    if (n >= 5) return "V";
    if (n >= 4) return "IV";
    if (n >= 3) return "III";
    if (n >= 2) return "II";
    if (n >= 1) return "I";
    if (n >= 0) return "N";
};

inter.renderRomanLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderRomanLower(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 5e3) return this.renderNumber(n, "#,##0");
    if (n >= 4e3) return "mmmm" + (n === 4e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 3e3) return "mmm" + (n === 3e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 2e3) return "mm" + (n === 2e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 1e3) return "m" + (n === 1e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 900) return "cm" + (n === 900 ? "" : this.renderRomanLower(n % 100));
    if (n >= 800) return "dccc" + (n === 800 ? "" : this.renderRomanLower(n % 100));
    if (n >= 700) return "dcc" + (n === 700 ? "" : this.renderRomanLower(n % 100));
    if (n >= 600) return "dc" + (n === 600 ? "" : this.renderRomanLower(n % 100));
    if (n >= 500) return "d" + (n === 500 ? "" : this.renderRomanLower(n % 100));
    if (n >= 400) return "cd" + (n === 400 ? "" : this.renderRomanLower(n % 100));
    if (n >= 300) return "ccc" + (n === 300 ? "" : this.renderRomanLower(n % 100));
    if (n >= 200) return "cc" + (n === 200 ? "" : this.renderRomanLower(n % 100));
    if (n >= 100) return "c" + (n === 100 ? "" : this.renderRomanLower(n % 100));
    if (n >= 90) return "xc" + (n === 90 ? "" : this.renderRomanLower(n % 10));
    if (n >= 80) return "lxxx" + (n === 80 ? "" : this.renderRomanLower(n % 10));
    if (n >= 70) return "lxx" + (n === 70 ? "" : this.renderRomanLower(n % 10));
    if (n >= 60) return "lx" + (n === 60 ? "" : this.renderRomanLower(n % 10));
    if (n >= 50) return "l" + (n === 50 ? "" : this.renderRomanLower(n % 10));
    if (n >= 40) return "xl" + (n === 40 ? "" : this.renderRomanLower(n % 10));
    if (n >= 30) return "xxx" + (n === 30 ? "" : this.renderRomanLower(n % 10));
    if (n >= 20) return "xx" + (n === 20 ? "" : this.renderRomanLower(n % 10));
    if (n >= 10) return "x" + (n === 10 ? "" : this.renderRomanLower(n % 10));
    if (n >= 9) return "ix";
    if (n >= 8) return "viii";
    if (n >= 7) return "vii";
    if (n >= 6) return "vi";
    if (n >= 5) return "v";
    if (n >= 4) return "iv";
    if (n >= 3) return "iii";
    if (n >= 2) return "ii";
    if (n >= 1) return "i";
    if (n >= 0) return "n";
};

inter.renderTamil = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderTamil(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e8) return this.renderNumber(n, "#,##,##0");
    if (n >= 1e6) return this.renderTamil(Math.floor(n / 1e6)) + "௱௲" + (n === 1e6 ? "" : this.renderTamilThousands(n % 1e6));
    if (n >= 2e3) return this.renderTamil(Math.floor(n / 1e3)) + "௲" + (n === 2e3 ? "" : this.renderTamil(n % 1e3));
    if (n >= 1e3) return "௲" + (n === 1e3 ? "" : this.renderTamil(n % 1e3));
    if (n >= 200) return this.renderTamil(Math.floor(n / 100)) + "௱" + (n === 200 ? "" : this.renderTamil(n % 100));
    if (n >= 100) return "௱" + (n === 100 ? "" : this.renderTamil(n % 100));
    if (n >= 20) return this.renderTamil(Math.floor(n / 10)) + "௰" + (n === 20 ? "" : this.renderTamil(n % 10));
    if (n >= 10) return "௰" + (n === 10 ? "" : this.renderTamil(n % 10));
    if (n >= 9) return "௯";
    if (n >= 8) return "௮";
    if (n >= 7) return "௭";
    if (n >= 6) return "௬";
    if (n >= 5) return "௫";
    if (n >= 4) return "௪";
    if (n >= 3) return "௩";
    if (n >= 2) return "௨";
    if (n >= 1) return "௧";
    if (n >= 0) return "௦";
};

inter.renderSpelloutCardinalCommon = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "minus " + this.renderSpelloutCardinalCommon(-n);
    if (isFractional && n > 1) return this.renderSpelloutCardinalCommon(Math.floor(n)) + " komma " + this.renderSpelloutCardinalCommon(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 2e15) return this.renderSpelloutCardinalCommon(Math.floor(n / 1e15)) + " billiarder" + (n === 2e15 ? "" : " " + this.renderSpelloutCardinalCommon(n % 1e15));
    if (n >= 1e15) return "billiard" + (n === 1e15 ? "" : " " + this.renderSpelloutCardinalCommon(n % 1e15));
    if (n >= 2e12) return this.renderSpelloutCardinalCommon(Math.floor(n / 1e12)) + " billioner" + (n === 2e12 ? "" : " " + this.renderSpelloutCardinalCommon(n % 1e12));
    if (n >= 1e12) return "billion" + (n === 1e12 ? "" : " " + this.renderSpelloutCardinalCommon(n % 1e12));
    if (n >= 2e9) return this.renderSpelloutCardinalCommon(Math.floor(n / 1e9)) + " milliarder" + (n === 2e9 ? "" : " " + this.renderSpelloutCardinalCommon(n % 1e9));
    if (n >= 1e9) return "milliard" + (n === 1e9 ? "" : " " + this.renderSpelloutCardinalCommon(n % 1e9));
    if (n >= 2e6) return this.renderSpelloutCardinalCommon(Math.floor(n / 1e6)) + " millioner" + (n === 2e6 ? "" : " " + this.renderSpelloutCardinalCommon(n % 1e6));
    if (n >= 1e6) return "million" + (n === 1e6 ? "" : " " + this.renderSpelloutCardinalCommon(n % 1e6));
    if (n >= 2e3) return this.renderSpelloutCardinalNeuter(Math.floor(n / 1e3)) + " tusinde" + (n === 2e3 ? "" : " " + this.renderAndSmall(n % 1e3));
    if (n >= 1e3) return "tusinde" + (n === 1e3 ? "" : " " + this.renderAndSmall(n % 1e3));
    if (n >= 200) return this.renderSpelloutCardinalNeuter(Math.floor(n / 100)) + "­hundrede" + (n === 200 ? "" : " og " + this.renderSpelloutCardinalCommon(n % 100));
    if (n >= 100) return "hundrede" + (n === 100 ? "" : " og " + this.renderSpelloutCardinalCommon(n % 100));
    if (n >= 90) return (n === 90 ? "" : this.renderSpelloutCardinalCommon(n % 10) + "­og­") + "halvfems";
    if (n >= 80) return (n === 80 ? "" : this.renderSpelloutCardinalCommon(n % 10) + "­og­") + "firs";
    if (n >= 70) return (n === 70 ? "" : this.renderSpelloutCardinalCommon(n % 10) + "­og­") + "halvfjerds";
    if (n >= 60) return (n === 60 ? "" : this.renderSpelloutCardinalCommon(n % 10) + "­og­") + "tres";
    if (n >= 50) return (n === 50 ? "" : this.renderSpelloutCardinalCommon(n % 10) + "­og­") + "halvtreds";
    if (n >= 40) return (n === 40 ? "" : this.renderSpelloutCardinalCommon(n % 10) + "­og­") + "fyrre";
    if (n >= 30) return (n === 30 ? "" : this.renderSpelloutCardinalCommon(n % 10) + "­og­") + "tredive";
    if (n >= 20) return (n === 20 ? "" : this.renderSpelloutCardinalCommon(n % 10) + "­og­") + "tyve";
    if (n >= 19) return "nitten";
    if (n >= 18) return "atten";
    if (n >= 17) return "sytten";
    if (n >= 16) return "seksten";
    if (n >= 15) return "femten";
    if (n >= 14) return "fjorten";
    if (n >= 13) return "tretten";
    if (n >= 12) return "tolv";
    if (n >= 11) return "elleve";
    if (n >= 10) return "ti";
    if (n >= 9) return "ni";
    if (n >= 8) return "otte";
    if (n >= 7) return "syv";
    if (n >= 6) return "seks";
    if (n >= 5) return "fem";
    if (n >= 4) return "fire";
    if (n >= 3) return "tre";
    if (n >= 2) return "to";
    if (n >= 1) return "en";
    if (n >= 0) return "nul";
};

inter.renderCyrillicLowerThousands = function(n) {
    if (n >= 900) return "҂ц" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 800) return "҂ѿ" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 700) return "҂ѱ" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 600) return "҂х" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 500) return "҂ф" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 400) return "҂у" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 300) return "҂т" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 200) return "҂с" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 100) return "҂р" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 90) return "҂ч" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 80) return "҂п" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 70) return "҂ѻ" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 60) return "҂ѯ" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 50) return "҂н" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 40) return "҂м" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 30) return "҂л" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 20) return "҂к" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 19) return "҂ѳ҃҂і";
    if (n >= 18) return "҂и҃҂і";
    if (n >= 17) return "҂з҃҂і";
    if (n >= 16) return "҂ѕ҃҂і";
    if (n >= 15) return "҂є҃҂і";
    if (n >= 14) return "҂д҃҂і";
    if (n >= 13) return "҂г҃҂і";
    if (n >= 12) return "҂в҃҂і";
    if (n >= 11) return "҂а҃҂і";
    if (n >= 10) return "҃҂і";
    if (n >= 9) return "҃҂ѳ";
    if (n >= 8) return "҃҂и";
    if (n >= 7) return "҃҂з";
    if (n >= 6) return "҃҂ѕ";
    if (n >= 5) return "҃҂є";
    if (n >= 4) return "҃҂д";
    if (n >= 3) return "҃҂г";
    if (n >= 2) return "҃҂в";
    if (n >= 1) return "҃҂а";
    if (n >= 0) return "҃";
};

inter.renderCyrillicLower110 = function(n) {
    if (n >= 10) return "і";
    if (n >= 9) return "ѳ";
    if (n >= 8) return "и";
    if (n >= 7) return "з";
    if (n >= 6) return "ѕ";
    if (n >= 5) return "є";
    if (n >= 4) return "д";
    if (n >= 3) return "г";
    if (n >= 2) return "в";
    if (n >= 1) return "а";
};

inter.renderCyrillicLowerPost = function(n) {
    if (n >= 1) return this.renderCyrillicLower(n);
    if (n >= 0) return "҃";
};

inter.renderCyrillicLowerFinal = function(n) {
    if (n >= 91) return "ч" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 90) return "҃ч";
    if (n >= 81) return "п" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 80) return "҃п";
    if (n >= 71) return "ѻ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 70) return "҃ѻ";
    if (n >= 61) return "ѯ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 60) return "҃ѯ";
    if (n >= 51) return "н" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 50) return "҃н";
    if (n >= 41) return "м" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 40) return "҃м";
    if (n >= 31) return "л" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 30) return "҃л";
    if (n >= 21) return "к" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 20) return "҃к";
    if (n >= 19) return "ѳ҃і";
    if (n >= 18) return "и҃і";
    if (n >= 17) return "з҃і";
    if (n >= 16) return "ѕ҃і";
    if (n >= 15) return "є҃і";
    if (n >= 14) return "д҃і";
    if (n >= 13) return "г҃і";
    if (n >= 12) return "в҃і";
    if (n >= 11) return "а҃і";
    if (n >= 1) return "҃" + this.renderCyrillicLower110(n);
    if (n >= 0) return "҃";
};

inter.renderEthiopicP3 = function(n) {
    if (n >= 1e12) return this.renderEthiopic(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1) return "፼፼፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼፼፼";
};

inter.renderEthiopicP2 = function(n) {
    if (n >= 1e8) return this.renderEthiopic(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1) return "፼፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼፼";
};

inter.renderEthiopicP1 = function(n) {
    if (n >= 1e4) return this.renderEthiopic(Math.floor(n / 1e4)) + "፼" + (n === 1e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 1) return "፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼";
};

inter.renderGreekNumeralMajuscules = function(n) {
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e16) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e16)) + "ΜΜΜΜ" + (n === 1e16 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e16));
    if (n >= 1e12) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e12)) + "ΜΜΜ" + (n === 1e12 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e12));
    if (n >= 1e8) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e8)) + "ΜΜ" + (n === 1e8 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e8));
    if (n >= 1e4) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e4)) + "Μ" + (n === 1e4 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e4));
    if (n >= 1e3) return "͵" + this.renderGreekNumeralMajuscules(Math.floor(n / 1e3)) + (n === 1e3 ? "" : this.renderGreekNumeralMajuscules(n % 1e3));
    if (n >= 900) return "Ϡ" + (n === 900 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 800) return "Ω" + (n === 800 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 700) return "Ψ" + (n === 700 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 600) return "Χ" + (n === 600 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 500) return "Φ" + (n === 500 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 400) return "Υ" + (n === 400 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 300) return "Τ" + (n === 300 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 200) return "Σ" + (n === 200 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 100) return "Ρ" + (n === 100 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 90) return "Ϟ" + (n === 90 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 80) return "Π" + (n === 80 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 70) return "Ο" + (n === 70 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 60) return "Ξ" + (n === 60 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 50) return "Ν" + (n === 50 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 40) return "Μ" + (n === 40 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 30) return "Λ" + (n === 30 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 20) return "Κ" + (n === 20 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 10) return "Ι" + (n === 10 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 9) return "Θ";
    if (n >= 8) return "Η";
    if (n >= 7) return "Ζ";
    if (n >= 6) return "Ϝ";
    if (n >= 5) return "Ε";
    if (n >= 4) return "Δ";
    if (n >= 3) return "Γ";
    if (n >= 2) return "Β";
    if (n >= 1) return "Α";
    if (n >= 0) return "𐆊";
};

inter.renderGreekNumeralMinuscules = function(n) {
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e16) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e16)) + "μμμμ" + (n === 1e16 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e16));
    if (n >= 1e12) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e12)) + "μμμ" + (n === 1e12 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e12));
    if (n >= 1e8) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e8)) + "μμ" + (n === 1e8 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e8));
    if (n >= 1e4) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e4)) + "μ" + (n === 1e4 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e4));
    if (n >= 1e3) return "͵" + this.renderGreekNumeralMinuscules(Math.floor(n / 1e3)) + (n === 1e3 ? "" : this.renderGreekNumeralMinuscules(n % 1e3));
    if (n >= 900) return "ϡ" + (n === 900 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 800) return "ω" + (n === 800 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 700) return "ψ" + (n === 700 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 600) return "χ" + (n === 600 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 500) return "φ" + (n === 500 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 400) return "υ" + (n === 400 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 300) return "τ" + (n === 300 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 200) return "σ" + (n === 200 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 100) return "ρ" + (n === 100 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 90) return "ϟ" + (n === 90 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 80) return "π" + (n === 80 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 70) return "ο" + (n === 70 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 60) return "ξ" + (n === 60 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 50) return "ν" + (n === 50 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 40) return "μ" + (n === 40 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 30) return "λ" + (n === 30 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 20) return "κ" + (n === 20 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 10) return "ι" + (n === 10 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 9) return "θ";
    if (n >= 8) return "η";
    if (n >= 7) return "ζ";
    if (n >= 6) return "ϝ";
    if (n >= 5) return "ε";
    if (n >= 4) return "δ";
    if (n >= 3) return "γ";
    if (n >= 2) return "β";
    if (n >= 1) return "α";
    if (n >= 0) return "𐆊";
};

inter.renderHebrewThousands = function(n) {
    if (n >= 401) return this.renderHebrew(n) + "׳";
    if (n >= 100) return this.renderHebrew(n) + (n === 100 ? "" : "׳");
    if (n >= 10) return this.renderHebrew(n) + (n === 10 ? "" : "׳");
    if (n >= 0) return this.renderHebrew(n);
};

inter.renderHebrew099 = function(n) {
    if (n >= 91) return "צ״" + this.renderHebrewItem(n % 10);
    if (n >= 90) return "״צ";
    if (n >= 81) return "פ״" + this.renderHebrewItem(n % 10);
    if (n >= 80) return "״פ";
    if (n >= 71) return "ע״" + this.renderHebrewItem(n % 10);
    if (n >= 70) return "״ע";
    if (n >= 61) return "ס״" + this.renderHebrewItem(n % 10);
    if (n >= 60) return "״ס";
    if (n >= 51) return "נ״" + this.renderHebrewItem(n % 10);
    if (n >= 50) return "״נ";
    if (n >= 41) return "מ״" + this.renderHebrewItem(n % 10);
    if (n >= 40) return "״מ";
    if (n >= 31) return "ל״" + this.renderHebrewItem(n % 10);
    if (n >= 30) return "״ל";
    if (n >= 21) return "כ״" + this.renderHebrewItem(n % 10);
    if (n >= 20) return "״כ";
    if (n >= 17) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "ט״ז";
    if (n >= 15) return "ט״ו";
    if (n >= 11) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 1) return "״" + this.renderHebrewItem(n);
    if (n >= 0) return "׳";
};

inter.renderHebrewItem = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderHebrewItem(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 2100) return this.renderNumber(n, "#,##0");
    if (n >= 2e3) return "תתתתת" + (n === 2e3 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1900) return "תתתתש" + (n === 1900 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1800) return "תתתתר" + (n === 1800 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1700) return "תתתתק" + (n === 1700 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1600) return "תתתת" + (n === 1600 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1500) return "תתתש" + (n === 1500 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1400) return "תתתר" + (n === 1400 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1300) return "תתתק" + (n === 1300 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1200) return "תתת" + (n === 1200 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1100) return "תתש" + (n === 1100 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1e3) return "תתר" + (n === 1e3 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 900) return "תתק" + (n === 900 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 800) return "תת" + (n === 800 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 745) return "תש" + this.renderHebrewItem(n % 100);
    if (n >= 744) return "תשדמ";
    if (n >= 700) return "תש" + (n === 700 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 699) return "תר" + this.renderHebrewItem(n % 100);
    if (n >= 698) return "תרחצ";
    if (n >= 600) return "תר" + (n === 600 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 500) return "תק" + (n === 500 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 400) return "ת" + (n === 400 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 345) return "ש" + this.renderHebrewItem(n % 100);
    if (n >= 344) return "שדמ";
    if (n >= 305) return "ש" + this.renderHebrewItem(n % 100);
    if (n >= 304) return "דש";
    if (n >= 300) return "ש" + (n === 300 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 299) return "ר" + this.renderHebrewItem(n % 100);
    if (n >= 298) return "רחצ";
    if (n >= 200) return "ר" + (n === 200 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 100) return "ק" + (n === 100 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 90) return "צ" + (n === 90 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 80) return "פ" + (n === 80 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 70) return "ע" + (n === 70 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 60) return "ס" + (n === 60 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 50) return "נ" + (n === 50 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 40) return "מ" + (n === 40 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 30) return "ל" + (n === 30 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 20) return "כ" + (n === 20 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 17) return "י" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "טז";
    if (n >= 15) return "טו";
    if (n >= 10) return "י" + (n === 10 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 9) return "ט";
    if (n >= 8) return "ח";
    if (n >= 7) return "ז";
    if (n >= 6) return "ו";
    if (n >= 5) return "ה";
    if (n >= 4) return "ד";
    if (n >= 3) return "ג";
    if (n >= 2) return "ב";
    if (n >= 1) return "א";
    if (n >= 0) return "״";
};

inter.renderTamilThousands = function(n) {
    if (n >= 1e3) return this.renderTamilThousands(Math.floor(n / 1e3)) + "௲" + (n === 1e3 ? "" : this.renderTamilThousands(n % 1e3));
    if (n >= 0) return this.renderTamil(n);
};

inter.renderSpelloutCardinalNeuter = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "minus " + this.renderSpelloutCardinalNeuter(-n);
    if (isFractional && n > 1) return this.renderSpelloutCardinalNeuter(Math.floor(n)) + " komma " + this.renderSpelloutCardinalNeuter(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 2e15) return this.renderSpelloutCardinalCommon(Math.floor(n / 1e15)) + " billiarder" + (n === 2e15 ? "" : " " + this.renderSpelloutCardinalNeuter(n % 1e15));
    if (n >= 1e15) return "en billiard" + (n === 1e15 ? "" : " " + this.renderSpelloutCardinalNeuter(n % 1e15));
    if (n >= 2e12) return this.renderSpelloutCardinalCommon(Math.floor(n / 1e12)) + " billioner" + (n === 2e12 ? "" : " " + this.renderSpelloutCardinalNeuter(n % 1e12));
    if (n >= 1e12) return "en billion" + (n === 1e12 ? "" : " " + this.renderSpelloutCardinalNeuter(n % 1e12));
    if (n >= 2e9) return this.renderSpelloutCardinalCommon(Math.floor(n / 1e9)) + " milliarder" + (n === 2e9 ? "" : " " + this.renderSpelloutCardinalNeuter(n % 1e9));
    if (n >= 1e9) return "en milliard" + (n === 1e9 ? "" : " " + this.renderSpelloutCardinalNeuter(n % 1e9));
    if (n >= 2e6) return this.renderSpelloutCardinalCommon(Math.floor(n / 1e6)) + " millioner" + (n === 2e6 ? "" : " " + this.renderSpelloutCardinalNeuter(n % 1e6));
    if (n >= 1e6) return "en million" + (n === 1e6 ? "" : " " + this.renderSpelloutCardinalNeuter(n % 1e6));
    if (n >= 2e3) return this.renderSpelloutCardinalNeuter(Math.floor(n / 1e3)) + " tusind" + (n === 2e3 ? "" : " " + this.renderAndSmallN(n % 1e3));
    if (n >= 1e3) return "tusind" + (n === 1e3 ? "" : " " + this.renderAndSmallN(n % 1e3));
    if (n >= 200) return this.renderSpelloutCardinalNeuter(Math.floor(n / 100)) + "­hundrede" + (n === 200 ? "" : " og " + this.renderSpelloutCardinalNeuter(n % 100));
    if (n >= 100) return "hundrede" + (n === 100 ? "" : " og " + this.renderSpelloutCardinalNeuter(n % 100));
    if (n >= 2) return this.renderSpelloutCardinalCommon(n);
    if (n >= 1) return "et";
    if (n >= 0) return "nul";
};

inter.renderAndSmall = function(n) {
    if (n >= 100) return this.renderSpelloutCardinalCommon(n);
    if (n >= 0) return "og " + this.renderSpelloutCardinalCommon(n);
};

inter.renderEthiopicP = function(n) {
    if (n >= 1e16) return this.renderEthiopicP(Math.floor(n / 1e16)) + "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 1e12) return this.renderEthiopicP(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1e8) return this.renderEthiopicP(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1e4) return this.renderEthiopicP(Math.floor(n / 1e4)) + "፼" + (n === 1e4 ? "" : this.renderEthiopicP(n % 1e4));
    if (n >= 1) return this.renderEthiopic(n);
};

inter.renderAndSmallN = function(n) {
    if (n >= 100) return this.renderSpelloutCardinalNeuter(n);
    if (n >= 0) return "og " + this.renderSpelloutCardinalNeuter(n);
};

module.exports = inter;