function defaults(targetObj) {
    for (var i = 1; i < arguments.length; i += 1) {
        if (arguments[i] && typeof arguments[i] === "object") {
            for (var propertyName in arguments[i]) {
                if (typeof targetObj[propertyName] === "undefined") {
                    targetObj[propertyName] = arguments[i][propertyName];
                }
            }
        }
    }
    return targetObj;
}

var P = require("./ro.js"), inter = defaults({
    renderers: {}
}, P);

var _gseo1 = {
    all: {
        leap: "{0}bis"
    }
}, _gseo2 = {
    displayName: "a.m/p.m."
}, _gseo3 = {
    displayName: "Fus orar"
}, _gseo4 = {
    a: "h a – h a",
    h: "h–h a"
}, _gseo5 = [ "Before R.O.C.", "R.O.C." ], _gseo6 = {
    a: "h a – h a v",
    h: "h–h a v"
}, _gseo7 = {
    d: "d–d MMM",
    M: "d MMM – d MMM"
}, _gseo8 = [ "D", "L", "Ma", "Mi", "J", "V", "S" ], _gseo9 = {
    displayName: "Zi a săptămânii"
}, _gseo10 = {
    d: "MMM d–d",
    M: "MMM d – MMM d"
}, _gseo11 = {
    wide: [ "AH" ],
    abbreviated: [ "AH" ]
}, _gseo12 = {
    H: "HH:mm–HH:mm",
    m: "HH:mm–HH:mm"
}, _gseo13 = {
    M: "y-MM – y-MM",
    y: "y-MM – y-MM"
}, _gseo14 = {
    M: "U MMM–MMM",
    y: "U MMM – U MMM"
}, _gseo15 = {
    one: "{0}°",
    few: "{0}°",
    other: "{0}°"
}, _gseo16 = [ "Du", "Lu", "Ma", "Mi", "Jo", "Vi", "Sâ" ], _gseo17 = {
    H: "HH:mm–HH:mm v",
    m: "HH:mm–HH:mm v"
}, _gseo18 = {
    d: "dd.MM – dd.MM",
    M: "dd.MM – dd.MM"
}, _gseo19 = {
    M: "MM.y – MM.y G",
    y: "MM.y – MM.y G"
}, _gseo20 = {
    M: "MMM–MMM y G",
    y: "MMM y – MMM y G"
}, _gseo21 = {
    d: "MM-dd – MM-dd",
    M: "MM-dd – MM-dd"
}, _gseo22 = {
    M: "U MMMM–MMMM",
    y: "U MMMM – U MMMM"
}, _gseo23 = {
    one: "{0} G",
    few: "{0} G",
    other: "{0} G"
}, _gseo24 = {
    one: "{0} s",
    few: "{0} s",
    other: "{0} s"
}, _gseo25 = {
    one: "{0} m",
    few: "{0} m",
    other: "{0} m"
}, _gseo26 = {
    one: "{0} g",
    few: "{0} g",
    other: "{0} g"
}, _gseo27 = {
    one: "{0} W",
    few: "{0} W",
    other: "{0} W"
}, _gseo28 = {
    one: "{0} l",
    few: "{0} l",
    other: "{0} l"
}, _gseo29 = {
    M: "MMMM–MMMM y G",
    y: "MMMM y – MMMM y G"
}, _gseo30 = [ "trim. 1", "trim. 2", "trim. 3", "trim. 4" ], _gseo31 = [ "Trim. 1", "Trim. 2", "Trim. 3", "Trim. 4" ], _gseo32 = {
    one: "{0} ha",
    few: "{0} ha",
    other: "{0} ha"
}, _gseo33 = {
    one: "{0} m²",
    few: "{0} m²",
    other: "{0} m²"
}, _gseo34 = {
    one: "{0} km",
    few: "{0} km",
    other: "{0} km"
}, _gseo35 = {
    one: "{0} cm",
    few: "{0} cm",
    other: "{0} cm"
}, _gseo36 = {
    one: "{0} mm",
    few: "{0} mm",
    other: "{0} mm"
}, _gseo37 = {
    one: "{0} pm",
    few: "{0} pm",
    other: "{0} pm"
}, _gseo38 = {
    one: "{0} mi",
    few: "{0} mi",
    other: "{0} mi"
}, _gseo39 = {
    one: "{0} yd",
    few: "{0} yd",
    other: "{0} yd"
}, _gseo40 = {
    one: "{0} ft",
    few: "{0} ft",
    other: "{0} ft"
}, _gseo41 = {
    one: "{0} in",
    few: "{0} in",
    other: "{0} in"
}, _gseo42 = {
    one: "{0} kg",
    few: "{0} kg",
    other: "{0} kg"
}, _gseo43 = {
    one: "{0} lb",
    few: "{0} lb",
    other: "{0} lb"
}, _gseo44 = {
    one: "{0} oz",
    few: "{0} oz",
    other: "{0} oz"
}, _gseo45 = {
    one: "{0} kW",
    few: "{0} kW",
    other: "{0} kW"
}, _gseo46 = {
    one: "{0} CP",
    few: "{0} CP",
    other: "{0} CP"
}, _gseo47 = {
    one: "{0} °C",
    few: "{0} °C",
    other: "{0} °C"
}, _gseo48 = {
    one: "+{0} h",
    few: "+{0} h",
    other: "+{0} h"
}, _gseo49 = {
    one: "-{0} h",
    few: "-{0} h",
    other: "-{0} h"
}, _gseo50 = {
    one: "+{0} m",
    few: "+{0} m",
    other: "+{0} m"
}, _gseo51 = {
    one: "-{0} m",
    few: "-{0} m",
    other: "-{0} m"
}, _gseo52 = {
    one: "+{0} s",
    few: "+{0} s",
    other: "+{0} s"
}, _gseo53 = {
    one: "-{0} s",
    few: "-{0} s",
    other: "-{0} s"
}, _gseo54 = [ "Dum", "Lun", "Mar", "Mie", "Joi", "Vin", "Sâm" ], _gseo55 = {
    one: "{0} km²",
    few: "{0} km²",
    other: "{0} km²"
}, _gseo56 = {
    one: "{0} mi²",
    few: "{0} mi²",
    other: "{0} mi²"
}, _gseo57 = {
    one: "{0} ac.",
    few: "{0} ac.",
    other: "{0} ac."
}, _gseo58 = {
    one: "{0} ft²",
    few: "{0} ft²",
    other: "{0} ft²"
}, _gseo59 = {
    one: "{0} hPa",
    few: "{0} hPa",
    other: "{0} hPa"
}, _gseo60 = {
    one: "{0} m/s",
    few: "{0} m/s",
    other: "{0} m/s"
}, _gseo61 = {
    one: "{0} km³",
    few: "{0} km³",
    other: "{0} km³"
}, _gseo62 = {
    one: "{0} mi³",
    few: "{0} mi³",
    other: "{0} mi³"
}, _gseo63 = {
    one: "+{0} an",
    few: "+{0} ani",
    other: "+{0} ani"
}, _gseo64 = {
    one: "-{0} an",
    few: "-{0} ani",
    other: "-{0} ani"
}, _gseo65 = {
    one: "{0} a.l.",
    few: "{0} a.l.",
    other: "{0} a.l."
}, _gseo66 = {
    one: "{0} km/h",
    few: "{0} km/h",
    other: "{0} km/h"
}, _gseo67 = {
    one: "{0} mi/h",
    few: "{0} mi/h",
    other: "{0} mi/h"
}, _gseo68 = {
    one: "{0} sec.",
    few: "{0} sec.",
    other: "{0} sec."
}, _gseo69 = {
    one: "{0} kcal",
    few: "{0} kcal",
    other: "{0} kcal"
}, _gseo70 = {
    d: "E, dd.MM – E, dd.MM",
    M: "E, dd.MM – E, dd.MM"
}, _gseo71 = {
    d: "E, d MMM – E, d MMM",
    M: "E, d MMM – E, d MMM"
}, _gseo72 = [ "I", "F", "M", "A", "M", "I", "I", "A", "S", "O", "N", "D" ], _gseo73 = {
    one: "+{0} zi",
    few: "+{0} zile",
    other: "+{0} zile"
}, _gseo74 = {
    one: "-{0} zi",
    few: "-{0} zile",
    other: "-{0} zile"
}, _gseo75 = {
    d: "MM-dd, E – MM-dd, E",
    M: "MM-dd, E – MM-dd, E"
}, _gseo76 = {
    d: "MMM d, E – MMM d, E",
    M: "MMM d, E – MMM d, E"
}, _gseo77 = {
    wide: [ "ERA0", "ERA1" ],
    abbreviated: [ "ERA0", "ERA1" ]
}, _gseo78 = {
    one: "+{0} lună",
    few: "+{0} luni",
    other: "+{0} luni"
}, _gseo79 = {
    one: "-{0} lună",
    few: "-{0} luni",
    other: "-{0} luni"
}, _gseo80 = {
    "0": "anul acesta",
    "1": "anul viitor",
    "-1": "anul trecut"
}, _gseo81 = [ "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" ], _gseo82 = {
    a: "h:mm a – h:mm a",
    h: "h:mm–h:mm a",
    m: "h:mm–h:mm a"
}, _gseo83 = {
    "0": "D (aceasta)",
    "1": "D (viitoare)",
    "-1": "D (trecută)"
}, _gseo84 = {
    "0": "L (aceasta)",
    "1": "L (viitoare)",
    "-1": "L (trecută)"
}, _gseo85 = {
    "0": "J (aceasta)",
    "1": "J (viitoare)",
    "-1": "J (trecută)"
}, _gseo86 = {
    "0": "V (aceasta)",
    "1": "V (viitoare)",
    "-1": "V (trecută)"
}, _gseo87 = {
    "0": "S (aceasta)",
    "1": "S (viitoare)",
    "-1": "S (trecută)"
}, _gseo88 = {
    one: "+{0} trim.",
    few: "+{0} trim.",
    other: "+{0} trim."
}, _gseo89 = {
    one: "-{0} trim.",
    few: "-{0} trim.",
    other: "-{0} trim."
}, _gseo90 = {
    one: "+{0} săpt.",
    few: "+{0} săpt.",
    other: "+{0} săpt."
}, _gseo91 = {
    one: "-{0} săpt.",
    few: "-{0} săpt.",
    other: "-{0} săpt."
}, _gseo92 = {
    one: "acum {0} h",
    few: "acum {0} h",
    other: "acum {0} h"
}, _gseo93 = {
    "0": "trim. acesta",
    "1": "trim. viitor",
    "-1": "trim. trecut"
}, _gseo94 = {
    "0": "luna aceasta",
    "1": "luna viitoare",
    "-1": "luna trecută"
}, _gseo95 = {
    "0": "dum. aceasta",
    "1": "dum. viitoare",
    "-1": "dum. trecută"
}, _gseo96 = {
    "0": "lun. aceasta",
    "1": "lun. viitoare",
    "-1": "lun. trecută"
}, _gseo97 = {
    "0": "mar. aceasta",
    "1": "mar. viitoare",
    "-1": "mar. trecută"
}, _gseo98 = {
    "0": "Ma (aceasta)",
    "1": "Ma (viitoare)",
    "-1": "Ma (trecută)"
}, _gseo99 = {
    "0": "mie. aceasta",
    "1": "mie. viitoare",
    "-1": "mie. trecută"
}, _gseo100 = {
    "0": "Mi (aceasta)",
    "1": "Mi (viitoare)",
    "-1": "Mi (trecută)"
}, _gseo101 = {
    "0": "joia aceasta",
    "1": "joia viitoare",
    "-1": "joia trecută"
}, _gseo102 = {
    "0": "vin. aceasta",
    "1": "vin. viitoare",
    "-1": "vin. trecută"
}, _gseo103 = {
    "0": "sâm. aceasta",
    "1": "sâm. viitoare",
    "-1": "sâm. trecută"
}, _gseo104 = {
    one: "peste {0} h",
    few: "peste {0} h",
    other: "peste {0} h"
}, _gseo105 = {
    d: "U MMM d–d",
    M: "U MMM d – MMM d",
    y: "U MMM d – U MMM d"
}, _gseo106 = [ "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13" ], _gseo107 = {
    a: "h:mm a – h:mm a v",
    h: "h:mm–h:mm a v",
    m: "h:mm–h:mm a v"
}, _gseo108 = {
    "0": "lunea aceasta",
    "1": "lunea viitoare",
    "-1": "lunea trecută"
}, _gseo109 = [ "trimestrul 1", "trimestrul 2", "trimestrul 3", "trimestrul 4" ], _gseo110 = [ "Trimestrul 1", "Trimestrul 2", "Trimestrul 3", "Trimestrul 4" ], _gseo111 = {
    one: "acum {0} zi",
    few: "acum {0} zile",
    other: "acum {0} zile"
}, _gseo112 = {
    one: "acum {0} an",
    few: "acum {0} ani",
    other: "acum {0} de ani"
}, _gseo113 = {
    one: "peste {0} an",
    few: "peste {0} ani",
    other: "peste {0} ani"
}, _gseo114 = {
    "0": "azi",
    "1": "mâine",
    "2": "poimâine",
    "-2": "alaltăieri",
    "-1": "ieri"
}, _gseo115 = {
    "0": "marțea aceasta",
    "1": "marțea viitoare",
    "-1": "marțea trecută"
}, _gseo116 = {
    d: "d–d MMM y G",
    M: "d MMM – d MMM y G",
    y: "d MMM y – d MMM y G"
}, _gseo117 = [ "duminică", "luni", "marți", "miercuri", "joi", "vineri", "sâmbătă" ], _gseo118 = {
    one: "acum {0} lună",
    few: "acum {0} luni",
    other: "acum {0} luni"
}, _gseo119 = {
    one: "acum {0} oră",
    few: "acum {0} ore",
    other: "acum {0} de ore"
}, _gseo120 = {
    one: "acum {0} min.",
    few: "acum {0} min.",
    other: "acum {0} min."
}, _gseo121 = {
    one: "acum {0} sec.",
    few: "acum {0} sec.",
    other: "acum {0} sec."
}, _gseo122 = {
    one: "acum {0} zi",
    few: "acum {0} zile",
    other: "acum {0} de zile"
}, _gseo123 = {
    one: "peste {0} zi",
    few: "peste {0} zile",
    other: "peste {0} zile"
}, _gseo124 = {
    relative: _gseo83
}, _gseo125 = {
    relative: _gseo84
}, _gseo126 = {
    relative: _gseo85
}, _gseo127 = {
    relative: _gseo86
}, _gseo128 = {
    relative: _gseo87
}, _gseo129 = {
    one: "peste {0} an",
    few: "peste {0} ani",
    other: "peste {0} de ani"
}, _gseo130 = {
    "0": "vinerea aceasta",
    "1": "vinerea viitoare",
    "-1": "vinerea trecută"
}, _gseo131 = {
    "0": "sâmbăta aceasta",
    "1": "sâmbăta viitoare",
    "-1": "sâmbăta trecută"
}, _gseo132 = {
    one: "acum {0} trim.",
    few: "acum {0} trim.",
    other: "acum {0} trim."
}, _gseo133 = {
    one: "acum {0} lună",
    few: "acum {0} luni",
    other: "acum {0} de luni"
}, _gseo134 = {
    one: "peste {0} lună",
    few: "peste {0} luni",
    other: "peste {0} luni"
}, _gseo135 = {
    one: "acum {0} săpt.",
    few: "acum {0} săpt.",
    other: "acum {0} săpt."
}, _gseo136 = {
    one: "peste {0} oră",
    few: "peste {0} ore",
    other: "peste {0} de ore"
}, _gseo137 = {
    one: "peste {0} min.",
    few: "peste {0} min.",
    other: "peste {0} min."
}, _gseo138 = {
    one: "peste {0} sec.",
    few: "peste {0} sec.",
    other: "peste {0} sec."
}, _gseo139 = {
    one: "peste {0} zi",
    few: "peste {0} zile",
    other: "peste {0} de zile"
}, _gseo140 = {
    relative: _gseo95
}, _gseo141 = {
    relative: _gseo96
}, _gseo142 = {
    relative: _gseo97
}, _gseo143 = {
    relative: _gseo98
}, _gseo144 = {
    relative: _gseo99
}, _gseo145 = {
    relative: _gseo100
}, _gseo146 = {
    relative: _gseo101
}, _gseo147 = {
    relative: _gseo102
}, _gseo148 = {
    relative: _gseo103
}, _gseo149 = {
    d: "y-MM-dd – y-MM-dd",
    M: "y-MM-dd – y-MM-dd",
    y: "y-MM-dd – y-MM-dd"
}, _gseo150 = {
    "0": "duminica aceasta",
    "1": "duminica viitoare",
    "-1": "duminica trecută"
}, _gseo151 = {
    one: "peste {0} trim.",
    few: "peste {0} trim.",
    other: "peste {0} trim."
}, _gseo152 = {
    one: "peste {0} lună",
    few: "peste {0} luni",
    other: "peste {0} de luni"
}, _gseo153 = {
    one: "peste {0} săpt.",
    few: "peste {0} săpt.",
    other: "peste {0} săpt."
}, _gseo154 = {
    "0": "trimestrul acesta",
    "1": "trimestrul viitor",
    "-1": "trimestrul trecut"
}, _gseo155 = {
    relative: _gseo108
}, _gseo156 = {
    "0": "săptămâna aceasta",
    "1": "săptămâna viitoare",
    "-1": "săptămâna trecută"
}, _gseo157 = {
    one: "acum {0} minut",
    few: "acum {0} minute",
    other: "acum {0} de minute"
}, _gseo158 = {
    "0": "miercurea aceasta",
    "1": "miercurea viitoare",
    "-1": "miercurea trecută"
}, _gseo159 = {
    abbreviated: {
        leap: "{0}bis"
    },
    narrow: {
        leap: "{0}b"
    },
    wide: {
        leap: "{0}bis"
    }
}, _gseo160 = {
    d: "dd.MM.y – dd.MM.y G",
    M: "dd.MM.y – dd.MM.y G",
    y: "dd.MM.y – dd.MM.y G"
}, _gseo161 = {
    relative: _gseo115
}, _gseo162 = [ "M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12" ], _gseo163 = {
    one: "peste {0} minut",
    few: "peste {0} minute",
    other: "peste {0} de minute"
}, _gseo164 = {
    one: "acum {0} secundă",
    few: "acum {0} secunde",
    other: "acum {0} de secunde"
}, _gseo165 = {
    relative: _gseo130
}, _gseo166 = {
    relative: _gseo131
}, _gseo167 = [ undefined, "zi", "chou", "yin", "mao", "chen", "si", "wu", "wei", "shen", "you", "xu" ], _gseo168 = {
    one: "peste {0} secundă",
    few: "peste {0} secunde",
    other: "peste {0} de secunde"
}, _gseo169 = {
    relative: _gseo150
}, _gseo170 = {
    one: "acum {0} trimestru",
    few: "acum {0} trimestre",
    other: "acum {0} de trimestre"
}, _gseo171 = {
    one: "acum {0} săptămână",
    few: "acum {0} săptămâni",
    other: "acum {0} de săptămâni"
}, _gseo172 = {
    d: "U MMM d, E – MMM d, E",
    M: "U MMM d, E – MMM d, E",
    y: "U MMM d, E – U MMM d, E"
}, _gseo173 = {
    relative: _gseo158
}, _gseo174 = {
    one: "peste {0} trimestru",
    few: "peste {0} trimestre",
    other: "peste {0} de trimestre"
}, _gseo175 = {
    one: "peste {0} săptămână",
    few: "peste {0} săptămâni",
    other: "peste {0} de săptămâni"
}, _gseo176 = [ "ian.", "feb.", "mar.", "apr.", "mai", "iun.", "iul.", "aug.", "sept.", "oct.", "nov.", "dec." ], _gseo177 = {
    d: "y-MM-dd, E – y-MM-dd, E",
    M: "y-MM-dd, E – y-MM-dd, E",
    y: "y-MM-dd, E – y-MM-dd, E"
}, _gseo178 = {
    d: "E, d MMM – E, d MMM y G",
    M: "E, d MMM – E, d MMM y G",
    y: "E, d MMM y – E, d MMM y G"
}, _gseo179 = {
    d: "E, dd.MM.y – E, dd.MM.y G",
    M: "E, dd.MM.y – E, dd.MM.y G",
    y: "E, dd.MM.y – E, dd.MM.y G"
}, _gseo180 = {
    future: _gseo48,
    past: _gseo49
}, _gseo181 = {
    future: _gseo50,
    past: _gseo51
}, _gseo182 = {
    future: _gseo52,
    past: _gseo53
}, _gseo183 = [ "Tișrei", "Heșvan", "Kislev", "Tevet", "Șevat", "Adar I", "Adar", "Nisan", "Iyar", "Sivan", "Tammuz", "Av", "Elul" ], _gseo184 = [ "Muh.", "Saf.", "Rab. I", "Rab. II", "Jum. I", "Jum. II", "Raj.", "Sha.", "Ram.", "Shaw.", "Dhuʻl-Q.", "Dhuʻl-H." ], _gseo185 = {
    future: _gseo63,
    past: _gseo64
}, _gseo186 = [ "Farvardin", "Ordibehesht", "Khordad", "Tir", "Mordad", "Shahrivar", "Mehr", "Aban", "Azar", "Dey", "Bahman", "Esfand" ], _gseo187 = {
    future: _gseo73,
    past: _gseo74
}, _gseo188 = [ "Tout", "Baba", "Hathor", "Kiahk", "Toba", "Amshir", "Baramhat", "Baramouda", "Bashans", "Paona", "Epep", "Mesori", "El Nasii" ], _gseo189 = [ "meskerem", "taqemt", "hedar", "tahsas", "ter", "yekatit", "megabit", "miazia", "genbot", "sene", "hamle", "nehase", "pagumen" ], _gseo190 = {
    future: _gseo78,
    past: _gseo79
}, _gseo191 = [ "Chaitra", "Vaisakha", "Jyaistha", "Asadha", "Sravana", "Bhadra", "Asvina", "Kartika", "Agrahayana", "Pausa", "Magha", "Phalguna" ], _gseo192 = [ "ianuarie", "februarie", "martie", "aprilie", "mai", "iunie", "iulie", "august", "septembrie", "octombrie", "noiembrie", "decembrie" ], _gseo193 = {
    future: _gseo88,
    past: _gseo89
}, _gseo194 = {
    future: _gseo90,
    past: _gseo91
}, _gseo195 = {
    future: _gseo104,
    past: _gseo92
}, _gseo196 = {
    displayName: "h",
    relativeTime: _gseo180
}, _gseo197 = {
    displayName: "m",
    relativeTime: _gseo181
}, _gseo198 = {
    displayName: "s",
    relativeTime: _gseo182
}, _gseo199 = [ "Muharram", "Safar", "Rabiʻ I", "Rabiʻ II", "Jumada I", "Jumada II", "Rajab", "Shaʻban", "Ramadan", "Shawwal", "Dhuʻl-Qiʻdah", "Dhuʻl-Hijjah" ], _gseo200 = {
    midnight: "miezul nopții",
    noon: "amiază",
    morning1: "dimineață",
    afternoon1: "după-amiază",
    evening1: "seară",
    night1: "noapte",
    am: "a.m.",
    pm: "p.m."
}, _gseo201 = {
    future: _gseo113,
    past: _gseo112
}, _gseo202 = {
    midnight: "miezul nopții",
    am: "a.m.",
    noon: "amiază",
    pm: "p.m.",
    morning1: "dimineața",
    afternoon1: "după-amiaza",
    evening1: "seara",
    night1: "noaptea"
}, _gseo203 = {
    midnight: "miezul nopții",
    noon: "amiază",
    morning1: "dimineața",
    afternoon1: "după-amiaza",
    evening1: "seara",
    night1: "noaptea",
    am: "a.m.",
    pm: "p.m."
}, _gseo204 = {
    midnight: "miezul nopții",
    am: "a.m.",
    pm: "p.m.",
    noon: "amiază",
    morning1: "dimineața",
    afternoon1: "după-amiaza",
    evening1: "seara",
    night1: "noaptea"
}, _gseo205 = {
    future: _gseo123,
    past: _gseo111
}, _gseo206 = {
    displayName: "an",
    relativeTime: _gseo185
}, _gseo207 = {
    future: _gseo129,
    past: _gseo112
}, _gseo208 = {
    future: _gseo134,
    past: _gseo118
}, _gseo209 = {
    future: _gseo136,
    past: _gseo119
}, _gseo210 = {
    future: _gseo137,
    past: _gseo120
}, _gseo211 = {
    future: _gseo138,
    past: _gseo121
}, _gseo212 = {
    midnight: "la miezul nopții",
    am: "a.m.",
    noon: "la amiază",
    pm: "p.m.",
    morning1: "dimineață",
    afternoon1: "după-amiază",
    evening1: "seară",
    night1: "noapte"
}, _gseo213 = {
    displayName: "zi",
    relativeTime: _gseo187
}, _gseo214 = {
    future: _gseo139,
    past: _gseo122
}, _gseo215 = {
    abbreviated: _gseo30,
    narrow: [ "1", "2", "3", "4" ],
    wide: _gseo109
}, _gseo216 = {
    abbreviated: _gseo31,
    narrow: [ "1", "2", "3", "4" ],
    wide: _gseo110
}, _gseo217 = {
    future: _gseo151,
    past: _gseo132
}, _gseo218 = {
    future: _gseo152,
    past: _gseo133
}, _gseo219 = {
    future: _gseo153,
    past: _gseo135
}, _gseo220 = {
    displayName: "lună",
    relativeTime: _gseo190
}, _gseo221 = {
    displayName: "h",
    relativeTime: _gseo195
}, _gseo222 = {
    displayName: "săpt.",
    relativeTime: _gseo194
}, _gseo223 = {
    future: _gseo163,
    past: _gseo157
}, _gseo224 = {
    future: _gseo168,
    past: _gseo164
}, _gseo225 = {
    displayName: "an",
    relativeTime: _gseo201
}, _gseo226 = {
    displayName: "zi",
    relativeTime: _gseo205
}, _gseo227 = {
    displayName: "Oră",
    relativeTime: _gseo209
}, _gseo228 = {
    displayName: "lună",
    relativeTime: _gseo208
}, _gseo229 = {
    displayName: "min.",
    relativeTime: _gseo210
}, _gseo230 = {
    displayName: "sec.",
    relativeTime: _gseo211
}, _gseo231 = {
    future: _gseo174,
    past: _gseo170
}, _gseo232 = {
    future: _gseo175,
    past: _gseo171
}, _gseo233 = {
    abbreviated: _gseo81,
    narrow: _gseo81,
    wide: _gseo81
}, _gseo234 = {
    displayName: "săpt.",
    relativeTime: _gseo219
}, _gseo235 = {
    format: _gseo159,
    numeric: _gseo1,
    standAlone: _gseo159
}, _gseo236 = {
    displayName: "Minut",
    relativeTime: _gseo223
}, _gseo237 = {
    abbreviated: _gseo81,
    narrow: _gseo81,
    wide: _gseo162
}, _gseo238 = {
    abbreviated: _gseo54,
    narrow: _gseo8,
    wide: _gseo117,
    "short": _gseo16
}, _gseo239 = {
    displayName: "trim.",
    relative: _gseo93,
    relativeTime: _gseo193
}, _gseo240 = {
    displayName: "Secundă",
    relative: [ "acum" ],
    relativeTime: _gseo224
}, _gseo241 = {
    displayName: "An",
    relative: _gseo80,
    relativeTime: _gseo207
}, _gseo242 = {
    displayName: "trim.",
    relative: _gseo93,
    relativeTime: _gseo217
}, _gseo243 = {
    displayName: "Lună",
    relative: _gseo94,
    relativeTime: _gseo218
}, _gseo244 = {
    displayName: "Zi",
    relative: _gseo114,
    relativeTime: _gseo214
}, _gseo245 = {
    abbreviated: _gseo167,
    narrow: _gseo167,
    wide: _gseo167
}, _gseo246 = {
    format: _gseo245
}, _gseo247 = {
    abbreviated: _gseo176,
    narrow: _gseo72,
    wide: _gseo192
}, _gseo248 = {
    abbreviated: _gseo183,
    narrow: _gseo106,
    wide: _gseo183
}, _gseo249 = {
    abbreviated: _gseo186,
    narrow: _gseo81,
    wide: _gseo186
}, _gseo250 = {
    displayName: "Trimestru",
    relative: _gseo154,
    relativeTime: _gseo231
}, _gseo251 = {
    displayName: "Săptămână",
    relative: _gseo156,
    relativeTime: _gseo232
}, _gseo252 = {
    format: _gseo215,
    standAlone: _gseo216
}, _gseo253 = {
    abbreviated: _gseo184,
    narrow: _gseo81,
    wide: _gseo199
}, _gseo254 = {
    abbreviated: _gseo188,
    narrow: _gseo106,
    wide: _gseo188
}, _gseo255 = {
    abbreviated: _gseo189,
    narrow: _gseo106,
    wide: _gseo189
}, _gseo256 = {
    abbreviated: _gseo191,
    narrow: _gseo81,
    wide: _gseo191
}, _gseo257 = {
    fullDate: "r(U) MMMM d, EEEE",
    longDate: "r(U) MMMM d",
    mediumDate: "r MMM d",
    shortDate: "r-MM-dd",
    fullTime: "HH:mm:ss zzzz",
    longTime: "HH:mm:ss z",
    mediumTime: "HH:mm:ss",
    shortTime: "HH:mm",
    shortDateTime: "r-MM-dd HH:mm",
    mediumDateTime: "r MMM d HH:mm:ss",
    longDateTime: "r(U) MMMM d HH:mm:ss z",
    fullDateTime: "r(U) MMMM d, EEEE HH:mm:ss zzzz"
}, _gseo258 = {
    format: _gseo237,
    standAlone: _gseo233
}, _gseo259 = {
    format: _gseo238,
    standAlone: _gseo238
}, _gseo260 = {
    abbreviated: _gseo202,
    narrow: _gseo200,
    wide: _gseo203
}, _gseo261 = {
    abbreviated: _gseo202,
    narrow: _gseo204,
    wide: _gseo212
}, _gseo262 = {
    d: "d",
    E: "ccc",
    Ed: "d, E",
    Gy: "r U",
    GyMMM: "r(U) MMM",
    GyMMMd: "r MMM d",
    GyMMMEd: "r(U) MMM d, E",
    h: "h a",
    H: "HH",
    hm: "h:mm a",
    Hm: "HH:mm",
    hms: "h:mm:ss a",
    Hms: "HH:mm:ss",
    M: "L",
    Md: "MM-dd",
    MEd: "MM-dd, E",
    MMM: "LLL",
    MMMd: "MMM d",
    MMMEd: "MMM d, E",
    MMMMd: "MMMM d",
    ms: "mm:ss",
    UM: "U MM",
    UMd: "U MM-d",
    UMMM: "U MMM",
    UMMMd: "U MMM d",
    y: "r(U)",
    yMd: "r-MM-dd",
    yyyy: "r(U)",
    yyyyM: "r-MM",
    yyyyMd: "r-MM-dd",
    yyyyMEd: "r-MM-dd, E",
    yyyyMMM: "r(U) MMM",
    yyyyMMMd: "r MMM d",
    yyyyMMMEd: "r(U) MMM d, E",
    yyyyMMMM: "r(U) MMMM",
    yyyyQQQ: "r(U) QQQ",
    yyyyQQQQ: "r(U) QQQQ"
}, _gseo263 = {
    format: _gseo247,
    standAlone: _gseo247
}, _gseo264 = [ undefined, "jia-zi", "yi-chou", "bing-yin", "ding-mao", "wu-chen", "ji-si", "geng-wu", "xin-wei", "ren-shen", "gui-you", "jia-xu", "yi-hai", "bing-zi", "ding-chou", "wu-yin", "ji-mao", "geng-chen", "xin-si", "ren-wu", "gui-wei", "jia-shen", "yi-you", "bing-xu", "ding-hai", "wu-zi", "ji-chou", "geng-yin", "xin-mao", "ren-chen", "gui-si", "jia-wu", "yi-wei", "bing-shen", "ding-you", "wu-xu", "ji-hai", "geng-zi", "xin-chou", "ren-yin", "gui-mao", "jia-chen", "yi-si", "bing-wu", "ding-wei", "wu-shen", "ji-you", "geng-xu", "xin-hai", "ren-zi", "gui-chou", "jia-yin", "yi-mao", "bing-chen", "ding-si", "wu-wu", "ji-wei", "geng-shen", "xin-you", "ren-xu" ], _gseo265 = {
    format: _gseo253,
    standAlone: _gseo253
}, _gseo266 = {
    basic: _gseo257,
    cldr: _gseo262
}, _gseo267 = {
    format: _gseo260,
    standAlone: _gseo261
}, _gseo268 = {
    d: {
        d: "d–d"
    },
    h: _gseo4,
    H: {
        H: "HH–HH"
    },
    hm: _gseo82,
    Hm: _gseo12,
    hmv: _gseo107,
    Hmv: _gseo17,
    hv: _gseo6,
    Hv: {
        H: "HH–HH v"
    },
    M: {
        M: "MM–MM"
    },
    Md: _gseo21,
    MEd: _gseo75,
    MMM: {
        M: "LLL–LLL"
    },
    MMMd: _gseo10,
    MMMEd: _gseo76,
    y: {
        y: "U–U"
    },
    yM: _gseo13,
    yMd: _gseo149,
    yMEd: _gseo177,
    yMMM: _gseo14,
    yMMMd: _gseo105,
    yMMMEd: _gseo172,
    yMMMM: _gseo22
}, _gseo269 = {
    d: {
        d: "d–d"
    },
    h: _gseo4,
    H: {
        H: "HH–HH"
    },
    hm: _gseo82,
    Hm: _gseo12,
    hmv: _gseo107,
    Hmv: _gseo17,
    hv: _gseo6,
    Hv: {
        H: "HH–HH v"
    },
    M: {
        M: "M–M"
    },
    Md: _gseo18,
    MEd: _gseo70,
    MMM: {
        M: "MMM–MMM"
    },
    MMMd: _gseo7,
    MMMEd: _gseo71,
    y: {
        y: "y–y G"
    },
    yM: _gseo19,
    yMd: _gseo160,
    yMEd: _gseo179,
    yMMM: _gseo20,
    yMMMd: _gseo116,
    yMMMEd: _gseo178,
    yMMMM: _gseo29
}, _gseo270 = {
    abbreviated: _gseo264,
    narrow: _gseo264,
    wide: _gseo264
}, _gseo271 = {
    format: _gseo270
}, _gseo272 = [ "Taika (645–650)", "Hakuchi (650–671)", "Hakuhō (672–686)", "Shuchō (686–701)", "Taihō (701–704)", "Keiun (704–708)", "Wadō (708–715)", "Reiki (715–717)", "Yōrō (717–724)", "Jinki (724–729)", "Tenpyō (729–749)", "Tenpyō-kampō (749-749)", "Tenpyō-shōhō (749-757)", "Tenpyō-hōji (757-765)", "Tenpyō-jingo (765-767)", "Jingo-keiun (767-770)", "Hōki (770–780)", "Ten-ō (781-782)", "Enryaku (782–806)", "Daidō (806–810)", "Kōnin (810–824)", "Tenchō (824–834)", "Jōwa (834–848)", "Kajō (848–851)", "Ninju (851–854)", "Saikō (854–857)", "Ten-an (857-859)", "Jōgan (859–877)", "Gangyō (877–885)", "Ninna (885–889)", "Kanpyō (889–898)", "Shōtai (898–901)", "Engi (901–923)", "Enchō (923–931)", "Jōhei (931–938)", "Tengyō (938–947)", "Tenryaku (947–957)", "Tentoku (957–961)", "Ōwa (961–964)", "Kōhō (964–968)", "Anna (968–970)", "Tenroku (970–973)", "Ten’en (973–976)", "Jōgen (976–978)", "Tengen (978–983)", "Eikan (983–985)", "Kanna (985–987)", "Eien (987–989)", "Eiso (989–990)", "Shōryaku (990–995)", "Chōtoku (995–999)", "Chōhō (999–1004)", "Kankō (1004–1012)", "Chōwa (1012–1017)", "Kannin (1017–1021)", "Jian (1021–1024)", "Manju (1024–1028)", "Chōgen (1028–1037)", "Chōryaku (1037–1040)", "Chōkyū (1040–1044)", "Kantoku (1044–1046)", "Eishō (1046–1053)", "Tengi (1053–1058)", "Kōhei (1058–1065)", "Jiryaku (1065–1069)", "Enkyū (1069–1074)", "Shōho (1074–1077)", "Shōryaku (1077–1081)", "Eihō (1081–1084)", "Ōtoku (1084–1087)", "Kanji (1087–1094)", "Kahō (1094–1096)", "Eichō (1096–1097)", "Jōtoku (1097–1099)", "Kōwa (1099–1104)", "Chōji (1104–1106)", "Kashō (1106–1108)", "Tennin (1108–1110)", "Ten-ei (1110-1113)", "Eikyū (1113–1118)", "Gen’ei (1118–1120)", "Hōan (1120–1124)", "Tenji (1124–1126)", "Daiji (1126–1131)", "Tenshō (1131–1132)", "Chōshō (1132–1135)", "Hōen (1135–1141)", "Eiji (1141–1142)", "Kōji (1142–1144)", "Ten’yō (1144–1145)", "Kyūan (1145–1151)", "Ninpei (1151–1154)", "Kyūju (1154–1156)", "Hōgen (1156–1159)", "Heiji (1159–1160)", "Eiryaku (1160–1161)", "Ōho (1161–1163)", "Chōkan (1163–1165)", "Eiman (1165–1166)", "Nin’an (1166–1169)", "Kaō (1169–1171)", "Shōan (1171–1175)", "Angen (1175–1177)", "Jishō (1177–1181)", "Yōwa (1181–1182)", "Juei (1182–1184)", "Genryaku (1184–1185)", "Bunji (1185–1190)", "Kenkyū (1190–1199)", "Shōji (1199–1201)", "Kennin (1201–1204)", "Genkyū (1204–1206)", "Ken’ei (1206–1207)", "Jōgen (1207–1211)", "Kenryaku (1211–1213)", "Kenpō (1213–1219)", "Jōkyū (1219–1222)", "Jōō (1222–1224)", "Gennin (1224–1225)", "Karoku (1225–1227)", "Antei (1227–1229)", "Kanki (1229–1232)", "Jōei (1232–1233)", "Tenpuku (1233–1234)", "Bunryaku (1234–1235)", "Katei (1235–1238)", "Ryakunin (1238–1239)", "En’ō (1239–1240)", "Ninji (1240–1243)", "Kangen (1243–1247)", "Hōji (1247–1249)", "Kenchō (1249–1256)", "Kōgen (1256–1257)", "Shōka (1257–1259)", "Shōgen (1259–1260)", "Bun’ō (1260–1261)", "Kōchō (1261–1264)", "Bun’ei (1264–1275)", "Kenji (1275–1278)", "Kōan (1278–1288)", "Shōō (1288–1293)", "Einin (1293–1299)", "Shōan (1299–1302)", "Kengen (1302–1303)", "Kagen (1303–1306)", "Tokuji (1306–1308)", "Enkyō (1308–1311)", "Ōchō (1311–1312)", "Shōwa (1312–1317)", "Bunpō (1317–1319)", "Genō (1319–1321)", "Genkō (1321–1324)", "Shōchū (1324–1326)", "Karyaku (1326–1329)", "Gentoku (1329–1331)", "Genkō (1331–1334)", "Kenmu (1334–1336)", "Engen (1336–1340)", "Kōkoku (1340–1346)", "Shōhei (1346–1370)", "Kentoku (1370–1372)", "Bunchū (1372–1375)", "Tenju (1375–1379)", "Kōryaku (1379–1381)", "Kōwa (1381–1384)", "Genchū (1384–1392)", "Meitoku (1384–1387)", "Kakei (1387–1389)", "Kōō (1389–1390)", "Meitoku (1390–1394)", "Ōei (1394–1428)", "Shōchō (1428–1429)", "Eikyō (1429–1441)", "Kakitsu (1441–1444)", "Bun’an (1444–1449)", "Hōtoku (1449–1452)", "Kyōtoku (1452–1455)", "Kōshō (1455–1457)", "Chōroku (1457–1460)", "Kanshō (1460–1466)", "Bunshō (1466–1467)", "Ōnin (1467–1469)", "Bunmei (1469–1487)", "Chōkyō (1487–1489)", "Entoku (1489–1492)", "Meiō (1492–1501)", "Bunki (1501–1504)", "Eishō (1504–1521)", "Taiei (1521–1528)", "Kyōroku (1528–1532)", "Tenbun (1532–1555)", "Kōji (1555–1558)", "Eiroku (1558–1570)", "Genki (1570–1573)", "Tenshō (1573–1592)", "Bunroku (1592–1596)", "Keichō (1596–1615)", "Genna (1615–1624)", "Kan’ei (1624–1644)", "Shōho (1644–1648)", "Keian (1648–1652)", "Jōō (1652–1655)", "Meireki (1655–1658)", "Manji (1658–1661)", "Kanbun (1661–1673)", "Enpō (1673–1681)", "Tenna (1681–1684)", "Jōkyō (1684–1688)", "Genroku (1688–1704)", "Hōei (1704–1711)", "Shōtoku (1711–1716)", "Kyōhō (1716–1736)", "Genbun (1736–1741)", "Kanpō (1741–1744)", "Enkyō (1744–1748)", "Kan’en (1748–1751)", "Hōreki (1751–1764)", "Meiwa (1764–1772)", "An’ei (1772–1781)", "Tenmei (1781–1789)", "Kansei (1789–1801)", "Kyōwa (1801–1804)", "Bunka (1804–1818)", "Bunsei (1818–1830)", "Tenpō (1830–1844)", "Kōka (1844–1848)", "Kaei (1848–1854)", "Ansei (1854–1860)", "Man’en (1860–1861)", "Bunkyū (1861–1864)", "Genji (1864–1865)", "Keiō (1865–1868)", "Meiji", "Taishō", "Shōwa", "Heisei" ], _gseo273 = {
    dayParts: _gseo246,
    days: _gseo271,
    months: _gseo271,
    years: _gseo271,
    zodiacs: _gseo246
}, _gseo274 = {
    era: {
        displayName: "Eră"
    },
    year: _gseo241,
    "year-short": _gseo225,
    "year-narrow": _gseo206,
    quarter: _gseo250,
    "quarter-short": _gseo242,
    "quarter-narrow": _gseo239,
    month: _gseo243,
    "month-short": _gseo228,
    "month-narrow": _gseo220,
    week: _gseo251,
    "week-short": _gseo234,
    "week-narrow": _gseo222,
    day: _gseo244,
    "day-short": _gseo226,
    "day-narrow": _gseo213,
    weekday: _gseo9,
    dayperiod: _gseo2,
    hour: _gseo227,
    "hour-short": _gseo221,
    "hour-narrow": _gseo196,
    minute: _gseo236,
    "minute-short": _gseo229,
    "minute-narrow": _gseo197,
    second: _gseo240,
    "second-short": _gseo230,
    "second-narrow": _gseo198,
    zone: _gseo3,
    sun: _gseo169,
    "sun-short": _gseo140,
    "sun-narrow": _gseo124,
    mon: _gseo155,
    "mon-short": _gseo141,
    "mon-narrow": _gseo125,
    tue: _gseo161,
    "tue-short": _gseo142,
    "tue-narrow": _gseo143,
    wed: _gseo173,
    "wed-short": _gseo144,
    "wed-narrow": _gseo145,
    thu: _gseo146,
    "thu-short": _gseo146,
    "thu-narrow": _gseo126,
    fri: _gseo165,
    "fri-short": _gseo147,
    "fri-narrow": _gseo127,
    sat: _gseo166,
    "sat-short": _gseo148,
    "sat-narrow": _gseo128
}, _gseo275 = {
    dateFormats: {
        basic: {},
        cldr: {}
    },
    fields: _gseo274
}, _gseo276 = {
    dateFormats: P.calendars.buddhist.dateFormats,
    datePartsOrder: "dmy",
    dateIntervalFormats: _gseo269,
    dateIntervalFallbackFormat: "{0} – {1}",
    dayNames: _gseo259,
    dayPeriods: _gseo267,
    monthNames: _gseo265,
    eraNames: _gseo11,
    quarterNames: _gseo252,
    fields: _gseo274
}, _gseo277 = {
    dateFormats: _gseo266,
    datePartsOrder: "md",
    dateIntervalFormats: _gseo268,
    dateIntervalFallbackFormat: "{0} – {1}",
    dayNames: _gseo259,
    dayPeriods: _gseo267,
    cyclicNames: _gseo273,
    monthNames: _gseo258,
    monthPatterns: _gseo235,
    quarterNames: _gseo252,
    fields: _gseo274
};

inter.id = "ro_md";

inter.unitPatterns = {
    narrow: {
        unit: {
            durationYear: {
                one: "{0}an",
                few: "{0}ani",
                other: "{0}ani"
            },
            durationMonth: {
                one: "{0}lună",
                few: "{0}luni",
                other: "{0}luni"
            },
            durationWeek: {
                one: "{0}săpt.",
                few: "{0}săpt.",
                other: "{0}săpt."
            },
            durationDay: {
                one: "{0}zi",
                few: "{0}zile",
                other: "{0}zile"
            },
            durationMinute: {
                one: "{0}min.",
                few: "{0}min.",
                other: "{0}min."
            },
            durationMillisecond: {
                one: "{0}ms",
                few: "{0}ms",
                other: "{0}ms"
            },
            accelerationGForce: _gseo23,
            angleDegree: _gseo15,
            angleArcMinute: {
                one: "{0}′",
                few: "{0}′",
                other: "{0}′"
            },
            angleArcSecond: {
                one: "{0}″",
                few: "{0}″",
                other: "{0}″"
            },
            areaSquareKilometer: _gseo55,
            areaHectare: _gseo32,
            areaSquareMeter: _gseo33,
            areaSquareMile: _gseo56,
            areaAcre: _gseo57,
            areaSquareFoot: _gseo58,
            "consumptionLiterPer-100kilometers": {
                one: "{0} l/100 km",
                few: "{0} l/100 km",
                other: "{0} l/100 km"
            },
            durationHour: {
                one: "{0} h",
                few: "{0} h",
                other: "{0} h"
            },
            durationSecond: _gseo24,
            lengthKilometer: _gseo34,
            lengthMeter: _gseo25,
            lengthCentimeter: _gseo35,
            lengthMillimeter: _gseo36,
            lengthPicometer: _gseo37,
            lengthMile: _gseo38,
            lengthYard: _gseo39,
            lengthFoot: _gseo40,
            lengthInch: _gseo41,
            lengthLightYear: _gseo65,
            massKilogram: _gseo42,
            massGram: _gseo26,
            massPound: _gseo43,
            massOunce: _gseo44,
            powerKilowatt: _gseo45,
            powerWatt: _gseo27,
            powerHorsepower: _gseo46,
            pressureHectopascal: _gseo59,
            pressureInchHg: {
                one: "{0} inHg",
                few: "{0} inHg",
                other: "{0} inHg"
            },
            pressureMillibar: {
                one: "{0} mb",
                few: "{0} mb",
                other: "{0} mb"
            },
            speedKilometerPerHour: _gseo66,
            speedMeterPerSecond: _gseo60,
            speedMilePerHour: _gseo67,
            temperatureCelsius: _gseo47,
            temperatureFahrenheit: {
                one: "{0}°F",
                few: "{0}°F",
                other: "{0}°F"
            },
            volumeCubicKilometer: _gseo61,
            volumeCubicMile: _gseo62,
            volumeLiter: _gseo28
        },
        compoundUnit: {
            per: "{0}/{1}"
        }
    },
    "long": P.unitPatterns.long,
    "short": {
        unit: {
            accelerationGForce: _gseo23,
            accelerationMeterPerSecondSquared: {
                one: "{0} m/s²",
                few: "{0} m/s²",
                other: "{0} m/s²"
            },
            angleRevolution: {
                one: "{0} rev.",
                few: "{0} rev.",
                other: "{0} rev."
            },
            angleRadian: {
                one: "{0} rad",
                few: "{0} rad",
                other: "{0} rad"
            },
            angleDegree: _gseo15,
            angleArcMinute: {
                one: "{0} arcmin",
                few: "{0} arcmin",
                other: "{0} arcmin"
            },
            angleArcSecond: _gseo68,
            areaSquareKilometer: _gseo55,
            areaHectare: _gseo32,
            areaSquareMeter: _gseo33,
            areaSquareCentimeter: {
                one: "{0} cm²",
                few: "{0} cm²",
                other: "{0} cm²"
            },
            areaSquareMile: _gseo56,
            areaAcre: _gseo57,
            areaSquareYard: {
                one: "{0} yd²",
                few: "{0} yd²",
                other: "{0} yd²"
            },
            areaSquareFoot: _gseo58,
            areaSquareInch: {
                one: "{0} in²",
                few: "{0} in²",
                other: "{0} in²"
            },
            concentrKarat: {
                one: "{0} kt",
                few: "{0} kt",
                other: "{0} kt"
            },
            consumptionLiterPerKilometer: {
                one: "{0} l/km",
                few: "{0} l/km",
                other: "{0} l/km"
            },
            "consumptionLiterPer-100kilometers": {
                one: "l/100 km",
                few: "{0} l/100 km",
                other: "{0} l/100 km"
            },
            consumptionMilePerGallon: {
                one: "{0} milă/gal.",
                few: "{0} mile/gal.",
                other: "{0} mile/gal."
            },
            digitalTerabyte: {
                one: "{0} TB",
                few: "{0} TB",
                other: "{0} TB"
            },
            digitalTerabit: {
                one: "{0} Tb",
                few: "{0} Tb",
                other: "{0} Tb"
            },
            digitalGigabyte: {
                one: "{0} GB",
                few: "{0} GB",
                other: "{0} GB"
            },
            digitalGigabit: {
                one: "{0} Gb",
                few: "{0} Gb",
                other: "{0} Gb"
            },
            digitalMegabyte: {
                one: "{0} MB",
                few: "{0} MB",
                other: "{0} MB"
            },
            digitalMegabit: {
                one: "{0} Mb",
                few: "{0} Mb",
                other: "{0} Mb"
            },
            digitalKilobyte: {
                one: "{0} kB",
                few: "{0} kB",
                other: "{0} kB"
            },
            digitalKilobit: {
                one: "{0} kb",
                few: "{0} kb",
                other: "{0} kb"
            },
            digitalByte: {
                one: "{0} B",
                few: "{0} B",
                other: "{0} B"
            },
            digitalBit: {
                one: "{0} b",
                few: "{0} b",
                other: "{0} b"
            },
            durationCentury: _gseo68,
            durationYear: {
                one: "{0} an",
                few: "{0} ani",
                other: "{0} ani"
            },
            durationMonth: {
                one: "{0} lună",
                few: "{0} luni",
                other: "{0} luni"
            },
            durationWeek: {
                one: "{0} săpt.",
                few: "{0} săpt.",
                other: "{0} săpt."
            },
            durationDay: {
                one: "{0} zi",
                few: "{0} zile",
                other: "{0} zile"
            },
            durationHour: {
                one: "{0} oră",
                few: "{0} ore",
                other: "{0} ore"
            },
            durationMinute: {
                one: "{0} min.",
                few: "{0} min.",
                other: "{0} min."
            },
            durationSecond: _gseo24,
            durationMillisecond: {
                one: "{0} ms",
                few: "{0} ms",
                other: "{0} ms"
            },
            durationMicrosecond: {
                one: "{0} μs",
                few: "{0} μs",
                other: "{0} μs"
            },
            durationNanosecond: {
                one: "{0} ns",
                few: "{0} ns",
                other: "{0} ns"
            },
            electricAmpere: {
                one: "{0} A",
                few: "{0} A",
                other: "{0} A"
            },
            electricMilliampere: {
                one: "{0} mA",
                few: "{0} mA",
                other: "{0} mA"
            },
            electricOhm: {
                one: "{0} Ω",
                few: "{0} Ω",
                other: "{0} Ω"
            },
            electricVolt: {
                one: "{0} V",
                few: "{0} V",
                other: "{0} V"
            },
            energyKilocalorie: _gseo69,
            energyCalorie: {
                one: "{0} cal",
                few: "{0} cal",
                other: "{0} cal"
            },
            energyFoodcalorie: _gseo69,
            energyKilojoule: {
                one: "{0} kJ",
                few: "{0} kJ",
                other: "{0} kJ"
            },
            energyJoule: {
                one: "{0} J",
                few: "{0} J",
                other: "{0} J"
            },
            energyKilowattHour: {
                one: "{0} kWh",
                few: "{0} kWh",
                other: "{0} kWh"
            },
            frequencyGigahertz: {
                one: "{0} GHz",
                few: "{0} GHz",
                other: "{0} GHz"
            },
            frequencyMegahertz: {
                one: "{0} MHz",
                few: "{0} MHz",
                other: "{0} MHz"
            },
            frequencyKilohertz: {
                one: "{0} kHz",
                few: "{0} kHz",
                other: "{0} kHz"
            },
            frequencyHertz: {
                one: "{0} Hz",
                few: "{0} Hz",
                other: "{0} Hz"
            },
            lengthKilometer: _gseo34,
            lengthMeter: _gseo25,
            lengthDecimeter: {
                one: "{0} dm",
                few: "{0} dm",
                other: "{0} dm"
            },
            lengthCentimeter: _gseo35,
            lengthMillimeter: _gseo36,
            lengthMicrometer: {
                one: "{0} µm",
                few: "{0} µm",
                other: "{0} µm"
            },
            lengthNanometer: {
                one: "{0} nm",
                few: "{0} nm",
                other: "{0} nm"
            },
            lengthPicometer: _gseo37,
            lengthMile: _gseo38,
            lengthYard: _gseo39,
            lengthFoot: _gseo40,
            lengthInch: _gseo41,
            lengthParsec: {
                one: "{0} pc",
                few: "{0} pc",
                other: "{0} pc"
            },
            lengthLightYear: _gseo65,
            lengthAstronomicalUnit: {
                one: "{0} ua",
                few: "{0} ua",
                other: "{0} ua"
            },
            lengthNauticalMile: {
                one: "{0} mn",
                few: "{0} mn",
                other: "{0} mn"
            },
            lengthMileScandinavian: {
                one: "{0} smi",
                few: "{0} smi",
                other: "{0} smi"
            },
            lightLux: {
                one: "{0} lx",
                few: "{0} lx",
                other: "{0} lx"
            },
            massMetricTon: {
                one: "{0} t",
                few: "{0} t",
                other: "{0} t"
            },
            massKilogram: _gseo42,
            massGram: _gseo26,
            massMilligram: {
                one: "{0} mg",
                few: "{0} mg",
                other: "{0} mg"
            },
            massMicrogram: {
                one: "{0} µg",
                few: "{0} µg",
                other: "{0} µg"
            },
            massTon: {
                one: "{0} t.s.",
                few: "{0} t.s.",
                other: "{0} t.s."
            },
            massPound: _gseo43,
            massOunce: _gseo44,
            massOunceTroy: {
                one: "{0} oz t",
                few: "{0} oz t",
                other: "{0} oz t"
            },
            massCarat: {
                one: "{0} ct",
                few: "{0} ct",
                other: "{0} ct"
            },
            powerGigawatt: {
                one: "{0} GW",
                few: "{0} GW",
                other: "{0} GW"
            },
            powerMegawatt: {
                one: "{0} MW",
                few: "{0} MW",
                other: "{0} MW"
            },
            powerKilowatt: _gseo45,
            powerWatt: _gseo27,
            powerMilliwatt: {
                one: "{0} mW",
                few: "{0} mW",
                other: "{0} mW"
            },
            powerHorsepower: _gseo46,
            pressureHectopascal: _gseo59,
            pressureMillimeterOfMercury: {
                one: "{0} mm Hg",
                few: "{0} mm Hg",
                other: "{0} mm Hg"
            },
            pressurePoundPerSquareInch: {
                one: "{0} psi",
                few: "{0} psi",
                other: "{0} psi"
            },
            pressureInchHg: {
                one: "{0} in Hg",
                few: "{0} in Hg",
                other: "{0} in Hg"
            },
            pressureMillibar: {
                one: "{0} mbar",
                few: "{0} mbar",
                other: "{0} mbar"
            },
            speedKilometerPerHour: _gseo66,
            speedMeterPerSecond: _gseo60,
            speedMilePerHour: _gseo67,
            speedKnot: {
                one: "{0} kn",
                few: "{0} kn",
                other: "{0} kn"
            },
            temperatureGeneric: _gseo15,
            temperatureCelsius: _gseo47,
            temperatureFahrenheit: {
                one: "{0} °F",
                few: "{0} °F",
                other: "{0} °F"
            },
            temperatureKelvin: {
                one: "{0} K",
                few: "{0} K",
                other: "{0} K"
            },
            volumeCubicKilometer: _gseo61,
            volumeCubicMeter: {
                one: "{0} m³",
                few: "{0} m³",
                other: "{0} m³"
            },
            volumeCubicCentimeter: {
                one: "{0} cm³",
                few: "{0} cm³",
                other: "{0} cm³"
            },
            volumeCubicMile: _gseo62,
            volumeCubicYard: {
                one: "{0} yd³",
                few: "{0} yd³",
                other: "{0} yd³"
            },
            volumeCubicFoot: {
                one: "{0} ft³",
                few: "{0} ft³",
                other: "{0} ft³"
            },
            volumeCubicInch: {
                one: "{0} in³",
                few: "{0} in³",
                other: "{0} in³"
            },
            volumeMegaliter: {
                one: "{0} Ml",
                few: "{0} Ml",
                other: "{0} Ml"
            },
            volumeHectoliter: {
                one: "{0} hl",
                few: "{0} hl",
                other: "{0} hl"
            },
            volumeLiter: _gseo28,
            volumeDeciliter: {
                one: "{0} dl",
                few: "{0} dl",
                other: "{0} dl"
            },
            volumeCentiliter: {
                one: "{0} cl",
                few: "{0} cl",
                other: "{0} cl"
            },
            volumeMilliliter: {
                one: "{0} ml",
                few: "{0} ml",
                other: "{0} ml"
            },
            volumePintMetric: {
                one: "{0} mpt",
                few: "{0} mpt",
                other: "{0} mpt"
            },
            volumeCupMetric: {
                one: "{0} mc",
                few: "{0} mc",
                other: "{0} mc"
            },
            volumeAcreFoot: {
                one: "{0} ac ft",
                few: "{0} ac ft",
                other: "{0} ac ft"
            },
            volumeGallon: {
                one: "{0} gal",
                few: "{0} gal",
                other: "{0} gal"
            },
            volumeQuart: {
                one: "{0} qt",
                few: "{0} qt",
                other: "{0} qt"
            },
            volumePint: {
                one: "{0} pt",
                few: "{0} pt",
                other: "{0} pt"
            },
            volumeCup: {
                one: "{0} c",
                few: "{0} c",
                other: "{0} c"
            },
            volumeFluidOunce: {
                one: "{0} fl oz",
                few: "{0} fl oz",
                other: "{0} fl oz"
            },
            volumeTablespoon: {
                one: "{0} tbsp",
                few: "{0} tbsp",
                other: "{0} tbsp"
            },
            volumeTeaspoon: {
                one: "{0} tsp",
                few: "{0} tsp",
                other: "{0} tsp"
            },
            concentrMilligramPerDeciliter: {
                other: "{0} mg/dL"
            },
            concentrMillimolePerLiter: {
                other: "{0} mmol/L"
            },
            concentrPartPerMillion: {
                other: "{0} ppm"
            },
            consumptionMilePerGallonImperial: {
                other: "{0} mpg Imp."
            },
            lengthFurlong: {
                other: "{0} fur"
            },
            lengthFathom: {
                other: "{0} fm"
            },
            massStone: {
                other: "{0} st"
            },
            volumeBushel: {
                other: "{0} bu"
            },
            volumeGallonImperial: {
                other: "{0} gal Imp."
            }
        },
        compoundUnit: {
            per: "{0}/{1}"
        }
    }
};

inter.calendars = {
    buddhist: {
        dateFormats: P.calendars.buddhist.dateFormats,
        datePartsOrder: "dmy",
        dateIntervalFormats: _gseo269,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _gseo259,
        dayPeriods: _gseo267,
        monthNames: _gseo263,
        eraNames: {
            wide: [ "era budistă" ],
            abbreviated: [ "e.b." ]
        },
        quarterNames: _gseo252,
        fields: _gseo274
    },
    chinese: _gseo277,
    coptic: {
        dateFormats: P.calendars.buddhist.dateFormats,
        datePartsOrder: "dmy",
        dateIntervalFormats: _gseo269,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _gseo259,
        dayPeriods: _gseo267,
        monthNames: {
            format: _gseo254,
            standAlone: _gseo254
        },
        eraNames: _gseo77,
        quarterNames: _gseo252,
        fields: _gseo274
    },
    dangi: _gseo277,
    ethioaa: _gseo275,
    ethiopic: {
        dateFormats: P.calendars.buddhist.dateFormats,
        datePartsOrder: "dmy",
        dateIntervalFormats: _gseo269,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _gseo259,
        dayPeriods: _gseo267,
        monthNames: {
            format: _gseo255,
            standAlone: _gseo255
        },
        eraNames: _gseo77,
        quarterNames: _gseo252,
        fields: _gseo274
    },
    gregorian: {
        dateFormats: {
            basic: {
                fullDate: "EEEE, d MMMM y",
                longDate: "d MMMM y",
                mediumDate: "d MMM y",
                shortDate: "dd.MM.y",
                fullTime: "HH:mm:ss zzzz",
                longTime: "HH:mm:ss z",
                mediumTime: "HH:mm:ss",
                shortTime: "HH:mm",
                shortDateTime: "dd.MM.y, HH:mm",
                mediumDateTime: "d MMM y, HH:mm:ss",
                longDateTime: "d MMMM y, HH:mm:ss z",
                fullDateTime: "EEEE, d MMMM y, HH:mm:ss zzzz"
            },
            cldr: {
                d: "d",
                E: "ccc",
                Ed: "E d",
                Ehm: "E h:mm a",
                EHm: "E HH:mm",
                Ehms: "E h:mm:ss a",
                EHms: "E HH:mm:ss",
                Gy: "y G",
                GyMMM: "MMM y G",
                GyMMMd: "d MMM y G",
                GyMMMEd: "E, d MMM y G",
                h: "h a",
                H: "HH",
                hm: "h:mm a",
                Hm: "HH:mm",
                hms: "h:mm:ss a",
                Hms: "HH:mm:ss",
                hmsv: "h:mm:ss a v",
                Hmsv: "HH:mm:ss v",
                hmv: "h:mm a v",
                Hmv: "HH:mm v",
                M: "L",
                Md: "dd.MM",
                MEd: "E, dd.MM",
                MMdd: "dd.MM",
                MMM: "LLL",
                MMMd: "d MMM",
                MMMEd: "E, d MMM",
                MMMMd: "d MMMM",
                MMMMEd: "E, d MMMM",
                ms: "mm:ss",
                y: "y",
                yM: "MM.y",
                yMd: "dd.MM.y",
                yMEd: "E, dd.MM.y",
                yMM: "MM.y",
                yMMM: "MMM y",
                yMMMd: "d MMM y",
                yMMMEd: "E, d MMM y",
                yMMMM: "MMMM y",
                yQQQ: "QQQ y",
                yQQQQ: "QQQQ y"
            }
        },
        datePartsOrder: "dmy",
        dateIntervalFormats: {
            d: {
                d: "d–d"
            },
            h: _gseo4,
            H: {
                H: "HH–HH"
            },
            hm: _gseo82,
            Hm: _gseo12,
            hmv: _gseo107,
            Hmv: _gseo17,
            hv: _gseo6,
            Hv: {
                H: "HH–HH v"
            },
            M: {
                M: "M–M"
            },
            Md: _gseo18,
            MEd: _gseo70,
            MMM: {
                M: "MMM–MMM"
            },
            MMMd: _gseo7,
            MMMEd: _gseo71,
            y: {
                y: "y–y"
            },
            yM: {
                M: "MM.y – MM.y",
                y: "MM.y – MM.y"
            },
            yMd: {
                d: "dd.MM.y – dd.MM.y",
                M: "dd.MM.y – dd.MM.y",
                y: "dd.MM.y – dd.MM.y"
            },
            yMEd: {
                d: "E, dd.MM.y – E, dd.MM.y",
                M: "E, dd.MM.y – E, dd.MM.y",
                y: "E, dd.MM.y – E, dd.MM.y"
            },
            yMMM: {
                M: "MMM–MMM y",
                y: "MMM y – MMM y"
            },
            yMMMd: {
                d: "d–d MMM y",
                M: "d MMM – d MMM y",
                y: "d MMM y – d MMM y"
            },
            yMMMEd: {
                d: "E, d MMM – E, d MMM y",
                M: "E, d MMM – E, d MMM y",
                y: "E, d MMM y – E, d MMM y"
            },
            yMMMM: {
                M: "MMMM – MMMM y",
                y: "MMMM y – MMMM y"
            }
        },
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _gseo259,
        dayPeriods: _gseo267,
        monthNames: _gseo263,
        eraNames: {
            wide: [ "înainte de Hristos", "după Hristos" ],
            abbreviated: [ "î.e.n.", "d.Hr." ]
        },
        quarterNames: _gseo252,
        fields: _gseo274
    },
    hebrew: {
        dateFormats: P.calendars.buddhist.dateFormats,
        datePartsOrder: "dmy",
        dateIntervalFormats: _gseo269,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _gseo259,
        dayPeriods: _gseo267,
        monthNames: {
            format: _gseo248,
            standAlone: _gseo248
        },
        eraNames: {
            wide: [ "AM" ],
            abbreviated: [ "AM" ]
        },
        quarterNames: _gseo252,
        fields: _gseo274
    },
    indian: {
        dateFormats: P.calendars.buddhist.dateFormats,
        datePartsOrder: "dmy",
        dateIntervalFormats: _gseo269,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _gseo259,
        dayPeriods: _gseo267,
        monthNames: {
            format: _gseo256,
            standAlone: _gseo256
        },
        eraNames: {
            wide: [ "Saka" ],
            abbreviated: [ "Saka" ]
        },
        quarterNames: _gseo252,
        fields: _gseo274
    },
    islamic: _gseo276,
    "islamic-umalqura": _gseo276,
    "islamic-tbla": _gseo276,
    "islamic-civil": _gseo276,
    "islamic-rgsa": _gseo276,
    iso8601: _gseo275,
    japanese: {
        dateFormats: P.calendars.buddhist.dateFormats,
        datePartsOrder: "dmy",
        dateIntervalFormats: _gseo269,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _gseo259,
        dayPeriods: _gseo267,
        monthNames: _gseo263,
        eraNames: {
            wide: _gseo272,
            abbreviated: _gseo272
        },
        quarterNames: _gseo252,
        fields: _gseo274
    },
    persian: {
        dateFormats: P.calendars.buddhist.dateFormats,
        datePartsOrder: "dmy",
        dateIntervalFormats: _gseo269,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _gseo259,
        dayPeriods: _gseo267,
        monthNames: {
            format: _gseo249,
            standAlone: _gseo249
        },
        eraNames: {
            wide: [ "AP" ],
            abbreviated: [ "AP" ]
        },
        quarterNames: _gseo252,
        fields: _gseo274
    },
    roc: {
        dateFormats: P.calendars.buddhist.dateFormats,
        datePartsOrder: "dmy",
        dateIntervalFormats: _gseo269,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _gseo259,
        dayPeriods: _gseo267,
        monthNames: _gseo263,
        eraNames: {
            wide: _gseo5,
            abbreviated: _gseo5
        },
        quarterNames: _gseo252,
        fields: _gseo274
    },
    islamicc: _gseo275
};

inter.pluralRule = function(n) {
    var i = Math.floor(Math.abs(n)), v = n.toString().replace(/^[^.]*\.?/, "").length;
    if (typeof n === "string") n = parseInt(n, 10);
    if (i === 1 && v === 0) return "one";
    if (!(v === 0) || n === 0 || !(n === 1) && n % 100 === Math.floor(n % 100) && n % 100 >= 1 && n % 100 <= 19) return "few";
    return "other";
};

inter.renderDigitsOrdinal = function(n) {
    if (n < 0) return "−" + this.renderDigitsOrdinal(-n);
    if (n >= 0) return this.renderNumber(n, "#,##0") + "a";
};

inter.renderSpelloutNumbering = function(n) {
    if (n < 0) return "−" + this.renderSpelloutNumbering(-n);
    if (n >= 0) return this.renderSpelloutCardinalMasculine(n);
};

inter.renderArmenianUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderArmenianUpper(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e4) return this.renderNumber(n, "#,##0");
    if (n >= 9e3) return "Ք" + (n === 9e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 8e3) return "Փ" + (n === 8e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 7e3) return "Ւ" + (n === 7e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 6e3) return "Ց" + (n === 6e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 5e3) return "Ր" + (n === 5e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 4e3) return "Տ" + (n === 4e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 3e3) return "Վ" + (n === 3e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 2e3) return "Ս" + (n === 2e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 1e3) return "Ռ" + (n === 1e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 900) return "Ջ" + (n === 900 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 800) return "Պ" + (n === 800 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 700) return "Չ" + (n === 700 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 600) return "Ո" + (n === 600 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 500) return "Շ" + (n === 500 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 400) return "Ն" + (n === 400 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 300) return "Յ" + (n === 300 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 200) return "Մ" + (n === 200 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 100) return "Ճ" + (n === 100 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 90) return "Ղ" + (n === 90 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 80) return "Ձ" + (n === 80 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 70) return "Հ" + (n === 70 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 60) return "Կ" + (n === 60 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 50) return "Ծ" + (n === 50 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 40) return "Խ" + (n === 40 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 30) return "Լ" + (n === 30 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 20) return "Ի" + (n === 20 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 10) return "Ժ" + (n === 10 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 9) return "Թ";
    if (n >= 8) return "Ը";
    if (n >= 7) return "Է";
    if (n >= 6) return "Զ";
    if (n >= 5) return "Ե";
    if (n >= 4) return "Դ";
    if (n >= 3) return "Գ";
    if (n >= 2) return "Բ";
    if (n >= 1) return "Ա";
    if (n >= 0) return "0";
};

inter.renderArmenianLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderArmenianLower(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e4) return this.renderNumber(n, "#,##0");
    if (n >= 9e3) return "ք" + (n === 9e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 8e3) return "փ" + (n === 8e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 7e3) return "ւ" + (n === 7e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 6e3) return "ց" + (n === 6e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 5e3) return "ր" + (n === 5e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 4e3) return "տ" + (n === 4e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 3e3) return "վ" + (n === 3e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 2e3) return "ս" + (n === 2e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 1e3) return "ռ" + (n === 1e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 900) return "ջ" + (n === 900 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 800) return "պ" + (n === 800 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 700) return "չ" + (n === 700 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 600) return "ո" + (n === 600 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 500) return "շ" + (n === 500 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 400) return "ն" + (n === 400 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 300) return "յ" + (n === 300 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 200) return "մ" + (n === 200 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 100) return "ճ" + (n === 100 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 90) return "ղ" + (n === 90 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 80) return "ձ" + (n === 80 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 70) return "հ" + (n === 70 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 60) return "կ" + (n === 60 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 50) return "ծ" + (n === 50 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 40) return "խ" + (n === 40 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 30) return "լ" + (n === 30 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 20) return "ի" + (n === 20 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 10) return "ժ" + (n === 10 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 9) return "թ";
    if (n >= 8) return "ը";
    if (n >= 7) return "է";
    if (n >= 6) return "զ";
    if (n >= 5) return "ե";
    if (n >= 4) return "դ";
    if (n >= 3) return "գ";
    if (n >= 2) return "բ";
    if (n >= 1) return "ա";
    if (n >= 0) return "0";
};

inter.renderCyrillicLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderCyrillicLower(-n);
    if (isFractional && n > 1) return this.renderCyrillicLower(Math.floor(n)) + "." + this.renderCyrillicLower(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e15) return "҂҂҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e15)) + (n === 1e15 ? "" : " " + this.renderCyrillicLower(n % 1e15));
    if (n >= 1e12) return "҂҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e12)) + (n === 1e12 ? "" : " " + this.renderCyrillicLower(n % 1e12));
    if (n >= 1e9) return "҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e9)) + (n === 1e9 ? "" : " " + this.renderCyrillicLower(n % 1e9));
    if (n >= 1e6) return "҂҂" + this.renderCyrillicLower(Math.floor(n / 1e6)) + (n === 1e6 ? "" : " " + this.renderCyrillicLower(n % 1e6));
    if (n >= 11e3) return this.renderCyrillicLowerThousands(Math.floor(n / 1e4)) + (n === 11e3 ? "" : " " + this.renderCyrillicLower(n % 1e4));
    if (n >= 1e4) return "҂" + this.renderCyrillicLower(Math.floor(n / 1e4)) + (n === 1e4 ? "" : " " + this.renderCyrillicLower(n % 1e4));
    if (n >= 1e3) return "҂" + this.renderCyrillicLower110(Math.floor(n / 1e3)) + this.renderCyrillicLowerPost(n % 1e3);
    if (n >= 900) return "ц" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 801) return "ѿ" + this.renderCyrillicLower(n % 100);
    if (n >= 800) return "ѿ҃";
    if (n >= 700) return "ѱ" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 600) return "х" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 500) return "ф" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 400) return "у" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 300) return "т" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 200) return "с" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 100) return "р" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 90) return "ч" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 80) return "п" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 70) return "ѻ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 60) return "ѯ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 50) return "н" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 40) return "м" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 30) return "л" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 20) return "к" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 19) return "ѳ҃і";
    if (n >= 18) return "и҃і";
    if (n >= 17) return "з҃і";
    if (n >= 16) return "ѕ҃і";
    if (n >= 15) return "є҃і";
    if (n >= 14) return "д҃і";
    if (n >= 13) return "г҃і";
    if (n >= 12) return "в҃і";
    if (n >= 11) return "а҃і";
    if (n >= 1) return this.renderCyrillicLower110(n) + "҃";
    if (n >= 0) return "0҃";
};

inter.renderEthiopic = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderEthiopic(-n);
    if (isFractional && n > 1) return this.renderEthiopic(Math.floor(n)) + "፡" + this.renderEthiopic(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,###0");
    if (n >= 2e16) return this.renderEthiopic(Math.floor(n / 1e16)) + "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 1e16) return "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 2e12) return this.renderEthiopic(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1e12) return "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 2e8) return this.renderEthiopic(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1e8) return "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 2e4) return this.renderEthiopic(Math.floor(n / 1e4)) + "፼" + (n === 2e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 1e4) return "፼" + (n === 1e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 200) return this.renderEthiopic(Math.floor(n / 100)) + "፻" + (n === 200 ? "" : this.renderEthiopic(n % 100));
    if (n >= 100) return "፻" + (n === 100 ? "" : this.renderEthiopic(n % 100));
    if (n >= 90) return "፺" + (n === 90 ? "" : this.renderEthiopic(n % 10));
    if (n >= 80) return "፹" + (n === 80 ? "" : this.renderEthiopic(n % 10));
    if (n >= 70) return "፸" + (n === 70 ? "" : this.renderEthiopic(n % 10));
    if (n >= 60) return "፷" + (n === 60 ? "" : this.renderEthiopic(n % 10));
    if (n >= 50) return "፶" + (n === 50 ? "" : this.renderEthiopic(n % 10));
    if (n >= 40) return "፵" + (n === 40 ? "" : this.renderEthiopic(n % 10));
    if (n >= 30) return "፴" + (n === 30 ? "" : this.renderEthiopic(n % 10));
    if (n >= 20) return "፳" + (n === 20 ? "" : this.renderEthiopic(n % 10));
    if (n >= 10) return "፲" + (n === 10 ? "" : this.renderEthiopic(n % 10));
    if (n >= 9) return "፱";
    if (n >= 8) return "፰";
    if (n >= 7) return "፯";
    if (n >= 6) return "፮";
    if (n >= 5) return "፭";
    if (n >= 4) return "፬";
    if (n >= 3) return "፫";
    if (n >= 2) return "፪";
    if (n >= 1) return "፩";
    if (n >= 0) return "ባዶ";
};

inter.renderGeorgian = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGeorgian(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 2e4) return this.renderNumber(n, "#,##0");
    if (n >= 1e4) return "ჯ" + (n === 1e4 ? "" : this.renderGeorgian(n % 1e4));
    if (n >= 9e3) return "ჵ" + (n === 9e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 8e3) return "ჴ" + (n === 8e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 7e3) return "ხ" + (n === 7e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 6e3) return "ჭ" + (n === 6e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 5e3) return "წ" + (n === 5e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 4e3) return "ძ" + (n === 4e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 3e3) return "ც" + (n === 3e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 2e3) return "ჩ" + (n === 2e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 1e3) return "შ" + (n === 1e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 900) return "ყ" + (n === 900 ? "" : this.renderGeorgian(n % 100));
    if (n >= 800) return "ღ" + (n === 800 ? "" : this.renderGeorgian(n % 100));
    if (n >= 700) return "ქ" + (n === 700 ? "" : this.renderGeorgian(n % 100));
    if (n >= 600) return "ფ" + (n === 600 ? "" : this.renderGeorgian(n % 100));
    if (n >= 500) return "ჳ" + (n === 500 ? "" : this.renderGeorgian(n % 100));
    if (n >= 400) return "უ" + (n === 400 ? "" : this.renderGeorgian(n % 100));
    if (n >= 300) return "ტ" + (n === 300 ? "" : this.renderGeorgian(n % 100));
    if (n >= 200) return "ს" + (n === 200 ? "" : this.renderGeorgian(n % 100));
    if (n >= 100) return "რ" + (n === 100 ? "" : this.renderGeorgian(n % 100));
    if (n >= 90) return "ჟ" + (n === 90 ? "" : this.renderGeorgian(n % 10));
    if (n >= 80) return "პ" + (n === 80 ? "" : this.renderGeorgian(n % 10));
    if (n >= 70) return "ო" + (n === 70 ? "" : this.renderGeorgian(n % 10));
    if (n >= 60) return "ჲ" + (n === 60 ? "" : this.renderGeorgian(n % 10));
    if (n >= 50) return "ნ" + (n === 50 ? "" : this.renderGeorgian(n % 10));
    if (n >= 40) return "მ" + (n === 40 ? "" : this.renderGeorgian(n % 10));
    if (n >= 30) return "ლ" + (n === 30 ? "" : this.renderGeorgian(n % 10));
    if (n >= 20) return "კ" + (n === 20 ? "" : this.renderGeorgian(n % 10));
    if (n >= 10) return "ი" + (n === 10 ? "" : this.renderGeorgian(n % 10));
    if (n >= 9) return "თ";
    if (n >= 8) return "ჱ";
    if (n >= 7) return "ზ";
    if (n >= 6) return "ვ";
    if (n >= 5) return "ე";
    if (n >= 4) return "დ";
    if (n >= 3) return "გ";
    if (n >= 2) return "ბ";
    if (n >= 1) return "ა";
    if (n >= 0) return this.renderNumber(n, "#,##0");
};

inter.renderGreekUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGreekUpper(-n);
    if (isFractional && n > 1) return this.renderGreekUpper(Math.floor(n)) + "." + this.renderGreekUpper(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 0) return this.renderGreekNumeralMajuscules(n) + "´";
};

inter.renderGreekLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGreekLower(-n);
    if (isFractional && n > 1) return this.renderGreekLower(Math.floor(n)) + "." + this.renderGreekLower(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 0) return this.renderGreekNumeralMinuscules(n) + "´";
};

inter.renderSpelloutCardinal = function(n) {
    if (n < 0) return "−" + this.renderSpelloutCardinal(-n);
    if (n >= 0) return this.renderNumber(n, "#,##0.#");
};

inter.renderHebrew = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderHebrew(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1000001) return this.renderNumber(n, "#,##0");
    if (n >= 1e6) return "אלף אלפים";
    if (n >= 3001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 3001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 3e3) return this.renderHebrew(Math.floor(n / 1e3)) + " אלפים";
    if (n >= 2001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 2001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 2e3) return "אלפיים";
    if (n >= 1001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 1001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 1e3) return "אלף";
    if (n >= 901) return "תתק" + this.renderHebrew099(n % 100);
    if (n >= 900) return "תת״ק";
    if (n >= 801) return "תת" + this.renderHebrew099(n % 100);
    if (n >= 800) return "ת״ת";
    if (n >= 745) return "תש" + this.renderHebrew099(n % 100);
    if (n >= 744) return "תשד״מ";
    if (n >= 701) return "תש" + this.renderHebrew099(n % 100);
    if (n >= 700) return "ת״ש";
    if (n >= 699) return "תר" + this.renderHebrew099(n % 100);
    if (n >= 698) return "תרח״צ";
    if (n >= 601) return "תר" + this.renderHebrew099(n % 100);
    if (n >= 600) return "ת״ר";
    if (n >= 501) return "תק" + this.renderHebrew099(n % 100);
    if (n >= 500) return "ת״ק";
    if (n >= 400) return "ת" + this.renderHebrew099(n % 100);
    if (n >= 345) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 344) return "שד״מ";
    if (n >= 305) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 304) return "ד״ש";
    if (n >= 300) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 299) return "ר" + this.renderHebrew099(n % 100);
    if (n >= 298) return "רח״צ";
    if (n >= 200) return "ר" + this.renderHebrew099(n % 100);
    if (n >= 100) return "ק" + this.renderHebrew099(n % 100);
    if (n >= 91) return "צ״" + this.renderHebrewItem(n % 10);
    if (n >= 90) return "צ׳";
    if (n >= 81) return "פ״" + this.renderHebrewItem(n % 10);
    if (n >= 80) return "פ׳";
    if (n >= 71) return "ע״" + this.renderHebrewItem(n % 10);
    if (n >= 70) return "ע׳";
    if (n >= 61) return "ס״" + this.renderHebrewItem(n % 10);
    if (n >= 60) return "ס׳";
    if (n >= 51) return "נ״" + this.renderHebrewItem(n % 10);
    if (n >= 50) return "נ׳";
    if (n >= 41) return "מ״" + this.renderHebrewItem(n % 10);
    if (n >= 40) return "מ׳";
    if (n >= 31) return "ל״" + this.renderHebrewItem(n % 10);
    if (n >= 30) return "ל׳";
    if (n >= 21) return "כ״" + this.renderHebrewItem(n % 10);
    if (n >= 20) return "כ׳";
    if (n >= 17) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "ט״ז";
    if (n >= 15) return "ט״ו";
    if (n >= 11) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 0) return this.renderHebrewItem(n) + "׳";
};

inter.renderRomanUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderRomanUpper(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 4e5) return this.renderNumber(n, "#,##0");
    if (n >= 3e5) return "ↈↈↈ" + (n === 3e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 2e5) return "ↈↈ" + (n === 2e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 1e5) return "ↈ" + (n === 1e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 9e4) return "ↂↈ" + (n === 9e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 8e4) return "ↇↂↂↂ" + (n === 8e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 7e4) return "ↇↂↂ" + (n === 7e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 6e4) return "ↇↂ" + (n === 6e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 5e4) return "ↇ" + (n === 5e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 4e4) return "ↂↇ" + (n === 4e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 3e4) return "ↂↂↂ" + (n === 3e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 2e4) return "ↂↂ" + (n === 2e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 1e4) return "ↂ" + (n === 1e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 9e3) return "Mↂ" + (n === 9e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 8e3) return "ↁMMM" + (n === 8e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 7e3) return "ↁMM" + (n === 7e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 6e3) return "ↁM" + (n === 6e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 5e3) return "ↁ" + (n === 5e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 4e3) return "Mↁ" + (n === 4e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 3e3) return "MMM" + (n === 3e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 2e3) return "MM" + (n === 2e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 1e3) return "M" + (n === 1e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 900) return "CM" + (n === 900 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 800) return "DCCC" + (n === 800 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 700) return "DCC" + (n === 700 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 600) return "DC" + (n === 600 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 500) return "D" + (n === 500 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 400) return "CD" + (n === 400 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 300) return "CCC" + (n === 300 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 200) return "CC" + (n === 200 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 100) return "C" + (n === 100 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 90) return "XC" + (n === 90 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 80) return "LXXX" + (n === 80 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 70) return "LXX" + (n === 70 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 60) return "LX" + (n === 60 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 50) return "L" + (n === 50 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 40) return "XL" + (n === 40 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 30) return "XXX" + (n === 30 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 20) return "XX" + (n === 20 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 10) return "X" + (n === 10 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 9) return "IX";
    if (n >= 8) return "VIII";
    if (n >= 7) return "VII";
    if (n >= 6) return "VI";
    if (n >= 5) return "V";
    if (n >= 4) return "IV";
    if (n >= 3) return "III";
    if (n >= 2) return "II";
    if (n >= 1) return "I";
    if (n >= 0) return "N";
};

inter.renderRomanLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderRomanLower(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 5e3) return this.renderNumber(n, "#,##0");
    if (n >= 4e3) return "mmmm" + (n === 4e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 3e3) return "mmm" + (n === 3e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 2e3) return "mm" + (n === 2e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 1e3) return "m" + (n === 1e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 900) return "cm" + (n === 900 ? "" : this.renderRomanLower(n % 100));
    if (n >= 800) return "dccc" + (n === 800 ? "" : this.renderRomanLower(n % 100));
    if (n >= 700) return "dcc" + (n === 700 ? "" : this.renderRomanLower(n % 100));
    if (n >= 600) return "dc" + (n === 600 ? "" : this.renderRomanLower(n % 100));
    if (n >= 500) return "d" + (n === 500 ? "" : this.renderRomanLower(n % 100));
    if (n >= 400) return "cd" + (n === 400 ? "" : this.renderRomanLower(n % 100));
    if (n >= 300) return "ccc" + (n === 300 ? "" : this.renderRomanLower(n % 100));
    if (n >= 200) return "cc" + (n === 200 ? "" : this.renderRomanLower(n % 100));
    if (n >= 100) return "c" + (n === 100 ? "" : this.renderRomanLower(n % 100));
    if (n >= 90) return "xc" + (n === 90 ? "" : this.renderRomanLower(n % 10));
    if (n >= 80) return "lxxx" + (n === 80 ? "" : this.renderRomanLower(n % 10));
    if (n >= 70) return "lxx" + (n === 70 ? "" : this.renderRomanLower(n % 10));
    if (n >= 60) return "lx" + (n === 60 ? "" : this.renderRomanLower(n % 10));
    if (n >= 50) return "l" + (n === 50 ? "" : this.renderRomanLower(n % 10));
    if (n >= 40) return "xl" + (n === 40 ? "" : this.renderRomanLower(n % 10));
    if (n >= 30) return "xxx" + (n === 30 ? "" : this.renderRomanLower(n % 10));
    if (n >= 20) return "xx" + (n === 20 ? "" : this.renderRomanLower(n % 10));
    if (n >= 10) return "x" + (n === 10 ? "" : this.renderRomanLower(n % 10));
    if (n >= 9) return "ix";
    if (n >= 8) return "viii";
    if (n >= 7) return "vii";
    if (n >= 6) return "vi";
    if (n >= 5) return "v";
    if (n >= 4) return "iv";
    if (n >= 3) return "iii";
    if (n >= 2) return "ii";
    if (n >= 1) return "i";
    if (n >= 0) return "n";
};

inter.renderTamil = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderTamil(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e8) return this.renderNumber(n, "#,##,##0");
    if (n >= 1e6) return this.renderTamil(Math.floor(n / 1e6)) + "௱௲" + (n === 1e6 ? "" : this.renderTamilThousands(n % 1e6));
    if (n >= 2e3) return this.renderTamil(Math.floor(n / 1e3)) + "௲" + (n === 2e3 ? "" : this.renderTamil(n % 1e3));
    if (n >= 1e3) return "௲" + (n === 1e3 ? "" : this.renderTamil(n % 1e3));
    if (n >= 200) return this.renderTamil(Math.floor(n / 100)) + "௱" + (n === 200 ? "" : this.renderTamil(n % 100));
    if (n >= 100) return "௱" + (n === 100 ? "" : this.renderTamil(n % 100));
    if (n >= 20) return this.renderTamil(Math.floor(n / 10)) + "௰" + (n === 20 ? "" : this.renderTamil(n % 10));
    if (n >= 10) return "௰" + (n === 10 ? "" : this.renderTamil(n % 10));
    if (n >= 9) return "௯";
    if (n >= 8) return "௮";
    if (n >= 7) return "௭";
    if (n >= 6) return "௬";
    if (n >= 5) return "௫";
    if (n >= 4) return "௪";
    if (n >= 3) return "௩";
    if (n >= 2) return "௨";
    if (n >= 1) return "௧";
    if (n >= 0) return "௦";
};

inter.renderSpelloutCardinalMasculine = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "minus " + this.renderSpelloutCardinalMasculine(-n);
    if (isFractional && n > 1) return this.renderSpelloutCardinalMasculine(Math.floor(n)) + " virgulă " + this.renderSpelloutCardinalMasculine(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 2e15) return this.renderSpelloutCardinalNeuter(Math.floor(n / 1e15)) + " biliarde" + (n === 2e15 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e15));
    if (n >= 1e15) return this.renderSpelloutCardinalNeuter(Math.floor(n / 1e15)) + " biliard" + (n === 1e15 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e15));
    if (n >= 2e12) return this.renderSpelloutCardinalNeuter(Math.floor(n / 1e12)) + " bilioane" + (n === 2e12 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e12));
    if (n >= 1e12) return this.renderSpelloutCardinalNeuter(Math.floor(n / 1e12)) + " bilion" + (n === 1e12 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e12));
    if (n >= 2e9) return this.renderSpelloutCardinalNeuter(Math.floor(n / 1e9)) + " miliarde" + (n === 2e9 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e9));
    if (n >= 1e9) return this.renderSpelloutCardinalNeuter(Math.floor(n / 1e9)) + " miliard" + (n === 1e9 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e9));
    if (n >= 2e6) return this.renderSpelloutCardinalNeuter(Math.floor(n / 1e6)) + " milioane" + (n === 2e6 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e6));
    if (n >= 1e6) return this.renderSpelloutCardinalNeuter(Math.floor(n / 1e6)) + " milion" + (n === 1e6 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e6));
    if (n >= 2e3) return this.renderSpelloutCardinalFeminine(Math.floor(n / 1e3)) + " mii" + (n === 2e3 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e3));
    if (n >= 1e3) return "una mie" + (n === 1e3 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e3));
    if (n >= 200) return this.renderSpelloutCardinalFeminine(Math.floor(n / 100)) + " sute" + (n === 200 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 100));
    if (n >= 100) return "una sută" + (n === 100 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 100));
    if (n >= 20) return this.renderSpelloutCardinalFeminine(Math.floor(n / 10)) + "zeci" + (n === 20 ? "" : " şi " + this.renderSpelloutCardinalMasculine(n % 10));
    if (n >= 12) return this.renderSpelloutCardinalMasculine(n % 10) + "sprezece";
    if (n >= 11) return "unsprezece";
    if (n >= 10) return "zece";
    if (n >= 9) return "nouă";
    if (n >= 8) return "opt";
    if (n >= 7) return "şapte";
    if (n >= 6) return "şase";
    if (n >= 5) return "cinci";
    if (n >= 4) return "patru";
    if (n >= 3) return "trei";
    if (n >= 2) return "doi";
    if (n >= 1) return "unu";
    if (n >= 0) return "zero";
};

inter.renderCyrillicLowerThousands = function(n) {
    if (n >= 900) return "҂ц" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 800) return "҂ѿ" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 700) return "҂ѱ" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 600) return "҂х" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 500) return "҂ф" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 400) return "҂у" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 300) return "҂т" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 200) return "҂с" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 100) return "҂р" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 90) return "҂ч" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 80) return "҂п" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 70) return "҂ѻ" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 60) return "҂ѯ" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 50) return "҂н" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 40) return "҂м" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 30) return "҂л" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 20) return "҂к" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 19) return "҂ѳ҃҂і";
    if (n >= 18) return "҂и҃҂і";
    if (n >= 17) return "҂з҃҂і";
    if (n >= 16) return "҂ѕ҃҂і";
    if (n >= 15) return "҂є҃҂і";
    if (n >= 14) return "҂д҃҂і";
    if (n >= 13) return "҂г҃҂і";
    if (n >= 12) return "҂в҃҂і";
    if (n >= 11) return "҂а҃҂і";
    if (n >= 10) return "҃҂і";
    if (n >= 9) return "҃҂ѳ";
    if (n >= 8) return "҃҂и";
    if (n >= 7) return "҃҂з";
    if (n >= 6) return "҃҂ѕ";
    if (n >= 5) return "҃҂є";
    if (n >= 4) return "҃҂д";
    if (n >= 3) return "҃҂г";
    if (n >= 2) return "҃҂в";
    if (n >= 1) return "҃҂а";
    if (n >= 0) return "҃";
};

inter.renderCyrillicLower110 = function(n) {
    if (n >= 10) return "і";
    if (n >= 9) return "ѳ";
    if (n >= 8) return "и";
    if (n >= 7) return "з";
    if (n >= 6) return "ѕ";
    if (n >= 5) return "є";
    if (n >= 4) return "д";
    if (n >= 3) return "г";
    if (n >= 2) return "в";
    if (n >= 1) return "а";
};

inter.renderCyrillicLowerPost = function(n) {
    if (n >= 1) return this.renderCyrillicLower(n);
    if (n >= 0) return "҃";
};

inter.renderCyrillicLowerFinal = function(n) {
    if (n >= 91) return "ч" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 90) return "҃ч";
    if (n >= 81) return "п" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 80) return "҃п";
    if (n >= 71) return "ѻ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 70) return "҃ѻ";
    if (n >= 61) return "ѯ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 60) return "҃ѯ";
    if (n >= 51) return "н" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 50) return "҃н";
    if (n >= 41) return "м" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 40) return "҃м";
    if (n >= 31) return "л" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 30) return "҃л";
    if (n >= 21) return "к" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 20) return "҃к";
    if (n >= 19) return "ѳ҃і";
    if (n >= 18) return "и҃і";
    if (n >= 17) return "з҃і";
    if (n >= 16) return "ѕ҃і";
    if (n >= 15) return "є҃і";
    if (n >= 14) return "д҃і";
    if (n >= 13) return "г҃і";
    if (n >= 12) return "в҃і";
    if (n >= 11) return "а҃і";
    if (n >= 1) return "҃" + this.renderCyrillicLower110(n);
    if (n >= 0) return "҃";
};

inter.renderEthiopicP3 = function(n) {
    if (n >= 1e12) return this.renderEthiopic(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1) return "፼፼፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼፼፼";
};

inter.renderEthiopicP2 = function(n) {
    if (n >= 1e8) return this.renderEthiopic(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1) return "፼፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼፼";
};

inter.renderEthiopicP1 = function(n) {
    if (n >= 1e4) return this.renderEthiopic(Math.floor(n / 1e4)) + "፼" + (n === 1e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 1) return "፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼";
};

inter.renderGreekNumeralMajuscules = function(n) {
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e16) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e16)) + "ΜΜΜΜ" + (n === 1e16 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e16));
    if (n >= 1e12) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e12)) + "ΜΜΜ" + (n === 1e12 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e12));
    if (n >= 1e8) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e8)) + "ΜΜ" + (n === 1e8 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e8));
    if (n >= 1e4) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e4)) + "Μ" + (n === 1e4 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e4));
    if (n >= 1e3) return "͵" + this.renderGreekNumeralMajuscules(Math.floor(n / 1e3)) + (n === 1e3 ? "" : this.renderGreekNumeralMajuscules(n % 1e3));
    if (n >= 900) return "Ϡ" + (n === 900 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 800) return "Ω" + (n === 800 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 700) return "Ψ" + (n === 700 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 600) return "Χ" + (n === 600 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 500) return "Φ" + (n === 500 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 400) return "Υ" + (n === 400 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 300) return "Τ" + (n === 300 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 200) return "Σ" + (n === 200 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 100) return "Ρ" + (n === 100 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 90) return "Ϟ" + (n === 90 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 80) return "Π" + (n === 80 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 70) return "Ο" + (n === 70 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 60) return "Ξ" + (n === 60 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 50) return "Ν" + (n === 50 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 40) return "Μ" + (n === 40 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 30) return "Λ" + (n === 30 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 20) return "Κ" + (n === 20 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 10) return "Ι" + (n === 10 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 9) return "Θ";
    if (n >= 8) return "Η";
    if (n >= 7) return "Ζ";
    if (n >= 6) return "Ϝ";
    if (n >= 5) return "Ε";
    if (n >= 4) return "Δ";
    if (n >= 3) return "Γ";
    if (n >= 2) return "Β";
    if (n >= 1) return "Α";
    if (n >= 0) return "𐆊";
};

inter.renderGreekNumeralMinuscules = function(n) {
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e16) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e16)) + "μμμμ" + (n === 1e16 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e16));
    if (n >= 1e12) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e12)) + "μμμ" + (n === 1e12 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e12));
    if (n >= 1e8) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e8)) + "μμ" + (n === 1e8 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e8));
    if (n >= 1e4) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e4)) + "μ" + (n === 1e4 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e4));
    if (n >= 1e3) return "͵" + this.renderGreekNumeralMinuscules(Math.floor(n / 1e3)) + (n === 1e3 ? "" : this.renderGreekNumeralMinuscules(n % 1e3));
    if (n >= 900) return "ϡ" + (n === 900 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 800) return "ω" + (n === 800 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 700) return "ψ" + (n === 700 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 600) return "χ" + (n === 600 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 500) return "φ" + (n === 500 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 400) return "υ" + (n === 400 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 300) return "τ" + (n === 300 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 200) return "σ" + (n === 200 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 100) return "ρ" + (n === 100 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 90) return "ϟ" + (n === 90 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 80) return "π" + (n === 80 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 70) return "ο" + (n === 70 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 60) return "ξ" + (n === 60 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 50) return "ν" + (n === 50 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 40) return "μ" + (n === 40 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 30) return "λ" + (n === 30 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 20) return "κ" + (n === 20 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 10) return "ι" + (n === 10 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 9) return "θ";
    if (n >= 8) return "η";
    if (n >= 7) return "ζ";
    if (n >= 6) return "ϝ";
    if (n >= 5) return "ε";
    if (n >= 4) return "δ";
    if (n >= 3) return "γ";
    if (n >= 2) return "β";
    if (n >= 1) return "α";
    if (n >= 0) return "𐆊";
};

inter.renderHebrewThousands = function(n) {
    if (n >= 401) return this.renderHebrew(n) + "׳";
    if (n >= 100) return this.renderHebrew(n) + (n === 100 ? "" : "׳");
    if (n >= 10) return this.renderHebrew(n) + (n === 10 ? "" : "׳");
    if (n >= 0) return this.renderHebrew(n);
};

inter.renderHebrew099 = function(n) {
    if (n >= 91) return "צ״" + this.renderHebrewItem(n % 10);
    if (n >= 90) return "״צ";
    if (n >= 81) return "פ״" + this.renderHebrewItem(n % 10);
    if (n >= 80) return "״פ";
    if (n >= 71) return "ע״" + this.renderHebrewItem(n % 10);
    if (n >= 70) return "״ע";
    if (n >= 61) return "ס״" + this.renderHebrewItem(n % 10);
    if (n >= 60) return "״ס";
    if (n >= 51) return "נ״" + this.renderHebrewItem(n % 10);
    if (n >= 50) return "״נ";
    if (n >= 41) return "מ״" + this.renderHebrewItem(n % 10);
    if (n >= 40) return "״מ";
    if (n >= 31) return "ל״" + this.renderHebrewItem(n % 10);
    if (n >= 30) return "״ל";
    if (n >= 21) return "כ״" + this.renderHebrewItem(n % 10);
    if (n >= 20) return "״כ";
    if (n >= 17) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "ט״ז";
    if (n >= 15) return "ט״ו";
    if (n >= 11) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 1) return "״" + this.renderHebrewItem(n);
    if (n >= 0) return "׳";
};

inter.renderHebrewItem = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderHebrewItem(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 2100) return this.renderNumber(n, "#,##0");
    if (n >= 2e3) return "תתתתת" + (n === 2e3 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1900) return "תתתתש" + (n === 1900 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1800) return "תתתתר" + (n === 1800 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1700) return "תתתתק" + (n === 1700 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1600) return "תתתת" + (n === 1600 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1500) return "תתתש" + (n === 1500 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1400) return "תתתר" + (n === 1400 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1300) return "תתתק" + (n === 1300 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1200) return "תתת" + (n === 1200 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1100) return "תתש" + (n === 1100 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1e3) return "תתר" + (n === 1e3 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 900) return "תתק" + (n === 900 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 800) return "תת" + (n === 800 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 745) return "תש" + this.renderHebrewItem(n % 100);
    if (n >= 744) return "תשדמ";
    if (n >= 700) return "תש" + (n === 700 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 699) return "תר" + this.renderHebrewItem(n % 100);
    if (n >= 698) return "תרחצ";
    if (n >= 600) return "תר" + (n === 600 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 500) return "תק" + (n === 500 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 400) return "ת" + (n === 400 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 345) return "ש" + this.renderHebrewItem(n % 100);
    if (n >= 344) return "שדמ";
    if (n >= 305) return "ש" + this.renderHebrewItem(n % 100);
    if (n >= 304) return "דש";
    if (n >= 300) return "ש" + (n === 300 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 299) return "ר" + this.renderHebrewItem(n % 100);
    if (n >= 298) return "רחצ";
    if (n >= 200) return "ר" + (n === 200 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 100) return "ק" + (n === 100 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 90) return "צ" + (n === 90 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 80) return "פ" + (n === 80 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 70) return "ע" + (n === 70 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 60) return "ס" + (n === 60 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 50) return "נ" + (n === 50 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 40) return "מ" + (n === 40 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 30) return "ל" + (n === 30 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 20) return "כ" + (n === 20 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 17) return "י" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "טז";
    if (n >= 15) return "טו";
    if (n >= 10) return "י" + (n === 10 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 9) return "ט";
    if (n >= 8) return "ח";
    if (n >= 7) return "ז";
    if (n >= 6) return "ו";
    if (n >= 5) return "ה";
    if (n >= 4) return "ד";
    if (n >= 3) return "ג";
    if (n >= 2) return "ב";
    if (n >= 1) return "א";
    if (n >= 0) return "״";
};

inter.renderTamilThousands = function(n) {
    if (n >= 1e3) return this.renderTamilThousands(Math.floor(n / 1e3)) + "௲" + (n === 1e3 ? "" : this.renderTamilThousands(n % 1e3));
    if (n >= 0) return this.renderTamil(n);
};

inter.renderSpelloutCardinalNeuter = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "minus " + this.renderSpelloutCardinalNeuter(-n);
    if (isFractional && n > 1) return this.renderSpelloutCardinalNeuter(Math.floor(n)) + " virgulă " + this.renderSpelloutCardinalNeuter(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 2e15) return this.renderSpelloutCardinalNeuter(Math.floor(n / 1e15)) + " biliarde" + (n === 2e15 ? "" : " " + this.renderSpelloutCardinalNeuter(n % 1e15));
    if (n >= 1e15) return this.renderSpelloutCardinalNeuter(Math.floor(n / 1e15)) + " biliard" + (n === 1e15 ? "" : " " + this.renderSpelloutCardinalNeuter(n % 1e15));
    if (n >= 2e12) return this.renderSpelloutCardinalNeuter(Math.floor(n / 1e12)) + " bilioane" + (n === 2e12 ? "" : " " + this.renderSpelloutCardinalNeuter(n % 1e12));
    if (n >= 1e12) return this.renderSpelloutCardinalNeuter(Math.floor(n / 1e12)) + " bilion" + (n === 1e12 ? "" : " " + this.renderSpelloutCardinalNeuter(n % 1e12));
    if (n >= 2e9) return this.renderSpelloutCardinalNeuter(Math.floor(n / 1e9)) + " miliarde" + (n === 2e9 ? "" : " " + this.renderSpelloutCardinalNeuter(n % 1e9));
    if (n >= 1e9) return this.renderSpelloutCardinalNeuter(Math.floor(n / 1e9)) + " miliard" + (n === 1e9 ? "" : " " + this.renderSpelloutCardinalNeuter(n % 1e9));
    if (n >= 2e6) return this.renderSpelloutCardinalNeuter(Math.floor(n / 1e6)) + " milioane" + (n === 2e6 ? "" : " " + this.renderSpelloutCardinalNeuter(n % 1e6));
    if (n >= 1e6) return this.renderSpelloutCardinalNeuter(Math.floor(n / 1e6)) + " milion" + (n === 1e6 ? "" : " " + this.renderSpelloutCardinalNeuter(n % 1e6));
    if (n >= 2e3) return this.renderSpelloutCardinalFeminine(Math.floor(n / 1e3)) + " mii" + (n === 2e3 ? "" : " " + this.renderSpelloutCardinalNeuter(n % 1e3));
    if (n >= 1e3) return "una mie" + (n === 1e3 ? "" : " " + this.renderSpelloutCardinalNeuter(n % 1e3));
    if (n >= 200) return this.renderSpelloutCardinalFeminine(Math.floor(n / 100)) + " sute" + (n === 200 ? "" : " " + this.renderSpelloutCardinalNeuter(n % 100));
    if (n >= 100) return "una sută" + (n === 100 ? "" : " " + this.renderSpelloutCardinalNeuter(n % 100));
    if (n >= 20) return this.renderSpelloutCardinalFeminine(Math.floor(n / 10)) + "zeci" + (n === 20 ? "" : " şi " + this.renderSpelloutCardinalNeuter(n % 10));
    if (n >= 2) return this.renderSpelloutCardinalFeminine(n);
    if (n >= 1) return "unu";
    if (n >= 0) return "zero";
};

inter.renderSpelloutCardinalFeminine = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "minus " + this.renderSpelloutCardinalFeminine(-n);
    if (isFractional && n > 1) return this.renderSpelloutCardinalFeminine(Math.floor(n)) + " virgulă " + this.renderSpelloutCardinalFeminine(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 2e15) return this.renderSpelloutCardinalNeuter(Math.floor(n / 1e15)) + " biliarde" + (n === 2e15 ? "" : " " + this.renderSpelloutCardinalFeminine(n % 1e15));
    if (n >= 1e15) return this.renderSpelloutCardinalNeuter(Math.floor(n / 1e15)) + " biliard" + (n === 1e15 ? "" : " " + this.renderSpelloutCardinalFeminine(n % 1e15));
    if (n >= 2e12) return this.renderSpelloutCardinalNeuter(Math.floor(n / 1e12)) + " bilioane" + (n === 2e12 ? "" : " " + this.renderSpelloutCardinalFeminine(n % 1e12));
    if (n >= 1e12) return this.renderSpelloutCardinalNeuter(Math.floor(n / 1e12)) + " bilion" + (n === 1e12 ? "" : " " + this.renderSpelloutCardinalFeminine(n % 1e12));
    if (n >= 2e9) return this.renderSpelloutCardinalNeuter(Math.floor(n / 1e9)) + " miliarde" + (n === 2e9 ? "" : " " + this.renderSpelloutCardinalFeminine(n % 1e9));
    if (n >= 1e9) return this.renderSpelloutCardinalNeuter(Math.floor(n / 1e9)) + " miliard" + (n === 1e9 ? "" : " " + this.renderSpelloutCardinalFeminine(n % 1e9));
    if (n >= 2e6) return this.renderSpelloutCardinalNeuter(Math.floor(n / 1e6)) + " milioane" + (n === 2e6 ? "" : " " + this.renderSpelloutCardinalFeminine(n % 1e6));
    if (n >= 1e6) return this.renderSpelloutCardinalNeuter(Math.floor(n / 1e6)) + " milion" + (n === 1e6 ? "" : " " + this.renderSpelloutCardinalFeminine(n % 1e6));
    if (n >= 2e3) return this.renderSpelloutCardinalFeminine(Math.floor(n / 1e3)) + " mii" + (n === 2e3 ? "" : " " + this.renderSpelloutCardinalFeminine(n % 1e3));
    if (n >= 1e3) return "una mie" + (n === 1e3 ? "" : " " + this.renderSpelloutCardinalFeminine(n % 1e3));
    if (n >= 200) return this.renderSpelloutCardinalFeminine(Math.floor(n / 100)) + " sute" + (n === 200 ? "" : " " + this.renderSpelloutCardinalFeminine(n % 100));
    if (n >= 100) return "una sută" + (n === 100 ? "" : " " + this.renderSpelloutCardinalFeminine(n % 100));
    if (n >= 20) return this.renderSpelloutCardinalFeminine(Math.floor(n / 10)) + "zeci" + (n === 20 ? "" : " şi " + this.renderSpelloutCardinalFeminine(n % 10));
    if (n >= 12) return this.renderSpelloutCardinalFeminine(n % 10) + "sprezece";
    if (n >= 3) return this.renderSpelloutCardinalMasculine(n);
    if (n >= 2) return "două";
    if (n >= 1) return "una";
    if (n >= 0) return "zero";
};

inter.renderEthiopicP = function(n) {
    if (n >= 1e16) return this.renderEthiopicP(Math.floor(n / 1e16)) + "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 1e12) return this.renderEthiopicP(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1e8) return this.renderEthiopicP(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1e4) return this.renderEthiopicP(Math.floor(n / 1e4)) + "፼" + (n === 1e4 ? "" : this.renderEthiopicP(n % 1e4));
    if (n >= 1) return this.renderEthiopic(n);
};

inter.currencies = [].concat(P.currencies.slice(0, 128), {
    id: "MDL",
    displayName: "leu moldovenesc",
    symbol: "L",
    one: "leu moldovenesc",
    few: "lei moldovenești",
    other: "lei moldovenești"
}, P.currencies.slice(129, 246));

module.exports = inter;