function defaults(targetObj) {
    for (var i = 1; i < arguments.length; i += 1) {
        if (arguments[i] && typeof arguments[i] === "object") {
            for (var propertyName in arguments[i]) {
                if (typeof targetObj[propertyName] === "undefined") {
                    targetObj[propertyName] = arguments[i][propertyName];
                }
            }
        }
    }
    return targetObj;
}

var P = require("./de.js"), inter = defaults({
    renderers: {}
}, P);

var _js7v1 = {
    "default": "#,##0 %"
}, _js7v2 = [ "Q1", "Q2", "Q3", "Q4" ], _js7v3 = {
    all: {
        leap: "{0}bis"
    }
}, _js7v4 = [ "v. Chr.", "n. Chr." ], _js7v5 = {
    displayName: "Epoche"
}, _js7v6 = {
    displayName: "Zeitzone"
}, _js7v7 = {
    a: "h a – h a",
    h: "h–h a"
}, _js7v8 = {
    displayName: "Wochentag"
}, _js7v9 = [ "Before R.O.C.", "Minguo" ], _js7v10 = {
    displayName: "Tageshälfte"
}, _js7v11 = {
    a: "h a – h a v",
    h: "h–h a v"
}, _js7v12 = [ "S", "M", "D", "M", "D", "F", "S" ], _js7v13 = {
    d: "MMM d–d",
    M: "MMM d – MMM d"
}, _js7v14 = {
    wide: [ "AH" ],
    abbreviated: [ "AH" ]
}, _js7v15 = {
    one: "0 Tsd'.'",
    other: "0 Tsd'.'"
}, _js7v16 = {
    one: "0 Mio'.'",
    other: "0 Mio'.'"
}, _js7v17 = {
    one: "0 Mrd'.'",
    other: "0 Mrd'.'"
}, _js7v18 = {
    one: "0 Bio'.'",
    other: "0 Bio'.'"
}, _js7v19 = {
    H: "HH:mm–HH:mm",
    m: "HH:mm–HH:mm"
}, _js7v20 = {
    one: "in {0} Q",
    other: "in {0} Q"
}, _js7v21 = {
    one: "in {0} m",
    other: "in {0} m"
}, _js7v22 = {
    one: "in {0} s",
    other: "in {0} s"
}, _js7v23 = {
    M: "y-MM – y-MM",
    y: "y-MM – y-MM"
}, _js7v24 = {
    M: "U MMM–MMM",
    y: "U MMM – U MMM"
}, _js7v25 = {
    one: "0 Tausend",
    other: "0 Tausend"
}, _js7v26 = {
    one: "00 Tsd'.'",
    other: "00 Tsd'.'"
}, _js7v27 = {
    one: "00 Mio'.'",
    other: "00 Mio'.'"
}, _js7v28 = {
    one: "00 Mrd'.'",
    other: "00 Mrd'.'"
}, _js7v29 = {
    one: "00 Bio'.'",
    other: "00 Bio'.'"
}, _js7v30 = {
    d: "d.–d. MMM",
    M: "d. MMM – d. MMM"
}, _js7v31 = {
    one: "vor {0} Q",
    other: "vor {0} Q"
}, _js7v32 = {
    one: "vor {0} m",
    other: "vor {0} m"
}, _js7v33 = {
    one: "vor {0} s",
    other: "vor {0} s"
}, _js7v34 = [ "So", "Mo", "Di", "Mi", "Do", "Fr", "Sa" ], _js7v35 = {
    one: "00 Tausend",
    other: "00 Tausend"
}, _js7v36 = {
    one: "0 Million",
    other: "0 Millionen"
}, _js7v37 = {
    one: "0 Billion",
    other: "0 Billionen"
}, _js7v38 = {
    one: "000 Tsd'.'",
    other: "000 Tsd'.'"
}, _js7v39 = {
    one: "000 Mio'.'",
    other: "000 Mio'.'"
}, _js7v40 = {
    one: "000 Mrd'.'",
    other: "000 Mrd'.'"
}, _js7v41 = {
    one: "000 Bio'.'",
    other: "000 Bio'.'"
}, _js7v42 = {
    one: "0 Tsd'.' ¤",
    other: "0 Tsd'.' ¤"
}, _js7v43 = {
    one: "0 Mio'.' ¤",
    other: "0 Mio'.' ¤"
}, _js7v44 = {
    one: "0 Mrd'.' ¤",
    other: "0 Mrd'.' ¤"
}, _js7v45 = {
    one: "0 Bio'.' ¤",
    other: "0 Bio'.' ¤"
}, _js7v46 = {
    H: "HH:mm–HH:mm v",
    m: "HH:mm–HH:mm v"
}, _js7v47 = {
    M: "MM.y – MM.y G",
    y: "MM.y – MM.y G"
}, _js7v48 = {
    M: "MMM–MMM y G",
    y: "MMM y – MMM y G"
}, _js7v49 = {
    one: "in {0} Wo.",
    other: "in {0} Wo."
}, _js7v50 = {
    d: "MM-dd – MM-dd",
    M: "MM-dd – MM-dd"
}, _js7v51 = {
    M: "U MMMM–MMMM",
    y: "U MMMM – U MMMM"
}, _js7v52 = {
    one: "000 Tausend",
    other: "000 Tausend"
}, _js7v53 = {
    one: "00 Tsd'.' ¤",
    other: "00 Tsd'.' ¤"
}, _js7v54 = {
    one: "00 Mio'.' ¤",
    other: "00 Mio'.' ¤"
}, _js7v55 = {
    one: "00 Mrd'.' ¤",
    other: "00 Mrd'.' ¤"
}, _js7v56 = {
    one: "00 Bio'.' ¤",
    other: "00 Bio'.' ¤"
}, _js7v57 = {
    one: "vor {0} Wo.",
    other: "vor {0} Wo."
}, _js7v58 = {
    one: "in {0} Tag",
    other: "in {0} Tagen"
}, _js7v59 = {
    one: "in {0} Std.",
    other: "in {0} Std."
}, _js7v60 = {
    one: "in {0} Min.",
    other: "in {0} Min."
}, _js7v61 = {
    one: "in {0} Sek.",
    other: "in {0} Sek."
}, _js7v62 = {
    one: "0 Milliarde",
    other: "0 Milliarden"
}, _js7v63 = {
    one: "00 Millionen",
    other: "00 Millionen"
}, _js7v64 = {
    one: "00 Billionen",
    other: "00 Billionen"
}, _js7v65 = {
    one: "000 Tsd'.' ¤",
    other: "000 Tsd'.' ¤"
}, _js7v66 = {
    one: "000 Mio'.' ¤",
    other: "000 Mio'.' ¤"
}, _js7v67 = {
    one: "000 Mrd'.' ¤",
    other: "000 Mrd'.' ¤"
}, _js7v68 = {
    one: "000 Bio'.' ¤",
    other: "000 Bio'.' ¤"
}, _js7v69 = {
    d: "dd.MM. – dd.MM.",
    M: "dd.MM. – dd.MM."
}, _js7v70 = {
    M: "MMMM–MMMM y G",
    y: "MMMM y – MMMM y G"
}, _js7v71 = {
    one: "in {0} Jahr",
    other: "in {0} Jahren"
}, _js7v72 = {
    one: "vor {0} Tag",
    other: "vor {0} Tagen"
}, _js7v73 = {
    one: "vor {0} Std.",
    other: "vor {0} Std."
}, _js7v74 = {
    one: "vor {0} Min.",
    other: "vor {0} Min."
}, _js7v75 = {
    one: "vor {0} Sek.",
    other: "vor {0} Sek."
}, _js7v76 = {
    one: "in {0} Woche",
    other: "in {0} Wochen"
}, _js7v77 = {
    one: "000 Millionen",
    other: "000 Millionen"
}, _js7v78 = {
    one: "00 Milliarden",
    other: "00 Milliarden"
}, _js7v79 = {
    one: "000 Billionen",
    other: "000 Billionen"
}, _js7v80 = [ "So.", "Mo.", "Di.", "Mi.", "Do.", "Fr.", "Sa." ], _js7v81 = {
    one: "vor {0} Jahr",
    other: "vor {0} Jahren"
}, _js7v82 = {
    one: "in {0} Quart.",
    other: "in {0} Quart."
}, _js7v83 = {
    one: "in {0} Monat",
    other: "in {0} Monaten"
}, _js7v84 = {
    one: "vor {0} Woche",
    other: "vor {0} Wochen"
}, _js7v85 = {
    one: "in {0} Stunde",
    other: "in {0} Stunden"
}, _js7v86 = {
    one: "in {0} Minute",
    other: "in {0} Minuten"
}, _js7v87 = {
    one: "000 Milliarden",
    other: "000 Milliarden"
}, _js7v88 = {
    one: "vor {0} Quart.",
    other: "vor {0} Quart."
}, _js7v89 = {
    one: "vor {0} Monat",
    other: "vor {0} Monaten"
}, _js7v90 = {
    one: "vor {0} Monat",
    other: "vor {0} Monaten"
}, _js7v91 = {
    one: "vor {0} Monat",
    other: "vor {0} Monaten"
}, _js7v92 = {
    one: "vor {0} Stunde",
    other: "vor {0} Stunden"
}, _js7v93 = {
    one: "vor {0} Minute",
    other: "vor {0} Minuten"
}, _js7v94 = {
    one: "in {0} Sekunde",
    other: "in {0} Sekunden"
}, _js7v95 = {
    one: "in {0} Quartal",
    other: "in {0} Quartalen"
}, _js7v96 = {
    one: "vor {0} Sekunde",
    other: "vor {0} Sekunden"
}, _js7v97 = {
    d: "E, d. – E, d. MMM",
    M: "E, d. MMM – E, d. MMM"
}, _js7v98 = [ "J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D" ], _js7v99 = {
    one: "vor {0} Quartal",
    other: "vor {0} Quartalen"
}, _js7v100 = {
    d: "MM-dd, E – MM-dd, E",
    M: "MM-dd, E – MM-dd, E"
}, _js7v101 = {
    d: "MMM d, E – MMM d, E",
    M: "MMM d, E – MMM d, E"
}, _js7v102 = {
    wide: [ "ERA0", "ERA1" ],
    abbreviated: [ "ERA0", "ERA1" ]
}, _js7v103 = {
    "0": "diesen So.",
    "1": "nächsten So.",
    "-1": "letzten So."
}, _js7v104 = {
    "0": "diesen Mo.",
    "1": "nächsten Mo.",
    "-1": "letzten Mo."
}, _js7v105 = {
    "0": "diesen Di.",
    "1": "nächsten Di.",
    "-1": "letzten Di."
}, _js7v106 = {
    "0": "diesen Mi.",
    "1": "nächsten Mi.",
    "-1": "letzten Mi."
}, _js7v107 = {
    "0": "diesen Do.",
    "1": "nächsten Do.",
    "-1": "letzten Do."
}, _js7v108 = {
    "0": "diesen Fr.",
    "1": "nächsten Fr.",
    "-1": "letzten Fr."
}, _js7v109 = {
    "0": "diesen Sa.",
    "1": "nächsten Sa.",
    "-1": "letzten Sa."
}, _js7v110 = [ "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" ], _js7v111 = {
    a: "h:mm a – h:mm a",
    h: "h:mm–h:mm a",
    m: "h:mm–h:mm a"
}, _js7v112 = {
    d: "E, dd.MM. – E, dd.MM.",
    M: "E, dd.MM. – E, dd.MM."
}, _js7v113 = [ "1. Quartal", "2. Quartal", "3. Quartal", "4. Quartal" ], _js7v114 = {
    "0": "dieses Jahr",
    "1": "nächstes Jahr",
    "-1": "letztes Jahr"
}, _js7v115 = {
    "0": "this quarter",
    "1": "next quarter",
    "-1": "last quarter"
}, _js7v116 = {
    "0": "diese Woche",
    "1": "nächste Woche",
    "-1": "letzte Woche"
}, _js7v117 = {
    d: "U MMM d–d",
    M: "U MMM d – MMM d",
    y: "U MMM d – U MMM d"
}, _js7v118 = [ "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13" ], _js7v119 = {
    "0": "diesen Monat",
    "1": "nächsten Monat",
    "-1": "letzten Monat"
}, _js7v120 = {
    a: "h:mm a – h:mm a v",
    h: "h:mm–h:mm a v",
    m: "h:mm–h:mm a v"
}, _js7v121 = {
    "0": "diesen Montag",
    "1": "nächsten Montag",
    "-1": "letzten Montag"
}, _js7v122 = {
    relative: _js7v103
}, _js7v123 = {
    relative: _js7v104
}, _js7v124 = {
    relative: _js7v105
}, _js7v125 = {
    relative: _js7v106
}, _js7v126 = {
    relative: _js7v107
}, _js7v127 = {
    relative: _js7v108
}, _js7v128 = {
    relative: _js7v109
}, _js7v129 = {
    "0": "diesen Sonntag",
    "1": "nächsten Sonntag",
    "-1": "letzten Sonntag"
}, _js7v130 = {
    "0": "diesen Freitag",
    "1": "nächsten Freitag",
    "-1": "letzten Freitag"
}, _js7v131 = {
    "0": "diesen Samstag",
    "1": "nächsten Samstag",
    "-1": "letzten Samstag"
}, _js7v132 = {
    "0": "diesen Dienstag",
    "1": "nächsten Dienstag",
    "-1": "letzten Dienstag"
}, _js7v133 = {
    "0": "diesen Mittwoch",
    "1": "nächsten Mittwoch",
    "-1": "letzten Mittwoch"
}, _js7v134 = {
    d: "y-MM-dd – y-MM-dd",
    M: "y-MM-dd – y-MM-dd",
    y: "y-MM-dd – y-MM-dd"
}, _js7v135 = {
    d: "d.–d. MMM y G",
    M: "d. MMM – d. MMM y G",
    y: "d. MMM y – d. MMM y G"
}, _js7v136 = {
    "0": "heute",
    "1": "morgen",
    "2": "übermorgen",
    "-2": "vorgestern",
    "-1": "gestern"
}, _js7v137 = {
    abbreviated: {
        leap: "{0}bis"
    },
    narrow: {
        leap: "{0}b"
    },
    wide: {
        leap: "{0}bis"
    }
}, _js7v138 = {
    relative: _js7v121
}, _js7v139 = {
    d: "dd.MM.y – dd.MM.y G",
    M: "dd.MM.y – dd.MM.y G",
    y: "dd.MM.y – dd.MM.y G"
}, _js7v140 = [ "Jän", "Feb", "Mär", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez" ], _js7v141 = {
    "0": "diesen Donnerstag",
    "1": "nächsten Donnerstag",
    "-1": "letzten Donnerstag"
}, _js7v142 = [ "M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12" ], _js7v143 = [ "Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag" ], _js7v144 = {
    relative: _js7v129
}, _js7v145 = {
    relative: _js7v130
}, _js7v146 = {
    relative: _js7v131
}, _js7v147 = [ undefined, "zi", "chou", "yin", "mao", "chen", "si", "wu", "wei", "shen", "you", "xu" ], _js7v148 = {
    relative: _js7v132
}, _js7v149 = {
    relative: _js7v133
}, _js7v150 = {
    d: "U MMM d, E – MMM d, E",
    M: "U MMM d, E – MMM d, E",
    y: "U MMM d, E – U MMM d, E"
}, _js7v151 = {
    future: _js7v20,
    past: _js7v31
}, _js7v152 = {
    future: _js7v21,
    past: _js7v32
}, _js7v153 = {
    future: _js7v22,
    past: _js7v33
}, _js7v154 = [ "Jän.", "Feb.", "März", "Apr.", "Mai", "Juni", "Juli", "Aug.", "Sep.", "Okt.", "Nov.", "Dez." ], _js7v155 = {
    relative: _js7v141
}, _js7v156 = {
    d: "y-MM-dd, E – y-MM-dd, E",
    M: "y-MM-dd, E – y-MM-dd, E",
    y: "y-MM-dd, E – y-MM-dd, E"
}, _js7v157 = {
    d: "E, d. – E, d. MMM y G",
    M: "E, d. MMM – E, d. MMM y G",
    y: "E, d. MMM y – E, d. MMM y G"
}, _js7v158 = {
    d: "E, dd.MM.y – E, dd.MM.y G",
    M: "E, dd.MM.y – E, dd.MM.y G",
    y: "E, dd.MM.y – E, dd.MM.y G"
}, _js7v159 = {
    future: _js7v49,
    past: _js7v57
}, _js7v160 = {
    future: _js7v58,
    past: _js7v72
}, _js7v161 = {
    future: _js7v59,
    past: _js7v73
}, _js7v162 = {
    future: _js7v60,
    past: _js7v74
}, _js7v163 = {
    future: _js7v61,
    past: _js7v75
}, _js7v164 = {
    future: _js7v71,
    past: _js7v81
}, _js7v165 = [ undefined, "Ratte", "Büffel", "Tiger", "Hase", "Drache", "Schlange", "Pferd", "Ziege", "Affe", "Hahn", "Hund" ], _js7v166 = {
    future: _js7v76,
    past: _js7v84
}, _js7v167 = {
    future: _js7v82,
    past: _js7v88
}, _js7v168 = {
    future: _js7v83,
    past: _js7v89
}, _js7v169 = {
    future: _js7v83,
    past: _js7v90
}, _js7v170 = {
    future: _js7v83,
    past: _js7v91
}, _js7v171 = [ "Muh.", "Saf.", "Rab. I", "Rab. II", "Jum. I", "Jum. II", "Raj.", "Sha.", "Ram.", "Shaw.", "Dhuʻl-Q.", "Dhuʻl-H." ], _js7v172 = {
    future: _js7v85,
    past: _js7v92
}, _js7v173 = {
    future: _js7v86,
    past: _js7v93
}, _js7v174 = [ "Tishri", "Heshvan", "Kislev", "Tevet", "Shevat", "Adar I", "Adar", "Nisan", "Iyar", "Sivan", "Tamuz", "Av", "Elul" ], _js7v175 = [ "Jänner", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember" ], _js7v176 = {
    future: _js7v94,
    past: _js7v96
}, _js7v177 = [ "Farvardin", "Ordibehesht", "Khordad", "Tir", "Mordad", "Shahrivar", "Mehr", "Aban", "Azar", "Dey", "Bahman", "Esfand" ], _js7v178 = {
    future: _js7v95,
    past: _js7v99
}, _js7v179 = [ "Tout", "Baba", "Hator", "Kiahk", "Toba", "Amshir", "Baramhat", "Baramouda", "Bashans", "Paona", "Epep", "Mesra", "Nasie" ], _js7v180 = {
    displayName: "Q",
    relativeTime: _js7v151
}, _js7v181 = {
    displayName: "Min.",
    relativeTime: _js7v152
}, _js7v182 = {
    displayName: "Sek.",
    relativeTime: _js7v153
}, _js7v183 = [ "Meskerem", "Tekemt", "Hedar", "Tahsas", "Ter", "Yekatit", "Megabit", "Miazia", "Genbot", "Sene", "Hamle", "Nehasse", "Pagumen" ], _js7v184 = {
    abbreviated: _js7v2,
    narrow: [ "1", "2", "3", "4" ],
    wide: _js7v113
}, _js7v185 = [ "Chaitra", "Vaisakha", "Jyaistha", "Asadha", "Sravana", "Bhadra", "Asvina", "Kartika", "Agrahayana", "Pausa", "Magha", "Phalguna" ], _js7v186 = {
    displayName: "Std.",
    relativeTime: _js7v161
}, _js7v187 = {
    displayName: "Min.",
    relativeTime: _js7v162
}, _js7v188 = {
    displayName: "Sek.",
    relativeTime: _js7v163
}, _js7v189 = [ "Muharram", "Safar", "Rabiʻ I", "Rabiʻ II", "Jumada I", "Jumada II", "Rajab", "Shaʻban", "Ramadan", "Shawwal", "Dhuʻl-Qiʻdah", "Dhuʻl-Hijjah" ], _js7v190 = {
    displayName: "Quart.",
    relativeTime: _js7v167
}, _js7v191 = {
    displayName: "Stunde",
    relativeTime: _js7v172
}, _js7v192 = {
    displayName: "Minute",
    relativeTime: _js7v173
}, _js7v193 = {
    midnight: "Mitternacht",
    am: "vorm.",
    pm: "nachm.",
    morning1: "Morgen",
    morning2: "Vormittag",
    afternoon1: "Mittag",
    afternoon2: "Nachmittag",
    evening1: "Abend",
    night1: "Nacht"
}, _js7v194 = {
    midnight: "Mitternacht",
    am: "vm.",
    pm: "nm.",
    morning1: "morgens",
    morning2: "vormittags",
    afternoon1: "mittags",
    afternoon2: "nachmittags",
    evening1: "abends",
    night1: "nachts"
}, _js7v195 = {
    displayName: "Sekunde",
    relative: [ "jetzt" ],
    relativeTime: _js7v176
}, _js7v196 = {
    midnight: "Mitternacht",
    am: "vorm.",
    pm: "nachm.",
    morning1: "morgens",
    morning2: "vormittags",
    afternoon1: "mittags",
    afternoon2: "nachmittags",
    evening1: "abends",
    night1: "nachts"
}, _js7v197 = {
    group: " ",
    decimal: ",",
    list: ";",
    percentSign: "%",
    plusSign: "+",
    minusSign: "-",
    exponential: "E",
    superscriptingExponent: "·",
    perMille: "‰",
    infinity: "∞",
    nan: "NaN",
    timeSeparator: ":"
}, _js7v198 = {
    symbols: _js7v197
}, _js7v199 = {
    displayName: "W",
    relative: _js7v116,
    relativeTime: _js7v159
}, _js7v200 = {
    format: _js7v137,
    numeric: _js7v3,
    standAlone: _js7v137
}, _js7v201 = {
    displayName: "J",
    relative: _js7v114,
    relativeTime: _js7v164
}, _js7v202 = {
    displayName: "Jahr",
    relative: _js7v114,
    relativeTime: _js7v164
}, _js7v203 = {
    displayName: "Woche",
    relative: _js7v116,
    relativeTime: _js7v166
}, _js7v204 = {
    displayName: "M",
    relative: _js7v119,
    relativeTime: _js7v170
}, _js7v205 = {
    displayName: "Monat",
    relative: _js7v119,
    relativeTime: _js7v168
}, _js7v206 = {
    displayName: "Monat",
    relative: _js7v119,
    relativeTime: _js7v169
}, _js7v207 = {
    displayName: "Tag",
    relative: _js7v136,
    relativeTime: _js7v160
}, _js7v208 = {
    displayName: "Quartal",
    relative: _js7v115,
    relativeTime: _js7v178
}, _js7v209 = {
    symbols: _js7v197,
    digits: "renderSpelloutCardinal"
}, _js7v210 = {
    abbreviated: _js7v34,
    narrow: _js7v12,
    wide: _js7v143,
    "short": _js7v80
}, _js7v211 = {
    symbols: _js7v197,
    digits: "renderSpelloutCardinalFinancial"
}, _js7v212 = {
    abbreviated: _js7v142,
    narrow: _js7v110,
    wide: _js7v142
}, _js7v213 = {
    abbreviated: _js7v80,
    narrow: _js7v12,
    wide: _js7v143,
    "short": _js7v80
}, _js7v214 = {
    abbreviated: _js7v147,
    narrow: _js7v147,
    wide: _js7v147
}, _js7v215 = {
    abbreviated: _js7v140,
    narrow: _js7v98,
    wide: _js7v175
}, _js7v216 = {
    format: _js7v184,
    standAlone: _js7v184
}, _js7v217 = {
    format: _js7v214
}, _js7v218 = {
    abbreviated: _js7v154,
    narrow: _js7v98,
    wide: _js7v175
}, _js7v219 = {
    abbreviated: _js7v174,
    narrow: _js7v118,
    wide: _js7v174
}, _js7v220 = {
    abbreviated: _js7v177,
    narrow: _js7v110,
    wide: _js7v177
}, _js7v221 = {
    abbreviated: _js7v179,
    narrow: _js7v118,
    wide: _js7v179
}, _js7v222 = {
    abbreviated: _js7v171,
    narrow: _js7v110,
    wide: _js7v189
}, _js7v223 = {
    abbreviated: _js7v183,
    narrow: _js7v118,
    wide: _js7v183
}, _js7v224 = {
    abbreviated: _js7v185,
    narrow: _js7v110,
    wide: _js7v185
}, _js7v225 = {
    fullDate: "EEEE, d. MMMM U",
    longDate: "d. MMMM U",
    mediumDate: "dd.MM U",
    shortDate: "dd.MM.yy",
    fullTime: "HH:mm:ss zzzz",
    longTime: "HH:mm:ss z",
    mediumTime: "HH:mm:ss",
    shortTime: "HH:mm",
    shortDateTime: "dd.MM.yy HH:mm",
    mediumDateTime: "dd.MM U HH:mm:ss",
    longDateTime: "d. MMMM U HH:mm:ss z",
    fullDateTime: "EEEE, d. MMMM U HH:mm:ss zzzz"
}, _js7v226 = {
    abbreviated: _js7v165,
    narrow: _js7v165,
    wide: _js7v165
}, _js7v227 = {
    format: _js7v226
}, _js7v228 = {
    format: _js7v213,
    standAlone: _js7v210
}, _js7v229 = {
    format: _js7v212,
    standAlone: _js7v212
}, _js7v230 = {
    "1000": _js7v15,
    "10000": _js7v26,
    "100000": _js7v38,
    "1000000": _js7v16,
    "10000000": _js7v27,
    "100000000": _js7v39,
    "1000000000": _js7v17,
    "10000000000": _js7v28,
    "100000000000": _js7v40,
    "1000000000000": _js7v18,
    "10000000000000": _js7v29,
    "100000000000000": _js7v41
}, _js7v231 = {
    d: "d",
    Ed: "E, d.",
    Gy: "U",
    GyMMM: "MMM U",
    GyMMMd: "d. MMM U",
    GyMMMEd: "E, d. MMM U",
    h: "h a",
    H: "HH 'Uhr'",
    hm: "h:mm a",
    Hm: "HH:mm",
    hms: "h:mm:ss a",
    Hms: "HH:mm:ss",
    M: "L",
    Md: "d.M.",
    MEd: "E, d.M.",
    MMM: "LLL",
    MMMd: "d. MMM",
    MMMEd: "E, d. MMM",
    MMMMd: "d. MMMM",
    ms: "mm:ss",
    y: "U",
    yyyy: "U",
    yyyyM: "M.y",
    yyyyMd: "d.M.y",
    yyyyMEd: "E, d.M.y",
    yyyyMMM: "MMM U",
    yyyyMMMd: "d. MMM U",
    yyyyMMMEd: "E, d. MMM U",
    yyyyMMMM: "MMMM U",
    yyyyQQQ: "QQQ U",
    yyyyQQQQ: "QQQQ U",
    E: "ccc",
    UM: "U MM",
    UMd: "U MM-d",
    UMMM: "U MMM",
    UMMMd: "U MMM d",
    yMd: "r-MM-dd"
}, _js7v232 = {
    abbreviated: _js7v193,
    narrow: _js7v193,
    wide: _js7v193
}, _js7v233 = {
    abbreviated: _js7v196,
    narrow: _js7v194,
    wide: _js7v196
}, _js7v234 = {
    "1000": _js7v42,
    "10000": _js7v53,
    "100000": _js7v65,
    "1000000": _js7v43,
    "10000000": _js7v54,
    "100000000": _js7v66,
    "1000000000": _js7v44,
    "10000000000": _js7v55,
    "100000000000": _js7v67,
    "1000000000000": _js7v45,
    "10000000000000": _js7v56,
    "100000000000000": _js7v68
}, _js7v235 = {
    "1000": _js7v25,
    "10000": _js7v35,
    "100000": _js7v52,
    "1000000": _js7v36,
    "10000000": _js7v63,
    "100000000": _js7v77,
    "1000000000": _js7v62,
    "10000000000": _js7v78,
    "100000000000": _js7v87,
    "1000000000000": _js7v37,
    "10000000000000": _js7v64,
    "100000000000000": _js7v79
}, _js7v236 = {
    format: _js7v218,
    standAlone: _js7v215
}, _js7v237 = {
    currencyMatch: /[^\u0024+<->\u005E`\u007C~¢-¦¨©¬®-±´¸×÷˂-˅˒-˟˥-˫˭˯-˿͵΄΅϶҂֏؆-؈؋؎؏۞۩۽۾߶৲৳৺৻૱୰௳-௺౿൹฿༁-༃༓༕-༗༚-༟༴༶༸྾-࿅࿇-࿌࿎࿏࿕-࿘႞႟᎐-᎙៛᥀᧞-᧿᭡-᭪᭴-᭼᾽᾿-῁῍-῏῝-῟῭-`´῾⁄⁒⁺-⁼₊-₌₠-₹℀℁℃-℆℈℉℔№-℘℞-℣℥℧℩℮℺℻⅀-⅄⅊-⅍⅏←-⌨⌫-⏳␀-␦⑀-⑊⒜-ⓩ─-⛿✁-❧➔-⟄⟇-⟥⟰-⦂⦙-⧗⧜-⧻⧾-⭌⭐-⭙⳥-⳪⺀-⺙⺛-⻳⼀-⿕⿰-⿻〄〒〓〠〶〷〾〿゛゜㆐㆑㆖-㆟㇀-㇣㈀-㈞㈪-㉇㉐㉠-㉿㊊-㊰㋀-㋾㌀-㏿䷀-䷿꒐-꓆꜀-꜖꜠꜡꞉꞊꠨-꠫꠶-꠹꩷-꩹﬩﮲-﯁﷼﷽﹢﹤-﹦﹩＄＋＜-＞＾｀｜～￠-￦￨-￮￼�]/,
    surroundingMatch: /[0-9²³¹¼-¾٠-٩۰-۹߀-߉०-९০-৯৴-৹੦-੯૦-૯୦-୯୲-୷௦-௲౦-౯౸-౾೦-೯൦-൵๐-๙໐-໙༠-༳၀-၉႐-႙፩-፼ᛮ-ᛰ០-៩៰-៹᠐-᠙᥆-᥏᧐-᧚᪀-᪉᪐-᪙᭐-᭙᮰-᮹᱀-᱉᱐-᱙⁰⁴-⁹₀-₉⅐-ↂↅ-↉①-⒛⓪-⓿❶-➓⳽〇〡-〩〸-〺㆒-㆕㈠-㈩㉈-㉏㉑-㉟㊀-㊉㊱-㊿꘠-꘩ꛦ-ꛯ꠰-꠵꣐-꣙꤀-꤉꧐-꧙꩐-꩙꯰-꯹０-９]/,
    insertBetween: " "
}, _js7v238 = [ undefined, "jia-zi", "yi-chou", "bing-yin", "ding-mao", "wu-chen", "ji-si", "geng-wu", "xin-wei", "ren-shen", "gui-you", "jia-xu", "yi-hai", "bing-zi", "ding-chou", "wu-yin", "ji-mao", "geng-chen", "xin-si", "ren-wu", "gui-wei", "jia-shen", "yi-you", "bing-xu", "ding-hai", "wu-zi", "ji-chou", "geng-yin", "xin-mao", "ren-chen", "gui-si", "jia-wu", "yi-wei", "bing-shen", "ding-you", "wu-xu", "ji-hai", "geng-zi", "xin-chou", "ren-yin", "gui-mao", "jia-chen", "yi-si", "bing-wu", "ding-wei", "wu-shen", "ji-you", "geng-xu", "xin-hai", "ren-zi", "gui-chou", "jia-yin", "yi-mao", "bing-chen", "ding-si", "wu-wu", "ji-wei", "geng-shen", "xin-you", "ren-xu" ], _js7v239 = {
    format: _js7v222,
    standAlone: _js7v222
}, _js7v240 = {
    basic: _js7v225,
    cldr: _js7v231
}, _js7v241 = {
    d: {
        d: "d–d"
    },
    h: _js7v7,
    H: {
        H: "HH–HH"
    },
    hm: _js7v111,
    Hm: _js7v19,
    hmv: _js7v120,
    Hmv: _js7v46,
    hv: _js7v11,
    Hv: {
        H: "HH–HH v"
    },
    M: {
        M: "MM–MM"
    },
    Md: _js7v50,
    MEd: _js7v100,
    MMM: {
        M: "LLL–LLL"
    },
    MMMd: _js7v13,
    MMMEd: _js7v101,
    y: {
        y: "U–U"
    },
    yM: _js7v23,
    yMd: _js7v134,
    yMEd: _js7v156,
    yMMM: _js7v24,
    yMMMd: _js7v117,
    yMMMEd: _js7v150,
    yMMMM: _js7v51
}, _js7v242 = {
    format: _js7v233,
    standAlone: _js7v232
}, _js7v243 = {
    d: {
        d: "d.–d."
    },
    h: _js7v7,
    H: {
        H: "HH–HH 'Uhr'"
    },
    hm: _js7v111,
    Hm: _js7v19,
    hmv: _js7v120,
    Hmv: _js7v46,
    hv: _js7v11,
    Hv: {
        H: "HH–HH 'Uhr' v"
    },
    M: {
        M: "M.–M."
    },
    Md: _js7v69,
    MEd: _js7v112,
    MMM: {
        M: "MMM–MMM"
    },
    MMMd: _js7v30,
    MMMEd: _js7v97,
    MMMM: {
        M: "LLLL–LLLL"
    },
    y: {
        y: "y–y G"
    },
    yM: _js7v47,
    yMd: _js7v139,
    yMEd: _js7v158,
    yMMM: _js7v48,
    yMMMd: _js7v135,
    yMMMEd: _js7v157,
    yMMMM: _js7v70
}, _js7v244 = {
    "long": _js7v235,
    "short": _js7v230,
    "default": "#,##0.###"
}, _js7v245 = {
    beforeCurrency: _js7v237,
    afterCurrency: _js7v237
}, _js7v246 = {
    "short": _js7v234,
    "default": "¤ #,##0.00",
    one: "{0} {1}",
    other: "{0} {1}",
    currencySpacing: _js7v245
}, _js7v247 = {
    abbreviated: _js7v238,
    narrow: _js7v238,
    wide: _js7v238
}, _js7v248 = {
    format: _js7v247
}, _js7v249 = {
    scientific: {
        "default": "#E0"
    },
    decimal: _js7v244,
    currency: _js7v246,
    percent: _js7v1
}, _js7v250 = [ "Taika (645–650)", "Hakuchi (650–671)", "Hakuhō (672–686)", "Shuchō (686–701)", "Taihō (701–704)", "Keiun (704–708)", "Wadō (708–715)", "Reiki (715–717)", "Yōrō (717–724)", "Jinki (724–729)", "Tenpyō (729–749)", "Tenpyō-kampō (749-749)", "Tenpyō-shōhō (749-757)", "Tenpyō-hōji (757-765)", "Tenpyō-jingo (765-767)", "Jingo-keiun (767-770)", "Hōki (770–780)", "Ten-ō (781-782)", "Enryaku (782–806)", "Daidō (806–810)", "Kōnin (810–824)", "Tenchō (824–834)", "Jōwa (834–848)", "Kajō (848–851)", "Ninju (851–854)", "Saikō (854–857)", "Ten-an (857-859)", "Jōgan (859–877)", "Gangyō (877–885)", "Ninna (885–889)", "Kanpyō (889–898)", "Shōtai (898–901)", "Engi (901–923)", "Enchō (923–931)", "Jōhei (931–938)", "Tengyō (938–947)", "Tenryaku (947–957)", "Tentoku (957–961)", "Ōwa (961–964)", "Kōhō (964–968)", "Anna (968–970)", "Tenroku (970–973)", "Ten’en (973–976)", "Jōgen (976–978)", "Tengen (978–983)", "Eikan (983–985)", "Kanna (985–987)", "Eien (987–989)", "Eiso (989–990)", "Shōryaku (990–995)", "Chōtoku (995–999)", "Chōhō (999–1004)", "Kankō (1004–1012)", "Chōwa (1012–1017)", "Kannin (1017–1021)", "Jian (1021–1024)", "Manju (1024–1028)", "Chōgen (1028–1037)", "Chōryaku (1037–1040)", "Chōkyū (1040–1044)", "Kantoku (1044–1046)", "Eishō (1046–1053)", "Tengi (1053–1058)", "Kōhei (1058–1065)", "Jiryaku (1065–1069)", "Enkyū (1069–1074)", "Shōho (1074–1077)", "Shōryaku (1077–1081)", "Eihō (1081–1084)", "Ōtoku (1084–1087)", "Kanji (1087–1094)", "Kahō (1094–1096)", "Eichō (1096–1097)", "Jōtoku (1097–1099)", "Kōwa (1099–1104)", "Chōji (1104–1106)", "Kashō (1106–1108)", "Tennin (1108–1110)", "Ten-ei (1110-1113)", "Eikyū (1113–1118)", "Gen’ei (1118–1120)", "Hōan (1120–1124)", "Tenji (1124–1126)", "Daiji (1126–1131)", "Tenshō (1131–1132)", "Chōshō (1132–1135)", "Hōen (1135–1141)", "Eiji (1141–1142)", "Kōji (1142–1144)", "Ten’yō (1144–1145)", "Kyūan (1145–1151)", "Ninpei (1151–1154)", "Kyūju (1154–1156)", "Hōgen (1156–1159)", "Heiji (1159–1160)", "Eiryaku (1160–1161)", "Ōho (1161–1163)", "Chōkan (1163–1165)", "Eiman (1165–1166)", "Nin’an (1166–1169)", "Kaō (1169–1171)", "Shōan (1171–1175)", "Angen (1175–1177)", "Jishō (1177–1181)", "Yōwa (1181–1182)", "Juei (1182–1184)", "Genryaku (1184–1185)", "Bunji (1185–1190)", "Kenkyū (1190–1199)", "Shōji (1199–1201)", "Kennin (1201–1204)", "Genkyū (1204–1206)", "Ken’ei (1206–1207)", "Jōgen (1207–1211)", "Kenryaku (1211–1213)", "Kenpō (1213–1219)", "Jōkyū (1219–1222)", "Jōō (1222–1224)", "Gennin (1224–1225)", "Karoku (1225–1227)", "Antei (1227–1229)", "Kanki (1229–1232)", "Jōei (1232–1233)", "Tenpuku (1233–1234)", "Bunryaku (1234–1235)", "Katei (1235–1238)", "Ryakunin (1238–1239)", "En’ō (1239–1240)", "Ninji (1240–1243)", "Kangen (1243–1247)", "Hōji (1247–1249)", "Kenchō (1249–1256)", "Kōgen (1256–1257)", "Shōka (1257–1259)", "Shōgen (1259–1260)", "Bun’ō (1260–1261)", "Kōchō (1261–1264)", "Bun’ei (1264–1275)", "Kenji (1275–1278)", "Kōan (1278–1288)", "Shōō (1288–1293)", "Einin (1293–1299)", "Shōan (1299–1302)", "Kengen (1302–1303)", "Kagen (1303–1306)", "Tokuji (1306–1308)", "Enkyō (1308–1311)", "Ōchō (1311–1312)", "Shōwa (1312–1317)", "Bunpō (1317–1319)", "Genō (1319–1321)", "Genkō (1321–1324)", "Shōchū (1324–1326)", "Karyaku (1326–1329)", "Gentoku (1329–1331)", "Genkō (1331–1334)", "Kenmu (1334–1336)", "Engen (1336–1340)", "Kōkoku (1340–1346)", "Shōhei (1346–1370)", "Kentoku (1370–1372)", "Bunchū (1372–1375)", "Tenju (1375–1379)", "Kōryaku (1379–1381)", "Kōwa (1381–1384)", "Genchū (1384–1392)", "Meitoku (1384–1387)", "Kakei (1387–1389)", "Kōō (1389–1390)", "Meitoku (1390–1394)", "Ōei (1394–1428)", "Shōchō (1428–1429)", "Eikyō (1429–1441)", "Kakitsu (1441–1444)", "Bun’an (1444–1449)", "Hōtoku (1449–1452)", "Kyōtoku (1452–1455)", "Kōshō (1455–1457)", "Chōroku (1457–1460)", "Kanshō (1460–1466)", "Bunshō (1466–1467)", "Ōnin (1467–1469)", "Bunmei (1469–1487)", "Chōkyō (1487–1489)", "Entoku (1489–1492)", "Meiō (1492–1501)", "Bunki (1501–1504)", "Eishō (1504–1521)", "Taiei (1521–1528)", "Kyōroku (1528–1532)", "Tenbun (1532–1555)", "Kōji (1555–1558)", "Eiroku (1558–1570)", "Genki (1570–1573)", "Tenshō (1573–1592)", "Bunroku (1592–1596)", "Keichō (1596–1615)", "Genna (1615–1624)", "Kan’ei (1624–1644)", "Shōho (1644–1648)", "Keian (1648–1652)", "Jōō (1652–1655)", "Meireki (1655–1658)", "Manji (1658–1661)", "Kanbun (1661–1673)", "Enpō (1673–1681)", "Tenna (1681–1684)", "Jōkyō (1684–1688)", "Genroku (1688–1704)", "Hōei (1704–1711)", "Shōtoku (1711–1716)", "Kyōhō (1716–1736)", "Genbun (1736–1741)", "Kanpō (1741–1744)", "Enkyō (1744–1748)", "Kan’en (1748–1751)", "Hōreki (1751–1764)", "Meiwa (1764–1772)", "An’ei (1772–1781)", "Tenmei (1781–1789)", "Kansei (1789–1801)", "Kyōwa (1801–1804)", "Bunka (1804–1818)", "Bunsei (1818–1830)", "Tenpō (1830–1844)", "Kōka (1844–1848)", "Kaei (1848–1854)", "Ansei (1854–1860)", "Man’en (1860–1861)", "Bunkyū (1861–1864)", "Genji (1864–1865)", "Keiō (1865–1868)", "Meiji", "Taishō", "Shōwa", "Heisei" ], _js7v251 = {
    dayParts: _js7v217,
    days: _js7v248,
    months: _js7v248,
    years: _js7v248,
    zodiacs: _js7v227
}, _js7v252 = {
    era: _js7v5,
    year: _js7v202,
    "year-short": _js7v202,
    "year-narrow": _js7v201,
    quarter: _js7v208,
    "quarter-short": _js7v190,
    "quarter-narrow": _js7v180,
    month: _js7v205,
    "month-short": _js7v206,
    "month-narrow": _js7v204,
    week: _js7v203,
    "week-short": _js7v203,
    "week-narrow": _js7v199,
    day: _js7v207,
    "day-short": _js7v207,
    "day-narrow": _js7v207,
    weekday: _js7v8,
    dayperiod: _js7v10,
    hour: _js7v191,
    "hour-short": _js7v186,
    "hour-narrow": _js7v186,
    minute: _js7v192,
    "minute-short": _js7v187,
    "minute-narrow": _js7v181,
    second: _js7v195,
    "second-short": _js7v188,
    "second-narrow": _js7v182,
    zone: _js7v6,
    sun: _js7v144,
    "sun-short": _js7v122,
    "sun-narrow": _js7v122,
    mon: _js7v138,
    "mon-short": _js7v123,
    "mon-narrow": _js7v123,
    tue: _js7v148,
    "tue-short": _js7v124,
    "tue-narrow": _js7v124,
    wed: _js7v149,
    "wed-short": _js7v125,
    "wed-narrow": _js7v125,
    thu: _js7v155,
    "thu-short": _js7v126,
    "thu-narrow": _js7v126,
    fri: _js7v145,
    "fri-short": _js7v127,
    "fri-narrow": _js7v127,
    sat: _js7v146,
    "sat-short": _js7v128,
    "sat-narrow": _js7v128
}, _js7v253 = {
    dateFormats: {
        basic: {},
        cldr: {}
    },
    fields: _js7v252
}, _js7v254 = {
    dateFormats: P.calendars.buddhist.dateFormats,
    datePartsOrder: "dmy",
    dateIntervalFormats: _js7v243,
    dateIntervalFallbackFormat: "{0} – {1}",
    dayNames: _js7v228,
    dayPeriods: _js7v242,
    monthNames: _js7v239,
    eraNames: _js7v14,
    quarterNames: _js7v216,
    fields: _js7v252
}, _js7v255 = {
    dateFormats: _js7v240,
    datePartsOrder: "dmy",
    dateIntervalFormats: _js7v241,
    dateIntervalFallbackFormat: "{0} – {1}",
    dayNames: _js7v228,
    dayPeriods: _js7v242,
    cyclicNames: _js7v251,
    monthNames: _js7v229,
    monthPatterns: _js7v200,
    quarterNames: _js7v216,
    fields: _js7v252
};

inter.id = "de_at";

inter.characters = {
    exemplar: {
        index: [ "A", "Ä", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "Ö", "P", "Q", "R", "S", "T", "U", "Ü", "V", "W", "X", "Y", "Z" ],
        "default": P.characters.exemplar.default,
        auxiliary: [ "á", "à", "ă", "â", "å", "ã", "ā", "æ", "ç", "é", "è", "ĕ", "ê", "ë", "ē", "ğ", "í", "ì", "ĭ", "î", "ï", "İ", "ī", "ı", "ñ", "ó", "ò", "ŏ", "ô", "ø", "ō", "œ", "ş", "ú", "ù", "ŭ", "û", "ū", "ÿ" ],
        punctuation: [ "\\-", "‐", "–", "—", ",", ";", "\\:", "!", "?", ".", "…", "'", "‘", "‚", '"', "“", "„", "«", "»", "(", ")", "\\[", "\\]", "\\{", "\\}", "§", "@", "*", "/", "\\&", "#" ]
    },
    ellipsis: {
        "final": "{0} …",
        initial: "… {0}",
        medial: "{0} … {1}",
        "word-final": "{0} …",
        "word-initial": "… {0}",
        "word-medial": "{0} … {1}"
    },
    moreInformation: "?"
};

inter.numbers = {
    ahom: {
        symbols: _js7v197,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    arab: {
        symbols: {
            decimal: "٫",
            group: "٬",
            list: "؛",
            percentSign: "٪",
            plusSign: "‏+",
            minusSign: "‏-",
            exponential: "اس",
            superscriptingExponent: "×",
            perMille: "؉",
            infinity: "∞",
            nan: "NaN",
            timeSeparator: ":"
        },
        formats: _js7v249,
        digits: [ "٠", "١", "٢", "٣", "٤", "٥", "٦", "٧", "٨", "٩" ]
    },
    arabext: {
        symbols: {
            decimal: "٫",
            group: "٬",
            list: "؛",
            percentSign: "٪",
            plusSign: "‎+‎",
            minusSign: "‎-‎",
            exponential: "×۱۰^",
            superscriptingExponent: "×",
            perMille: "؉",
            infinity: "∞",
            nan: "NaN",
            timeSeparator: "٫"
        },
        formats: _js7v249,
        digits: [ "۰", "۱", "۲", "۳", "۴", "۵", "۶", "۷", "۸", "۹" ]
    },
    armn: {
        symbols: _js7v197,
        digits: "renderArmenianUpper"
    },
    armnlow: {
        symbols: _js7v197,
        digits: "renderArmenianLower"
    },
    bali: {
        symbols: _js7v197,
        formats: _js7v249,
        digits: [ "᭐", "᭑", "᭒", "᭓", "᭔", "᭕", "᭖", "᭗", "᭘", "᭙" ]
    },
    beng: {
        symbols: _js7v197,
        formats: _js7v249,
        digits: [ "০", "১", "২", "৩", "৪", "৫", "৬", "৭", "৮", "৯" ]
    },
    brah: {
        symbols: _js7v197,
        formats: _js7v249,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    cakm: {
        symbols: _js7v197,
        formats: _js7v249,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    cham: {
        symbols: _js7v197,
        formats: _js7v249,
        digits: [ "꩐", "꩑", "꩒", "꩓", "꩔", "꩕", "꩖", "꩗", "꩘", "꩙" ]
    },
    cyrl: {
        symbols: _js7v197,
        digits: "renderCyrillicLower"
    },
    deva: {
        symbols: _js7v197,
        formats: _js7v249,
        digits: [ "०", "१", "२", "३", "४", "५", "६", "७", "८", "९" ]
    },
    ethi: {
        symbols: _js7v197,
        digits: "renderEthiopic"
    },
    finance: _js7v198,
    fullwide: {
        symbols: _js7v197,
        formats: _js7v249,
        digits: [ "０", "１", "２", "３", "４", "５", "６", "７", "８", "９" ]
    },
    geor: {
        symbols: _js7v197,
        digits: "renderGeorgian"
    },
    grek: {
        symbols: _js7v197,
        digits: "renderGreekUpper"
    },
    greklow: {
        symbols: _js7v197,
        digits: "renderGreekLower"
    },
    gujr: {
        symbols: _js7v197,
        formats: _js7v249,
        digits: [ "૦", "૧", "૨", "૩", "૪", "૫", "૬", "૭", "૮", "૯" ]
    },
    guru: {
        symbols: _js7v197,
        formats: _js7v249,
        digits: [ "੦", "੧", "੨", "੩", "੪", "੫", "੬", "੭", "੮", "੯" ]
    },
    hanidays: {
        symbols: _js7v197,
        digits: "renderSpelloutNumberingDays"
    },
    hanidec: {
        symbols: _js7v197,
        formats: _js7v249,
        digits: [ "〇", "一", "二", "三", "四", "五", "六", "七", "八", "九" ]
    },
    hans: _js7v209,
    hansfin: _js7v211,
    hant: _js7v209,
    hantfin: _js7v211,
    hebr: {
        symbols: _js7v197,
        digits: "renderHebrew"
    },
    hmng: {
        symbols: _js7v197,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    java: {
        symbols: _js7v197,
        formats: _js7v249,
        digits: [ "꧐", "꧑", "꧒", "꧓", "꧔", "꧕", "꧖", "꧗", "꧘", "꧙" ]
    },
    jpan: _js7v209,
    jpanfin: _js7v211,
    kali: {
        symbols: _js7v197,
        formats: _js7v249,
        digits: [ "꤀", "꤁", "꤂", "꤃", "꤄", "꤅", "꤆", "꤇", "꤈", "꤉" ]
    },
    khmr: {
        symbols: _js7v197,
        formats: _js7v249,
        digits: [ "០", "១", "២", "៣", "៤", "៥", "៦", "៧", "៨", "៩" ]
    },
    knda: {
        symbols: _js7v197,
        formats: _js7v249,
        digits: [ "೦", "೧", "೨", "೩", "೪", "೫", "೬", "೭", "೮", "೯" ]
    },
    lana: {
        symbols: _js7v197,
        formats: _js7v249,
        digits: [ "᪀", "᪁", "᪂", "᪃", "᪄", "᪅", "᪆", "᪇", "᪈", "᪉" ]
    },
    lanatham: {
        symbols: _js7v197,
        formats: _js7v249,
        digits: [ "᪐", "᪑", "᪒", "᪓", "᪔", "᪕", "᪖", "᪗", "᪘", "᪙" ]
    },
    laoo: {
        symbols: _js7v197,
        formats: _js7v249,
        digits: [ "໐", "໑", "໒", "໓", "໔", "໕", "໖", "໗", "໘", "໙" ]
    },
    latn: {
        symbols: _js7v197,
        formats: _js7v249,
        digits: [ "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" ]
    },
    lepc: {
        symbols: _js7v197,
        formats: _js7v249,
        digits: [ "᱀", "᱁", "᱂", "᱃", "᱄", "᱅", "᱆", "᱇", "᱈", "᱉" ]
    },
    limb: {
        symbols: _js7v197,
        formats: _js7v249,
        digits: [ "᥆", "᥇", "᥈", "᥉", "᥊", "᥋", "᥌", "᥍", "᥎", "᥏" ]
    },
    mathbold: {
        symbols: _js7v197,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathdbl: {
        symbols: _js7v197,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathmono: {
        symbols: _js7v197,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathsanb: {
        symbols: _js7v197,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathsans: {
        symbols: _js7v197,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mlym: {
        symbols: _js7v197,
        formats: _js7v249,
        digits: [ "൦", "൧", "൨", "൩", "൪", "൫", "൬", "൭", "൮", "൯" ]
    },
    modi: {
        symbols: _js7v197,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mong: {
        symbols: _js7v197,
        formats: _js7v249,
        digits: [ "᠐", "᠑", "᠒", "᠓", "᠔", "᠕", "᠖", "᠗", "᠘", "᠙" ]
    },
    mroo: {
        symbols: _js7v197,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mtei: {
        symbols: _js7v197,
        formats: _js7v249,
        digits: [ "꯰", "꯱", "꯲", "꯳", "꯴", "꯵", "꯶", "꯷", "꯸", "꯹" ]
    },
    mymr: {
        symbols: _js7v197,
        formats: _js7v249,
        digits: [ "၀", "၁", "၂", "၃", "၄", "၅", "၆", "၇", "၈", "၉" ]
    },
    mymrshan: {
        symbols: _js7v197,
        formats: _js7v249,
        digits: [ "႐", "႑", "႒", "႓", "႔", "႕", "႖", "႗", "႘", "႙" ]
    },
    mymrtlng: {
        symbols: _js7v197,
        digits: [ "꧰", "꧱", "꧲", "꧳", "꧴", "꧵", "꧶", "꧷", "꧸", "꧹" ]
    },
    "native": _js7v198,
    nkoo: {
        symbols: _js7v197,
        formats: _js7v249,
        digits: [ "߀", "߁", "߂", "߃", "߄", "߅", "߆", "߇", "߈", "߉" ]
    },
    olck: {
        symbols: _js7v197,
        formats: _js7v249,
        digits: [ "᱐", "᱑", "᱒", "᱓", "᱔", "᱕", "᱖", "᱗", "᱘", "᱙" ]
    },
    orya: {
        symbols: _js7v197,
        formats: _js7v249,
        digits: [ "୦", "୧", "୨", "୩", "୪", "୫", "୬", "୭", "୮", "୯" ]
    },
    osma: {
        symbols: _js7v197,
        formats: _js7v249,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    roman: {
        symbols: _js7v197,
        digits: "renderRomanUpper"
    },
    romanlow: {
        symbols: _js7v197,
        digits: "renderRomanLower"
    },
    saur: {
        symbols: _js7v197,
        formats: _js7v249,
        digits: [ "꣐", "꣑", "꣒", "꣓", "꣔", "꣕", "꣖", "꣗", "꣘", "꣙" ]
    },
    shrd: {
        symbols: _js7v197,
        formats: _js7v249,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    sind: {
        symbols: _js7v197,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    sinh: {
        symbols: _js7v197,
        digits: [ "෦", "෧", "෨", "෩", "෪", "෫", "෬", "෭", "෮", "෯" ]
    },
    sora: {
        symbols: _js7v197,
        formats: _js7v249,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    sund: {
        symbols: _js7v197,
        formats: _js7v249,
        digits: [ "᮰", "᮱", "᮲", "᮳", "᮴", "᮵", "᮶", "᮷", "᮸", "᮹" ]
    },
    takr: {
        symbols: _js7v197,
        formats: _js7v249,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    talu: {
        symbols: _js7v197,
        formats: _js7v249,
        digits: [ "᧐", "᧑", "᧒", "᧓", "᧔", "᧕", "᧖", "᧗", "᧘", "᧙" ]
    },
    taml: {
        symbols: _js7v197,
        digits: "renderTamil"
    },
    tamldec: {
        symbols: _js7v197,
        formats: _js7v249,
        digits: [ "௦", "௧", "௨", "௩", "௪", "௫", "௬", "௭", "௮", "௯" ]
    },
    telu: {
        symbols: _js7v197,
        formats: _js7v249,
        digits: [ "౦", "౧", "౨", "౩", "౪", "౫", "౬", "౭", "౮", "౯" ]
    },
    thai: {
        symbols: _js7v197,
        formats: _js7v249,
        digits: [ "๐", "๑", "๒", "๓", "๔", "๕", "๖", "๗", "๘", "๙" ]
    },
    tirh: {
        symbols: _js7v197,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    tibt: {
        symbols: _js7v197,
        formats: _js7v249,
        digits: [ "༠", "༡", "༢", "༣", "༤", "༥", "༦", "༧", "༨", "༩" ]
    },
    traditio: _js7v198,
    vaii: {
        symbols: _js7v197,
        formats: _js7v249,
        digits: [ "꘠", "꘡", "꘢", "꘣", "꘤", "꘥", "꘦", "꘧", "꘨", "꘩" ]
    },
    wara: {
        symbols: _js7v197,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    }
};

inter.calendars = {
    buddhist: {
        dateFormats: P.calendars.buddhist.dateFormats,
        datePartsOrder: "dmy",
        dateIntervalFormats: _js7v243,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _js7v228,
        dayPeriods: _js7v242,
        monthNames: _js7v236,
        eraNames: {
            wide: [ "BE" ],
            abbreviated: [ "BE" ]
        },
        quarterNames: _js7v216,
        fields: _js7v252
    },
    chinese: _js7v255,
    coptic: {
        dateFormats: P.calendars.buddhist.dateFormats,
        datePartsOrder: "dmy",
        dateIntervalFormats: _js7v243,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _js7v228,
        dayPeriods: _js7v242,
        monthNames: {
            format: _js7v221,
            standAlone: _js7v221
        },
        eraNames: _js7v102,
        quarterNames: _js7v216,
        fields: _js7v252
    },
    dangi: _js7v255,
    ethioaa: _js7v253,
    ethiopic: {
        dateFormats: P.calendars.buddhist.dateFormats,
        datePartsOrder: "dmy",
        dateIntervalFormats: _js7v243,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _js7v228,
        dayPeriods: _js7v242,
        monthNames: {
            format: _js7v223,
            standAlone: _js7v223
        },
        eraNames: _js7v102,
        quarterNames: _js7v216,
        fields: _js7v252
    },
    gregorian: {
        dateFormats: {
            basic: {
                fullDate: "EEEE, d. MMMM y",
                longDate: "d. MMMM y",
                mediumDate: "dd.MM.y",
                shortDate: "dd.MM.yy",
                fullTime: "HH:mm:ss zzzz",
                longTime: "HH:mm:ss z",
                mediumTime: "HH:mm:ss",
                shortTime: "HH:mm",
                shortDateTime: "dd.MM.yy, HH:mm",
                mediumDateTime: "dd.MM.y, HH:mm:ss",
                longDateTime: "d. MMMM y 'um' HH:mm:ss z",
                fullDateTime: "EEEE, d. MMMM y 'um' HH:mm:ss zzzz"
            },
            cldr: {
                d: "d",
                E: "ccc",
                Ed: "E, d.",
                Ehm: "E h:mm a",
                EHm: "E, HH:mm",
                Ehms: "E, h:mm:ss a",
                EHms: "E, HH:mm:ss",
                Gy: "y G",
                GyMMM: "MMM y G",
                GyMMMd: "d. MMM y G",
                GyMMMEd: "E, d. MMM y G",
                h: "h a",
                H: "HH 'Uhr'",
                hm: "h:mm a",
                Hm: "HH:mm",
                hms: "h:mm:ss a",
                Hms: "HH:mm:ss",
                hmsv: "h:mm:ss a v",
                Hmsv: "HH:mm:ss v",
                hmv: "h:mm a v",
                Hmv: "HH:mm v",
                M: "L",
                Md: "d.M.",
                MEd: "E, d.M.",
                MMd: "d.MM.",
                MMdd: "dd.MM.",
                MMM: "LLL",
                MMMd: "d. MMM",
                MMMEd: "E, d. MMM",
                MMMMd: "d. MMMM",
                MMMMEd: "E, d. MMMM",
                ms: "mm:ss",
                y: "y",
                yM: "M.y",
                yMd: "d.M.y",
                yMEd: "E, d.M.y",
                yMM: "MM.y",
                yMMdd: "dd.MM.y",
                yMMM: "MMM y",
                yMMMd: "d. MMM y",
                yMMMEd: "E, d. MMM y",
                yMMMM: "MMMM y",
                yQQQ: "QQQ y",
                yQQQQ: "QQQQ y"
            }
        },
        datePartsOrder: "dmy",
        dateIntervalFormats: {
            d: {
                d: "d.–d."
            },
            h: _js7v7,
            H: {
                H: "HH–HH 'Uhr'"
            },
            hm: _js7v111,
            Hm: {
                H: "HH:mm–HH:mm 'Uhr'",
                m: "HH:mm–HH:mm 'Uhr'"
            },
            hmv: _js7v120,
            Hmv: {
                H: "HH:mm–HH:mm 'Uhr' v",
                m: "HH:mm–HH:mm 'Uhr' v"
            },
            hv: _js7v11,
            Hv: {
                H: "HH–HH 'Uhr' v"
            },
            M: {
                M: "M.–M."
            },
            Md: _js7v69,
            MEd: _js7v112,
            MMM: {
                M: "MMM–MMM"
            },
            MMMd: _js7v30,
            MMMEd: _js7v97,
            MMMM: {
                M: "LLLL–LLLL"
            },
            y: {
                y: "y–y"
            },
            yM: {
                M: "MM.y – MM.y",
                y: "MM.y – MM.y"
            },
            yMd: {
                d: "dd.MM.y – dd.MM.y",
                M: "dd.MM.y – dd.MM.y",
                y: "dd.MM.y – dd.MM.y"
            },
            yMEd: {
                d: "E, dd.MM.y – E, dd.MM.y",
                M: "E, dd.MM.y – E, dd.MM.y",
                y: "E, dd.MM.y – E, dd.MM.y"
            },
            yMMM: {
                M: "MMM–MMM y",
                y: "MMM y – MMM y"
            },
            yMMMd: {
                d: "d.–d. MMM y",
                M: "d. MMM – d. MMM y",
                y: "d. MMM y – d. MMM y"
            },
            yMMMEd: {
                d: "E, d. – E, d. MMM y",
                M: "E, d. MMM – E, d. MMM y",
                y: "E, d. MMM y – E, d. MMM y"
            },
            yMMMM: {
                M: "MMMM–MMMM y",
                y: "MMMM y – MMMM y"
            }
        },
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _js7v228,
        dayPeriods: _js7v242,
        monthNames: _js7v236,
        eraNames: {
            wide: _js7v4,
            abbreviated: _js7v4
        },
        quarterNames: _js7v216,
        fields: _js7v252
    },
    hebrew: {
        dateFormats: P.calendars.buddhist.dateFormats,
        datePartsOrder: "dmy",
        dateIntervalFormats: _js7v243,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _js7v228,
        dayPeriods: _js7v242,
        monthNames: {
            format: _js7v219,
            standAlone: _js7v219
        },
        eraNames: {
            wide: [ "AM" ],
            abbreviated: [ "AM" ]
        },
        quarterNames: _js7v216,
        fields: _js7v252
    },
    indian: {
        dateFormats: P.calendars.buddhist.dateFormats,
        datePartsOrder: "dmy",
        dateIntervalFormats: _js7v243,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _js7v228,
        dayPeriods: _js7v242,
        monthNames: {
            format: _js7v224,
            standAlone: _js7v224
        },
        eraNames: {
            wide: [ "Saka" ],
            abbreviated: [ "Saka" ]
        },
        quarterNames: _js7v216,
        fields: _js7v252
    },
    islamic: _js7v254,
    "islamic-umalqura": _js7v254,
    "islamic-tbla": _js7v254,
    "islamic-civil": _js7v254,
    "islamic-rgsa": _js7v254,
    iso8601: _js7v253,
    japanese: {
        dateFormats: P.calendars.buddhist.dateFormats,
        datePartsOrder: "dmy",
        dateIntervalFormats: _js7v243,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _js7v228,
        dayPeriods: _js7v242,
        monthNames: _js7v236,
        eraNames: {
            wide: _js7v250,
            abbreviated: _js7v250
        },
        quarterNames: _js7v216,
        fields: _js7v252
    },
    persian: {
        dateFormats: P.calendars.buddhist.dateFormats,
        datePartsOrder: "dmy",
        dateIntervalFormats: _js7v243,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _js7v228,
        dayPeriods: _js7v242,
        monthNames: {
            format: _js7v220,
            standAlone: _js7v220
        },
        eraNames: {
            wide: [ "AP" ],
            abbreviated: [ "AP" ]
        },
        quarterNames: _js7v216,
        fields: _js7v252
    },
    roc: {
        dateFormats: P.calendars.buddhist.dateFormats,
        datePartsOrder: "dmy",
        dateIntervalFormats: _js7v243,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _js7v228,
        dayPeriods: _js7v242,
        monthNames: _js7v236,
        eraNames: {
            wide: _js7v9,
            abbreviated: _js7v9
        },
        quarterNames: _js7v216,
        fields: _js7v252
    },
    islamicc: _js7v253
};

inter.pluralRule = function(n) {
    var i = Math.floor(Math.abs(n)), v = n.toString().replace(/^[^.]*\.?/, "").length;
    if (typeof n === "string") n = parseInt(n, 10);
    if (i === 1 && v === 0) return "one";
    return "other";
};

inter.renderDigitsOrdinal = function(n) {
    if (n < 0) return "−" + this.renderDigitsOrdinal(-n);
    if (n >= 0) return this.renderNumber(n, "#,##0") + ".";
};

inter.renderSpelloutNumbering = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "minus " + this.renderSpelloutNumbering(-n);
    if (isFractional && n > 1) return this.renderSpelloutNumbering(Math.floor(n)) + " Komma " + this.renderSpelloutNumbering(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 2e15) return this.renderSpelloutCardinalFeminine(Math.floor(n / 1e15)) + " Billiarden" + (n === 2e15 ? "" : " " + this.renderSpelloutNumbering(n % 1e15));
    if (n >= 1e15) return "eine Billiarde" + (n === 1e15 ? "" : " " + this.renderSpelloutNumbering(n % 1e15));
    if (n >= 2e12) return this.renderSpelloutCardinalFeminine(Math.floor(n / 1e12)) + " Billionen" + (n === 2e12 ? "" : " " + this.renderSpelloutNumbering(n % 1e12));
    if (n >= 1e12) return "eine Billion" + (n === 1e12 ? "" : " " + this.renderSpelloutNumbering(n % 1e12));
    if (n >= 2e9) return this.renderSpelloutCardinalFeminine(Math.floor(n / 1e9)) + " Milliarden" + (n === 2e9 ? "" : " " + this.renderSpelloutNumbering(n % 1e9));
    if (n >= 1e9) return "eine Milliarde" + (n === 1e9 ? "" : " " + this.renderSpelloutNumbering(n % 1e9));
    if (n >= 2e6) return this.renderSpelloutCardinalFeminine(Math.floor(n / 1e6)) + " Millionen" + (n === 2e6 ? "" : " " + this.renderSpelloutNumbering(n % 1e6));
    if (n >= 1e6) return "eine Million" + (n === 1e6 ? "" : " " + this.renderSpelloutNumbering(n % 1e6));
    if (n >= 1e3) return this.renderSpelloutCardinalMasculine(Math.floor(n / 1e3)) + "­tausend" + (n === 1e3 ? "" : "­" + this.renderSpelloutNumbering(n % 1e3));
    if (n >= 100) return this.renderSpelloutCardinalMasculine(Math.floor(n / 100)) + "­hundert" + (n === 100 ? "" : "­" + this.renderSpelloutNumbering(n % 100));
    if (n >= 90) return (n === 90 ? "" : this.renderSpelloutCardinalMasculine(n % 10) + "­und­") + "neunzig";
    if (n >= 80) return (n === 80 ? "" : this.renderSpelloutCardinalMasculine(n % 10) + "­und­") + "achtzig";
    if (n >= 70) return (n === 70 ? "" : this.renderSpelloutCardinalMasculine(n % 10) + "­und­") + "siebzig";
    if (n >= 60) return (n === 60 ? "" : this.renderSpelloutCardinalMasculine(n % 10) + "­und­") + "sechzig";
    if (n >= 50) return (n === 50 ? "" : this.renderSpelloutCardinalMasculine(n % 10) + "­und­") + "fünfzig";
    if (n >= 40) return (n === 40 ? "" : this.renderSpelloutCardinalMasculine(n % 10) + "­und­") + "vierzig";
    if (n >= 30) return (n === 30 ? "" : this.renderSpelloutCardinalMasculine(n % 10) + "­und­") + "dreißig";
    if (n >= 20) return (n === 20 ? "" : this.renderSpelloutCardinalMasculine(n % 10) + "­und­") + "zwanzig";
    if (n >= 18) return this.renderSpelloutNumbering(n % 10) + "zehn";
    if (n >= 17) return "siebzehn";
    if (n >= 16) return "sechzehn";
    if (n >= 13) return this.renderSpelloutNumbering(n % 10) + "zehn";
    if (n >= 12) return "zwölf";
    if (n >= 11) return "elf";
    if (n >= 10) return "zehn";
    if (n >= 9) return "neun";
    if (n >= 8) return "acht";
    if (n >= 7) return "sieben";
    if (n >= 6) return "sechs";
    if (n >= 5) return "fünf";
    if (n >= 4) return "vier";
    if (n >= 3) return "drei";
    if (n >= 2) return "zwei";
    if (n >= 1) return "eins";
    if (n >= 0) return "null";
};

inter.renderArmenianUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderArmenianUpper(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e4) return this.renderNumber(n, "#,##0");
    if (n >= 9e3) return "Ք" + (n === 9e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 8e3) return "Փ" + (n === 8e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 7e3) return "Ւ" + (n === 7e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 6e3) return "Ց" + (n === 6e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 5e3) return "Ր" + (n === 5e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 4e3) return "Տ" + (n === 4e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 3e3) return "Վ" + (n === 3e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 2e3) return "Ս" + (n === 2e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 1e3) return "Ռ" + (n === 1e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 900) return "Ջ" + (n === 900 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 800) return "Պ" + (n === 800 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 700) return "Չ" + (n === 700 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 600) return "Ո" + (n === 600 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 500) return "Շ" + (n === 500 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 400) return "Ն" + (n === 400 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 300) return "Յ" + (n === 300 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 200) return "Մ" + (n === 200 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 100) return "Ճ" + (n === 100 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 90) return "Ղ" + (n === 90 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 80) return "Ձ" + (n === 80 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 70) return "Հ" + (n === 70 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 60) return "Կ" + (n === 60 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 50) return "Ծ" + (n === 50 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 40) return "Խ" + (n === 40 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 30) return "Լ" + (n === 30 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 20) return "Ի" + (n === 20 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 10) return "Ժ" + (n === 10 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 9) return "Թ";
    if (n >= 8) return "Ը";
    if (n >= 7) return "Է";
    if (n >= 6) return "Զ";
    if (n >= 5) return "Ե";
    if (n >= 4) return "Դ";
    if (n >= 3) return "Գ";
    if (n >= 2) return "Բ";
    if (n >= 1) return "Ա";
    if (n >= 0) return "0";
};

inter.renderArmenianLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderArmenianLower(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e4) return this.renderNumber(n, "#,##0");
    if (n >= 9e3) return "ք" + (n === 9e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 8e3) return "փ" + (n === 8e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 7e3) return "ւ" + (n === 7e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 6e3) return "ց" + (n === 6e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 5e3) return "ր" + (n === 5e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 4e3) return "տ" + (n === 4e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 3e3) return "վ" + (n === 3e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 2e3) return "ս" + (n === 2e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 1e3) return "ռ" + (n === 1e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 900) return "ջ" + (n === 900 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 800) return "պ" + (n === 800 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 700) return "չ" + (n === 700 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 600) return "ո" + (n === 600 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 500) return "շ" + (n === 500 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 400) return "ն" + (n === 400 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 300) return "յ" + (n === 300 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 200) return "մ" + (n === 200 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 100) return "ճ" + (n === 100 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 90) return "ղ" + (n === 90 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 80) return "ձ" + (n === 80 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 70) return "հ" + (n === 70 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 60) return "կ" + (n === 60 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 50) return "ծ" + (n === 50 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 40) return "խ" + (n === 40 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 30) return "լ" + (n === 30 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 20) return "ի" + (n === 20 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 10) return "ժ" + (n === 10 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 9) return "թ";
    if (n >= 8) return "ը";
    if (n >= 7) return "է";
    if (n >= 6) return "զ";
    if (n >= 5) return "ե";
    if (n >= 4) return "դ";
    if (n >= 3) return "գ";
    if (n >= 2) return "բ";
    if (n >= 1) return "ա";
    if (n >= 0) return "0";
};

inter.renderCyrillicLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderCyrillicLower(-n);
    if (isFractional && n > 1) return this.renderCyrillicLower(Math.floor(n)) + "." + this.renderCyrillicLower(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e15) return "҂҂҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e15)) + (n === 1e15 ? "" : " " + this.renderCyrillicLower(n % 1e15));
    if (n >= 1e12) return "҂҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e12)) + (n === 1e12 ? "" : " " + this.renderCyrillicLower(n % 1e12));
    if (n >= 1e9) return "҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e9)) + (n === 1e9 ? "" : " " + this.renderCyrillicLower(n % 1e9));
    if (n >= 1e6) return "҂҂" + this.renderCyrillicLower(Math.floor(n / 1e6)) + (n === 1e6 ? "" : " " + this.renderCyrillicLower(n % 1e6));
    if (n >= 11e3) return this.renderCyrillicLowerThousands(Math.floor(n / 1e4)) + (n === 11e3 ? "" : " " + this.renderCyrillicLower(n % 1e4));
    if (n >= 1e4) return "҂" + this.renderCyrillicLower(Math.floor(n / 1e4)) + (n === 1e4 ? "" : " " + this.renderCyrillicLower(n % 1e4));
    if (n >= 1e3) return "҂" + this.renderCyrillicLower110(Math.floor(n / 1e3)) + this.renderCyrillicLowerPost(n % 1e3);
    if (n >= 900) return "ц" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 801) return "ѿ" + this.renderCyrillicLower(n % 100);
    if (n >= 800) return "ѿ҃";
    if (n >= 700) return "ѱ" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 600) return "х" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 500) return "ф" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 400) return "у" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 300) return "т" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 200) return "с" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 100) return "р" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 90) return "ч" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 80) return "п" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 70) return "ѻ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 60) return "ѯ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 50) return "н" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 40) return "м" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 30) return "л" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 20) return "к" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 19) return "ѳ҃і";
    if (n >= 18) return "и҃і";
    if (n >= 17) return "з҃і";
    if (n >= 16) return "ѕ҃і";
    if (n >= 15) return "є҃і";
    if (n >= 14) return "д҃і";
    if (n >= 13) return "г҃і";
    if (n >= 12) return "в҃і";
    if (n >= 11) return "а҃і";
    if (n >= 1) return this.renderCyrillicLower110(n) + "҃";
    if (n >= 0) return "0҃";
};

inter.renderEthiopic = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderEthiopic(-n);
    if (isFractional && n > 1) return this.renderEthiopic(Math.floor(n)) + "፡" + this.renderEthiopic(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,###0");
    if (n >= 2e16) return this.renderEthiopic(Math.floor(n / 1e16)) + "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 1e16) return "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 2e12) return this.renderEthiopic(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1e12) return "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 2e8) return this.renderEthiopic(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1e8) return "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 2e4) return this.renderEthiopic(Math.floor(n / 1e4)) + "፼" + (n === 2e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 1e4) return "፼" + (n === 1e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 200) return this.renderEthiopic(Math.floor(n / 100)) + "፻" + (n === 200 ? "" : this.renderEthiopic(n % 100));
    if (n >= 100) return "፻" + (n === 100 ? "" : this.renderEthiopic(n % 100));
    if (n >= 90) return "፺" + (n === 90 ? "" : this.renderEthiopic(n % 10));
    if (n >= 80) return "፹" + (n === 80 ? "" : this.renderEthiopic(n % 10));
    if (n >= 70) return "፸" + (n === 70 ? "" : this.renderEthiopic(n % 10));
    if (n >= 60) return "፷" + (n === 60 ? "" : this.renderEthiopic(n % 10));
    if (n >= 50) return "፶" + (n === 50 ? "" : this.renderEthiopic(n % 10));
    if (n >= 40) return "፵" + (n === 40 ? "" : this.renderEthiopic(n % 10));
    if (n >= 30) return "፴" + (n === 30 ? "" : this.renderEthiopic(n % 10));
    if (n >= 20) return "፳" + (n === 20 ? "" : this.renderEthiopic(n % 10));
    if (n >= 10) return "፲" + (n === 10 ? "" : this.renderEthiopic(n % 10));
    if (n >= 9) return "፱";
    if (n >= 8) return "፰";
    if (n >= 7) return "፯";
    if (n >= 6) return "፮";
    if (n >= 5) return "፭";
    if (n >= 4) return "፬";
    if (n >= 3) return "፫";
    if (n >= 2) return "፪";
    if (n >= 1) return "፩";
    if (n >= 0) return "ባዶ";
};

inter.renderGeorgian = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGeorgian(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 2e4) return this.renderNumber(n, "#,##0");
    if (n >= 1e4) return "ჯ" + (n === 1e4 ? "" : this.renderGeorgian(n % 1e4));
    if (n >= 9e3) return "ჵ" + (n === 9e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 8e3) return "ჴ" + (n === 8e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 7e3) return "ხ" + (n === 7e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 6e3) return "ჭ" + (n === 6e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 5e3) return "წ" + (n === 5e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 4e3) return "ძ" + (n === 4e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 3e3) return "ც" + (n === 3e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 2e3) return "ჩ" + (n === 2e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 1e3) return "შ" + (n === 1e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 900) return "ყ" + (n === 900 ? "" : this.renderGeorgian(n % 100));
    if (n >= 800) return "ღ" + (n === 800 ? "" : this.renderGeorgian(n % 100));
    if (n >= 700) return "ქ" + (n === 700 ? "" : this.renderGeorgian(n % 100));
    if (n >= 600) return "ფ" + (n === 600 ? "" : this.renderGeorgian(n % 100));
    if (n >= 500) return "ჳ" + (n === 500 ? "" : this.renderGeorgian(n % 100));
    if (n >= 400) return "უ" + (n === 400 ? "" : this.renderGeorgian(n % 100));
    if (n >= 300) return "ტ" + (n === 300 ? "" : this.renderGeorgian(n % 100));
    if (n >= 200) return "ს" + (n === 200 ? "" : this.renderGeorgian(n % 100));
    if (n >= 100) return "რ" + (n === 100 ? "" : this.renderGeorgian(n % 100));
    if (n >= 90) return "ჟ" + (n === 90 ? "" : this.renderGeorgian(n % 10));
    if (n >= 80) return "პ" + (n === 80 ? "" : this.renderGeorgian(n % 10));
    if (n >= 70) return "ო" + (n === 70 ? "" : this.renderGeorgian(n % 10));
    if (n >= 60) return "ჲ" + (n === 60 ? "" : this.renderGeorgian(n % 10));
    if (n >= 50) return "ნ" + (n === 50 ? "" : this.renderGeorgian(n % 10));
    if (n >= 40) return "მ" + (n === 40 ? "" : this.renderGeorgian(n % 10));
    if (n >= 30) return "ლ" + (n === 30 ? "" : this.renderGeorgian(n % 10));
    if (n >= 20) return "კ" + (n === 20 ? "" : this.renderGeorgian(n % 10));
    if (n >= 10) return "ი" + (n === 10 ? "" : this.renderGeorgian(n % 10));
    if (n >= 9) return "თ";
    if (n >= 8) return "ჱ";
    if (n >= 7) return "ზ";
    if (n >= 6) return "ვ";
    if (n >= 5) return "ე";
    if (n >= 4) return "დ";
    if (n >= 3) return "გ";
    if (n >= 2) return "ბ";
    if (n >= 1) return "ა";
    if (n >= 0) return this.renderNumber(n, "#,##0");
};

inter.renderGreekUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGreekUpper(-n);
    if (isFractional && n > 1) return this.renderGreekUpper(Math.floor(n)) + "." + this.renderGreekUpper(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 0) return this.renderGreekNumeralMajuscules(n) + "´";
};

inter.renderGreekLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGreekLower(-n);
    if (isFractional && n > 1) return this.renderGreekLower(Math.floor(n)) + "." + this.renderGreekLower(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 0) return this.renderGreekNumeralMinuscules(n) + "´";
};

inter.renderSpelloutCardinal = function(n) {
    if (n < 0) return "−" + this.renderSpelloutCardinal(-n);
    if (n >= 0) return this.renderNumber(n, "#,##0.#");
};

inter.renderHebrew = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderHebrew(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1000001) return this.renderNumber(n, "#,##0");
    if (n >= 1e6) return "אלף אלפים";
    if (n >= 3001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 3001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 3e3) return this.renderHebrew(Math.floor(n / 1e3)) + " אלפים";
    if (n >= 2001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 2001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 2e3) return "אלפיים";
    if (n >= 1001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 1001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 1e3) return "אלף";
    if (n >= 901) return "תתק" + this.renderHebrew099(n % 100);
    if (n >= 900) return "תת״ק";
    if (n >= 801) return "תת" + this.renderHebrew099(n % 100);
    if (n >= 800) return "ת״ת";
    if (n >= 745) return "תש" + this.renderHebrew099(n % 100);
    if (n >= 744) return "תשד״מ";
    if (n >= 701) return "תש" + this.renderHebrew099(n % 100);
    if (n >= 700) return "ת״ש";
    if (n >= 699) return "תר" + this.renderHebrew099(n % 100);
    if (n >= 698) return "תרח״צ";
    if (n >= 601) return "תר" + this.renderHebrew099(n % 100);
    if (n >= 600) return "ת״ר";
    if (n >= 501) return "תק" + this.renderHebrew099(n % 100);
    if (n >= 500) return "ת״ק";
    if (n >= 400) return "ת" + this.renderHebrew099(n % 100);
    if (n >= 345) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 344) return "שד״מ";
    if (n >= 305) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 304) return "ד״ש";
    if (n >= 300) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 299) return "ר" + this.renderHebrew099(n % 100);
    if (n >= 298) return "רח״צ";
    if (n >= 200) return "ר" + this.renderHebrew099(n % 100);
    if (n >= 100) return "ק" + this.renderHebrew099(n % 100);
    if (n >= 91) return "צ״" + this.renderHebrewItem(n % 10);
    if (n >= 90) return "צ׳";
    if (n >= 81) return "פ״" + this.renderHebrewItem(n % 10);
    if (n >= 80) return "פ׳";
    if (n >= 71) return "ע״" + this.renderHebrewItem(n % 10);
    if (n >= 70) return "ע׳";
    if (n >= 61) return "ס״" + this.renderHebrewItem(n % 10);
    if (n >= 60) return "ס׳";
    if (n >= 51) return "נ״" + this.renderHebrewItem(n % 10);
    if (n >= 50) return "נ׳";
    if (n >= 41) return "מ״" + this.renderHebrewItem(n % 10);
    if (n >= 40) return "מ׳";
    if (n >= 31) return "ל״" + this.renderHebrewItem(n % 10);
    if (n >= 30) return "ל׳";
    if (n >= 21) return "כ״" + this.renderHebrewItem(n % 10);
    if (n >= 20) return "כ׳";
    if (n >= 17) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "ט״ז";
    if (n >= 15) return "ט״ו";
    if (n >= 11) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 0) return this.renderHebrewItem(n) + "׳";
};

inter.renderRomanUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderRomanUpper(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 4e5) return this.renderNumber(n, "#,##0");
    if (n >= 3e5) return "ↈↈↈ" + (n === 3e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 2e5) return "ↈↈ" + (n === 2e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 1e5) return "ↈ" + (n === 1e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 9e4) return "ↂↈ" + (n === 9e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 8e4) return "ↇↂↂↂ" + (n === 8e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 7e4) return "ↇↂↂ" + (n === 7e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 6e4) return "ↇↂ" + (n === 6e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 5e4) return "ↇ" + (n === 5e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 4e4) return "ↂↇ" + (n === 4e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 3e4) return "ↂↂↂ" + (n === 3e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 2e4) return "ↂↂ" + (n === 2e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 1e4) return "ↂ" + (n === 1e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 9e3) return "Mↂ" + (n === 9e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 8e3) return "ↁMMM" + (n === 8e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 7e3) return "ↁMM" + (n === 7e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 6e3) return "ↁM" + (n === 6e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 5e3) return "ↁ" + (n === 5e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 4e3) return "Mↁ" + (n === 4e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 3e3) return "MMM" + (n === 3e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 2e3) return "MM" + (n === 2e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 1e3) return "M" + (n === 1e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 900) return "CM" + (n === 900 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 800) return "DCCC" + (n === 800 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 700) return "DCC" + (n === 700 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 600) return "DC" + (n === 600 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 500) return "D" + (n === 500 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 400) return "CD" + (n === 400 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 300) return "CCC" + (n === 300 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 200) return "CC" + (n === 200 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 100) return "C" + (n === 100 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 90) return "XC" + (n === 90 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 80) return "LXXX" + (n === 80 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 70) return "LXX" + (n === 70 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 60) return "LX" + (n === 60 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 50) return "L" + (n === 50 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 40) return "XL" + (n === 40 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 30) return "XXX" + (n === 30 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 20) return "XX" + (n === 20 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 10) return "X" + (n === 10 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 9) return "IX";
    if (n >= 8) return "VIII";
    if (n >= 7) return "VII";
    if (n >= 6) return "VI";
    if (n >= 5) return "V";
    if (n >= 4) return "IV";
    if (n >= 3) return "III";
    if (n >= 2) return "II";
    if (n >= 1) return "I";
    if (n >= 0) return "N";
};

inter.renderRomanLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderRomanLower(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 5e3) return this.renderNumber(n, "#,##0");
    if (n >= 4e3) return "mmmm" + (n === 4e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 3e3) return "mmm" + (n === 3e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 2e3) return "mm" + (n === 2e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 1e3) return "m" + (n === 1e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 900) return "cm" + (n === 900 ? "" : this.renderRomanLower(n % 100));
    if (n >= 800) return "dccc" + (n === 800 ? "" : this.renderRomanLower(n % 100));
    if (n >= 700) return "dcc" + (n === 700 ? "" : this.renderRomanLower(n % 100));
    if (n >= 600) return "dc" + (n === 600 ? "" : this.renderRomanLower(n % 100));
    if (n >= 500) return "d" + (n === 500 ? "" : this.renderRomanLower(n % 100));
    if (n >= 400) return "cd" + (n === 400 ? "" : this.renderRomanLower(n % 100));
    if (n >= 300) return "ccc" + (n === 300 ? "" : this.renderRomanLower(n % 100));
    if (n >= 200) return "cc" + (n === 200 ? "" : this.renderRomanLower(n % 100));
    if (n >= 100) return "c" + (n === 100 ? "" : this.renderRomanLower(n % 100));
    if (n >= 90) return "xc" + (n === 90 ? "" : this.renderRomanLower(n % 10));
    if (n >= 80) return "lxxx" + (n === 80 ? "" : this.renderRomanLower(n % 10));
    if (n >= 70) return "lxx" + (n === 70 ? "" : this.renderRomanLower(n % 10));
    if (n >= 60) return "lx" + (n === 60 ? "" : this.renderRomanLower(n % 10));
    if (n >= 50) return "l" + (n === 50 ? "" : this.renderRomanLower(n % 10));
    if (n >= 40) return "xl" + (n === 40 ? "" : this.renderRomanLower(n % 10));
    if (n >= 30) return "xxx" + (n === 30 ? "" : this.renderRomanLower(n % 10));
    if (n >= 20) return "xx" + (n === 20 ? "" : this.renderRomanLower(n % 10));
    if (n >= 10) return "x" + (n === 10 ? "" : this.renderRomanLower(n % 10));
    if (n >= 9) return "ix";
    if (n >= 8) return "viii";
    if (n >= 7) return "vii";
    if (n >= 6) return "vi";
    if (n >= 5) return "v";
    if (n >= 4) return "iv";
    if (n >= 3) return "iii";
    if (n >= 2) return "ii";
    if (n >= 1) return "i";
    if (n >= 0) return "n";
};

inter.renderTamil = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderTamil(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e8) return this.renderNumber(n, "#,##,##0");
    if (n >= 1e6) return this.renderTamil(Math.floor(n / 1e6)) + "௱௲" + (n === 1e6 ? "" : this.renderTamilThousands(n % 1e6));
    if (n >= 2e3) return this.renderTamil(Math.floor(n / 1e3)) + "௲" + (n === 2e3 ? "" : this.renderTamil(n % 1e3));
    if (n >= 1e3) return "௲" + (n === 1e3 ? "" : this.renderTamil(n % 1e3));
    if (n >= 200) return this.renderTamil(Math.floor(n / 100)) + "௱" + (n === 200 ? "" : this.renderTamil(n % 100));
    if (n >= 100) return "௱" + (n === 100 ? "" : this.renderTamil(n % 100));
    if (n >= 20) return this.renderTamil(Math.floor(n / 10)) + "௰" + (n === 20 ? "" : this.renderTamil(n % 10));
    if (n >= 10) return "௰" + (n === 10 ? "" : this.renderTamil(n % 10));
    if (n >= 9) return "௯";
    if (n >= 8) return "௮";
    if (n >= 7) return "௭";
    if (n >= 6) return "௬";
    if (n >= 5) return "௫";
    if (n >= 4) return "௪";
    if (n >= 3) return "௩";
    if (n >= 2) return "௨";
    if (n >= 1) return "௧";
    if (n >= 0) return "௦";
};

inter.renderSpelloutCardinalFeminine = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "minus " + this.renderSpelloutCardinalFeminine(-n);
    if (isFractional && n > 1) return this.renderSpelloutCardinalFeminine(Math.floor(n)) + " Komma " + this.renderSpelloutCardinalFeminine(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 2e15) return this.renderSpelloutCardinalFeminine(Math.floor(n / 1e15)) + " Billiarden" + (n === 2e15 ? "" : " " + this.renderSpelloutCardinalFeminine(n % 1e15));
    if (n >= 1e15) return "eine Billiarde" + (n === 1e15 ? "" : " " + this.renderSpelloutCardinalFeminine(n % 1e15));
    if (n >= 2e12) return this.renderSpelloutCardinalFeminine(Math.floor(n / 1e12)) + " Billionen" + (n === 2e12 ? "" : " " + this.renderSpelloutCardinalFeminine(n % 1e12));
    if (n >= 1e12) return "eine Billion" + (n === 1e12 ? "" : " " + this.renderSpelloutCardinalFeminine(n % 1e12));
    if (n >= 2e9) return this.renderSpelloutCardinalFeminine(Math.floor(n / 1e9)) + " Milliarden" + (n === 2e9 ? "" : " " + this.renderSpelloutCardinalFeminine(n % 1e9));
    if (n >= 1e9) return "eine Milliarde" + (n === 1e9 ? "" : " " + this.renderSpelloutCardinalFeminine(n % 1e9));
    if (n >= 2e6) return this.renderSpelloutCardinalFeminine(Math.floor(n / 1e6)) + " Millionen" + (n === 2e6 ? "" : " " + this.renderSpelloutCardinalFeminine(n % 1e6));
    if (n >= 1e6) return "eine Million" + (n === 1e6 ? "" : " " + this.renderSpelloutCardinalFeminine(n % 1e6));
    if (n >= 1e3) return this.renderSpelloutCardinalMasculine(Math.floor(n / 1e3)) + "­tausend" + (n === 1e3 ? "" : "­" + this.renderSpelloutCardinalFeminine(n % 1e3));
    if (n >= 100) return this.renderSpelloutCardinalMasculine(Math.floor(n / 100)) + "­hundert" + (n === 100 ? "" : "­" + this.renderSpelloutCardinalFeminine(n % 100));
    if (n >= 2) return this.renderSpelloutNumbering(n);
    if (n >= 1) return "eine";
    if (n >= 0) return "null";
};

inter.renderSpelloutCardinalMasculine = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "minus " + this.renderSpelloutCardinalMasculine(-n);
    if (isFractional && n > 1) return this.renderSpelloutCardinalMasculine(Math.floor(n)) + " Komma " + this.renderSpelloutCardinalMasculine(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 2e15) return this.renderSpelloutCardinalFeminine(Math.floor(n / 1e15)) + " Billiarden" + (n === 2e15 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e15));
    if (n >= 1e15) return "eine Billiarde" + (n === 1e15 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e15));
    if (n >= 2e12) return this.renderSpelloutCardinalFeminine(Math.floor(n / 1e12)) + " Billionen" + (n === 2e12 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e12));
    if (n >= 1e12) return "eine Billion" + (n === 1e12 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e12));
    if (n >= 2e9) return this.renderSpelloutCardinalFeminine(Math.floor(n / 1e9)) + " Milliarden" + (n === 2e9 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e9));
    if (n >= 1e9) return "eine Milliarde" + (n === 1e9 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e9));
    if (n >= 2e6) return this.renderSpelloutCardinalFeminine(Math.floor(n / 1e6)) + " Millionen" + (n === 2e6 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e6));
    if (n >= 1e6) return "eine Million" + (n === 1e6 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e6));
    if (n >= 1e3) return this.renderSpelloutCardinalMasculine(Math.floor(n / 1e3)) + "­tausend" + (n === 1e3 ? "" : "­" + this.renderSpelloutCardinalMasculine(n % 1e3));
    if (n >= 100) return this.renderSpelloutCardinalMasculine(Math.floor(n / 100)) + "­hundert" + (n === 100 ? "" : "­" + this.renderSpelloutCardinalMasculine(n % 100));
    if (n >= 2) return this.renderSpelloutNumbering(n);
    if (n >= 1) return "ein";
    if (n >= 0) return "null";
};

inter.renderCyrillicLowerThousands = function(n) {
    if (n >= 900) return "҂ц" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 800) return "҂ѿ" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 700) return "҂ѱ" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 600) return "҂х" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 500) return "҂ф" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 400) return "҂у" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 300) return "҂т" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 200) return "҂с" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 100) return "҂р" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 90) return "҂ч" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 80) return "҂п" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 70) return "҂ѻ" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 60) return "҂ѯ" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 50) return "҂н" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 40) return "҂м" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 30) return "҂л" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 20) return "҂к" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 19) return "҂ѳ҃҂і";
    if (n >= 18) return "҂и҃҂і";
    if (n >= 17) return "҂з҃҂і";
    if (n >= 16) return "҂ѕ҃҂і";
    if (n >= 15) return "҂є҃҂і";
    if (n >= 14) return "҂д҃҂і";
    if (n >= 13) return "҂г҃҂і";
    if (n >= 12) return "҂в҃҂і";
    if (n >= 11) return "҂а҃҂і";
    if (n >= 10) return "҃҂і";
    if (n >= 9) return "҃҂ѳ";
    if (n >= 8) return "҃҂и";
    if (n >= 7) return "҃҂з";
    if (n >= 6) return "҃҂ѕ";
    if (n >= 5) return "҃҂є";
    if (n >= 4) return "҃҂д";
    if (n >= 3) return "҃҂г";
    if (n >= 2) return "҃҂в";
    if (n >= 1) return "҃҂а";
    if (n >= 0) return "҃";
};

inter.renderCyrillicLower110 = function(n) {
    if (n >= 10) return "і";
    if (n >= 9) return "ѳ";
    if (n >= 8) return "и";
    if (n >= 7) return "з";
    if (n >= 6) return "ѕ";
    if (n >= 5) return "є";
    if (n >= 4) return "д";
    if (n >= 3) return "г";
    if (n >= 2) return "в";
    if (n >= 1) return "а";
};

inter.renderCyrillicLowerPost = function(n) {
    if (n >= 1) return this.renderCyrillicLower(n);
    if (n >= 0) return "҃";
};

inter.renderCyrillicLowerFinal = function(n) {
    if (n >= 91) return "ч" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 90) return "҃ч";
    if (n >= 81) return "п" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 80) return "҃п";
    if (n >= 71) return "ѻ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 70) return "҃ѻ";
    if (n >= 61) return "ѯ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 60) return "҃ѯ";
    if (n >= 51) return "н" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 50) return "҃н";
    if (n >= 41) return "м" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 40) return "҃м";
    if (n >= 31) return "л" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 30) return "҃л";
    if (n >= 21) return "к" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 20) return "҃к";
    if (n >= 19) return "ѳ҃і";
    if (n >= 18) return "и҃і";
    if (n >= 17) return "з҃і";
    if (n >= 16) return "ѕ҃і";
    if (n >= 15) return "є҃і";
    if (n >= 14) return "д҃і";
    if (n >= 13) return "г҃і";
    if (n >= 12) return "в҃і";
    if (n >= 11) return "а҃і";
    if (n >= 1) return "҃" + this.renderCyrillicLower110(n);
    if (n >= 0) return "҃";
};

inter.renderEthiopicP3 = function(n) {
    if (n >= 1e12) return this.renderEthiopic(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1) return "፼፼፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼፼፼";
};

inter.renderEthiopicP2 = function(n) {
    if (n >= 1e8) return this.renderEthiopic(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1) return "፼፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼፼";
};

inter.renderEthiopicP1 = function(n) {
    if (n >= 1e4) return this.renderEthiopic(Math.floor(n / 1e4)) + "፼" + (n === 1e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 1) return "፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼";
};

inter.renderGreekNumeralMajuscules = function(n) {
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e16) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e16)) + "ΜΜΜΜ" + (n === 1e16 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e16));
    if (n >= 1e12) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e12)) + "ΜΜΜ" + (n === 1e12 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e12));
    if (n >= 1e8) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e8)) + "ΜΜ" + (n === 1e8 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e8));
    if (n >= 1e4) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e4)) + "Μ" + (n === 1e4 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e4));
    if (n >= 1e3) return "͵" + this.renderGreekNumeralMajuscules(Math.floor(n / 1e3)) + (n === 1e3 ? "" : this.renderGreekNumeralMajuscules(n % 1e3));
    if (n >= 900) return "Ϡ" + (n === 900 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 800) return "Ω" + (n === 800 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 700) return "Ψ" + (n === 700 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 600) return "Χ" + (n === 600 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 500) return "Φ" + (n === 500 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 400) return "Υ" + (n === 400 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 300) return "Τ" + (n === 300 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 200) return "Σ" + (n === 200 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 100) return "Ρ" + (n === 100 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 90) return "Ϟ" + (n === 90 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 80) return "Π" + (n === 80 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 70) return "Ο" + (n === 70 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 60) return "Ξ" + (n === 60 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 50) return "Ν" + (n === 50 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 40) return "Μ" + (n === 40 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 30) return "Λ" + (n === 30 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 20) return "Κ" + (n === 20 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 10) return "Ι" + (n === 10 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 9) return "Θ";
    if (n >= 8) return "Η";
    if (n >= 7) return "Ζ";
    if (n >= 6) return "Ϝ";
    if (n >= 5) return "Ε";
    if (n >= 4) return "Δ";
    if (n >= 3) return "Γ";
    if (n >= 2) return "Β";
    if (n >= 1) return "Α";
    if (n >= 0) return "𐆊";
};

inter.renderGreekNumeralMinuscules = function(n) {
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e16) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e16)) + "μμμμ" + (n === 1e16 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e16));
    if (n >= 1e12) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e12)) + "μμμ" + (n === 1e12 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e12));
    if (n >= 1e8) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e8)) + "μμ" + (n === 1e8 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e8));
    if (n >= 1e4) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e4)) + "μ" + (n === 1e4 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e4));
    if (n >= 1e3) return "͵" + this.renderGreekNumeralMinuscules(Math.floor(n / 1e3)) + (n === 1e3 ? "" : this.renderGreekNumeralMinuscules(n % 1e3));
    if (n >= 900) return "ϡ" + (n === 900 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 800) return "ω" + (n === 800 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 700) return "ψ" + (n === 700 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 600) return "χ" + (n === 600 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 500) return "φ" + (n === 500 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 400) return "υ" + (n === 400 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 300) return "τ" + (n === 300 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 200) return "σ" + (n === 200 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 100) return "ρ" + (n === 100 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 90) return "ϟ" + (n === 90 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 80) return "π" + (n === 80 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 70) return "ο" + (n === 70 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 60) return "ξ" + (n === 60 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 50) return "ν" + (n === 50 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 40) return "μ" + (n === 40 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 30) return "λ" + (n === 30 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 20) return "κ" + (n === 20 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 10) return "ι" + (n === 10 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 9) return "θ";
    if (n >= 8) return "η";
    if (n >= 7) return "ζ";
    if (n >= 6) return "ϝ";
    if (n >= 5) return "ε";
    if (n >= 4) return "δ";
    if (n >= 3) return "γ";
    if (n >= 2) return "β";
    if (n >= 1) return "α";
    if (n >= 0) return "𐆊";
};

inter.renderHebrewThousands = function(n) {
    if (n >= 401) return this.renderHebrew(n) + "׳";
    if (n >= 100) return this.renderHebrew(n) + (n === 100 ? "" : "׳");
    if (n >= 10) return this.renderHebrew(n) + (n === 10 ? "" : "׳");
    if (n >= 0) return this.renderHebrew(n);
};

inter.renderHebrew099 = function(n) {
    if (n >= 91) return "צ״" + this.renderHebrewItem(n % 10);
    if (n >= 90) return "״צ";
    if (n >= 81) return "פ״" + this.renderHebrewItem(n % 10);
    if (n >= 80) return "״פ";
    if (n >= 71) return "ע״" + this.renderHebrewItem(n % 10);
    if (n >= 70) return "״ע";
    if (n >= 61) return "ס״" + this.renderHebrewItem(n % 10);
    if (n >= 60) return "״ס";
    if (n >= 51) return "נ״" + this.renderHebrewItem(n % 10);
    if (n >= 50) return "״נ";
    if (n >= 41) return "מ״" + this.renderHebrewItem(n % 10);
    if (n >= 40) return "״מ";
    if (n >= 31) return "ל״" + this.renderHebrewItem(n % 10);
    if (n >= 30) return "״ל";
    if (n >= 21) return "כ״" + this.renderHebrewItem(n % 10);
    if (n >= 20) return "״כ";
    if (n >= 17) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "ט״ז";
    if (n >= 15) return "ט״ו";
    if (n >= 11) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 1) return "״" + this.renderHebrewItem(n);
    if (n >= 0) return "׳";
};

inter.renderHebrewItem = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderHebrewItem(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 2100) return this.renderNumber(n, "#,##0");
    if (n >= 2e3) return "תתתתת" + (n === 2e3 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1900) return "תתתתש" + (n === 1900 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1800) return "תתתתר" + (n === 1800 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1700) return "תתתתק" + (n === 1700 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1600) return "תתתת" + (n === 1600 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1500) return "תתתש" + (n === 1500 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1400) return "תתתר" + (n === 1400 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1300) return "תתתק" + (n === 1300 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1200) return "תתת" + (n === 1200 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1100) return "תתש" + (n === 1100 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1e3) return "תתר" + (n === 1e3 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 900) return "תתק" + (n === 900 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 800) return "תת" + (n === 800 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 745) return "תש" + this.renderHebrewItem(n % 100);
    if (n >= 744) return "תשדמ";
    if (n >= 700) return "תש" + (n === 700 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 699) return "תר" + this.renderHebrewItem(n % 100);
    if (n >= 698) return "תרחצ";
    if (n >= 600) return "תר" + (n === 600 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 500) return "תק" + (n === 500 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 400) return "ת" + (n === 400 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 345) return "ש" + this.renderHebrewItem(n % 100);
    if (n >= 344) return "שדמ";
    if (n >= 305) return "ש" + this.renderHebrewItem(n % 100);
    if (n >= 304) return "דש";
    if (n >= 300) return "ש" + (n === 300 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 299) return "ר" + this.renderHebrewItem(n % 100);
    if (n >= 298) return "רחצ";
    if (n >= 200) return "ר" + (n === 200 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 100) return "ק" + (n === 100 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 90) return "צ" + (n === 90 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 80) return "פ" + (n === 80 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 70) return "ע" + (n === 70 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 60) return "ס" + (n === 60 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 50) return "נ" + (n === 50 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 40) return "מ" + (n === 40 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 30) return "ל" + (n === 30 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 20) return "כ" + (n === 20 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 17) return "י" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "טז";
    if (n >= 15) return "טו";
    if (n >= 10) return "י" + (n === 10 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 9) return "ט";
    if (n >= 8) return "ח";
    if (n >= 7) return "ז";
    if (n >= 6) return "ו";
    if (n >= 5) return "ה";
    if (n >= 4) return "ד";
    if (n >= 3) return "ג";
    if (n >= 2) return "ב";
    if (n >= 1) return "א";
    if (n >= 0) return "״";
};

inter.renderTamilThousands = function(n) {
    if (n >= 1e3) return this.renderTamilThousands(Math.floor(n / 1e3)) + "௲" + (n === 1e3 ? "" : this.renderTamilThousands(n % 1e3));
    if (n >= 0) return this.renderTamil(n);
};

inter.renderEthiopicP = function(n) {
    if (n >= 1e16) return this.renderEthiopicP(Math.floor(n / 1e16)) + "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 1e12) return this.renderEthiopicP(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1e8) return this.renderEthiopicP(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1e4) return this.renderEthiopicP(Math.floor(n / 1e4)) + "፼" + (n === 1e4 ? "" : this.renderEthiopicP(n % 1e4));
    if (n >= 1) return this.renderEthiopic(n);
};

module.exports = inter;