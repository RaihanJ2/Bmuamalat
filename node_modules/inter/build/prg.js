function defaults(targetObj) {
    for (var i = 1; i < arguments.length; i += 1) {
        if (arguments[i] && typeof arguments[i] === "object") {
            for (var propertyName in arguments[i]) {
                if (typeof targetObj[propertyName] === "undefined") {
                    targetObj[propertyName] = arguments[i][propertyName];
                }
            }
        }
    }
    return targetObj;
}

var P = require("./root.js"), inter = defaults({
    renderers: {}
}, P);

var _31lk1 = {
    displayName: "ketw."
}, _31lk2 = {
    all: {
        leap: "{0}bis"
    }
}, _31lk3 = {
    a: "h a – h a",
    h: "h–h a"
}, _31lk4 = {
    displayName: "kerdaszōni"
}, _31lk5 = [ "Before R.O.C.", "R.O.C." ], _31lk6 = {
    a: "h a – h a v",
    h: "h–h a v"
}, _31lk7 = [ "N", "P", "W", "P", "K", "P", "S" ], _31lk8 = {
    displayName: "sawaītis deinā"
}, _31lk9 = {
    d: "MMM d–d",
    M: "MMM d – MMM d"
}, _31lk10 = {
    wide: [ "AH" ],
    abbreviated: [ "AH" ]
}, _31lk11 = {
    H: "HH:mm–HH:mm",
    m: "HH:mm–HH:mm"
}, _31lk12 = [ "1. k.", "2. k.", "3. k.", "4. k." ], _31lk13 = {
    M: "y-MM – y-MM",
    y: "y-MM – y-MM"
}, _31lk14 = {
    M: "U MMM–MMM",
    y: "U MMM – U MMM"
}, _31lk15 = {
    H: "HH:mm–HH:mm v",
    m: "HH:mm–HH:mm v"
}, _31lk16 = {
    d: "MM-dd – MM-dd",
    M: "MM-dd – MM-dd"
}, _31lk17 = {
    M: "G y MMM–MMM",
    y: "G y MMM – y MMM"
}, _31lk18 = {
    am: "ankstāinan",
    pm: "pa pussideinan"
}, _31lk19 = {
    M: "U MMMM–MMMM",
    y: "U MMMM – U MMMM"
}, _31lk20 = {
    M: "G y MMMM–MMMM",
    y: "G y MMMM – y MMMM"
}, _31lk21 = [ "nad", "pan", "wis", "pus", "ket", "pēn", "sab" ], _31lk22 = {
    "0": "šandēinan",
    "1": "ankstāinan",
    "-1": "bītan"
}, _31lk23 = {
    displayName: "ankstāinan / pa pussideinan"
}, _31lk24 = {
    M: "GGGGG y-MM – y-MM",
    y: "GGGGG y-MM – y-MM"
}, _31lk25 = [ "1. ketw.", "2. ketw.", "3. ketw.", "4. ketw." ], _31lk26 = {
    "0": "this week",
    "1": "next week",
    "-1": "last week"
}, _31lk27 = {
    future: {
        other: "+{0} y"
    },
    past: {
        other: "-{0} y"
    }
}, _31lk28 = {
    future: {
        other: "+{0} Q"
    },
    past: {
        other: "-{0} Q"
    }
}, _31lk29 = {
    future: {
        other: "+{0} m"
    },
    past: {
        other: "-{0} m"
    }
}, _31lk30 = {
    future: {
        other: "+{0} w"
    },
    past: {
        other: "-{0} w"
    }
}, _31lk31 = {
    future: {
        other: "+{0} d"
    },
    past: {
        other: "-{0} d"
    }
}, _31lk32 = {
    future: {
        other: "+{0} h"
    },
    past: {
        other: "-{0} h"
    }
}, _31lk33 = {
    future: {
        other: "+{0} s"
    },
    past: {
        other: "-{0} s"
    }
}, _31lk34 = {
    d: "MM-dd, E – MM-dd, E",
    M: "MM-dd, E – MM-dd, E"
}, _31lk35 = {
    d: "MMM d, E – MMM d, E",
    M: "MMM d, E – MMM d, E"
}, _31lk36 = [ "R", "W", "P", "S", "Z", "S", "L", "D", "S", "S", "L", "S" ], _31lk37 = {
    "0": "this month",
    "1": "next month",
    "-1": "last month"
}, _31lk38 = {
    wide: [ "ERA0", "ERA1" ],
    abbreviated: [ "ERA0", "ERA1" ]
}, _31lk39 = {
    id: "001",
    displayName: "swītai",
    hasTimeZones: false
}, _31lk40 = {
    future: {
        other: "+{0} min"
    },
    past: {
        other: "-{0} min"
    }
}, _31lk41 = {
    "0": "this Sunday",
    "1": "next Sunday",
    "-1": "last Sunday"
}, _31lk42 = {
    "0": "this Monday",
    "1": "next Monday",
    "-1": "last Monday"
}, _31lk43 = {
    "0": "this Friday",
    "1": "next Friday",
    "-1": "last Friday"
}, _31lk44 = [ "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" ], _31lk45 = {
    a: "h:mm a – h:mm a",
    h: "h:mm–h:mm a",
    m: "h:mm–h:mm a"
}, _31lk46 = {
    "0": "this year",
    "1": "next year",
    "-1": "panzdauman mettan"
}, _31lk47 = {
    "0": "this quarter",
    "1": "next quarter",
    "-1": "last quarter"
}, _31lk48 = {
    "0": "this Tuesday",
    "1": "next Tuesday",
    "-1": "last Tuesday"
}, _31lk49 = [ "1. ketwirts", "2. ketwirts", "3. ketwirts", "4. ketwirts" ], _31lk50 = {
    d: "U MMM d–d",
    M: "U MMM d – MMM d",
    y: "U MMM d – U MMM d"
}, _31lk51 = [ "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13" ], _31lk52 = {
    "0": "this Thursday",
    "1": "next Thursday",
    "-1": "last Thursday"
}, _31lk53 = {
    "0": "this Saturday",
    "1": "next Saturday",
    "-1": "last Saturday"
}, _31lk54 = {
    a: "h:mm a – h:mm a v",
    h: "h:mm–h:mm a v",
    m: "h:mm–h:mm a v"
}, _31lk55 = {
    "0": "this Wednesday",
    "1": "next Wednesday",
    "-1": "last Wednesday"
}, _31lk56 = {
    id: "CN",
    displayName: "Kīna",
    regionId: "030",
    hasTimeZones: true
}, _31lk57 = {
    id: "CU",
    displayName: "Kūba",
    regionId: "029",
    hasTimeZones: true
}, _31lk58 = {
    id: "PE",
    displayName: "Perū",
    regionId: "005",
    hasTimeZones: true
}, _31lk59 = {
    id: "PL",
    displayName: "Pōli",
    regionId: "151",
    hasTimeZones: true
}, _31lk60 = {
    id: "CL",
    displayName: "Čīli",
    regionId: "005",
    hasTimeZones: true
}, _31lk61 = {
    id: "HT",
    displayName: "Haīti",
    regionId: "029",
    hasTimeZones: true
}, _31lk62 = {
    id: "MT",
    displayName: "Mālta",
    regionId: "039",
    hasTimeZones: true
}, _31lk63 = {
    id: "PW",
    displayName: "Palau",
    regionId: "057",
    hasTimeZones: true
}, _31lk64 = {
    id: "RU",
    displayName: "Russi",
    regionId: "151",
    hasTimeZones: true
}, _31lk65 = {
    d: "G y MMM d–d",
    M: "G y MMM d – MMM d",
    y: "G y MMM d – y MMM d"
}, _31lk66 = {
    relative: _31lk41
}, _31lk67 = {
    relative: _31lk42
}, _31lk68 = {
    relative: _31lk43
}, _31lk69 = {
    id: "AD",
    displayName: "Andōra",
    regionId: "039",
    hasTimeZones: true
}, _31lk70 = {
    id: "BZ",
    displayName: "Belīzi",
    regionId: "013",
    hasTimeZones: true
}, _31lk71 = {
    id: "GY",
    displayName: "Gujāna",
    regionId: "005",
    hasTimeZones: true
}, _31lk72 = {
    id: "BY",
    displayName: "Krēiwa",
    regionId: "151",
    hasTimeZones: true
}, _31lk73 = {
    id: "CA",
    displayName: "Kānada",
    regionId: "021",
    hasTimeZones: true
}, _31lk74 = {
    id: "MC",
    displayName: "Mōnakō",
    regionId: "155",
    hasTimeZones: true
}, _31lk75 = {
    id: "PA",
    displayName: "Panāma",
    regionId: "013",
    hasTimeZones: true
}, _31lk76 = {
    id: "FI",
    displayName: "Sōmija",
    regionId: "154",
    hasTimeZones: true
}, _31lk77 = {
    id: "HU",
    displayName: "Ungrai",
    regionId: "151",
    hasTimeZones: true
}, _31lk78 = {
    id: "IN",
    displayName: "Īndija",
    regionId: "034",
    hasTimeZones: true
}, _31lk79 = {
    id: "CH",
    displayName: "Šwēici",
    regionId: "155",
    hasTimeZones: true
}, _31lk80 = {
    id: "BS",
    displayName: "Bahāmai",
    regionId: "029",
    hasTimeZones: true
}, _31lk81 = {
    id: "BE",
    displayName: "Belgija",
    regionId: "155",
    hasTimeZones: true
}, _31lk82 = {
    id: "GD",
    displayName: "Grenāda",
    regionId: "029",
    hasTimeZones: true
}, _31lk83 = {
    id: "JM",
    displayName: "Jamāika",
    regionId: "029",
    hasTimeZones: true
}, _31lk84 = {
    id: "XK",
    displayName: "Kōsawa",
    regionId: "039",
    hasTimeZones: false
}, _31lk85 = {
    id: "LV",
    displayName: "Lattawa",
    regionId: "154",
    hasTimeZones: true
}, _31lk86 = {
    id: "LT",
    displayName: "Laītawa",
    regionId: "154",
    hasTimeZones: true
}, _31lk87 = {
    id: "MX",
    displayName: "Meksiku",
    regionId: "013",
    hasTimeZones: true
}, _31lk88 = {
    id: "RS",
    displayName: "Serbija",
    regionId: "039",
    hasTimeZones: true
}, _31lk89 = {
    id: "TW",
    displayName: "Taiwāns",
    regionId: "030",
    hasTimeZones: true
}, _31lk90 = {
    id: "TR",
    displayName: "Turkāja",
    regionId: "145",
    hasTimeZones: true
}, _31lk91 = {
    id: "UA",
    displayName: "Ukrāini",
    regionId: "151",
    hasTimeZones: true
}, _31lk92 = {
    id: "IT",
    displayName: "Wālkija",
    regionId: "039",
    hasTimeZones: true
}, _31lk93 = {
    id: "CZ",
    displayName: "Čekkija",
    regionId: "151",
    hasTimeZones: true
}, _31lk94 = {
    id: "ES",
    displayName: "Špānija",
    regionId: "039",
    hasTimeZones: true
}, _31lk95 = {
    id: "SE",
    displayName: "Šwēdija",
    regionId: "154",
    hasTimeZones: true
}, _31lk96 = {
    id: "AL",
    displayName: "Albānija",
    regionId: "039",
    hasTimeZones: true
}, _31lk97 = {
    id: "BB",
    displayName: "Barbādas",
    regionId: "029",
    hasTimeZones: true
}, _31lk98 = {
    id: "BO",
    displayName: "Bōliwija",
    regionId: "005",
    hasTimeZones: true
}, _31lk99 = {
    id: "DM",
    displayName: "Dōminika",
    regionId: "029",
    hasTimeZones: true
}, _31lk100 = {
    id: "EC",
    displayName: "Ekwadōrs",
    regionId: "005",
    hasTimeZones: true
}, _31lk101 = {
    id: "FO",
    displayName: "Farēirai",
    regionId: "154",
    hasTimeZones: true
}, _31lk102 = {
    id: "HN",
    displayName: "Hōnduras",
    regionId: "013",
    hasTimeZones: true
}, _31lk103 = {
    id: "JP",
    displayName: "Japānija",
    regionId: "030",
    hasTimeZones: true
}, _31lk104 = {
    id: "HR",
    displayName: "Kruātija",
    regionId: "039",
    hasTimeZones: true
}, _31lk105 = {
    id: "NO",
    displayName: "Nōrwigai",
    regionId: "154",
    hasTimeZones: true
}, _31lk106 = {
    id: "RO",
    displayName: "Rumānija",
    regionId: "151",
    hasTimeZones: true
}, _31lk107 = {
    id: "SK",
    displayName: "Slōwakei",
    regionId: "151",
    hasTimeZones: true
}, _31lk108 = {
    id: "SR",
    displayName: "Surināms",
    regionId: "005",
    hasTimeZones: true
}, _31lk109 = {
    id: "UY",
    displayName: "Urugwājs",
    regionId: "005",
    hasTimeZones: true
}, _31lk110 = {
    id: "IS",
    displayName: "Īslandan",
    regionId: "154",
    hasTimeZones: true
}, _31lk111 = {
    relative: _31lk48
}, _31lk112 = {
    id: "BR",
    displayName: "Brazīlija",
    regionId: "005",
    hasTimeZones: true
}, _31lk113 = {
    id: "BG",
    displayName: "Bulgārija",
    regionId: "151",
    hasTimeZones: true
}, _31lk114 = {
    id: "GT",
    displayName: "Gwatemāla",
    regionId: "013",
    hasTimeZones: true
}, _31lk115 = {
    id: "CO",
    displayName: "Kōlumbija",
    regionId: "005",
    hasTimeZones: true
}, _31lk116 = {
    id: "MD",
    displayName: "Mōldawija",
    regionId: "151",
    hasTimeZones: true
}, _31lk117 = {
    id: "NI",
    displayName: "Nikarāgwa",
    regionId: "013",
    hasTimeZones: true
}, _31lk118 = {
    id: "PY",
    displayName: "Paragwājs",
    regionId: "005",
    hasTimeZones: true
}, _31lk119 = {
    id: "FR",
    displayName: "Prankrīki",
    regionId: "155",
    hasTimeZones: true
}, _31lk120 = {
    id: "SI",
    displayName: "Slōwenija",
    regionId: "039",
    hasTimeZones: true
}, _31lk121 = {
    id: "TH",
    displayName: "Tāilandan",
    regionId: "035",
    hasTimeZones: true
}, _31lk122 = {
    id: "VE",
    displayName: "Venezuēla",
    regionId: "005",
    hasTimeZones: true
}, _31lk123 = {
    d: "y-MM-dd – y-MM-dd",
    M: "y-MM-dd – y-MM-dd",
    y: "y-MM-dd – y-MM-dd"
}, _31lk124 = {
    id: "AU",
    displayName: "Austrālija",
    regionId: "053",
    hasTimeZones: true
}, _31lk125 = {
    id: "CR",
    displayName: "Costa Rica",
    regionId: "013",
    hasTimeZones: true
}, _31lk126 = {
    id: "DK",
    displayName: "Dānanmarki",
    regionId: "154",
    hasTimeZones: true
}, _31lk127 = {
    id: "EE",
    displayName: "Estantauta",
    regionId: "154",
    hasTimeZones: true
}, _31lk128 = {
    id: "GI",
    displayName: "Gibrāltars",
    regionId: "039",
    hasTimeZones: true
}, _31lk129 = {
    id: "GL",
    displayName: "Grēnlandan",
    regionId: "021",
    hasTimeZones: true
}, _31lk130 = {
    id: "ID",
    displayName: "Indōnezija",
    regionId: "035",
    hasTimeZones: true
}, _31lk131 = {
    id: "MK",
    displayName: "Macedōnija",
    regionId: "039",
    hasTimeZones: true
}, _31lk132 = {
    id: "PT",
    displayName: "Pōrtugalin",
    regionId: "039",
    hasTimeZones: true
}, _31lk133 = {
    id: "SM",
    displayName: "San Marinō",
    regionId: "039",
    hasTimeZones: true
}, _31lk134 = {
    id: "AT",
    displayName: "Āustrarīki",
    regionId: "155",
    hasTimeZones: true
}, _31lk135 = {
    id: "AR",
    displayName: "Argentīnija",
    regionId: "005",
    hasTimeZones: true
}, _31lk136 = {
    id: "GR",
    displayName: "Grēkantauta",
    regionId: "039",
    hasTimeZones: true
}, _31lk137 = {
    id: "DE",
    displayName: "Mikskātauta",
    regionId: "155",
    hasTimeZones: true
}, _31lk138 = {
    id: "ME",
    displayName: "Mōntenegran",
    regionId: "039",
    hasTimeZones: true
}, _31lk139 = {
    relative: _31lk52
}, _31lk140 = {
    relative: _31lk53
}, _31lk141 = {
    id: "SV",
    displayName: "El Salvadōrs",
    regionId: "013",
    hasTimeZones: true
}, _31lk142 = {
    id: "LU",
    displayName: "Luksemburgan",
    regionId: "155",
    hasTimeZones: true
}, _31lk143 = {
    id: "NZ",
    displayName: "Nawazēlandan",
    regionId: "053",
    hasTimeZones: true
}, _31lk144 = {
    id: "GB",
    displayName: "Debabritānija",
    regionId: "154",
    hasTimeZones: true
}, _31lk145 = {
    id: "SA",
    displayName: "Saūdi Arābija",
    regionId: "145",
    hasTimeZones: true
}, _31lk146 = {
    id: "142",
    displayName: "Āzija",
    hasTimeZones: false,
    parentRegionId: "001"
}, _31lk147 = {
    abbreviated: {
        leap: "{0}bis"
    },
    narrow: {
        leap: "{0}b"
    },
    wide: {
        leap: "{0}bis"
    }
}, _31lk148 = {
    id: "002",
    displayName: "Afrika",
    hasTimeZones: false,
    parentRegionId: "001"
}, _31lk149 = {
    id: "150",
    displayName: "Eurōpa",
    hasTimeZones: false,
    parentRegionId: "001"
}, _31lk150 = {
    id: "LI",
    displayName: "Līchtenšteinan",
    regionId: "155",
    hasTimeZones: true
}, _31lk151 = {
    relative: _31lk55
}, _31lk152 = {
    id: "019",
    displayName: "Amērika",
    hasTimeZones: false,
    parentRegionId: "001"
}, _31lk153 = [ "rag", "was", "pūl", "sak", "zal", "sīm", "līp", "dag", "sil", "spa", "lap", "sal" ], _31lk154 = [ "M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12" ], _31lk155 = {
    id: "ZA",
    displayName: "Pussideinanafrika",
    regionId: "018",
    hasTimeZones: true
}, _31lk156 = {
    id: "KR",
    displayName: "Pussideinankōreja",
    regionId: "030",
    hasTimeZones: true
}, _31lk157 = {
    id: "AG",
    displayName: "Antīgwa be Barbūda",
    regionId: "029",
    hasTimeZones: true
}, _31lk158 = {
    id: "GF",
    displayName: "Prancōziska Gujāna",
    regionId: "005",
    hasTimeZones: true
}, _31lk159 = [ undefined, "zi", "chou", "yin", "mao", "chen", "si", "wu", "wei", "shen", "you", "xu" ], _31lk160 = {
    id: "DO",
    displayName: "Dōminikas Republīki",
    regionId: "029",
    hasTimeZones: true
}, _31lk161 = {
    id: "US",
    displayName: "Peraīnintas Wālstis",
    regionId: "021",
    hasTimeZones: true
}, _31lk162 = {
    id: "TT",
    displayName: "Trinidāds be Tobagō",
    regionId: "029",
    hasTimeZones: true
}, _31lk163 = {
    id: "BA",
    displayName: "Bōsnija be Ercegōwina",
    regionId: "039",
    hasTimeZones: true
}, _31lk164 = {
    abbreviated: {
        am: "AM",
        pm: "PM"
    },
    narrow: {
        am: "AM",
        pm: "PM"
    },
    wide: {
        am: "AM",
        pm: "PM"
    }
}, _31lk165 = {
    d: "U MMM d, E – MMM d, E",
    M: "U MMM d, E – MMM d, E",
    y: "U MMM d, E – U MMM d, E"
}, _31lk166 = {
    displayName: "stūndi",
    relativeTime: _31lk32
}, _31lk167 = {
    id: "005",
    displayName: "Pussideinanamērika",
    hasTimeZones: false,
    parentRegionId: "019"
}, _31lk168 = [ "nadīli", "panadīli", "wisasīdis", "pussisawaiti", "ketwirtiks", "pēntniks", "sabattika" ], _31lk169 = {
    d: "GGGGG y-MM-dd – y-MM-dd",
    M: "GGGGG y-MM-dd – y-MM-dd",
    y: "GGGGG y-MM-dd – y-MM-dd"
}, _31lk170 = {
    d: "y-MM-dd, E – y-MM-dd, E",
    M: "y-MM-dd, E – y-MM-dd, E",
    y: "y-MM-dd, E – y-MM-dd, E"
}, _31lk171 = {
    d: "G y MMM d, E – MMM d, E",
    M: "G y MMM d, E – MMM d, E",
    y: "G y MMM d, E – y MMM d, E"
}, _31lk172 = {
    displayName: "minūti",
    relativeTime: _31lk40
}, _31lk173 = {
    abbreviated: {
        am: "AM",
        pm: "PM"
    },
    narrow: {
        am: "AM",
        pm: "PM"
    },
    wide: _31lk18
}, _31lk174 = {
    displayName: "sekūndi",
    relative: [ "now" ],
    relativeTime: _31lk33
}, _31lk175 = {
    d: "GGGGG y-MM-dd, E – y-MM-dd, E",
    M: "GGGGG y-MM-dd, E – y-MM-dd, E",
    y: "GGGGG y-MM-dd, E – y-MM-dd, E"
}, _31lk176 = [ "Muh.", "Saf.", "Rab. I", "Rab. II", "Jum. I", "Jum. II", "Raj.", "Sha.", "Ram.", "Shaw.", "Dhuʻl-Q.", "Dhuʻl-H." ], _31lk177 = [ "Tishri", "Heshvan", "Kislev", "Tevet", "Shevat", "Adar I", "Adar", "Nisan", "Iyar", "Sivan", "Tamuz", "Av", "Elul" ], _31lk178 = [ "Farvardin", "Ordibehesht", "Khordad", "Tir", "Mordad", "Shahrivar", "Mehr", "Aban", "Azar", "Dey", "Bahman", "Esfand" ], _31lk179 = [ "Tout", "Baba", "Hator", "Kiahk", "Toba", "Amshir", "Baramhat", "Baramouda", "Bashans", "Paona", "Epep", "Mesra", "Nasie" ], _31lk180 = [ "rags", "wassarins", "pūlis", "sakkis", "zallaws", "sīmenis", "līpa", "daggis", "sillins", "spallins", "lapkrūtis", "sallaws" ], _31lk181 = [ "Meskerem", "Tekemt", "Hedar", "Tahsas", "Ter", "Yekatit", "Megabit", "Miazia", "Genbot", "Sene", "Hamle", "Nehasse", "Pagumen" ], _31lk182 = [ "Chaitra", "Vaisakha", "Jyaistha", "Asadha", "Sravana", "Bhadra", "Asvina", "Kartika", "Agrahayana", "Pausa", "Magha", "Phalguna" ], _31lk183 = [ "Muharram", "Safar", "Rabiʻ I", "Rabiʻ II", "Jumada I", "Jumada II", "Rajab", "Shaʻban", "Ramadan", "Shawwal", "Dhuʻl-Qiʻdah", "Dhuʻl-Hijjah" ], _31lk184 = {
    abbreviated: _31lk12,
    narrow: [ "1", "2", "3", "4" ],
    wide: _31lk49
}, _31lk185 = {
    displayName: "deinā",
    relative: _31lk22,
    relativeTime: _31lk31
}, _31lk186 = {
    displayName: "sawaīti",
    relative: _31lk26,
    relativeTime: _31lk30
}, _31lk187 = {
    displayName: "mīnss",
    relative: _31lk37,
    relativeTime: _31lk29
}, _31lk188 = {
    abbreviated: _31lk25,
    narrow: [ "1", "2", "3", "4" ],
    wide: _31lk49
}, _31lk189 = {
    displayName: "mettan",
    relative: _31lk46,
    relativeTime: _31lk27
}, _31lk190 = {
    displayName: "ketwirts",
    relative: _31lk47,
    relativeTime: _31lk28
}, _31lk191 = {
    decimal: ",",
    group: " ",
    percentSign: "%",
    plusSign: "+",
    minusSign: "-",
    list: ";",
    exponential: "E",
    superscriptingExponent: "×",
    perMille: "‰",
    infinity: "∞",
    nan: "NaN",
    timeSeparator: ":"
}, _31lk192 = {
    decimal: ",",
    group: " ",
    percentSign: "%",
    plusSign: "+",
    minusSign: "-",
    list: "؛",
    exponential: "اس",
    superscriptingExponent: "×",
    perMille: "؉",
    infinity: "∞",
    nan: "NaN",
    timeSeparator: ":"
}, _31lk193 = {
    symbols: _31lk192
}, _31lk194 = {
    format: _31lk147,
    numeric: _31lk2,
    standAlone: _31lk147
}, _31lk195 = {
    format: _31lk173,
    standAlone: _31lk164
}, _31lk196 = {
    symbols: _31lk192,
    digits: "renderSpelloutCardinal"
}, _31lk197 = {
    "1000": {
        other: "0K"
    },
    "10000": {
        other: "00K"
    },
    "100000": {
        other: "000K"
    },
    "1000000": {
        other: "0M"
    },
    "10000000": {
        other: "00M"
    },
    "100000000": {
        other: "000M"
    },
    "1000000000": {
        other: "0G"
    },
    "10000000000": {
        other: "00G"
    },
    "100000000000": {
        other: "000G"
    },
    "1000000000000": {
        other: "0T"
    },
    "10000000000000": {
        other: "00T"
    },
    "100000000000000": {
        other: "000T"
    }
}, _31lk198 = {
    symbols: _31lk192,
    digits: "renderSpelloutCardinalFinancial"
}, _31lk199 = {
    abbreviated: _31lk154,
    narrow: _31lk44,
    wide: _31lk154
}, _31lk200 = {
    abbreviated: _31lk21,
    narrow: _31lk7,
    wide: _31lk168,
    "short": _31lk21
}, _31lk201 = {
    "1000": {
        other: "¤ 0K"
    },
    "10000": {
        other: "¤ 00K"
    },
    "100000": {
        other: "¤ 000K"
    },
    "1000000": {
        other: "¤ 0M"
    },
    "10000000": {
        other: "¤ 00M"
    },
    "100000000": {
        other: "¤ 000M"
    },
    "1000000000": {
        other: "¤ 0G"
    },
    "10000000000": {
        other: "¤ 00G"
    },
    "100000000000": {
        other: "¤ 000G"
    },
    "1000000000000": {
        other: "¤ 0T"
    },
    "10000000000000": {
        other: "¤ 00T"
    },
    "100000000000000": {
        other: "¤ 000T"
    }
}, _31lk202 = {
    abbreviated: _31lk159,
    narrow: _31lk159,
    wide: _31lk159
}, _31lk203 = {
    format: _31lk202
}, _31lk204 = {
    abbreviated: _31lk153,
    narrow: _31lk36,
    wide: _31lk180
}, _31lk205 = {
    abbreviated: _31lk177,
    narrow: _31lk51,
    wide: _31lk177
}, _31lk206 = {
    abbreviated: _31lk178,
    narrow: _31lk44,
    wide: _31lk178
}, _31lk207 = {
    format: _31lk184,
    standAlone: _31lk188
}, _31lk208 = {
    abbreviated: _31lk179,
    narrow: _31lk51,
    wide: _31lk179
}, _31lk209 = {
    abbreviated: _31lk176,
    narrow: _31lk44,
    wide: _31lk183
}, _31lk210 = {
    abbreviated: _31lk181,
    narrow: _31lk51,
    wide: _31lk181
}, _31lk211 = {
    abbreviated: _31lk182,
    narrow: _31lk44,
    wide: _31lk182
}, _31lk212 = {
    fullDate: "r(U) MMMM d, EEEE",
    longDate: "r(U) MMMM d",
    mediumDate: "r MMM d",
    shortDate: "r-MM-dd",
    fullTime: "HH:mm:ss zzzz",
    longTime: "HH:mm:ss z",
    mediumTime: "HH:mm:ss",
    shortTime: "HH:mm",
    shortDateTime: "r-MM-dd HH:mm",
    mediumDateTime: "r MMM d HH:mm:ss",
    longDateTime: "r(U) MMMM d HH:mm:ss z",
    fullDateTime: "r(U) MMMM d, EEEE HH:mm:ss zzzz"
}, _31lk213 = {
    fullDate: "EEEE, y 'mettas' d. MMMM G",
    longDate: "y 'mettas' d. MMMM G",
    mediumDate: "dd.MM 'st'. y G",
    shortDate: "dd.MM.y GGGGG",
    fullTime: "HH:mm:ss zzzz",
    longTime: "HH:mm:ss z",
    mediumTime: "HH:mm:ss",
    shortTime: "HH:mm",
    shortDateTime: "dd.MM.y GGGGG HH:mm",
    mediumDateTime: "dd.MM 'st'. y G HH:mm:ss",
    longDateTime: "y 'mettas' d. MMMM G HH:mm:ss z",
    fullDateTime: "EEEE, y 'mettas' d. MMMM G HH:mm:ss zzzz"
}, _31lk214 = {
    basic: _31lk213,
    cldr: P.calendars.buddhist.dateFormats
}, _31lk215 = {
    format: _31lk199,
    standAlone: _31lk199
}, _31lk216 = {
    "long": _31lk197,
    "short": _31lk197,
    "default": "#,##0.###"
}, _31lk217 = {
    format: _31lk200,
    standAlone: _31lk200
}, _31lk218 = {
    d: "d",
    E: "ccc",
    Ed: "d, E",
    Gy: "r U",
    GyMMM: "r(U) MMM",
    GyMMMd: "r MMM d",
    GyMMMEd: "r(U) MMM d, E",
    h: "h a",
    H: "HH",
    hm: "h:mm a",
    Hm: "HH:mm",
    hms: "h:mm:ss a",
    Hms: "HH:mm:ss",
    M: "L",
    Md: "MM-dd",
    MEd: "MM-dd, E",
    MMM: "LLL",
    MMMd: "MMM d",
    MMMEd: "MMM d, E",
    MMMMd: "MMMM d",
    ms: "mm:ss",
    UM: "U MM",
    UMd: "U MM-d",
    UMMM: "U MMM",
    UMMMd: "U MMM d",
    y: "r(U)",
    yMd: "r-MM-dd",
    yyyy: "r(U)",
    yyyyM: "r-MM",
    yyyyMd: "r-MM-dd",
    yyyyMEd: "r-MM-dd, E",
    yyyyMMM: "r(U) MMM",
    yyyyMMMd: "r MMM d",
    yyyyMMMEd: "r(U) MMM d, E",
    yyyyMMMM: "r(U) MMMM",
    yyyyQQQ: "r(U) QQQ",
    yyyyQQQQ: "r(U) QQQQ"
}, _31lk219 = {
    format: _31lk204,
    standAlone: _31lk204
}, _31lk220 = {
    currencyMatch: /[^\u0024+<->\u005E`\u007C~¢-¦¨©¬®-±´¸×÷˂-˅˒-˟˥-˫˭˯-˿͵΄΅϶҂֏؆-؈؋؎؏۞۩۽۾߶৲৳৺৻૱୰௳-௺౿൹฿༁-༃༓༕-༗༚-༟༴༶༸྾-࿅࿇-࿌࿎࿏࿕-࿘႞႟᎐-᎙៛᥀᧞-᧿᭡-᭪᭴-᭼᾽᾿-῁῍-῏῝-῟῭-`´῾⁄⁒⁺-⁼₊-₌₠-₹℀℁℃-℆℈℉℔№-℘℞-℣℥℧℩℮℺℻⅀-⅄⅊-⅍⅏←-⌨⌫-⏳␀-␦⑀-⑊⒜-ⓩ─-⛿✁-❧➔-⟄⟇-⟥⟰-⦂⦙-⧗⧜-⧻⧾-⭌⭐-⭙⳥-⳪⺀-⺙⺛-⻳⼀-⿕⿰-⿻〄〒〓〠〶〷〾〿゛゜㆐㆑㆖-㆟㇀-㇣㈀-㈞㈪-㉇㉐㉠-㉿㊊-㊰㋀-㋾㌀-㏿䷀-䷿꒐-꓆꜀-꜖꜠꜡꞉꞊꠨-꠫꠶-꠹꩷-꩹﬩﮲-﯁﷼﷽﹢﹤-﹦﹩＄＋＜-＞＾｀｜～￠-￦￨-￮￼�]/,
    surroundingMatch: /[0-9²³¹¼-¾٠-٩۰-۹߀-߉०-९০-৯৴-৹੦-੯૦-૯୦-୯୲-୷௦-௲౦-౯౸-౾೦-೯൦-൵๐-๙໐-໙༠-༳၀-၉႐-႙፩-፼ᛮ-ᛰ០-៩៰-៹᠐-᠙᥆-᥏᧐-᧚᪀-᪉᪐-᪙᭐-᭙᮰-᮹᱀-᱉᱐-᱙⁰⁴-⁹₀-₉⅐-ↂↅ-↉①-⒛⓪-⓿❶-➓⳽〇〡-〩〸-〺㆒-㆕㈠-㈩㉈-㉏㉑-㉟㊀-㊉㊱-㊿꘠-꘩ꛦ-ꛯ꠰-꠵꣐-꣙꤀-꤉꧐-꧙꩐-꩙꯰-꯹０-９]/,
    insertBetween: " "
}, _31lk221 = [ undefined, "jia-zi", "yi-chou", "bing-yin", "ding-mao", "wu-chen", "ji-si", "geng-wu", "xin-wei", "ren-shen", "gui-you", "jia-xu", "yi-hai", "bing-zi", "ding-chou", "wu-yin", "ji-mao", "geng-chen", "xin-si", "ren-wu", "gui-wei", "jia-shen", "yi-you", "bing-xu", "ding-hai", "wu-zi", "ji-chou", "geng-yin", "xin-mao", "ren-chen", "gui-si", "jia-wu", "yi-wei", "bing-shen", "ding-you", "wu-xu", "ji-hai", "geng-zi", "xin-chou", "ren-yin", "gui-mao", "jia-chen", "yi-si", "bing-wu", "ding-wei", "wu-shen", "ji-you", "geng-xu", "xin-hai", "ren-zi", "gui-chou", "jia-yin", "yi-mao", "bing-chen", "ding-si", "wu-wu", "ji-wei", "geng-shen", "xin-you", "ren-xu" ], _31lk222 = {
    format: _31lk209,
    standAlone: _31lk209
}, _31lk223 = {
    basic: _31lk212,
    cldr: _31lk218
}, _31lk224 = {
    d: {
        d: "d–d"
    },
    h: _31lk3,
    H: {
        H: "HH–HH"
    },
    hm: _31lk45,
    Hm: _31lk11,
    hmv: _31lk54,
    Hmv: _31lk15,
    hv: _31lk6,
    Hv: {
        H: "HH–HH v"
    },
    M: {
        M: "MM–MM"
    },
    Md: _31lk16,
    MEd: _31lk34,
    MMM: {
        M: "LLL–LLL"
    },
    MMMd: _31lk9,
    MMMEd: _31lk35,
    y: {
        y: "U–U"
    },
    yM: _31lk13,
    yMd: _31lk123,
    yMEd: _31lk170,
    yMMM: _31lk14,
    yMMMd: _31lk50,
    yMMMEd: _31lk165,
    yMMMM: _31lk19
}, _31lk225 = {
    d: {
        d: "d–d"
    },
    h: _31lk3,
    H: {
        H: "HH–HH"
    },
    hm: _31lk45,
    Hm: _31lk11,
    hmv: _31lk54,
    Hmv: _31lk15,
    hv: _31lk6,
    Hv: {
        H: "HH–HH v"
    },
    M: {
        M: "MM–MM"
    },
    Md: _31lk16,
    MEd: _31lk34,
    MMM: {
        M: "LLL–LLL"
    },
    MMMd: _31lk9,
    MMMEd: _31lk35,
    y: {
        y: "G y–y"
    },
    yM: _31lk24,
    yMd: _31lk169,
    yMEd: _31lk175,
    yMMM: _31lk17,
    yMMMd: _31lk65,
    yMMMEd: _31lk171,
    yMMMM: _31lk20
}, _31lk226 = {
    beforeCurrency: _31lk220,
    afterCurrency: _31lk220
}, _31lk227 = {
    "short": _31lk201,
    "default": "#,##0.00 ¤",
    zero: "{0} {1}",
    one: "{0} {1}",
    other: "{0} {1}",
    currencySpacing: _31lk226
}, _31lk228 = {
    abbreviated: _31lk221,
    narrow: _31lk221,
    wide: _31lk221
}, _31lk229 = {
    format: _31lk228
}, _31lk230 = {
    scientific: {
        "default": "#E0"
    },
    decimal: _31lk216,
    currency: _31lk227,
    percent: {
        "default": "#,##0%"
    }
}, _31lk231 = {
    era: {
        displayName: "ēra"
    },
    year: _31lk189,
    "year-short": {
        displayName: "m."
    },
    "year-narrow": {
        displayName: "m."
    },
    quarter: _31lk190,
    "quarter-short": _31lk1,
    "quarter-narrow": _31lk1,
    month: _31lk187,
    "month-short": {
        displayName: "mī."
    },
    "month-narrow": {
        displayName: "mī."
    },
    week: _31lk186,
    "week-short": {
        displayName: "saw."
    },
    "week-narrow": {
        displayName: "saw."
    },
    day: _31lk185,
    "day-short": {
        displayName: "d."
    },
    "day-narrow": {
        displayName: "d."
    },
    weekday: _31lk8,
    dayperiod: _31lk23,
    hour: _31lk166,
    "hour-short": {
        displayName: "st."
    },
    "hour-narrow": {
        displayName: "st."
    },
    minute: _31lk172,
    "minute-short": {
        displayName: "min."
    },
    "minute-narrow": {
        displayName: "min."
    },
    second: _31lk174,
    "second-short": {
        displayName: "sek."
    },
    "second-narrow": {
        displayName: "sek."
    },
    zone: _31lk4,
    sun: _31lk66,
    mon: _31lk67,
    tue: _31lk111,
    wed: _31lk151,
    thu: _31lk139,
    fri: _31lk68,
    sat: _31lk140
}, _31lk232 = {
    dateFormats: {
        basic: {},
        cldr: {}
    },
    fields: _31lk231
}, _31lk233 = [ "Taika (645–650)", "Hakuchi (650–671)", "Hakuhō (672–686)", "Shuchō (686–701)", "Taihō (701–704)", "Keiun (704–708)", "Wadō (708–715)", "Reiki (715–717)", "Yōrō (717–724)", "Jinki (724–729)", "Tenpyō (729–749)", "Tenpyō-kampō (749-749)", "Tenpyō-shōhō (749-757)", "Tenpyō-hōji (757-765)", "Tenpyō-jingo (765-767)", "Jingo-keiun (767-770)", "Hōki (770–780)", "Ten-ō (781-782)", "Enryaku (782–806)", "Daidō (806–810)", "Kōnin (810–824)", "Tenchō (824–834)", "Jōwa (834–848)", "Kajō (848–851)", "Ninju (851–854)", "Saikō (854–857)", "Ten-an (857-859)", "Jōgan (859–877)", "Gangyō (877–885)", "Ninna (885–889)", "Kanpyō (889–898)", "Shōtai (898–901)", "Engi (901–923)", "Enchō (923–931)", "Jōhei (931–938)", "Tengyō (938–947)", "Tenryaku (947–957)", "Tentoku (957–961)", "Ōwa (961–964)", "Kōhō (964–968)", "Anna (968–970)", "Tenroku (970–973)", "Ten’en (973–976)", "Jōgen (976–978)", "Tengen (978–983)", "Eikan (983–985)", "Kanna (985–987)", "Eien (987–989)", "Eiso (989–990)", "Shōryaku (990–995)", "Chōtoku (995–999)", "Chōhō (999–1004)", "Kankō (1004–1012)", "Chōwa (1012–1017)", "Kannin (1017–1021)", "Jian (1021–1024)", "Manju (1024–1028)", "Chōgen (1028–1037)", "Chōryaku (1037–1040)", "Chōkyū (1040–1044)", "Kantoku (1044–1046)", "Eishō (1046–1053)", "Tengi (1053–1058)", "Kōhei (1058–1065)", "Jiryaku (1065–1069)", "Enkyū (1069–1074)", "Shōho (1074–1077)", "Shōryaku (1077–1081)", "Eihō (1081–1084)", "Ōtoku (1084–1087)", "Kanji (1087–1094)", "Kahō (1094–1096)", "Eichō (1096–1097)", "Jōtoku (1097–1099)", "Kōwa (1099–1104)", "Chōji (1104–1106)", "Kashō (1106–1108)", "Tennin (1108–1110)", "Ten-ei (1110-1113)", "Eikyū (1113–1118)", "Gen’ei (1118–1120)", "Hōan (1120–1124)", "Tenji (1124–1126)", "Daiji (1126–1131)", "Tenshō (1131–1132)", "Chōshō (1132–1135)", "Hōen (1135–1141)", "Eiji (1141–1142)", "Kōji (1142–1144)", "Ten’yō (1144–1145)", "Kyūan (1145–1151)", "Ninpei (1151–1154)", "Kyūju (1154–1156)", "Hōgen (1156–1159)", "Heiji (1159–1160)", "Eiryaku (1160–1161)", "Ōho (1161–1163)", "Chōkan (1163–1165)", "Eiman (1165–1166)", "Nin’an (1166–1169)", "Kaō (1169–1171)", "Shōan (1171–1175)", "Angen (1175–1177)", "Jishō (1177–1181)", "Yōwa (1181–1182)", "Juei (1182–1184)", "Genryaku (1184–1185)", "Bunji (1185–1190)", "Kenkyū (1190–1199)", "Shōji (1199–1201)", "Kennin (1201–1204)", "Genkyū (1204–1206)", "Ken’ei (1206–1207)", "Jōgen (1207–1211)", "Kenryaku (1211–1213)", "Kenpō (1213–1219)", "Jōkyū (1219–1222)", "Jōō (1222–1224)", "Gennin (1224–1225)", "Karoku (1225–1227)", "Antei (1227–1229)", "Kanki (1229–1232)", "Jōei (1232–1233)", "Tenpuku (1233–1234)", "Bunryaku (1234–1235)", "Katei (1235–1238)", "Ryakunin (1238–1239)", "En’ō (1239–1240)", "Ninji (1240–1243)", "Kangen (1243–1247)", "Hōji (1247–1249)", "Kenchō (1249–1256)", "Kōgen (1256–1257)", "Shōka (1257–1259)", "Shōgen (1259–1260)", "Bun’ō (1260–1261)", "Kōchō (1261–1264)", "Bun’ei (1264–1275)", "Kenji (1275–1278)", "Kōan (1278–1288)", "Shōō (1288–1293)", "Einin (1293–1299)", "Shōan (1299–1302)", "Kengen (1302–1303)", "Kagen (1303–1306)", "Tokuji (1306–1308)", "Enkyō (1308–1311)", "Ōchō (1311–1312)", "Shōwa (1312–1317)", "Bunpō (1317–1319)", "Genō (1319–1321)", "Genkō (1321–1324)", "Shōchū (1324–1326)", "Karyaku (1326–1329)", "Gentoku (1329–1331)", "Genkō (1331–1334)", "Kenmu (1334–1336)", "Engen (1336–1340)", "Kōkoku (1340–1346)", "Shōhei (1346–1370)", "Kentoku (1370–1372)", "Bunchū (1372–1375)", "Tenju (1375–1379)", "Kōryaku (1379–1381)", "Kōwa (1381–1384)", "Genchū (1384–1392)", "Meitoku (1384–1387)", "Kakei (1387–1389)", "Kōō (1389–1390)", "Meitoku (1390–1394)", "Ōei (1394–1428)", "Shōchō (1428–1429)", "Eikyō (1429–1441)", "Kakitsu (1441–1444)", "Bun’an (1444–1449)", "Hōtoku (1449–1452)", "Kyōtoku (1452–1455)", "Kōshō (1455–1457)", "Chōroku (1457–1460)", "Kanshō (1460–1466)", "Bunshō (1466–1467)", "Ōnin (1467–1469)", "Bunmei (1469–1487)", "Chōkyō (1487–1489)", "Entoku (1489–1492)", "Meiō (1492–1501)", "Bunki (1501–1504)", "Eishō (1504–1521)", "Taiei (1521–1528)", "Kyōroku (1528–1532)", "Tenbun (1532–1555)", "Kōji (1555–1558)", "Eiroku (1558–1570)", "Genki (1570–1573)", "Tenshō (1573–1592)", "Bunroku (1592–1596)", "Keichō (1596–1615)", "Genna (1615–1624)", "Kan’ei (1624–1644)", "Shōho (1644–1648)", "Keian (1648–1652)", "Jōō (1652–1655)", "Meireki (1655–1658)", "Manji (1658–1661)", "Kanbun (1661–1673)", "Enpō (1673–1681)", "Tenna (1681–1684)", "Jōkyō (1684–1688)", "Genroku (1688–1704)", "Hōei (1704–1711)", "Shōtoku (1711–1716)", "Kyōhō (1716–1736)", "Genbun (1736–1741)", "Kanpō (1741–1744)", "Enkyō (1744–1748)", "Kan’en (1748–1751)", "Hōreki (1751–1764)", "Meiwa (1764–1772)", "An’ei (1772–1781)", "Tenmei (1781–1789)", "Kansei (1789–1801)", "Kyōwa (1801–1804)", "Bunka (1804–1818)", "Bunsei (1818–1830)", "Tenpō (1830–1844)", "Kōka (1844–1848)", "Kaei (1848–1854)", "Ansei (1854–1860)", "Man’en (1860–1861)", "Bunkyū (1861–1864)", "Genji (1864–1865)", "Keiō (1865–1868)", "Meiji", "Taishō", "Shōwa", "Heisei" ], _31lk234 = {
    dateFormats: _31lk214,
    datePartsOrder: "dmy",
    dateIntervalFormats: _31lk225,
    dateIntervalFallbackFormat: "{0} – {1}",
    dayNames: _31lk217,
    dayPeriods: _31lk195,
    monthNames: _31lk222,
    eraNames: _31lk10,
    quarterNames: _31lk207,
    fields: _31lk231
}, _31lk235 = {
    dayParts: _31lk203,
    days: _31lk229,
    months: _31lk229,
    years: _31lk229,
    zodiacs: _31lk203
}, _31lk236 = {
    dateFormats: _31lk223,
    datePartsOrder: "md",
    dateIntervalFormats: _31lk224,
    dateIntervalFallbackFormat: "{0} – {1}",
    dayNames: _31lk217,
    dayPeriods: _31lk195,
    cyclicNames: _31lk235,
    monthNames: _31lk215,
    monthPatterns: _31lk194,
    quarterNames: _31lk207,
    fields: _31lk231
};

inter.id = "prg";

inter.delimiters = {
    quotationStart: "„",
    quotationEnd: "“",
    alternateQuotationStart: "„",
    alternateQuotationEnd: "“"
};

inter.listPatterns = {
    "default": {
        "2": "{0} be {1}",
        start: "{0}, {1}",
        middle: "{0}, {1}",
        end: "{0} be {1}"
    }
};

inter.timeZoneFormats = {
    hour: [ "+HH:mm", "-HH:mm" ],
    gmt: "GMT{0}",
    gmtZero: "GMT",
    region: "Kerdā: {0}",
    fallback: "{1} ({0})",
    regions: {
        daylight: "Daggas kerdā: {0}",
        standard: "Zēimas kerdā: {0}"
    }
};

inter.characters = {
    exemplar: {
        "default": [ "a", "ā", "b", "c", "d", "ḑ", "e", "ē", "f", "g", "ģ", "h", "i", "ī", "j", "k", "ķ", "l", "m", "n", "ņ", "o", "ō", "p", "q", "r", "ŗ", "s", "š", "t", "ț", "u", "ū", "v", "w", "x", "y", "z", "ž" ],
        auxiliary: [ "" ],
        index: [ "A", "Ā", "B", "C", "D", "Ḑ", "E", "Ē", "F", "G", "Ģ", "H", "I", "Ī", "J", "K", "Ķ", "L", "M", "N", "Ņ", "O", "Ō", "P", "Q", "R", "Ŗ", "S", "Š", "T", "Ț", "U", "Ū", "V", "W", "X", "Y", "Z", "Ž" ],
        punctuation: [ "\\-", "‐", "–", "—", ",", ";", "\\:", "!", "?", ".", "…", "“", "„", "(", ")", "\\[", "\\]", "\\{", "\\}" ]
    },
    ellipsis: {
        "final": "{0}…",
        initial: "…{0}",
        medial: "{0}…{1}",
        "word-final": "{0} …",
        "word-initial": "… {0}",
        "word-medial": "{0} … {1}"
    },
    moreInformation: "?"
};

inter.numbers = {
    ahom: {
        symbols: _31lk192,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    arab: {
        symbols: P.numbers.ahom.symbols,
        formats: _31lk230,
        digits: [ "٠", "١", "٢", "٣", "٤", "٥", "٦", "٧", "٨", "٩" ]
    },
    arabext: {
        symbols: {
            decimal: "٫",
            group: "٬",
            list: "؛",
            percentSign: "٪",
            plusSign: "‎+‎",
            minusSign: "‎-‎",
            exponential: "×۱۰^",
            superscriptingExponent: "×",
            perMille: "؉",
            infinity: "∞",
            nan: "NaN",
            timeSeparator: "٫"
        },
        formats: _31lk230,
        digits: [ "۰", "۱", "۲", "۳", "۴", "۵", "۶", "۷", "۸", "۹" ]
    },
    armn: {
        symbols: _31lk192,
        digits: "renderArmenianUpper"
    },
    armnlow: {
        symbols: _31lk192,
        digits: "renderArmenianLower"
    },
    bali: {
        symbols: _31lk191,
        formats: _31lk230,
        digits: [ "᭐", "᭑", "᭒", "᭓", "᭔", "᭕", "᭖", "᭗", "᭘", "᭙" ]
    },
    beng: {
        symbols: _31lk191,
        formats: _31lk230,
        digits: [ "০", "১", "২", "৩", "৪", "৫", "৬", "৭", "৮", "৯" ]
    },
    brah: {
        symbols: _31lk191,
        formats: _31lk230,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    cakm: {
        symbols: _31lk191,
        formats: _31lk230,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    cham: {
        symbols: _31lk191,
        formats: _31lk230,
        digits: [ "꩐", "꩑", "꩒", "꩓", "꩔", "꩕", "꩖", "꩗", "꩘", "꩙" ]
    },
    cyrl: {
        symbols: _31lk192,
        digits: "renderCyrillicLower"
    },
    deva: {
        symbols: _31lk191,
        formats: _31lk230,
        digits: [ "०", "१", "२", "३", "४", "५", "६", "७", "८", "९" ]
    },
    ethi: {
        symbols: _31lk192,
        digits: "renderEthiopic"
    },
    finance: _31lk193,
    fullwide: {
        symbols: _31lk191,
        formats: _31lk230,
        digits: [ "０", "１", "２", "３", "４", "５", "６", "７", "８", "９" ]
    },
    geor: {
        symbols: _31lk192,
        digits: "renderGeorgian"
    },
    grek: {
        symbols: _31lk192,
        digits: "renderGreekUpper"
    },
    greklow: {
        symbols: _31lk192,
        digits: "renderGreekLower"
    },
    gujr: {
        symbols: _31lk191,
        formats: _31lk230,
        digits: [ "૦", "૧", "૨", "૩", "૪", "૫", "૬", "૭", "૮", "૯" ]
    },
    guru: {
        symbols: _31lk191,
        formats: _31lk230,
        digits: [ "੦", "੧", "੨", "੩", "੪", "੫", "੬", "੭", "੮", "੯" ]
    },
    hanidays: {
        symbols: _31lk192,
        digits: "renderSpelloutNumberingDays"
    },
    hanidec: {
        symbols: _31lk191,
        formats: _31lk230,
        digits: [ "〇", "一", "二", "三", "四", "五", "六", "七", "八", "九" ]
    },
    hans: _31lk196,
    hansfin: _31lk198,
    hant: _31lk196,
    hantfin: _31lk198,
    hebr: {
        symbols: _31lk192,
        digits: "renderHebrew"
    },
    hmng: {
        symbols: _31lk192,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    java: {
        symbols: _31lk191,
        formats: _31lk230,
        digits: [ "꧐", "꧑", "꧒", "꧓", "꧔", "꧕", "꧖", "꧗", "꧘", "꧙" ]
    },
    jpan: _31lk196,
    jpanfin: _31lk198,
    kali: {
        symbols: _31lk191,
        formats: _31lk230,
        digits: [ "꤀", "꤁", "꤂", "꤃", "꤄", "꤅", "꤆", "꤇", "꤈", "꤉" ]
    },
    khmr: {
        symbols: _31lk191,
        formats: _31lk230,
        digits: [ "០", "១", "២", "៣", "៤", "៥", "៦", "៧", "៨", "៩" ]
    },
    knda: {
        symbols: _31lk191,
        formats: _31lk230,
        digits: [ "೦", "೧", "೨", "೩", "೪", "೫", "೬", "೭", "೮", "೯" ]
    },
    lana: {
        symbols: _31lk191,
        formats: _31lk230,
        digits: [ "᪀", "᪁", "᪂", "᪃", "᪄", "᪅", "᪆", "᪇", "᪈", "᪉" ]
    },
    lanatham: {
        symbols: _31lk191,
        formats: _31lk230,
        digits: [ "᪐", "᪑", "᪒", "᪓", "᪔", "᪕", "᪖", "᪗", "᪘", "᪙" ]
    },
    laoo: {
        symbols: _31lk191,
        formats: _31lk230,
        digits: [ "໐", "໑", "໒", "໓", "໔", "໕", "໖", "໗", "໘", "໙" ]
    },
    latn: {
        symbols: _31lk191,
        formats: _31lk230,
        digits: [ "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" ]
    },
    lepc: {
        symbols: _31lk191,
        formats: _31lk230,
        digits: [ "᱀", "᱁", "᱂", "᱃", "᱄", "᱅", "᱆", "᱇", "᱈", "᱉" ]
    },
    limb: {
        symbols: _31lk191,
        formats: _31lk230,
        digits: [ "᥆", "᥇", "᥈", "᥉", "᥊", "᥋", "᥌", "᥍", "᥎", "᥏" ]
    },
    mathbold: {
        symbols: _31lk192,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathdbl: {
        symbols: _31lk192,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathmono: {
        symbols: _31lk192,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathsanb: {
        symbols: _31lk192,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathsans: {
        symbols: _31lk192,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mlym: {
        symbols: _31lk191,
        formats: _31lk230,
        digits: [ "൦", "൧", "൨", "൩", "൪", "൫", "൬", "൭", "൮", "൯" ]
    },
    modi: {
        symbols: _31lk192,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mong: {
        symbols: _31lk191,
        formats: _31lk230,
        digits: [ "᠐", "᠑", "᠒", "᠓", "᠔", "᠕", "᠖", "᠗", "᠘", "᠙" ]
    },
    mroo: {
        symbols: _31lk192,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mtei: {
        symbols: _31lk191,
        formats: _31lk230,
        digits: [ "꯰", "꯱", "꯲", "꯳", "꯴", "꯵", "꯶", "꯷", "꯸", "꯹" ]
    },
    mymr: {
        symbols: _31lk191,
        formats: _31lk230,
        digits: [ "၀", "၁", "၂", "၃", "၄", "၅", "၆", "၇", "၈", "၉" ]
    },
    mymrshan: {
        symbols: _31lk191,
        formats: _31lk230,
        digits: [ "႐", "႑", "႒", "႓", "႔", "႕", "႖", "႗", "႘", "႙" ]
    },
    mymrtlng: {
        symbols: _31lk192,
        digits: [ "꧰", "꧱", "꧲", "꧳", "꧴", "꧵", "꧶", "꧷", "꧸", "꧹" ]
    },
    "native": _31lk193,
    nkoo: {
        symbols: _31lk191,
        formats: _31lk230,
        digits: [ "߀", "߁", "߂", "߃", "߄", "߅", "߆", "߇", "߈", "߉" ]
    },
    olck: {
        symbols: _31lk191,
        formats: _31lk230,
        digits: [ "᱐", "᱑", "᱒", "᱓", "᱔", "᱕", "᱖", "᱗", "᱘", "᱙" ]
    },
    orya: {
        symbols: _31lk191,
        formats: _31lk230,
        digits: [ "୦", "୧", "୨", "୩", "୪", "୫", "୬", "୭", "୮", "୯" ]
    },
    osma: {
        symbols: _31lk191,
        formats: _31lk230,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    roman: {
        symbols: _31lk192,
        digits: "renderRomanUpper"
    },
    romanlow: {
        symbols: _31lk192,
        digits: "renderRomanLower"
    },
    saur: {
        symbols: _31lk191,
        formats: _31lk230,
        digits: [ "꣐", "꣑", "꣒", "꣓", "꣔", "꣕", "꣖", "꣗", "꣘", "꣙" ]
    },
    shrd: {
        symbols: _31lk191,
        formats: _31lk230,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    sind: {
        symbols: _31lk192,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    sinh: {
        symbols: _31lk192,
        digits: [ "෦", "෧", "෨", "෩", "෪", "෫", "෬", "෭", "෮", "෯" ]
    },
    sora: {
        symbols: _31lk191,
        formats: _31lk230,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    sund: {
        symbols: _31lk191,
        formats: _31lk230,
        digits: [ "᮰", "᮱", "᮲", "᮳", "᮴", "᮵", "᮶", "᮷", "᮸", "᮹" ]
    },
    takr: {
        symbols: _31lk191,
        formats: _31lk230,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    talu: {
        symbols: _31lk191,
        formats: _31lk230,
        digits: [ "᧐", "᧑", "᧒", "᧓", "᧔", "᧕", "᧖", "᧗", "᧘", "᧙" ]
    },
    taml: {
        symbols: _31lk192,
        digits: "renderTamil"
    },
    tamldec: {
        symbols: _31lk191,
        formats: _31lk230,
        digits: [ "௦", "௧", "௨", "௩", "௪", "௫", "௬", "௭", "௮", "௯" ]
    },
    telu: {
        symbols: _31lk191,
        formats: _31lk230,
        digits: [ "౦", "౧", "౨", "౩", "౪", "౫", "౬", "౭", "౮", "౯" ]
    },
    thai: {
        symbols: _31lk191,
        formats: _31lk230,
        digits: [ "๐", "๑", "๒", "๓", "๔", "๕", "๖", "๗", "๘", "๙" ]
    },
    tirh: {
        symbols: _31lk192,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    tibt: {
        symbols: _31lk191,
        formats: _31lk230,
        digits: [ "༠", "༡", "༢", "༣", "༤", "༥", "༦", "༧", "༨", "༩" ]
    },
    traditio: _31lk193,
    vaii: {
        symbols: _31lk191,
        formats: _31lk230,
        digits: [ "꘠", "꘡", "꘢", "꘣", "꘤", "꘥", "꘦", "꘧", "꘨", "꘩" ]
    },
    wara: {
        symbols: _31lk192,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    }
};

inter.calendars = {
    buddhist: {
        dateFormats: _31lk214,
        datePartsOrder: "dmy",
        dateIntervalFormats: _31lk225,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _31lk217,
        dayPeriods: _31lk195,
        monthNames: _31lk219,
        eraNames: {
            wide: [ "BE" ],
            abbreviated: [ "BE" ]
        },
        quarterNames: _31lk207,
        fields: _31lk231
    },
    chinese: _31lk236,
    coptic: {
        dateFormats: _31lk214,
        datePartsOrder: "dmy",
        dateIntervalFormats: _31lk225,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _31lk217,
        dayPeriods: _31lk195,
        monthNames: {
            format: _31lk208,
            standAlone: _31lk208
        },
        eraNames: _31lk38,
        quarterNames: _31lk207,
        fields: _31lk231
    },
    dangi: _31lk236,
    ethioaa: _31lk232,
    ethiopic: {
        dateFormats: _31lk214,
        datePartsOrder: "dmy",
        dateIntervalFormats: _31lk225,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _31lk217,
        dayPeriods: _31lk195,
        monthNames: {
            format: _31lk210,
            standAlone: _31lk210
        },
        eraNames: _31lk38,
        quarterNames: _31lk207,
        fields: _31lk231
    },
    gregorian: {
        dateFormats: {
            basic: {
                fullDate: "EEEE, y 'mettas' d. MMMM",
                longDate: "y 'mettas' d. MMMM",
                mediumDate: "dd.MM 'st'. y",
                shortDate: "dd.MM.yy",
                fullTime: "HH:mm:ss zzzz",
                longTime: "HH:mm:ss z",
                mediumTime: "HH:mm:ss",
                shortTime: "HH:mm",
                shortDateTime: "dd.MM.yy HH:mm",
                mediumDateTime: "dd.MM 'st'. y HH:mm:ss",
                longDateTime: "y 'mettas' d. MMMM HH:mm:ss z",
                fullDateTime: "EEEE, y 'mettas' d. MMMM HH:mm:ss zzzz"
            },
            cldr: {
                d: "d.",
                E: "ccc",
                Ed: "E, d.",
                Ehm: "E, h:mm a",
                EHm: "E, HH:mm",
                Ehms: "E, h:mm:ss a",
                EHms: "E, HH:mm:ss",
                Gy: "y 'm'. G",
                GyMMM: "y 'm'. MMM G",
                GyMMMd: "dd.MM 'st'. y G",
                GyMMMEd: "E, dd.MM 'st'. y G",
                h: "h a",
                H: "HH",
                hm: "h:mm a",
                Hm: "HH:mm",
                hms: "h:mm:ss a",
                Hms: "HH:mm:ss",
                hmsv: "h:mm:ss a; v",
                Hmsv: "HH:mm:ss; v",
                hmv: "h:mm a; v",
                Hmv: "HH:mm; v",
                M: "L.",
                Md: "d.M",
                MEd: "E, d.M",
                MMM: "LLL",
                MMMd: "d. MMM",
                MMMEd: "E, d. MMM",
                ms: "mm:ss",
                y: "y 'm'.",
                yM: "M.y",
                yMd: "d.M.y",
                yMEd: "E, d.M.y",
                yMMM: "y 'm'. MMM",
                yMMMd: "dd.MM 'st'. y",
                yMMMEd: "E, dd.MM 'st'. y",
                yQQQ: "y 'm'. QQQ",
                yQQQQ: "y 'm'. QQQQ",
                MMMMd: "MMMM d",
                yMMMM: "y MMMM"
            }
        },
        datePartsOrder: "dmy",
        dateIntervalFormats: {
            d: {
                d: "d.–d."
            },
            h: _31lk3,
            H: {
                H: "HH–HH"
            },
            hm: _31lk45,
            Hm: _31lk11,
            hmv: _31lk54,
            Hmv: _31lk15,
            hv: _31lk6,
            Hv: {
                H: "HH–HH v"
            },
            M: {
                M: "M.–M."
            },
            Md: {
                d: "dd.MM–dd.MM",
                M: "dd.MM–dd.MM"
            },
            MEd: {
                d: "E, dd.MM – E, dd.MM",
                M: "E, dd.MM – E, dd.MM"
            },
            MMM: {
                M: "MMM–MMM"
            },
            MMMd: {
                d: "d.–d. MMM",
                M: "d. MMM – d. MMM"
            },
            MMMEd: {
                d: "E, d. – E, d. MMM",
                M: "E, d. MMM – E, d. MMM"
            },
            y: {
                y: "y–y"
            },
            yM: {
                M: "MM.y–MM.y",
                y: "MM.y–MM.y"
            },
            yMd: {
                d: "dd.MM.y–dd.MM.y",
                M: "dd.MM.y–dd.MM.y",
                y: "dd.MM.y–dd.MM.y"
            },
            yMEd: {
                d: "E, dd.MM.y – E, dd.MM.y",
                M: "E, dd.MM.y – E, dd.MM.y",
                y: "E, dd.MM.y – E, dd.MM.y"
            },
            yMMM: {
                M: "y 'm'. MMM–MMM",
                y: "y 'm'. MMM – y 'm'. MMM"
            },
            yMMMd: {
                d: "dd.–dd.MM 'st'. y",
                M: "dd.MM–dd.MM 'st'. y",
                y: "dd.MM 'st'. y – dd.MM 'st'. y"
            },
            yMMMEd: {
                d: "E, dd. – E, dd.MM 'st'. y",
                M: "E, dd.MM – E, dd.MM 'st'. y",
                y: "E, dd.MM 'st'. y – E, dd.MM 'st'. y"
            },
            yMMMM: {
                M: "y 'mettas' MMMM–MMMM",
                y: "y 'mettas' MMMM – y 'mettas' MMMM"
            }
        },
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _31lk217,
        dayPeriods: _31lk195,
        monthNames: _31lk219,
        eraNames: {
            wide: [ "BC", "AD" ],
            abbreviated: [ "BC", "AD" ]
        },
        quarterNames: _31lk207,
        fields: _31lk231
    },
    hebrew: {
        dateFormats: _31lk214,
        datePartsOrder: "dmy",
        dateIntervalFormats: _31lk225,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _31lk217,
        dayPeriods: _31lk195,
        monthNames: {
            format: _31lk205,
            standAlone: _31lk205
        },
        eraNames: {
            wide: [ "AM" ],
            abbreviated: [ "AM" ]
        },
        quarterNames: _31lk207,
        fields: _31lk231
    },
    indian: {
        dateFormats: _31lk214,
        datePartsOrder: "dmy",
        dateIntervalFormats: _31lk225,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _31lk217,
        dayPeriods: _31lk195,
        monthNames: {
            format: _31lk211,
            standAlone: _31lk211
        },
        eraNames: {
            wide: [ "Saka" ],
            abbreviated: [ "Saka" ]
        },
        quarterNames: _31lk207,
        fields: _31lk231
    },
    islamic: _31lk234,
    "islamic-umalqura": _31lk234,
    "islamic-tbla": _31lk234,
    "islamic-civil": _31lk234,
    "islamic-rgsa": _31lk234,
    iso8601: _31lk232,
    japanese: {
        dateFormats: _31lk214,
        datePartsOrder: "dmy",
        dateIntervalFormats: _31lk225,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _31lk217,
        dayPeriods: _31lk195,
        monthNames: _31lk219,
        eraNames: {
            wide: _31lk233,
            abbreviated: _31lk233
        },
        quarterNames: _31lk207,
        fields: _31lk231
    },
    persian: {
        dateFormats: _31lk214,
        datePartsOrder: "dmy",
        dateIntervalFormats: _31lk225,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _31lk217,
        dayPeriods: _31lk195,
        monthNames: {
            format: _31lk206,
            standAlone: _31lk206
        },
        eraNames: {
            wide: [ "AP" ],
            abbreviated: [ "AP" ]
        },
        quarterNames: _31lk207,
        fields: _31lk231
    },
    roc: {
        dateFormats: _31lk214,
        datePartsOrder: "dmy",
        dateIntervalFormats: _31lk225,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _31lk217,
        dayPeriods: _31lk195,
        monthNames: _31lk219,
        eraNames: {
            wide: _31lk5,
            abbreviated: _31lk5
        },
        quarterNames: _31lk207,
        fields: _31lk231
    },
    islamicc: _31lk232
};

inter.pluralRule = function(n) {
    var v = n.toString().replace(/^[^.]*\.?/, "").length, f = parseInt(n.toString().replace(/^[^.]*\.?/, ""), 10) || 0;
    if (typeof n === "string") n = parseInt(n, 10);
    if (n % 10 === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19 || v === 2 && f % 100 === Math.floor(f % 100) && f % 100 >= 11 && f % 100 <= 19) return "zero";
    if (n % 10 === 1 && (!(n % 100 === 11) || v === 2 && f % 10 === 1 && (!(f % 100 === 11) || !(v === 2) && f % 10 === 1))) return "one";
    return "other";
};

inter.renderDigitsOrdinal = function(n) {
    if (n < 0) return "−" + this.renderDigitsOrdinal(-n);
    if (n >= 0) return this.renderNumber(n, "#,##0") + ".";
};

inter.renderSpelloutNumbering = function(n) {
    if (n < 0) return "−" + this.renderSpelloutNumbering(-n);
    if (n >= 0) return this.renderNumber(n, "#,##0.#");
};

inter.renderArmenianUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderArmenianUpper(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e4) return this.renderNumber(n, "#,##0");
    if (n >= 9e3) return "Ք" + (n === 9e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 8e3) return "Փ" + (n === 8e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 7e3) return "Ւ" + (n === 7e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 6e3) return "Ց" + (n === 6e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 5e3) return "Ր" + (n === 5e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 4e3) return "Տ" + (n === 4e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 3e3) return "Վ" + (n === 3e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 2e3) return "Ս" + (n === 2e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 1e3) return "Ռ" + (n === 1e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 900) return "Ջ" + (n === 900 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 800) return "Պ" + (n === 800 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 700) return "Չ" + (n === 700 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 600) return "Ո" + (n === 600 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 500) return "Շ" + (n === 500 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 400) return "Ն" + (n === 400 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 300) return "Յ" + (n === 300 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 200) return "Մ" + (n === 200 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 100) return "Ճ" + (n === 100 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 90) return "Ղ" + (n === 90 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 80) return "Ձ" + (n === 80 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 70) return "Հ" + (n === 70 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 60) return "Կ" + (n === 60 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 50) return "Ծ" + (n === 50 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 40) return "Խ" + (n === 40 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 30) return "Լ" + (n === 30 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 20) return "Ի" + (n === 20 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 10) return "Ժ" + (n === 10 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 9) return "Թ";
    if (n >= 8) return "Ը";
    if (n >= 7) return "Է";
    if (n >= 6) return "Զ";
    if (n >= 5) return "Ե";
    if (n >= 4) return "Դ";
    if (n >= 3) return "Գ";
    if (n >= 2) return "Բ";
    if (n >= 1) return "Ա";
    if (n >= 0) return "0";
};

inter.renderArmenianLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderArmenianLower(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e4) return this.renderNumber(n, "#,##0");
    if (n >= 9e3) return "ք" + (n === 9e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 8e3) return "փ" + (n === 8e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 7e3) return "ւ" + (n === 7e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 6e3) return "ց" + (n === 6e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 5e3) return "ր" + (n === 5e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 4e3) return "տ" + (n === 4e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 3e3) return "վ" + (n === 3e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 2e3) return "ս" + (n === 2e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 1e3) return "ռ" + (n === 1e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 900) return "ջ" + (n === 900 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 800) return "պ" + (n === 800 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 700) return "չ" + (n === 700 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 600) return "ո" + (n === 600 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 500) return "շ" + (n === 500 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 400) return "ն" + (n === 400 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 300) return "յ" + (n === 300 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 200) return "մ" + (n === 200 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 100) return "ճ" + (n === 100 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 90) return "ղ" + (n === 90 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 80) return "ձ" + (n === 80 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 70) return "հ" + (n === 70 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 60) return "կ" + (n === 60 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 50) return "ծ" + (n === 50 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 40) return "խ" + (n === 40 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 30) return "լ" + (n === 30 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 20) return "ի" + (n === 20 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 10) return "ժ" + (n === 10 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 9) return "թ";
    if (n >= 8) return "ը";
    if (n >= 7) return "է";
    if (n >= 6) return "զ";
    if (n >= 5) return "ե";
    if (n >= 4) return "դ";
    if (n >= 3) return "գ";
    if (n >= 2) return "բ";
    if (n >= 1) return "ա";
    if (n >= 0) return "0";
};

inter.renderCyrillicLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderCyrillicLower(-n);
    if (isFractional && n > 1) return this.renderCyrillicLower(Math.floor(n)) + "." + this.renderCyrillicLower(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e15) return "҂҂҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e15)) + (n === 1e15 ? "" : " " + this.renderCyrillicLower(n % 1e15));
    if (n >= 1e12) return "҂҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e12)) + (n === 1e12 ? "" : " " + this.renderCyrillicLower(n % 1e12));
    if (n >= 1e9) return "҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e9)) + (n === 1e9 ? "" : " " + this.renderCyrillicLower(n % 1e9));
    if (n >= 1e6) return "҂҂" + this.renderCyrillicLower(Math.floor(n / 1e6)) + (n === 1e6 ? "" : " " + this.renderCyrillicLower(n % 1e6));
    if (n >= 11e3) return this.renderCyrillicLowerThousands(Math.floor(n / 1e4)) + (n === 11e3 ? "" : " " + this.renderCyrillicLower(n % 1e4));
    if (n >= 1e4) return "҂" + this.renderCyrillicLower(Math.floor(n / 1e4)) + (n === 1e4 ? "" : " " + this.renderCyrillicLower(n % 1e4));
    if (n >= 1e3) return "҂" + this.renderCyrillicLower110(Math.floor(n / 1e3)) + this.renderCyrillicLowerPost(n % 1e3);
    if (n >= 900) return "ц" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 801) return "ѿ" + this.renderCyrillicLower(n % 100);
    if (n >= 800) return "ѿ҃";
    if (n >= 700) return "ѱ" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 600) return "х" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 500) return "ф" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 400) return "у" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 300) return "т" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 200) return "с" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 100) return "р" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 90) return "ч" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 80) return "п" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 70) return "ѻ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 60) return "ѯ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 50) return "н" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 40) return "м" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 30) return "л" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 20) return "к" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 19) return "ѳ҃і";
    if (n >= 18) return "и҃і";
    if (n >= 17) return "з҃і";
    if (n >= 16) return "ѕ҃і";
    if (n >= 15) return "є҃і";
    if (n >= 14) return "д҃і";
    if (n >= 13) return "г҃і";
    if (n >= 12) return "в҃і";
    if (n >= 11) return "а҃і";
    if (n >= 1) return this.renderCyrillicLower110(n) + "҃";
    if (n >= 0) return "0҃";
};

inter.renderEthiopic = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderEthiopic(-n);
    if (isFractional && n > 1) return this.renderEthiopic(Math.floor(n)) + "፡" + this.renderEthiopic(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,###0");
    if (n >= 2e16) return this.renderEthiopic(Math.floor(n / 1e16)) + "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 1e16) return "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 2e12) return this.renderEthiopic(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1e12) return "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 2e8) return this.renderEthiopic(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1e8) return "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 2e4) return this.renderEthiopic(Math.floor(n / 1e4)) + "፼" + (n === 2e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 1e4) return "፼" + (n === 1e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 200) return this.renderEthiopic(Math.floor(n / 100)) + "፻" + (n === 200 ? "" : this.renderEthiopic(n % 100));
    if (n >= 100) return "፻" + (n === 100 ? "" : this.renderEthiopic(n % 100));
    if (n >= 90) return "፺" + (n === 90 ? "" : this.renderEthiopic(n % 10));
    if (n >= 80) return "፹" + (n === 80 ? "" : this.renderEthiopic(n % 10));
    if (n >= 70) return "፸" + (n === 70 ? "" : this.renderEthiopic(n % 10));
    if (n >= 60) return "፷" + (n === 60 ? "" : this.renderEthiopic(n % 10));
    if (n >= 50) return "፶" + (n === 50 ? "" : this.renderEthiopic(n % 10));
    if (n >= 40) return "፵" + (n === 40 ? "" : this.renderEthiopic(n % 10));
    if (n >= 30) return "፴" + (n === 30 ? "" : this.renderEthiopic(n % 10));
    if (n >= 20) return "፳" + (n === 20 ? "" : this.renderEthiopic(n % 10));
    if (n >= 10) return "፲" + (n === 10 ? "" : this.renderEthiopic(n % 10));
    if (n >= 9) return "፱";
    if (n >= 8) return "፰";
    if (n >= 7) return "፯";
    if (n >= 6) return "፮";
    if (n >= 5) return "፭";
    if (n >= 4) return "፬";
    if (n >= 3) return "፫";
    if (n >= 2) return "፪";
    if (n >= 1) return "፩";
    if (n >= 0) return "ባዶ";
};

inter.renderGeorgian = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGeorgian(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 2e4) return this.renderNumber(n, "#,##0");
    if (n >= 1e4) return "ჯ" + (n === 1e4 ? "" : this.renderGeorgian(n % 1e4));
    if (n >= 9e3) return "ჵ" + (n === 9e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 8e3) return "ჴ" + (n === 8e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 7e3) return "ხ" + (n === 7e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 6e3) return "ჭ" + (n === 6e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 5e3) return "წ" + (n === 5e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 4e3) return "ძ" + (n === 4e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 3e3) return "ც" + (n === 3e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 2e3) return "ჩ" + (n === 2e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 1e3) return "შ" + (n === 1e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 900) return "ყ" + (n === 900 ? "" : this.renderGeorgian(n % 100));
    if (n >= 800) return "ღ" + (n === 800 ? "" : this.renderGeorgian(n % 100));
    if (n >= 700) return "ქ" + (n === 700 ? "" : this.renderGeorgian(n % 100));
    if (n >= 600) return "ფ" + (n === 600 ? "" : this.renderGeorgian(n % 100));
    if (n >= 500) return "ჳ" + (n === 500 ? "" : this.renderGeorgian(n % 100));
    if (n >= 400) return "უ" + (n === 400 ? "" : this.renderGeorgian(n % 100));
    if (n >= 300) return "ტ" + (n === 300 ? "" : this.renderGeorgian(n % 100));
    if (n >= 200) return "ს" + (n === 200 ? "" : this.renderGeorgian(n % 100));
    if (n >= 100) return "რ" + (n === 100 ? "" : this.renderGeorgian(n % 100));
    if (n >= 90) return "ჟ" + (n === 90 ? "" : this.renderGeorgian(n % 10));
    if (n >= 80) return "პ" + (n === 80 ? "" : this.renderGeorgian(n % 10));
    if (n >= 70) return "ო" + (n === 70 ? "" : this.renderGeorgian(n % 10));
    if (n >= 60) return "ჲ" + (n === 60 ? "" : this.renderGeorgian(n % 10));
    if (n >= 50) return "ნ" + (n === 50 ? "" : this.renderGeorgian(n % 10));
    if (n >= 40) return "მ" + (n === 40 ? "" : this.renderGeorgian(n % 10));
    if (n >= 30) return "ლ" + (n === 30 ? "" : this.renderGeorgian(n % 10));
    if (n >= 20) return "კ" + (n === 20 ? "" : this.renderGeorgian(n % 10));
    if (n >= 10) return "ი" + (n === 10 ? "" : this.renderGeorgian(n % 10));
    if (n >= 9) return "თ";
    if (n >= 8) return "ჱ";
    if (n >= 7) return "ზ";
    if (n >= 6) return "ვ";
    if (n >= 5) return "ე";
    if (n >= 4) return "დ";
    if (n >= 3) return "გ";
    if (n >= 2) return "ბ";
    if (n >= 1) return "ა";
    if (n >= 0) return this.renderNumber(n, "#,##0");
};

inter.renderGreekUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGreekUpper(-n);
    if (isFractional && n > 1) return this.renderGreekUpper(Math.floor(n)) + "." + this.renderGreekUpper(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 0) return this.renderGreekNumeralMajuscules(n) + "´";
};

inter.renderGreekLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGreekLower(-n);
    if (isFractional && n > 1) return this.renderGreekLower(Math.floor(n)) + "." + this.renderGreekLower(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 0) return this.renderGreekNumeralMinuscules(n) + "´";
};

inter.renderSpelloutCardinal = function(n) {
    if (n < 0) return "−" + this.renderSpelloutCardinal(-n);
    if (n >= 0) return this.renderNumber(n, "#,##0.#");
};

inter.renderHebrew = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderHebrew(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1000001) return this.renderNumber(n, "#,##0");
    if (n >= 1e6) return "אלף אלפים";
    if (n >= 3001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 3001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 3e3) return this.renderHebrew(Math.floor(n / 1e3)) + " אלפים";
    if (n >= 2001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 2001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 2e3) return "אלפיים";
    if (n >= 1001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 1001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 1e3) return "אלף";
    if (n >= 901) return "תתק" + this.renderHebrew099(n % 100);
    if (n >= 900) return "תת״ק";
    if (n >= 801) return "תת" + this.renderHebrew099(n % 100);
    if (n >= 800) return "ת״ת";
    if (n >= 745) return "תש" + this.renderHebrew099(n % 100);
    if (n >= 744) return "תשד״מ";
    if (n >= 701) return "תש" + this.renderHebrew099(n % 100);
    if (n >= 700) return "ת״ש";
    if (n >= 699) return "תר" + this.renderHebrew099(n % 100);
    if (n >= 698) return "תרח״צ";
    if (n >= 601) return "תר" + this.renderHebrew099(n % 100);
    if (n >= 600) return "ת״ר";
    if (n >= 501) return "תק" + this.renderHebrew099(n % 100);
    if (n >= 500) return "ת״ק";
    if (n >= 400) return "ת" + this.renderHebrew099(n % 100);
    if (n >= 345) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 344) return "שד״מ";
    if (n >= 305) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 304) return "ד״ש";
    if (n >= 300) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 299) return "ר" + this.renderHebrew099(n % 100);
    if (n >= 298) return "רח״צ";
    if (n >= 200) return "ר" + this.renderHebrew099(n % 100);
    if (n >= 100) return "ק" + this.renderHebrew099(n % 100);
    if (n >= 91) return "צ״" + this.renderHebrewItem(n % 10);
    if (n >= 90) return "צ׳";
    if (n >= 81) return "פ״" + this.renderHebrewItem(n % 10);
    if (n >= 80) return "פ׳";
    if (n >= 71) return "ע״" + this.renderHebrewItem(n % 10);
    if (n >= 70) return "ע׳";
    if (n >= 61) return "ס״" + this.renderHebrewItem(n % 10);
    if (n >= 60) return "ס׳";
    if (n >= 51) return "נ״" + this.renderHebrewItem(n % 10);
    if (n >= 50) return "נ׳";
    if (n >= 41) return "מ״" + this.renderHebrewItem(n % 10);
    if (n >= 40) return "מ׳";
    if (n >= 31) return "ל״" + this.renderHebrewItem(n % 10);
    if (n >= 30) return "ל׳";
    if (n >= 21) return "כ״" + this.renderHebrewItem(n % 10);
    if (n >= 20) return "כ׳";
    if (n >= 17) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "ט״ז";
    if (n >= 15) return "ט״ו";
    if (n >= 11) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 0) return this.renderHebrewItem(n) + "׳";
};

inter.renderRomanUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderRomanUpper(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 4e5) return this.renderNumber(n, "#,##0");
    if (n >= 3e5) return "ↈↈↈ" + (n === 3e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 2e5) return "ↈↈ" + (n === 2e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 1e5) return "ↈ" + (n === 1e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 9e4) return "ↂↈ" + (n === 9e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 8e4) return "ↇↂↂↂ" + (n === 8e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 7e4) return "ↇↂↂ" + (n === 7e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 6e4) return "ↇↂ" + (n === 6e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 5e4) return "ↇ" + (n === 5e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 4e4) return "ↂↇ" + (n === 4e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 3e4) return "ↂↂↂ" + (n === 3e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 2e4) return "ↂↂ" + (n === 2e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 1e4) return "ↂ" + (n === 1e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 9e3) return "Mↂ" + (n === 9e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 8e3) return "ↁMMM" + (n === 8e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 7e3) return "ↁMM" + (n === 7e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 6e3) return "ↁM" + (n === 6e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 5e3) return "ↁ" + (n === 5e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 4e3) return "Mↁ" + (n === 4e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 3e3) return "MMM" + (n === 3e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 2e3) return "MM" + (n === 2e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 1e3) return "M" + (n === 1e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 900) return "CM" + (n === 900 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 800) return "DCCC" + (n === 800 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 700) return "DCC" + (n === 700 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 600) return "DC" + (n === 600 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 500) return "D" + (n === 500 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 400) return "CD" + (n === 400 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 300) return "CCC" + (n === 300 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 200) return "CC" + (n === 200 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 100) return "C" + (n === 100 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 90) return "XC" + (n === 90 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 80) return "LXXX" + (n === 80 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 70) return "LXX" + (n === 70 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 60) return "LX" + (n === 60 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 50) return "L" + (n === 50 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 40) return "XL" + (n === 40 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 30) return "XXX" + (n === 30 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 20) return "XX" + (n === 20 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 10) return "X" + (n === 10 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 9) return "IX";
    if (n >= 8) return "VIII";
    if (n >= 7) return "VII";
    if (n >= 6) return "VI";
    if (n >= 5) return "V";
    if (n >= 4) return "IV";
    if (n >= 3) return "III";
    if (n >= 2) return "II";
    if (n >= 1) return "I";
    if (n >= 0) return "N";
};

inter.renderRomanLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderRomanLower(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 5e3) return this.renderNumber(n, "#,##0");
    if (n >= 4e3) return "mmmm" + (n === 4e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 3e3) return "mmm" + (n === 3e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 2e3) return "mm" + (n === 2e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 1e3) return "m" + (n === 1e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 900) return "cm" + (n === 900 ? "" : this.renderRomanLower(n % 100));
    if (n >= 800) return "dccc" + (n === 800 ? "" : this.renderRomanLower(n % 100));
    if (n >= 700) return "dcc" + (n === 700 ? "" : this.renderRomanLower(n % 100));
    if (n >= 600) return "dc" + (n === 600 ? "" : this.renderRomanLower(n % 100));
    if (n >= 500) return "d" + (n === 500 ? "" : this.renderRomanLower(n % 100));
    if (n >= 400) return "cd" + (n === 400 ? "" : this.renderRomanLower(n % 100));
    if (n >= 300) return "ccc" + (n === 300 ? "" : this.renderRomanLower(n % 100));
    if (n >= 200) return "cc" + (n === 200 ? "" : this.renderRomanLower(n % 100));
    if (n >= 100) return "c" + (n === 100 ? "" : this.renderRomanLower(n % 100));
    if (n >= 90) return "xc" + (n === 90 ? "" : this.renderRomanLower(n % 10));
    if (n >= 80) return "lxxx" + (n === 80 ? "" : this.renderRomanLower(n % 10));
    if (n >= 70) return "lxx" + (n === 70 ? "" : this.renderRomanLower(n % 10));
    if (n >= 60) return "lx" + (n === 60 ? "" : this.renderRomanLower(n % 10));
    if (n >= 50) return "l" + (n === 50 ? "" : this.renderRomanLower(n % 10));
    if (n >= 40) return "xl" + (n === 40 ? "" : this.renderRomanLower(n % 10));
    if (n >= 30) return "xxx" + (n === 30 ? "" : this.renderRomanLower(n % 10));
    if (n >= 20) return "xx" + (n === 20 ? "" : this.renderRomanLower(n % 10));
    if (n >= 10) return "x" + (n === 10 ? "" : this.renderRomanLower(n % 10));
    if (n >= 9) return "ix";
    if (n >= 8) return "viii";
    if (n >= 7) return "vii";
    if (n >= 6) return "vi";
    if (n >= 5) return "v";
    if (n >= 4) return "iv";
    if (n >= 3) return "iii";
    if (n >= 2) return "ii";
    if (n >= 1) return "i";
    if (n >= 0) return "n";
};

inter.renderTamil = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderTamil(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e8) return this.renderNumber(n, "#,##,##0");
    if (n >= 1e6) return this.renderTamil(Math.floor(n / 1e6)) + "௱௲" + (n === 1e6 ? "" : this.renderTamilThousands(n % 1e6));
    if (n >= 2e3) return this.renderTamil(Math.floor(n / 1e3)) + "௲" + (n === 2e3 ? "" : this.renderTamil(n % 1e3));
    if (n >= 1e3) return "௲" + (n === 1e3 ? "" : this.renderTamil(n % 1e3));
    if (n >= 200) return this.renderTamil(Math.floor(n / 100)) + "௱" + (n === 200 ? "" : this.renderTamil(n % 100));
    if (n >= 100) return "௱" + (n === 100 ? "" : this.renderTamil(n % 100));
    if (n >= 20) return this.renderTamil(Math.floor(n / 10)) + "௰" + (n === 20 ? "" : this.renderTamil(n % 10));
    if (n >= 10) return "௰" + (n === 10 ? "" : this.renderTamil(n % 10));
    if (n >= 9) return "௯";
    if (n >= 8) return "௮";
    if (n >= 7) return "௭";
    if (n >= 6) return "௬";
    if (n >= 5) return "௫";
    if (n >= 4) return "௪";
    if (n >= 3) return "௩";
    if (n >= 2) return "௨";
    if (n >= 1) return "௧";
    if (n >= 0) return "௦";
};

inter.renderCyrillicLowerThousands = function(n) {
    if (n >= 900) return "҂ц" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 800) return "҂ѿ" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 700) return "҂ѱ" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 600) return "҂х" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 500) return "҂ф" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 400) return "҂у" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 300) return "҂т" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 200) return "҂с" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 100) return "҂р" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 90) return "҂ч" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 80) return "҂п" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 70) return "҂ѻ" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 60) return "҂ѯ" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 50) return "҂н" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 40) return "҂м" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 30) return "҂л" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 20) return "҂к" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 19) return "҂ѳ҃҂і";
    if (n >= 18) return "҂и҃҂і";
    if (n >= 17) return "҂з҃҂і";
    if (n >= 16) return "҂ѕ҃҂і";
    if (n >= 15) return "҂є҃҂і";
    if (n >= 14) return "҂д҃҂і";
    if (n >= 13) return "҂г҃҂і";
    if (n >= 12) return "҂в҃҂і";
    if (n >= 11) return "҂а҃҂і";
    if (n >= 10) return "҃҂і";
    if (n >= 9) return "҃҂ѳ";
    if (n >= 8) return "҃҂и";
    if (n >= 7) return "҃҂з";
    if (n >= 6) return "҃҂ѕ";
    if (n >= 5) return "҃҂є";
    if (n >= 4) return "҃҂д";
    if (n >= 3) return "҃҂г";
    if (n >= 2) return "҃҂в";
    if (n >= 1) return "҃҂а";
    if (n >= 0) return "҃";
};

inter.renderCyrillicLower110 = function(n) {
    if (n >= 10) return "і";
    if (n >= 9) return "ѳ";
    if (n >= 8) return "и";
    if (n >= 7) return "з";
    if (n >= 6) return "ѕ";
    if (n >= 5) return "є";
    if (n >= 4) return "д";
    if (n >= 3) return "г";
    if (n >= 2) return "в";
    if (n >= 1) return "а";
};

inter.renderCyrillicLowerPost = function(n) {
    if (n >= 1) return this.renderCyrillicLower(n);
    if (n >= 0) return "҃";
};

inter.renderCyrillicLowerFinal = function(n) {
    if (n >= 91) return "ч" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 90) return "҃ч";
    if (n >= 81) return "п" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 80) return "҃п";
    if (n >= 71) return "ѻ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 70) return "҃ѻ";
    if (n >= 61) return "ѯ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 60) return "҃ѯ";
    if (n >= 51) return "н" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 50) return "҃н";
    if (n >= 41) return "м" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 40) return "҃м";
    if (n >= 31) return "л" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 30) return "҃л";
    if (n >= 21) return "к" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 20) return "҃к";
    if (n >= 19) return "ѳ҃і";
    if (n >= 18) return "и҃і";
    if (n >= 17) return "з҃і";
    if (n >= 16) return "ѕ҃і";
    if (n >= 15) return "є҃і";
    if (n >= 14) return "д҃і";
    if (n >= 13) return "г҃і";
    if (n >= 12) return "в҃і";
    if (n >= 11) return "а҃і";
    if (n >= 1) return "҃" + this.renderCyrillicLower110(n);
    if (n >= 0) return "҃";
};

inter.renderEthiopicP3 = function(n) {
    if (n >= 1e12) return this.renderEthiopic(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1) return "፼፼፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼፼፼";
};

inter.renderEthiopicP2 = function(n) {
    if (n >= 1e8) return this.renderEthiopic(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1) return "፼፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼፼";
};

inter.renderEthiopicP1 = function(n) {
    if (n >= 1e4) return this.renderEthiopic(Math.floor(n / 1e4)) + "፼" + (n === 1e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 1) return "፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼";
};

inter.renderGreekNumeralMajuscules = function(n) {
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e16) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e16)) + "ΜΜΜΜ" + (n === 1e16 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e16));
    if (n >= 1e12) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e12)) + "ΜΜΜ" + (n === 1e12 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e12));
    if (n >= 1e8) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e8)) + "ΜΜ" + (n === 1e8 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e8));
    if (n >= 1e4) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e4)) + "Μ" + (n === 1e4 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e4));
    if (n >= 1e3) return "͵" + this.renderGreekNumeralMajuscules(Math.floor(n / 1e3)) + (n === 1e3 ? "" : this.renderGreekNumeralMajuscules(n % 1e3));
    if (n >= 900) return "Ϡ" + (n === 900 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 800) return "Ω" + (n === 800 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 700) return "Ψ" + (n === 700 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 600) return "Χ" + (n === 600 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 500) return "Φ" + (n === 500 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 400) return "Υ" + (n === 400 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 300) return "Τ" + (n === 300 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 200) return "Σ" + (n === 200 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 100) return "Ρ" + (n === 100 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 90) return "Ϟ" + (n === 90 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 80) return "Π" + (n === 80 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 70) return "Ο" + (n === 70 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 60) return "Ξ" + (n === 60 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 50) return "Ν" + (n === 50 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 40) return "Μ" + (n === 40 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 30) return "Λ" + (n === 30 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 20) return "Κ" + (n === 20 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 10) return "Ι" + (n === 10 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 9) return "Θ";
    if (n >= 8) return "Η";
    if (n >= 7) return "Ζ";
    if (n >= 6) return "Ϝ";
    if (n >= 5) return "Ε";
    if (n >= 4) return "Δ";
    if (n >= 3) return "Γ";
    if (n >= 2) return "Β";
    if (n >= 1) return "Α";
    if (n >= 0) return "𐆊";
};

inter.renderGreekNumeralMinuscules = function(n) {
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e16) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e16)) + "μμμμ" + (n === 1e16 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e16));
    if (n >= 1e12) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e12)) + "μμμ" + (n === 1e12 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e12));
    if (n >= 1e8) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e8)) + "μμ" + (n === 1e8 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e8));
    if (n >= 1e4) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e4)) + "μ" + (n === 1e4 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e4));
    if (n >= 1e3) return "͵" + this.renderGreekNumeralMinuscules(Math.floor(n / 1e3)) + (n === 1e3 ? "" : this.renderGreekNumeralMinuscules(n % 1e3));
    if (n >= 900) return "ϡ" + (n === 900 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 800) return "ω" + (n === 800 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 700) return "ψ" + (n === 700 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 600) return "χ" + (n === 600 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 500) return "φ" + (n === 500 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 400) return "υ" + (n === 400 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 300) return "τ" + (n === 300 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 200) return "σ" + (n === 200 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 100) return "ρ" + (n === 100 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 90) return "ϟ" + (n === 90 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 80) return "π" + (n === 80 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 70) return "ο" + (n === 70 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 60) return "ξ" + (n === 60 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 50) return "ν" + (n === 50 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 40) return "μ" + (n === 40 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 30) return "λ" + (n === 30 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 20) return "κ" + (n === 20 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 10) return "ι" + (n === 10 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 9) return "θ";
    if (n >= 8) return "η";
    if (n >= 7) return "ζ";
    if (n >= 6) return "ϝ";
    if (n >= 5) return "ε";
    if (n >= 4) return "δ";
    if (n >= 3) return "γ";
    if (n >= 2) return "β";
    if (n >= 1) return "α";
    if (n >= 0) return "𐆊";
};

inter.renderHebrewThousands = function(n) {
    if (n >= 401) return this.renderHebrew(n) + "׳";
    if (n >= 100) return this.renderHebrew(n) + (n === 100 ? "" : "׳");
    if (n >= 10) return this.renderHebrew(n) + (n === 10 ? "" : "׳");
    if (n >= 0) return this.renderHebrew(n);
};

inter.renderHebrew099 = function(n) {
    if (n >= 91) return "צ״" + this.renderHebrewItem(n % 10);
    if (n >= 90) return "״צ";
    if (n >= 81) return "פ״" + this.renderHebrewItem(n % 10);
    if (n >= 80) return "״פ";
    if (n >= 71) return "ע״" + this.renderHebrewItem(n % 10);
    if (n >= 70) return "״ע";
    if (n >= 61) return "ס״" + this.renderHebrewItem(n % 10);
    if (n >= 60) return "״ס";
    if (n >= 51) return "נ״" + this.renderHebrewItem(n % 10);
    if (n >= 50) return "״נ";
    if (n >= 41) return "מ״" + this.renderHebrewItem(n % 10);
    if (n >= 40) return "״מ";
    if (n >= 31) return "ל״" + this.renderHebrewItem(n % 10);
    if (n >= 30) return "״ל";
    if (n >= 21) return "כ״" + this.renderHebrewItem(n % 10);
    if (n >= 20) return "״כ";
    if (n >= 17) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "ט״ז";
    if (n >= 15) return "ט״ו";
    if (n >= 11) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 1) return "״" + this.renderHebrewItem(n);
    if (n >= 0) return "׳";
};

inter.renderHebrewItem = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderHebrewItem(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 2100) return this.renderNumber(n, "#,##0");
    if (n >= 2e3) return "תתתתת" + (n === 2e3 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1900) return "תתתתש" + (n === 1900 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1800) return "תתתתר" + (n === 1800 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1700) return "תתתתק" + (n === 1700 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1600) return "תתתת" + (n === 1600 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1500) return "תתתש" + (n === 1500 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1400) return "תתתר" + (n === 1400 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1300) return "תתתק" + (n === 1300 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1200) return "תתת" + (n === 1200 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1100) return "תתש" + (n === 1100 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1e3) return "תתר" + (n === 1e3 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 900) return "תתק" + (n === 900 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 800) return "תת" + (n === 800 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 745) return "תש" + this.renderHebrewItem(n % 100);
    if (n >= 744) return "תשדמ";
    if (n >= 700) return "תש" + (n === 700 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 699) return "תר" + this.renderHebrewItem(n % 100);
    if (n >= 698) return "תרחצ";
    if (n >= 600) return "תר" + (n === 600 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 500) return "תק" + (n === 500 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 400) return "ת" + (n === 400 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 345) return "ש" + this.renderHebrewItem(n % 100);
    if (n >= 344) return "שדמ";
    if (n >= 305) return "ש" + this.renderHebrewItem(n % 100);
    if (n >= 304) return "דש";
    if (n >= 300) return "ש" + (n === 300 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 299) return "ר" + this.renderHebrewItem(n % 100);
    if (n >= 298) return "רחצ";
    if (n >= 200) return "ר" + (n === 200 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 100) return "ק" + (n === 100 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 90) return "צ" + (n === 90 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 80) return "פ" + (n === 80 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 70) return "ע" + (n === 70 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 60) return "ס" + (n === 60 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 50) return "נ" + (n === 50 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 40) return "מ" + (n === 40 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 30) return "ל" + (n === 30 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 20) return "כ" + (n === 20 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 17) return "י" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "טז";
    if (n >= 15) return "טו";
    if (n >= 10) return "י" + (n === 10 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 9) return "ט";
    if (n >= 8) return "ח";
    if (n >= 7) return "ז";
    if (n >= 6) return "ו";
    if (n >= 5) return "ה";
    if (n >= 4) return "ד";
    if (n >= 3) return "ג";
    if (n >= 2) return "ב";
    if (n >= 1) return "א";
    if (n >= 0) return "״";
};

inter.renderTamilThousands = function(n) {
    if (n >= 1e3) return this.renderTamilThousands(Math.floor(n / 1e3)) + "௲" + (n === 1e3 ? "" : this.renderTamilThousands(n % 1e3));
    if (n >= 0) return this.renderTamil(n);
};

inter.renderEthiopicP = function(n) {
    if (n >= 1e16) return this.renderEthiopicP(Math.floor(n / 1e16)) + "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 1e12) return this.renderEthiopicP(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1e8) return this.renderEthiopicP(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1e4) return this.renderEthiopicP(Math.floor(n / 1e4)) + "፼" + (n === 1e4 ? "" : this.renderEthiopicP(n % 1e4));
    if (n >= 1) return this.renderEthiopic(n);
};

inter.territories = [ _31lk148, _31lk96, _31lk152, _31lk69, _31lk157, _31lk135, _31lk124, _31lk80, _31lk97, _31lk81, _31lk70, _31lk112, _31lk113, _31lk98, _31lk163, _31lk125, _31lk144, _31lk126, _31lk99, _31lk160, _31lk100, _31lk141, _31lk127, _31lk149, _31lk101, _31lk128, _31lk82, _31lk136, _31lk129, _31lk71, _31lk114, _31lk61, _31lk102, _31lk130, _31lk83, _31lk103, _31lk104, _31lk72, _31lk73, _31lk56, _31lk115, _31lk84, _31lk57, _31lk85, _31lk86, _31lk142, _31lk150, _31lk131, _31lk87, _31lk137, _31lk62, _31lk116, _31lk74, _31lk138, _31lk143, _31lk117, _31lk105, _31lk63, _31lk75, _31lk118, _31lk161, _31lk58, _31lk158, _31lk119, _31lk155, _31lk167, _31lk156, _31lk59, _31lk132, _31lk106, _31lk64, _31lk133, _31lk145, _31lk88, _31lk107, _31lk120, _31lk108, _31lk76, _31lk89, _31lk162, _31lk90, _31lk121, _31lk91, _31lk77, _31lk109, _31lk122, _31lk92, _31lk39, _31lk134, _31lk146, _31lk93, _31lk60, _31lk78, _31lk110, _31lk94, _31lk95, _31lk79 ];

inter.regions = [ _31lk148, _31lk152, _31lk149, _31lk167, _31lk39, _31lk146 ];

inter.countries = [ _31lk96, _31lk69, _31lk157, _31lk135, _31lk124, _31lk80, _31lk97, _31lk81, _31lk70, _31lk112, _31lk113, _31lk98, _31lk163, _31lk125, _31lk144, _31lk126, _31lk99, _31lk160, _31lk100, _31lk141, _31lk127, _31lk101, _31lk128, _31lk82, _31lk136, _31lk129, _31lk71, _31lk114, _31lk61, _31lk102, _31lk130, _31lk83, _31lk103, _31lk104, _31lk72, _31lk73, _31lk56, _31lk115, _31lk84, _31lk57, _31lk85, _31lk86, _31lk142, _31lk150, _31lk131, _31lk87, _31lk137, _31lk62, _31lk116, _31lk74, _31lk138, _31lk143, _31lk117, _31lk105, _31lk63, _31lk75, _31lk118, _31lk161, _31lk58, _31lk158, _31lk119, _31lk155, _31lk156, _31lk59, _31lk132, _31lk106, _31lk64, _31lk133, _31lk145, _31lk88, _31lk107, _31lk120, _31lk108, _31lk76, _31lk89, _31lk162, _31lk90, _31lk121, _31lk91, _31lk77, _31lk109, _31lk122, _31lk92, _31lk134, _31lk93, _31lk60, _31lk78, _31lk110, _31lk94, _31lk95, _31lk79 ];

inter.languages = [ {
    id: "en_us",
    displayName: "amērikaniskan ēngliskan",
    nativeDisplayName: "American English"
}, {
    id: "en_au",
    displayName: "Austrālijas ēngliskan",
    nativeDisplayName: "Australian English"
}, {
    id: "en_gb",
    displayName: "brītiskan ēngliskan",
    nativeDisplayName: "British English"
}, {
    id: "en_ca",
    displayName: "Kanādas ēngliskan",
    nativeDisplayName: "Canadian English"
}, {
    id: "da",
    displayName: "dāniskan",
    nativeDisplayName: "dansk"
}, {
    id: "de",
    displayName: "miksiskan",
    nativeDisplayName: "Deutsch"
}, {
    id: "et",
    displayName: "èstiskan",
    nativeDisplayName: "eesti"
}, {
    id: "en",
    displayName: "ēngliskan",
    nativeDisplayName: "English"
}, {
    id: "es",
    displayName: "špāniskan",
    nativeDisplayName: "español"
}, {
    id: "es_es",
    displayName: "eurōpiskan špāniskan",
    nativeDisplayName: "español de España"
}, {
    id: "es_mx",
    displayName: "Meksikus špāniskan",
    nativeDisplayName: "español de México"
}, {
    id: "es_419",
    displayName: "Lātiniskas Amērikas špāniskan",
    nativeDisplayName: "español latinoamericano"
}, {
    id: "fr",
    displayName: "prancōziskan",
    nativeDisplayName: "français"
}, {
    id: "fr_ca",
    displayName: "Kanādas prancōziskan",
    nativeDisplayName: "français canadien"
}, {
    id: "fr_ch",
    displayName: "Šwēicis prancōziskan",
    nativeDisplayName: "français suisse"
}, {
    id: "it",
    displayName: "wālkiskan",
    nativeDisplayName: "italiano"
}, {
    id: "lv",
    displayName: "lattawiskan",
    nativeDisplayName: "latviešu"
}, {
    id: "lt",
    displayName: "laītawiskan",
    nativeDisplayName: "lietuvių"
}, {
    id: "nl",
    displayName: "ullandiskan",
    nativeDisplayName: "Nederlands"
}, {
    id: "und",
    displayName: "niwaistā bilā"
}, {
    id: "pl",
    displayName: "pōliskan",
    nativeDisplayName: "polski"
}, {
    id: "pt",
    displayName: "pōrtugaliskan",
    nativeDisplayName: "português"
}, {
    id: "pt_br",
    displayName: "Brazīlijas pōrtugaliskan",
    nativeDisplayName: "português do Brasil"
}, {
    id: "pt_pt",
    displayName: "eurōpiskan pōrtugaliskan",
    nativeDisplayName: "português europeu"
}, {
    id: "prg",
    displayName: "prūsiskan",
    nativeDisplayName: "prūsiskan"
}, {
    id: "de_ch",
    displayName: "Šwēicis aūktamiksiskan",
    nativeDisplayName: "Schweizer Hochdeutsch"
}, {
    id: "fi",
    displayName: "sōmiskan",
    nativeDisplayName: "suomi"
}, {
    id: "sv",
    displayName: "šwēdiskan",
    nativeDisplayName: "svenska"
}, {
    id: "tr",
    displayName: "turkiskan",
    nativeDisplayName: "Türkçe"
}, {
    id: "de_at",
    displayName: "Āustrarīkis miksiskan",
    nativeDisplayName: "Österreichisches Deutsch"
}, {
    id: "el",
    displayName: "grēkiskan",
    nativeDisplayName: "Ελληνικά"
}, {
    id: "ru",
    displayName: "maskōwitiskan",
    nativeDisplayName: "русский"
}, {
    id: "ar",
    displayName: "arābiskan",
    nativeDisplayName: "العربية"
}, {
    id: "zh",
    displayName: "kīniskan",
    nativeDisplayName: "中文"
}, {
    id: "ja",
    displayName: "japāniskan",
    nativeDisplayName: "日本語"
}, {
    id: "zh_hans",
    displayName: "prastintan kīniskan",
    nativeDisplayName: "简体中文"
}, {
    id: "zh_hant",
    displayName: "tradiciōnalin kīniskan",
    nativeDisplayName: "繁體中文"
} ];

inter.scripts = [ {
    id: "Arab",
    displayName: "arābiskan"
}, {
    id: "Cyrl",
    displayName: "cīriliskan"
}, {
    id: "Jpan",
    displayName: "japāniskas"
}, {
    id: "Latn",
    displayName: "lātiniskan"
}, {
    id: "Zxxx",
    displayName: "nienpeisātan"
}, {
    id: "Zzzz",
    displayName: "niwaīstan skriptan"
}, {
    id: "Hans",
    displayName: "prastintan"
}, {
    id: "Hant",
    displayName: "tradiciōnalin"
} ];

inter.currencies = [ {
    id: "USD",
    displayName: "APW dālars",
    symbol: "US$",
    zero: "APW dālaran",
    one: "APW dālars",
    other: "APW dālarai"
}, {
    id: "BRL",
    displayName: "Brazīlijas reals",
    symbol: "R$",
    zero: "Brazīlijas realin",
    one: "Brazīlijas reals",
    other: "Brazīlijas realai"
}, {
    id: "JPY",
    displayName: "Japānijas jāns",
    symbol: "JP¥",
    zero: "Japānijas jānan",
    one: "Japānijas jāns",
    other: "Japānijas jānai"
}, {
    id: "CNY",
    displayName: "Kīnas juāns",
    symbol: "CN¥",
    zero: "Kīnas juānan",
    one: "Kīnas juāns",
    other: "Kīnas juānai"
}, {
    id: "RUB",
    displayName: "Russis rūbels",
    symbol: "₽",
    zero: "Russis rūblin",
    one: "Russis rūbels",
    other: "Russis rūblai"
}, {
    id: "EUR",
    displayName: "eurō",
    symbol: "€",
    zero: "eurō",
    one: "eurō",
    other: "eurō"
}, {
    id: "XXX",
    displayName: "niwaistā walūta",
    zero: "(niwaistā walūta)",
    one: "(niwaistā walūtas aīnibi)",
    other: "(niwaistā walūta)"
}, {
    id: "GBP",
    displayName: "punds sterlings",
    symbol: "£",
    zero: "pundan sterlingan",
    one: "punds sterlings",
    other: "pundai sterlingai"
}, {
    id: "INR",
    displayName: "Īndijas rūpija",
    symbol: "₹",
    zero: "Īndijas rūpijan",
    one: "Īndijas rūpija",
    other: "Īndijas rūpijas"
} ];

module.exports = inter;