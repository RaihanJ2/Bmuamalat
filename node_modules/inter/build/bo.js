function defaults(targetObj) {
    for (var i = 1; i < arguments.length; i += 1) {
        if (arguments[i] && typeof arguments[i] === "object") {
            for (var propertyName in arguments[i]) {
                if (typeof targetObj[propertyName] === "undefined") {
                    targetObj[propertyName] = arguments[i][propertyName];
                }
            }
        }
    }
    return targetObj;
}

var P = require("./root.js"), inter = defaults({
    renderers: {}
}, P);

var _acl51 = {
    all: {
        leap: "{0}bis"
    }
}, _acl52 = {
    displayName: "ལོ་རིམ།"
}, _acl53 = {
    displayName: "དུས་ཚོད།"
}, _acl54 = {
    a: "h a – h a",
    h: "h–h a"
}, _acl55 = [ "Before R.O.C.", "R.O.C." ], _acl56 = {
    am: "སྔ་དྲོ་",
    pm: "ཕྱི་དྲོ་"
}, _acl57 = [ "སྤྱི་ལོ་སྔོན་", "སྤྱི་ལོ་" ], _acl58 = {
    a: "h a – h a v",
    h: "h–h a v"
}, _acl59 = {
    displayName: "གཟའ་འཁོར་གཅིག"
}, _acl510 = {
    d: "MMM d–d",
    M: "MMM d – MMM d"
}, _acl511 = {
    displayName: "སྔ་དྲོ། ཕྱི་དྲོ།"
}, _acl512 = {
    wide: [ "AH" ],
    abbreviated: [ "AH" ]
}, _acl513 = {
    H: "HH:mm–HH:mm",
    m: "HH:mm–HH:mm"
}, _acl514 = {
    M: "y-MM – y-MM",
    y: "y-MM – y-MM"
}, _acl515 = {
    M: "U MMM–MMM",
    y: "U MMM – U MMM"
}, _acl516 = {
    H: "HH:mm–HH:mm v",
    m: "HH:mm–HH:mm v"
}, _acl517 = {
    d: "MM-dd – MM-dd",
    M: "MM-dd – MM-dd"
}, _acl518 = {
    M: "G y MMM–MMM",
    y: "G y MMM – y MMM"
}, _acl519 = {
    M: "U MMMM–MMMM",
    y: "U MMMM – U MMMM"
}, _acl520 = {
    M: "G y MMMM–MMMM",
    y: "G y MMMM – y MMMM"
}, _acl521 = [ "ཉི", "ཟླ", "མིག", "ལྷག", "ཕུར", "སངས", "སྤེན" ], _acl522 = {
    M: "GGGGG y-MM – y-MM",
    y: "GGGGG y-MM – y-MM"
}, _acl523 = {
    "0": "this year",
    "1": "next year",
    "-1": "last year"
}, _acl524 = {
    "0": "this week",
    "1": "next week",
    "-1": "last week"
}, _acl525 = {
    future: {
        other: "+{0} y"
    },
    past: {
        other: "-{0} y"
    }
}, _acl526 = {
    future: {
        other: "+{0} m"
    },
    past: {
        other: "-{0} m"
    }
}, _acl527 = {
    future: {
        other: "+{0} w"
    },
    past: {
        other: "-{0} w"
    }
}, _acl528 = {
    future: {
        other: "+{0} d"
    },
    past: {
        other: "-{0} d"
    }
}, _acl529 = {
    future: {
        other: "+{0} h"
    },
    past: {
        other: "-{0} h"
    }
}, _acl530 = {
    future: {
        other: "+{0} s"
    },
    past: {
        other: "-{0} s"
    }
}, _acl531 = {
    future: {
        other: "+{0} Q"
    },
    past: {
        other: "-{0} Q"
    }
}, _acl532 = {
    d: "MM-dd, E – MM-dd, E",
    M: "MM-dd, E – MM-dd, E"
}, _acl533 = {
    d: "MMM d, E – MMM d, E",
    M: "MMM d, E – MMM d, E"
}, _acl534 = {
    "0": "this month",
    "1": "next month",
    "-1": "last month"
}, _acl535 = {
    wide: [ "ERA0", "ERA1" ],
    abbreviated: [ "ERA0", "ERA1" ]
}, _acl536 = {
    future: {
        other: "+{0} min"
    },
    past: {
        other: "-{0} min"
    }
}, _acl537 = [ "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" ], _acl538 = {
    "0": "this Sunday",
    "1": "next Sunday",
    "-1": "last Sunday"
}, _acl539 = {
    "0": "this Monday",
    "1": "next Monday",
    "-1": "last Monday"
}, _acl540 = {
    "0": "this Friday",
    "1": "next Friday",
    "-1": "last Friday"
}, _acl541 = {
    a: "h:mm a – h:mm a",
    h: "h:mm–h:mm a",
    m: "h:mm–h:mm a"
}, _acl542 = {
    id: "001",
    displayName: "འཛམ་གླིང་།",
    hasTimeZones: false
}, _acl543 = {
    "0": "this quarter",
    "1": "next quarter",
    "-1": "last quarter"
}, _acl544 = {
    "0": "this Tuesday",
    "1": "next Tuesday",
    "-1": "last Tuesday"
}, _acl545 = {
    d: "U MMM d–d",
    M: "U MMM d – MMM d",
    y: "U MMM d – U MMM d"
}, _acl546 = [ "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13" ], _acl547 = {
    "0": "this Thursday",
    "1": "next Thursday",
    "-1": "last Thursday"
}, _acl548 = {
    "0": "this Saturday",
    "1": "next Saturday",
    "-1": "last Saturday"
}, _acl549 = {
    a: "h:mm a – h:mm a v",
    h: "h:mm–h:mm a v",
    m: "h:mm–h:mm a v"
}, _acl550 = {
    "0": "this Wednesday",
    "1": "next Wednesday",
    "-1": "last Wednesday"
}, _acl551 = {
    id: "TD",
    displayName: "ཅཻཌ།",
    regionId: "017",
    hasTimeZones: true
}, _acl552 = {
    id: "GH",
    displayName: "གྷ་ན།",
    regionId: "011",
    hasTimeZones: true
}, _acl553 = {
    id: "PW",
    displayName: "པ་ལཽ།",
    regionId: "057",
    hasTimeZones: true
}, _acl554 = {
    id: "ML",
    displayName: "མ་ལི།",
    regionId: "011",
    hasTimeZones: true
}, _acl555 = {
    id: "MT",
    displayName: "མལ་ཊ།",
    regionId: "039",
    hasTimeZones: true
}, _acl556 = {
    id: "AQ",
    displayName: "ལྷོ་རྩེའི་མཐའ་གླིང་།",
    hasTimeZones: true
}, _acl557 = {
    d: "G y MMM d–d",
    M: "G y MMM d – MMM d",
    y: "G y MMM d – y MMM d"
}, _acl558 = {
    relative: _acl538
}, _acl559 = {
    relative: _acl539
}, _acl560 = {
    relative: _acl540
}, _acl561 = {
    id: "QA",
    displayName: "ཀ་ཏཱར།",
    regionId: "145",
    hasTimeZones: true
}, _acl562 = {
    id: "CL",
    displayName: "ཅི་ལི།",
    regionId: "005",
    hasTimeZones: true
}, _acl563 = {
    id: "TR",
    displayName: "ཏུརཀི།",
    regionId: "145",
    hasTimeZones: true
}, _acl564 = {
    id: "NR",
    displayName: "ནཽ་རུ།",
    regionId: "057",
    hasTimeZones: true
}, _acl565 = {
    id: "PE",
    displayName: "པེ་རུ།",
    regionId: "005",
    hasTimeZones: true
}, _acl566 = {
    id: "FJ",
    displayName: "ཕི་ཇི།",
    regionId: "054",
    hasTimeZones: true
}, _acl567 = {
    id: "MM",
    displayName: "འབར་མ།",
    regionId: "035",
    hasTimeZones: true
}, _acl568 = {
    id: "CN",
    displayName: "རྒྱ་ནག",
    regionId: "030",
    hasTimeZones: true
}, _acl569 = {
    id: "ES",
    displayName: "སི་པན།",
    regionId: "039",
    hasTimeZones: true
}, _acl570 = {
    id: "HT",
    displayName: "ཧེ་ཏི།",
    regionId: "029",
    hasTimeZones: true
}, _acl571 = {
    id: "IQ",
    displayName: "ཨི་རག།",
    regionId: "145",
    hasTimeZones: true
}, _acl572 = {
    id: "OM",
    displayName: "ཨོ་མན།",
    regionId: "145",
    hasTimeZones: true
}, _acl573 = {
    id: "CA",
    displayName: "ཁེ་ན་ཌ།",
    regionId: "021",
    hasTimeZones: true
}, _acl574 = {
    id: "GA",
    displayName: "གེ་བཽན།",
    regionId: "017",
    hasTimeZones: true
}, _acl575 = {
    id: "JO",
    displayName: "ཇོར་ཌན།",
    regionId: "145",
    hasTimeZones: true
}, _acl576 = {
    id: "JP",
    displayName: "ཉི་ཧོང་",
    regionId: "030",
    hasTimeZones: true
}, _acl577 = {
    id: "NE",
    displayName: "ནའི་ཇར།",
    regionId: "011",
    hasTimeZones: true
}, _acl578 = {
    id: "NU",
    displayName: "ནིའུ་ཝ།",
    regionId: "061",
    hasTimeZones: true
}, _acl579 = {
    id: "NO",
    displayName: "ནོར་ཝེ།",
    regionId: "154",
    hasTimeZones: true
}, _acl580 = {
    id: "PA",
    displayName: "པ་ནཱ་མ།",
    regionId: "013",
    hasTimeZones: true
}, _acl581 = {
    id: "PL",
    displayName: "པོ་ལནྜ།",
    regionId: "151",
    hasTimeZones: true
}, _acl582 = {
    id: "NP",
    displayName: "བལ་ཡུལ་",
    regionId: "034",
    hasTimeZones: true
}, _acl583 = {
    id: "BZ",
    displayName: "བེ་ལིཛ།",
    regionId: "013",
    hasTimeZones: true
}, _acl584 = {
    id: "MO",
    displayName: "མེ་ཀའོ།",
    regionId: "030",
    hasTimeZones: true
}, _acl585 = {
    id: "JM",
    displayName: "ཛ་མེ་ཀ།",
    regionId: "029",
    hasTimeZones: true
}, _acl586 = {
    id: "DE",
    displayName: "འཇར་མན་",
    regionId: "155",
    hasTimeZones: true
}, _acl587 = {
    id: "UA",
    displayName: "ཡུ་ཀྲན།",
    regionId: "151",
    hasTimeZones: true
}, _acl588 = {
    id: "YE",
    displayName: "ཡེ་མེན།",
    regionId: "145",
    hasTimeZones: true
}, _acl589 = {
    id: "IN",
    displayName: "རྒྱ་གར་",
    regionId: "034",
    hasTimeZones: true
}, _acl590 = {
    id: "LA",
    displayName: "ལཱ་འོས།",
    regionId: "035",
    hasTimeZones: true
}, _acl591 = {
    id: "SC",
    displayName: "སཱ་ཤཻལ།",
    regionId: "014",
    hasTimeZones: true
}, _acl592 = {
    id: "SD",
    displayName: "སུ་དཱན།",
    regionId: "015",
    hasTimeZones: true
}, _acl593 = {
    id: "HU",
    displayName: "ཧངྒ་རི།",
    regionId: "151",
    hasTimeZones: true
}, _acl594 = {
    id: "NL",
    displayName: "ཧའོ་ལན།",
    regionId: "155",
    hasTimeZones: true
}, _acl595 = {
    id: "AW",
    displayName: "ཨ་རུ་བ།",
    regionId: "029",
    hasTimeZones: true
}, _acl596 = {
    id: "IR",
    displayName: "ཨི་རཱན།",
    regionId: "034",
    hasTimeZones: true
}, _acl597 = {
    id: "CU",
    displayName: "ཁྱུའུ་བ།",
    regionId: "029",
    hasTimeZones: true
}, _acl598 = {
    id: "TV",
    displayName: "ཐུ་ཝ་ལུ།",
    regionId: "061",
    hasTimeZones: true
}, _acl599 = {
    id: "PY",
    displayName: "པཱ་ར་གེ།",
    regionId: "005",
    hasTimeZones: true
}, _acl5100 = {
    id: "BM",
    displayName: "བར་མུ་ཌ།",
    regionId: "021",
    hasTimeZones: true
}, _acl5101 = {
    id: "BJ",
    displayName: "བཱེ་ནིན།",
    regionId: "011",
    hasTimeZones: true
}, _acl5102 = {
    id: "BW",
    displayName: "བོཙ་ཝ་ན།",
    regionId: "018",
    hasTimeZones: true
}, _acl5103 = {
    id: "BS",
    displayName: "བྷཱ་མས྄།",
    regionId: "029",
    hasTimeZones: true
}, _acl5104 = {
    id: "BH",
    displayName: "བྷཱ་རེན།",
    regionId: "145",
    hasTimeZones: true
}, _acl5105 = {
    id: "MV",
    displayName: "མལ་དྭིབ།",
    regionId: "034",
    hasTimeZones: true
}, _acl5106 = {
    id: "MC",
    displayName: "མོ་ན་ཀོ།",
    regionId: "155",
    hasTimeZones: true
}, _acl5107 = {
    id: "ZM",
    displayName: "ཛམ་བི་ཡ།",
    regionId: "014",
    hasTimeZones: true
}, _acl5108 = {
    id: "UG",
    displayName: "ཡུ་གན་ཌ།",
    regionId: "014",
    hasTimeZones: true
}, _acl5109 = {
    id: "RW",
    displayName: "རུ་ཝན་ཌ།",
    regionId: "014",
    hasTimeZones: true
}, _acl5110 = {
    id: "LV",
    displayName: "ལཏ་བི་ཡ།",
    regionId: "154",
    hasTimeZones: true
}, _acl5111 = {
    id: "LY",
    displayName: "ལི་བི་ཡ།",
    regionId: "015",
    hasTimeZones: true
}, _acl5112 = {
    id: "LB",
    displayName: "ལེབ་ནོན།",
    regionId: "145",
    hasTimeZones: true
}, _acl5113 = {
    id: "MN",
    displayName: "སོག་ཡུལ།",
    regionId: "030",
    hasTimeZones: true
}, _acl5114 = {
    id: "AO",
    displayName: "ཨང་གཽ་ལ།",
    regionId: "017",
    hasTimeZones: true
}, _acl5115 = {
    id: "AT",
    displayName: "ཨསྟྲི་ཡ།",
    regionId: "155",
    hasTimeZones: true
}, _acl5116 = {
    id: "EG",
    displayName: "ཨི་ཇིབྚ།",
    regionId: "015",
    hasTimeZones: true
}, _acl5117 = [ "ཉི་མ་", "ཟླ་བ་", "མིག་དམར་", "ལྷག་པ་", "ཕུར་བུ་", "པ་སངས་", "སྤེན་པ་" ], _acl5118 = {
    relative: _acl544
}, _acl5119 = {
    id: "CM",
    displayName: "ཀ་མེ་རུན།",
    regionId: "017",
    hasTimeZones: true
}, _acl5120 = {
    id: "KE",
    displayName: "ཁེན་ཉི་ཡ།",
    regionId: "014",
    hasTimeZones: true
}, _acl5121 = {
    id: "GM",
    displayName: "གྷམ་བི་ཡ།",
    regionId: "011",
    hasTimeZones: true
}, _acl5122 = {
    id: "GN",
    displayName: "གྷི་ནི་ཡ།",
    regionId: "011",
    hasTimeZones: true
}, _acl5123 = {
    id: "GY",
    displayName: "གྷུ་ཡཱ་ན།",
    regionId: "005",
    hasTimeZones: true
}, _acl5124 = {
    id: "GE",
    displayName: "ཇོར་ཇི་ཡ།",
    regionId: "145",
    hasTimeZones: true
}, _acl5125 = {
    id: "DK",
    displayName: "ཌེན་མཱརྐ།",
    regionId: "154",
    hasTimeZones: true
}, _acl5126 = {
    id: "GB",
    displayName: "དབྱིན་ཇི་",
    regionId: "154",
    hasTimeZones: true
}, _acl5127 = {
    id: "PK",
    displayName: "པཀི་སྟཱན།",
    regionId: "034",
    hasTimeZones: true
}, _acl5128 = {
    id: "FR",
    displayName: "ཕ་རཱན་སི།",
    regionId: "155",
    hasTimeZones: true
}, _acl5129 = {
    id: "FI",
    displayName: "ཕིན་ལན྄ཌ།",
    regionId: "154",
    hasTimeZones: true
}, _acl5130 = {
    id: "BR",
    displayName: "བ་རཱ་ཛིལ།",
    regionId: "005",
    hasTimeZones: true
}, _acl5131 = {
    id: "VN",
    displayName: "བི་དི་ནམ།",
    regionId: "035",
    hasTimeZones: true
}, _acl5132 = {
    id: "BN",
    displayName: "བུ་རུ་ནེ།",
    regionId: "035",
    hasTimeZones: true
}, _acl5133 = {
    id: "MW",
    displayName: "མཱ་ལཱ་ཝི།",
    regionId: "014",
    hasTimeZones: true
}, _acl5134 = {
    id: "MU",
    displayName: "མཽ་རིཤས྄།",
    regionId: "014",
    hasTimeZones: true
}, _acl5135 = {
    id: "DJ",
    displayName: "ཛི་བུ་ཏི།",
    regionId: "014",
    hasTimeZones: true
}, _acl5136 = {
    id: "VA",
    displayName: "ཝེ་ཊི་ཀན།",
    regionId: "039",
    hasTimeZones: true
}, _acl5137 = {
    id: "LS",
    displayName: "ལེ་སོ་ཐོ།",
    regionId: "018",
    hasTimeZones: true
}, _acl5138 = {
    id: "SK",
    displayName: "ས་ལཽ་ཝཀྱ།",
    regionId: "151",
    hasTimeZones: true
}, _acl5139 = {
    id: "SG",
    displayName: "སིངྒ་པུར།",
    regionId: "035",
    hasTimeZones: true
}, _acl5140 = {
    id: "RS",
    displayName: "སེར་བི་ཡ།",
    regionId: "039",
    hasTimeZones: true
}, _acl5141 = {
    id: "HK",
    displayName: "ཧོང་ཀོང༌།",
    regionId: "030",
    hasTimeZones: true
}, _acl5142 = {
    id: "CH",
    displayName: "ཧྲུད་ཧྲི།",
    regionId: "155",
    hasTimeZones: true
}, _acl5143 = {
    id: "SE",
    displayName: "ཧྲུའི་ཏན།",
    regionId: "154",
    hasTimeZones: true
}, _acl5144 = {
    id: "IE",
    displayName: "ཨ་ཡར་ལནཌ།",
    regionId: "154",
    hasTimeZones: true
}, _acl5145 = {
    id: "RU",
    displayName: "ཨུ་རུ་སུ་",
    regionId: "151",
    hasTimeZones: true
}, _acl5146 = {
    id: "AD",
    displayName: "ཨེན་ཌོ་ར།",
    regionId: "039",
    hasTimeZones: true
}, _acl5147 = {
    "0": "དེ་རིང་",
    "1": "སང་ཉིན་",
    "2": "གནངས་ཉིན་",
    "-2": "ཁས་ཉིན་",
    "-1": "ཁས་ས་"
}, _acl5148 = {
    d: "y-MM-dd – y-MM-dd",
    M: "y-MM-dd – y-MM-dd",
    y: "y-MM-dd – y-MM-dd"
}, _acl5149 = {
    id: "HR",
    displayName: "ཀུརོ་ཤི་ཡ།",
    regionId: "039",
    hasTimeZones: true
}, _acl5150 = {
    id: "GD",
    displayName: "གྷ་རི་ན་ཌ།",
    regionId: "029",
    hasTimeZones: true
}, _acl5151 = {
    id: "NA",
    displayName: "ན་མི་བི་ཡ།",
    regionId: "018",
    hasTimeZones: true
}, _acl5152 = {
    id: "BD",
    displayName: "བངྒ་ལ་དེཤ།",
    regionId: "034",
    hasTimeZones: true
}, _acl5153 = {
    id: "BB",
    displayName: "བཱརྦ་ཌོས྄།",
    regionId: "029",
    hasTimeZones: true
}, _acl5154 = {
    id: "BI",
    displayName: "བུ་རུན་ཌི།",
    regionId: "014",
    hasTimeZones: true
}, _acl5155 = {
    id: "BE",
    displayName: "བེལ་ཇི་ཡམ།",
    regionId: "155",
    hasTimeZones: true
}, _acl5156 = {
    id: "BO",
    displayName: "བོ་ལི་ཝིཡ།",
    regionId: "005",
    hasTimeZones: true
}, _acl5157 = {
    id: "MY",
    displayName: "མ་ལེ་ཤི་ཡ།",
    regionId: "035",
    hasTimeZones: true
}, _acl5158 = {
    id: "MX",
    displayName: "མེཀ་སི་ཀོ།",
    regionId: "013",
    hasTimeZones: true
}, _acl5159 = {
    id: "MZ",
    displayName: "མོ་ཛམ་བིག།",
    regionId: "014",
    hasTimeZones: true
}, _acl5160 = {
    id: "MA",
    displayName: "མོ་རོ་ཀྐོ།",
    regionId: "015",
    hasTimeZones: true
}, _acl5161 = {
    id: "VU",
    displayName: "ཝ་ནུ་ཨ་ཐུ།",
    regionId: "054",
    hasTimeZones: true
}, _acl5162 = {
    id: "BT",
    displayName: "འབྲུག་ཡུལ།",
    regionId: "034",
    hasTimeZones: true
}, _acl5163 = {
    id: "RO",
    displayName: "རོ་མཱ་ནིཡ།",
    regionId: "151",
    hasTimeZones: true
}, _acl5164 = {
    id: "LK",
    displayName: "ཤྲཱི་ལངྐ་།",
    regionId: "034",
    hasTimeZones: true
}, _acl5165 = {
    id: "SR",
    displayName: "སུ་རི་ནཱམ།",
    regionId: "005",
    hasTimeZones: true
}, _acl5166 = {
    id: "SN",
    displayName: "སེ་ནི་གྷལ།",
    regionId: "011",
    hasTimeZones: true
}, _acl5167 = {
    id: "SO",
    displayName: "སོ་མཱལི་ཡ།",
    regionId: "014",
    hasTimeZones: true
}, _acl5168 = {
    id: "US",
    displayName: "ཨ་མེ་རི་ཀ།",
    regionId: "021",
    hasTimeZones: true
}, _acl5169 = {
    id: "AI",
    displayName: "ཨང་གུའི་ལ།",
    regionId: "029",
    hasTimeZones: true
}, _acl5170 = {
    id: "IT",
    displayName: "ཨི་ཀྲར་ལི་",
    regionId: "039",
    hasTimeZones: true
}, _acl5171 = {
    id: "EC",
    displayName: "ཨི་ཁྭ་ཌོར།",
    regionId: "005",
    hasTimeZones: true
}, _acl5172 = {
    id: "IL",
    displayName: "ཨི་ཛ྄་རེལ།",
    regionId: "145",
    hasTimeZones: true
}, _acl5173 = {
    id: "UY",
    displayName: "ཨུ་རུ་གྷེ།",
    regionId: "005",
    hasTimeZones: true
}, _acl5174 = {
    id: "KH",
    displayName: "ཀམ་བོ་ཌི་ཡ།",
    regionId: "035",
    hasTimeZones: true
}, _acl5175 = {
    id: "KZ",
    displayName: "ཁ་ཛཱག་སྟཱན།",
    regionId: "143",
    hasTimeZones: true
}, _acl5176 = {
    id: "GR",
    displayName: "གྷི་རཱི་སི།",
    regionId: "039",
    hasTimeZones: true
}, _acl5177 = {
    id: "GT",
    displayName: "གྷོ་ཊེ་མ་ལ།",
    regionId: "013",
    hasTimeZones: true
}, _acl5178 = {
    id: "GI",
    displayName: "ཇིབ་རཱལ་ཊར།",
    regionId: "039",
    hasTimeZones: true
}, _acl5179 = {
    id: "PT",
    displayName: "པོར་ཏུ་གྷལ།",
    regionId: "039",
    hasTimeZones: true
}, _acl5180 = {
    id: "BG",
    displayName: "བུལ་ག་རི་ཡ།",
    regionId: "151",
    hasTimeZones: true
}, _acl5181 = {
    id: "ZW",
    displayName: "ཛིམ་བྷཱ་བེ།",
    regionId: "014",
    hasTimeZones: true
}, _acl5182 = {
    id: "LU",
    displayName: "ལཀ་ཛམ་བོརྒ།",
    regionId: "155",
    hasTimeZones: true
}, _acl5183 = {
    id: "LR",
    displayName: "ལི་བེ་རི་ཡ།",
    regionId: "011",
    hasTimeZones: true
}, _acl5184 = {
    id: "CY",
    displayName: "སཱཡེ་པ་རས྄།",
    regionId: "145",
    hasTimeZones: true
}, _acl5185 = {
    id: "HN",
    displayName: "ཧོན་དུ་རས྄།",
    regionId: "013",
    hasTimeZones: true
}, _acl5186 = {
    id: "AZ",
    displayName: "ཨཛར་བཡེ་ཇན།",
    regionId: "145",
    hasTimeZones: true
}, _acl5187 = {
    id: "AM",
    displayName: "ཨར་མེ་ནི་ཡ།",
    regionId: "145",
    hasTimeZones: true
}, _acl5188 = {
    id: "DZ",
    displayName: "ཨལ་ཇི་རི་ཡ།",
    regionId: "015",
    hasTimeZones: true
}, _acl5189 = {
    id: "AL",
    displayName: "ཨལ་བཱ་ནི་ཡ།",
    regionId: "039",
    hasTimeZones: true
}, _acl5190 = {
    id: "AU",
    displayName: "ཨསྟྲེ་ལི་ཡ།",
    regionId: "053",
    hasTimeZones: true
}, _acl5191 = {
    id: "EE",
    displayName: "ཨིསྟོ་ནི་ཡ།",
    regionId: "154",
    hasTimeZones: true
}, _acl5192 = {
    relative: _acl547
}, _acl5193 = {
    relative: _acl548
}, _acl5194 = {
    id: "KI",
    displayName: "ཀི་རི་བཱ་ཏི།",
    regionId: "057",
    hasTimeZones: true
}, _acl5195 = {
    id: "CO",
    displayName: "ཀོ་ལོམ་བི་ཡ།",
    regionId: "005",
    hasTimeZones: true
}, _acl5196 = {
    id: "CR",
    displayName: "ཀོ་ས྄ཊ་རི་ཀ།",
    regionId: "013",
    hasTimeZones: true
}, _acl5197 = {
    id: "DM",
    displayName: "ཌོ་མིན་ནི་ཀ།",
    regionId: "029",
    hasTimeZones: true
}, _acl5198 = {
    id: "NI",
    displayName: "ནི་ཀ་ར་གུ་ཨ།",
    regionId: "013",
    hasTimeZones: true
}, _acl5199 = {
    id: "WS",
    displayName: "ནུ་བ་ས་མོ་འ།",
    regionId: "061",
    hasTimeZones: true
}, _acl5200 = {
    id: "PH",
    displayName: "ཕི་ལི་པིནས྄།",
    regionId: "035",
    hasTimeZones: true
}, _acl5201 = {
    id: "BF",
    displayName: "བརཀི་ན། ཕསོ།",
    regionId: "011",
    hasTimeZones: true
}, _acl5202 = {
    id: "BY",
    displayName: "བེ་ལུ་རུ་སུ།",
    regionId: "151",
    hasTimeZones: true
}, _acl5203 = {
    id: "MG",
    displayName: "མ་དཱ་གྷསྐཱར།",
    regionId: "014",
    hasTimeZones: true
}, _acl5204 = {
    id: "LI",
    displayName: "ལེག་ཏེན་ཚིན།",
    regionId: "155",
    hasTimeZones: true
}, _acl5205 = {
    id: "ZA",
    displayName: "ལྷོ་ ཨཕྲི་ཀ།",
    regionId: "018",
    hasTimeZones: true
}, _acl5206 = {
    id: "KR",
    displayName: "ལྷོ་ཀོ་རི་ཡ།",
    regionId: "030",
    hasTimeZones: true
}, _acl5207 = {
    id: "SM",
    displayName: "སན་མེ་རི་ནོ།",
    regionId: "039",
    hasTimeZones: true
}, _acl5208 = {
    id: "IS",
    displayName: "ཨ་ཨི་སི་ལནད།",
    regionId: "154",
    hasTimeZones: true
}, _acl5209 = {
    id: "AR",
    displayName: "ཨར་ཇེན་ཊི་ན།",
    regionId: "005",
    hasTimeZones: true
}, _acl5210 = {
    id: "ER",
    displayName: "ཨེ་རི་ཏྲེ་ཨ།",
    regionId: "014",
    hasTimeZones: true
}, _acl5211 = {
    id: "KG",
    displayName: "ཁིར་གིཛ་སྟཱན།",
    regionId: "143",
    hasTimeZones: true
}, _acl5212 = {
    id: "NG",
    displayName: "ནཱའི་ཇི་རི་ཡ།",
    regionId: "011",
    hasTimeZones: true
}, _acl5213 = {
    id: "NZ",
    displayName: "ནིའུ་ཛི་ལན྄ཌ།",
    regionId: "053",
    hasTimeZones: true
}, _acl5214 = {
    id: "MR",
    displayName: "མཽ་རི་ཏ་ནི་ཡ།",
    regionId: "011",
    hasTimeZones: true
}, _acl5215 = {
    id: "VE",
    displayName: "ཝེ་ནི་ཛུའེ་ལ།",
    regionId: "005",
    hasTimeZones: true
}, _acl5216 = {
    id: "SI",
    displayName: "ས་ལཽ་ཝེ་ནི་ཡ།",
    regionId: "039",
    hasTimeZones: true
}, _acl5217 = {
    id: "AF",
    displayName: "ཨཕ་ག་ནི་སྟཱན།",
    regionId: "034",
    hasTimeZones: true
}, _acl5218 = {
    id: "ET",
    displayName: "ཨི་ཐིའོ་པི་ཡ།",
    regionId: "014",
    hasTimeZones: true
}, _acl5219 = {
    abbreviated: {
        leap: "{0}bis"
    },
    narrow: {
        leap: "{0}b"
    },
    wide: {
        leap: "{0}bis"
    }
}, _acl5220 = {
    id: "LT",
    displayName: "ལི་ཐུ་ཨེ་ནི་ཡ།",
    regionId: "154",
    hasTimeZones: true
}, _acl5221 = {
    id: "LC",
    displayName: "སེནྚ། ལུ་ཤི་ཡ།",
    regionId: "029",
    hasTimeZones: true
}, _acl5222 = {
    id: "SH",
    displayName: "སེནྚ། ཧེ་ལི་ན།",
    regionId: "011",
    hasTimeZones: true
}, _acl5223 = {
    id: "UZ",
    displayName: "ཨུཛ་བེ་ཀིསྟཱན།",
    regionId: "143",
    hasTimeZones: true
}, _acl5224 = {
    relative: _acl550
}, _acl5225 = {
    id: "KW",
    displayName: "ཀུ་ཝེད་རྒྱལ་ཁབ།",
    regionId: "145",
    hasTimeZones: true
}, _acl5226 = {
    id: "150",
    displayName: "ཡུ་རོབ།",
    hasTimeZones: false,
    parentRegionId: "001"
}, _acl5227 = {
    id: "SL",
    displayName: "སེ་ཡར་ར། ལིའོན།",
    regionId: "011",
    hasTimeZones: true
}, _acl5228 = {
    id: "002",
    displayName: "ཨཕྲི་ཀ།",
    hasTimeZones: false,
    parentRegionId: "001"
}, _acl5229 = {
    id: "ID",
    displayName: "ཨིན་ཌོ་ནེ་ཤི་ཡ།",
    regionId: "035",
    hasTimeZones: true
}, _acl5230 = {
    id: "SV",
    displayName: "ཨེལ། སཱལ་ཝ་ཌོར།",
    regionId: "013",
    hasTimeZones: true
}, _acl5231 = [ "M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12" ], _acl5232 = {
    id: "KY",
    displayName: "ཁེ་མེན་གླིང་ཕྲན།",
    regionId: "029",
    hasTimeZones: true
}, _acl5233 = {
    id: "142",
    displayName: "ཨེ་ཤི་ཡ།",
    hasTimeZones: false,
    parentRegionId: "001"
}, _acl5234 = {
    id: "GW",
    displayName: "གྷི་ནི་ཡ་བིས྄་སོ།",
    regionId: "011",
    hasTimeZones: true
}, _acl5235 = {
    id: "FK",
    displayName: "ཕལྐ་ལནྜ་གླིང་ཕྲན།",
    regionId: "005",
    hasTimeZones: true
}, _acl5236 = {
    id: "MH",
    displayName: "མཱར་ཤལ་གླིང་ཕྲེན།",
    regionId: "057",
    hasTimeZones: true
}, _acl5237 = {
    id: "SA",
    displayName: "སཽ་དྷི་ཨ་རཱ་བི་ཡ།",
    regionId: "145",
    hasTimeZones: true
}, _acl5238 = [ "དུས་ཚིགས་དང་པོ།", "དུས་ཚིགས་གཉིས་པ།", "དུས་ཚིགས་གསུམ་པ།", "དུས་ཚིགས་བཞི་པ།" ], _acl5239 = [ undefined, "zi", "chou", "yin", "mao", "chen", "si", "wu", "wei", "shen", "you", "xu" ], _acl5240 = {
    id: "CI",
    displayName: "ཀོ་ཊེ་ཌི། ཨི་ཝོ་རེ།",
    regionId: "011",
    hasTimeZones: true
}, _acl5241 = {
    id: "PG",
    displayName: "པ་པུ་ཨ། ནིའུ། གྷི་ནི།",
    regionId: "054",
    hasTimeZones: true
}, _acl5242 = {
    id: "CZ",
    displayName: "ཅཻག་སྤྱི་མཐུན་རྒྱལ་ཁབ།",
    regionId: "151",
    hasTimeZones: true
}, _acl5243 = {
    id: "CK",
    displayName: "ཀཱུག གླིང་ཕྲེན་རྒྱལ་ཁབ།",
    regionId: "061",
    hasTimeZones: true
}, _acl5244 = {
    d: "U MMM d, E – MMM d, E",
    M: "U MMM d, E – MMM d, E",
    y: "U MMM d, E – U MMM d, E"
}, _acl5245 = {
    id: "BA",
    displayName: "བོསྣི་ཡ་དང་ཧརྫོ་གོ་ཝི་ན།",
    regionId: "039",
    hasTimeZones: true
}, _acl5246 = {
    id: "AG",
    displayName: "ཨེན་ཊི་གུ་དང་། བྷར་བུ་ཌ།",
    regionId: "029",
    hasTimeZones: true
}, _acl5247 = {
    id: "SB",
    displayName: "སོ་ལོ་མོན། གླིང་ཕྲན་ཚོ་ཁག།",
    regionId: "054",
    hasTimeZones: true
}, _acl5248 = {
    displayName: "ཆུ་ཚོད་",
    relativeTime: _acl529
}, _acl5249 = {
    id: "KN",
    displayName: "སེནྚ། ཀིཊྚས྄། དང༌། ནེ་བིས྄།",
    regionId: "029",
    hasTimeZones: true
}, _acl5250 = {
    d: "GGGGG y-MM-dd – y-MM-dd",
    M: "GGGGG y-MM-dd – y-MM-dd",
    y: "GGGGG y-MM-dd – y-MM-dd"
}, _acl5251 = {
    d: "y-MM-dd, E – y-MM-dd, E",
    M: "y-MM-dd, E – y-MM-dd, E",
    y: "y-MM-dd, E – y-MM-dd, E"
}, _acl5252 = {
    d: "G y MMM d, E – MMM d, E",
    M: "G y MMM d, E – MMM d, E",
    y: "G y MMM d, E – y MMM d, E"
}, _acl5253 = {
    displayName: "སྐར་མ།",
    relativeTime: _acl536
}, _acl5254 = {
    id: "DO",
    displayName: "ཌོ་མིནནི་ཀན་སྤྱི་མཐུན་རྒྱལ་ཁབ།",
    regionId: "029",
    hasTimeZones: true
}, _acl5255 = {
    id: "ST",
    displayName: "ས་འོ་ཏོད་མད། དང༌། པ྄རིན་སི་པེ།",
    regionId: "017",
    hasTimeZones: true
}, _acl5256 = {
    id: "VC",
    displayName: "སེནྚ། ཝིན་སན། དང༌། གྷིརིན་ཌིན།",
    regionId: "029",
    hasTimeZones: true
}, _acl5257 = [ "ཟླ་༡", "ཟླ་༢", "ཟླ་༣", "ཟླ་༤", "ཟླ་༥", "ཟླ་༦", "ཟླ་༧", "ཟླ་༨", "ཟླ་༩", "ཟླ་༡༠", "ཟླ་༡༡", "ཟླ་༡༢" ], _acl5258 = {
    id: "AE",
    displayName: "ཨ་རབ། ཨི་མི་རཊ྄། ཆིག་སྒྲིལ་རྒྱལ་ཁབ།",
    regionId: "145",
    hasTimeZones: true
}, _acl5259 = [ "གཟའ་ཉི་མ་", "གཟའ་ཟླ་བ་", "གཟའ་མིག་དམར་", "གཟའ་ལྷག་པ་", "གཟའ་ཕུར་བུ་", "གཟའ་པ་སངས་", "གཟའ་སྤེན་པ་" ], _acl5260 = {
    id: "053",
    displayName: "ཨསྟྲེ་ལི་ཡ་དང་། ནིའུ་ཛི་ལན྄ཌ།",
    hasTimeZones: false,
    parentRegionId: "009"
}, _acl5261 = {
    displayName: "སྐར་ཆ།",
    relative: [ "now" ],
    relativeTime: _acl530
}, _acl5262 = {
    d: "GGGGG y-MM-dd, E – y-MM-dd, E",
    M: "GGGGG y-MM-dd, E – y-MM-dd, E",
    y: "GGGGG y-MM-dd, E – y-MM-dd, E"
}, _acl5263 = [ "Muh.", "Saf.", "Rab. I", "Rab. II", "Jum. I", "Jum. II", "Raj.", "Sha.", "Ram.", "Shaw.", "Dhuʻl-Q.", "Dhuʻl-H." ], _acl5264 = [ "Tishri", "Heshvan", "Kislev", "Tevet", "Shevat", "Adar I", "Adar", "Nisan", "Iyar", "Sivan", "Tamuz", "Av", "Elul" ], _acl5265 = [ "Farvardin", "Ordibehesht", "Khordad", "Tir", "Mordad", "Shahrivar", "Mehr", "Aban", "Azar", "Dey", "Bahman", "Esfand" ], _acl5266 = [ "Tout", "Baba", "Hator", "Kiahk", "Toba", "Amshir", "Baramhat", "Baramouda", "Bashans", "Paona", "Epep", "Mesra", "Nasie" ], _acl5267 = {
    abbreviated: _acl56,
    narrow: _acl56,
    wide: _acl56
}, _acl5268 = [ "Meskerem", "Tekemt", "Hedar", "Tahsas", "Ter", "Yekatit", "Megabit", "Miazia", "Genbot", "Sene", "Hamle", "Nehasse", "Pagumen" ], _acl5269 = [ "Chaitra", "Vaisakha", "Jyaistha", "Asadha", "Sravana", "Bhadra", "Asvina", "Kartika", "Agrahayana", "Pausa", "Magha", "Phalguna" ], _acl5270 = [ "Muharram", "Safar", "Rabiʻ I", "Rabiʻ II", "Jumada I", "Jumada II", "Rajab", "Shaʻban", "Ramadan", "Shawwal", "Dhuʻl-Qiʻdah", "Dhuʻl-Hijjah" ], _acl5271 = {
    displayName: "ལོ།",
    relative: _acl523,
    relativeTime: _acl525
}, _acl5272 = {
    displayName: "ཟླ་བ་",
    relative: _acl534,
    relativeTime: _acl526
}, _acl5273 = {
    displayName: "གཟའ་འཁོར།",
    relative: _acl524,
    relativeTime: _acl527
}, _acl5274 = {
    displayName: "Quarter",
    relative: _acl543,
    relativeTime: _acl531
}, _acl5275 = {
    displayName: "ཉིན།",
    relative: _acl5147,
    relativeTime: _acl528
}, _acl5276 = {
    decimal: ".",
    group: ",",
    nan: "NaN",
    list: ";",
    percentSign: "%",
    plusSign: "+",
    minusSign: "-",
    exponential: "E",
    superscriptingExponent: "×",
    perMille: "‰",
    infinity: "∞",
    timeSeparator: ":"
}, _acl5277 = [ "ཟླ་བ་དང་པོ", "ཟླ་བ་གཉིས་པ", "ཟླ་བ་གསུམ་པ", "ཟླ་བ་བཞི་པ", "ཟླ་བ་ལྔ་པ", "ཟླ་བ་དྲུག་པ", "ཟླ་བ་བདུན་པ", "ཟླ་བ་བརྒྱད་པ", "ཟླ་བ་དགུ་པ", "ཟླ་བ་བཅུ་པ", "ཟླ་བ་བཅུ་གཅིག་པ", "ཟླ་བ་བཅུ་གཉིས་པ" ], _acl5278 = {
    decimal: ".",
    group: ",",
    nan: "NaN",
    list: "؛",
    percentSign: "٪",
    plusSign: "‏+",
    minusSign: "‏-",
    exponential: "اس",
    superscriptingExponent: "×",
    perMille: "؉",
    infinity: "∞",
    timeSeparator: ":"
}, _acl5279 = [ "ཟླ་བ་དང་པོ་", "ཟླ་བ་གཉིས་པ་", "ཟླ་བ་གསུམ་པ་", "ཟླ་བ་བཞི་པ་", "ཟླ་བ་ལྔ་པ་", "ཟླ་བ་དྲུག་པ་", "ཟླ་བ་བདུན་པ་", "ཟླ་བ་བརྒྱད་པ་", "ཟླ་བ་དགུ་པ་", "ཟླ་བ་བཅུ་པ་", "ཟླ་བ་བཅུ་གཅིག་པ་", "ཟླ་བ་བཅུ་གཉིས་པ་" ], _acl5280 = {
    symbols: _acl5278
}, _acl5281 = {
    format: _acl5219,
    numeric: _acl51,
    standAlone: _acl5219
}, _acl5282 = {
    abbreviated: _acl5238,
    narrow: [ "1", "2", "3", "4" ],
    wide: _acl5238
}, _acl5283 = {
    symbols: _acl5278,
    digits: "renderSpelloutCardinal"
}, _acl5284 = {
    "1000": {
        other: "0K"
    },
    "10000": {
        other: "00K"
    },
    "100000": {
        other: "000K"
    },
    "1000000": {
        other: "0M"
    },
    "10000000": {
        other: "00M"
    },
    "100000000": {
        other: "000M"
    },
    "1000000000": {
        other: "0G"
    },
    "10000000000": {
        other: "00G"
    },
    "100000000000": {
        other: "000G"
    },
    "1000000000000": {
        other: "0T"
    },
    "10000000000000": {
        other: "00T"
    },
    "100000000000000": {
        other: "000T"
    }
}, _acl5285 = {
    symbols: _acl5278,
    digits: "renderSpelloutCardinalFinancial"
}, _acl5286 = {
    abbreviated: _acl5231,
    narrow: _acl537,
    wide: _acl5231
}, _acl5287 = {
    format: _acl5267,
    standAlone: _acl5267
}, _acl5288 = {
    "1000": {
        other: "¤ 0K"
    },
    "10000": {
        other: "¤ 00K"
    },
    "100000": {
        other: "¤ 000K"
    },
    "1000000": {
        other: "¤ 0M"
    },
    "10000000": {
        other: "¤ 00M"
    },
    "100000000": {
        other: "¤ 000M"
    },
    "1000000000": {
        other: "¤ 0G"
    },
    "10000000000": {
        other: "¤ 00G"
    },
    "100000000000": {
        other: "¤ 000G"
    },
    "1000000000000": {
        other: "¤ 0T"
    },
    "10000000000000": {
        other: "¤ 00T"
    },
    "100000000000000": {
        other: "¤ 000T"
    }
}, _acl5289 = {
    abbreviated: _acl5239,
    narrow: _acl5239,
    wide: _acl5239
}, _acl5290 = {
    format: _acl5289
}, _acl5291 = {
    abbreviated: _acl5264,
    narrow: _acl546,
    wide: _acl5264
}, _acl5292 = {
    abbreviated: _acl5265,
    narrow: _acl537,
    wide: _acl5265
}, _acl5293 = {
    abbreviated: _acl5117,
    narrow: _acl521,
    wide: _acl5259,
    "short": _acl5117
}, _acl5294 = {
    abbreviated: _acl5266,
    narrow: _acl546,
    wide: _acl5266
}, _acl5295 = {
    abbreviated: _acl5263,
    narrow: _acl537,
    wide: _acl5270
}, _acl5296 = {
    abbreviated: _acl5268,
    narrow: _acl546,
    wide: _acl5268
}, _acl5297 = {
    abbreviated: _acl5269,
    narrow: _acl537,
    wide: _acl5269
}, _acl5298 = {
    fullDate: "r(U) MMMM d, EEEE",
    longDate: "r(U) MMMM d",
    mediumDate: "r MMM d",
    shortDate: "r-MM-dd",
    fullTime: "h:mm:ss a zzzz",
    longTime: "h:mm:ss a z",
    mediumTime: "h:mm:ss a",
    shortTime: "h:mm a",
    shortDateTime: "r-MM-dd h:mm a",
    mediumDateTime: "r MMM d h:mm:ss a",
    longDateTime: "r(U) MMMM d h:mm:ss a z",
    fullDateTime: "r(U) MMMM d, EEEE h:mm:ss a zzzz"
}, _acl5299 = {
    abbreviated: _acl5257,
    narrow: _acl537,
    wide: _acl5277
}, _acl5300 = {
    abbreviated: _acl5257,
    narrow: _acl537,
    wide: _acl5279
}, _acl5301 = {
    longDate: "G སྤྱི་ལོ་y MMMMའི་ཚེས་d",
    mediumDate: "G y ལོའི་MMMཚེས་d",
    fullDate: "G y MMMM d, EEEE",
    shortDate: "GGGGG y-MM-dd",
    fullTime: "h:mm:ss a zzzz",
    longTime: "h:mm:ss a z",
    mediumTime: "h:mm:ss a",
    shortTime: "h:mm a",
    shortDateTime: "GGGGG y-MM-dd h:mm a",
    mediumDateTime: "G y ལོའི་MMMཚེས་d h:mm:ss a",
    longDateTime: "G སྤྱི་ལོ་y MMMMའི་ཚེས་d h:mm:ss a z",
    fullDateTime: "G y MMMM d, EEEE h:mm:ss a zzzz"
}, _acl5302 = {
    format: _acl5282,
    standAlone: _acl5282
}, _acl5303 = {
    format: _acl5286,
    standAlone: _acl5286
}, _acl5304 = {
    "long": _acl5284,
    "short": _acl5284,
    "default": "#,##0.###"
}, _acl5305 = {
    d: "d",
    E: "ccc",
    Ed: "d, E",
    Gy: "r U",
    GyMMM: "r(U) MMM",
    GyMMMd: "r MMM d",
    GyMMMEd: "r(U) MMM d, E",
    h: "h a",
    H: "HH",
    hm: "h:mm a",
    Hm: "HH:mm",
    hms: "h:mm:ss a",
    Hms: "HH:mm:ss",
    M: "L",
    Md: "MM-dd",
    MEd: "MM-dd, E",
    MMM: "LLL",
    MMMd: "MMM d",
    MMMEd: "MMM d, E",
    MMMMd: "MMMM d",
    ms: "mm:ss",
    UM: "U MM",
    UMd: "U MM-d",
    UMMM: "U MMM",
    UMMMd: "U MMM d",
    y: "r(U)",
    yMd: "r-MM-dd",
    yyyy: "r(U)",
    yyyyM: "r-MM",
    yyyyMd: "r-MM-dd",
    yyyyMEd: "r-MM-dd, E",
    yyyyMMM: "r(U) MMM",
    yyyyMMMd: "r MMM d",
    yyyyMMMEd: "r(U) MMM d, E",
    yyyyMMMM: "r(U) MMMM",
    yyyyQQQ: "r(U) QQQ",
    yyyyQQQQ: "r(U) QQQQ"
}, _acl5306 = {
    currencyMatch: /[^\u0024+<->\u005E`\u007C~¢-¦¨©¬®-±´¸×÷˂-˅˒-˟˥-˫˭˯-˿͵΄΅϶҂֏؆-؈؋؎؏۞۩۽۾߶৲৳৺৻૱୰௳-௺౿൹฿༁-༃༓༕-༗༚-༟༴༶༸྾-࿅࿇-࿌࿎࿏࿕-࿘႞႟᎐-᎙៛᥀᧞-᧿᭡-᭪᭴-᭼᾽᾿-῁῍-῏῝-῟῭-`´῾⁄⁒⁺-⁼₊-₌₠-₹℀℁℃-℆℈℉℔№-℘℞-℣℥℧℩℮℺℻⅀-⅄⅊-⅍⅏←-⌨⌫-⏳␀-␦⑀-⑊⒜-ⓩ─-⛿✁-❧➔-⟄⟇-⟥⟰-⦂⦙-⧗⧜-⧻⧾-⭌⭐-⭙⳥-⳪⺀-⺙⺛-⻳⼀-⿕⿰-⿻〄〒〓〠〶〷〾〿゛゜㆐㆑㆖-㆟㇀-㇣㈀-㈞㈪-㉇㉐㉠-㉿㊊-㊰㋀-㋾㌀-㏿䷀-䷿꒐-꓆꜀-꜖꜠꜡꞉꞊꠨-꠫꠶-꠹꩷-꩹﬩﮲-﯁﷼﷽﹢﹤-﹦﹩＄＋＜-＞＾｀｜～￠-￦￨-￮￼�]/,
    surroundingMatch: /[0-9²³¹¼-¾٠-٩۰-۹߀-߉०-९০-৯৴-৹੦-੯૦-૯୦-୯୲-୷௦-௲౦-౯౸-౾೦-೯൦-൵๐-๙໐-໙༠-༳၀-၉႐-႙፩-፼ᛮ-ᛰ០-៩៰-៹᠐-᠙᥆-᥏᧐-᧚᪀-᪉᪐-᪙᭐-᭙᮰-᮹᱀-᱉᱐-᱙⁰⁴-⁹₀-₉⅐-ↂↅ-↉①-⒛⓪-⓿❶-➓⳽〇〡-〩〸-〺㆒-㆕㈠-㈩㉈-㉏㉑-㉟㊀-㊉㊱-㊿꘠-꘩ꛦ-ꛯ꠰-꠵꣐-꣙꤀-꤉꧐-꧙꩐-꩙꯰-꯹０-９]/,
    insertBetween: " "
}, _acl5307 = [ undefined, "jia-zi", "yi-chou", "bing-yin", "ding-mao", "wu-chen", "ji-si", "geng-wu", "xin-wei", "ren-shen", "gui-you", "jia-xu", "yi-hai", "bing-zi", "ding-chou", "wu-yin", "ji-mao", "geng-chen", "xin-si", "ren-wu", "gui-wei", "jia-shen", "yi-you", "bing-xu", "ding-hai", "wu-zi", "ji-chou", "geng-yin", "xin-mao", "ren-chen", "gui-si", "jia-wu", "yi-wei", "bing-shen", "ding-you", "wu-xu", "ji-hai", "geng-zi", "xin-chou", "ren-yin", "gui-mao", "jia-chen", "yi-si", "bing-wu", "ding-wei", "wu-shen", "ji-you", "geng-xu", "xin-hai", "ren-zi", "gui-chou", "jia-yin", "yi-mao", "bing-chen", "ding-si", "wu-wu", "ji-wei", "geng-shen", "xin-you", "ren-xu" ], _acl5308 = {
    yMMMd: "G y ལོའི་MMMཚེས་d",
    yMMMMd: "G སྤྱི་ལོ་y MMMMའི་ཚེས་d",
    yyyyMMMd: "G y ལོའི་MMMཚེས་d",
    d: "d",
    E: "ccc",
    Ed: "d, E",
    Ehm: "E h:mm a",
    EHm: "E HH:mm",
    Ehms: "E h:mm:ss a",
    EHms: "E HH:mm:ss",
    Gy: "G y",
    GyMMM: "G y MMM",
    GyMMMd: "G y MMM d",
    GyMMMEd: "G y MMM d, E",
    h: "h a",
    H: "HH",
    hm: "h:mm a",
    Hm: "HH:mm",
    hms: "h:mm:ss a",
    Hms: "HH:mm:ss",
    M: "L",
    Md: "MM-dd",
    MEd: "MM-dd, E",
    MMM: "LLL",
    MMMd: "MMM d",
    MMMEd: "MMM d, E",
    MMMMd: "MMMM d",
    ms: "mm:ss",
    y: "G y",
    yyyy: "G y",
    yyyyM: "GGGGG y-MM",
    yyyyMd: "GGGGG y-MM-dd",
    yyyyMEd: "GGGGG y-MM-dd, E",
    yyyyMMM: "G y MMM",
    yyyyMMMEd: "G y MMM d, E",
    yyyyMMMM: "G y MMMM",
    yyyyQQQ: "G y QQQ",
    yyyyQQQQ: "G y QQQQ"
}, _acl5309 = {
    format: _acl5293,
    standAlone: _acl5293
}, _acl5310 = {
    format: _acl5295,
    standAlone: _acl5295
}, _acl5311 = {
    format: _acl5299,
    standAlone: _acl5300
}, _acl5312 = {
    basic: _acl5298,
    cldr: _acl5305
}, _acl5313 = {
    d: {
        d: "d–d"
    },
    h: _acl54,
    H: {
        H: "HH–HH"
    },
    hm: _acl541,
    Hm: _acl513,
    hmv: _acl549,
    Hmv: _acl516,
    hv: _acl58,
    Hv: {
        H: "HH–HH v"
    },
    M: {
        M: "MM–MM"
    },
    Md: _acl517,
    MEd: _acl532,
    MMM: {
        M: "LLL–LLL"
    },
    MMMd: _acl510,
    MMMEd: _acl533,
    y: {
        y: "U–U"
    },
    yM: _acl514,
    yMd: _acl5148,
    yMEd: _acl5251,
    yMMM: _acl515,
    yMMMd: _acl545,
    yMMMEd: _acl5244,
    yMMMM: _acl519
}, _acl5314 = {
    basic: _acl5301,
    cldr: _acl5308
}, _acl5315 = {
    d: {
        d: "d–d"
    },
    h: _acl54,
    H: {
        H: "HH–HH"
    },
    hm: _acl541,
    Hm: _acl513,
    hmv: _acl549,
    Hmv: _acl516,
    hv: _acl58,
    Hv: {
        H: "HH–HH v"
    },
    M: {
        M: "MM–MM"
    },
    Md: _acl517,
    MEd: _acl532,
    MMM: {
        M: "LLL–LLL"
    },
    MMMd: _acl510,
    MMMEd: _acl533,
    y: {
        y: "G y–y"
    },
    yM: _acl522,
    yMd: _acl5250,
    yMEd: _acl5262,
    yMMM: _acl518,
    yMMMd: _acl557,
    yMMMEd: _acl5252,
    yMMMM: _acl520
}, _acl5316 = {
    beforeCurrency: _acl5306,
    afterCurrency: _acl5306
}, _acl5317 = {
    "short": _acl5288,
    "default": "¤ #,##0.00",
    other: "{0} {1}",
    currencySpacing: _acl5316
}, _acl5318 = {
    era: _acl52,
    year: _acl5271,
    month: _acl5272,
    week: _acl5273,
    day: _acl5275,
    weekday: _acl59,
    dayperiod: _acl511,
    hour: _acl5248,
    minute: _acl5253,
    second: _acl5261,
    zone: _acl53,
    quarter: _acl5274,
    sun: _acl558,
    mon: _acl559,
    tue: _acl5118,
    wed: _acl5224,
    thu: _acl5192,
    fri: _acl560,
    sat: _acl5193
}, _acl5319 = {
    dateFormats: {
        basic: {},
        cldr: {}
    },
    fields: _acl5318
}, _acl5320 = {
    abbreviated: _acl5307,
    narrow: _acl5307,
    wide: _acl5307
}, _acl5321 = {
    format: _acl5320
}, _acl5322 = {
    scientific: {
        "default": "#E0"
    },
    decimal: _acl5304,
    currency: _acl5317,
    percent: {
        "default": "#,##0%"
    }
}, _acl5323 = [ "Taika (645–650)", "Hakuchi (650–671)", "Hakuhō (672–686)", "Shuchō (686–701)", "Taihō (701–704)", "Keiun (704–708)", "Wadō (708–715)", "Reiki (715–717)", "Yōrō (717–724)", "Jinki (724–729)", "Tenpyō (729–749)", "Tenpyō-kampō (749-749)", "Tenpyō-shōhō (749-757)", "Tenpyō-hōji (757-765)", "Tenpyō-jingo (765-767)", "Jingo-keiun (767-770)", "Hōki (770–780)", "Ten-ō (781-782)", "Enryaku (782–806)", "Daidō (806–810)", "Kōnin (810–824)", "Tenchō (824–834)", "Jōwa (834–848)", "Kajō (848–851)", "Ninju (851–854)", "Saikō (854–857)", "Ten-an (857-859)", "Jōgan (859–877)", "Gangyō (877–885)", "Ninna (885–889)", "Kanpyō (889–898)", "Shōtai (898–901)", "Engi (901–923)", "Enchō (923–931)", "Jōhei (931–938)", "Tengyō (938–947)", "Tenryaku (947–957)", "Tentoku (957–961)", "Ōwa (961–964)", "Kōhō (964–968)", "Anna (968–970)", "Tenroku (970–973)", "Ten’en (973–976)", "Jōgen (976–978)", "Tengen (978–983)", "Eikan (983–985)", "Kanna (985–987)", "Eien (987–989)", "Eiso (989–990)", "Shōryaku (990–995)", "Chōtoku (995–999)", "Chōhō (999–1004)", "Kankō (1004–1012)", "Chōwa (1012–1017)", "Kannin (1017–1021)", "Jian (1021–1024)", "Manju (1024–1028)", "Chōgen (1028–1037)", "Chōryaku (1037–1040)", "Chōkyū (1040–1044)", "Kantoku (1044–1046)", "Eishō (1046–1053)", "Tengi (1053–1058)", "Kōhei (1058–1065)", "Jiryaku (1065–1069)", "Enkyū (1069–1074)", "Shōho (1074–1077)", "Shōryaku (1077–1081)", "Eihō (1081–1084)", "Ōtoku (1084–1087)", "Kanji (1087–1094)", "Kahō (1094–1096)", "Eichō (1096–1097)", "Jōtoku (1097–1099)", "Kōwa (1099–1104)", "Chōji (1104–1106)", "Kashō (1106–1108)", "Tennin (1108–1110)", "Ten-ei (1110-1113)", "Eikyū (1113–1118)", "Gen’ei (1118–1120)", "Hōan (1120–1124)", "Tenji (1124–1126)", "Daiji (1126–1131)", "Tenshō (1131–1132)", "Chōshō (1132–1135)", "Hōen (1135–1141)", "Eiji (1141–1142)", "Kōji (1142–1144)", "Ten’yō (1144–1145)", "Kyūan (1145–1151)", "Ninpei (1151–1154)", "Kyūju (1154–1156)", "Hōgen (1156–1159)", "Heiji (1159–1160)", "Eiryaku (1160–1161)", "Ōho (1161–1163)", "Chōkan (1163–1165)", "Eiman (1165–1166)", "Nin’an (1166–1169)", "Kaō (1169–1171)", "Shōan (1171–1175)", "Angen (1175–1177)", "Jishō (1177–1181)", "Yōwa (1181–1182)", "Juei (1182–1184)", "Genryaku (1184–1185)", "Bunji (1185–1190)", "Kenkyū (1190–1199)", "Shōji (1199–1201)", "Kennin (1201–1204)", "Genkyū (1204–1206)", "Ken’ei (1206–1207)", "Jōgen (1207–1211)", "Kenryaku (1211–1213)", "Kenpō (1213–1219)", "Jōkyū (1219–1222)", "Jōō (1222–1224)", "Gennin (1224–1225)", "Karoku (1225–1227)", "Antei (1227–1229)", "Kanki (1229–1232)", "Jōei (1232–1233)", "Tenpuku (1233–1234)", "Bunryaku (1234–1235)", "Katei (1235–1238)", "Ryakunin (1238–1239)", "En’ō (1239–1240)", "Ninji (1240–1243)", "Kangen (1243–1247)", "Hōji (1247–1249)", "Kenchō (1249–1256)", "Kōgen (1256–1257)", "Shōka (1257–1259)", "Shōgen (1259–1260)", "Bun’ō (1260–1261)", "Kōchō (1261–1264)", "Bun’ei (1264–1275)", "Kenji (1275–1278)", "Kōan (1278–1288)", "Shōō (1288–1293)", "Einin (1293–1299)", "Shōan (1299–1302)", "Kengen (1302–1303)", "Kagen (1303–1306)", "Tokuji (1306–1308)", "Enkyō (1308–1311)", "Ōchō (1311–1312)", "Shōwa (1312–1317)", "Bunpō (1317–1319)", "Genō (1319–1321)", "Genkō (1321–1324)", "Shōchū (1324–1326)", "Karyaku (1326–1329)", "Gentoku (1329–1331)", "Genkō (1331–1334)", "Kenmu (1334–1336)", "Engen (1336–1340)", "Kōkoku (1340–1346)", "Shōhei (1346–1370)", "Kentoku (1370–1372)", "Bunchū (1372–1375)", "Tenju (1375–1379)", "Kōryaku (1379–1381)", "Kōwa (1381–1384)", "Genchū (1384–1392)", "Meitoku (1384–1387)", "Kakei (1387–1389)", "Kōō (1389–1390)", "Meitoku (1390–1394)", "Ōei (1394–1428)", "Shōchō (1428–1429)", "Eikyō (1429–1441)", "Kakitsu (1441–1444)", "Bun’an (1444–1449)", "Hōtoku (1449–1452)", "Kyōtoku (1452–1455)", "Kōshō (1455–1457)", "Chōroku (1457–1460)", "Kanshō (1460–1466)", "Bunshō (1466–1467)", "Ōnin (1467–1469)", "Bunmei (1469–1487)", "Chōkyō (1487–1489)", "Entoku (1489–1492)", "Meiō (1492–1501)", "Bunki (1501–1504)", "Eishō (1504–1521)", "Taiei (1521–1528)", "Kyōroku (1528–1532)", "Tenbun (1532–1555)", "Kōji (1555–1558)", "Eiroku (1558–1570)", "Genki (1570–1573)", "Tenshō (1573–1592)", "Bunroku (1592–1596)", "Keichō (1596–1615)", "Genna (1615–1624)", "Kan’ei (1624–1644)", "Shōho (1644–1648)", "Keian (1648–1652)", "Jōō (1652–1655)", "Meireki (1655–1658)", "Manji (1658–1661)", "Kanbun (1661–1673)", "Enpō (1673–1681)", "Tenna (1681–1684)", "Jōkyō (1684–1688)", "Genroku (1688–1704)", "Hōei (1704–1711)", "Shōtoku (1711–1716)", "Kyōhō (1716–1736)", "Genbun (1736–1741)", "Kanpō (1741–1744)", "Enkyō (1744–1748)", "Kan’en (1748–1751)", "Hōreki (1751–1764)", "Meiwa (1764–1772)", "An’ei (1772–1781)", "Tenmei (1781–1789)", "Kansei (1789–1801)", "Kyōwa (1801–1804)", "Bunka (1804–1818)", "Bunsei (1818–1830)", "Tenpō (1830–1844)", "Kōka (1844–1848)", "Kaei (1848–1854)", "Ansei (1854–1860)", "Man’en (1860–1861)", "Bunkyū (1861–1864)", "Genji (1864–1865)", "Keiō (1865–1868)", "Meiji", "Taishō", "Shōwa", "Heisei" ], _acl5324 = {
    dateFormats: _acl5314,
    datePartsOrder: "ymd",
    dateIntervalFormats: _acl5315,
    dateIntervalFallbackFormat: "{0} – {1}",
    dayNames: _acl5309,
    dayPeriods: _acl5287,
    monthNames: _acl5310,
    eraNames: _acl512,
    quarterNames: _acl5302,
    fields: _acl5318
}, _acl5325 = {
    dayParts: _acl5290,
    days: _acl5321,
    months: _acl5321,
    years: _acl5321,
    zodiacs: _acl5290
}, _acl5326 = {
    dateFormats: _acl5312,
    datePartsOrder: "md",
    dateIntervalFormats: _acl5313,
    dateIntervalFallbackFormat: "{0} – {1}",
    dayNames: _acl5309,
    dayPeriods: _acl5287,
    cyclicNames: _acl5325,
    monthNames: _acl5303,
    monthPatterns: _acl5281,
    quarterNames: _acl5302,
    fields: _acl5318
};

inter.id = "bo";

inter.characters = {
    exemplar: {
        "default": [ "\\u0F7E", "ཿ", "ཀ", "{ཀ\\u0FB5}", "\\u0F90", "{\\u0F90\\u0FB5}", "ཁ", "\\u0F91", "ག", "{ག\\u0FB7}", "\\u0F92", "{\\u0F92\\u0FB7}", "ང", "\\u0F94", "ཅ", "\\u0F95", "ཆ", "\\u0F96", "ཇ", "\\u0F97", "ཉ", "\\u0F99", "ཊ", "\\u0F9A", "ཋ", "\\u0F9B", "ཌ", "{ཌ\\u0FB7}", "\\u0F9C", "{\\u0F9C\\u0FB7}", "ཎ", "\\u0F9E", "ཏ", "\\u0F9F", "ཐ", "\\u0FA0", "ད", "{ད\\u0FB7}", "\\u0FA1", "{\\u0FA1\\u0FB7}", "ན", "\\u0FA3", "པ", "\\u0FA4", "ཕ", "\\u0FA5", "བ", "{བ\\u0FB7}", "\\u0FA6", "{\\u0FA6\\u0FB7}", "མ", "\\u0FA8", "ཙ", "\\u0FA9", "ཚ", "\\u0FAA", "ཛ", "{ཛ\\u0FB7}", "\\u0FAB", "{\\u0FAB\\u0FB7}", "ཝ", "\\u0FAD", "\\u0FBA", "ཞ", "\\u0FAE", "ཟ", "\\u0FAF", "འ", "\\u0FB0", "ཡ", "\\u0FB1", "\\u0FBB", "ར", "ཪ", "\\u0FB2", "\\u0FBC", "ལ", "\\u0FB3", "ཤ", "\\u0FB4", "ཥ", "\\u0FB5", "ས", "\\u0FB6", "ཧ", "\\u0FB7", "ཨ", "\\u0FB8", "\\u0F72", "{\\u0F71\\u0F72}", "\\u0F80", "{\\u0F71\\u0F80}", "\\u0F74", "{\\u0F71\\u0F74}", "{\\u0FB2\\u0F80}", "\\u0F77", "{\\u0FB3\\u0F80}", "\\u0F79", "\\u0F7A", "\\u0F7B", "\\u0F7C", "\\u0F7D", "\\u0F84" ],
        auxiliary: [ "ༀ" ],
        index: [ "ཀ", "ཁ", "ག", "ང", "ཅ", "ཆ", "ཇ", "ཉ", "ཏ", "ཐ", "ད", "ན", "པ", "ཕ", "བ", "མ", "ཙ", "ཚ", "ཛ", "ཝ", "ཞ", "ཟ", "འ", "ཡ", "ར", "ལ", "ཤ", "ས", "ཧ", "ཨ" ],
        punctuation: [ "\\:", "་", "།" ]
    },
    ellipsis: {
        "final": "{0}…",
        initial: "…{0}",
        medial: "{0}…{1}",
        "word-final": "{0} …",
        "word-initial": "… {0}",
        "word-medial": "{0} … {1}"
    },
    moreInformation: "?"
};

inter.numbers = {
    ahom: {
        symbols: _acl5278,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    arab: {
        symbols: P.numbers.ahom.symbols,
        formats: _acl5322,
        digits: [ "٠", "١", "٢", "٣", "٤", "٥", "٦", "٧", "٨", "٩" ]
    },
    arabext: {
        symbols: {
            decimal: "٫",
            group: "٬",
            list: "؛",
            percentSign: "٪",
            plusSign: "‎+‎",
            minusSign: "‎-‎",
            exponential: "×۱۰^",
            superscriptingExponent: "×",
            perMille: "؉",
            infinity: "∞",
            nan: "NaN",
            timeSeparator: "٫"
        },
        formats: _acl5322,
        digits: [ "۰", "۱", "۲", "۳", "۴", "۵", "۶", "۷", "۸", "۹" ]
    },
    armn: {
        symbols: _acl5278,
        digits: "renderArmenianUpper"
    },
    armnlow: {
        symbols: _acl5278,
        digits: "renderArmenianLower"
    },
    bali: {
        symbols: _acl5276,
        formats: _acl5322,
        digits: [ "᭐", "᭑", "᭒", "᭓", "᭔", "᭕", "᭖", "᭗", "᭘", "᭙" ]
    },
    beng: {
        symbols: _acl5276,
        formats: _acl5322,
        digits: [ "০", "১", "২", "৩", "৪", "৫", "৬", "৭", "৮", "৯" ]
    },
    brah: {
        symbols: _acl5276,
        formats: _acl5322,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    cakm: {
        symbols: _acl5276,
        formats: _acl5322,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    cham: {
        symbols: _acl5276,
        formats: _acl5322,
        digits: [ "꩐", "꩑", "꩒", "꩓", "꩔", "꩕", "꩖", "꩗", "꩘", "꩙" ]
    },
    cyrl: {
        symbols: _acl5278,
        digits: "renderCyrillicLower"
    },
    deva: {
        symbols: _acl5276,
        formats: _acl5322,
        digits: [ "०", "१", "२", "३", "४", "५", "६", "७", "८", "९" ]
    },
    ethi: {
        symbols: _acl5278,
        digits: "renderEthiopic"
    },
    finance: _acl5280,
    fullwide: {
        symbols: _acl5276,
        formats: _acl5322,
        digits: [ "０", "１", "２", "３", "４", "５", "６", "７", "８", "９" ]
    },
    geor: {
        symbols: _acl5278,
        digits: "renderGeorgian"
    },
    grek: {
        symbols: _acl5278,
        digits: "renderGreekUpper"
    },
    greklow: {
        symbols: _acl5278,
        digits: "renderGreekLower"
    },
    gujr: {
        symbols: _acl5276,
        formats: _acl5322,
        digits: [ "૦", "૧", "૨", "૩", "૪", "૫", "૬", "૭", "૮", "૯" ]
    },
    guru: {
        symbols: _acl5276,
        formats: _acl5322,
        digits: [ "੦", "੧", "੨", "੩", "੪", "੫", "੬", "੭", "੮", "੯" ]
    },
    hanidays: {
        symbols: _acl5278,
        digits: "renderSpelloutNumberingDays"
    },
    hanidec: {
        symbols: _acl5276,
        formats: _acl5322,
        digits: [ "〇", "一", "二", "三", "四", "五", "六", "七", "八", "九" ]
    },
    hans: _acl5283,
    hansfin: _acl5285,
    hant: _acl5283,
    hantfin: _acl5285,
    hebr: {
        symbols: _acl5278,
        digits: "renderHebrew"
    },
    hmng: {
        symbols: _acl5278,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    java: {
        symbols: _acl5276,
        formats: _acl5322,
        digits: [ "꧐", "꧑", "꧒", "꧓", "꧔", "꧕", "꧖", "꧗", "꧘", "꧙" ]
    },
    jpan: _acl5283,
    jpanfin: _acl5285,
    kali: {
        symbols: _acl5276,
        formats: _acl5322,
        digits: [ "꤀", "꤁", "꤂", "꤃", "꤄", "꤅", "꤆", "꤇", "꤈", "꤉" ]
    },
    khmr: {
        symbols: _acl5276,
        formats: _acl5322,
        digits: [ "០", "១", "២", "៣", "៤", "៥", "៦", "៧", "៨", "៩" ]
    },
    knda: {
        symbols: _acl5276,
        formats: _acl5322,
        digits: [ "೦", "೧", "೨", "೩", "೪", "೫", "೬", "೭", "೮", "೯" ]
    },
    lana: {
        symbols: _acl5276,
        formats: _acl5322,
        digits: [ "᪀", "᪁", "᪂", "᪃", "᪄", "᪅", "᪆", "᪇", "᪈", "᪉" ]
    },
    lanatham: {
        symbols: _acl5276,
        formats: _acl5322,
        digits: [ "᪐", "᪑", "᪒", "᪓", "᪔", "᪕", "᪖", "᪗", "᪘", "᪙" ]
    },
    laoo: {
        symbols: _acl5276,
        formats: _acl5322,
        digits: [ "໐", "໑", "໒", "໓", "໔", "໕", "໖", "໗", "໘", "໙" ]
    },
    latn: {
        symbols: _acl5276,
        formats: _acl5322,
        digits: [ "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" ]
    },
    lepc: {
        symbols: _acl5276,
        formats: _acl5322,
        digits: [ "᱀", "᱁", "᱂", "᱃", "᱄", "᱅", "᱆", "᱇", "᱈", "᱉" ]
    },
    limb: {
        symbols: _acl5276,
        formats: _acl5322,
        digits: [ "᥆", "᥇", "᥈", "᥉", "᥊", "᥋", "᥌", "᥍", "᥎", "᥏" ]
    },
    mathbold: {
        symbols: _acl5278,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathdbl: {
        symbols: _acl5278,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathmono: {
        symbols: _acl5278,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathsanb: {
        symbols: _acl5278,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathsans: {
        symbols: _acl5278,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mlym: {
        symbols: _acl5276,
        formats: _acl5322,
        digits: [ "൦", "൧", "൨", "൩", "൪", "൫", "൬", "൭", "൮", "൯" ]
    },
    modi: {
        symbols: _acl5278,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mong: {
        symbols: _acl5276,
        formats: _acl5322,
        digits: [ "᠐", "᠑", "᠒", "᠓", "᠔", "᠕", "᠖", "᠗", "᠘", "᠙" ]
    },
    mroo: {
        symbols: _acl5278,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mtei: {
        symbols: _acl5276,
        formats: _acl5322,
        digits: [ "꯰", "꯱", "꯲", "꯳", "꯴", "꯵", "꯶", "꯷", "꯸", "꯹" ]
    },
    mymr: {
        symbols: _acl5276,
        formats: _acl5322,
        digits: [ "၀", "၁", "၂", "၃", "၄", "၅", "၆", "၇", "၈", "၉" ]
    },
    mymrshan: {
        symbols: _acl5276,
        formats: _acl5322,
        digits: [ "႐", "႑", "႒", "႓", "႔", "႕", "႖", "႗", "႘", "႙" ]
    },
    mymrtlng: {
        symbols: _acl5278,
        digits: [ "꧰", "꧱", "꧲", "꧳", "꧴", "꧵", "꧶", "꧷", "꧸", "꧹" ]
    },
    "native": _acl5280,
    nkoo: {
        symbols: _acl5276,
        formats: _acl5322,
        digits: [ "߀", "߁", "߂", "߃", "߄", "߅", "߆", "߇", "߈", "߉" ]
    },
    olck: {
        symbols: _acl5276,
        formats: _acl5322,
        digits: [ "᱐", "᱑", "᱒", "᱓", "᱔", "᱕", "᱖", "᱗", "᱘", "᱙" ]
    },
    orya: {
        symbols: _acl5276,
        formats: _acl5322,
        digits: [ "୦", "୧", "୨", "୩", "୪", "୫", "୬", "୭", "୮", "୯" ]
    },
    osma: {
        symbols: _acl5276,
        formats: _acl5322,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    roman: {
        symbols: _acl5278,
        digits: "renderRomanUpper"
    },
    romanlow: {
        symbols: _acl5278,
        digits: "renderRomanLower"
    },
    saur: {
        symbols: _acl5276,
        formats: _acl5322,
        digits: [ "꣐", "꣑", "꣒", "꣓", "꣔", "꣕", "꣖", "꣗", "꣘", "꣙" ]
    },
    shrd: {
        symbols: _acl5276,
        formats: _acl5322,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    sind: {
        symbols: _acl5278,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    sinh: {
        symbols: _acl5278,
        digits: [ "෦", "෧", "෨", "෩", "෪", "෫", "෬", "෭", "෮", "෯" ]
    },
    sora: {
        symbols: _acl5276,
        formats: _acl5322,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    sund: {
        symbols: _acl5276,
        formats: _acl5322,
        digits: [ "᮰", "᮱", "᮲", "᮳", "᮴", "᮵", "᮶", "᮷", "᮸", "᮹" ]
    },
    takr: {
        symbols: _acl5276,
        formats: _acl5322,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    talu: {
        symbols: _acl5276,
        formats: _acl5322,
        digits: [ "᧐", "᧑", "᧒", "᧓", "᧔", "᧕", "᧖", "᧗", "᧘", "᧙" ]
    },
    taml: {
        symbols: _acl5278,
        digits: "renderTamil"
    },
    tamldec: {
        symbols: _acl5276,
        formats: _acl5322,
        digits: [ "௦", "௧", "௨", "௩", "௪", "௫", "௬", "௭", "௮", "௯" ]
    },
    telu: {
        symbols: _acl5276,
        formats: _acl5322,
        digits: [ "౦", "౧", "౨", "౩", "౪", "౫", "౬", "౭", "౮", "౯" ]
    },
    thai: {
        symbols: _acl5276,
        formats: _acl5322,
        digits: [ "๐", "๑", "๒", "๓", "๔", "๕", "๖", "๗", "๘", "๙" ]
    },
    tirh: {
        symbols: _acl5278,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    tibt: {
        symbols: {
            nan: "ཨང་མེན་",
            decimal: ".",
            group: ",",
            list: ";",
            percentSign: "%",
            plusSign: "+",
            minusSign: "-",
            exponential: "E",
            superscriptingExponent: "×",
            perMille: "‰",
            infinity: "∞",
            timeSeparator: ":"
        },
        formats: _acl5322,
        digits: [ "༠", "༡", "༢", "༣", "༤", "༥", "༦", "༧", "༨", "༩" ]
    },
    traditio: _acl5280,
    vaii: {
        symbols: _acl5276,
        formats: _acl5322,
        digits: [ "꘠", "꘡", "꘢", "꘣", "꘤", "꘥", "꘦", "꘧", "꘨", "꘩" ]
    },
    wara: {
        symbols: _acl5278,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    }
};

inter.calendars = {
    buddhist: {
        dateFormats: _acl5314,
        datePartsOrder: "ymd",
        dateIntervalFormats: _acl5315,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _acl5309,
        dayPeriods: _acl5287,
        monthNames: _acl5311,
        eraNames: {
            wide: [ "BE" ],
            abbreviated: [ "BE" ]
        },
        quarterNames: _acl5302,
        fields: _acl5318
    },
    chinese: _acl5326,
    coptic: {
        dateFormats: _acl5314,
        datePartsOrder: "ymd",
        dateIntervalFormats: _acl5315,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _acl5309,
        dayPeriods: _acl5287,
        monthNames: {
            format: _acl5294,
            standAlone: _acl5294
        },
        eraNames: _acl535,
        quarterNames: _acl5302,
        fields: _acl5318
    },
    dangi: _acl5326,
    ethioaa: _acl5319,
    ethiopic: {
        dateFormats: _acl5314,
        datePartsOrder: "ymd",
        dateIntervalFormats: _acl5315,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _acl5309,
        dayPeriods: _acl5287,
        monthNames: {
            format: _acl5296,
            standAlone: _acl5296
        },
        eraNames: _acl535,
        quarterNames: _acl5302,
        fields: _acl5318
    },
    gregorian: {
        dateFormats: {
            basic: {
                fullDate: "y MMMMའི་ཚེས་d, EEEE",
                longDate: "སྤྱི་ལོ་y MMMMའི་ཚེས་d",
                mediumDate: "y ལོའི་MMMཚེས་d",
                shortDate: "y-MM-dd",
                fullTime: "h:mm:ss a zzzz",
                longTime: "h:mm:ss a z",
                mediumTime: "h:mm:ss a",
                shortTime: "h:mm a",
                shortDateTime: "y-MM-dd h:mm a",
                mediumDateTime: "y ལོའི་MMMཚེས་d h:mm:ss a",
                longDateTime: "སྤྱི་ལོ་y MMMMའི་ཚེས་d h:mm:ss a z",
                fullDateTime: "y MMMMའི་ཚེས་d, EEEE h:mm:ss a zzzz"
            },
            cldr: {
                GyMMM: "G y LLLL",
                MMMd: "MMMཚེས་d",
                MMMEd: "MMMཚེས་d, E",
                MMMMd: "MMMMའི་ཚེས་d",
                yMMM: "y LLL",
                yMMMd: "y ལོའི་MMMཚེས་d",
                yMMMMd: "སྤྱི་ལོ་y MMMMའི་ཚེས་d",
                d: "d",
                E: "ccc",
                Ed: "d, E",
                Ehm: "E h:mm a",
                EHm: "E HH:mm",
                Ehms: "E h:mm:ss a",
                EHms: "E HH:mm:ss",
                Gy: "G y",
                GyMMMd: "G y MMM d",
                GyMMMEd: "G y MMM d, E",
                h: "h a",
                H: "HH",
                hm: "h:mm a",
                Hm: "HH:mm",
                hms: "h:mm:ss a",
                Hms: "HH:mm:ss",
                hmsv: "h:mm:ss a v",
                Hmsv: "HH:mm:ss v",
                hmv: "h:mm a v",
                Hmv: "HH:mm v",
                M: "L",
                Md: "MM-dd",
                MEd: "MM-dd, E",
                MMM: "LLL",
                ms: "mm:ss",
                y: "y",
                yM: "y-MM",
                yMd: "y-MM-dd",
                yMEd: "y-MM-dd, E",
                yMMMEd: "y MMM d, E",
                yMMMM: "y MMMM",
                yQQQ: "y QQQ",
                yQQQQ: "y QQQQ"
            }
        },
        datePartsOrder: "ymd",
        dateIntervalFormats: {
            d: {
                d: "d–d"
            },
            h: _acl54,
            H: {
                H: "HH–HH"
            },
            hm: _acl541,
            Hm: _acl513,
            hmv: _acl549,
            Hmv: _acl516,
            hv: _acl58,
            Hv: {
                H: "HH–HH v"
            },
            M: {
                M: "MM–MM"
            },
            Md: _acl517,
            MEd: _acl532,
            MMM: {
                M: "LLL–LLL"
            },
            MMMd: _acl510,
            MMMEd: _acl533,
            y: {
                y: "y–y"
            },
            yM: _acl514,
            yMd: _acl5148,
            yMEd: _acl5251,
            yMMM: {
                M: "y MMM–MMM",
                y: "y MMM – y MMM"
            },
            yMMMd: {
                d: "y MMM d–d",
                M: "y MMM d – MMM d",
                y: "y MMM d – y MMM d"
            },
            yMMMEd: {
                d: "y MMM d, E – MMM d, E",
                M: "y MMM d, E – MMM d, E",
                y: "y MMM d, E – y MMM d, E"
            },
            yMMMM: {
                M: "y MMMM–MMMM",
                y: "y MMMM – y MMMM"
            }
        },
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _acl5309,
        dayPeriods: _acl5287,
        monthNames: _acl5311,
        eraNames: {
            wide: _acl57,
            abbreviated: _acl57
        },
        quarterNames: _acl5302,
        fields: _acl5318
    },
    hebrew: {
        dateFormats: _acl5314,
        datePartsOrder: "ymd",
        dateIntervalFormats: _acl5315,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _acl5309,
        dayPeriods: _acl5287,
        monthNames: {
            format: _acl5291,
            standAlone: _acl5291
        },
        eraNames: {
            wide: [ "AM" ],
            abbreviated: [ "AM" ]
        },
        quarterNames: _acl5302,
        fields: _acl5318
    },
    indian: {
        dateFormats: _acl5314,
        datePartsOrder: "ymd",
        dateIntervalFormats: _acl5315,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _acl5309,
        dayPeriods: _acl5287,
        monthNames: {
            format: _acl5297,
            standAlone: _acl5297
        },
        eraNames: {
            wide: [ "Saka" ],
            abbreviated: [ "Saka" ]
        },
        quarterNames: _acl5302,
        fields: _acl5318
    },
    islamic: _acl5324,
    "islamic-umalqura": _acl5324,
    "islamic-tbla": _acl5324,
    "islamic-civil": _acl5324,
    "islamic-rgsa": _acl5324,
    iso8601: _acl5319,
    japanese: {
        dateFormats: _acl5314,
        datePartsOrder: "ymd",
        dateIntervalFormats: _acl5315,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _acl5309,
        dayPeriods: _acl5287,
        monthNames: _acl5311,
        eraNames: {
            wide: _acl5323,
            abbreviated: _acl5323
        },
        quarterNames: _acl5302,
        fields: _acl5318
    },
    persian: {
        dateFormats: _acl5314,
        datePartsOrder: "ymd",
        dateIntervalFormats: _acl5315,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _acl5309,
        dayPeriods: _acl5287,
        monthNames: {
            format: _acl5292,
            standAlone: _acl5292
        },
        eraNames: {
            wide: [ "AP" ],
            abbreviated: [ "AP" ]
        },
        quarterNames: _acl5302,
        fields: _acl5318
    },
    roc: {
        dateFormats: _acl5314,
        datePartsOrder: "ymd",
        dateIntervalFormats: _acl5315,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _acl5309,
        dayPeriods: _acl5287,
        monthNames: _acl5311,
        eraNames: {
            wide: _acl55,
            abbreviated: _acl55
        },
        quarterNames: _acl5302,
        fields: _acl5318
    },
    islamicc: _acl5319
};

inter.pluralRule = function(n) {
    return "other";
};

inter.renderDigitsOrdinal = function(n) {
    if (n < 0) return "−" + this.renderDigitsOrdinal(-n);
    if (n >= 0) return this.renderNumber(n, "#,##0") + ".";
};

inter.renderSpelloutNumbering = function(n) {
    if (n < 0) return "−" + this.renderSpelloutNumbering(-n);
    if (n >= 0) return this.renderNumber(n, "#,##0.#");
};

inter.renderArmenianUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderArmenianUpper(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e4) return this.renderNumber(n, "#,##0");
    if (n >= 9e3) return "Ք" + (n === 9e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 8e3) return "Փ" + (n === 8e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 7e3) return "Ւ" + (n === 7e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 6e3) return "Ց" + (n === 6e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 5e3) return "Ր" + (n === 5e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 4e3) return "Տ" + (n === 4e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 3e3) return "Վ" + (n === 3e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 2e3) return "Ս" + (n === 2e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 1e3) return "Ռ" + (n === 1e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 900) return "Ջ" + (n === 900 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 800) return "Պ" + (n === 800 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 700) return "Չ" + (n === 700 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 600) return "Ո" + (n === 600 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 500) return "Շ" + (n === 500 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 400) return "Ն" + (n === 400 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 300) return "Յ" + (n === 300 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 200) return "Մ" + (n === 200 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 100) return "Ճ" + (n === 100 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 90) return "Ղ" + (n === 90 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 80) return "Ձ" + (n === 80 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 70) return "Հ" + (n === 70 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 60) return "Կ" + (n === 60 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 50) return "Ծ" + (n === 50 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 40) return "Խ" + (n === 40 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 30) return "Լ" + (n === 30 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 20) return "Ի" + (n === 20 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 10) return "Ժ" + (n === 10 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 9) return "Թ";
    if (n >= 8) return "Ը";
    if (n >= 7) return "Է";
    if (n >= 6) return "Զ";
    if (n >= 5) return "Ե";
    if (n >= 4) return "Դ";
    if (n >= 3) return "Գ";
    if (n >= 2) return "Բ";
    if (n >= 1) return "Ա";
    if (n >= 0) return "0";
};

inter.renderArmenianLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderArmenianLower(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e4) return this.renderNumber(n, "#,##0");
    if (n >= 9e3) return "ք" + (n === 9e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 8e3) return "փ" + (n === 8e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 7e3) return "ւ" + (n === 7e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 6e3) return "ց" + (n === 6e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 5e3) return "ր" + (n === 5e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 4e3) return "տ" + (n === 4e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 3e3) return "վ" + (n === 3e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 2e3) return "ս" + (n === 2e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 1e3) return "ռ" + (n === 1e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 900) return "ջ" + (n === 900 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 800) return "պ" + (n === 800 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 700) return "չ" + (n === 700 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 600) return "ո" + (n === 600 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 500) return "շ" + (n === 500 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 400) return "ն" + (n === 400 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 300) return "յ" + (n === 300 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 200) return "մ" + (n === 200 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 100) return "ճ" + (n === 100 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 90) return "ղ" + (n === 90 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 80) return "ձ" + (n === 80 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 70) return "հ" + (n === 70 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 60) return "կ" + (n === 60 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 50) return "ծ" + (n === 50 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 40) return "խ" + (n === 40 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 30) return "լ" + (n === 30 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 20) return "ի" + (n === 20 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 10) return "ժ" + (n === 10 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 9) return "թ";
    if (n >= 8) return "ը";
    if (n >= 7) return "է";
    if (n >= 6) return "զ";
    if (n >= 5) return "ե";
    if (n >= 4) return "դ";
    if (n >= 3) return "գ";
    if (n >= 2) return "բ";
    if (n >= 1) return "ա";
    if (n >= 0) return "0";
};

inter.renderCyrillicLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderCyrillicLower(-n);
    if (isFractional && n > 1) return this.renderCyrillicLower(Math.floor(n)) + "." + this.renderCyrillicLower(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e15) return "҂҂҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e15)) + (n === 1e15 ? "" : " " + this.renderCyrillicLower(n % 1e15));
    if (n >= 1e12) return "҂҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e12)) + (n === 1e12 ? "" : " " + this.renderCyrillicLower(n % 1e12));
    if (n >= 1e9) return "҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e9)) + (n === 1e9 ? "" : " " + this.renderCyrillicLower(n % 1e9));
    if (n >= 1e6) return "҂҂" + this.renderCyrillicLower(Math.floor(n / 1e6)) + (n === 1e6 ? "" : " " + this.renderCyrillicLower(n % 1e6));
    if (n >= 11e3) return this.renderCyrillicLowerThousands(Math.floor(n / 1e4)) + (n === 11e3 ? "" : " " + this.renderCyrillicLower(n % 1e4));
    if (n >= 1e4) return "҂" + this.renderCyrillicLower(Math.floor(n / 1e4)) + (n === 1e4 ? "" : " " + this.renderCyrillicLower(n % 1e4));
    if (n >= 1e3) return "҂" + this.renderCyrillicLower110(Math.floor(n / 1e3)) + this.renderCyrillicLowerPost(n % 1e3);
    if (n >= 900) return "ц" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 801) return "ѿ" + this.renderCyrillicLower(n % 100);
    if (n >= 800) return "ѿ҃";
    if (n >= 700) return "ѱ" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 600) return "х" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 500) return "ф" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 400) return "у" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 300) return "т" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 200) return "с" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 100) return "р" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 90) return "ч" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 80) return "п" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 70) return "ѻ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 60) return "ѯ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 50) return "н" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 40) return "м" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 30) return "л" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 20) return "к" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 19) return "ѳ҃і";
    if (n >= 18) return "и҃і";
    if (n >= 17) return "з҃і";
    if (n >= 16) return "ѕ҃і";
    if (n >= 15) return "є҃і";
    if (n >= 14) return "д҃і";
    if (n >= 13) return "г҃і";
    if (n >= 12) return "в҃і";
    if (n >= 11) return "а҃і";
    if (n >= 1) return this.renderCyrillicLower110(n) + "҃";
    if (n >= 0) return "0҃";
};

inter.renderEthiopic = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderEthiopic(-n);
    if (isFractional && n > 1) return this.renderEthiopic(Math.floor(n)) + "፡" + this.renderEthiopic(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,###0");
    if (n >= 2e16) return this.renderEthiopic(Math.floor(n / 1e16)) + "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 1e16) return "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 2e12) return this.renderEthiopic(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1e12) return "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 2e8) return this.renderEthiopic(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1e8) return "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 2e4) return this.renderEthiopic(Math.floor(n / 1e4)) + "፼" + (n === 2e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 1e4) return "፼" + (n === 1e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 200) return this.renderEthiopic(Math.floor(n / 100)) + "፻" + (n === 200 ? "" : this.renderEthiopic(n % 100));
    if (n >= 100) return "፻" + (n === 100 ? "" : this.renderEthiopic(n % 100));
    if (n >= 90) return "፺" + (n === 90 ? "" : this.renderEthiopic(n % 10));
    if (n >= 80) return "፹" + (n === 80 ? "" : this.renderEthiopic(n % 10));
    if (n >= 70) return "፸" + (n === 70 ? "" : this.renderEthiopic(n % 10));
    if (n >= 60) return "፷" + (n === 60 ? "" : this.renderEthiopic(n % 10));
    if (n >= 50) return "፶" + (n === 50 ? "" : this.renderEthiopic(n % 10));
    if (n >= 40) return "፵" + (n === 40 ? "" : this.renderEthiopic(n % 10));
    if (n >= 30) return "፴" + (n === 30 ? "" : this.renderEthiopic(n % 10));
    if (n >= 20) return "፳" + (n === 20 ? "" : this.renderEthiopic(n % 10));
    if (n >= 10) return "፲" + (n === 10 ? "" : this.renderEthiopic(n % 10));
    if (n >= 9) return "፱";
    if (n >= 8) return "፰";
    if (n >= 7) return "፯";
    if (n >= 6) return "፮";
    if (n >= 5) return "፭";
    if (n >= 4) return "፬";
    if (n >= 3) return "፫";
    if (n >= 2) return "፪";
    if (n >= 1) return "፩";
    if (n >= 0) return "ባዶ";
};

inter.renderGeorgian = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGeorgian(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 2e4) return this.renderNumber(n, "#,##0");
    if (n >= 1e4) return "ჯ" + (n === 1e4 ? "" : this.renderGeorgian(n % 1e4));
    if (n >= 9e3) return "ჵ" + (n === 9e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 8e3) return "ჴ" + (n === 8e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 7e3) return "ხ" + (n === 7e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 6e3) return "ჭ" + (n === 6e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 5e3) return "წ" + (n === 5e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 4e3) return "ძ" + (n === 4e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 3e3) return "ც" + (n === 3e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 2e3) return "ჩ" + (n === 2e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 1e3) return "შ" + (n === 1e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 900) return "ყ" + (n === 900 ? "" : this.renderGeorgian(n % 100));
    if (n >= 800) return "ღ" + (n === 800 ? "" : this.renderGeorgian(n % 100));
    if (n >= 700) return "ქ" + (n === 700 ? "" : this.renderGeorgian(n % 100));
    if (n >= 600) return "ფ" + (n === 600 ? "" : this.renderGeorgian(n % 100));
    if (n >= 500) return "ჳ" + (n === 500 ? "" : this.renderGeorgian(n % 100));
    if (n >= 400) return "უ" + (n === 400 ? "" : this.renderGeorgian(n % 100));
    if (n >= 300) return "ტ" + (n === 300 ? "" : this.renderGeorgian(n % 100));
    if (n >= 200) return "ს" + (n === 200 ? "" : this.renderGeorgian(n % 100));
    if (n >= 100) return "რ" + (n === 100 ? "" : this.renderGeorgian(n % 100));
    if (n >= 90) return "ჟ" + (n === 90 ? "" : this.renderGeorgian(n % 10));
    if (n >= 80) return "პ" + (n === 80 ? "" : this.renderGeorgian(n % 10));
    if (n >= 70) return "ო" + (n === 70 ? "" : this.renderGeorgian(n % 10));
    if (n >= 60) return "ჲ" + (n === 60 ? "" : this.renderGeorgian(n % 10));
    if (n >= 50) return "ნ" + (n === 50 ? "" : this.renderGeorgian(n % 10));
    if (n >= 40) return "მ" + (n === 40 ? "" : this.renderGeorgian(n % 10));
    if (n >= 30) return "ლ" + (n === 30 ? "" : this.renderGeorgian(n % 10));
    if (n >= 20) return "კ" + (n === 20 ? "" : this.renderGeorgian(n % 10));
    if (n >= 10) return "ი" + (n === 10 ? "" : this.renderGeorgian(n % 10));
    if (n >= 9) return "თ";
    if (n >= 8) return "ჱ";
    if (n >= 7) return "ზ";
    if (n >= 6) return "ვ";
    if (n >= 5) return "ე";
    if (n >= 4) return "დ";
    if (n >= 3) return "გ";
    if (n >= 2) return "ბ";
    if (n >= 1) return "ა";
    if (n >= 0) return this.renderNumber(n, "#,##0");
};

inter.renderGreekUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGreekUpper(-n);
    if (isFractional && n > 1) return this.renderGreekUpper(Math.floor(n)) + "." + this.renderGreekUpper(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 0) return this.renderGreekNumeralMajuscules(n) + "´";
};

inter.renderGreekLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGreekLower(-n);
    if (isFractional && n > 1) return this.renderGreekLower(Math.floor(n)) + "." + this.renderGreekLower(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 0) return this.renderGreekNumeralMinuscules(n) + "´";
};

inter.renderSpelloutCardinal = function(n) {
    if (n < 0) return "−" + this.renderSpelloutCardinal(-n);
    if (n >= 0) return this.renderNumber(n, "#,##0.#");
};

inter.renderHebrew = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderHebrew(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1000001) return this.renderNumber(n, "#,##0");
    if (n >= 1e6) return "אלף אלפים";
    if (n >= 3001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 3001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 3e3) return this.renderHebrew(Math.floor(n / 1e3)) + " אלפים";
    if (n >= 2001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 2001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 2e3) return "אלפיים";
    if (n >= 1001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 1001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 1e3) return "אלף";
    if (n >= 901) return "תתק" + this.renderHebrew099(n % 100);
    if (n >= 900) return "תת״ק";
    if (n >= 801) return "תת" + this.renderHebrew099(n % 100);
    if (n >= 800) return "ת״ת";
    if (n >= 745) return "תש" + this.renderHebrew099(n % 100);
    if (n >= 744) return "תשד״מ";
    if (n >= 701) return "תש" + this.renderHebrew099(n % 100);
    if (n >= 700) return "ת״ש";
    if (n >= 699) return "תר" + this.renderHebrew099(n % 100);
    if (n >= 698) return "תרח״צ";
    if (n >= 601) return "תר" + this.renderHebrew099(n % 100);
    if (n >= 600) return "ת״ר";
    if (n >= 501) return "תק" + this.renderHebrew099(n % 100);
    if (n >= 500) return "ת״ק";
    if (n >= 400) return "ת" + this.renderHebrew099(n % 100);
    if (n >= 345) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 344) return "שד״מ";
    if (n >= 305) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 304) return "ד״ש";
    if (n >= 300) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 299) return "ר" + this.renderHebrew099(n % 100);
    if (n >= 298) return "רח״צ";
    if (n >= 200) return "ר" + this.renderHebrew099(n % 100);
    if (n >= 100) return "ק" + this.renderHebrew099(n % 100);
    if (n >= 91) return "צ״" + this.renderHebrewItem(n % 10);
    if (n >= 90) return "צ׳";
    if (n >= 81) return "פ״" + this.renderHebrewItem(n % 10);
    if (n >= 80) return "פ׳";
    if (n >= 71) return "ע״" + this.renderHebrewItem(n % 10);
    if (n >= 70) return "ע׳";
    if (n >= 61) return "ס״" + this.renderHebrewItem(n % 10);
    if (n >= 60) return "ס׳";
    if (n >= 51) return "נ״" + this.renderHebrewItem(n % 10);
    if (n >= 50) return "נ׳";
    if (n >= 41) return "מ״" + this.renderHebrewItem(n % 10);
    if (n >= 40) return "מ׳";
    if (n >= 31) return "ל״" + this.renderHebrewItem(n % 10);
    if (n >= 30) return "ל׳";
    if (n >= 21) return "כ״" + this.renderHebrewItem(n % 10);
    if (n >= 20) return "כ׳";
    if (n >= 17) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "ט״ז";
    if (n >= 15) return "ט״ו";
    if (n >= 11) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 0) return this.renderHebrewItem(n) + "׳";
};

inter.renderRomanUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderRomanUpper(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 4e5) return this.renderNumber(n, "#,##0");
    if (n >= 3e5) return "ↈↈↈ" + (n === 3e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 2e5) return "ↈↈ" + (n === 2e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 1e5) return "ↈ" + (n === 1e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 9e4) return "ↂↈ" + (n === 9e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 8e4) return "ↇↂↂↂ" + (n === 8e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 7e4) return "ↇↂↂ" + (n === 7e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 6e4) return "ↇↂ" + (n === 6e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 5e4) return "ↇ" + (n === 5e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 4e4) return "ↂↇ" + (n === 4e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 3e4) return "ↂↂↂ" + (n === 3e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 2e4) return "ↂↂ" + (n === 2e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 1e4) return "ↂ" + (n === 1e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 9e3) return "Mↂ" + (n === 9e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 8e3) return "ↁMMM" + (n === 8e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 7e3) return "ↁMM" + (n === 7e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 6e3) return "ↁM" + (n === 6e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 5e3) return "ↁ" + (n === 5e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 4e3) return "Mↁ" + (n === 4e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 3e3) return "MMM" + (n === 3e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 2e3) return "MM" + (n === 2e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 1e3) return "M" + (n === 1e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 900) return "CM" + (n === 900 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 800) return "DCCC" + (n === 800 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 700) return "DCC" + (n === 700 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 600) return "DC" + (n === 600 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 500) return "D" + (n === 500 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 400) return "CD" + (n === 400 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 300) return "CCC" + (n === 300 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 200) return "CC" + (n === 200 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 100) return "C" + (n === 100 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 90) return "XC" + (n === 90 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 80) return "LXXX" + (n === 80 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 70) return "LXX" + (n === 70 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 60) return "LX" + (n === 60 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 50) return "L" + (n === 50 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 40) return "XL" + (n === 40 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 30) return "XXX" + (n === 30 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 20) return "XX" + (n === 20 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 10) return "X" + (n === 10 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 9) return "IX";
    if (n >= 8) return "VIII";
    if (n >= 7) return "VII";
    if (n >= 6) return "VI";
    if (n >= 5) return "V";
    if (n >= 4) return "IV";
    if (n >= 3) return "III";
    if (n >= 2) return "II";
    if (n >= 1) return "I";
    if (n >= 0) return "N";
};

inter.renderRomanLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderRomanLower(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 5e3) return this.renderNumber(n, "#,##0");
    if (n >= 4e3) return "mmmm" + (n === 4e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 3e3) return "mmm" + (n === 3e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 2e3) return "mm" + (n === 2e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 1e3) return "m" + (n === 1e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 900) return "cm" + (n === 900 ? "" : this.renderRomanLower(n % 100));
    if (n >= 800) return "dccc" + (n === 800 ? "" : this.renderRomanLower(n % 100));
    if (n >= 700) return "dcc" + (n === 700 ? "" : this.renderRomanLower(n % 100));
    if (n >= 600) return "dc" + (n === 600 ? "" : this.renderRomanLower(n % 100));
    if (n >= 500) return "d" + (n === 500 ? "" : this.renderRomanLower(n % 100));
    if (n >= 400) return "cd" + (n === 400 ? "" : this.renderRomanLower(n % 100));
    if (n >= 300) return "ccc" + (n === 300 ? "" : this.renderRomanLower(n % 100));
    if (n >= 200) return "cc" + (n === 200 ? "" : this.renderRomanLower(n % 100));
    if (n >= 100) return "c" + (n === 100 ? "" : this.renderRomanLower(n % 100));
    if (n >= 90) return "xc" + (n === 90 ? "" : this.renderRomanLower(n % 10));
    if (n >= 80) return "lxxx" + (n === 80 ? "" : this.renderRomanLower(n % 10));
    if (n >= 70) return "lxx" + (n === 70 ? "" : this.renderRomanLower(n % 10));
    if (n >= 60) return "lx" + (n === 60 ? "" : this.renderRomanLower(n % 10));
    if (n >= 50) return "l" + (n === 50 ? "" : this.renderRomanLower(n % 10));
    if (n >= 40) return "xl" + (n === 40 ? "" : this.renderRomanLower(n % 10));
    if (n >= 30) return "xxx" + (n === 30 ? "" : this.renderRomanLower(n % 10));
    if (n >= 20) return "xx" + (n === 20 ? "" : this.renderRomanLower(n % 10));
    if (n >= 10) return "x" + (n === 10 ? "" : this.renderRomanLower(n % 10));
    if (n >= 9) return "ix";
    if (n >= 8) return "viii";
    if (n >= 7) return "vii";
    if (n >= 6) return "vi";
    if (n >= 5) return "v";
    if (n >= 4) return "iv";
    if (n >= 3) return "iii";
    if (n >= 2) return "ii";
    if (n >= 1) return "i";
    if (n >= 0) return "n";
};

inter.renderTamil = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderTamil(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e8) return this.renderNumber(n, "#,##,##0");
    if (n >= 1e6) return this.renderTamil(Math.floor(n / 1e6)) + "௱௲" + (n === 1e6 ? "" : this.renderTamilThousands(n % 1e6));
    if (n >= 2e3) return this.renderTamil(Math.floor(n / 1e3)) + "௲" + (n === 2e3 ? "" : this.renderTamil(n % 1e3));
    if (n >= 1e3) return "௲" + (n === 1e3 ? "" : this.renderTamil(n % 1e3));
    if (n >= 200) return this.renderTamil(Math.floor(n / 100)) + "௱" + (n === 200 ? "" : this.renderTamil(n % 100));
    if (n >= 100) return "௱" + (n === 100 ? "" : this.renderTamil(n % 100));
    if (n >= 20) return this.renderTamil(Math.floor(n / 10)) + "௰" + (n === 20 ? "" : this.renderTamil(n % 10));
    if (n >= 10) return "௰" + (n === 10 ? "" : this.renderTamil(n % 10));
    if (n >= 9) return "௯";
    if (n >= 8) return "௮";
    if (n >= 7) return "௭";
    if (n >= 6) return "௬";
    if (n >= 5) return "௫";
    if (n >= 4) return "௪";
    if (n >= 3) return "௩";
    if (n >= 2) return "௨";
    if (n >= 1) return "௧";
    if (n >= 0) return "௦";
};

inter.renderCyrillicLowerThousands = function(n) {
    if (n >= 900) return "҂ц" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 800) return "҂ѿ" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 700) return "҂ѱ" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 600) return "҂х" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 500) return "҂ф" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 400) return "҂у" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 300) return "҂т" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 200) return "҂с" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 100) return "҂р" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 90) return "҂ч" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 80) return "҂п" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 70) return "҂ѻ" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 60) return "҂ѯ" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 50) return "҂н" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 40) return "҂м" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 30) return "҂л" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 20) return "҂к" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 19) return "҂ѳ҃҂і";
    if (n >= 18) return "҂и҃҂і";
    if (n >= 17) return "҂з҃҂і";
    if (n >= 16) return "҂ѕ҃҂і";
    if (n >= 15) return "҂є҃҂і";
    if (n >= 14) return "҂д҃҂і";
    if (n >= 13) return "҂г҃҂і";
    if (n >= 12) return "҂в҃҂і";
    if (n >= 11) return "҂а҃҂і";
    if (n >= 10) return "҃҂і";
    if (n >= 9) return "҃҂ѳ";
    if (n >= 8) return "҃҂и";
    if (n >= 7) return "҃҂з";
    if (n >= 6) return "҃҂ѕ";
    if (n >= 5) return "҃҂є";
    if (n >= 4) return "҃҂д";
    if (n >= 3) return "҃҂г";
    if (n >= 2) return "҃҂в";
    if (n >= 1) return "҃҂а";
    if (n >= 0) return "҃";
};

inter.renderCyrillicLower110 = function(n) {
    if (n >= 10) return "і";
    if (n >= 9) return "ѳ";
    if (n >= 8) return "и";
    if (n >= 7) return "з";
    if (n >= 6) return "ѕ";
    if (n >= 5) return "є";
    if (n >= 4) return "д";
    if (n >= 3) return "г";
    if (n >= 2) return "в";
    if (n >= 1) return "а";
};

inter.renderCyrillicLowerPost = function(n) {
    if (n >= 1) return this.renderCyrillicLower(n);
    if (n >= 0) return "҃";
};

inter.renderCyrillicLowerFinal = function(n) {
    if (n >= 91) return "ч" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 90) return "҃ч";
    if (n >= 81) return "п" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 80) return "҃п";
    if (n >= 71) return "ѻ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 70) return "҃ѻ";
    if (n >= 61) return "ѯ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 60) return "҃ѯ";
    if (n >= 51) return "н" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 50) return "҃н";
    if (n >= 41) return "м" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 40) return "҃м";
    if (n >= 31) return "л" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 30) return "҃л";
    if (n >= 21) return "к" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 20) return "҃к";
    if (n >= 19) return "ѳ҃і";
    if (n >= 18) return "и҃і";
    if (n >= 17) return "з҃і";
    if (n >= 16) return "ѕ҃і";
    if (n >= 15) return "є҃і";
    if (n >= 14) return "д҃і";
    if (n >= 13) return "г҃і";
    if (n >= 12) return "в҃і";
    if (n >= 11) return "а҃і";
    if (n >= 1) return "҃" + this.renderCyrillicLower110(n);
    if (n >= 0) return "҃";
};

inter.renderEthiopicP3 = function(n) {
    if (n >= 1e12) return this.renderEthiopic(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1) return "፼፼፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼፼፼";
};

inter.renderEthiopicP2 = function(n) {
    if (n >= 1e8) return this.renderEthiopic(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1) return "፼፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼፼";
};

inter.renderEthiopicP1 = function(n) {
    if (n >= 1e4) return this.renderEthiopic(Math.floor(n / 1e4)) + "፼" + (n === 1e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 1) return "፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼";
};

inter.renderGreekNumeralMajuscules = function(n) {
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e16) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e16)) + "ΜΜΜΜ" + (n === 1e16 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e16));
    if (n >= 1e12) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e12)) + "ΜΜΜ" + (n === 1e12 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e12));
    if (n >= 1e8) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e8)) + "ΜΜ" + (n === 1e8 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e8));
    if (n >= 1e4) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e4)) + "Μ" + (n === 1e4 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e4));
    if (n >= 1e3) return "͵" + this.renderGreekNumeralMajuscules(Math.floor(n / 1e3)) + (n === 1e3 ? "" : this.renderGreekNumeralMajuscules(n % 1e3));
    if (n >= 900) return "Ϡ" + (n === 900 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 800) return "Ω" + (n === 800 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 700) return "Ψ" + (n === 700 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 600) return "Χ" + (n === 600 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 500) return "Φ" + (n === 500 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 400) return "Υ" + (n === 400 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 300) return "Τ" + (n === 300 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 200) return "Σ" + (n === 200 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 100) return "Ρ" + (n === 100 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 90) return "Ϟ" + (n === 90 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 80) return "Π" + (n === 80 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 70) return "Ο" + (n === 70 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 60) return "Ξ" + (n === 60 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 50) return "Ν" + (n === 50 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 40) return "Μ" + (n === 40 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 30) return "Λ" + (n === 30 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 20) return "Κ" + (n === 20 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 10) return "Ι" + (n === 10 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 9) return "Θ";
    if (n >= 8) return "Η";
    if (n >= 7) return "Ζ";
    if (n >= 6) return "Ϝ";
    if (n >= 5) return "Ε";
    if (n >= 4) return "Δ";
    if (n >= 3) return "Γ";
    if (n >= 2) return "Β";
    if (n >= 1) return "Α";
    if (n >= 0) return "𐆊";
};

inter.renderGreekNumeralMinuscules = function(n) {
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e16) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e16)) + "μμμμ" + (n === 1e16 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e16));
    if (n >= 1e12) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e12)) + "μμμ" + (n === 1e12 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e12));
    if (n >= 1e8) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e8)) + "μμ" + (n === 1e8 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e8));
    if (n >= 1e4) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e4)) + "μ" + (n === 1e4 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e4));
    if (n >= 1e3) return "͵" + this.renderGreekNumeralMinuscules(Math.floor(n / 1e3)) + (n === 1e3 ? "" : this.renderGreekNumeralMinuscules(n % 1e3));
    if (n >= 900) return "ϡ" + (n === 900 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 800) return "ω" + (n === 800 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 700) return "ψ" + (n === 700 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 600) return "χ" + (n === 600 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 500) return "φ" + (n === 500 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 400) return "υ" + (n === 400 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 300) return "τ" + (n === 300 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 200) return "σ" + (n === 200 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 100) return "ρ" + (n === 100 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 90) return "ϟ" + (n === 90 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 80) return "π" + (n === 80 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 70) return "ο" + (n === 70 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 60) return "ξ" + (n === 60 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 50) return "ν" + (n === 50 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 40) return "μ" + (n === 40 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 30) return "λ" + (n === 30 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 20) return "κ" + (n === 20 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 10) return "ι" + (n === 10 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 9) return "θ";
    if (n >= 8) return "η";
    if (n >= 7) return "ζ";
    if (n >= 6) return "ϝ";
    if (n >= 5) return "ε";
    if (n >= 4) return "δ";
    if (n >= 3) return "γ";
    if (n >= 2) return "β";
    if (n >= 1) return "α";
    if (n >= 0) return "𐆊";
};

inter.renderHebrewThousands = function(n) {
    if (n >= 401) return this.renderHebrew(n) + "׳";
    if (n >= 100) return this.renderHebrew(n) + (n === 100 ? "" : "׳");
    if (n >= 10) return this.renderHebrew(n) + (n === 10 ? "" : "׳");
    if (n >= 0) return this.renderHebrew(n);
};

inter.renderHebrew099 = function(n) {
    if (n >= 91) return "צ״" + this.renderHebrewItem(n % 10);
    if (n >= 90) return "״צ";
    if (n >= 81) return "פ״" + this.renderHebrewItem(n % 10);
    if (n >= 80) return "״פ";
    if (n >= 71) return "ע״" + this.renderHebrewItem(n % 10);
    if (n >= 70) return "״ע";
    if (n >= 61) return "ס״" + this.renderHebrewItem(n % 10);
    if (n >= 60) return "״ס";
    if (n >= 51) return "נ״" + this.renderHebrewItem(n % 10);
    if (n >= 50) return "״נ";
    if (n >= 41) return "מ״" + this.renderHebrewItem(n % 10);
    if (n >= 40) return "״מ";
    if (n >= 31) return "ל״" + this.renderHebrewItem(n % 10);
    if (n >= 30) return "״ל";
    if (n >= 21) return "כ״" + this.renderHebrewItem(n % 10);
    if (n >= 20) return "״כ";
    if (n >= 17) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "ט״ז";
    if (n >= 15) return "ט״ו";
    if (n >= 11) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 1) return "״" + this.renderHebrewItem(n);
    if (n >= 0) return "׳";
};

inter.renderHebrewItem = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderHebrewItem(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 2100) return this.renderNumber(n, "#,##0");
    if (n >= 2e3) return "תתתתת" + (n === 2e3 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1900) return "תתתתש" + (n === 1900 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1800) return "תתתתר" + (n === 1800 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1700) return "תתתתק" + (n === 1700 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1600) return "תתתת" + (n === 1600 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1500) return "תתתש" + (n === 1500 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1400) return "תתתר" + (n === 1400 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1300) return "תתתק" + (n === 1300 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1200) return "תתת" + (n === 1200 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1100) return "תתש" + (n === 1100 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1e3) return "תתר" + (n === 1e3 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 900) return "תתק" + (n === 900 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 800) return "תת" + (n === 800 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 745) return "תש" + this.renderHebrewItem(n % 100);
    if (n >= 744) return "תשדמ";
    if (n >= 700) return "תש" + (n === 700 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 699) return "תר" + this.renderHebrewItem(n % 100);
    if (n >= 698) return "תרחצ";
    if (n >= 600) return "תר" + (n === 600 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 500) return "תק" + (n === 500 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 400) return "ת" + (n === 400 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 345) return "ש" + this.renderHebrewItem(n % 100);
    if (n >= 344) return "שדמ";
    if (n >= 305) return "ש" + this.renderHebrewItem(n % 100);
    if (n >= 304) return "דש";
    if (n >= 300) return "ש" + (n === 300 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 299) return "ר" + this.renderHebrewItem(n % 100);
    if (n >= 298) return "רחצ";
    if (n >= 200) return "ר" + (n === 200 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 100) return "ק" + (n === 100 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 90) return "צ" + (n === 90 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 80) return "פ" + (n === 80 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 70) return "ע" + (n === 70 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 60) return "ס" + (n === 60 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 50) return "נ" + (n === 50 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 40) return "מ" + (n === 40 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 30) return "ל" + (n === 30 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 20) return "כ" + (n === 20 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 17) return "י" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "טז";
    if (n >= 15) return "טו";
    if (n >= 10) return "י" + (n === 10 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 9) return "ט";
    if (n >= 8) return "ח";
    if (n >= 7) return "ז";
    if (n >= 6) return "ו";
    if (n >= 5) return "ה";
    if (n >= 4) return "ד";
    if (n >= 3) return "ג";
    if (n >= 2) return "ב";
    if (n >= 1) return "א";
    if (n >= 0) return "״";
};

inter.renderTamilThousands = function(n) {
    if (n >= 1e3) return this.renderTamilThousands(Math.floor(n / 1e3)) + "௲" + (n === 1e3 ? "" : this.renderTamilThousands(n % 1e3));
    if (n >= 0) return this.renderTamil(n);
};

inter.renderEthiopicP = function(n) {
    if (n >= 1e16) return this.renderEthiopicP(Math.floor(n / 1e16)) + "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 1e12) return this.renderEthiopicP(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1e8) return this.renderEthiopicP(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1e4) return this.renderEthiopicP(Math.floor(n / 1e4)) + "፼" + (n === 1e4 ? "" : this.renderEthiopicP(n % 1e4));
    if (n >= 1) return this.renderEthiopic(n);
};

inter.territories = [ _acl561, _acl5119, _acl5174, _acl5243, _acl5194, _acl5225, _acl5149, _acl5240, _acl5195, _acl5196, _acl5175, _acl5211, _acl573, _acl5232, _acl5120, _acl597, _acl574, _acl552, _acl5150, _acl5121, _acl5234, _acl5122, _acl5176, _acl5123, _acl5177, _acl562, _acl5242, _acl551, _acl5178, _acl5124, _acl575, _acl576, _acl5125, _acl5197, _acl5254, _acl563, _acl598, _acl5126, _acl5151, _acl577, _acl5212, _acl5198, _acl5213, _acl578, _acl5199, _acl579, _acl564, _acl580, _acl5241, _acl553, _acl5127, _acl599, _acl565, _acl581, _acl5179, _acl5128, _acl5235, _acl566, _acl5200, _acl5129, _acl5130, _acl5152, _acl5100, _acl5201, _acl582, _acl5153, _acl5101, _acl5131, _acl5132, _acl5154, _acl5180, _acl583, _acl5202, _acl5155, _acl5156, _acl5102, _acl5245, _acl5103, _acl5104, _acl5203, _acl554, _acl5157, _acl555, _acl5105, _acl5133, _acl5236, _acl584, _acl5158, _acl5106, _acl5159, _acl5160, _acl5214, _acl5134, _acl585, _acl5107, _acl5135, _acl5181, _acl5161, _acl5136, _acl5215, _acl586, _acl567, _acl5162, _acl542, _acl587, _acl5108, _acl5226, _acl588, _acl5109, _acl5163, _acl589, _acl568, _acl5182, _acl5110, _acl590, _acl5220, _acl5111, _acl5183, _acl5137, _acl5204, _acl5112, _acl5205, _acl5206, _acl556, _acl5164, _acl5255, _acl5138, _acl5216, _acl5207, _acl591, _acl5184, _acl569, _acl5139, _acl592, _acl5165, _acl5166, _acl5227, _acl5249, _acl5256, _acl5221, _acl5222, _acl5140, _acl5167, _acl5247, _acl5113, _acl5237, _acl593, _acl594, _acl570, _acl5141, _acl5185, _acl5142, _acl5143, _acl5168, _acl5144, _acl5258, _acl595, _acl5208, _acl5169, _acl5114, _acl5217, _acl5228, _acl5186, _acl5209, _acl5187, _acl5188, _acl5189, _acl5115, _acl5260, _acl5190, _acl5170, _acl5171, _acl5116, _acl5218, _acl5172, _acl571, _acl596, _acl5229, _acl5191, _acl5173, _acl5145, _acl5223, _acl5210, _acl5233, _acl5246, _acl5146, _acl5230, _acl572 ];

inter.regions = [ _acl542, _acl5226, _acl5228, _acl5260, _acl5233 ];

inter.countries = [ _acl561, _acl5119, _acl5174, _acl5243, _acl5194, _acl5225, _acl5149, _acl5240, _acl5195, _acl5196, _acl5175, _acl5211, _acl573, _acl5232, _acl5120, _acl597, _acl574, _acl552, _acl5150, _acl5121, _acl5234, _acl5122, _acl5176, _acl5123, _acl5177, _acl562, _acl5242, _acl551, _acl5178, _acl5124, _acl575, _acl576, _acl5125, _acl5197, _acl5254, _acl563, _acl598, _acl5126, _acl5151, _acl577, _acl5212, _acl5198, _acl5213, _acl578, _acl5199, _acl579, _acl564, _acl580, _acl5241, _acl553, _acl5127, _acl599, _acl565, _acl581, _acl5179, _acl5128, _acl5235, _acl566, _acl5200, _acl5129, _acl5130, _acl5152, _acl5100, _acl5201, _acl582, _acl5153, _acl5101, _acl5131, _acl5132, _acl5154, _acl5180, _acl583, _acl5202, _acl5155, _acl5156, _acl5102, _acl5245, _acl5103, _acl5104, _acl5203, _acl554, _acl5157, _acl555, _acl5105, _acl5133, _acl5236, _acl584, _acl5158, _acl5106, _acl5159, _acl5160, _acl5214, _acl5134, _acl585, _acl5107, _acl5135, _acl5181, _acl5161, _acl5136, _acl5215, _acl586, _acl567, _acl5162, _acl587, _acl5108, _acl588, _acl5109, _acl5163, _acl589, _acl568, _acl5182, _acl5110, _acl590, _acl5220, _acl5111, _acl5183, _acl5137, _acl5204, _acl5112, _acl5205, _acl5206, _acl556, _acl5164, _acl5255, _acl5138, _acl5216, _acl5207, _acl591, _acl5184, _acl569, _acl5139, _acl592, _acl5165, _acl5166, _acl5227, _acl5249, _acl5256, _acl5221, _acl5222, _acl5140, _acl5167, _acl5247, _acl5113, _acl5237, _acl593, _acl594, _acl570, _acl5141, _acl5185, _acl5142, _acl5143, _acl5168, _acl5144, _acl5258, _acl595, _acl5208, _acl5169, _acl5114, _acl5217, _acl5186, _acl5209, _acl5187, _acl5188, _acl5189, _acl5115, _acl5190, _acl5170, _acl5171, _acl5116, _acl5218, _acl5172, _acl571, _acl596, _acl5229, _acl5191, _acl5173, _acl5145, _acl5223, _acl5210, _acl5246, _acl5146, _acl5230, _acl572 ];

inter.languages = [ {
    id: "en_us",
    displayName: "དབྱིན་ཇིའི་སྐད། (ཨ་རི་)",
    nativeDisplayName: "American English"
}, {
    id: "ms",
    displayName: "མ་ལ་ཡ་སྐད།",
    nativeDisplayName: "Bahasa Melayu"
}, {
    id: "en_gb",
    displayName: "དབྱིན་ཇིའི་སྐད། (དབྱིན་ལན་)",
    nativeDisplayName: "British English"
}, {
    id: "en_ca",
    displayName: "དབྱིན་ཇིའི་སྐད། (ཁེ་ན་ཌ་)",
    nativeDisplayName: "Canadian English"
}, {
    id: "da",
    displayName: "ཏེན་མག་གི་སྐད།",
    nativeDisplayName: "dansk"
}, {
    id: "de",
    displayName: "འཇར་མན་གྱི།",
    nativeDisplayName: "Deutsch"
}, {
    id: "en",
    displayName: "དབྱིན་ཇིའི་སྐད།",
    nativeDisplayName: "English"
}, {
    id: "es",
    displayName: "ཞི་པན་ཡའི།",
    nativeDisplayName: "español"
}, {
    id: "fr",
    displayName: "ཧྥ་རན་སིའི་།",
    nativeDisplayName: "français"
}, {
    id: "id",
    displayName: "ཨིན་དོ་ནི་སི་སྐད།",
    nativeDisplayName: "Indonesia"
}, {
    id: "zu",
    displayName: "ཟུ་ལུ་སྐད།",
    nativeDisplayName: "isiZulu"
}, {
    id: "it",
    displayName: "དབྱི་ཏ་་ལའི་མི།",
    nativeDisplayName: "italiano"
}, {
    id: "nl",
    displayName: "ཧའོ་ལན་སྐད།",
    nativeDisplayName: "Nederlands"
}, {
    id: "nn",
    displayName: "ནོ་ཝེ་སྐད།",
    nativeDisplayName: "nynorsk"
}, {
    id: "pl",
    displayName: "པོ་ལན་སྐད།",
    nativeDisplayName: "polski"
}, {
    id: "pt",
    displayName: "ཕི་ཐོ་ཡའི།",
    nativeDisplayName: "português"
}, {
    id: "pt_br",
    displayName: "པ་ཞའི་མི། ཕི་ཐོ་ཡའི་མི།",
    nativeDisplayName: "português do Brasil"
}, {
    id: "sv",
    displayName: "ཧྲུའི་ཏན་སྐད།",
    nativeDisplayName: "svenska"
}, {
    id: "vi",
    displayName: "ཡོ་ནན་སྐད།",
    nativeDisplayName: "Tiếng Việt"
}, {
    id: "tr",
    displayName: "ཐུར་ཁེའི་སྐད།",
    nativeDisplayName: "Türkçe"
}, {
    id: "mn",
    displayName: "སོག་སྐད།",
    nativeDisplayName: "монгол"
}, {
    id: "ru",
    displayName: "ཨུ་རུ་སུ་སྐད་",
    nativeDisplayName: "русский"
}, {
    id: "uk",
    displayName: "ཡུ་ཀྲ་ནི་སྐད།",
    nativeDisplayName: "українська"
}, {
    id: "ug",
    displayName: "ཡུ་གུར་སྐད།",
    nativeDisplayName: "ئۇيغۇرچە"
}, {
    id: "ur",
    displayName: "ཝུའུ་ཏུའུ་སྐད།",
    nativeDisplayName: "اردو"
}, {
    id: "ne",
    displayName: "ནེ་པ་ལི",
    nativeDisplayName: "नेपाली"
}, {
    id: "mr",
    displayName: "མ་ར་ཐི་སྐད།",
    nativeDisplayName: "मराठी"
}, {
    id: "hi",
    displayName: "ཧིན་དི",
    nativeDisplayName: "हिन्दी"
}, {
    id: "bn",
    displayName: "བྷང་ག་ལའི་སྐད།",
    nativeDisplayName: "বাংলা"
}, {
    id: "gu",
    displayName: "གུཇ་རཱཏི་སྐད།",
    nativeDisplayName: "ગુજરાતી"
}, {
    id: "or",
    displayName: "ཨཽ་རི་ཡ་སྐད།",
    nativeDisplayName: "ଓଡ଼ିଆ"
}, {
    id: "ta",
    displayName: "ཏཱ་མིལ་སྐད།",
    nativeDisplayName: "தமிழ்"
}, {
    id: "te",
    displayName: "ཏེ་ལུ་གུ་སྐད།",
    nativeDisplayName: "తెలుగు"
}, {
    id: "kn",
    displayName: "ཀནྣ་ཌ་སྐད།",
    nativeDisplayName: "ಕನ್ನಡ"
}, {
    id: "si",
    displayName: "ཞི་ལན་སྐད།",
    nativeDisplayName: "සිංහල"
}, {
    id: "th",
    displayName: "ཐའའི་ཡུལ་སྐད།",
    nativeDisplayName: "ไทย"
}, {
    id: "gaa",
    displayName: "གཱ་སྐད།"
}, {
    id: "bo",
    displayName: "བོད་སྐད་",
    nativeDisplayName: "བོད་སྐད་"
}, {
    id: "und",
    displayName: "མིའི་ཤེས་རྟོགས་མ་བྱུང་བ། ཡང་ན་ཆད་ལྷག་ཅན་གྱི་སྐད་བརྡ།"
}, {
    id: "zza",
    displayName: "ཟ་ཟའ་སྐད།"
}, {
    id: "zun",
    displayName: "ཟུ་ནི་སྐད།"
}, {
    id: "zen",
    displayName: "ཟེ་ན་གཱ་སྐད།"
}, {
    id: "dz",
    displayName: "རྫོང་ཁ",
    nativeDisplayName: "རྫོང་ཁ"
}, {
    id: "la",
    displayName: "ལཱ་ཏིན་སྐད།"
}, {
    id: "sa",
    displayName: "སཾ་སྐྲྀ་ཏ།"
}, {
    id: "my",
    displayName: "འབར་མའི་སྐད།",
    nativeDisplayName: "ဗမာ"
}, {
    id: "zh",
    displayName: "རྒྱ་སྐད་",
    nativeDisplayName: "中文"
}, {
    id: "ja",
    displayName: "ཉི་ཧོང་སྐད་",
    nativeDisplayName: "日本語"
}, {
    id: "zh_hans",
    displayName: "སྟབས་བརྡའི། ཀྲུང་གོའི།",
    nativeDisplayName: "简体中文"
}, {
    id: "zh_hant",
    displayName: "སྲོལ་རྒྱུན་གྱི།",
    nativeDisplayName: "繁體中文"
}, {
    id: "ko",
    displayName: "ཁོ་རེ་ཡའི་སྐད།",
    nativeDisplayName: "한국어"
} ];

inter.scripts = [ {
    id: "Gujr",
    displayName: "གུཇ་རཱཏི་སྐད།"
}, {
    id: "Cyrl",
    displayName: "གོ་སའི་ལ་ཧྥུ་སྐད་ཡིག་།"
}, {
    id: "Deva",
    displayName: "དེ་བ་ནཱ་ག་རཱི་སྐད་ཡིག"
}, {
    id: "Tibt",
    displayName: "བོད་ཡིག་"
}, {
    id: "Zzzz",
    displayName: "མིའི་ཤེས་རྟོགས་མ་བྱུང་བ། ཡང་ན་ཆད་ལྷག་ཅན་གྱི་ཟིན་བྲིས།"
}, {
    id: "Arab",
    displayName: "འ་ལ་པོའི་སྐད་ཡིག་།"
}, {
    id: "Mymr",
    displayName: "འབར་མའི་སྐད་ཡིག"
}, {
    id: "Hans",
    displayName: "རྒྱ་ཡིག་གསར་པ།"
}, {
    id: "Hant",
    displayName: "རྒྱ་ཡིག་རྙིང་པ།"
}, {
    id: "Latn",
    displayName: "ལ་ཏིན་སྐད་ཡིག་།"
}, {
    id: "Zxxx",
    displayName: "སྙན་བརྒྱུད། ཡིག་རིགས་སུ་མ་བཀོད་པའི་ཟིན་ཐོ།"
} ];

inter.currencies = [ {
    id: "XXX",
    displayName: "མ་རྟོགས་པའི་ནུས་མེད་དངུལ་ལོར"
}, {
    id: "CNY",
    displayName: "ཡུ་ཨན་",
    symbol: "¥"
}, {
    id: "INR",
    displayName: "རྒྱ་གར་སྒོར་",
    symbol: "₹"
}, {
    id: "USD",
    displayName: "ཨ་རིའི་སྒོར་",
    symbol: "US$"
} ];

module.exports = inter;