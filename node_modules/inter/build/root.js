var inter = {
    renderers: {},
    trQuantity: function(patternByQuantity, number) {
        var pattern = patternByQuantity[this.pluralRule(number)];
        if (pattern) {
            return this.getPatternRenderer(pattern).call(this, Array.prototype.slice.call(arguments, 1));
        } else {
            return "[! trQuantity: Missing plural rule for `" + this.pluralRule(number) + "` !]";
        }
    },
    renderList: function(list, type) {
        type = type || "default";
        var patterns = this.listPatterns[type];
        switch (list.length) {
          case 0:
            return "";
          case 1:
            return list[0];
          case 2:
            if ("2" in patterns) {
                return this.renderPattern(list, patterns["2"]);
            }
          default:
            var str = this.renderPattern(list.slice(-2), patterns.end || "{0}, {1}");
            for (var i = list.length - 3; i >= 0; i -= 1) {
                str = this.renderPattern([ list[i], str ], !i && patterns.start || patterns.middle || "{0}, {1}");
            }
            return str;
        }
    },
    tokenizePattern: function(pattern) {
        var tokens = [];
        pattern.replace(/\{(\d+)\}|([^\{]+)/g, function($0, placeHolderNumber, text) {
            if (text) {
                tokens.push({
                    type: "text",
                    value: text
                });
            } else {
                tokens.push({
                    type: "placeHolder",
                    value: parseInt(placeHolderNumber, 10)
                });
            }
        });
        return tokens;
    },
    makePatternRenderer: function(pattern) {
        if (pattern) {
            var predefinedCodeFragments = [].slice.call(arguments, 1);
            return new Function("values", "return " + this.tokenizePattern(pattern).map(function(token) {
                if (token.type === "placeHolder") {
                    return predefinedCodeFragments[token.value] || "values[" + token.value + "]";
                } else {
                    return '"' + token.value.replace(/\"/g, '\\"').replace(/\n/g, "\\n") + '"';
                }
            }).join("+") + ";");
        } else {
            return function() {
                return "[! makePatternRenderer: No pattern provided !]";
            };
        }
    },
    makeUnitRenderer: function(unit, unitLength) {
        unitLength = unitLength || "long";
        var that = this, quantityRenderers = {};
        for (var quantity in that.unitPatterns[unitLength].unit[unit]) {
            if (that.unitPatterns[unitLength].unit[unit].hasOwnProperty(quantity)) {
                quantityRenderers[quantity] = that.makePatternRenderer(that.unitPatterns[unitLength].unit[unit][quantity]);
            }
        }
        return function(n) {
            return quantityRenderers[that.pluralRule(n)]([ n ]);
        };
    },
    makeFileSizeRenderer: function(numDecimals, numberSystemId) {
        var numberSymbols = this.numbers[numberSystemId || this.defaultNumberSystemId].symbols;
        function makeNumberRendererSource(sourceVariableNameOrExpression, numDecimals, suffix) {
            return "(" + sourceVariableNameOrExpression + ")" + ".toFixed(" + (numDecimals || 0) + ")" + (numberSymbols.decimalPoint === "." ? "" : ".replace('.', '" + numberSymbols.decimal.replace(/\'/g, "\\'") + "')") + (suffix ? "+'" + suffix.replace(/\'/g, "\\'") + "'" : "");
        }
        return new Function("size", "if (size < 1000) {" + "return " + makeNumberRendererSource("size", 0, " bytes", numberSystemId) + ";" + "} else if (size < 1000000) {" + "return " + makeNumberRendererSource("size/1024", numDecimals, " KB", numberSystemId) + ";" + "} else if (size < 1000000000) {" + "return " + makeNumberRendererSource("size/1048576", numDecimals, " MB", numberSystemId) + ";" + "} else if (size < 1000000000000) {" + "return " + makeNumberRendererSource("size/1073741824", numDecimals, " GB", numberSystemId) + ";" + "} else {" + "return " + makeNumberRendererSource("size/1099511627776", numDecimals, " TB", numberSystemId) + ";" + "}");
    },
    makeNumberRenderer: function(pattern, numberSystemId, currencyCode, numDecimals) {
        pattern = pattern || this.numbers.latn.formats.decimal["default"];
        var numberSystem = this.numbers[numberSystemId || "latn"], digits = numberSystem.digits;
        if (typeof digits === "string") {
            var that = this;
            return function(number) {
                return that[digits](number);
            };
        }
        var maximumIntegerDigits = 40, minimumIntegerDigits = 1, maximumFractionDigits = 3, minimumFractionDigits = 0, minExponentDigits = 0, useSignForPositiveExponent = false, positivePrefix = "", positiveSuffix = "", negativePrefix = "-", negativeSuffix = "", multiplier = 1, groupingSize = 3, decimalSeparatorAlwaysShown = false, useExponentialNotation = false, pos = [ 0 ];
        positivePrefix = parseAffix(pattern, pos);
        var trunkStart = pos[0];
        parseTrunk(pattern, pos);
        var trunkLen = pos[0] - trunkStart;
        positiveSuffix = parseAffix(pattern, pos);
        if (pos[0] < pattern.length && pattern.charAt(pos[0]) === ";") {
            pos[0] += 1;
            negativePrefix = parseAffix(pattern, pos);
            pos[0] += trunkLen;
            negativeSuffix = parseAffix(pattern, pos);
        } else {
            negativePrefix = positivePrefix + negativePrefix;
            negativeSuffix += positiveSuffix;
        }
        function parseAffix(pattern, pos) {
            var affix = "", inQuote = false, len = pattern.length;
            for (; pos[0] < len; pos[0] += 1) {
                var ch = pattern.charAt(pos[0]);
                if (ch === "'") {
                    if (pos[0] + 1 < len && pattern.charAt(pos[0] + 1) === "'") {
                        pos[0] += 1;
                        affix += "'";
                    } else {
                        inQuote = !inQuote;
                    }
                    continue;
                }
                if (inQuote) {
                    affix += ch;
                } else {
                    switch (ch) {
                      case "#":
                      case "0":
                      case ",":
                      case ".":
                      case ";":
                        return affix;
                      case "¤":
                        if (pos[0] + 1 < len && pattern.charAt(pos[0] + 1) === "¤") {
                            pos[0] += 1;
                            affix += currencyCode || "¤";
                        } else {
                            affix += currencyCode || "¤";
                        }
                        break;
                      case "%":
                        if (multiplier !== 1) {
                            throw Error("Too many percent/permill");
                        }
                        multiplier = 100;
                        affix += numberSystem.symbols.percentSign;
                        break;
                      case "‰":
                        if (multiplier !== 1) {
                            throw Error("Too many percent/permill");
                        }
                        multiplier = 1e3;
                        affix += numberSystem.symbols.perMille;
                        break;
                      default:
                        affix += ch;
                    }
                }
            }
            return affix;
        }
        function subformatFixed(number, minIntDigits, parts) {
            var power = Math.pow(10, maximumFractionDigits), shiftedNumber = Math.round(number * power), intValue, fracValue;
            if (isFinite(shiftedNumber)) {
                intValue = Math.floor(shiftedNumber / power);
                fracValue = Math.floor(shiftedNumber - intValue * power);
            } else {
                intValue = number;
                fracValue = 0;
            }
            var fractionPresent = minimumFractionDigits > 0 || fracValue > 0, intPart = "", translatableInt = intValue;
            while (translatableInt > 1e20) {
                intPart = "0" + intPart;
                translatableInt = Math.round(translatableInt / 10);
            }
            intPart = translatableInt + intPart;
            var decimal = numberSystem.symbols.decimal, grouping = numberSystem.symbols.group, zeroCode = digits[0].charCodeAt(0), digitLen = intPart.length, i;
            if (intValue > 0 || minIntDigits > 0) {
                for (i = digitLen; i < minIntDigits; i += 1) {
                    parts.push(String.fromCharCode(zeroCode));
                }
                for (i = 0; i < digitLen; i += 1) {
                    parts.push(String.fromCharCode(zeroCode + intPart.charAt(i) * 1));
                    if (digitLen - i > 1 && groupingSize > 0 && (digitLen - i) % groupingSize === 1) {
                        parts.push(grouping);
                    }
                }
            } else if (!fractionPresent) {
                parts.push(String.fromCharCode(zeroCode));
            }
            if (decimalSeparatorAlwaysShown || fractionPresent) {
                parts.push(decimal);
            }
            var fracPart = "" + (fracValue + power), fracLen = fracPart.length;
            while (fracPart.charAt(fracLen - 1) === "0" && fracLen > minimumFractionDigits + 1) {
                fracLen -= 1;
            }
            for (i = 1; i < fracLen; i += 1) {
                parts.push(String.fromCharCode(zeroCode + fracPart.charAt(i) * 1));
            }
        }
        function addExponentPart(exponent, parts) {
            parts.push(numberSystem.symbols.exponential);
            if (exponent < 0) {
                exponent = -exponent;
                parts.push(numberSystem.symbols.minusSign);
            } else if (useSignForPositiveExponent) {
                parts.push(numberSystem.symbols.plusSign);
            }
            var exponentDigits = "" + exponent, zeroChar = digits[0];
            for (var i = exponentDigits.length; i < minExponentDigits; i += 1) {
                parts.push(zeroChar);
            }
            parts.push(exponentDigits);
        }
        function subformatExponential(number, parts) {
            if (number === 0) {
                subformatFixed(number, minimumIntegerDigits, parts);
                addExponentPart(0, parts);
                return;
            }
            var exponent = Math.floor(Math.log(number) / Math.log(10));
            number /= Math.pow(10, exponent);
            var minIntDigits = minimumIntegerDigits;
            if (maximumIntegerDigits > 1 && maximumIntegerDigits > minimumIntegerDigits) {
                while (exponent % maximumIntegerDigits !== 0) {
                    number *= 10;
                    exponent -= 1;
                }
                minIntDigits = 1;
            } else {
                if (minimumIntegerDigits < 1) {
                    exponent += 1;
                    number /= 10;
                } else {
                    exponent -= minimumIntegerDigits - 1;
                    number *= Math.pow(10, minimumIntegerDigits - 1);
                }
            }
            subformatFixed(number, minIntDigits, parts);
            addExponentPart(exponent, parts);
        }
        function parseTrunk(pattern, pos) {
            var decimalPos = -1, digitLeftCount = 0, zeroDigitCount = 0, digitRightCount = 0, groupingCount = -1, len = pattern.length;
            for (var loop = true; pos[0] < len && loop; pos[0] += 1) {
                var ch = pattern.charAt(pos[0]);
                switch (ch) {
                  case "#":
                    if (zeroDigitCount > 0) {
                        digitRightCount += 1;
                    } else {
                        digitLeftCount += 1;
                    }
                    if (groupingCount >= 0 && decimalPos < 0) {
                        groupingCount += 1;
                    }
                    break;
                  case "0":
                    if (digitRightCount > 0) {
                        throw Error('Unexpected "0" in pattern "' + pattern + '"');
                    }
                    zeroDigitCount += 1;
                    if (groupingCount >= 0 && decimalPos < 0) {
                        groupingCount += 1;
                    }
                    break;
                  case ",":
                    groupingCount = 0;
                    break;
                  case ".":
                    if (decimalPos >= 0) {
                        throw Error('Multiple decimal separators in pattern "' + pattern + '"');
                    }
                    decimalPos = digitLeftCount + zeroDigitCount + digitRightCount;
                    break;
                  case "E":
                    if (useExponentialNotation) {
                        throw Error('Multiple exponential symbols in pattern "' + pattern + '"');
                    }
                    useExponentialNotation = true;
                    minExponentDigits = 0;
                    if (pos[0] + 1 < len && pattern.charAt(pos[0] + 1) === "+") {
                        pos[0] += 1;
                        useSignForPositiveExponent = true;
                    }
                    while (pos[0] + 1 < len && pattern.charAt(pos[0] + 1) === "0") {
                        pos[0] += 1;
                        minExponentDigits += 1;
                    }
                    if (digitLeftCount + zeroDigitCount < 1 || minExponentDigits < 1) {
                        throw Error('Malformed exponential pattern "' + pattern + '"');
                    }
                    loop = false;
                    break;
                  default:
                    pos[0] -= 1;
                    loop = false;
                    break;
                }
            }
            if (zeroDigitCount === 0 && digitLeftCount > 0 && decimalPos >= 0) {
                var n = decimalPos;
                if (n === 0) {
                    n += 1;
                }
                digitRightCount = digitLeftCount - n;
                digitLeftCount = n - 1;
                zeroDigitCount = 1;
            }
            if (decimalPos < 0 && digitRightCount > 0 || decimalPos >= 0 && (decimalPos < digitLeftCount || decimalPos > digitLeftCount + zeroDigitCount) || groupingCount === 0) {
                throw Error('Malformed pattern "' + pattern + '"');
            }
            var totalDigits = digitLeftCount + zeroDigitCount + digitRightCount;
            if (typeof numDecimals === "number") {
                minimumFractionDigits = maximumFractionDigits = numDecimals;
            } else {
                maximumFractionDigits = decimalPos >= 0 ? totalDigits - decimalPos : 0;
                if (decimalPos >= 0) {
                    minimumFractionDigits = digitLeftCount + zeroDigitCount - decimalPos;
                    if (minimumFractionDigits < 0) {
                        minimumFractionDigits = 0;
                    }
                }
            }
            var effectiveDecimalPos = decimalPos >= 0 ? decimalPos : totalDigits;
            minimumIntegerDigits = effectiveDecimalPos - digitLeftCount;
            if (useExponentialNotation) {
                maximumIntegerDigits = digitLeftCount + minimumIntegerDigits;
                if (maximumFractionDigits === 0 && minimumIntegerDigits === 0) {
                    minimumIntegerDigits = 1;
                }
            }
            groupingSize = Math.max(0, groupingCount);
            decimalSeparatorAlwaysShown = decimalPos === 0 || decimalPos === totalDigits;
        }
        return function format(number) {
            if (isNaN(number)) {
                return numberSystem.symbols.nan;
            }
            var parts = [], isNegative = number < 0 || number === 0 && 1 / number < 0;
            parts.push(isNegative ? negativePrefix : positivePrefix);
            if (!isFinite(number)) {
                parts.push(numberSystem.symbols.infinity);
            } else {
                number *= isNegative ? -1 : 1;
                number *= multiplier;
                if (useExponentialNotation) {
                    subformatExponential(number, parts);
                } else {
                    subformatFixed(number, minimumIntegerDigits, parts);
                }
            }
            parts.push(isNegative ? negativeSuffix : positiveSuffix);
            return parts.join("");
        };
    },
    makePercentageRenderer: function(numDecimals, numberSystemId) {
        numberSystemId = numberSystemId || "latn";
        var pattern = this.numbers[numberSystemId].formats.percent["default"];
        return this.makeNumberRenderer(pattern, numberSystemId, undefined, numDecimals);
    },
    tokenizeDateFormat: function(format) {
        var tokens = [];
        format.replace(/([^a-z']+)|'(')|'((?:[^']|'')+)'|(([a-z])\5*)/gi, function($0, unescapedText, escapedSingleQuote, escapedText, fieldToken) {
            if (fieldToken) {
                tokens.push({
                    type: "field",
                    value: fieldToken
                });
            } else {
                if (escapedText) {
                    escapedText = escapedText.replace(/''/g, "'");
                }
                tokens.push({
                    type: "text",
                    value: (unescapedText || escapedSingleQuote || escapedText || $0).replace(/"/g, '\\"')
                });
            }
        });
        return tokens;
    },
    normalizeDate: function(dateInstance) {
        if (!dateInstance || !dateInstance.getHours) {
            if (dateInstance._time) {
                var icalJsDate = dateInstance;
                dateInstance = {
                    getTimezoneOffset: function() {
                        return -icalJsDate.utcOffset() / 60;
                    },
                    getTime: function() {
                        return icalJsDate.toUnixTime() * 1e3;
                    },
                    getDay: function() {
                        return icalJsDate.dayOfWeek() - 1;
                    },
                    getFullYear: function() {
                        return icalJsDate._time.year;
                    },
                    getMonth: function() {
                        return icalJsDate._time.month - 1;
                    },
                    getDate: function() {
                        return icalJsDate._time.day;
                    },
                    getHours: function() {
                        return icalJsDate._time.hour;
                    },
                    getMinutes: function() {
                        return icalJsDate._time.minute;
                    },
                    getSeconds: function() {
                        return icalJsDate._time.second;
                    }
                };
            } else {
                dateInstance = new Date(dateInstance);
            }
        }
        return dateInstance;
    },
    makeDateNormalizerSource: function(variableName) {
        var source = this.normalizeDate.toString();
        var matchParameterName = source.match(/function[^(]*\((\w+)\)/);
        var parameterNameRegExp = new RegExp("\\b" + (matchParameterName ? matchParameterName[1] : "dateInstance").replace(/[\\\|\.\+\*\{\}\[\]\(\)\?\^\$]/g, "\\$&") + "\\b", "g");
        return source.replace(/^[^\{]+\{|\s*return \w+;?\s*\}$/g, "").replace(parameterNameRegExp, variableName);
    },
    getCodeFragmentsByFormatChar: function() {
        if (!this.codeFragmentsByFormatChar) {
            this.codeFragmentsByFormatChar = {
                G: [ "{eraNames.abbreviated}[{date}.getFullYear() > 0 ? 1 : 0]" ],
                y: [ '"0000".slice(String({date}.getFullYear()).length) + {date}.getFullYear()' ],
                Q: [ '"0" + ({date}.getMonth()/4)', "*", "{quarterNames.format.abbreviated}[Math.floor({date}.getMonth()/4)]", "{quarterNames.format.wide}[Math.floor({date}.getMonth()/4)]" ],
                M: [ "({date}.getMonth() + 1)", '({date}.getMonth() < 9 ? "0" : "") + ({date}.getMonth() + 1)', "{monthNames.format.abbreviated}[{date}.getMonth()]", "{monthNames.format.wide}[{date}.getMonth()]" ],
                L: [ "({date}.getMonth() + 1)", '({date}.getMonth() < 9 ? "0" : "") + ({date}.getMonth() + 1)', "{monthNames.standAlone.abbreviated}[{date}.getMonth()]", "{monthNames.standAlone.wide}[{date}.getMonth()]" ],
                d: [ "{date}.getDate()", '({date}.getDate() < 10 ? "0" : "") + {date}.getDate()' ],
                D: [ "(1 + Math.floor(({date}.getTime() - new Date({date}.getFullYear(), 0, 1).getTime()) / 86400000))" ],
                F: [ "(1 + Math.floor((date.getDate() - 1) / 7))" ],
                E: [ "{dayNames.format.abbreviated}[{date}.getDay()]", "*", "*", "{dayNames.format.wide}[{date}.getDay()]" ],
                a: [ '({date}.getHours() < 12 ? "am" : "pm")' ],
                h: [ "(({date}.getHours() % 12) ? {date}.getHours() % 12 : 12)" ],
                H: [ '({date}.getHours() < 10 ? "0" : "") + {date}.getHours()' ],
                m: [ '({date}.getMinutes() < 10 ? "0" : "") + {date}.getMinutes()' ],
                s: [ '({date}.getSeconds() < 10 ? "0" : "") + {date}.getSeconds()' ],
                z: [ function() {
                    return "({date}.getTimezoneOffset() < 0 ? " + this.makeDateFormatRendererSource("new Date(1970, 0, 1, 0, -{date}.getTimezoneOffset())", this.timeZoneFormats.hour[0]) + ":" + this.makeDateFormatRendererSource("new Date(1970, 0, 1, 0, {date}.getTimezoneOffset())", this.timeZoneFormats.hour[1]) + ")";
                } ]
            };
        }
        return this.codeFragmentsByFormatChar;
    },
    getCodeFragmentForDateField: function(fieldToken, sourceVariableNameOrExpression, calendarId) {
        calendarId = calendarId || "gregorian";
        var codeFragmentsByFormatChar = this.getCodeFragmentsByFormatChar(), codeFragments = codeFragmentsByFormatChar[fieldToken[0]];
        if (codeFragments) {
            var codeFragmentNumber = Math.min(fieldToken.length, codeFragments.length) - 1;
            while (codeFragments[codeFragmentNumber] === "*") {
                codeFragmentNumber -= 1;
            }
            var that = this, codeFragment = codeFragments[codeFragmentNumber];
            if (typeof codeFragment === "function") {
                codeFragment = codeFragment.apply(this);
            }
            return codeFragment.replace(/\{([^\}]+)\}/g, function($0, varName) {
                if (varName === "date") {
                    return "(" + sourceVariableNameOrExpression + ")";
                } else {
                    var fragments = varName.split("."), obj = that.calendars[calendarId];
                    for (var i = 0; i < fragments.length; i += 1) {
                        obj = obj[fragments[i]];
                    }
                    return JSON.stringify(obj);
                }
            });
        }
    },
    makeDateFormatRendererSource: function(sourceVariableNameOrExpression, format, calendarId) {
        calendarId = calendarId || "gregorian";
        var expressions = [];
        this.tokenizeDateFormat(format).forEach(function(token) {
            if (token.type === "text") {
                expressions.push('"' + token.value.replace(/"/g, '\\"') + '"');
            } else {
                var codeFragment = this.getCodeFragmentForDateField(token.value, sourceVariableNameOrExpression, calendarId);
                if (codeFragment) {
                    expressions.push(codeFragment);
                }
            }
        }, this);
        return expressions.join("+");
    },
    makeDateRenderer: function(formatId, calendarId) {
        return new Function("d", this.makeDateNormalizerSource("d") + "return " + this.makeDateFormatRendererSource("d", this.getDateFormat(formatId, calendarId), calendarId) + ";");
    },
    makeDateFormatRenderer: function(format, calendarId) {
        return new Function("d", this.makeDateNormalizerSource("d") + "return " + this.makeDateFormatRendererSource("d", format, calendarId) + ";");
    },
    makeDateIntervalRenderer: function(formatId, datePartOnly, calendarId) {
        calendarId = calendarId || "gregorian";
        var that = this, greatestDifferences = that.calendars[calendarId].dateIntervalFormats[formatId];
        if (!greatestDifferences) {
            var bestMatchingDateIntervalFormatId = that.getBestICUFormatId(formatId, that.calendars[calendarId].dateIntervalFormats, calendarId);
            if (bestMatchingDateIntervalFormatId) {
                greatestDifferences = {};
                for (var key in that.calendars[calendarId].dateIntervalFormats[bestMatchingDateIntervalFormatId]) {
                    greatestDifferences[key] = that.adaptICUFormat(that.calendars[calendarId].dateIntervalFormats[bestMatchingDateIntervalFormatId][key], formatId);
                }
            }
        }
        if (greatestDifferences) {
            return that.makeDateIntervalRendererFromGreatestDifferences(greatestDifferences, calendarId);
        } else {
            var matchFormatId = formatId.match(/^([yMQEd]+)([Hhms]+)$/);
            if (datePartOnly && matchFormatId) {
                var dateFormatId = matchFormatId[1];
                return function(dateInterval) {
                    dateInterval = {
                        start: that.normalizeDate(dateInterval.start),
                        end: that.normalizeDate(dateInterval.end)
                    };
                    return that.renderDateInterval(dateInterval, dateFormatId, calendarId);
                };
            } else {
                var dateFormat = that.getDateFormat(formatId, calendarId);
                return that.getPatternRenderer(that.calendars[calendarId].dateIntervalFallbackFormat, that.makeDateFormatRendererSource("values.start", dateFormat, calendarId), that.makeDateFormatRendererSource("values.end", dateFormat, calendarId));
            }
        }
    },
    getDateFormat: function(formatId, calendarId) {
        calendarId = calendarId || "gregorian";
        formatId = formatId || "fullDateTime";
        var icuFormat = this.calendars[calendarId].dateFormats.basic[formatId] || this.calendars[calendarId].dateFormats.cldr[formatId];
        if (icuFormat) {
            return icuFormat;
        } else {
            var bestCandidateFormatId = this.getBestICUFormatId(formatId, this.calendars[calendarId].dateFormats.cldr);
            if (bestCandidateFormatId) {
                return this.calendars[calendarId].dateFormats.cldr[formatId] = this.adaptICUFormat(this.calendars[calendarId].dateFormats.cldr[bestCandidateFormatId], formatId);
            } else {
                var matchFormatId = formatId.match(/^y+M+d+$/);
                if (matchFormatId) {
                    return this.calendars[calendarId].dateFormats.cldr[formatId] = this.adaptICUFormat(this.calendars[calendarId].dateFormats.basic.shortDate, formatId);
                }
                matchFormatId = formatId.match(/^([yMQEd]+)([Hhms]+)$/);
                if (matchFormatId) {
                    var dateFormat = this.getDateFormat(matchFormatId[1], calendarId), timeFormat = this.getDateFormat(matchFormatId[2], calendarId);
                    return this.renderPattern([ timeFormat, dateFormat ], "medium");
                } else {
                    throw new Error("inter.getDateFormat: Cannot find format: " + formatId);
                }
            }
        }
    },
    makeDateIntervalRendererFromFormatString: function(format, calendarId) {
        calendarId = calendarId || "gregorian";
        var expressions = [], seenFields = {}, that = this;
        that.tokenizeDateFormat(format).forEach(function(token) {
            if (token.type === "text") {
                expressions.push('"' + token.value.replace(/"/g, '\\"') + '"');
            } else {
                expressions.push(that.getCodeFragmentForDateField(token.value, "dateInterval." + (seenFields[token.value[0]] ? "end" : "start"), calendarId));
                seenFields[token.value[0]] = true;
            }
        });
        return new Function("dateInterval", "return " + expressions.join("+") + ";");
    },
    makeDateIntervalRendererFromGreatestDifferences: function(greatestDifferences, calendarId) {
        calendarId = calendarId || "gregorian";
        var formatters = [], previousFormatter;
        [ "y", "M", "d", "a", "h", "m" ].forEach(function(ch, i) {
            var formatter;
            if (ch in greatestDifferences) {
                formatter = this.makeDateIntervalRendererFromFormatString(greatestDifferences[ch], calendarId);
                if (!previousFormatter) {
                    for (var j = 0; j < i; j += 1) {
                        formatters[j] = formatter;
                    }
                }
                previousFormatter = formatters[i] = formatter;
            } else if (previousFormatter) {
                formatters[i] = previousFormatter;
            }
        }, this);
        var dateIntervalRenderers = {};
        for (var greatestDifference in greatestDifferences) {
            if (greatestDifferences.hasOwnProperty(greatestDifference)) {
                dateIntervalRenderers[greatestDifference] = this.makeDateIntervalRendererFromFormatString(greatestDifferences[greatestDifference], calendarId);
            }
        }
        var that = this;
        return function(dateInterval) {
            dateInterval = {
                start: that.normalizeDate(dateInterval.start),
                end: that.normalizeDate(dateInterval.end)
            };
            if (dateInterval.start.getFullYear() !== dateInterval.end.getFullYear()) {
                return formatters[0](dateInterval);
            } else if (dateInterval.start.getMonth() !== dateInterval.end.getMonth()) {
                return formatters[1](dateInterval);
            } else if (dateInterval.start.getDate() !== dateInterval.end.getDate()) {
                return formatters[2](dateInterval);
            } else if (dateInterval.start.getHours() >= 12 === dateInterval.end.getHours() >= 12) {
                return formatters[4](dateInterval);
            } else if (dateInterval.start.getHours() !== dateInterval.end.getHours()) {
                return formatters[3](dateInterval);
            } else {
                return formatters[5](dateInterval);
            }
        };
    },
    getBestICUFormatId: function(formatId, sourceObject) {
        var bestCandidateFormatId, matcher = new RegExp("^" + formatId.replace(/(([a-zA-Z])\2*)/g, function($0, formatToken, formatChar) {
            return formatChar + "{1," + formatToken.length + "}";
        }) + "$");
        for (var candidateFormatId in sourceObject) {
            if (matcher.test(candidateFormatId)) {
                if (!bestCandidateFormatId || candidateFormatId.length > bestCandidateFormatId.length) {
                    bestCandidateFormatId = candidateFormatId;
                }
            }
        }
        return bestCandidateFormatId;
    },
    adaptICUFormat: function(icuFormat, adaptToFormatId) {
        adaptToFormatId.replace(/(([a-zA-Z])\2*)/g, function($0, formatToken, formatChar) {
            if (formatChar === "M") {
                formatChar = "[LM]";
            }
            icuFormat = icuFormat.replace(new RegExp(formatChar + "+", "g"), function($0) {
                return (new Array(formatToken.length + 1)).join($0.charAt(0));
            });
        });
        return icuFormat;
    },
    applySpacingToCurrencyString: function(currencyString, currencyFormat, numberSystemId) {
        var beforeCurrency = currencyFormat.currencySpacing.beforeCurrency, afterCurrency = currencyFormat.currencySpacing.afterCurrency;
        var preRenderedCurrency = this.renderNumber(42, currencyFormat["default"], numberSystemId, "¤");
        var currencyStartMatched = (new RegExp("^" + beforeCurrency.currencyMatch.source)).test(currencyString), currencyEndMatched = (new RegExp(afterCurrency.currencyMatch.source + "$")).test(currencyString);
        var beforeCurrencySurroundingMatched = (new RegExp(beforeCurrency.surroundingMatch.source + "¤")).test(preRenderedCurrency), afterCurrencySurroundingMatched = (new RegExp("¤" + afterCurrency.surroundingMatch.source)).test(preRenderedCurrency);
        if (currencyStartMatched && beforeCurrencySurroundingMatched) {
            currencyString = beforeCurrency.insertBetween + currencyString;
        } else if (currencyEndMatched && afterCurrencySurroundingMatched) {
            currencyString = currencyString + afterCurrency.insertBetween;
        }
        return currencyString;
    },
    renderCurrencyLong: function(value, currencyId, numberSystemId, numDecimals) {
        var currency = inter.getCurrency(currencyId);
        var currencyString = currency ? this.trQuantity(currency, value) : null;
        if (!currencyString) {
            currencyString = currencyId;
        }
        return this.renderCurrency(value, currencyString, numberSystemId, numDecimals);
    },
    renderCurrencyShort: function(value, currencyId, numberSystemId, numDecimals) {
        var currency;
        if (this.currencies) {
            currency = this.getCurrency(currencyId);
        }
        var currencyString = currency ? currency.symbol : null;
        if (!currencyString) {
            currencyString = currencyId;
        }
        return this.renderCurrency(value, currencyString, numberSystemId, numDecimals);
    },
    renderCurrency: function(value, currencyString, numberSystemId, numDecimals) {
        numberSystemId = numberSystemId || "latn";
        numDecimals = typeof numDecimals === "number" ? parseInt(numDecimals, 10) : undefined;
        currencyString = inter.applySpacingToCurrencyString(currencyString, this.numbers[numberSystemId].formats.currency, numberSystemId);
        return this.renderNumber(value, this.numbers[numberSystemId].formats.currency["default"], numberSystemId, currencyString, numDecimals);
    }
};

[ "Unit", "Number", "Percentage", "FileSize", "Date", "DateFormat", "DateInterval", "Pattern" ].forEach(function(rendererType) {
    if ("make" + rendererType + "Renderer" in this) {
        this["get" + rendererType + "Renderer"] = function() {
            var rendererId = rendererType + ":" + [].join.call(arguments, "/");
            return this.renderers[rendererId] || (this.renderers[rendererId] = this["make" + rendererType + "Renderer"].apply(this, arguments));
        };
        this["render" + rendererType] = function(obj) {
            var makeRendererArgs = [].slice.call(arguments, 1);
            return (this.renderers[rendererType + ":" + makeRendererArgs.join("/")] || this["get" + rendererType + "Renderer"].apply(this, makeRendererArgs))(obj);
        };
    }
}, inter);

[ "timeZones", "countries", "territories", "regions", "languages", "currencies", "scripts" ].forEach(function(pluralName) {
    var singularName = pluralName.replace(/(ie)?s$/, function($0, ending) {
        return ending ? "y" : "";
    }), capitalizedSingularName = singularName.replace(/[a-z]/, function($0) {
        return $0.toUpperCase();
    });
    this["get" + capitalizedSingularName] = function(id) {
        if (!this.hasOwnProperty(singularName + "byId")) {
            if (!this[pluralName]) {
                throw new Error("inter.get" + capitalizedSingularName + ": The library was compiled without --" + pluralName.toLowerCase());
            }
            var byId = this[singularName + "byId"] = {};
            this[pluralName].forEach(function(obj) {
                byId[obj.id] = obj;
            });
        }
        return this[singularName + "byId"][id];
    };
}, inter);

var _4y1n1 = [ "Q1", "Q2", "Q3", "Q4" ], _4y1n2 = {
    all: {
        leap: "{0}bis"
    }
}, _4y1n3 = {
    a: "h a – h a",
    h: "h–h a"
}, _4y1n4 = {
    displayName: "Dayperiod"
}, _4y1n5 = [ "Before R.O.C.", "R.O.C." ], _4y1n6 = {
    a: "h a – h a v",
    h: "h–h a v"
}, _4y1n7 = [ "S", "M", "T", "W", "T", "F", "S" ], _4y1n8 = {
    d: "MMM d–d",
    M: "MMM d – MMM d"
}, _4y1n9 = {
    displayName: "Day of the Week"
}, _4y1n10 = {
    wide: [ "AH" ],
    abbreviated: [ "AH" ]
}, _4y1n11 = {
    H: "HH:mm–HH:mm",
    m: "HH:mm–HH:mm"
}, _4y1n12 = {
    M: "y-MM – y-MM",
    y: "y-MM – y-MM"
}, _4y1n13 = {
    M: "U MMM–MMM",
    y: "U MMM – U MMM"
}, _4y1n14 = {
    H: "HH:mm–HH:mm v",
    m: "HH:mm–HH:mm v"
}, _4y1n15 = {
    d: "MM-dd – MM-dd",
    M: "MM-dd – MM-dd"
}, _4y1n16 = {
    M: "G y MMM–MMM",
    y: "G y MMM – y MMM"
}, _4y1n17 = {
    M: "U MMMM–MMMM",
    y: "U MMMM – U MMMM"
}, _4y1n18 = {
    M: "G y MMMM–MMMM",
    y: "G y MMMM – y MMMM"
}, _4y1n19 = {
    "0": "today",
    "1": "tomorrow",
    "-1": "yesterday"
}, _4y1n20 = [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ], _4y1n21 = {
    M: "GGGGG y-MM – y-MM",
    y: "GGGGG y-MM – y-MM"
}, _4y1n22 = {
    "0": "this year",
    "1": "next year",
    "-1": "last year"
}, _4y1n23 = {
    "0": "this week",
    "1": "next week",
    "-1": "last week"
}, _4y1n24 = {
    future: {
        other: "+{0} y"
    },
    past: {
        other: "-{0} y"
    }
}, _4y1n25 = {
    future: {
        other: "+{0} Q"
    },
    past: {
        other: "-{0} Q"
    }
}, _4y1n26 = {
    future: {
        other: "+{0} m"
    },
    past: {
        other: "-{0} m"
    }
}, _4y1n27 = {
    future: {
        other: "+{0} w"
    },
    past: {
        other: "-{0} w"
    }
}, _4y1n28 = {
    future: {
        other: "+{0} d"
    },
    past: {
        other: "-{0} d"
    }
}, _4y1n29 = {
    future: {
        other: "+{0} h"
    },
    past: {
        other: "-{0} h"
    }
}, _4y1n30 = {
    future: {
        other: "+{0} s"
    },
    past: {
        other: "-{0} s"
    }
}, _4y1n31 = {
    d: "MM-dd, E – MM-dd, E",
    M: "MM-dd, E – MM-dd, E"
}, _4y1n32 = {
    d: "MMM d, E – MMM d, E",
    M: "MMM d, E – MMM d, E"
}, _4y1n33 = {
    "0": "this month",
    "1": "next month",
    "-1": "last month"
}, _4y1n34 = {
    wide: [ "ERA0", "ERA1" ],
    abbreviated: [ "ERA0", "ERA1" ]
}, _4y1n35 = {
    future: {
        other: "+{0} min"
    },
    past: {
        other: "-{0} min"
    }
}, _4y1n36 = [ "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" ], _4y1n37 = {
    "0": "this Sunday",
    "1": "next Sunday",
    "-1": "last Sunday"
}, _4y1n38 = {
    "0": "this Monday",
    "1": "next Monday",
    "-1": "last Monday"
}, _4y1n39 = {
    "0": "this Friday",
    "1": "next Friday",
    "-1": "last Friday"
}, _4y1n40 = {
    a: "h:mm a – h:mm a",
    h: "h:mm–h:mm a",
    m: "h:mm–h:mm a"
}, _4y1n41 = {
    "0": "this quarter",
    "1": "next quarter",
    "-1": "last quarter"
}, _4y1n42 = {
    "0": "this Tuesday",
    "1": "next Tuesday",
    "-1": "last Tuesday"
}, _4y1n43 = {
    d: "U MMM d–d",
    M: "U MMM d – MMM d",
    y: "U MMM d – U MMM d"
}, _4y1n44 = [ "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13" ], _4y1n45 = {
    "0": "this Thursday",
    "1": "next Thursday",
    "-1": "last Thursday"
}, _4y1n46 = {
    "0": "this Saturday",
    "1": "next Saturday",
    "-1": "last Saturday"
}, _4y1n47 = {
    a: "h:mm a – h:mm a v",
    h: "h:mm–h:mm a v",
    m: "h:mm–h:mm a v"
}, _4y1n48 = {
    "0": "this Wednesday",
    "1": "next Wednesday",
    "-1": "last Wednesday"
}, _4y1n49 = {
    d: "G y MMM d–d",
    M: "G y MMM d – MMM d",
    y: "G y MMM d – y MMM d"
}, _4y1n50 = {
    relative: _4y1n37
}, _4y1n51 = {
    relative: _4y1n38
}, _4y1n52 = {
    relative: _4y1n39
}, _4y1n53 = {
    relative: _4y1n42
}, _4y1n54 = {
    d: "y-MM-dd – y-MM-dd",
    M: "y-MM-dd – y-MM-dd",
    y: "y-MM-dd – y-MM-dd"
}, _4y1n55 = {
    relative: _4y1n45
}, _4y1n56 = {
    relative: _4y1n46
}, _4y1n57 = {
    abbreviated: {
        leap: "{0}bis"
    },
    narrow: {
        leap: "{0}b"
    },
    wide: {
        leap: "{0}bis"
    }
}, _4y1n58 = {
    relative: _4y1n48
}, _4y1n59 = [ "M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12" ], _4y1n60 = [ undefined, "zi", "chou", "yin", "mao", "chen", "si", "wu", "wei", "shen", "you", "xu" ], _4y1n61 = {
    abbreviated: {
        am: "AM",
        pm: "PM"
    },
    narrow: {
        am: "AM",
        pm: "PM"
    },
    wide: {
        am: "AM",
        pm: "PM"
    }
}, _4y1n62 = {
    displayName: "Hour",
    relativeTime: _4y1n29
}, _4y1n63 = {
    d: "U MMM d, E – MMM d, E",
    M: "U MMM d, E – MMM d, E",
    y: "U MMM d, E – U MMM d, E"
}, _4y1n64 = {
    d: "GGGGG y-MM-dd – y-MM-dd",
    M: "GGGGG y-MM-dd – y-MM-dd",
    y: "GGGGG y-MM-dd – y-MM-dd"
}, _4y1n65 = {
    d: "y-MM-dd, E – y-MM-dd, E",
    M: "y-MM-dd, E – y-MM-dd, E",
    y: "y-MM-dd, E – y-MM-dd, E"
}, _4y1n66 = {
    d: "G y MMM d, E – MMM d, E",
    M: "G y MMM d, E – MMM d, E",
    y: "G y MMM d, E – y MMM d, E"
}, _4y1n67 = {
    abbreviated: _4y1n1,
    narrow: [ "1", "2", "3", "4" ],
    wide: _4y1n1
}, _4y1n68 = {
    displayName: "Minute",
    relativeTime: _4y1n35
}, _4y1n69 = {
    displayName: "Second",
    relative: [ "now" ],
    relativeTime: _4y1n30
}, _4y1n70 = {
    d: "GGGGG y-MM-dd, E – y-MM-dd, E",
    M: "GGGGG y-MM-dd, E – y-MM-dd, E",
    y: "GGGGG y-MM-dd, E – y-MM-dd, E"
}, _4y1n71 = [ "Muh.", "Saf.", "Rab. I", "Rab. II", "Jum. I", "Jum. II", "Raj.", "Sha.", "Ram.", "Shaw.", "Dhuʻl-Q.", "Dhuʻl-H." ], _4y1n72 = [ "Tishri", "Heshvan", "Kislev", "Tevet", "Shevat", "Adar I", "Adar", "Nisan", "Iyar", "Sivan", "Tamuz", "Av", "Elul" ], _4y1n73 = [ "Farvardin", "Ordibehesht", "Khordad", "Tir", "Mordad", "Shahrivar", "Mehr", "Aban", "Azar", "Dey", "Bahman", "Esfand" ], _4y1n74 = [ "Tout", "Baba", "Hator", "Kiahk", "Toba", "Amshir", "Baramhat", "Baramouda", "Bashans", "Paona", "Epep", "Mesra", "Nasie" ], _4y1n75 = [ "Meskerem", "Tekemt", "Hedar", "Tahsas", "Ter", "Yekatit", "Megabit", "Miazia", "Genbot", "Sene", "Hamle", "Nehasse", "Pagumen" ], _4y1n76 = [ "Chaitra", "Vaisakha", "Jyaistha", "Asadha", "Sravana", "Bhadra", "Asvina", "Kartika", "Agrahayana", "Pausa", "Magha", "Phalguna" ], _4y1n77 = {
    displayName: "Day",
    relative: _4y1n19,
    relativeTime: _4y1n28
}, _4y1n78 = [ "Muharram", "Safar", "Rabiʻ I", "Rabiʻ II", "Jumada I", "Jumada II", "Rajab", "Shaʻban", "Ramadan", "Shawwal", "Dhuʻl-Qiʻdah", "Dhuʻl-Hijjah" ], _4y1n79 = {
    displayName: "Year",
    relative: _4y1n22,
    relativeTime: _4y1n24
}, _4y1n80 = {
    displayName: "Week",
    relative: _4y1n23,
    relativeTime: _4y1n27
}, _4y1n81 = {
    displayName: "Month",
    relative: _4y1n33,
    relativeTime: _4y1n26
}, _4y1n82 = {
    displayName: "Quarter",
    relative: _4y1n41,
    relativeTime: _4y1n25
}, _4y1n83 = {
    decimal: ".",
    group: ",",
    list: ";",
    percentSign: "%",
    plusSign: "+",
    minusSign: "-",
    exponential: "E",
    superscriptingExponent: "×",
    perMille: "‰",
    infinity: "∞",
    nan: "NaN",
    timeSeparator: ":"
}, _4y1n84 = {
    decimal: "٫",
    group: "٬",
    list: "؛",
    percentSign: "٪",
    plusSign: "‏+",
    minusSign: "‏-",
    exponential: "اس",
    superscriptingExponent: "×",
    perMille: "؉",
    infinity: "∞",
    nan: "NaN",
    timeSeparator: ":"
}, _4y1n85 = {
    format: _4y1n61,
    standAlone: _4y1n61
}, _4y1n86 = {
    symbols: _4y1n84
}, _4y1n87 = {
    format: _4y1n57,
    numeric: _4y1n2,
    standAlone: _4y1n57
}, _4y1n88 = {
    abbreviated: _4y1n20,
    narrow: _4y1n7,
    wide: _4y1n20,
    "short": _4y1n20
}, _4y1n89 = {
    format: _4y1n67,
    standAlone: _4y1n67
}, _4y1n90 = {
    symbols: _4y1n84,
    digits: "renderSpelloutCardinal"
}, _4y1n91 = {
    "1000": {
        other: "0K"
    },
    "10000": {
        other: "00K"
    },
    "100000": {
        other: "000K"
    },
    "1000000": {
        other: "0M"
    },
    "10000000": {
        other: "00M"
    },
    "100000000": {
        other: "000M"
    },
    "1000000000": {
        other: "0G"
    },
    "10000000000": {
        other: "00G"
    },
    "100000000000": {
        other: "000G"
    },
    "1000000000000": {
        other: "0T"
    },
    "10000000000000": {
        other: "00T"
    },
    "100000000000000": {
        other: "000T"
    }
}, _4y1n92 = {
    symbols: _4y1n84,
    digits: "renderSpelloutCardinalFinancial"
}, _4y1n93 = {
    abbreviated: _4y1n59,
    narrow: _4y1n36,
    wide: _4y1n59
}, _4y1n94 = {
    "1000": {
        other: "¤ 0K"
    },
    "10000": {
        other: "¤ 00K"
    },
    "100000": {
        other: "¤ 000K"
    },
    "1000000": {
        other: "¤ 0M"
    },
    "10000000": {
        other: "¤ 00M"
    },
    "100000000": {
        other: "¤ 000M"
    },
    "1000000000": {
        other: "¤ 0G"
    },
    "10000000000": {
        other: "¤ 00G"
    },
    "100000000000": {
        other: "¤ 000G"
    },
    "1000000000000": {
        other: "¤ 0T"
    },
    "10000000000000": {
        other: "¤ 00T"
    },
    "100000000000000": {
        other: "¤ 000T"
    }
}, _4y1n95 = {
    abbreviated: _4y1n60,
    narrow: _4y1n60,
    wide: _4y1n60
}, _4y1n96 = {
    format: _4y1n95
}, _4y1n97 = {
    abbreviated: _4y1n72,
    narrow: _4y1n44,
    wide: _4y1n72
}, _4y1n98 = {
    abbreviated: _4y1n73,
    narrow: _4y1n36,
    wide: _4y1n73
}, _4y1n99 = {
    abbreviated: _4y1n74,
    narrow: _4y1n44,
    wide: _4y1n74
}, _4y1n100 = {
    abbreviated: _4y1n71,
    narrow: _4y1n36,
    wide: _4y1n78
}, _4y1n101 = {
    abbreviated: _4y1n75,
    narrow: _4y1n44,
    wide: _4y1n75
}, _4y1n102 = {
    abbreviated: _4y1n76,
    narrow: _4y1n36,
    wide: _4y1n76
}, _4y1n103 = {
    fullDate: "r(U) MMMM d, EEEE",
    longDate: "r(U) MMMM d",
    mediumDate: "r MMM d",
    shortDate: "r-MM-dd",
    fullTime: "HH:mm:ss zzzz",
    longTime: "HH:mm:ss z",
    mediumTime: "HH:mm:ss",
    shortTime: "HH:mm",
    shortDateTime: "r-MM-dd HH:mm",
    mediumDateTime: "r MMM d HH:mm:ss",
    longDateTime: "r(U) MMMM d HH:mm:ss z",
    fullDateTime: "r(U) MMMM d, EEEE HH:mm:ss zzzz"
}, _4y1n104 = {
    fullDate: "G y MMMM d, EEEE",
    longDate: "G y MMMM d",
    mediumDate: "G y MMM d",
    shortDate: "GGGGG y-MM-dd",
    fullTime: "HH:mm:ss zzzz",
    longTime: "HH:mm:ss z",
    mediumTime: "HH:mm:ss",
    shortTime: "HH:mm",
    shortDateTime: "GGGGG y-MM-dd HH:mm",
    mediumDateTime: "G y MMM d HH:mm:ss",
    longDateTime: "G y MMMM d HH:mm:ss z",
    fullDateTime: "G y MMMM d, EEEE HH:mm:ss zzzz"
}, _4y1n105 = {
    format: _4y1n88,
    standAlone: _4y1n88
}, _4y1n106 = {
    format: _4y1n93,
    standAlone: _4y1n93
}, _4y1n107 = {
    "long": _4y1n91,
    "short": _4y1n91,
    "default": "#,##0.###"
}, _4y1n108 = {
    d: "d",
    E: "ccc",
    Ed: "d, E",
    Gy: "r U",
    GyMMM: "r(U) MMM",
    GyMMMd: "r MMM d",
    GyMMMEd: "r(U) MMM d, E",
    h: "h a",
    H: "HH",
    hm: "h:mm a",
    Hm: "HH:mm",
    hms: "h:mm:ss a",
    Hms: "HH:mm:ss",
    M: "L",
    Md: "MM-dd",
    MEd: "MM-dd, E",
    MMM: "LLL",
    MMMd: "MMM d",
    MMMEd: "MMM d, E",
    MMMMd: "MMMM d",
    ms: "mm:ss",
    UM: "U MM",
    UMd: "U MM-d",
    UMMM: "U MMM",
    UMMMd: "U MMM d",
    y: "r(U)",
    yMd: "r-MM-dd",
    yyyy: "r(U)",
    yyyyM: "r-MM",
    yyyyMd: "r-MM-dd",
    yyyyMEd: "r-MM-dd, E",
    yyyyMMM: "r(U) MMM",
    yyyyMMMd: "r MMM d",
    yyyyMMMEd: "r(U) MMM d, E",
    yyyyMMMM: "r(U) MMMM",
    yyyyQQQ: "r(U) QQQ",
    yyyyQQQQ: "r(U) QQQQ"
}, _4y1n109 = {
    d: "d",
    E: "ccc",
    Ed: "d, E",
    Ehm: "E h:mm a",
    EHm: "E HH:mm",
    Ehms: "E h:mm:ss a",
    EHms: "E HH:mm:ss",
    Gy: "G y",
    GyMMM: "G y MMM",
    GyMMMd: "G y MMM d",
    GyMMMEd: "G y MMM d, E",
    h: "h a",
    H: "HH",
    hm: "h:mm a",
    Hm: "HH:mm",
    hms: "h:mm:ss a",
    Hms: "HH:mm:ss",
    M: "L",
    Md: "MM-dd",
    MEd: "MM-dd, E",
    MMM: "LLL",
    MMMd: "MMM d",
    MMMEd: "MMM d, E",
    MMMMd: "MMMM d",
    ms: "mm:ss",
    y: "G y",
    yyyy: "G y",
    yyyyM: "GGGGG y-MM",
    yyyyMd: "GGGGG y-MM-dd",
    yyyyMEd: "GGGGG y-MM-dd, E",
    yyyyMMM: "G y MMM",
    yyyyMMMd: "G y MMM d",
    yyyyMMMEd: "G y MMM d, E",
    yyyyMMMM: "G y MMMM",
    yyyyQQQ: "G y QQQ",
    yyyyQQQQ: "G y QQQQ"
}, _4y1n110 = {
    currencyMatch: /[^\u0024+<->\u005E`\u007C~¢-¦¨©¬®-±´¸×÷˂-˅˒-˟˥-˫˭˯-˿͵΄΅϶҂֏؆-؈؋؎؏۞۩۽۾߶৲৳৺৻૱୰௳-௺౿൹฿༁-༃༓༕-༗༚-༟༴༶༸྾-࿅࿇-࿌࿎࿏࿕-࿘႞႟᎐-᎙៛᥀᧞-᧿᭡-᭪᭴-᭼᾽᾿-῁῍-῏῝-῟῭-`´῾⁄⁒⁺-⁼₊-₌₠-₹℀℁℃-℆℈℉℔№-℘℞-℣℥℧℩℮℺℻⅀-⅄⅊-⅍⅏←-⌨⌫-⏳␀-␦⑀-⑊⒜-ⓩ─-⛿✁-❧➔-⟄⟇-⟥⟰-⦂⦙-⧗⧜-⧻⧾-⭌⭐-⭙⳥-⳪⺀-⺙⺛-⻳⼀-⿕⿰-⿻〄〒〓〠〶〷〾〿゛゜㆐㆑㆖-㆟㇀-㇣㈀-㈞㈪-㉇㉐㉠-㉿㊊-㊰㋀-㋾㌀-㏿䷀-䷿꒐-꓆꜀-꜖꜠꜡꞉꞊꠨-꠫꠶-꠹꩷-꩹﬩﮲-﯁﷼﷽﹢﹤-﹦﹩＄＋＜-＞＾｀｜～￠-￦￨-￮￼�]/,
    surroundingMatch: /[0-9²³¹¼-¾٠-٩۰-۹߀-߉०-९০-৯৴-৹੦-੯૦-૯୦-୯୲-୷௦-௲౦-౯౸-౾೦-೯൦-൵๐-๙໐-໙༠-༳၀-၉႐-႙፩-፼ᛮ-ᛰ០-៩៰-៹᠐-᠙᥆-᥏᧐-᧚᪀-᪉᪐-᪙᭐-᭙᮰-᮹᱀-᱉᱐-᱙⁰⁴-⁹₀-₉⅐-ↂↅ-↉①-⒛⓪-⓿❶-➓⳽〇〡-〩〸-〺㆒-㆕㈠-㈩㉈-㉏㉑-㉟㊀-㊉㊱-㊿꘠-꘩ꛦ-ꛯ꠰-꠵꣐-꣙꤀-꤉꧐-꧙꩐-꩙꯰-꯹０-９]/,
    insertBetween: " "
}, _4y1n111 = [ undefined, "jia-zi", "yi-chou", "bing-yin", "ding-mao", "wu-chen", "ji-si", "geng-wu", "xin-wei", "ren-shen", "gui-you", "jia-xu", "yi-hai", "bing-zi", "ding-chou", "wu-yin", "ji-mao", "geng-chen", "xin-si", "ren-wu", "gui-wei", "jia-shen", "yi-you", "bing-xu", "ding-hai", "wu-zi", "ji-chou", "geng-yin", "xin-mao", "ren-chen", "gui-si", "jia-wu", "yi-wei", "bing-shen", "ding-you", "wu-xu", "ji-hai", "geng-zi", "xin-chou", "ren-yin", "gui-mao", "jia-chen", "yi-si", "bing-wu", "ding-wei", "wu-shen", "ji-you", "geng-xu", "xin-hai", "ren-zi", "gui-chou", "jia-yin", "yi-mao", "bing-chen", "ding-si", "wu-wu", "ji-wei", "geng-shen", "xin-you", "ren-xu" ], _4y1n112 = {
    format: _4y1n100,
    standAlone: _4y1n100
}, _4y1n113 = {
    basic: _4y1n103,
    cldr: _4y1n108
}, _4y1n114 = {
    basic: _4y1n104,
    cldr: _4y1n109
}, _4y1n115 = {
    d: {
        d: "d–d"
    },
    h: _4y1n3,
    H: {
        H: "HH–HH"
    },
    hm: _4y1n40,
    Hm: _4y1n11,
    hmv: _4y1n47,
    Hmv: _4y1n14,
    hv: _4y1n6,
    Hv: {
        H: "HH–HH v"
    },
    M: {
        M: "MM–MM"
    },
    Md: _4y1n15,
    MEd: _4y1n31,
    MMM: {
        M: "LLL–LLL"
    },
    MMMd: _4y1n8,
    MMMEd: _4y1n32,
    y: {
        y: "U–U"
    },
    yM: _4y1n12,
    yMd: _4y1n54,
    yMEd: _4y1n65,
    yMMM: _4y1n13,
    yMMMd: _4y1n43,
    yMMMEd: _4y1n63,
    yMMMM: _4y1n17
}, _4y1n116 = {
    d: {
        d: "d–d"
    },
    h: _4y1n3,
    H: {
        H: "HH–HH"
    },
    hm: _4y1n40,
    Hm: _4y1n11,
    hmv: _4y1n47,
    Hmv: _4y1n14,
    hv: _4y1n6,
    Hv: {
        H: "HH–HH v"
    },
    M: {
        M: "MM–MM"
    },
    Md: _4y1n15,
    MEd: _4y1n31,
    MMM: {
        M: "LLL–LLL"
    },
    MMMd: _4y1n8,
    MMMEd: _4y1n32,
    y: {
        y: "G y–y"
    },
    yM: _4y1n21,
    yMd: _4y1n64,
    yMEd: _4y1n70,
    yMMM: _4y1n16,
    yMMMd: _4y1n49,
    yMMMEd: _4y1n66,
    yMMMM: _4y1n18
}, _4y1n117 = {
    beforeCurrency: _4y1n110,
    afterCurrency: _4y1n110
}, _4y1n118 = {
    "short": _4y1n94,
    "default": "¤ #,##0.00",
    other: "{0} {1}",
    currencySpacing: _4y1n117
}, _4y1n119 = {
    era: {
        displayName: "Era"
    },
    year: _4y1n79,
    quarter: _4y1n82,
    month: _4y1n81,
    week: _4y1n80,
    day: _4y1n77,
    weekday: _4y1n9,
    dayperiod: _4y1n4,
    hour: _4y1n62,
    minute: _4y1n68,
    second: _4y1n69,
    zone: {
        displayName: "Zone"
    },
    sun: _4y1n50,
    mon: _4y1n51,
    tue: _4y1n53,
    wed: _4y1n58,
    thu: _4y1n55,
    fri: _4y1n52,
    sat: _4y1n56
}, _4y1n120 = {
    dateFormats: {
        basic: {},
        cldr: {}
    },
    fields: _4y1n119
}, _4y1n121 = {
    abbreviated: _4y1n111,
    narrow: _4y1n111,
    wide: _4y1n111
}, _4y1n122 = {
    format: _4y1n121
}, _4y1n123 = {
    scientific: {
        "default": "#E0"
    },
    decimal: _4y1n107,
    currency: _4y1n118,
    percent: {
        "default": "#,##0%"
    }
}, _4y1n124 = [ "Taika (645–650)", "Hakuchi (650–671)", "Hakuhō (672–686)", "Shuchō (686–701)", "Taihō (701–704)", "Keiun (704–708)", "Wadō (708–715)", "Reiki (715–717)", "Yōrō (717–724)", "Jinki (724–729)", "Tenpyō (729–749)", "Tenpyō-kampō (749-749)", "Tenpyō-shōhō (749-757)", "Tenpyō-hōji (757-765)", "Tenpyō-jingo (765-767)", "Jingo-keiun (767-770)", "Hōki (770–780)", "Ten-ō (781-782)", "Enryaku (782–806)", "Daidō (806–810)", "Kōnin (810–824)", "Tenchō (824–834)", "Jōwa (834–848)", "Kajō (848–851)", "Ninju (851–854)", "Saikō (854–857)", "Ten-an (857-859)", "Jōgan (859–877)", "Gangyō (877–885)", "Ninna (885–889)", "Kanpyō (889–898)", "Shōtai (898–901)", "Engi (901–923)", "Enchō (923–931)", "Jōhei (931–938)", "Tengyō (938–947)", "Tenryaku (947–957)", "Tentoku (957–961)", "Ōwa (961–964)", "Kōhō (964–968)", "Anna (968–970)", "Tenroku (970–973)", "Ten’en (973–976)", "Jōgen (976–978)", "Tengen (978–983)", "Eikan (983–985)", "Kanna (985–987)", "Eien (987–989)", "Eiso (989–990)", "Shōryaku (990–995)", "Chōtoku (995–999)", "Chōhō (999–1004)", "Kankō (1004–1012)", "Chōwa (1012–1017)", "Kannin (1017–1021)", "Jian (1021–1024)", "Manju (1024–1028)", "Chōgen (1028–1037)", "Chōryaku (1037–1040)", "Chōkyū (1040–1044)", "Kantoku (1044–1046)", "Eishō (1046–1053)", "Tengi (1053–1058)", "Kōhei (1058–1065)", "Jiryaku (1065–1069)", "Enkyū (1069–1074)", "Shōho (1074–1077)", "Shōryaku (1077–1081)", "Eihō (1081–1084)", "Ōtoku (1084–1087)", "Kanji (1087–1094)", "Kahō (1094–1096)", "Eichō (1096–1097)", "Jōtoku (1097–1099)", "Kōwa (1099–1104)", "Chōji (1104–1106)", "Kashō (1106–1108)", "Tennin (1108–1110)", "Ten-ei (1110-1113)", "Eikyū (1113–1118)", "Gen’ei (1118–1120)", "Hōan (1120–1124)", "Tenji (1124–1126)", "Daiji (1126–1131)", "Tenshō (1131–1132)", "Chōshō (1132–1135)", "Hōen (1135–1141)", "Eiji (1141–1142)", "Kōji (1142–1144)", "Ten’yō (1144–1145)", "Kyūan (1145–1151)", "Ninpei (1151–1154)", "Kyūju (1154–1156)", "Hōgen (1156–1159)", "Heiji (1159–1160)", "Eiryaku (1160–1161)", "Ōho (1161–1163)", "Chōkan (1163–1165)", "Eiman (1165–1166)", "Nin’an (1166–1169)", "Kaō (1169–1171)", "Shōan (1171–1175)", "Angen (1175–1177)", "Jishō (1177–1181)", "Yōwa (1181–1182)", "Juei (1182–1184)", "Genryaku (1184–1185)", "Bunji (1185–1190)", "Kenkyū (1190–1199)", "Shōji (1199–1201)", "Kennin (1201–1204)", "Genkyū (1204–1206)", "Ken’ei (1206–1207)", "Jōgen (1207–1211)", "Kenryaku (1211–1213)", "Kenpō (1213–1219)", "Jōkyū (1219–1222)", "Jōō (1222–1224)", "Gennin (1224–1225)", "Karoku (1225–1227)", "Antei (1227–1229)", "Kanki (1229–1232)", "Jōei (1232–1233)", "Tenpuku (1233–1234)", "Bunryaku (1234–1235)", "Katei (1235–1238)", "Ryakunin (1238–1239)", "En’ō (1239–1240)", "Ninji (1240–1243)", "Kangen (1243–1247)", "Hōji (1247–1249)", "Kenchō (1249–1256)", "Kōgen (1256–1257)", "Shōka (1257–1259)", "Shōgen (1259–1260)", "Bun’ō (1260–1261)", "Kōchō (1261–1264)", "Bun’ei (1264–1275)", "Kenji (1275–1278)", "Kōan (1278–1288)", "Shōō (1288–1293)", "Einin (1293–1299)", "Shōan (1299–1302)", "Kengen (1302–1303)", "Kagen (1303–1306)", "Tokuji (1306–1308)", "Enkyō (1308–1311)", "Ōchō (1311–1312)", "Shōwa (1312–1317)", "Bunpō (1317–1319)", "Genō (1319–1321)", "Genkō (1321–1324)", "Shōchū (1324–1326)", "Karyaku (1326–1329)", "Gentoku (1329–1331)", "Genkō (1331–1334)", "Kenmu (1334–1336)", "Engen (1336–1340)", "Kōkoku (1340–1346)", "Shōhei (1346–1370)", "Kentoku (1370–1372)", "Bunchū (1372–1375)", "Tenju (1375–1379)", "Kōryaku (1379–1381)", "Kōwa (1381–1384)", "Genchū (1384–1392)", "Meitoku (1384–1387)", "Kakei (1387–1389)", "Kōō (1389–1390)", "Meitoku (1390–1394)", "Ōei (1394–1428)", "Shōchō (1428–1429)", "Eikyō (1429–1441)", "Kakitsu (1441–1444)", "Bun’an (1444–1449)", "Hōtoku (1449–1452)", "Kyōtoku (1452–1455)", "Kōshō (1455–1457)", "Chōroku (1457–1460)", "Kanshō (1460–1466)", "Bunshō (1466–1467)", "Ōnin (1467–1469)", "Bunmei (1469–1487)", "Chōkyō (1487–1489)", "Entoku (1489–1492)", "Meiō (1492–1501)", "Bunki (1501–1504)", "Eishō (1504–1521)", "Taiei (1521–1528)", "Kyōroku (1528–1532)", "Tenbun (1532–1555)", "Kōji (1555–1558)", "Eiroku (1558–1570)", "Genki (1570–1573)", "Tenshō (1573–1592)", "Bunroku (1592–1596)", "Keichō (1596–1615)", "Genna (1615–1624)", "Kan’ei (1624–1644)", "Shōho (1644–1648)", "Keian (1648–1652)", "Jōō (1652–1655)", "Meireki (1655–1658)", "Manji (1658–1661)", "Kanbun (1661–1673)", "Enpō (1673–1681)", "Tenna (1681–1684)", "Jōkyō (1684–1688)", "Genroku (1688–1704)", "Hōei (1704–1711)", "Shōtoku (1711–1716)", "Kyōhō (1716–1736)", "Genbun (1736–1741)", "Kanpō (1741–1744)", "Enkyō (1744–1748)", "Kan’en (1748–1751)", "Hōreki (1751–1764)", "Meiwa (1764–1772)", "An’ei (1772–1781)", "Tenmei (1781–1789)", "Kansei (1789–1801)", "Kyōwa (1801–1804)", "Bunka (1804–1818)", "Bunsei (1818–1830)", "Tenpō (1830–1844)", "Kōka (1844–1848)", "Kaei (1848–1854)", "Ansei (1854–1860)", "Man’en (1860–1861)", "Bunkyū (1861–1864)", "Genji (1864–1865)", "Keiō (1865–1868)", "Meiji", "Taishō", "Shōwa", "Heisei" ], _4y1n125 = {
    dateFormats: _4y1n114,
    datePartsOrder: "ymd",
    dateIntervalFormats: _4y1n116,
    dateIntervalFallbackFormat: "{0} – {1}",
    dayNames: _4y1n105,
    dayPeriods: _4y1n85,
    monthNames: _4y1n112,
    eraNames: _4y1n10,
    quarterNames: _4y1n89,
    fields: _4y1n119
}, _4y1n126 = {
    dayParts: _4y1n96,
    days: _4y1n122,
    months: _4y1n122,
    years: _4y1n122,
    zodiacs: _4y1n96
}, _4y1n127 = {
    dateFormats: _4y1n113,
    datePartsOrder: "md",
    dateIntervalFormats: _4y1n115,
    dateIntervalFallbackFormat: "{0} – {1}",
    dayNames: _4y1n105,
    dayPeriods: _4y1n85,
    cyclicNames: _4y1n126,
    monthNames: _4y1n106,
    monthPatterns: _4y1n87,
    quarterNames: _4y1n89,
    fields: _4y1n119
};

inter.id = "root";

inter.delimiters = {
    quotationStart: "“",
    quotationEnd: "”",
    alternateQuotationStart: "‘",
    alternateQuotationEnd: "’"
};

inter.listPatterns = {
    "default": {
        "2": "{0}, {1}",
        start: "{0}, {1}",
        middle: "{0}, {1}",
        end: "{0}, {1}"
    }
};

inter.unitPatterns = {
    "short": {
        unit: {
            accelerationGForce: {
                other: "{0} G"
            },
            accelerationMeterPerSecondSquared: {
                other: "{0} m/s²"
            },
            angleRevolution: {
                other: "{0} rev"
            },
            angleRadian: {
                other: "{0} rad"
            },
            angleDegree: {
                other: "{0}°"
            },
            angleArcMinute: {
                other: "{0}′"
            },
            angleArcSecond: {
                other: "{0}″"
            },
            areaSquareKilometer: {
                other: "{0} km²"
            },
            areaHectare: {
                other: "{0} ha"
            },
            areaSquareMeter: {
                other: "{0} m²"
            },
            areaSquareCentimeter: {
                other: "{0} cm²"
            },
            areaSquareMile: {
                other: "{0} mi²"
            },
            areaAcre: {
                other: "{0} ac"
            },
            areaSquareYard: {
                other: "{0} yd²"
            },
            areaSquareFoot: {
                other: "{0} ft²"
            },
            areaSquareInch: {
                other: "{0} in²"
            },
            concentrKarat: {
                other: "{0} kt"
            },
            concentrMilligramPerDeciliter: {
                other: "{0} mg/dL"
            },
            concentrMillimolePerLiter: {
                other: "{0} mmol/L"
            },
            concentrPartPerMillion: {
                other: "{0} ppm"
            },
            consumptionLiterPerKilometer: {
                other: "{0} L/km"
            },
            "consumptionLiterPer-100kilometers": {
                other: "{0} L/100km"
            },
            consumptionMilePerGallon: {
                other: "{0} mpg US"
            },
            consumptionMilePerGallonImperial: {
                other: "{0} mpg Imp."
            },
            digitalTerabyte: {
                other: "{0} TB"
            },
            digitalTerabit: {
                other: "{0} Tb"
            },
            digitalGigabyte: {
                other: "{0} GB"
            },
            digitalGigabit: {
                other: "{0} Gb"
            },
            digitalMegabyte: {
                other: "{0} MB"
            },
            digitalMegabit: {
                other: "{0} Mb"
            },
            digitalKilobyte: {
                other: "{0} kB"
            },
            digitalKilobit: {
                other: "{0} kb"
            },
            digitalByte: {
                other: "{0} byte"
            },
            digitalBit: {
                other: "{0} bit"
            },
            durationCentury: {
                other: "{0} c"
            },
            durationYear: {
                other: "{0} y"
            },
            durationMonth: {
                other: "{0} m"
            },
            durationWeek: {
                other: "{0} w"
            },
            durationDay: {
                other: "{0} d"
            },
            durationHour: {
                other: "{0} h"
            },
            durationMinute: {
                other: "{0} min"
            },
            durationSecond: {
                other: "{0} s"
            },
            durationMillisecond: {
                other: "{0} ms"
            },
            durationMicrosecond: {
                other: "{0} μs"
            },
            durationNanosecond: {
                other: "{0} ns"
            },
            electricAmpere: {
                other: "{0} A"
            },
            electricMilliampere: {
                other: "{0} mA"
            },
            electricOhm: {
                other: "{0} Ω"
            },
            electricVolt: {
                other: "{0} V"
            },
            energyKilocalorie: {
                other: "{0} kcal"
            },
            energyCalorie: {
                other: "{0} cal"
            },
            energyFoodcalorie: {
                other: "{0} Cal"
            },
            energyKilojoule: {
                other: "{0} kJ"
            },
            energyJoule: {
                other: "{0} J"
            },
            energyKilowattHour: {
                other: "{0} kWh"
            },
            frequencyGigahertz: {
                other: "{0} GHz"
            },
            frequencyMegahertz: {
                other: "{0} MHz"
            },
            frequencyKilohertz: {
                other: "{0} kHz"
            },
            frequencyHertz: {
                other: "{0} Hz"
            },
            lengthKilometer: {
                other: "{0} km"
            },
            lengthMeter: {
                other: "{0} m"
            },
            lengthDecimeter: {
                other: "{0} dm"
            },
            lengthCentimeter: {
                other: "{0} cm"
            },
            lengthMillimeter: {
                other: "{0} mm"
            },
            lengthMicrometer: {
                other: "{0} µm"
            },
            lengthNanometer: {
                other: "{0} nm"
            },
            lengthPicometer: {
                other: "{0} pm"
            },
            lengthMile: {
                other: "{0} mi"
            },
            lengthYard: {
                other: "{0} yd"
            },
            lengthFoot: {
                other: "{0} ft"
            },
            lengthInch: {
                other: "{0} in"
            },
            lengthParsec: {
                other: "{0} pc"
            },
            lengthLightYear: {
                other: "{0} ly"
            },
            lengthAstronomicalUnit: {
                other: "{0} au"
            },
            lengthFurlong: {
                other: "{0} fur"
            },
            lengthFathom: {
                other: "{0} fm"
            },
            lengthNauticalMile: {
                other: "{0} nmi"
            },
            lengthMileScandinavian: {
                other: "{0} smi"
            },
            lightLux: {
                other: "{0} lx"
            },
            massMetricTon: {
                other: "{0} t"
            },
            massKilogram: {
                other: "{0} kg"
            },
            massGram: {
                other: "{0} g"
            },
            massMilligram: {
                other: "{0} mg"
            },
            massMicrogram: {
                other: "{0} µg"
            },
            massTon: {
                other: "{0} tn"
            },
            massStone: {
                other: "{0} st"
            },
            massPound: {
                other: "{0} lb"
            },
            massOunce: {
                other: "{0} oz"
            },
            massOunceTroy: {
                other: "{0} oz t"
            },
            massCarat: {
                other: "{0} CD"
            },
            powerGigawatt: {
                other: "{0} GW"
            },
            powerMegawatt: {
                other: "{0} MW"
            },
            powerKilowatt: {
                other: "{0} kW"
            },
            powerWatt: {
                other: "{0} W"
            },
            powerMilliwatt: {
                other: "{0} mW"
            },
            powerHorsepower: {
                other: "{0} hp"
            },
            pressureHectopascal: {
                other: "{0} hPa"
            },
            pressureMillimeterOfMercury: {
                other: "{0} mm Hg"
            },
            pressurePoundPerSquareInch: {
                other: "{0} psi"
            },
            pressureInchHg: {
                other: "{0} inHg"
            },
            pressureMillibar: {
                other: "{0} mbar"
            },
            speedKilometerPerHour: {
                other: "{0} km/h"
            },
            speedMeterPerSecond: {
                other: "{0} m/s"
            },
            speedMilePerHour: {
                other: "{0} mi/h"
            },
            speedKnot: {
                other: "{0} kn"
            },
            temperatureGeneric: {
                other: "{0}°"
            },
            temperatureCelsius: {
                other: "{0}°C"
            },
            temperatureFahrenheit: {
                other: "{0}°F"
            },
            temperatureKelvin: {
                other: "{0} K"
            },
            volumeCubicKilometer: {
                other: "{0} km³"
            },
            volumeCubicMeter: {
                other: "{0} m³"
            },
            volumeCubicCentimeter: {
                other: "{0} cm³"
            },
            volumeCubicMile: {
                other: "{0} mi³"
            },
            volumeCubicYard: {
                other: "{0} yd³"
            },
            volumeCubicFoot: {
                other: "{0} ft³"
            },
            volumeCubicInch: {
                other: "{0} in³"
            },
            volumeMegaliter: {
                other: "{0} ML"
            },
            volumeHectoliter: {
                other: "{0} hL"
            },
            volumeLiter: {
                other: "{0} l"
            },
            volumeDeciliter: {
                other: "{0} dL"
            },
            volumeCentiliter: {
                other: "{0} cL"
            },
            volumeMilliliter: {
                other: "{0} mL"
            },
            volumePintMetric: {
                other: "{0} mpt"
            },
            volumeCupMetric: {
                other: "{0} mc"
            },
            volumeAcreFoot: {
                other: "{0} ac ft"
            },
            volumeBushel: {
                other: "{0} bu"
            },
            volumeGallon: {
                other: "{0} gal US"
            },
            volumeGallonImperial: {
                other: "{0} gal Imp."
            },
            volumeQuart: {
                other: "{0} qt"
            },
            volumePint: {
                other: "{0} pt"
            },
            volumeCup: {
                other: "{0} c"
            },
            volumeFluidOunce: {
                other: "{0} fl oz"
            },
            volumeTablespoon: {
                other: "{0} tbsp"
            },
            volumeTeaspoon: {
                other: "{0} tsp"
            }
        },
        compoundUnit: {
            per: "{0}/{1}"
        }
    }
};

inter.timeZoneFormats = {
    hour: [ "+HH:mm", "-HH:mm" ],
    gmt: "GMT{0}",
    gmtZero: "GMT",
    region: "{0}",
    fallback: "{1} ({0})",
    regions: {
        daylight: "{0} (+1)",
        standard: "{0} (+0)"
    }
};

inter.characters = {
    exemplar: {
        "default": [ "" ],
        auxiliary: [ "" ],
        punctuation: [ "\\-", ",", ";", "\\:", "!", "?", ".", "(", ")", "\\[", "\\]", "\\{", "\\}" ]
    },
    ellipsis: {
        "final": "{0}…",
        initial: "…{0}",
        medial: "{0}…{1}",
        "word-final": "{0} …",
        "word-initial": "… {0}",
        "word-medial": "{0} … {1}"
    },
    moreInformation: "?"
};

inter.numbers = {
    ahom: {
        symbols: _4y1n84,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    arab: {
        symbols: _4y1n84,
        formats: _4y1n123,
        digits: [ "٠", "١", "٢", "٣", "٤", "٥", "٦", "٧", "٨", "٩" ]
    },
    arabext: {
        symbols: {
            decimal: "٫",
            group: "٬",
            list: "؛",
            percentSign: "٪",
            plusSign: "‎+‎",
            minusSign: "‎-‎",
            exponential: "×۱۰^",
            superscriptingExponent: "×",
            perMille: "؉",
            infinity: "∞",
            nan: "NaN",
            timeSeparator: "٫"
        },
        formats: _4y1n123,
        digits: [ "۰", "۱", "۲", "۳", "۴", "۵", "۶", "۷", "۸", "۹" ]
    },
    armn: {
        symbols: _4y1n84,
        digits: "renderArmenianUpper"
    },
    armnlow: {
        symbols: _4y1n84,
        digits: "renderArmenianLower"
    },
    bali: {
        symbols: _4y1n83,
        formats: _4y1n123,
        digits: [ "᭐", "᭑", "᭒", "᭓", "᭔", "᭕", "᭖", "᭗", "᭘", "᭙" ]
    },
    beng: {
        symbols: _4y1n83,
        formats: _4y1n123,
        digits: [ "০", "১", "২", "৩", "৪", "৫", "৬", "৭", "৮", "৯" ]
    },
    brah: {
        symbols: _4y1n83,
        formats: _4y1n123,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    cakm: {
        symbols: _4y1n83,
        formats: _4y1n123,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    cham: {
        symbols: _4y1n83,
        formats: _4y1n123,
        digits: [ "꩐", "꩑", "꩒", "꩓", "꩔", "꩕", "꩖", "꩗", "꩘", "꩙" ]
    },
    cyrl: {
        symbols: _4y1n84,
        digits: "renderCyrillicLower"
    },
    deva: {
        symbols: _4y1n83,
        formats: _4y1n123,
        digits: [ "०", "१", "२", "३", "४", "५", "६", "७", "८", "९" ]
    },
    ethi: {
        symbols: _4y1n84,
        digits: "renderEthiopic"
    },
    finance: _4y1n86,
    fullwide: {
        symbols: _4y1n83,
        formats: _4y1n123,
        digits: [ "０", "１", "２", "３", "４", "５", "６", "７", "８", "９" ]
    },
    geor: {
        symbols: _4y1n84,
        digits: "renderGeorgian"
    },
    grek: {
        symbols: _4y1n84,
        digits: "renderGreekUpper"
    },
    greklow: {
        symbols: _4y1n84,
        digits: "renderGreekLower"
    },
    gujr: {
        symbols: _4y1n83,
        formats: _4y1n123,
        digits: [ "૦", "૧", "૨", "૩", "૪", "૫", "૬", "૭", "૮", "૯" ]
    },
    guru: {
        symbols: _4y1n83,
        formats: _4y1n123,
        digits: [ "੦", "੧", "੨", "੩", "੪", "੫", "੬", "੭", "੮", "੯" ]
    },
    hanidays: {
        symbols: _4y1n84,
        digits: "renderSpelloutNumberingDays"
    },
    hanidec: {
        symbols: _4y1n83,
        formats: _4y1n123,
        digits: [ "〇", "一", "二", "三", "四", "五", "六", "七", "八", "九" ]
    },
    hans: _4y1n90,
    hansfin: _4y1n92,
    hant: _4y1n90,
    hantfin: _4y1n92,
    hebr: {
        symbols: _4y1n84,
        digits: "renderHebrew"
    },
    hmng: {
        symbols: _4y1n84,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    java: {
        symbols: _4y1n83,
        formats: _4y1n123,
        digits: [ "꧐", "꧑", "꧒", "꧓", "꧔", "꧕", "꧖", "꧗", "꧘", "꧙" ]
    },
    jpan: _4y1n90,
    jpanfin: _4y1n92,
    kali: {
        symbols: _4y1n83,
        formats: _4y1n123,
        digits: [ "꤀", "꤁", "꤂", "꤃", "꤄", "꤅", "꤆", "꤇", "꤈", "꤉" ]
    },
    khmr: {
        symbols: _4y1n83,
        formats: _4y1n123,
        digits: [ "០", "១", "២", "៣", "៤", "៥", "៦", "៧", "៨", "៩" ]
    },
    knda: {
        symbols: _4y1n83,
        formats: _4y1n123,
        digits: [ "೦", "೧", "೨", "೩", "೪", "೫", "೬", "೭", "೮", "೯" ]
    },
    lana: {
        symbols: _4y1n83,
        formats: _4y1n123,
        digits: [ "᪀", "᪁", "᪂", "᪃", "᪄", "᪅", "᪆", "᪇", "᪈", "᪉" ]
    },
    lanatham: {
        symbols: _4y1n83,
        formats: _4y1n123,
        digits: [ "᪐", "᪑", "᪒", "᪓", "᪔", "᪕", "᪖", "᪗", "᪘", "᪙" ]
    },
    laoo: {
        symbols: _4y1n83,
        formats: _4y1n123,
        digits: [ "໐", "໑", "໒", "໓", "໔", "໕", "໖", "໗", "໘", "໙" ]
    },
    latn: {
        symbols: _4y1n83,
        formats: _4y1n123,
        digits: [ "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" ]
    },
    lepc: {
        symbols: _4y1n83,
        formats: _4y1n123,
        digits: [ "᱀", "᱁", "᱂", "᱃", "᱄", "᱅", "᱆", "᱇", "᱈", "᱉" ]
    },
    limb: {
        symbols: _4y1n83,
        formats: _4y1n123,
        digits: [ "᥆", "᥇", "᥈", "᥉", "᥊", "᥋", "᥌", "᥍", "᥎", "᥏" ]
    },
    mathbold: {
        symbols: _4y1n84,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathdbl: {
        symbols: _4y1n84,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathmono: {
        symbols: _4y1n84,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathsanb: {
        symbols: _4y1n84,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathsans: {
        symbols: _4y1n84,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mlym: {
        symbols: _4y1n83,
        formats: _4y1n123,
        digits: [ "൦", "൧", "൨", "൩", "൪", "൫", "൬", "൭", "൮", "൯" ]
    },
    modi: {
        symbols: _4y1n84,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mong: {
        symbols: _4y1n83,
        formats: _4y1n123,
        digits: [ "᠐", "᠑", "᠒", "᠓", "᠔", "᠕", "᠖", "᠗", "᠘", "᠙" ]
    },
    mroo: {
        symbols: _4y1n84,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mtei: {
        symbols: _4y1n83,
        formats: _4y1n123,
        digits: [ "꯰", "꯱", "꯲", "꯳", "꯴", "꯵", "꯶", "꯷", "꯸", "꯹" ]
    },
    mymr: {
        symbols: _4y1n83,
        formats: _4y1n123,
        digits: [ "၀", "၁", "၂", "၃", "၄", "၅", "၆", "၇", "၈", "၉" ]
    },
    mymrshan: {
        symbols: _4y1n83,
        formats: _4y1n123,
        digits: [ "႐", "႑", "႒", "႓", "႔", "႕", "႖", "႗", "႘", "႙" ]
    },
    mymrtlng: {
        symbols: _4y1n84,
        digits: [ "꧰", "꧱", "꧲", "꧳", "꧴", "꧵", "꧶", "꧷", "꧸", "꧹" ]
    },
    "native": _4y1n86,
    nkoo: {
        symbols: _4y1n83,
        formats: _4y1n123,
        digits: [ "߀", "߁", "߂", "߃", "߄", "߅", "߆", "߇", "߈", "߉" ]
    },
    olck: {
        symbols: _4y1n83,
        formats: _4y1n123,
        digits: [ "᱐", "᱑", "᱒", "᱓", "᱔", "᱕", "᱖", "᱗", "᱘", "᱙" ]
    },
    orya: {
        symbols: _4y1n83,
        formats: _4y1n123,
        digits: [ "୦", "୧", "୨", "୩", "୪", "୫", "୬", "୭", "୮", "୯" ]
    },
    osma: {
        symbols: _4y1n83,
        formats: _4y1n123,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    roman: {
        symbols: _4y1n84,
        digits: "renderRomanUpper"
    },
    romanlow: {
        symbols: _4y1n84,
        digits: "renderRomanLower"
    },
    saur: {
        symbols: _4y1n83,
        formats: _4y1n123,
        digits: [ "꣐", "꣑", "꣒", "꣓", "꣔", "꣕", "꣖", "꣗", "꣘", "꣙" ]
    },
    shrd: {
        symbols: _4y1n83,
        formats: _4y1n123,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    sind: {
        symbols: _4y1n84,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    sinh: {
        symbols: _4y1n84,
        digits: [ "෦", "෧", "෨", "෩", "෪", "෫", "෬", "෭", "෮", "෯" ]
    },
    sora: {
        symbols: _4y1n83,
        formats: _4y1n123,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    sund: {
        symbols: _4y1n83,
        formats: _4y1n123,
        digits: [ "᮰", "᮱", "᮲", "᮳", "᮴", "᮵", "᮶", "᮷", "᮸", "᮹" ]
    },
    takr: {
        symbols: _4y1n83,
        formats: _4y1n123,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    talu: {
        symbols: _4y1n83,
        formats: _4y1n123,
        digits: [ "᧐", "᧑", "᧒", "᧓", "᧔", "᧕", "᧖", "᧗", "᧘", "᧙" ]
    },
    taml: {
        symbols: _4y1n84,
        digits: "renderTamil"
    },
    tamldec: {
        symbols: _4y1n83,
        formats: _4y1n123,
        digits: [ "௦", "௧", "௨", "௩", "௪", "௫", "௬", "௭", "௮", "௯" ]
    },
    telu: {
        symbols: _4y1n83,
        formats: _4y1n123,
        digits: [ "౦", "౧", "౨", "౩", "౪", "౫", "౬", "౭", "౮", "౯" ]
    },
    thai: {
        symbols: _4y1n83,
        formats: _4y1n123,
        digits: [ "๐", "๑", "๒", "๓", "๔", "๕", "๖", "๗", "๘", "๙" ]
    },
    tirh: {
        symbols: _4y1n84,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    tibt: {
        symbols: _4y1n83,
        formats: _4y1n123,
        digits: [ "༠", "༡", "༢", "༣", "༤", "༥", "༦", "༧", "༨", "༩" ]
    },
    traditio: _4y1n86,
    vaii: {
        symbols: _4y1n83,
        formats: _4y1n123,
        digits: [ "꘠", "꘡", "꘢", "꘣", "꘤", "꘥", "꘦", "꘧", "꘨", "꘩" ]
    },
    wara: {
        symbols: _4y1n84,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    }
};

inter.defaultNumberSystemId = "latn";

inter.calendars = {
    buddhist: {
        dateFormats: _4y1n114,
        datePartsOrder: "ymd",
        dateIntervalFormats: _4y1n116,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _4y1n105,
        dayPeriods: _4y1n85,
        monthNames: _4y1n106,
        eraNames: {
            wide: [ "BE" ],
            abbreviated: [ "BE" ]
        },
        quarterNames: _4y1n89,
        fields: _4y1n119
    },
    chinese: _4y1n127,
    coptic: {
        dateFormats: _4y1n114,
        datePartsOrder: "ymd",
        dateIntervalFormats: _4y1n116,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _4y1n105,
        dayPeriods: _4y1n85,
        monthNames: {
            format: _4y1n99,
            standAlone: _4y1n99
        },
        eraNames: _4y1n34,
        quarterNames: _4y1n89,
        fields: _4y1n119
    },
    dangi: _4y1n127,
    ethioaa: _4y1n120,
    ethiopic: {
        dateFormats: _4y1n114,
        datePartsOrder: "ymd",
        dateIntervalFormats: _4y1n116,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _4y1n105,
        dayPeriods: _4y1n85,
        monthNames: {
            format: _4y1n101,
            standAlone: _4y1n101
        },
        eraNames: _4y1n34,
        quarterNames: _4y1n89,
        fields: _4y1n119
    },
    gregorian: {
        dateFormats: {
            basic: {
                fullDate: "y MMMM d, EEEE",
                longDate: "y MMMM d",
                mediumDate: "y MMM d",
                shortDate: "y-MM-dd",
                fullTime: "HH:mm:ss zzzz",
                longTime: "HH:mm:ss z",
                mediumTime: "HH:mm:ss",
                shortTime: "HH:mm",
                shortDateTime: "y-MM-dd HH:mm",
                mediumDateTime: "y MMM d HH:mm:ss",
                longDateTime: "y MMMM d HH:mm:ss z",
                fullDateTime: "y MMMM d, EEEE HH:mm:ss zzzz"
            },
            cldr: {
                d: "d",
                E: "ccc",
                Ed: "d, E",
                Ehm: "E h:mm a",
                EHm: "E HH:mm",
                Ehms: "E h:mm:ss a",
                EHms: "E HH:mm:ss",
                Gy: "G y",
                GyMMM: "G y MMM",
                GyMMMd: "G y MMM d",
                GyMMMEd: "G y MMM d, E",
                h: "h a",
                H: "HH",
                hm: "h:mm a",
                Hm: "HH:mm",
                hms: "h:mm:ss a",
                Hms: "HH:mm:ss",
                hmsv: "h:mm:ss a v",
                Hmsv: "HH:mm:ss v",
                hmv: "h:mm a v",
                Hmv: "HH:mm v",
                M: "L",
                Md: "MM-dd",
                MEd: "MM-dd, E",
                MMM: "LLL",
                MMMd: "MMM d",
                MMMEd: "MMM d, E",
                MMMMd: "MMMM d",
                ms: "mm:ss",
                y: "y",
                yM: "y-MM",
                yMd: "y-MM-dd",
                yMEd: "y-MM-dd, E",
                yMMM: "y MMM",
                yMMMd: "y MMM d",
                yMMMEd: "y MMM d, E",
                yMMMM: "y MMMM",
                yQQQ: "y QQQ",
                yQQQQ: "y QQQQ"
            }
        },
        datePartsOrder: "ymd",
        dateIntervalFormats: {
            d: {
                d: "d–d"
            },
            h: _4y1n3,
            H: {
                H: "HH–HH"
            },
            hm: _4y1n40,
            Hm: _4y1n11,
            hmv: _4y1n47,
            Hmv: _4y1n14,
            hv: _4y1n6,
            Hv: {
                H: "HH–HH v"
            },
            M: {
                M: "MM–MM"
            },
            Md: _4y1n15,
            MEd: _4y1n31,
            MMM: {
                M: "LLL–LLL"
            },
            MMMd: _4y1n8,
            MMMEd: _4y1n32,
            y: {
                y: "y–y"
            },
            yM: _4y1n12,
            yMd: _4y1n54,
            yMEd: _4y1n65,
            yMMM: {
                M: "y MMM–MMM",
                y: "y MMM – y MMM"
            },
            yMMMd: {
                d: "y MMM d–d",
                M: "y MMM d – MMM d",
                y: "y MMM d – y MMM d"
            },
            yMMMEd: {
                d: "y MMM d, E – MMM d, E",
                M: "y MMM d, E – MMM d, E",
                y: "y MMM d, E – y MMM d, E"
            },
            yMMMM: {
                M: "y MMMM–MMMM",
                y: "y MMMM – y MMMM"
            }
        },
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _4y1n105,
        dayPeriods: _4y1n85,
        monthNames: _4y1n106,
        eraNames: {
            wide: [ "BCE", "CE" ],
            abbreviated: [ "BCE", "CE" ]
        },
        quarterNames: _4y1n89,
        fields: _4y1n119
    },
    hebrew: {
        dateFormats: _4y1n114,
        datePartsOrder: "ymd",
        dateIntervalFormats: _4y1n116,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _4y1n105,
        dayPeriods: _4y1n85,
        monthNames: {
            format: _4y1n97,
            standAlone: _4y1n97
        },
        eraNames: {
            wide: [ "AM" ],
            abbreviated: [ "AM" ]
        },
        quarterNames: _4y1n89,
        fields: _4y1n119
    },
    indian: {
        dateFormats: _4y1n114,
        datePartsOrder: "ymd",
        dateIntervalFormats: _4y1n116,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _4y1n105,
        dayPeriods: _4y1n85,
        monthNames: {
            format: _4y1n102,
            standAlone: _4y1n102
        },
        eraNames: {
            wide: [ "Saka" ],
            abbreviated: [ "Saka" ]
        },
        quarterNames: _4y1n89,
        fields: _4y1n119
    },
    islamic: _4y1n125,
    "islamic-umalqura": _4y1n125,
    "islamic-tbla": _4y1n125,
    "islamic-civil": _4y1n125,
    "islamic-rgsa": _4y1n125,
    iso8601: _4y1n120,
    japanese: {
        dateFormats: _4y1n114,
        datePartsOrder: "ymd",
        dateIntervalFormats: _4y1n116,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _4y1n105,
        dayPeriods: _4y1n85,
        monthNames: _4y1n106,
        eraNames: {
            wide: _4y1n124,
            abbreviated: _4y1n124
        },
        quarterNames: _4y1n89,
        fields: _4y1n119
    },
    persian: {
        dateFormats: _4y1n114,
        datePartsOrder: "ymd",
        dateIntervalFormats: _4y1n116,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _4y1n105,
        dayPeriods: _4y1n85,
        monthNames: {
            format: _4y1n98,
            standAlone: _4y1n98
        },
        eraNames: {
            wide: [ "AP" ],
            abbreviated: [ "AP" ]
        },
        quarterNames: _4y1n89,
        fields: _4y1n119
    },
    roc: {
        dateFormats: _4y1n114,
        datePartsOrder: "ymd",
        dateIntervalFormats: _4y1n116,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _4y1n105,
        dayPeriods: _4y1n85,
        monthNames: _4y1n106,
        eraNames: {
            wide: _4y1n5,
            abbreviated: _4y1n5
        },
        quarterNames: _4y1n89,
        fields: _4y1n119
    },
    islamicc: _4y1n120
};

inter.pluralRule = function(n) {
    return "other";
};

inter.renderDigitsOrdinal = function(n) {
    if (n < 0) return "−" + this.renderDigitsOrdinal(-n);
    if (n >= 0) return this.renderNumber(n, "#,##0") + ".";
};

inter.renderSpelloutNumbering = function(n) {
    if (n < 0) return "−" + this.renderSpelloutNumbering(-n);
    if (n >= 0) return this.renderNumber(n, "#,##0.#");
};

inter.renderArmenianUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderArmenianUpper(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e4) return this.renderNumber(n, "#,##0");
    if (n >= 9e3) return "Ք" + (n === 9e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 8e3) return "Փ" + (n === 8e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 7e3) return "Ւ" + (n === 7e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 6e3) return "Ց" + (n === 6e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 5e3) return "Ր" + (n === 5e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 4e3) return "Տ" + (n === 4e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 3e3) return "Վ" + (n === 3e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 2e3) return "Ս" + (n === 2e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 1e3) return "Ռ" + (n === 1e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 900) return "Ջ" + (n === 900 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 800) return "Պ" + (n === 800 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 700) return "Չ" + (n === 700 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 600) return "Ո" + (n === 600 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 500) return "Շ" + (n === 500 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 400) return "Ն" + (n === 400 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 300) return "Յ" + (n === 300 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 200) return "Մ" + (n === 200 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 100) return "Ճ" + (n === 100 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 90) return "Ղ" + (n === 90 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 80) return "Ձ" + (n === 80 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 70) return "Հ" + (n === 70 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 60) return "Կ" + (n === 60 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 50) return "Ծ" + (n === 50 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 40) return "Խ" + (n === 40 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 30) return "Լ" + (n === 30 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 20) return "Ի" + (n === 20 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 10) return "Ժ" + (n === 10 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 9) return "Թ";
    if (n >= 8) return "Ը";
    if (n >= 7) return "Է";
    if (n >= 6) return "Զ";
    if (n >= 5) return "Ե";
    if (n >= 4) return "Դ";
    if (n >= 3) return "Գ";
    if (n >= 2) return "Բ";
    if (n >= 1) return "Ա";
    if (n >= 0) return "0";
};

inter.renderArmenianLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderArmenianLower(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e4) return this.renderNumber(n, "#,##0");
    if (n >= 9e3) return "ք" + (n === 9e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 8e3) return "փ" + (n === 8e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 7e3) return "ւ" + (n === 7e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 6e3) return "ց" + (n === 6e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 5e3) return "ր" + (n === 5e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 4e3) return "տ" + (n === 4e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 3e3) return "վ" + (n === 3e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 2e3) return "ս" + (n === 2e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 1e3) return "ռ" + (n === 1e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 900) return "ջ" + (n === 900 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 800) return "պ" + (n === 800 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 700) return "չ" + (n === 700 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 600) return "ո" + (n === 600 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 500) return "շ" + (n === 500 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 400) return "ն" + (n === 400 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 300) return "յ" + (n === 300 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 200) return "մ" + (n === 200 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 100) return "ճ" + (n === 100 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 90) return "ղ" + (n === 90 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 80) return "ձ" + (n === 80 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 70) return "հ" + (n === 70 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 60) return "կ" + (n === 60 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 50) return "ծ" + (n === 50 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 40) return "խ" + (n === 40 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 30) return "լ" + (n === 30 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 20) return "ի" + (n === 20 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 10) return "ժ" + (n === 10 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 9) return "թ";
    if (n >= 8) return "ը";
    if (n >= 7) return "է";
    if (n >= 6) return "զ";
    if (n >= 5) return "ե";
    if (n >= 4) return "դ";
    if (n >= 3) return "գ";
    if (n >= 2) return "բ";
    if (n >= 1) return "ա";
    if (n >= 0) return "0";
};

inter.renderCyrillicLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderCyrillicLower(-n);
    if (isFractional && n > 1) return this.renderCyrillicLower(Math.floor(n)) + "." + this.renderCyrillicLower(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e15) return "҂҂҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e15)) + (n === 1e15 ? "" : " " + this.renderCyrillicLower(n % 1e15));
    if (n >= 1e12) return "҂҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e12)) + (n === 1e12 ? "" : " " + this.renderCyrillicLower(n % 1e12));
    if (n >= 1e9) return "҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e9)) + (n === 1e9 ? "" : " " + this.renderCyrillicLower(n % 1e9));
    if (n >= 1e6) return "҂҂" + this.renderCyrillicLower(Math.floor(n / 1e6)) + (n === 1e6 ? "" : " " + this.renderCyrillicLower(n % 1e6));
    if (n >= 11e3) return this.renderCyrillicLowerThousands(Math.floor(n / 1e4)) + (n === 11e3 ? "" : " " + this.renderCyrillicLower(n % 1e4));
    if (n >= 1e4) return "҂" + this.renderCyrillicLower(Math.floor(n / 1e4)) + (n === 1e4 ? "" : " " + this.renderCyrillicLower(n % 1e4));
    if (n >= 1e3) return "҂" + this.renderCyrillicLower110(Math.floor(n / 1e3)) + this.renderCyrillicLowerPost(n % 1e3);
    if (n >= 900) return "ц" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 801) return "ѿ" + this.renderCyrillicLower(n % 100);
    if (n >= 800) return "ѿ҃";
    if (n >= 700) return "ѱ" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 600) return "х" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 500) return "ф" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 400) return "у" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 300) return "т" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 200) return "с" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 100) return "р" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 90) return "ч" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 80) return "п" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 70) return "ѻ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 60) return "ѯ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 50) return "н" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 40) return "м" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 30) return "л" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 20) return "к" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 19) return "ѳ҃і";
    if (n >= 18) return "и҃і";
    if (n >= 17) return "з҃і";
    if (n >= 16) return "ѕ҃і";
    if (n >= 15) return "є҃і";
    if (n >= 14) return "д҃і";
    if (n >= 13) return "г҃і";
    if (n >= 12) return "в҃і";
    if (n >= 11) return "а҃і";
    if (n >= 1) return this.renderCyrillicLower110(n) + "҃";
    if (n >= 0) return "0҃";
};

inter.renderEthiopic = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderEthiopic(-n);
    if (isFractional && n > 1) return this.renderEthiopic(Math.floor(n)) + "፡" + this.renderEthiopic(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,###0");
    if (n >= 2e16) return this.renderEthiopic(Math.floor(n / 1e16)) + "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 1e16) return "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 2e12) return this.renderEthiopic(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1e12) return "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 2e8) return this.renderEthiopic(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1e8) return "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 2e4) return this.renderEthiopic(Math.floor(n / 1e4)) + "፼" + (n === 2e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 1e4) return "፼" + (n === 1e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 200) return this.renderEthiopic(Math.floor(n / 100)) + "፻" + (n === 200 ? "" : this.renderEthiopic(n % 100));
    if (n >= 100) return "፻" + (n === 100 ? "" : this.renderEthiopic(n % 100));
    if (n >= 90) return "፺" + (n === 90 ? "" : this.renderEthiopic(n % 10));
    if (n >= 80) return "፹" + (n === 80 ? "" : this.renderEthiopic(n % 10));
    if (n >= 70) return "፸" + (n === 70 ? "" : this.renderEthiopic(n % 10));
    if (n >= 60) return "፷" + (n === 60 ? "" : this.renderEthiopic(n % 10));
    if (n >= 50) return "፶" + (n === 50 ? "" : this.renderEthiopic(n % 10));
    if (n >= 40) return "፵" + (n === 40 ? "" : this.renderEthiopic(n % 10));
    if (n >= 30) return "፴" + (n === 30 ? "" : this.renderEthiopic(n % 10));
    if (n >= 20) return "፳" + (n === 20 ? "" : this.renderEthiopic(n % 10));
    if (n >= 10) return "፲" + (n === 10 ? "" : this.renderEthiopic(n % 10));
    if (n >= 9) return "፱";
    if (n >= 8) return "፰";
    if (n >= 7) return "፯";
    if (n >= 6) return "፮";
    if (n >= 5) return "፭";
    if (n >= 4) return "፬";
    if (n >= 3) return "፫";
    if (n >= 2) return "፪";
    if (n >= 1) return "፩";
    if (n >= 0) return "ባዶ";
};

inter.renderGeorgian = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGeorgian(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 2e4) return this.renderNumber(n, "#,##0");
    if (n >= 1e4) return "ჯ" + (n === 1e4 ? "" : this.renderGeorgian(n % 1e4));
    if (n >= 9e3) return "ჵ" + (n === 9e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 8e3) return "ჴ" + (n === 8e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 7e3) return "ხ" + (n === 7e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 6e3) return "ჭ" + (n === 6e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 5e3) return "წ" + (n === 5e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 4e3) return "ძ" + (n === 4e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 3e3) return "ც" + (n === 3e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 2e3) return "ჩ" + (n === 2e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 1e3) return "შ" + (n === 1e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 900) return "ყ" + (n === 900 ? "" : this.renderGeorgian(n % 100));
    if (n >= 800) return "ღ" + (n === 800 ? "" : this.renderGeorgian(n % 100));
    if (n >= 700) return "ქ" + (n === 700 ? "" : this.renderGeorgian(n % 100));
    if (n >= 600) return "ფ" + (n === 600 ? "" : this.renderGeorgian(n % 100));
    if (n >= 500) return "ჳ" + (n === 500 ? "" : this.renderGeorgian(n % 100));
    if (n >= 400) return "უ" + (n === 400 ? "" : this.renderGeorgian(n % 100));
    if (n >= 300) return "ტ" + (n === 300 ? "" : this.renderGeorgian(n % 100));
    if (n >= 200) return "ს" + (n === 200 ? "" : this.renderGeorgian(n % 100));
    if (n >= 100) return "რ" + (n === 100 ? "" : this.renderGeorgian(n % 100));
    if (n >= 90) return "ჟ" + (n === 90 ? "" : this.renderGeorgian(n % 10));
    if (n >= 80) return "პ" + (n === 80 ? "" : this.renderGeorgian(n % 10));
    if (n >= 70) return "ო" + (n === 70 ? "" : this.renderGeorgian(n % 10));
    if (n >= 60) return "ჲ" + (n === 60 ? "" : this.renderGeorgian(n % 10));
    if (n >= 50) return "ნ" + (n === 50 ? "" : this.renderGeorgian(n % 10));
    if (n >= 40) return "მ" + (n === 40 ? "" : this.renderGeorgian(n % 10));
    if (n >= 30) return "ლ" + (n === 30 ? "" : this.renderGeorgian(n % 10));
    if (n >= 20) return "კ" + (n === 20 ? "" : this.renderGeorgian(n % 10));
    if (n >= 10) return "ი" + (n === 10 ? "" : this.renderGeorgian(n % 10));
    if (n >= 9) return "თ";
    if (n >= 8) return "ჱ";
    if (n >= 7) return "ზ";
    if (n >= 6) return "ვ";
    if (n >= 5) return "ე";
    if (n >= 4) return "დ";
    if (n >= 3) return "გ";
    if (n >= 2) return "ბ";
    if (n >= 1) return "ა";
    if (n >= 0) return this.renderNumber(n, "#,##0");
};

inter.renderGreekUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGreekUpper(-n);
    if (isFractional && n > 1) return this.renderGreekUpper(Math.floor(n)) + "." + this.renderGreekUpper(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 0) return this.renderGreekNumeralMajuscules(n) + "´";
};

inter.renderGreekLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGreekLower(-n);
    if (isFractional && n > 1) return this.renderGreekLower(Math.floor(n)) + "." + this.renderGreekLower(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 0) return this.renderGreekNumeralMinuscules(n) + "´";
};

inter.renderSpelloutCardinal = function(n) {
    if (n < 0) return "−" + this.renderSpelloutCardinal(-n);
    if (n >= 0) return this.renderNumber(n, "#,##0.#");
};

inter.renderHebrew = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderHebrew(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1000001) return this.renderNumber(n, "#,##0");
    if (n >= 1e6) return "אלף אלפים";
    if (n >= 3001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 3001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 3e3) return this.renderHebrew(Math.floor(n / 1e3)) + " אלפים";
    if (n >= 2001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 2001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 2e3) return "אלפיים";
    if (n >= 1001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 1001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 1e3) return "אלף";
    if (n >= 901) return "תתק" + this.renderHebrew099(n % 100);
    if (n >= 900) return "תת״ק";
    if (n >= 801) return "תת" + this.renderHebrew099(n % 100);
    if (n >= 800) return "ת״ת";
    if (n >= 745) return "תש" + this.renderHebrew099(n % 100);
    if (n >= 744) return "תשד״מ";
    if (n >= 701) return "תש" + this.renderHebrew099(n % 100);
    if (n >= 700) return "ת״ש";
    if (n >= 699) return "תר" + this.renderHebrew099(n % 100);
    if (n >= 698) return "תרח״צ";
    if (n >= 601) return "תר" + this.renderHebrew099(n % 100);
    if (n >= 600) return "ת״ר";
    if (n >= 501) return "תק" + this.renderHebrew099(n % 100);
    if (n >= 500) return "ת״ק";
    if (n >= 400) return "ת" + this.renderHebrew099(n % 100);
    if (n >= 345) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 344) return "שד״מ";
    if (n >= 305) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 304) return "ד״ש";
    if (n >= 300) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 299) return "ר" + this.renderHebrew099(n % 100);
    if (n >= 298) return "רח״צ";
    if (n >= 200) return "ר" + this.renderHebrew099(n % 100);
    if (n >= 100) return "ק" + this.renderHebrew099(n % 100);
    if (n >= 91) return "צ״" + this.renderHebrewItem(n % 10);
    if (n >= 90) return "צ׳";
    if (n >= 81) return "פ״" + this.renderHebrewItem(n % 10);
    if (n >= 80) return "פ׳";
    if (n >= 71) return "ע״" + this.renderHebrewItem(n % 10);
    if (n >= 70) return "ע׳";
    if (n >= 61) return "ס״" + this.renderHebrewItem(n % 10);
    if (n >= 60) return "ס׳";
    if (n >= 51) return "נ״" + this.renderHebrewItem(n % 10);
    if (n >= 50) return "נ׳";
    if (n >= 41) return "מ״" + this.renderHebrewItem(n % 10);
    if (n >= 40) return "מ׳";
    if (n >= 31) return "ל״" + this.renderHebrewItem(n % 10);
    if (n >= 30) return "ל׳";
    if (n >= 21) return "כ״" + this.renderHebrewItem(n % 10);
    if (n >= 20) return "כ׳";
    if (n >= 17) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "ט״ז";
    if (n >= 15) return "ט״ו";
    if (n >= 11) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 0) return this.renderHebrewItem(n) + "׳";
};

inter.renderRomanUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderRomanUpper(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 4e5) return this.renderNumber(n, "#,##0");
    if (n >= 3e5) return "ↈↈↈ" + (n === 3e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 2e5) return "ↈↈ" + (n === 2e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 1e5) return "ↈ" + (n === 1e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 9e4) return "ↂↈ" + (n === 9e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 8e4) return "ↇↂↂↂ" + (n === 8e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 7e4) return "ↇↂↂ" + (n === 7e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 6e4) return "ↇↂ" + (n === 6e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 5e4) return "ↇ" + (n === 5e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 4e4) return "ↂↇ" + (n === 4e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 3e4) return "ↂↂↂ" + (n === 3e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 2e4) return "ↂↂ" + (n === 2e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 1e4) return "ↂ" + (n === 1e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 9e3) return "Mↂ" + (n === 9e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 8e3) return "ↁMMM" + (n === 8e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 7e3) return "ↁMM" + (n === 7e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 6e3) return "ↁM" + (n === 6e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 5e3) return "ↁ" + (n === 5e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 4e3) return "Mↁ" + (n === 4e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 3e3) return "MMM" + (n === 3e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 2e3) return "MM" + (n === 2e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 1e3) return "M" + (n === 1e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 900) return "CM" + (n === 900 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 800) return "DCCC" + (n === 800 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 700) return "DCC" + (n === 700 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 600) return "DC" + (n === 600 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 500) return "D" + (n === 500 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 400) return "CD" + (n === 400 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 300) return "CCC" + (n === 300 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 200) return "CC" + (n === 200 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 100) return "C" + (n === 100 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 90) return "XC" + (n === 90 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 80) return "LXXX" + (n === 80 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 70) return "LXX" + (n === 70 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 60) return "LX" + (n === 60 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 50) return "L" + (n === 50 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 40) return "XL" + (n === 40 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 30) return "XXX" + (n === 30 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 20) return "XX" + (n === 20 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 10) return "X" + (n === 10 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 9) return "IX";
    if (n >= 8) return "VIII";
    if (n >= 7) return "VII";
    if (n >= 6) return "VI";
    if (n >= 5) return "V";
    if (n >= 4) return "IV";
    if (n >= 3) return "III";
    if (n >= 2) return "II";
    if (n >= 1) return "I";
    if (n >= 0) return "N";
};

inter.renderRomanLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderRomanLower(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 5e3) return this.renderNumber(n, "#,##0");
    if (n >= 4e3) return "mmmm" + (n === 4e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 3e3) return "mmm" + (n === 3e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 2e3) return "mm" + (n === 2e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 1e3) return "m" + (n === 1e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 900) return "cm" + (n === 900 ? "" : this.renderRomanLower(n % 100));
    if (n >= 800) return "dccc" + (n === 800 ? "" : this.renderRomanLower(n % 100));
    if (n >= 700) return "dcc" + (n === 700 ? "" : this.renderRomanLower(n % 100));
    if (n >= 600) return "dc" + (n === 600 ? "" : this.renderRomanLower(n % 100));
    if (n >= 500) return "d" + (n === 500 ? "" : this.renderRomanLower(n % 100));
    if (n >= 400) return "cd" + (n === 400 ? "" : this.renderRomanLower(n % 100));
    if (n >= 300) return "ccc" + (n === 300 ? "" : this.renderRomanLower(n % 100));
    if (n >= 200) return "cc" + (n === 200 ? "" : this.renderRomanLower(n % 100));
    if (n >= 100) return "c" + (n === 100 ? "" : this.renderRomanLower(n % 100));
    if (n >= 90) return "xc" + (n === 90 ? "" : this.renderRomanLower(n % 10));
    if (n >= 80) return "lxxx" + (n === 80 ? "" : this.renderRomanLower(n % 10));
    if (n >= 70) return "lxx" + (n === 70 ? "" : this.renderRomanLower(n % 10));
    if (n >= 60) return "lx" + (n === 60 ? "" : this.renderRomanLower(n % 10));
    if (n >= 50) return "l" + (n === 50 ? "" : this.renderRomanLower(n % 10));
    if (n >= 40) return "xl" + (n === 40 ? "" : this.renderRomanLower(n % 10));
    if (n >= 30) return "xxx" + (n === 30 ? "" : this.renderRomanLower(n % 10));
    if (n >= 20) return "xx" + (n === 20 ? "" : this.renderRomanLower(n % 10));
    if (n >= 10) return "x" + (n === 10 ? "" : this.renderRomanLower(n % 10));
    if (n >= 9) return "ix";
    if (n >= 8) return "viii";
    if (n >= 7) return "vii";
    if (n >= 6) return "vi";
    if (n >= 5) return "v";
    if (n >= 4) return "iv";
    if (n >= 3) return "iii";
    if (n >= 2) return "ii";
    if (n >= 1) return "i";
    if (n >= 0) return "n";
};

inter.renderTamil = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderTamil(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e8) return this.renderNumber(n, "#,##,##0");
    if (n >= 1e6) return this.renderTamil(Math.floor(n / 1e6)) + "௱௲" + (n === 1e6 ? "" : this.renderTamilThousands(n % 1e6));
    if (n >= 2e3) return this.renderTamil(Math.floor(n / 1e3)) + "௲" + (n === 2e3 ? "" : this.renderTamil(n % 1e3));
    if (n >= 1e3) return "௲" + (n === 1e3 ? "" : this.renderTamil(n % 1e3));
    if (n >= 200) return this.renderTamil(Math.floor(n / 100)) + "௱" + (n === 200 ? "" : this.renderTamil(n % 100));
    if (n >= 100) return "௱" + (n === 100 ? "" : this.renderTamil(n % 100));
    if (n >= 20) return this.renderTamil(Math.floor(n / 10)) + "௰" + (n === 20 ? "" : this.renderTamil(n % 10));
    if (n >= 10) return "௰" + (n === 10 ? "" : this.renderTamil(n % 10));
    if (n >= 9) return "௯";
    if (n >= 8) return "௮";
    if (n >= 7) return "௭";
    if (n >= 6) return "௬";
    if (n >= 5) return "௫";
    if (n >= 4) return "௪";
    if (n >= 3) return "௩";
    if (n >= 2) return "௨";
    if (n >= 1) return "௧";
    if (n >= 0) return "௦";
};

inter.renderCyrillicLowerThousands = function(n) {
    if (n >= 900) return "҂ц" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 800) return "҂ѿ" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 700) return "҂ѱ" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 600) return "҂х" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 500) return "҂ф" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 400) return "҂у" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 300) return "҂т" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 200) return "҂с" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 100) return "҂р" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 90) return "҂ч" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 80) return "҂п" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 70) return "҂ѻ" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 60) return "҂ѯ" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 50) return "҂н" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 40) return "҂м" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 30) return "҂л" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 20) return "҂к" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 19) return "҂ѳ҃҂і";
    if (n >= 18) return "҂и҃҂і";
    if (n >= 17) return "҂з҃҂і";
    if (n >= 16) return "҂ѕ҃҂і";
    if (n >= 15) return "҂є҃҂і";
    if (n >= 14) return "҂д҃҂і";
    if (n >= 13) return "҂г҃҂і";
    if (n >= 12) return "҂в҃҂і";
    if (n >= 11) return "҂а҃҂і";
    if (n >= 10) return "҃҂і";
    if (n >= 9) return "҃҂ѳ";
    if (n >= 8) return "҃҂и";
    if (n >= 7) return "҃҂з";
    if (n >= 6) return "҃҂ѕ";
    if (n >= 5) return "҃҂є";
    if (n >= 4) return "҃҂д";
    if (n >= 3) return "҃҂г";
    if (n >= 2) return "҃҂в";
    if (n >= 1) return "҃҂а";
    if (n >= 0) return "҃";
};

inter.renderCyrillicLower110 = function(n) {
    if (n >= 10) return "і";
    if (n >= 9) return "ѳ";
    if (n >= 8) return "и";
    if (n >= 7) return "з";
    if (n >= 6) return "ѕ";
    if (n >= 5) return "є";
    if (n >= 4) return "д";
    if (n >= 3) return "г";
    if (n >= 2) return "в";
    if (n >= 1) return "а";
};

inter.renderCyrillicLowerPost = function(n) {
    if (n >= 1) return this.renderCyrillicLower(n);
    if (n >= 0) return "҃";
};

inter.renderCyrillicLowerFinal = function(n) {
    if (n >= 91) return "ч" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 90) return "҃ч";
    if (n >= 81) return "п" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 80) return "҃п";
    if (n >= 71) return "ѻ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 70) return "҃ѻ";
    if (n >= 61) return "ѯ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 60) return "҃ѯ";
    if (n >= 51) return "н" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 50) return "҃н";
    if (n >= 41) return "м" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 40) return "҃м";
    if (n >= 31) return "л" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 30) return "҃л";
    if (n >= 21) return "к" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 20) return "҃к";
    if (n >= 19) return "ѳ҃і";
    if (n >= 18) return "и҃і";
    if (n >= 17) return "з҃і";
    if (n >= 16) return "ѕ҃і";
    if (n >= 15) return "є҃і";
    if (n >= 14) return "д҃і";
    if (n >= 13) return "г҃і";
    if (n >= 12) return "в҃і";
    if (n >= 11) return "а҃і";
    if (n >= 1) return "҃" + this.renderCyrillicLower110(n);
    if (n >= 0) return "҃";
};

inter.renderEthiopicP3 = function(n) {
    if (n >= 1e12) return this.renderEthiopic(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1) return "፼፼፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼፼፼";
};

inter.renderEthiopicP2 = function(n) {
    if (n >= 1e8) return this.renderEthiopic(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1) return "፼፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼፼";
};

inter.renderEthiopicP1 = function(n) {
    if (n >= 1e4) return this.renderEthiopic(Math.floor(n / 1e4)) + "፼" + (n === 1e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 1) return "፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼";
};

inter.renderGreekNumeralMajuscules = function(n) {
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e16) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e16)) + "ΜΜΜΜ" + (n === 1e16 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e16));
    if (n >= 1e12) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e12)) + "ΜΜΜ" + (n === 1e12 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e12));
    if (n >= 1e8) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e8)) + "ΜΜ" + (n === 1e8 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e8));
    if (n >= 1e4) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e4)) + "Μ" + (n === 1e4 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e4));
    if (n >= 1e3) return "͵" + this.renderGreekNumeralMajuscules(Math.floor(n / 1e3)) + (n === 1e3 ? "" : this.renderGreekNumeralMajuscules(n % 1e3));
    if (n >= 900) return "Ϡ" + (n === 900 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 800) return "Ω" + (n === 800 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 700) return "Ψ" + (n === 700 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 600) return "Χ" + (n === 600 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 500) return "Φ" + (n === 500 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 400) return "Υ" + (n === 400 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 300) return "Τ" + (n === 300 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 200) return "Σ" + (n === 200 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 100) return "Ρ" + (n === 100 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 90) return "Ϟ" + (n === 90 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 80) return "Π" + (n === 80 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 70) return "Ο" + (n === 70 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 60) return "Ξ" + (n === 60 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 50) return "Ν" + (n === 50 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 40) return "Μ" + (n === 40 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 30) return "Λ" + (n === 30 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 20) return "Κ" + (n === 20 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 10) return "Ι" + (n === 10 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 9) return "Θ";
    if (n >= 8) return "Η";
    if (n >= 7) return "Ζ";
    if (n >= 6) return "Ϝ";
    if (n >= 5) return "Ε";
    if (n >= 4) return "Δ";
    if (n >= 3) return "Γ";
    if (n >= 2) return "Β";
    if (n >= 1) return "Α";
    if (n >= 0) return "𐆊";
};

inter.renderGreekNumeralMinuscules = function(n) {
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e16) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e16)) + "μμμμ" + (n === 1e16 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e16));
    if (n >= 1e12) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e12)) + "μμμ" + (n === 1e12 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e12));
    if (n >= 1e8) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e8)) + "μμ" + (n === 1e8 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e8));
    if (n >= 1e4) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e4)) + "μ" + (n === 1e4 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e4));
    if (n >= 1e3) return "͵" + this.renderGreekNumeralMinuscules(Math.floor(n / 1e3)) + (n === 1e3 ? "" : this.renderGreekNumeralMinuscules(n % 1e3));
    if (n >= 900) return "ϡ" + (n === 900 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 800) return "ω" + (n === 800 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 700) return "ψ" + (n === 700 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 600) return "χ" + (n === 600 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 500) return "φ" + (n === 500 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 400) return "υ" + (n === 400 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 300) return "τ" + (n === 300 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 200) return "σ" + (n === 200 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 100) return "ρ" + (n === 100 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 90) return "ϟ" + (n === 90 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 80) return "π" + (n === 80 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 70) return "ο" + (n === 70 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 60) return "ξ" + (n === 60 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 50) return "ν" + (n === 50 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 40) return "μ" + (n === 40 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 30) return "λ" + (n === 30 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 20) return "κ" + (n === 20 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 10) return "ι" + (n === 10 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 9) return "θ";
    if (n >= 8) return "η";
    if (n >= 7) return "ζ";
    if (n >= 6) return "ϝ";
    if (n >= 5) return "ε";
    if (n >= 4) return "δ";
    if (n >= 3) return "γ";
    if (n >= 2) return "β";
    if (n >= 1) return "α";
    if (n >= 0) return "𐆊";
};

inter.renderHebrewThousands = function(n) {
    if (n >= 401) return this.renderHebrew(n) + "׳";
    if (n >= 100) return this.renderHebrew(n) + (n === 100 ? "" : "׳");
    if (n >= 10) return this.renderHebrew(n) + (n === 10 ? "" : "׳");
    if (n >= 0) return this.renderHebrew(n);
};

inter.renderHebrew099 = function(n) {
    if (n >= 91) return "צ״" + this.renderHebrewItem(n % 10);
    if (n >= 90) return "״צ";
    if (n >= 81) return "פ״" + this.renderHebrewItem(n % 10);
    if (n >= 80) return "״פ";
    if (n >= 71) return "ע״" + this.renderHebrewItem(n % 10);
    if (n >= 70) return "״ע";
    if (n >= 61) return "ס״" + this.renderHebrewItem(n % 10);
    if (n >= 60) return "״ס";
    if (n >= 51) return "נ״" + this.renderHebrewItem(n % 10);
    if (n >= 50) return "״נ";
    if (n >= 41) return "מ״" + this.renderHebrewItem(n % 10);
    if (n >= 40) return "״מ";
    if (n >= 31) return "ל״" + this.renderHebrewItem(n % 10);
    if (n >= 30) return "״ל";
    if (n >= 21) return "כ״" + this.renderHebrewItem(n % 10);
    if (n >= 20) return "״כ";
    if (n >= 17) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "ט״ז";
    if (n >= 15) return "ט״ו";
    if (n >= 11) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 1) return "״" + this.renderHebrewItem(n);
    if (n >= 0) return "׳";
};

inter.renderHebrewItem = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderHebrewItem(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 2100) return this.renderNumber(n, "#,##0");
    if (n >= 2e3) return "תתתתת" + (n === 2e3 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1900) return "תתתתש" + (n === 1900 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1800) return "תתתתר" + (n === 1800 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1700) return "תתתתק" + (n === 1700 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1600) return "תתתת" + (n === 1600 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1500) return "תתתש" + (n === 1500 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1400) return "תתתר" + (n === 1400 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1300) return "תתתק" + (n === 1300 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1200) return "תתת" + (n === 1200 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1100) return "תתש" + (n === 1100 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1e3) return "תתר" + (n === 1e3 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 900) return "תתק" + (n === 900 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 800) return "תת" + (n === 800 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 745) return "תש" + this.renderHebrewItem(n % 100);
    if (n >= 744) return "תשדמ";
    if (n >= 700) return "תש" + (n === 700 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 699) return "תר" + this.renderHebrewItem(n % 100);
    if (n >= 698) return "תרחצ";
    if (n >= 600) return "תר" + (n === 600 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 500) return "תק" + (n === 500 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 400) return "ת" + (n === 400 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 345) return "ש" + this.renderHebrewItem(n % 100);
    if (n >= 344) return "שדמ";
    if (n >= 305) return "ש" + this.renderHebrewItem(n % 100);
    if (n >= 304) return "דש";
    if (n >= 300) return "ש" + (n === 300 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 299) return "ר" + this.renderHebrewItem(n % 100);
    if (n >= 298) return "רחצ";
    if (n >= 200) return "ר" + (n === 200 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 100) return "ק" + (n === 100 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 90) return "צ" + (n === 90 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 80) return "פ" + (n === 80 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 70) return "ע" + (n === 70 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 60) return "ס" + (n === 60 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 50) return "נ" + (n === 50 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 40) return "מ" + (n === 40 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 30) return "ל" + (n === 30 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 20) return "כ" + (n === 20 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 17) return "י" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "טז";
    if (n >= 15) return "טו";
    if (n >= 10) return "י" + (n === 10 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 9) return "ט";
    if (n >= 8) return "ח";
    if (n >= 7) return "ז";
    if (n >= 6) return "ו";
    if (n >= 5) return "ה";
    if (n >= 4) return "ד";
    if (n >= 3) return "ג";
    if (n >= 2) return "ב";
    if (n >= 1) return "א";
    if (n >= 0) return "״";
};

inter.renderTamilThousands = function(n) {
    if (n >= 1e3) return this.renderTamilThousands(Math.floor(n / 1e3)) + "௲" + (n === 1e3 ? "" : this.renderTamilThousands(n % 1e3));
    if (n >= 0) return this.renderTamil(n);
};

inter.renderEthiopicP = function(n) {
    if (n >= 1e16) return this.renderEthiopicP(Math.floor(n / 1e16)) + "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 1e12) return this.renderEthiopicP(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1e8) return this.renderEthiopicP(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1e4) return this.renderEthiopicP(Math.floor(n / 1e4)) + "፼" + (n === 1e4 ? "" : this.renderEthiopicP(n % 1e4));
    if (n >= 1) return this.renderEthiopic(n);
};

inter.timeZones = [ {
    id: "Pacific/Midway",
    utcStandardOffsetSeconds: -39600,
    displayName: "Midway",
    countryId: "UM"
}, {
    id: "Pacific/Niue",
    regionId: "061",
    utcStandardOffsetSeconds: -39600,
    displayName: "Niue",
    countryId: "NU"
}, {
    id: "Pacific/Pago_Pago",
    regionId: "061",
    utcStandardOffsetSeconds: -39600,
    displayName: "Pago Pago",
    countryId: "AS"
}, {
    id: "America/Adak",
    regionId: "021",
    utcStandardOffsetSeconds: -36e3,
    displayName: "Adak",
    countryId: "US"
}, {
    id: "Pacific/Honolulu",
    regionId: "021",
    utcStandardOffsetSeconds: -36e3,
    displayName: "Honolulu",
    countryId: "US"
}, {
    id: "Pacific/Rarotonga",
    regionId: "061",
    utcStandardOffsetSeconds: -36e3,
    displayName: "Rarotonga",
    countryId: "CK"
}, {
    id: "Pacific/Tahiti",
    regionId: "061",
    utcStandardOffsetSeconds: -36e3,
    displayName: "Tahiti",
    countryId: "PF"
}, {
    id: "Pacific/Marquesas",
    regionId: "061",
    utcStandardOffsetSeconds: -34200,
    displayName: "Marquesas",
    countryId: "PF"
}, {
    id: "America/Anchorage",
    regionId: "021",
    utcStandardOffsetSeconds: -32400,
    displayName: "Anchorage",
    countryId: "US"
}, {
    id: "Pacific/Gambier",
    regionId: "061",
    utcStandardOffsetSeconds: -32400,
    displayName: "Gambier",
    countryId: "PF"
}, {
    id: "America/Juneau",
    regionId: "021",
    utcStandardOffsetSeconds: -32400,
    displayName: "Juneau",
    countryId: "US"
}, {
    id: "America/Metlakatla",
    regionId: "021",
    utcStandardOffsetSeconds: -32400,
    displayName: "Metlakatla",
    countryId: "US"
}, {
    id: "America/Nome",
    regionId: "021",
    utcStandardOffsetSeconds: -32400,
    displayName: "Nome",
    countryId: "US"
}, {
    id: "America/Sitka",
    regionId: "021",
    utcStandardOffsetSeconds: -32400,
    displayName: "Sitka",
    countryId: "US"
}, {
    id: "America/Yakutat",
    regionId: "021",
    utcStandardOffsetSeconds: -32400,
    displayName: "Yakutat",
    countryId: "US"
}, {
    id: "America/Los_Angeles",
    regionId: "021",
    utcStandardOffsetSeconds: -28800,
    displayName: "Los Angeles",
    countryId: "US"
}, {
    id: "Pacific/Pitcairn",
    regionId: "061",
    utcStandardOffsetSeconds: -28800,
    displayName: "Pitcairn",
    countryId: "PN"
}, {
    id: "America/Tijuana",
    regionId: "013",
    utcStandardOffsetSeconds: -28800,
    displayName: "Tijuana",
    countryId: "MX"
}, {
    id: "America/Vancouver",
    regionId: "021",
    utcStandardOffsetSeconds: -28800,
    displayName: "Vancouver",
    countryId: "CA"
}, {
    id: "America/Boise",
    regionId: "021",
    utcStandardOffsetSeconds: -25200,
    displayName: "Boise",
    countryId: "US"
}, {
    id: "America/Cambridge_Bay",
    regionId: "021",
    utcStandardOffsetSeconds: -25200,
    displayName: "Cambridge Bay",
    countryId: "CA"
}, {
    id: "America/Ciudad_Juarez",
    regionId: "013",
    utcStandardOffsetSeconds: -25200,
    displayName: "Ciudad Juarez",
    countryId: "MX"
}, {
    id: "America/Creston",
    regionId: "021",
    utcStandardOffsetSeconds: -25200,
    displayName: "Creston",
    countryId: "CA"
}, {
    id: "America/Dawson",
    regionId: "021",
    utcStandardOffsetSeconds: -25200,
    displayName: "Dawson",
    countryId: "CA"
}, {
    id: "America/Dawson_Creek",
    regionId: "021",
    utcStandardOffsetSeconds: -25200,
    displayName: "Dawson Creek",
    countryId: "CA"
}, {
    id: "America/Denver",
    regionId: "021",
    utcStandardOffsetSeconds: -25200,
    displayName: "Denver",
    countryId: "US"
}, {
    id: "America/Edmonton",
    regionId: "021",
    utcStandardOffsetSeconds: -25200,
    displayName: "Edmonton",
    countryId: "CA"
}, {
    id: "America/Fort_Nelson",
    regionId: "021",
    utcStandardOffsetSeconds: -25200,
    displayName: "Fort Nelson",
    countryId: "CA"
}, {
    id: "America/Hermosillo",
    regionId: "013",
    utcStandardOffsetSeconds: -25200,
    displayName: "Hermosillo",
    countryId: "MX"
}, {
    id: "America/Inuvik",
    regionId: "021",
    utcStandardOffsetSeconds: -25200,
    displayName: "Inuvik",
    countryId: "CA"
}, {
    id: "America/Mazatlan",
    regionId: "013",
    utcStandardOffsetSeconds: -25200,
    displayName: "Mazatlan",
    countryId: "MX"
}, {
    id: "America/Phoenix",
    regionId: "021",
    utcStandardOffsetSeconds: -25200,
    displayName: "Phoenix",
    countryId: "US"
}, {
    id: "America/Whitehorse",
    regionId: "021",
    utcStandardOffsetSeconds: -25200,
    displayName: "Whitehorse",
    countryId: "CA"
}, {
    id: "America/Yellowknife",
    regionId: "021",
    utcStandardOffsetSeconds: -25200,
    displayName: "Yellowknife",
    countryId: "CA"
}, {
    id: "America/Bahia_Banderas",
    regionId: "013",
    utcStandardOffsetSeconds: -21600,
    displayName: "Bahia Banderas",
    countryId: "MX"
}, {
    id: "America/Belize",
    regionId: "013",
    utcStandardOffsetSeconds: -21600,
    displayName: "Belize",
    countryId: "BZ"
}, {
    id: "America/North_Dakota/Beulah",
    regionId: "021",
    utcStandardOffsetSeconds: -21600,
    displayName: "Beulah, North Dakota",
    countryId: "US"
}, {
    id: "America/North_Dakota/Center",
    regionId: "021",
    utcStandardOffsetSeconds: -21600,
    displayName: "Center, North Dakota",
    countryId: "US"
}, {
    id: "America/Chicago",
    regionId: "021",
    utcStandardOffsetSeconds: -21600,
    displayName: "Chicago",
    countryId: "US"
}, {
    id: "America/Chihuahua",
    regionId: "013",
    utcStandardOffsetSeconds: -21600,
    displayName: "Chihuahua",
    countryId: "MX"
}, {
    id: "America/Costa_Rica",
    regionId: "013",
    utcStandardOffsetSeconds: -21600,
    displayName: "Costa Rica",
    countryId: "CR"
}, {
    id: "Pacific/Easter",
    regionId: "005",
    utcStandardOffsetSeconds: -21600,
    displayName: "Easter",
    countryId: "CL"
}, {
    id: "America/El_Salvador",
    regionId: "013",
    utcStandardOffsetSeconds: -21600,
    displayName: "El Salvador",
    countryId: "SV"
}, {
    id: "Pacific/Galapagos",
    regionId: "005",
    utcStandardOffsetSeconds: -21600,
    displayName: "Galapagos",
    countryId: "EC"
}, {
    id: "America/Guatemala",
    regionId: "013",
    utcStandardOffsetSeconds: -21600,
    displayName: "Guatemala",
    countryId: "GT"
}, {
    id: "America/Indiana/Knox",
    regionId: "021",
    utcStandardOffsetSeconds: -21600,
    displayName: "Knox, Indiana",
    countryId: "US"
}, {
    id: "America/Managua",
    regionId: "013",
    utcStandardOffsetSeconds: -21600,
    displayName: "Managua",
    countryId: "NI"
}, {
    id: "America/Matamoros",
    regionId: "013",
    utcStandardOffsetSeconds: -21600,
    displayName: "Matamoros",
    countryId: "MX"
}, {
    id: "America/Menominee",
    regionId: "021",
    utcStandardOffsetSeconds: -21600,
    displayName: "Menominee",
    countryId: "US"
}, {
    id: "America/Merida",
    regionId: "013",
    utcStandardOffsetSeconds: -21600,
    displayName: "Merida",
    countryId: "MX"
}, {
    id: "America/Mexico_City",
    regionId: "013",
    utcStandardOffsetSeconds: -21600,
    displayName: "Mexico City",
    countryId: "MX"
}, {
    id: "America/Monterrey",
    regionId: "013",
    utcStandardOffsetSeconds: -21600,
    displayName: "Monterrey",
    countryId: "MX"
}, {
    id: "America/North_Dakota/New_Salem",
    regionId: "021",
    utcStandardOffsetSeconds: -21600,
    displayName: "New Salem, North Dakota",
    countryId: "US"
}, {
    id: "America/Ojinaga",
    regionId: "013",
    utcStandardOffsetSeconds: -21600,
    displayName: "Ojinaga",
    countryId: "MX"
}, {
    id: "America/Rankin_Inlet",
    regionId: "021",
    utcStandardOffsetSeconds: -21600,
    displayName: "Rankin Inlet",
    countryId: "CA"
}, {
    id: "America/Regina",
    regionId: "021",
    utcStandardOffsetSeconds: -21600,
    displayName: "Regina",
    countryId: "CA"
}, {
    id: "America/Resolute",
    regionId: "021",
    utcStandardOffsetSeconds: -21600,
    displayName: "Resolute",
    countryId: "CA"
}, {
    id: "America/Swift_Current",
    regionId: "021",
    utcStandardOffsetSeconds: -21600,
    displayName: "Swift Current",
    countryId: "CA"
}, {
    id: "America/Tegucigalpa",
    regionId: "013",
    utcStandardOffsetSeconds: -21600,
    displayName: "Tegucigalpa",
    countryId: "HN"
}, {
    id: "America/Indiana/Tell_City",
    regionId: "021",
    utcStandardOffsetSeconds: -21600,
    displayName: "Tell City, Indiana",
    countryId: "US"
}, {
    id: "America/Winnipeg",
    regionId: "021",
    utcStandardOffsetSeconds: -21600,
    displayName: "Winnipeg",
    countryId: "CA"
}, {
    id: "America/Atikokan",
    regionId: "021",
    utcStandardOffsetSeconds: -18e3,
    displayName: "Atikokan",
    countryId: "CA"
}, {
    id: "America/Bogota",
    regionId: "005",
    utcStandardOffsetSeconds: -18e3,
    displayName: "Bogota",
    countryId: "CO"
}, {
    id: "America/Cancun",
    regionId: "013",
    utcStandardOffsetSeconds: -18e3,
    displayName: "Cancun",
    countryId: "MX"
}, {
    id: "America/Cayman",
    regionId: "029",
    utcStandardOffsetSeconds: -18e3,
    displayName: "Cayman",
    countryId: "KY"
}, {
    id: "America/Detroit",
    regionId: "021",
    utcStandardOffsetSeconds: -18e3,
    displayName: "Detroit",
    countryId: "US"
}, {
    id: "America/Eirunepe",
    regionId: "005",
    utcStandardOffsetSeconds: -18e3,
    displayName: "Eirunepe",
    countryId: "BR"
}, {
    id: "America/Grand_Turk",
    regionId: "029",
    utcStandardOffsetSeconds: -18e3,
    displayName: "Grand Turk",
    countryId: "TC"
}, {
    id: "America/Guayaquil",
    regionId: "005",
    utcStandardOffsetSeconds: -18e3,
    displayName: "Guayaquil",
    countryId: "EC"
}, {
    id: "America/Havana",
    regionId: "029",
    utcStandardOffsetSeconds: -18e3,
    displayName: "Havana",
    countryId: "CU"
}, {
    id: "America/Indiana/Indianapolis",
    regionId: "021",
    utcStandardOffsetSeconds: -18e3,
    displayName: "Indianapolis",
    countryId: "US"
}, {
    id: "America/Iqaluit",
    regionId: "021",
    utcStandardOffsetSeconds: -18e3,
    displayName: "Iqaluit",
    countryId: "CA"
}, {
    id: "America/Jamaica",
    regionId: "029",
    utcStandardOffsetSeconds: -18e3,
    displayName: "Jamaica",
    countryId: "JM"
}, {
    id: "America/Lima",
    regionId: "005",
    utcStandardOffsetSeconds: -18e3,
    displayName: "Lima",
    countryId: "PE"
}, {
    id: "America/Kentucky/Louisville",
    regionId: "021",
    utcStandardOffsetSeconds: -18e3,
    displayName: "Louisville",
    countryId: "US"
}, {
    id: "America/Indiana/Marengo",
    regionId: "021",
    utcStandardOffsetSeconds: -18e3,
    displayName: "Marengo, Indiana",
    countryId: "US"
}, {
    id: "America/Kentucky/Monticello",
    regionId: "021",
    utcStandardOffsetSeconds: -18e3,
    displayName: "Monticello, Kentucky",
    countryId: "US"
}, {
    id: "America/Nassau",
    regionId: "029",
    utcStandardOffsetSeconds: -18e3,
    displayName: "Nassau",
    countryId: "BS"
}, {
    id: "America/New_York",
    regionId: "021",
    utcStandardOffsetSeconds: -18e3,
    displayName: "New York",
    countryId: "US"
}, {
    id: "America/Panama",
    regionId: "013",
    utcStandardOffsetSeconds: -18e3,
    displayName: "Panama",
    countryId: "PA"
}, {
    id: "America/Indiana/Petersburg",
    regionId: "021",
    utcStandardOffsetSeconds: -18e3,
    displayName: "Petersburg, Indiana",
    countryId: "US"
}, {
    id: "America/Port-au-Prince",
    regionId: "029",
    utcStandardOffsetSeconds: -18e3,
    displayName: "Port-au-Prince",
    countryId: "HT"
}, {
    id: "America/Rio_Branco",
    regionId: "005",
    utcStandardOffsetSeconds: -18e3,
    displayName: "Rio Branco",
    countryId: "BR"
}, {
    id: "America/Toronto",
    regionId: "021",
    utcStandardOffsetSeconds: -18e3,
    displayName: "Toronto",
    countryId: "CA"
}, {
    id: "America/Indiana/Vevay",
    regionId: "021",
    utcStandardOffsetSeconds: -18e3,
    displayName: "Vevay, Indiana",
    countryId: "US"
}, {
    id: "America/Indiana/Vincennes",
    regionId: "021",
    utcStandardOffsetSeconds: -18e3,
    displayName: "Vincennes, Indiana",
    countryId: "US"
}, {
    id: "America/Indiana/Winamac",
    regionId: "021",
    utcStandardOffsetSeconds: -18e3,
    displayName: "Winamac, Indiana",
    countryId: "US"
}, {
    id: "America/Anguilla",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "Anguilla",
    countryId: "AI"
}, {
    id: "America/Antigua",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "Antigua",
    countryId: "AG"
}, {
    id: "America/Aruba",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "Aruba",
    countryId: "AW"
}, {
    id: "America/Asuncion",
    regionId: "005",
    utcStandardOffsetSeconds: -14400,
    displayName: "Asuncion",
    countryId: "PY"
}, {
    id: "America/Barbados",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "Barbados",
    countryId: "BB"
}, {
    id: "Atlantic/Bermuda",
    regionId: "021",
    utcStandardOffsetSeconds: -14400,
    displayName: "Bermuda",
    countryId: "BM"
}, {
    id: "America/Blanc-Sablon",
    regionId: "021",
    utcStandardOffsetSeconds: -14400,
    displayName: "Blanc-Sablon",
    countryId: "CA"
}, {
    id: "America/Boa_Vista",
    regionId: "005",
    utcStandardOffsetSeconds: -14400,
    displayName: "Boa Vista",
    countryId: "BR"
}, {
    id: "America/Campo_Grande",
    regionId: "005",
    utcStandardOffsetSeconds: -14400,
    displayName: "Campo Grande",
    countryId: "BR"
}, {
    id: "America/Caracas",
    regionId: "005",
    utcStandardOffsetSeconds: -14400,
    displayName: "Caracas",
    countryId: "VE"
}, {
    id: "America/Cuiaba",
    regionId: "005",
    utcStandardOffsetSeconds: -14400,
    displayName: "Cuiaba",
    countryId: "BR"
}, {
    id: "America/Curacao",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "Curacao",
    countryId: "CW"
}, {
    id: "America/Dominica",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "Dominica",
    countryId: "DM"
}, {
    id: "America/Glace_Bay",
    regionId: "021",
    utcStandardOffsetSeconds: -14400,
    displayName: "Glace Bay",
    countryId: "CA"
}, {
    id: "America/Goose_Bay",
    regionId: "021",
    utcStandardOffsetSeconds: -14400,
    displayName: "Goose Bay",
    countryId: "CA"
}, {
    id: "America/Grenada",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "Grenada",
    countryId: "GD"
}, {
    id: "America/Guadeloupe",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "Guadeloupe",
    countryId: "GP"
}, {
    id: "America/Guyana",
    regionId: "005",
    utcStandardOffsetSeconds: -14400,
    displayName: "Guyana",
    countryId: "GY"
}, {
    id: "America/Halifax",
    regionId: "021",
    utcStandardOffsetSeconds: -14400,
    displayName: "Halifax",
    countryId: "CA"
}, {
    id: "America/Kralendijk",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "Kralendijk",
    countryId: "BQ"
}, {
    id: "America/La_Paz",
    regionId: "005",
    utcStandardOffsetSeconds: -14400,
    displayName: "La Paz",
    countryId: "BO"
}, {
    id: "America/Lower_Princes",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "Lower Prince’s Quarter",
    countryId: "SX"
}, {
    id: "America/Manaus",
    regionId: "005",
    utcStandardOffsetSeconds: -14400,
    displayName: "Manaus",
    countryId: "BR"
}, {
    id: "America/Marigot",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "Marigot",
    countryId: "MF"
}, {
    id: "America/Martinique",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "Martinique",
    countryId: "MQ"
}, {
    id: "America/Moncton",
    regionId: "021",
    utcStandardOffsetSeconds: -14400,
    displayName: "Moncton",
    countryId: "CA"
}, {
    id: "America/Montserrat",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "Montserrat",
    countryId: "MS"
}, {
    id: "America/Port_of_Spain",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "Port of Spain",
    countryId: "TT"
}, {
    id: "America/Porto_Velho",
    regionId: "005",
    utcStandardOffsetSeconds: -14400,
    displayName: "Porto Velho",
    countryId: "BR"
}, {
    id: "America/Puerto_Rico",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "Puerto Rico",
    countryId: "PR"
}, {
    id: "America/Santiago",
    regionId: "005",
    utcStandardOffsetSeconds: -14400,
    displayName: "Santiago",
    countryId: "CL"
}, {
    id: "America/Santo_Domingo",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "Santo Domingo",
    countryId: "DO"
}, {
    id: "America/St_Barthelemy",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "St. Barthelemy",
    countryId: "BL"
}, {
    id: "America/St_Kitts",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "St. Kitts",
    countryId: "KN"
}, {
    id: "America/St_Lucia",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "St. Lucia",
    countryId: "LC"
}, {
    id: "America/St_Thomas",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "St. Thomas",
    countryId: "VI"
}, {
    id: "America/St_Vincent",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "St. Vincent",
    countryId: "VC"
}, {
    id: "America/Thule",
    regionId: "021",
    utcStandardOffsetSeconds: -14400,
    displayName: "Thule",
    countryId: "GL"
}, {
    id: "America/Tortola",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "Tortola",
    countryId: "VG"
}, {
    id: "America/St_Johns",
    regionId: "021",
    utcStandardOffsetSeconds: -12600,
    displayName: "St. John’s",
    countryId: "CA"
}, {
    id: "America/Araguaina",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "Araguaina",
    countryId: "BR"
}, {
    id: "America/Bahia",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "Bahia",
    countryId: "BR"
}, {
    id: "America/Belem",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "Belem",
    countryId: "BR"
}, {
    id: "America/Argentina/Buenos_Aires",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "Buenos Aires",
    countryId: "AR"
}, {
    id: "America/Argentina/Catamarca",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "Catamarca",
    countryId: "AR"
}, {
    id: "America/Cayenne",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "Cayenne",
    countryId: "GF"
}, {
    id: "America/Argentina/Cordoba",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "Cordoba",
    countryId: "AR"
}, {
    id: "America/Fortaleza",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "Fortaleza",
    countryId: "BR"
}, {
    id: "America/Argentina/Jujuy",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "Jujuy",
    countryId: "AR"
}, {
    id: "America/Argentina/La_Rioja",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "La Rioja",
    countryId: "AR"
}, {
    id: "America/Maceio",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "Maceio",
    countryId: "BR"
}, {
    id: "America/Argentina/Mendoza",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "Mendoza",
    countryId: "AR"
}, {
    id: "America/Miquelon",
    regionId: "021",
    utcStandardOffsetSeconds: -10800,
    displayName: "Miquelon",
    countryId: "PM"
}, {
    id: "America/Montevideo",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "Montevideo",
    countryId: "UY"
}, {
    id: "Antarctica/Palmer",
    utcStandardOffsetSeconds: -10800,
    displayName: "Palmer",
    countryId: "AQ"
}, {
    id: "America/Paramaribo",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "Paramaribo",
    countryId: "SR"
}, {
    id: "America/Punta_Arenas",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "Punta Arenas",
    countryId: "CL"
}, {
    id: "America/Recife",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "Recife",
    countryId: "BR"
}, {
    id: "America/Argentina/Rio_Gallegos",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "Rio Gallegos",
    countryId: "AR"
}, {
    id: "Antarctica/Rothera",
    utcStandardOffsetSeconds: -10800,
    displayName: "Rothera",
    countryId: "AQ"
}, {
    id: "America/Argentina/Salta",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "Salta",
    countryId: "AR"
}, {
    id: "America/Argentina/San_Juan",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "San Juan",
    countryId: "AR"
}, {
    id: "America/Argentina/San_Luis",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "San Luis",
    countryId: "AR"
}, {
    id: "America/Santarem",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "Santarem",
    countryId: "BR"
}, {
    id: "America/Sao_Paulo",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "Sao Paulo",
    countryId: "BR"
}, {
    id: "Atlantic/Stanley",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "Stanley",
    countryId: "FK"
}, {
    id: "America/Argentina/Tucuman",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "Tucuman",
    countryId: "AR"
}, {
    id: "America/Argentina/Ushuaia",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "Ushuaia",
    countryId: "AR"
}, {
    id: "America/Noronha",
    regionId: "005",
    utcStandardOffsetSeconds: -7200,
    displayName: "Noronha",
    countryId: "BR"
}, {
    id: "America/Nuuk",
    regionId: "021",
    utcStandardOffsetSeconds: -7200,
    displayName: "Nuuk",
    countryId: "GL"
}, {
    id: "Atlantic/South_Georgia",
    utcStandardOffsetSeconds: -7200,
    displayName: "South Georgia",
    countryId: "GS"
}, {
    id: "Atlantic/Azores",
    regionId: "039",
    utcStandardOffsetSeconds: -3600,
    displayName: "Azores",
    countryId: "PT"
}, {
    id: "Atlantic/Cape_Verde",
    regionId: "011",
    utcStandardOffsetSeconds: -3600,
    displayName: "Cape Verde",
    countryId: "CV"
}, {
    id: "America/Scoresbysund",
    regionId: "021",
    utcStandardOffsetSeconds: -3600,
    displayName: "Ittoqqortoormiit",
    countryId: "GL"
}, {
    id: "Africa/Abidjan",
    regionId: "011",
    utcStandardOffsetSeconds: 0,
    displayName: "Abidjan",
    countryId: "CI"
}, {
    id: "Africa/Accra",
    regionId: "011",
    utcStandardOffsetSeconds: 0,
    displayName: "Accra",
    countryId: "GH"
}, {
    id: "Africa/Bamako",
    regionId: "011",
    utcStandardOffsetSeconds: 0,
    displayName: "Bamako",
    countryId: "ML"
}, {
    id: "Africa/Banjul",
    regionId: "011",
    utcStandardOffsetSeconds: 0,
    displayName: "Banjul",
    countryId: "GM"
}, {
    id: "Africa/Bissau",
    regionId: "011",
    utcStandardOffsetSeconds: 0,
    displayName: "Bissau",
    countryId: "GW"
}, {
    id: "Atlantic/Canary",
    regionId: "039",
    utcStandardOffsetSeconds: 0,
    displayName: "Canary",
    countryId: "ES"
}, {
    id: "Africa/Conakry",
    regionId: "011",
    utcStandardOffsetSeconds: 0,
    displayName: "Conakry",
    countryId: "GN"
}, {
    id: "Africa/Dakar",
    regionId: "011",
    utcStandardOffsetSeconds: 0,
    displayName: "Dakar",
    countryId: "SN"
}, {
    id: "America/Danmarkshavn",
    regionId: "021",
    utcStandardOffsetSeconds: 0,
    displayName: "Danmarkshavn",
    countryId: "GL"
}, {
    id: "Europe/Dublin",
    regionId: "154",
    utcStandardOffsetSeconds: 0,
    displayName: "Dublin",
    countryId: "IE"
}, {
    id: "Atlantic/Faroe",
    regionId: "154",
    utcStandardOffsetSeconds: 0,
    displayName: "Faroe",
    countryId: "FO"
}, {
    id: "Africa/Freetown",
    regionId: "011",
    utcStandardOffsetSeconds: 0,
    displayName: "Freetown",
    countryId: "SL"
}, {
    id: "Europe/Guernsey",
    regionId: "154",
    utcStandardOffsetSeconds: 0,
    displayName: "Guernsey",
    countryId: "GG"
}, {
    id: "Europe/Isle_of_Man",
    regionId: "154",
    utcStandardOffsetSeconds: 0,
    displayName: "Isle of Man",
    countryId: "IM"
}, {
    id: "Europe/Jersey",
    regionId: "154",
    utcStandardOffsetSeconds: 0,
    displayName: "Jersey",
    countryId: "JE"
}, {
    id: "Europe/Lisbon",
    regionId: "039",
    utcStandardOffsetSeconds: 0,
    displayName: "Lisbon",
    countryId: "PT"
}, {
    id: "Africa/Lome",
    regionId: "011",
    utcStandardOffsetSeconds: 0,
    displayName: "Lome",
    countryId: "TG"
}, {
    id: "Europe/London",
    regionId: "154",
    utcStandardOffsetSeconds: 0,
    displayName: "London",
    countryId: "GB"
}, {
    id: "Atlantic/Madeira",
    regionId: "039",
    utcStandardOffsetSeconds: 0,
    displayName: "Madeira",
    countryId: "PT"
}, {
    id: "Africa/Monrovia",
    regionId: "011",
    utcStandardOffsetSeconds: 0,
    displayName: "Monrovia",
    countryId: "LR"
}, {
    id: "Africa/Nouakchott",
    regionId: "011",
    utcStandardOffsetSeconds: 0,
    displayName: "Nouakchott",
    countryId: "MR"
}, {
    id: "Africa/Ouagadougou",
    regionId: "011",
    utcStandardOffsetSeconds: 0,
    displayName: "Ouagadougou",
    countryId: "BF"
}, {
    id: "Atlantic/Reykjavik",
    regionId: "154",
    utcStandardOffsetSeconds: 0,
    displayName: "Reykjavik",
    countryId: "IS"
}, {
    id: "Africa/Sao_Tome",
    regionId: "017",
    utcStandardOffsetSeconds: 0,
    displayName: "Sao Tome",
    countryId: "ST"
}, {
    id: "Atlantic/St_Helena",
    regionId: "011",
    utcStandardOffsetSeconds: 0,
    displayName: "St. Helena",
    countryId: "SH"
}, {
    id: "Antarctica/Troll",
    utcStandardOffsetSeconds: 0,
    displayName: "Troll",
    countryId: "AQ"
}, {
    id: "Africa/Algiers",
    regionId: "015",
    utcStandardOffsetSeconds: 3600,
    displayName: "Algiers",
    countryId: "DZ"
}, {
    id: "Europe/Amsterdam",
    regionId: "155",
    utcStandardOffsetSeconds: 3600,
    displayName: "Amsterdam",
    countryId: "NL"
}, {
    id: "Europe/Andorra",
    regionId: "039",
    utcStandardOffsetSeconds: 3600,
    displayName: "Andorra",
    countryId: "AD"
}, {
    id: "Africa/Bangui",
    regionId: "017",
    utcStandardOffsetSeconds: 3600,
    displayName: "Bangui",
    countryId: "CF"
}, {
    id: "Europe/Belgrade",
    regionId: "039",
    utcStandardOffsetSeconds: 3600,
    displayName: "Belgrade",
    countryId: "RS"
}, {
    id: "Europe/Berlin",
    regionId: "155",
    utcStandardOffsetSeconds: 3600,
    displayName: "Berlin",
    countryId: "DE"
}, {
    id: "Europe/Bratislava",
    regionId: "151",
    utcStandardOffsetSeconds: 3600,
    displayName: "Bratislava",
    countryId: "SK"
}, {
    id: "Africa/Brazzaville",
    regionId: "017",
    utcStandardOffsetSeconds: 3600,
    displayName: "Brazzaville",
    countryId: "CG"
}, {
    id: "Europe/Brussels",
    regionId: "155",
    utcStandardOffsetSeconds: 3600,
    displayName: "Brussels",
    countryId: "BE"
}, {
    id: "Europe/Budapest",
    regionId: "151",
    utcStandardOffsetSeconds: 3600,
    displayName: "Budapest",
    countryId: "HU"
}, {
    id: "Europe/Busingen",
    regionId: "155",
    utcStandardOffsetSeconds: 3600,
    displayName: "Busingen",
    countryId: "DE"
}, {
    id: "Africa/Casablanca",
    regionId: "015",
    utcStandardOffsetSeconds: 3600,
    displayName: "Casablanca",
    countryId: "MA"
}, {
    id: "Africa/Ceuta",
    regionId: "039",
    utcStandardOffsetSeconds: 3600,
    displayName: "Ceuta",
    countryId: "ES"
}, {
    id: "Europe/Copenhagen",
    regionId: "154",
    utcStandardOffsetSeconds: 3600,
    displayName: "Copenhagen",
    countryId: "DK"
}, {
    id: "Africa/Douala",
    regionId: "017",
    utcStandardOffsetSeconds: 3600,
    displayName: "Douala",
    countryId: "CM"
}, {
    id: "Africa/El_Aaiun",
    regionId: "015",
    utcStandardOffsetSeconds: 3600,
    displayName: "El Aaiun",
    countryId: "EH"
}, {
    id: "Europe/Gibraltar",
    regionId: "039",
    utcStandardOffsetSeconds: 3600,
    displayName: "Gibraltar",
    countryId: "GI"
}, {
    id: "Africa/Kinshasa",
    regionId: "017",
    utcStandardOffsetSeconds: 3600,
    displayName: "Kinshasa",
    countryId: "CD"
}, {
    id: "Africa/Lagos",
    regionId: "011",
    utcStandardOffsetSeconds: 3600,
    displayName: "Lagos",
    countryId: "NG"
}, {
    id: "Africa/Libreville",
    regionId: "017",
    utcStandardOffsetSeconds: 3600,
    displayName: "Libreville",
    countryId: "GA"
}, {
    id: "Europe/Ljubljana",
    regionId: "039",
    utcStandardOffsetSeconds: 3600,
    displayName: "Ljubljana",
    countryId: "SI"
}, {
    id: "Arctic/Longyearbyen",
    regionId: "154",
    utcStandardOffsetSeconds: 3600,
    displayName: "Longyearbyen",
    countryId: "SJ"
}, {
    id: "Africa/Luanda",
    regionId: "017",
    utcStandardOffsetSeconds: 3600,
    displayName: "Luanda",
    countryId: "AO"
}, {
    id: "Europe/Luxembourg",
    regionId: "155",
    utcStandardOffsetSeconds: 3600,
    displayName: "Luxembourg",
    countryId: "LU"
}, {
    id: "Europe/Madrid",
    regionId: "039",
    utcStandardOffsetSeconds: 3600,
    displayName: "Madrid",
    countryId: "ES"
}, {
    id: "Africa/Malabo",
    regionId: "017",
    utcStandardOffsetSeconds: 3600,
    displayName: "Malabo",
    countryId: "GQ"
}, {
    id: "Europe/Malta",
    regionId: "039",
    utcStandardOffsetSeconds: 3600,
    displayName: "Malta",
    countryId: "MT"
}, {
    id: "Europe/Monaco",
    regionId: "155",
    utcStandardOffsetSeconds: 3600,
    displayName: "Monaco",
    countryId: "MC"
}, {
    id: "Africa/Ndjamena",
    regionId: "017",
    utcStandardOffsetSeconds: 3600,
    displayName: "Ndjamena",
    countryId: "TD"
}, {
    id: "Africa/Niamey",
    regionId: "011",
    utcStandardOffsetSeconds: 3600,
    displayName: "Niamey",
    countryId: "NE"
}, {
    id: "Europe/Oslo",
    regionId: "154",
    utcStandardOffsetSeconds: 3600,
    displayName: "Oslo",
    countryId: "NO"
}, {
    id: "Europe/Paris",
    regionId: "155",
    utcStandardOffsetSeconds: 3600,
    displayName: "Paris",
    countryId: "FR"
}, {
    id: "Europe/Podgorica",
    regionId: "039",
    utcStandardOffsetSeconds: 3600,
    displayName: "Podgorica",
    countryId: "ME"
}, {
    id: "Africa/Porto-Novo",
    regionId: "011",
    utcStandardOffsetSeconds: 3600,
    displayName: "Porto-Novo",
    countryId: "BJ"
}, {
    id: "Europe/Prague",
    regionId: "151",
    utcStandardOffsetSeconds: 3600,
    displayName: "Prague",
    countryId: "CZ"
}, {
    id: "Europe/Rome",
    regionId: "039",
    utcStandardOffsetSeconds: 3600,
    displayName: "Rome",
    countryId: "IT"
}, {
    id: "Europe/San_Marino",
    regionId: "039",
    utcStandardOffsetSeconds: 3600,
    displayName: "San Marino",
    countryId: "SM"
}, {
    id: "Europe/Sarajevo",
    regionId: "039",
    utcStandardOffsetSeconds: 3600,
    displayName: "Sarajevo",
    countryId: "BA"
}, {
    id: "Europe/Skopje",
    regionId: "039",
    utcStandardOffsetSeconds: 3600,
    displayName: "Skopje",
    countryId: "MK"
}, {
    id: "Europe/Stockholm",
    regionId: "154",
    utcStandardOffsetSeconds: 3600,
    displayName: "Stockholm",
    countryId: "SE"
}, {
    id: "Europe/Tirane",
    regionId: "039",
    utcStandardOffsetSeconds: 3600,
    displayName: "Tirane",
    countryId: "AL"
}, {
    id: "Africa/Tunis",
    regionId: "015",
    utcStandardOffsetSeconds: 3600,
    displayName: "Tunis",
    countryId: "TN"
}, {
    id: "Europe/Vaduz",
    regionId: "155",
    utcStandardOffsetSeconds: 3600,
    displayName: "Vaduz",
    countryId: "LI"
}, {
    id: "Europe/Vatican",
    regionId: "039",
    utcStandardOffsetSeconds: 3600,
    displayName: "Vatican",
    countryId: "VA"
}, {
    id: "Europe/Vienna",
    regionId: "155",
    utcStandardOffsetSeconds: 3600,
    displayName: "Vienna",
    countryId: "AT"
}, {
    id: "Europe/Warsaw",
    regionId: "151",
    utcStandardOffsetSeconds: 3600,
    displayName: "Warsaw",
    countryId: "PL"
}, {
    id: "Europe/Zagreb",
    regionId: "039",
    utcStandardOffsetSeconds: 3600,
    displayName: "Zagreb",
    countryId: "HR"
}, {
    id: "Europe/Zurich",
    regionId: "155",
    utcStandardOffsetSeconds: 3600,
    displayName: "Zurich",
    countryId: "CH"
}, {
    id: "Europe/Athens",
    regionId: "039",
    utcStandardOffsetSeconds: 7200,
    displayName: "Athens",
    countryId: "GR"
}, {
    id: "Asia/Beirut",
    regionId: "145",
    utcStandardOffsetSeconds: 7200,
    displayName: "Beirut",
    countryId: "LB"
}, {
    id: "Africa/Blantyre",
    regionId: "014",
    utcStandardOffsetSeconds: 7200,
    displayName: "Blantyre",
    countryId: "MW"
}, {
    id: "Europe/Bucharest",
    regionId: "151",
    utcStandardOffsetSeconds: 7200,
    displayName: "Bucharest",
    countryId: "RO"
}, {
    id: "Africa/Bujumbura",
    regionId: "014",
    utcStandardOffsetSeconds: 7200,
    displayName: "Bujumbura",
    countryId: "BI"
}, {
    id: "Africa/Cairo",
    regionId: "015",
    utcStandardOffsetSeconds: 7200,
    displayName: "Cairo",
    countryId: "EG"
}, {
    id: "Europe/Chisinau",
    regionId: "151",
    utcStandardOffsetSeconds: 7200,
    displayName: "Chisinau",
    countryId: "MD"
}, {
    id: "Asia/Famagusta",
    regionId: "145",
    utcStandardOffsetSeconds: 7200,
    displayName: "Famagusta",
    countryId: "CY"
}, {
    id: "Africa/Gaborone",
    regionId: "018",
    utcStandardOffsetSeconds: 7200,
    displayName: "Gaborone",
    countryId: "BW"
}, {
    id: "Asia/Gaza",
    regionId: "145",
    utcStandardOffsetSeconds: 7200,
    displayName: "Gaza",
    countryId: "PS"
}, {
    id: "Africa/Harare",
    regionId: "014",
    utcStandardOffsetSeconds: 7200,
    displayName: "Harare",
    countryId: "ZW"
}, {
    id: "Asia/Hebron",
    regionId: "145",
    utcStandardOffsetSeconds: 7200,
    displayName: "Hebron",
    countryId: "PS"
}, {
    id: "Europe/Helsinki",
    regionId: "154",
    utcStandardOffsetSeconds: 7200,
    displayName: "Helsinki",
    countryId: "FI"
}, {
    id: "Asia/Jerusalem",
    regionId: "145",
    utcStandardOffsetSeconds: 7200,
    displayName: "Jerusalem",
    countryId: "IL"
}, {
    id: "Africa/Johannesburg",
    regionId: "018",
    utcStandardOffsetSeconds: 7200,
    displayName: "Johannesburg",
    countryId: "ZA"
}, {
    id: "Africa/Juba",
    regionId: "014",
    utcStandardOffsetSeconds: 7200,
    displayName: "Juba",
    countryId: "SS"
}, {
    id: "Europe/Kaliningrad",
    regionId: "151",
    utcStandardOffsetSeconds: 7200,
    displayName: "Kaliningrad",
    countryId: "RU"
}, {
    id: "Africa/Khartoum",
    regionId: "015",
    utcStandardOffsetSeconds: 7200,
    displayName: "Khartoum",
    countryId: "SD"
}, {
    id: "Africa/Kigali",
    regionId: "014",
    utcStandardOffsetSeconds: 7200,
    displayName: "Kigali",
    countryId: "RW"
}, {
    id: "Europe/Kyiv",
    regionId: "151",
    utcStandardOffsetSeconds: 7200,
    displayName: "Kyiv",
    countryId: "UA"
}, {
    id: "Africa/Lubumbashi",
    regionId: "017",
    utcStandardOffsetSeconds: 7200,
    displayName: "Lubumbashi",
    countryId: "CD"
}, {
    id: "Africa/Lusaka",
    regionId: "014",
    utcStandardOffsetSeconds: 7200,
    displayName: "Lusaka",
    countryId: "ZM"
}, {
    id: "Africa/Maputo",
    regionId: "014",
    utcStandardOffsetSeconds: 7200,
    displayName: "Maputo",
    countryId: "MZ"
}, {
    id: "Europe/Mariehamn",
    regionId: "154",
    utcStandardOffsetSeconds: 7200,
    displayName: "Mariehamn",
    countryId: "AX"
}, {
    id: "Africa/Maseru",
    regionId: "018",
    utcStandardOffsetSeconds: 7200,
    displayName: "Maseru",
    countryId: "LS"
}, {
    id: "Africa/Mbabane",
    regionId: "018",
    utcStandardOffsetSeconds: 7200,
    displayName: "Mbabane",
    countryId: "SZ"
}, {
    id: "Asia/Nicosia",
    regionId: "145",
    utcStandardOffsetSeconds: 7200,
    displayName: "Nicosia",
    countryId: "CY"
}, {
    id: "Europe/Riga",
    regionId: "154",
    utcStandardOffsetSeconds: 7200,
    displayName: "Riga",
    countryId: "LV"
}, {
    id: "Europe/Sofia",
    regionId: "151",
    utcStandardOffsetSeconds: 7200,
    displayName: "Sofia",
    countryId: "BG"
}, {
    id: "Europe/Tallinn",
    regionId: "154",
    utcStandardOffsetSeconds: 7200,
    displayName: "Tallinn",
    countryId: "EE"
}, {
    id: "Africa/Tripoli",
    regionId: "015",
    utcStandardOffsetSeconds: 7200,
    displayName: "Tripoli",
    countryId: "LY"
}, {
    id: "Europe/Vilnius",
    regionId: "154",
    utcStandardOffsetSeconds: 7200,
    displayName: "Vilnius",
    countryId: "LT"
}, {
    id: "Africa/Windhoek",
    regionId: "018",
    utcStandardOffsetSeconds: 7200,
    displayName: "Windhoek",
    countryId: "NA"
}, {
    id: "Africa/Addis_Ababa",
    regionId: "014",
    utcStandardOffsetSeconds: 10800,
    displayName: "Addis Ababa",
    countryId: "ET"
}, {
    id: "Asia/Aden",
    regionId: "145",
    utcStandardOffsetSeconds: 10800,
    displayName: "Aden",
    countryId: "YE"
}, {
    id: "Asia/Amman",
    regionId: "145",
    utcStandardOffsetSeconds: 10800,
    displayName: "Amman",
    countryId: "JO"
}, {
    id: "Indian/Antananarivo",
    regionId: "014",
    utcStandardOffsetSeconds: 10800,
    displayName: "Antananarivo",
    countryId: "MG"
}, {
    id: "Africa/Asmara",
    regionId: "014",
    utcStandardOffsetSeconds: 10800,
    displayName: "Asmara",
    countryId: "ER"
}, {
    id: "Asia/Baghdad",
    regionId: "145",
    utcStandardOffsetSeconds: 10800,
    displayName: "Baghdad",
    countryId: "IQ"
}, {
    id: "Asia/Bahrain",
    regionId: "145",
    utcStandardOffsetSeconds: 10800,
    displayName: "Bahrain",
    countryId: "BH"
}, {
    id: "Indian/Comoro",
    regionId: "014",
    utcStandardOffsetSeconds: 10800,
    displayName: "Comoro",
    countryId: "KM"
}, {
    id: "Asia/Damascus",
    regionId: "145",
    utcStandardOffsetSeconds: 10800,
    displayName: "Damascus",
    countryId: "SY"
}, {
    id: "Africa/Dar_es_Salaam",
    regionId: "014",
    utcStandardOffsetSeconds: 10800,
    displayName: "Dar es Salaam",
    countryId: "TZ"
}, {
    id: "Africa/Djibouti",
    regionId: "014",
    utcStandardOffsetSeconds: 10800,
    displayName: "Djibouti",
    countryId: "DJ"
}, {
    id: "Europe/Istanbul",
    regionId: "145",
    utcStandardOffsetSeconds: 10800,
    displayName: "Istanbul",
    countryId: "TR"
}, {
    id: "Africa/Kampala",
    regionId: "014",
    utcStandardOffsetSeconds: 10800,
    displayName: "Kampala",
    countryId: "UG"
}, {
    id: "Europe/Kirov",
    regionId: "151",
    utcStandardOffsetSeconds: 10800,
    displayName: "Kirov",
    countryId: "RU"
}, {
    id: "Asia/Kuwait",
    regionId: "145",
    utcStandardOffsetSeconds: 10800,
    displayName: "Kuwait",
    countryId: "KW"
}, {
    id: "Indian/Mayotte",
    regionId: "014",
    utcStandardOffsetSeconds: 10800,
    displayName: "Mayotte",
    countryId: "YT"
}, {
    id: "Europe/Minsk",
    regionId: "151",
    utcStandardOffsetSeconds: 10800,
    displayName: "Minsk",
    countryId: "BY"
}, {
    id: "Africa/Mogadishu",
    regionId: "014",
    utcStandardOffsetSeconds: 10800,
    displayName: "Mogadishu",
    countryId: "SO"
}, {
    id: "Europe/Moscow",
    regionId: "151",
    utcStandardOffsetSeconds: 10800,
    displayName: "Moscow",
    countryId: "RU"
}, {
    id: "Africa/Nairobi",
    regionId: "014",
    utcStandardOffsetSeconds: 10800,
    displayName: "Nairobi",
    countryId: "KE"
}, {
    id: "Asia/Qatar",
    regionId: "145",
    utcStandardOffsetSeconds: 10800,
    displayName: "Qatar",
    countryId: "QA"
}, {
    id: "Asia/Riyadh",
    regionId: "145",
    utcStandardOffsetSeconds: 10800,
    displayName: "Riyadh",
    countryId: "SA"
}, {
    id: "Europe/Simferopol",
    regionId: "151",
    utcStandardOffsetSeconds: 10800,
    displayName: "Simferopol",
    countryId: "UA"
}, {
    id: "Antarctica/Syowa",
    utcStandardOffsetSeconds: 10800,
    displayName: "Syowa",
    countryId: "AQ"
}, {
    id: "Europe/Volgograd",
    regionId: "151",
    utcStandardOffsetSeconds: 10800,
    displayName: "Volgograd",
    countryId: "RU"
}, {
    id: "Asia/Tehran",
    regionId: "034",
    utcStandardOffsetSeconds: 12600,
    displayName: "Tehran",
    countryId: "IR"
}, {
    id: "Europe/Astrakhan",
    regionId: "151",
    utcStandardOffsetSeconds: 14400,
    displayName: "Astrakhan",
    countryId: "RU"
}, {
    id: "Asia/Baku",
    regionId: "145",
    utcStandardOffsetSeconds: 14400,
    displayName: "Baku",
    countryId: "AZ"
}, {
    id: "Asia/Dubai",
    regionId: "145",
    utcStandardOffsetSeconds: 14400,
    displayName: "Dubai",
    countryId: "AE"
}, {
    id: "Indian/Mahe",
    regionId: "014",
    utcStandardOffsetSeconds: 14400,
    displayName: "Mahe",
    countryId: "SC"
}, {
    id: "Indian/Mauritius",
    regionId: "014",
    utcStandardOffsetSeconds: 14400,
    displayName: "Mauritius",
    countryId: "MU"
}, {
    id: "Asia/Muscat",
    regionId: "145",
    utcStandardOffsetSeconds: 14400,
    displayName: "Muscat",
    countryId: "OM"
}, {
    id: "Indian/Reunion",
    regionId: "014",
    utcStandardOffsetSeconds: 14400,
    displayName: "Reunion",
    countryId: "RE"
}, {
    id: "Europe/Samara",
    regionId: "151",
    utcStandardOffsetSeconds: 14400,
    displayName: "Samara",
    countryId: "RU"
}, {
    id: "Europe/Saratov",
    regionId: "151",
    utcStandardOffsetSeconds: 14400,
    displayName: "Saratov",
    countryId: "RU"
}, {
    id: "Asia/Tbilisi",
    regionId: "145",
    utcStandardOffsetSeconds: 14400,
    displayName: "Tbilisi",
    countryId: "GE"
}, {
    id: "Europe/Ulyanovsk",
    regionId: "151",
    utcStandardOffsetSeconds: 14400,
    displayName: "Ulyanovsk",
    countryId: "RU"
}, {
    id: "Asia/Yerevan",
    regionId: "145",
    utcStandardOffsetSeconds: 14400,
    displayName: "Yerevan",
    countryId: "AM"
}, {
    id: "Asia/Kabul",
    regionId: "034",
    utcStandardOffsetSeconds: 16200,
    displayName: "Kabul",
    countryId: "AF"
}, {
    id: "Asia/Aqtau",
    regionId: "143",
    utcStandardOffsetSeconds: 18e3,
    displayName: "Aqtau",
    countryId: "KZ"
}, {
    id: "Asia/Aqtobe",
    regionId: "143",
    utcStandardOffsetSeconds: 18e3,
    displayName: "Aqtobe",
    countryId: "KZ"
}, {
    id: "Asia/Ashgabat",
    regionId: "143",
    utcStandardOffsetSeconds: 18e3,
    displayName: "Ashgabat",
    countryId: "TM"
}, {
    id: "Asia/Atyrau",
    regionId: "143",
    utcStandardOffsetSeconds: 18e3,
    displayName: "Atyrau",
    countryId: "KZ"
}, {
    id: "Asia/Dushanbe",
    regionId: "143",
    utcStandardOffsetSeconds: 18e3,
    displayName: "Dushanbe",
    countryId: "TJ"
}, {
    id: "Asia/Karachi",
    regionId: "034",
    utcStandardOffsetSeconds: 18e3,
    displayName: "Karachi",
    countryId: "PK"
}, {
    id: "Indian/Kerguelen",
    utcStandardOffsetSeconds: 18e3,
    displayName: "Kerguelen",
    countryId: "TF"
}, {
    id: "Indian/Maldives",
    regionId: "034",
    utcStandardOffsetSeconds: 18e3,
    displayName: "Maldives",
    countryId: "MV"
}, {
    id: "Antarctica/Mawson",
    utcStandardOffsetSeconds: 18e3,
    displayName: "Mawson",
    countryId: "AQ"
}, {
    id: "Asia/Oral",
    regionId: "143",
    utcStandardOffsetSeconds: 18e3,
    displayName: "Oral",
    countryId: "KZ"
}, {
    id: "Asia/Qyzylorda",
    regionId: "143",
    utcStandardOffsetSeconds: 18e3,
    displayName: "Qyzylorda",
    countryId: "KZ"
}, {
    id: "Asia/Samarkand",
    regionId: "143",
    utcStandardOffsetSeconds: 18e3,
    displayName: "Samarkand",
    countryId: "UZ"
}, {
    id: "Asia/Tashkent",
    regionId: "143",
    utcStandardOffsetSeconds: 18e3,
    displayName: "Tashkent",
    countryId: "UZ"
}, {
    id: "Asia/Yekaterinburg",
    regionId: "151",
    utcStandardOffsetSeconds: 18e3,
    displayName: "Yekaterinburg",
    countryId: "RU"
}, {
    id: "Asia/Colombo",
    regionId: "034",
    utcStandardOffsetSeconds: 19800,
    displayName: "Colombo",
    countryId: "LK"
}, {
    id: "Asia/Kolkata",
    regionId: "034",
    utcStandardOffsetSeconds: 19800,
    displayName: "Kolkata",
    countryId: "IN"
}, {
    id: "Asia/Kathmandu",
    regionId: "034",
    utcStandardOffsetSeconds: 20700,
    displayName: "Kathmandu",
    countryId: "NP"
}, {
    id: "Asia/Almaty",
    regionId: "143",
    utcStandardOffsetSeconds: 21600,
    displayName: "Almaty",
    countryId: "KZ"
}, {
    id: "Asia/Bishkek",
    regionId: "143",
    utcStandardOffsetSeconds: 21600,
    displayName: "Bishkek",
    countryId: "KG"
}, {
    id: "Indian/Chagos",
    utcStandardOffsetSeconds: 21600,
    displayName: "Chagos",
    countryId: "IO"
}, {
    id: "Asia/Dhaka",
    regionId: "034",
    utcStandardOffsetSeconds: 21600,
    displayName: "Dhaka",
    countryId: "BD"
}, {
    id: "Asia/Omsk",
    regionId: "151",
    utcStandardOffsetSeconds: 21600,
    displayName: "Omsk",
    countryId: "RU"
}, {
    id: "Asia/Qostanay",
    regionId: "143",
    utcStandardOffsetSeconds: 21600,
    displayName: "Qostanay",
    countryId: "KZ"
}, {
    id: "Asia/Thimphu",
    regionId: "034",
    utcStandardOffsetSeconds: 21600,
    displayName: "Thimphu",
    countryId: "BT"
}, {
    id: "Asia/Urumqi",
    regionId: "030",
    utcStandardOffsetSeconds: 21600,
    displayName: "Urumqi",
    countryId: "CN"
}, {
    id: "Antarctica/Vostok",
    utcStandardOffsetSeconds: 21600,
    displayName: "Vostok",
    countryId: "AQ"
}, {
    id: "Indian/Cocos",
    utcStandardOffsetSeconds: 23400,
    displayName: "Cocos",
    countryId: "CC"
}, {
    id: "Asia/Yangon",
    regionId: "035",
    utcStandardOffsetSeconds: 23400,
    displayName: "Yangon",
    countryId: "MM"
}, {
    id: "Asia/Bangkok",
    regionId: "035",
    utcStandardOffsetSeconds: 25200,
    displayName: "Bangkok",
    countryId: "TH"
}, {
    id: "Asia/Barnaul",
    regionId: "151",
    utcStandardOffsetSeconds: 25200,
    displayName: "Barnaul",
    countryId: "RU"
}, {
    id: "Indian/Christmas",
    utcStandardOffsetSeconds: 25200,
    displayName: "Christmas",
    countryId: "CX"
}, {
    id: "Antarctica/Davis",
    utcStandardOffsetSeconds: 25200,
    displayName: "Davis",
    countryId: "AQ"
}, {
    id: "Asia/Ho_Chi_Minh",
    regionId: "035",
    utcStandardOffsetSeconds: 25200,
    displayName: "Ho Chi Minh",
    countryId: "VN"
}, {
    id: "Asia/Hovd",
    regionId: "030",
    utcStandardOffsetSeconds: 25200,
    displayName: "Hovd",
    countryId: "MN"
}, {
    id: "Asia/Jakarta",
    regionId: "035",
    utcStandardOffsetSeconds: 25200,
    displayName: "Jakarta",
    countryId: "ID"
}, {
    id: "Asia/Krasnoyarsk",
    regionId: "151",
    utcStandardOffsetSeconds: 25200,
    displayName: "Krasnoyarsk",
    countryId: "RU"
}, {
    id: "Asia/Novokuznetsk",
    regionId: "151",
    utcStandardOffsetSeconds: 25200,
    displayName: "Novokuznetsk",
    countryId: "RU"
}, {
    id: "Asia/Novosibirsk",
    regionId: "151",
    utcStandardOffsetSeconds: 25200,
    displayName: "Novosibirsk",
    countryId: "RU"
}, {
    id: "Asia/Phnom_Penh",
    regionId: "035",
    utcStandardOffsetSeconds: 25200,
    displayName: "Phnom Penh",
    countryId: "KH"
}, {
    id: "Asia/Pontianak",
    regionId: "035",
    utcStandardOffsetSeconds: 25200,
    displayName: "Pontianak",
    countryId: "ID"
}, {
    id: "Asia/Tomsk",
    regionId: "151",
    utcStandardOffsetSeconds: 25200,
    displayName: "Tomsk",
    countryId: "RU"
}, {
    id: "Asia/Vientiane",
    regionId: "035",
    utcStandardOffsetSeconds: 25200,
    displayName: "Vientiane",
    countryId: "LA"
}, {
    id: "Asia/Brunei",
    regionId: "035",
    utcStandardOffsetSeconds: 28800,
    displayName: "Brunei",
    countryId: "BN"
}, {
    id: "Asia/Choibalsan",
    regionId: "030",
    utcStandardOffsetSeconds: 28800,
    displayName: "Choibalsan",
    countryId: "MN"
}, {
    id: "Asia/Hong_Kong",
    regionId: "030",
    utcStandardOffsetSeconds: 28800,
    displayName: "Hong Kong",
    countryId: "HK"
}, {
    id: "Asia/Irkutsk",
    regionId: "151",
    utcStandardOffsetSeconds: 28800,
    displayName: "Irkutsk",
    countryId: "RU"
}, {
    id: "Asia/Kuala_Lumpur",
    regionId: "035",
    utcStandardOffsetSeconds: 28800,
    displayName: "Kuala Lumpur",
    countryId: "MY"
}, {
    id: "Asia/Kuching",
    regionId: "035",
    utcStandardOffsetSeconds: 28800,
    displayName: "Kuching",
    countryId: "MY"
}, {
    id: "Asia/Macau",
    regionId: "030",
    utcStandardOffsetSeconds: 28800,
    displayName: "Macau",
    countryId: "MO"
}, {
    id: "Asia/Makassar",
    regionId: "035",
    utcStandardOffsetSeconds: 28800,
    displayName: "Makassar",
    countryId: "ID"
}, {
    id: "Asia/Manila",
    regionId: "035",
    utcStandardOffsetSeconds: 28800,
    displayName: "Manila",
    countryId: "PH"
}, {
    id: "Australia/Perth",
    regionId: "053",
    utcStandardOffsetSeconds: 28800,
    displayName: "Perth",
    countryId: "AU"
}, {
    id: "Asia/Shanghai",
    regionId: "030",
    utcStandardOffsetSeconds: 28800,
    displayName: "Shanghai",
    countryId: "CN"
}, {
    id: "Asia/Singapore",
    regionId: "035",
    utcStandardOffsetSeconds: 28800,
    displayName: "Singapore",
    countryId: "SG"
}, {
    id: "Asia/Taipei",
    regionId: "030",
    utcStandardOffsetSeconds: 28800,
    displayName: "Taipei",
    countryId: "TW"
}, {
    id: "Asia/Ulaanbaatar",
    regionId: "030",
    utcStandardOffsetSeconds: 28800,
    displayName: "Ulaanbaatar",
    countryId: "MN"
}, {
    id: "Australia/Eucla",
    regionId: "053",
    utcStandardOffsetSeconds: 31500,
    displayName: "Eucla",
    countryId: "AU"
}, {
    id: "Asia/Chita",
    regionId: "151",
    utcStandardOffsetSeconds: 32400,
    displayName: "Chita",
    countryId: "RU"
}, {
    id: "Asia/Dili",
    regionId: "035",
    utcStandardOffsetSeconds: 32400,
    displayName: "Dili",
    countryId: "TL"
}, {
    id: "Asia/Jayapura",
    regionId: "035",
    utcStandardOffsetSeconds: 32400,
    displayName: "Jayapura",
    countryId: "ID"
}, {
    id: "Asia/Khandyga",
    regionId: "151",
    utcStandardOffsetSeconds: 32400,
    displayName: "Khandyga",
    countryId: "RU"
}, {
    id: "Pacific/Palau",
    regionId: "057",
    utcStandardOffsetSeconds: 32400,
    displayName: "Palau",
    countryId: "PW"
}, {
    id: "Asia/Pyongyang",
    regionId: "030",
    utcStandardOffsetSeconds: 32400,
    displayName: "Pyongyang",
    countryId: "KP"
}, {
    id: "Asia/Seoul",
    regionId: "030",
    utcStandardOffsetSeconds: 32400,
    displayName: "Seoul",
    countryId: "KR"
}, {
    id: "Asia/Tokyo",
    regionId: "030",
    utcStandardOffsetSeconds: 32400,
    displayName: "Tokyo",
    countryId: "JP"
}, {
    id: "Asia/Yakutsk",
    regionId: "151",
    utcStandardOffsetSeconds: 32400,
    displayName: "Yakutsk",
    countryId: "RU"
}, {
    id: "Australia/Adelaide",
    regionId: "053",
    utcStandardOffsetSeconds: 34200,
    displayName: "Adelaide",
    countryId: "AU"
}, {
    id: "Australia/Broken_Hill",
    regionId: "053",
    utcStandardOffsetSeconds: 34200,
    displayName: "Broken Hill",
    countryId: "AU"
}, {
    id: "Australia/Darwin",
    regionId: "053",
    utcStandardOffsetSeconds: 34200,
    displayName: "Darwin",
    countryId: "AU"
}, {
    id: "Australia/Brisbane",
    regionId: "053",
    utcStandardOffsetSeconds: 36e3,
    displayName: "Brisbane",
    countryId: "AU"
}, {
    id: "Pacific/Chuuk",
    regionId: "057",
    utcStandardOffsetSeconds: 36e3,
    displayName: "Chuuk",
    countryId: "FM"
}, {
    id: "Antarctica/DumontDUrville",
    utcStandardOffsetSeconds: 36e3,
    displayName: "Dumont d’Urville",
    countryId: "AQ"
}, {
    id: "Pacific/Guam",
    regionId: "057",
    utcStandardOffsetSeconds: 36e3,
    displayName: "Guam",
    countryId: "GU"
}, {
    id: "Australia/Hobart",
    regionId: "053",
    utcStandardOffsetSeconds: 36e3,
    displayName: "Hobart",
    countryId: "AU"
}, {
    id: "Australia/Lindeman",
    regionId: "053",
    utcStandardOffsetSeconds: 36e3,
    displayName: "Lindeman",
    countryId: "AU"
}, {
    id: "Antarctica/Macquarie",
    regionId: "053",
    utcStandardOffsetSeconds: 36e3,
    displayName: "Macquarie",
    countryId: "AU"
}, {
    id: "Australia/Melbourne",
    regionId: "053",
    utcStandardOffsetSeconds: 36e3,
    displayName: "Melbourne",
    countryId: "AU"
}, {
    id: "Pacific/Port_Moresby",
    regionId: "054",
    utcStandardOffsetSeconds: 36e3,
    displayName: "Port Moresby",
    countryId: "PG"
}, {
    id: "Pacific/Saipan",
    regionId: "057",
    utcStandardOffsetSeconds: 36e3,
    displayName: "Saipan",
    countryId: "MP"
}, {
    id: "Australia/Sydney",
    regionId: "053",
    utcStandardOffsetSeconds: 36e3,
    displayName: "Sydney",
    countryId: "AU"
}, {
    id: "Asia/Ust-Nera",
    regionId: "151",
    utcStandardOffsetSeconds: 36e3,
    displayName: "Ust-Nera",
    countryId: "RU"
}, {
    id: "Asia/Vladivostok",
    regionId: "151",
    utcStandardOffsetSeconds: 36e3,
    displayName: "Vladivostok",
    countryId: "RU"
}, {
    id: "Australia/Lord_Howe",
    regionId: "053",
    utcStandardOffsetSeconds: 37800,
    displayName: "Lord Howe",
    countryId: "AU"
}, {
    id: "Pacific/Bougainville",
    regionId: "054",
    utcStandardOffsetSeconds: 39600,
    displayName: "Bougainville",
    countryId: "PG"
}, {
    id: "Antarctica/Casey",
    utcStandardOffsetSeconds: 39600,
    displayName: "Casey",
    countryId: "AQ"
}, {
    id: "Pacific/Efate",
    regionId: "054",
    utcStandardOffsetSeconds: 39600,
    displayName: "Efate",
    countryId: "VU"
}, {
    id: "Pacific/Guadalcanal",
    regionId: "054",
    utcStandardOffsetSeconds: 39600,
    displayName: "Guadalcanal",
    countryId: "SB"
}, {
    id: "Pacific/Kosrae",
    regionId: "057",
    utcStandardOffsetSeconds: 39600,
    displayName: "Kosrae",
    countryId: "FM"
}, {
    id: "Asia/Magadan",
    regionId: "151",
    utcStandardOffsetSeconds: 39600,
    displayName: "Magadan",
    countryId: "RU"
}, {
    id: "Pacific/Norfolk",
    regionId: "053",
    utcStandardOffsetSeconds: 39600,
    displayName: "Norfolk",
    countryId: "NF"
}, {
    id: "Pacific/Noumea",
    regionId: "054",
    utcStandardOffsetSeconds: 39600,
    displayName: "Noumea",
    countryId: "NC"
}, {
    id: "Pacific/Pohnpei",
    regionId: "057",
    utcStandardOffsetSeconds: 39600,
    displayName: "Pohnpei",
    countryId: "FM"
}, {
    id: "Asia/Sakhalin",
    regionId: "151",
    utcStandardOffsetSeconds: 39600,
    displayName: "Sakhalin",
    countryId: "RU"
}, {
    id: "Asia/Srednekolymsk",
    regionId: "151",
    utcStandardOffsetSeconds: 39600,
    displayName: "Srednekolymsk",
    countryId: "RU"
}, {
    id: "Asia/Anadyr",
    regionId: "151",
    utcStandardOffsetSeconds: 43200,
    displayName: "Anadyr",
    countryId: "RU"
}, {
    id: "Pacific/Auckland",
    regionId: "053",
    utcStandardOffsetSeconds: 43200,
    displayName: "Auckland",
    countryId: "NZ"
}, {
    id: "Pacific/Fiji",
    regionId: "054",
    utcStandardOffsetSeconds: 43200,
    displayName: "Fiji",
    countryId: "FJ"
}, {
    id: "Pacific/Funafuti",
    regionId: "061",
    utcStandardOffsetSeconds: 43200,
    displayName: "Funafuti",
    countryId: "TV"
}, {
    id: "Asia/Kamchatka",
    regionId: "151",
    utcStandardOffsetSeconds: 43200,
    displayName: "Kamchatka",
    countryId: "RU"
}, {
    id: "Pacific/Kwajalein",
    regionId: "057",
    utcStandardOffsetSeconds: 43200,
    displayName: "Kwajalein",
    countryId: "MH"
}, {
    id: "Pacific/Majuro",
    regionId: "057",
    utcStandardOffsetSeconds: 43200,
    displayName: "Majuro",
    countryId: "MH"
}, {
    id: "Antarctica/McMurdo",
    utcStandardOffsetSeconds: 43200,
    displayName: "McMurdo",
    countryId: "AQ"
}, {
    id: "Pacific/Nauru",
    regionId: "057",
    utcStandardOffsetSeconds: 43200,
    displayName: "Nauru",
    countryId: "NR"
}, {
    id: "Pacific/Tarawa",
    regionId: "057",
    utcStandardOffsetSeconds: 43200,
    displayName: "Tarawa",
    countryId: "KI"
}, {
    id: "Pacific/Wake",
    utcStandardOffsetSeconds: 43200,
    displayName: "Wake",
    countryId: "UM"
}, {
    id: "Pacific/Wallis",
    regionId: "061",
    utcStandardOffsetSeconds: 43200,
    displayName: "Wallis",
    countryId: "WF"
}, {
    id: "Pacific/Chatham",
    regionId: "053",
    utcStandardOffsetSeconds: 45900,
    displayName: "Chatham",
    countryId: "NZ"
}, {
    id: "Pacific/Apia",
    regionId: "061",
    utcStandardOffsetSeconds: 46800,
    displayName: "Apia",
    countryId: "WS"
}, {
    id: "Pacific/Fakaofo",
    regionId: "061",
    utcStandardOffsetSeconds: 46800,
    displayName: "Fakaofo",
    countryId: "TK"
}, {
    id: "Pacific/Kanton",
    regionId: "057",
    utcStandardOffsetSeconds: 46800,
    displayName: "Kanton",
    countryId: "KI"
}, {
    id: "Pacific/Tongatapu",
    regionId: "061",
    utcStandardOffsetSeconds: 46800,
    displayName: "Tongatapu",
    countryId: "TO"
}, {
    id: "Pacific/Kiritimati",
    regionId: "057",
    utcStandardOffsetSeconds: 50400,
    displayName: "Kiritimati",
    countryId: "KI"
} ];

inter.territories = [];

inter.regions = [];

inter.countries = [];

inter.languages = [];

inter.scripts = [];

inter.currencies = [];

function normalizeLocaleId(localeId) {
    return localeId && localeId.replace(/-/g, "_").toLowerCase();
}

inter.load = function(localeId) {
    return require("./" + normalizeLocaleId(localeId));
};

module.exports = inter;