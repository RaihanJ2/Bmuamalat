function defaults(targetObj) {
    for (var i = 1; i < arguments.length; i += 1) {
        if (arguments[i] && typeof arguments[i] === "object") {
            for (var propertyName in arguments[i]) {
                if (typeof targetObj[propertyName] === "undefined") {
                    targetObj[propertyName] = arguments[i][propertyName];
                }
            }
        }
    }
    return targetObj;
}

var P = require("./root.js"), inter = defaults({
    renderers: {}
}, P);

var _ir3m1 = {
    "default": "#,##0 %"
}, _ir3m2 = [ "T1", "T2", "T3", "T4" ], _ir3m3 = {
    all: {
        leap: "{0}bis"
    }
}, _ir3m4 = {
    one: "0 K",
    other: "0 K"
}, _ir3m5 = {
    one: "0 M",
    other: "0 M"
}, _ir3m6 = {
    one: "0 B",
    other: "0 B"
}, _ir3m7 = {
    one: "{0}°",
    other: "{0}°"
}, _ir3m8 = {
    one: "{0}m",
    other: "{0}m"
}, _ir3m9 = {
    one: "00 K",
    other: "00 K"
}, _ir3m10 = {
    one: "00 M",
    other: "00 M"
}, _ir3m11 = {
    one: "00 B",
    other: "00 B"
}, _ir3m12 = {
    a: "h a – h a",
    h: "h–h a"
}, _ir3m13 = {
    d: "d/M–d/M",
    M: "d/M–d/M"
}, _ir3m14 = {
    one: "{0} c",
    other: "{0} c"
}, _ir3m15 = {
    one: "0 mil",
    other: "0 mil"
}, _ir3m16 = {
    one: "000 K",
    other: "000 K"
}, _ir3m17 = {
    one: "000 M",
    other: "000 M"
}, _ir3m18 = {
    one: "000 B",
    other: "000 B"
}, _ir3m19 = {
    one: "0 K ¤",
    other: "0 K ¤"
}, _ir3m20 = {
    one: "0 M ¤",
    other: "0 M ¤"
}, _ir3m21 = {
    one: "0 B ¤",
    other: "0 B ¤"
}, _ir3m22 = {
    displayName: "a. m./p. m."
}, _ir3m23 = {
    displayName: "zona horaria"
}, _ir3m24 = [ "antes de R.O.C.", "R.O.C." ], _ir3m25 = {
    one: "00 mil",
    other: "00 mil"
}, _ir3m26 = {
    one: "0000 M",
    other: "0000 M"
}, _ir3m27 = {
    one: "00 MRD",
    other: "00 MRD"
}, _ir3m28 = {
    one: "00 K ¤",
    other: "00 K ¤"
}, _ir3m29 = {
    one: "00 M ¤",
    other: "00 M ¤"
}, _ir3m30 = {
    one: "00 B ¤",
    other: "00 B ¤"
}, _ir3m31 = {
    a: "h a – h a v",
    h: "h–h a v"
}, _ir3m32 = {
    M: "M/y–M/y G",
    y: "M/y–M/y G"
}, _ir3m33 = [ "D", "L", "M", "X", "J", "V", "S" ], _ir3m34 = {
    one: "{0} cal",
    other: "{0} cal"
}, _ir3m35 = {
    one: "000 mil",
    other: "000 mil"
}, _ir3m36 = {
    one: "000 MRD",
    other: "000 MRD"
}, _ir3m37 = {
    one: "000 K ¤",
    other: "000 K ¤"
}, _ir3m38 = {
    one: "000 M ¤",
    other: "000 M ¤"
}, _ir3m39 = {
    one: "000 B ¤",
    other: "000 B ¤"
}, _ir3m40 = {
    d: "MMM d–d",
    M: "MMM d – MMM d"
}, _ir3m41 = {
    displayName: "día de la semana"
}, _ir3m42 = {
    wide: [ "AH" ],
    abbreviated: [ "AH" ]
}, _ir3m43 = {
    one: "0000 M ¤",
    other: "0000 M ¤"
}, _ir3m44 = {
    one: "00 MRD ¤",
    other: "00 MRD ¤"
}, _ir3m45 = {
    H: "HH:mm–HH:mm",
    m: "HH:mm–HH:mm"
}, _ir3m46 = {
    M: "y-MM – y-MM",
    y: "y-MM – y-MM"
}, _ir3m47 = {
    M: "U MMM–MMM",
    y: "U MMM – U MMM"
}, _ir3m48 = {
    one: "0 millón",
    other: "0 millones"
}, _ir3m49 = {
    one: "0 billón",
    other: "0 billones"
}, _ir3m50 = {
    one: "000 MRD ¤",
    other: "000 MRD ¤"
}, _ir3m51 = [ "DO", "LU", "MA", "MI", "JU", "VI", "SA" ], _ir3m52 = {
    H: "HH:mm – HH:mm",
    m: "HH:mm – HH:mm"
}, _ir3m53 = {
    one: "hace {0} a",
    other: "hace {0} a"
}, _ir3m54 = {
    one: "hace {0} m",
    other: "hace {0} m"
}, _ir3m55 = {
    one: "hace {0} h",
    other: "hace {0} h"
}, _ir3m56 = {
    one: "hace {0} s",
    other: "hace {0} s"
}, _ir3m57 = {
    H: "HH:mm–HH:mm v",
    m: "HH:mm–HH:mm v"
}, _ir3m58 = {
    d: "MM-dd – MM-dd",
    M: "MM-dd – MM-dd"
}, _ir3m59 = {
    M: "U MMMM–MMMM",
    y: "U MMMM – U MMMM"
}, _ir3m60 = {
    one: "00 millones",
    other: "00 millones"
}, _ir3m61 = {
    one: "00 billones",
    other: "00 billones"
}, _ir3m62 = {
    one: "{0} quilate",
    other: "{0} quilates"
}, _ir3m63 = {
    one: "{0} caloría",
    other: "{0} calorías"
}, _ir3m64 = {
    one: "000 millones",
    other: "000 millones"
}, _ir3m65 = {
    one: "000 billones",
    other: "000 billones"
}, _ir3m66 = {
    H: "HH:mm – HH:mm v",
    m: "HH:mm – HH:mm v"
}, _ir3m67 = {
    d: "E, d/M – E, d/M",
    M: "E, d/M – E, d/M"
}, _ir3m68 = {
    one: "hace {0} min",
    other: "hace {0} min"
}, _ir3m69 = {
    one: "hace {0} año",
    other: "hace {0} años"
}, _ir3m70 = {
    one: "hace {0} día",
    other: "hace {0} días"
}, _ir3m71 = {
    one: "hace {0} mes",
    other: "hace {0} meses"
}, _ir3m72 = {
    one: "hace {0} sem.",
    other: "hace {0} sem."
}, _ir3m73 = {
    one: "hace {0} hora",
    other: "hace {0} horas"
}, _ir3m74 = {
    one: "0 mil millones",
    other: "0 mil millones"
}, _ir3m75 = {
    one: "hace {0} trim.",
    other: "hace {0} trim."
}, _ir3m76 = {
    d: "d–d 'de' MMM",
    M: "d 'de' MMM – d 'de' MMM"
}, _ir3m77 = {
    one: "00 mil millones",
    other: "00 mil millones"
}, _ir3m78 = {
    one: "dentro de {0} a",
    other: "dentro de {0} a"
}, _ir3m79 = {
    one: "dentro de {0} m",
    other: "dentro de {0} m"
}, _ir3m80 = {
    one: "dentro de {0} h",
    other: "dentro de {0} h"
}, _ir3m81 = {
    one: "dentro de {0} s",
    other: "dentro de {0} s"
}, _ir3m82 = {
    one: "hace {0} semana",
    other: "hace {0} semanas"
}, _ir3m83 = {
    one: "hace {0} minuto",
    other: "hace {0} minutos"
}, _ir3m84 = {
    one: "000 mil millones",
    other: "000 mil millones"
}, _ir3m85 = [ "E", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D" ], _ir3m86 = {
    d: "MM-dd, E – MM-dd, E",
    M: "MM-dd, E – MM-dd, E"
}, _ir3m87 = {
    d: "MMM d, E – MMM d, E",
    M: "MMM d, E – MMM d, E"
}, _ir3m88 = {
    id: "001",
    displayName: "Mundo",
    hasTimeZones: false
}, _ir3m89 = [ "dom.", "lun.", "mar.", "mié.", "jue.", "vie.", "sáb." ], _ir3m90 = {
    one: "hace {0} segundo",
    other: "hace {0} segundos"
}, _ir3m91 = {
    wide: [ "ERA0", "ERA1" ],
    abbreviated: [ "ERA0", "ERA1" ]
}, _ir3m92 = {
    one: "dentro de {0} min",
    other: "dentro de {0} min"
}, _ir3m93 = {
    "0": "este DO",
    "1": "el próximo DO",
    "-1": "el DO pasado"
}, _ir3m94 = {
    "0": "este LU",
    "1": "el próximo LU",
    "-1": "el LU pasado"
}, _ir3m95 = {
    "0": "este MA",
    "1": "el próximo MA",
    "-1": "el MA pasado"
}, _ir3m96 = {
    "0": "este MI",
    "1": "el próximo MI",
    "-1": "el MI pasado"
}, _ir3m97 = {
    "0": "este JU",
    "1": "el próximo JU",
    "-1": "el JU pasado"
}, _ir3m98 = {
    "0": "este VI",
    "1": "el próximo VI",
    "-1": "el VI pasado"
}, _ir3m99 = {
    "0": "este SA",
    "1": "el próximo SA",
    "-1": "el SA pasado"
}, _ir3m100 = {
    id: "AQ",
    displayName: "Antártida",
    hasTimeZones: true
}, _ir3m101 = {
    id: "IC",
    displayName: "Canarias",
    hasTimeZones: false
}, _ir3m102 = {
    M: "MMM–MMM 'de' y G",
    y: "MMM 'de' y – MMM 'de' y G"
}, _ir3m103 = {
    one: "dentro de {0} año",
    other: "dentro de {0} años"
}, _ir3m104 = {
    one: "dentro de {0} día",
    other: "dentro de {0} días"
}, _ir3m105 = [ "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" ], _ir3m106 = {
    one: "dentro de {0} mes",
    other: "dentro de {0} meses"
}, _ir3m107 = {
    one: "dentro de {0} sem.",
    other: "dentro de {0} sem."
}, _ir3m108 = {
    a: "h:mm a – h:mm a",
    h: "h:mm–h:mm a",
    m: "h:mm–h:mm a"
}, _ir3m109 = {
    id: "CC",
    displayName: "Islas Cocos",
    hasTimeZones: true
}, _ir3m110 = {
    "0": "este año",
    "1": "el próximo año",
    "-1": "el año pasado"
}, _ir3m111 = {
    one: "hace {0} trimestre",
    other: "hace {0} trimestres"
}, _ir3m112 = {
    "0": "este mes",
    "1": "el próximo mes",
    "-1": "el mes pasado"
}, _ir3m113 = {
    one: "dentro de {0} hora",
    other: "dentro de {0} horas"
}, _ir3m114 = {
    id: "BV",
    displayName: "Isla Bouvet",
    hasTimeZones: false
}, _ir3m115 = {
    d: "d/M/y–d/M/y G",
    M: "d/M/y–d/M/y G",
    y: "d/M/y–d/M/y G"
}, _ir3m116 = {
    "0": "this quarter",
    "1": "next quarter",
    "-1": "last quarter"
}, _ir3m117 = {
    one: "dentro de {0} trim.",
    other: "dentro de {0} trim."
}, _ir3m118 = {
    id: "DG",
    displayName: "Diego García",
    hasTimeZones: false
}, _ir3m119 = {
    M: "MMMM–MMMM 'de' y G",
    y: "MMMM 'de' y – MMMM 'de' y G"
}, _ir3m120 = {
    a: "h:mm a – h:mm a",
    h: "h:mm – h:mm a",
    m: "h:mm – h:mm a"
}, _ir3m121 = {
    "0": "este dom.",
    "1": "el próximo dom.",
    "-1": "el dom. pasado"
}, _ir3m122 = {
    "0": "este lun.",
    "1": "el próximo lun.",
    "-1": "el lun. pasado"
}, _ir3m123 = {
    "0": "este mar.",
    "1": "el próximo mar.",
    "-1": "el mar. pasado"
}, _ir3m124 = {
    "0": "este mié.",
    "1": "el próximo mié.",
    "-1": "el mié. pasado"
}, _ir3m125 = {
    "0": "este jue.",
    "1": "el próximo jue.",
    "-1": "el jue. pasado"
}, _ir3m126 = {
    "0": "este vie.",
    "1": "el próximo vie.",
    "-1": "el vie. pasado"
}, _ir3m127 = {
    "0": "este sáb.",
    "1": "el próximo sáb.",
    "-1": "el sáb. pasado"
}, _ir3m128 = {
    d: "U MMM d–d",
    M: "U MMM d – MMM d",
    y: "U MMM d – U MMM d"
}, _ir3m129 = [ "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13" ], _ir3m130 = {
    id: "CX",
    displayName: "Isla de Navidad",
    hasTimeZones: true
}, _ir3m131 = {
    one: "dentro de {0} semana",
    other: "dentro de {0} semanas"
}, _ir3m132 = {
    one: "dentro de {0} minuto",
    other: "dentro de {0} minutos"
}, _ir3m133 = {
    id: "EA",
    displayName: "Ceuta y Melilla",
    hasTimeZones: false
}, _ir3m134 = {
    id: "CP",
    displayName: "Isla Clipperton",
    hasTimeZones: false
}, _ir3m135 = {
    a: "h:mm a – h:mm a v",
    h: "h:mm–h:mm a v",
    m: "h:mm–h:mm a v"
}, _ir3m136 = {
    id: "TA",
    displayName: "Tristán da Cunha",
    hasTimeZones: false
}, _ir3m137 = {
    one: "dentro de {0} segundo",
    other: "dentro de {0} segundos"
}, _ir3m138 = {
    "0": "este lunes",
    "1": "el próximo lunes",
    "-1": "el lunes pasado"
}, _ir3m139 = {
    id: "TD",
    displayName: "Chad",
    regionId: "017",
    hasTimeZones: true
}, _ir3m140 = {
    id: "CU",
    displayName: "Cuba",
    regionId: "029",
    hasTimeZones: true
}, _ir3m141 = {
    id: "FJ",
    displayName: "Fiyi",
    regionId: "054",
    hasTimeZones: true
}, _ir3m142 = {
    id: "GU",
    displayName: "Guam",
    regionId: "057",
    hasTimeZones: true
}, _ir3m143 = {
    id: "IQ",
    displayName: "Irak",
    regionId: "145",
    hasTimeZones: true
}, _ir3m144 = {
    id: "IR",
    displayName: "Irán",
    regionId: "034",
    hasTimeZones: true
}, _ir3m145 = {
    id: "LA",
    displayName: "Laos",
    regionId: "035",
    hasTimeZones: true
}, _ir3m146 = {
    id: "ML",
    displayName: "Mali",
    regionId: "011",
    hasTimeZones: true
}, _ir3m147 = {
    id: "NU",
    displayName: "Niue",
    regionId: "061",
    hasTimeZones: true
}, _ir3m148 = {
    id: "OM",
    displayName: "Omán",
    regionId: "145",
    hasTimeZones: true
}, _ir3m149 = {
    id: "PE",
    displayName: "Perú",
    regionId: "005",
    hasTimeZones: true
}, _ir3m150 = {
    id: "TG",
    displayName: "Togo",
    regionId: "011",
    hasTimeZones: true
}, _ir3m151 = {
    relative: _ir3m93
}, _ir3m152 = {
    relative: _ir3m94
}, _ir3m153 = {
    relative: _ir3m95
}, _ir3m154 = {
    relative: _ir3m96
}, _ir3m155 = {
    relative: _ir3m97
}, _ir3m156 = {
    relative: _ir3m98
}, _ir3m157 = {
    relative: _ir3m99
}, _ir3m158 = {
    id: "AW",
    displayName: "Aruba",
    regionId: "029",
    hasTimeZones: true
}, _ir3m159 = {
    id: "BJ",
    displayName: "Benín",
    regionId: "011",
    hasTimeZones: true
}, _ir3m160 = {
    id: "BT",
    displayName: "Bután",
    regionId: "034",
    hasTimeZones: true
}, _ir3m161 = {
    id: "QA",
    displayName: "Catar",
    regionId: "145",
    hasTimeZones: true
}, _ir3m162 = {
    id: "CL",
    displayName: "Chile",
    regionId: "005",
    hasTimeZones: true
}, _ir3m163 = {
    id: "CN",
    displayName: "China",
    regionId: "030",
    hasTimeZones: true
}, _ir3m164 = {
    id: "GA",
    displayName: "Gabón",
    regionId: "017",
    hasTimeZones: true
}, _ir3m165 = {
    id: "GH",
    displayName: "Ghana",
    regionId: "011",
    hasTimeZones: true
}, _ir3m166 = {
    id: "HT",
    displayName: "Haití",
    regionId: "029",
    hasTimeZones: true
}, _ir3m167 = {
    id: "IN",
    displayName: "India",
    regionId: "034",
    hasTimeZones: true
}, _ir3m168 = {
    id: "JP",
    displayName: "Japón",
    regionId: "030",
    hasTimeZones: true
}, _ir3m169 = {
    id: "KE",
    displayName: "Kenia",
    regionId: "014",
    hasTimeZones: true
}, _ir3m170 = {
    id: "LY",
    displayName: "Libia",
    regionId: "015",
    hasTimeZones: true
}, _ir3m171 = {
    id: "MT",
    displayName: "Malta",
    regionId: "039",
    hasTimeZones: true
}, _ir3m172 = {
    id: "NR",
    displayName: "Nauru",
    regionId: "057",
    hasTimeZones: true
}, _ir3m173 = {
    id: "NP",
    displayName: "Nepal",
    regionId: "034",
    hasTimeZones: true
}, _ir3m174 = {
    id: "NE",
    displayName: "Níger",
    regionId: "011",
    hasTimeZones: true
}, _ir3m175 = {
    id: "RU",
    displayName: "Rusia",
    regionId: "151",
    hasTimeZones: true
}, _ir3m176 = {
    id: "WS",
    displayName: "Samoa",
    regionId: "061",
    hasTimeZones: true
}, _ir3m177 = {
    id: "SY",
    displayName: "Siria",
    regionId: "145",
    hasTimeZones: true
}, _ir3m178 = {
    id: "SD",
    displayName: "Sudán",
    regionId: "015",
    hasTimeZones: true
}, _ir3m179 = {
    id: "CH",
    displayName: "Suiza",
    regionId: "155",
    hasTimeZones: true
}, _ir3m180 = {
    id: "TO",
    displayName: "Tonga",
    regionId: "061",
    hasTimeZones: true
}, _ir3m181 = {
    id: "TN",
    displayName: "Túnez",
    regionId: "015",
    hasTimeZones: true
}, _ir3m182 = {
    id: "YE",
    displayName: "Yemen",
    regionId: "145",
    hasTimeZones: true
}, _ir3m183 = {
    a: "h:mm a – h:mm a v",
    h: "h:mm – h:mm a v",
    m: "h:mm – h:mm a v"
}, _ir3m184 = {
    "0": "esta semana",
    "1": "la próxima semana",
    "-1": "la semana pasada"
}, _ir3m185 = {
    "0": "este martes",
    "1": "el próximo martes",
    "-1": "el martes pasado"
}, _ir3m186 = {
    "0": "este jueves",
    "1": "el próximo jueves",
    "-1": "el jueves pasado"
}, _ir3m187 = {
    "0": "este sábado",
    "1": "el próximo sábado",
    "-1": "el sábado pasado"
}, _ir3m188 = {
    id: "AO",
    displayName: "Angola",
    regionId: "017",
    hasTimeZones: true
}, _ir3m189 = {
    id: "BH",
    displayName: "Baréin",
    regionId: "145",
    hasTimeZones: true
}, _ir3m190 = {
    id: "BZ",
    displayName: "Belice",
    regionId: "013",
    hasTimeZones: true
}, _ir3m191 = {
    id: "BR",
    displayName: "Brasil",
    regionId: "005",
    hasTimeZones: true
}, _ir3m192 = {
    id: "BN",
    displayName: "Brunéi",
    regionId: "035",
    hasTimeZones: true
}, _ir3m193 = {
    id: "CA",
    displayName: "Canadá",
    regionId: "021",
    hasTimeZones: true
}, _ir3m194 = {
    id: "CY",
    displayName: "Chipre",
    regionId: "145",
    hasTimeZones: true
}, _ir3m195 = {
    id: "EG",
    displayName: "Egipto",
    regionId: "015",
    hasTimeZones: true
}, _ir3m196 = {
    id: "ES",
    displayName: "España",
    regionId: "039",
    hasTimeZones: true
}, _ir3m197 = {
    id: "GM",
    displayName: "Gambia",
    regionId: "011",
    hasTimeZones: true
}, _ir3m198 = {
    id: "GR",
    displayName: "Grecia",
    regionId: "039",
    hasTimeZones: true
}, _ir3m199 = {
    id: "GN",
    displayName: "Guinea",
    regionId: "011",
    hasTimeZones: true
}, _ir3m200 = {
    id: "GY",
    displayName: "Guyana",
    regionId: "005",
    hasTimeZones: true
}, _ir3m201 = {
    id: "AC",
    displayName: "Isla de la Ascensión",
    hasTimeZones: false
}, _ir3m202 = {
    id: "IL",
    displayName: "Israel",
    regionId: "145",
    hasTimeZones: true
}, _ir3m203 = {
    id: "IT",
    displayName: "Italia",
    regionId: "039",
    hasTimeZones: true
}, _ir3m204 = {
    id: "JE",
    displayName: "Jersey",
    regionId: "154",
    hasTimeZones: true
}, _ir3m205 = {
    id: "KW",
    displayName: "Kuwait",
    regionId: "145",
    hasTimeZones: true
}, _ir3m206 = {
    id: "LS",
    displayName: "Lesoto",
    regionId: "018",
    hasTimeZones: true
}, _ir3m207 = {
    id: "LB",
    displayName: "Líbano",
    regionId: "145",
    hasTimeZones: true
}, _ir3m208 = {
    id: "MW",
    displayName: "Malaui",
    regionId: "014",
    hasTimeZones: true
}, _ir3m209 = {
    id: "MX",
    displayName: "México",
    regionId: "013",
    hasTimeZones: true
}, _ir3m210 = {
    id: "MC",
    displayName: "Mónaco",
    regionId: "155",
    hasTimeZones: true
}, _ir3m211 = {
    id: "PW",
    displayName: "Palaos",
    regionId: "057",
    hasTimeZones: true
}, _ir3m212 = {
    id: "PA",
    displayName: "Panamá",
    regionId: "013",
    hasTimeZones: true
}, _ir3m213 = {
    id: "RW",
    displayName: "Ruanda",
    regionId: "014",
    hasTimeZones: true
}, _ir3m214 = {
    id: "RS",
    displayName: "Serbia",
    regionId: "039",
    hasTimeZones: true
}, _ir3m215 = {
    id: "SE",
    displayName: "Suecia",
    regionId: "154",
    hasTimeZones: true
}, _ir3m216 = {
    id: "TW",
    displayName: "Taiwán",
    regionId: "030",
    hasTimeZones: true
}, _ir3m217 = {
    id: "TV",
    displayName: "Tuvalu",
    regionId: "061",
    hasTimeZones: true
}, _ir3m218 = {
    id: "UG",
    displayName: "Uganda",
    regionId: "014",
    hasTimeZones: true
}, _ir3m219 = {
    id: "DJ",
    displayName: "Yibuti",
    regionId: "014",
    hasTimeZones: true
}, _ir3m220 = {
    id: "ZM",
    displayName: "Zambia",
    regionId: "014",
    hasTimeZones: true
}, _ir3m221 = {
    one: "dentro de {0} trimestre",
    other: "dentro de {0} trimestres"
}, _ir3m222 = {
    id: "AL",
    displayName: "Albania",
    regionId: "039",
    hasTimeZones: true
}, _ir3m223 = {
    id: "AD",
    displayName: "Andorra",
    regionId: "039",
    hasTimeZones: true
}, _ir3m224 = {
    id: "AI",
    displayName: "Anguila",
    regionId: "029",
    hasTimeZones: true
}, _ir3m225 = {
    id: "DZ",
    displayName: "Argelia",
    regionId: "015",
    hasTimeZones: true
}, _ir3m226 = {
    id: "AM",
    displayName: "Armenia",
    regionId: "145",
    hasTimeZones: true
}, _ir3m227 = {
    id: "AT",
    displayName: "Austria",
    regionId: "155",
    hasTimeZones: true
}, _ir3m228 = {
    id: "BS",
    displayName: "Bahamas",
    regionId: "029",
    hasTimeZones: true
}, _ir3m229 = {
    id: "BO",
    displayName: "Bolivia",
    regionId: "005",
    hasTimeZones: true
}, _ir3m230 = {
    id: "BI",
    displayName: "Burundi",
    regionId: "014",
    hasTimeZones: true
}, _ir3m231 = {
    id: "BE",
    displayName: "Bélgica",
    regionId: "155",
    hasTimeZones: true
}, _ir3m232 = {
    id: "KH",
    displayName: "Camboya",
    regionId: "035",
    hasTimeZones: true
}, _ir3m233 = {
    id: "CM",
    displayName: "Camerún",
    regionId: "017",
    hasTimeZones: true
}, _ir3m234 = {
    id: "KM",
    displayName: "Comoras",
    regionId: "014",
    hasTimeZones: true
}, _ir3m235 = {
    id: "HR",
    displayName: "Croacia",
    regionId: "039",
    hasTimeZones: true
}, _ir3m236 = {
    id: "CW",
    displayName: "Curazao",
    regionId: "029",
    hasTimeZones: true
}, _ir3m237 = {
    id: "EC",
    displayName: "Ecuador",
    regionId: "005",
    hasTimeZones: true
}, _ir3m238 = {
    id: "ER",
    displayName: "Eritrea",
    regionId: "014",
    hasTimeZones: true
}, _ir3m239 = {
    id: "EE",
    displayName: "Estonia",
    regionId: "154",
    hasTimeZones: true
}, _ir3m240 = {
    id: "ET",
    displayName: "Etiopía",
    regionId: "014",
    hasTimeZones: true
}, _ir3m241 = {
    id: "FR",
    displayName: "Francia",
    regionId: "155",
    hasTimeZones: true
}, _ir3m242 = {
    id: "GE",
    displayName: "Georgia",
    regionId: "145",
    hasTimeZones: true
}, _ir3m243 = {
    id: "GD",
    displayName: "Granada",
    regionId: "029",
    hasTimeZones: true
}, _ir3m244 = {
    id: "HU",
    displayName: "Hungría",
    regionId: "151",
    hasTimeZones: true
}, _ir3m245 = {
    id: "IE",
    displayName: "Irlanda",
    regionId: "154",
    hasTimeZones: true
}, _ir3m246 = {
    id: "JM",
    displayName: "Jamaica",
    regionId: "029",
    hasTimeZones: true
}, _ir3m247 = {
    id: "XK",
    displayName: "Kosovo",
    regionId: "039",
    hasTimeZones: false
}, _ir3m248 = {
    id: "LV",
    displayName: "Letonia",
    regionId: "154",
    hasTimeZones: true
}, _ir3m249 = {
    id: "LR",
    displayName: "Liberia",
    regionId: "011",
    hasTimeZones: true
}, _ir3m250 = {
    id: "MY",
    displayName: "Malasia",
    regionId: "035",
    hasTimeZones: true
}, _ir3m251 = {
    id: "YT",
    displayName: "Mayotte",
    regionId: "014",
    hasTimeZones: true
}, _ir3m252 = {
    id: "NA",
    displayName: "Namibia",
    regionId: "018",
    hasTimeZones: true
}, _ir3m253 = {
    id: "NG",
    displayName: "Nigeria",
    regionId: "011",
    hasTimeZones: true
}, _ir3m254 = {
    id: "NO",
    displayName: "Noruega",
    regionId: "154",
    hasTimeZones: true
}, _ir3m255 = {
    id: "PL",
    displayName: "Polonia",
    regionId: "151",
    hasTimeZones: true
}, _ir3m256 = {
    id: "RE",
    displayName: "Reunión",
    regionId: "014",
    hasTimeZones: true
}, _ir3m257 = {
    id: "RO",
    displayName: "Rumanía",
    regionId: "151",
    hasTimeZones: true
}, _ir3m258 = {
    id: "SN",
    displayName: "Senegal",
    regionId: "011",
    hasTimeZones: true
}, _ir3m259 = {
    id: "SO",
    displayName: "Somalia",
    regionId: "014",
    hasTimeZones: true
}, _ir3m260 = {
    id: "SR",
    displayName: "Surinam",
    regionId: "005",
    hasTimeZones: true
}, _ir3m261 = {
    id: "TK",
    displayName: "Tokelau",
    regionId: "061",
    hasTimeZones: true
}, _ir3m262 = {
    id: "TR",
    displayName: "Turquía",
    regionId: "145",
    hasTimeZones: true
}, _ir3m263 = {
    id: "UA",
    displayName: "Ucrania",
    regionId: "151",
    hasTimeZones: true
}, _ir3m264 = {
    id: "UY",
    displayName: "Uruguay",
    regionId: "005",
    hasTimeZones: true
}, _ir3m265 = {
    id: "VU",
    displayName: "Vanuatu",
    regionId: "054",
    hasTimeZones: true
}, _ir3m266 = {
    id: "VN",
    displayName: "Vietnam",
    regionId: "035",
    hasTimeZones: true
}, _ir3m267 = {
    id: "DE",
    displayName: "Alemania",
    regionId: "155",
    hasTimeZones: true
}, _ir3m268 = {
    id: "BB",
    displayName: "Barbados",
    regionId: "029",
    hasTimeZones: true
}, _ir3m269 = {
    id: "BM",
    displayName: "Bermudas",
    regionId: "021",
    hasTimeZones: true
}, _ir3m270 = {
    id: "BW",
    displayName: "Botsuana",
    regionId: "018",
    hasTimeZones: true
}, _ir3m271 = {
    id: "BG",
    displayName: "Bulgaria",
    regionId: "151",
    hasTimeZones: true
}, _ir3m272 = {
    id: "CO",
    displayName: "Colombia",
    regionId: "005",
    hasTimeZones: true
}, _ir3m273 = {
    id: "DM",
    displayName: "Dominica",
    regionId: "029",
    hasTimeZones: true
}, _ir3m274 = {
    id: "HN",
    displayName: "Honduras",
    regionId: "013",
    hasTimeZones: true
}, _ir3m275 = {
    id: "IS",
    displayName: "Islandia",
    regionId: "154",
    hasTimeZones: true
}, _ir3m276 = {
    id: "HM",
    displayName: "Islas Heard y McDonald",
    hasTimeZones: false
}, _ir3m277 = {
    id: "JO",
    displayName: "Jordania",
    regionId: "145",
    hasTimeZones: true
}, _ir3m278 = {
    id: "KI",
    displayName: "Kiribati",
    regionId: "057",
    hasTimeZones: true
}, _ir3m279 = {
    id: "LT",
    displayName: "Lituania",
    regionId: "154",
    hasTimeZones: true
}, _ir3m280 = {
    id: "MV",
    displayName: "Maldivas",
    regionId: "034",
    hasTimeZones: true
}, _ir3m281 = {
    id: "MU",
    displayName: "Mauricio",
    regionId: "014",
    hasTimeZones: true
}, _ir3m282 = {
    id: "MD",
    displayName: "Moldavia",
    regionId: "151",
    hasTimeZones: true
}, _ir3m283 = {
    id: "MN",
    displayName: "Mongolia",
    regionId: "030",
    hasTimeZones: true
}, _ir3m284 = {
    id: "PK",
    displayName: "Pakistán",
    regionId: "034",
    hasTimeZones: true
}, _ir3m285 = {
    id: "PY",
    displayName: "Paraguay",
    regionId: "005",
    hasTimeZones: true
}, _ir3m286 = {
    id: "PT",
    displayName: "Portugal",
    regionId: "039",
    hasTimeZones: true
}, _ir3m287 = {
    id: "SG",
    displayName: "Singapur",
    regionId: "035",
    hasTimeZones: true
}, _ir3m288 = {
    id: "TZ",
    displayName: "Tanzania",
    regionId: "014",
    hasTimeZones: true
}, _ir3m289 = {
    id: "ZW",
    displayName: "Zimbabue",
    regionId: "014",
    hasTimeZones: true
}, _ir3m290 = {
    "2": "{0} y {1}",
    start: "{0}, {1}",
    middle: "{0}, {1}",
    end: "{0} y {1}"
}, _ir3m291 = {
    "0": "hoy",
    "1": "mañana",
    "2": "pasado mañana",
    "-2": "anteayer",
    "-1": "ayer"
}, _ir3m292 = {
    "0": "este domingo",
    "1": "el próximo domingo",
    "-1": "el domingo pasado"
}, _ir3m293 = {
    "0": "este viernes",
    "1": "el próximo viernes",
    "-1": "el viernes pasado"
}, _ir3m294 = {
    id: "AR",
    displayName: "Argentina",
    regionId: "005",
    hasTimeZones: true
}, _ir3m295 = {
    id: "AU",
    displayName: "Australia",
    regionId: "053",
    hasTimeZones: true
}, _ir3m296 = {
    id: "BD",
    displayName: "Bangladés",
    regionId: "034",
    hasTimeZones: true
}, _ir3m297 = {
    id: "DK",
    displayName: "Dinamarca",
    regionId: "154",
    hasTimeZones: true
}, _ir3m298 = {
    id: "SI",
    displayName: "Eslovenia",
    regionId: "039",
    hasTimeZones: true
}, _ir3m299 = {
    id: "PH",
    displayName: "Filipinas",
    regionId: "035",
    hasTimeZones: true
}, _ir3m300 = {
    id: "FI",
    displayName: "Finlandia",
    regionId: "154",
    hasTimeZones: true
}, _ir3m301 = {
    id: "GI",
    displayName: "Gibraltar",
    regionId: "039",
    hasTimeZones: true
}, _ir3m302 = {
    id: "GP",
    displayName: "Guadalupe",
    regionId: "029",
    hasTimeZones: true
}, _ir3m303 = {
    id: "GT",
    displayName: "Guatemala",
    regionId: "013",
    hasTimeZones: true
}, _ir3m304 = {
    id: "GG",
    displayName: "Guernesey",
    regionId: "154",
    hasTimeZones: true
}, _ir3m305 = {
    id: "ID",
    displayName: "Indonesia",
    regionId: "035",
    hasTimeZones: true
}, _ir3m306 = {
    id: "MK",
    displayName: "Macedonia",
    regionId: "039",
    hasTimeZones: true
}, _ir3m307 = {
    id: "MA",
    displayName: "Marruecos",
    regionId: "015",
    hasTimeZones: true
}, _ir3m308 = {
    id: "MQ",
    displayName: "Martinica",
    regionId: "029",
    hasTimeZones: true
}, _ir3m309 = {
    id: "NI",
    displayName: "Nicaragua",
    regionId: "013",
    hasTimeZones: true
}, _ir3m310 = {
    id: "LK",
    displayName: "Sri Lanka",
    regionId: "034",
    hasTimeZones: true
}, _ir3m311 = {
    id: "ZA",
    displayName: "Sudáfrica",
    regionId: "018",
    hasTimeZones: true
}, _ir3m312 = {
    id: "TH",
    displayName: "Tailandia",
    regionId: "035",
    hasTimeZones: true
}, _ir3m313 = {
    id: "VE",
    displayName: "Venezuela",
    regionId: "005",
    hasTimeZones: true
}, _ir3m314 = [ "1.er trimestre", "2.º trimestre", "3.er trimestre", "4.º trimestre" ], _ir3m315 = {
    d: "y-MM-dd – y-MM-dd",
    M: "y-MM-dd – y-MM-dd",
    y: "y-MM-dd – y-MM-dd"
}, _ir3m316 = {
    id: "AF",
    displayName: "Afganistán",
    regionId: "034",
    hasTimeZones: true
}, _ir3m317 = {
    id: "AZ",
    displayName: "Azerbaiyán",
    regionId: "145",
    hasTimeZones: true
}, _ir3m318 = {
    id: "CV",
    displayName: "Cabo Verde",
    regionId: "011",
    hasTimeZones: true
}, _ir3m319 = {
    id: "CR",
    displayName: "Costa Rica",
    regionId: "013",
    hasTimeZones: true
}, _ir3m320 = {
    id: "SK",
    displayName: "Eslovaquia",
    regionId: "151",
    hasTimeZones: true
}, _ir3m321 = {
    id: "CK",
    displayName: "Islas Cook",
    regionId: "061",
    hasTimeZones: true
}, _ir3m322 = {
    id: "KZ",
    displayName: "Kazajistán",
    regionId: "143",
    hasTimeZones: true
}, _ir3m323 = {
    id: "KG",
    displayName: "Kirguistán",
    regionId: "143",
    hasTimeZones: true
}, _ir3m324 = {
    id: "LU",
    displayName: "Luxemburgo",
    regionId: "155",
    hasTimeZones: true
}, _ir3m325 = {
    id: "MG",
    displayName: "Madagascar",
    regionId: "014",
    hasTimeZones: true
}, _ir3m326 = {
    id: "MR",
    displayName: "Mauritania",
    regionId: "011",
    hasTimeZones: true
}, _ir3m327 = {
    id: "FM",
    displayName: "Micronesia",
    regionId: "057",
    hasTimeZones: true
}, _ir3m328 = {
    id: "ME",
    displayName: "Montenegro",
    regionId: "039",
    hasTimeZones: true
}, _ir3m329 = {
    id: "MS",
    displayName: "Montserrat",
    regionId: "029",
    hasTimeZones: true
}, _ir3m330 = {
    id: "MZ",
    displayName: "Mozambique",
    regionId: "014",
    hasTimeZones: true
}, _ir3m331 = {
    id: "SM",
    displayName: "San Marino",
    regionId: "039",
    hasTimeZones: true
}, _ir3m332 = {
    id: "MF",
    displayName: "San Martín",
    regionId: "029",
    hasTimeZones: true
}, _ir3m333 = {
    id: "SC",
    displayName: "Seychelles",
    regionId: "014",
    hasTimeZones: true
}, _ir3m334 = {
    id: "TJ",
    displayName: "Tayikistán",
    regionId: "143",
    hasTimeZones: true
}, _ir3m335 = {
    id: "UZ",
    displayName: "Uzbekistán",
    regionId: "143",
    hasTimeZones: true
}, _ir3m336 = [ "domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado" ], _ir3m337 = {
    relative: _ir3m121
}, _ir3m338 = {
    relative: _ir3m122
}, _ir3m339 = {
    relative: _ir3m123
}, _ir3m340 = {
    relative: _ir3m124
}, _ir3m341 = {
    relative: _ir3m125
}, _ir3m342 = {
    relative: _ir3m126
}, _ir3m343 = {
    relative: _ir3m127
}, _ir3m344 = {
    id: "BY",
    displayName: "Bielorrusia",
    regionId: "151",
    hasTimeZones: true
}, _ir3m345 = {
    id: "SV",
    displayName: "El Salvador",
    regionId: "013",
    hasTimeZones: true
}, _ir3m346 = {
    id: "GL",
    displayName: "Groenlandia",
    regionId: "021",
    hasTimeZones: true
}, _ir3m347 = {
    id: "IM",
    displayName: "Isla de Man",
    regionId: "154",
    hasTimeZones: true
}, _ir3m348 = {
    id: "FO",
    displayName: "Islas Feroe",
    regionId: "154",
    hasTimeZones: true
}, _ir3m349 = {
    id: "AX",
    displayName: "Islas Åland",
    regionId: "154",
    hasTimeZones: true
}, _ir3m350 = {
    id: "PR",
    displayName: "Puerto Rico",
    regionId: "029",
    hasTimeZones: true
}, _ir3m351 = {
    id: "GB",
    displayName: "Reino Unido",
    regionId: "154",
    hasTimeZones: true
}, _ir3m352 = {
    id: "SH",
    displayName: "Santa Elena",
    regionId: "011",
    hasTimeZones: true
}, _ir3m353 = {
    id: "LC",
    displayName: "Santa Lucía",
    regionId: "029",
    hasTimeZones: true
}, _ir3m354 = {
    id: "SZ",
    displayName: "Suazilandia",
    regionId: "018",
    hasTimeZones: true
}, _ir3m355 = {
    d: "E, d 'de' MMM – E, d 'de' MMM",
    M: "E, d 'de' MMM – E, d 'de' MMM"
}, _ir3m356 = {
    id: "SA",
    displayName: "Arabia Saudí",
    regionId: "145",
    hasTimeZones: true
}, _ir3m357 = {
    id: "142",
    displayName: "Asia",
    hasTimeZones: false,
    parentRegionId: "001"
}, _ir3m358 = {
    id: "BF",
    displayName: "Burkina Faso",
    regionId: "011",
    hasTimeZones: true
}, _ir3m359 = {
    id: "GW",
    displayName: "Guinea-Bisáu",
    regionId: "011",
    hasTimeZones: true
}, _ir3m360 = {
    id: "NF",
    displayName: "Isla Norfolk",
    regionId: "053",
    hasTimeZones: true
}, _ir3m361 = {
    id: "KY",
    displayName: "Islas Caimán",
    regionId: "029",
    hasTimeZones: true
}, _ir3m362 = {
    id: "NL",
    displayName: "Países Bajos",
    regionId: "155",
    hasTimeZones: true
}, _ir3m363 = {
    id: "SL",
    displayName: "Sierra Leona",
    regionId: "011",
    hasTimeZones: true
}, _ir3m364 = {
    id: "SX",
    displayName: "Sint Maarten",
    regionId: "029",
    hasTimeZones: true
}, _ir3m365 = {
    id: "TM",
    displayName: "Turkmenistán",
    regionId: "143",
    hasTimeZones: true
}, _ir3m366 = {
    id: "KR",
    displayName: "Corea del Sur",
    regionId: "030",
    hasTimeZones: true
}, _ir3m367 = {
    id: "SB",
    displayName: "Islas Salomón",
    regionId: "054",
    hasTimeZones: true
}, _ir3m368 = {
    id: "LI",
    displayName: "Liechtenstein",
    regionId: "155",
    hasTimeZones: true
}, _ir3m369 = {
    id: "NZ",
    displayName: "Nueva Zelanda",
    regionId: "053",
    hasTimeZones: true
}, _ir3m370 = {
    id: "BL",
    displayName: "San Bartolomé",
    regionId: "029",
    hasTimeZones: true
}, _ir3m371 = {
    id: "SS",
    displayName: "Sudán del Sur",
    regionId: "014",
    hasTimeZones: true
}, _ir3m372 = {
    relative: _ir3m138
}, _ir3m373 = {
    abbreviated: {
        leap: "{0}bis"
    },
    narrow: {
        leap: "{0}b"
    },
    wide: {
        leap: "{0}bis"
    }
}, _ir3m374 = {
    id: "029",
    displayName: "Caribe",
    hasTimeZones: false,
    parentRegionId: "019"
}, _ir3m375 = {
    id: "US",
    displayName: "Estados Unidos",
    regionId: "021",
    hasTimeZones: true
}, _ir3m376 = {
    id: "150",
    displayName: "Europa",
    hasTimeZones: false,
    parentRegionId: "001"
}, _ir3m377 = {
    id: "FK",
    displayName: "Islas Malvinas",
    regionId: "005",
    hasTimeZones: true
}, _ir3m378 = {
    id: "MH",
    displayName: "Islas Marshall",
    regionId: "057",
    hasTimeZones: true
}, _ir3m379 = {
    id: "PN",
    displayName: "Islas Pitcairn",
    regionId: "061",
    hasTimeZones: true
}, _ir3m380 = {
    id: "TL",
    displayName: "Timor Oriental",
    regionId: "035",
    hasTimeZones: true
}, _ir3m381 = {
    id: "002",
    displayName: "África",
    hasTimeZones: false,
    parentRegionId: "001"
}, _ir3m382 = {
    "0": "este miércoles",
    "1": "el próximo miércoles",
    "-1": "el miércoles pasado"
}, _ir3m383 = {
    id: "019",
    displayName: "América",
    hasTimeZones: false,
    parentRegionId: "001"
}, _ir3m384 = {
    id: "KP",
    displayName: "Corea del Norte",
    regionId: "030",
    hasTimeZones: true
}, _ir3m385 = {
    id: "CI",
    displayName: "Costa de Marfil",
    regionId: "011",
    hasTimeZones: true
}, _ir3m386 = {
    id: "NC",
    displayName: "Nueva Caledonia",
    regionId: "054",
    hasTimeZones: true
}, _ir3m387 = {
    id: "009",
    displayName: "Oceanía",
    hasTimeZones: false,
    parentRegionId: "001"
}, _ir3m388 = {
    id: "CZ",
    displayName: "República Checa",
    regionId: "151",
    hasTimeZones: true
}, _ir3m389 = {
    id: "AS",
    displayName: "Samoa Americana",
    regionId: "061",
    hasTimeZones: true
}, _ir3m390 = {
    id: "WF",
    displayName: "Wallis y Futuna",
    regionId: "061",
    hasTimeZones: true
}, _ir3m391 = [ "M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12" ], _ir3m392 = {
    id: "GF",
    displayName: "Guayana Francesa",
    regionId: "005",
    hasTimeZones: true
}, _ir3m393 = {
    id: "TF",
    displayName: "Territorios Australes Franceses",
    hasTimeZones: true
}, _ir3m394 = {
    relative: _ir3m185
}, _ir3m395 = {
    relative: _ir3m186
}, _ir3m396 = {
    relative: _ir3m187
}, _ir3m397 = {
    id: "AG",
    displayName: "Antigua y Barbuda",
    regionId: "029",
    hasTimeZones: true
}, _ir3m398 = {
    id: "BQ",
    displayName: "Caribe neerlandés",
    regionId: "029",
    hasTimeZones: true
}, _ir3m399 = {
    id: "GQ",
    displayName: "Guinea Ecuatorial",
    regionId: "017",
    hasTimeZones: true
}, _ir3m400 = {
    id: "054",
    displayName: "Melanesia",
    hasTimeZones: false,
    parentRegionId: "009"
}, _ir3m401 = {
    id: "061",
    displayName: "Polinesia",
    hasTimeZones: false,
    parentRegionId: "009"
}, _ir3m402 = {
    id: "EH",
    displayName: "Sáhara Occidental",
    regionId: "015",
    hasTimeZones: true
}, _ir3m403 = {
    id: "TT",
    displayName: "Trinidad y Tobago",
    regionId: "029",
    hasTimeZones: true
}, _ir3m404 = {
    id: "BA",
    displayName: "Bosnia-Herzegovina",
    regionId: "039",
    hasTimeZones: true
}, _ir3m405 = {
    id: "UM",
    displayName: "Islas menores alejadas de EE. UU.",
    hasTimeZones: true
}, _ir3m406 = {
    id: "MM",
    displayName: "Myanmar (Birmania)",
    regionId: "035",
    hasTimeZones: true
}, _ir3m407 = {
    id: "PG",
    displayName: "Papúa Nueva Guinea",
    regionId: "054",
    hasTimeZones: true
}, _ir3m408 = {
    id: "PF",
    displayName: "Polinesia Francesa",
    regionId: "061",
    hasTimeZones: true
}, _ir3m409 = {
    id: "005",
    displayName: "Sudamérica",
    hasTimeZones: false,
    parentRegionId: "019"
}, _ir3m410 = [ undefined, "zi", "chou", "yin", "mao", "chen", "si", "wu", "wei", "shen", "you", "xu" ], _ir3m411 = {
    id: "053",
    displayName: "Australasia",
    hasTimeZones: false,
    parentRegionId: "009"
}, _ir3m412 = {
    id: "VA",
    displayName: "Ciudad del Vaticano",
    regionId: "039",
    hasTimeZones: true
}, _ir3m413 = {
    id: "CG",
    displayName: "República del Congo",
    regionId: "017",
    hasTimeZones: true
}, _ir3m414 = {
    relative: _ir3m292
}, _ir3m415 = {
    relative: _ir3m293
}, _ir3m416 = {
    id: "143",
    displayName: "Asia central",
    hasTimeZones: false,
    parentRegionId: "142"
}, _ir3m417 = {
    id: "021",
    displayName: "Norteamérica",
    hasTimeZones: false,
    parentRegionId: "019"
}, _ir3m418 = {
    id: "MO",
    displayName: "RAE de Macao (China)",
    regionId: "030",
    hasTimeZones: true
}, _ir3m419 = {
    id: "DO",
    displayName: "República Dominicana",
    regionId: "029",
    hasTimeZones: true
}, _ir3m420 = {
    id: "PM",
    displayName: "San Pedro y Miquelón",
    regionId: "021",
    hasTimeZones: true
}, _ir3m421 = {
    id: "SJ",
    displayName: "Svalbard y Jan Mayen",
    regionId: "154",
    hasTimeZones: true
}, _ir3m422 = {
    id: "030",
    displayName: "Asia oriental",
    hasTimeZones: false,
    parentRegionId: "142"
}, _ir3m423 = {
    id: "013",
    displayName: "Centroamérica",
    hasTimeZones: false,
    parentRegionId: "019"
}, _ir3m424 = {
    id: "TC",
    displayName: "Islas Turcas y Caicos",
    regionId: "029",
    hasTimeZones: true
}, _ir3m425 = {
    id: "ST",
    displayName: "Santo Tomé y Príncipe",
    regionId: "017",
    hasTimeZones: true
}, _ir3m426 = {
    d: "E, d/M/y – E, d/M/y G",
    M: "E, d/M/y – E, d/M/y G",
    y: "E, d/M/y – E, d/M/y G"
}, _ir3m427 = {
    id: "AE",
    displayName: "Emiratos Árabes Unidos",
    regionId: "145",
    hasTimeZones: true
}, _ir3m428 = {
    id: "KN",
    displayName: "San Cristóbal y Nieves",
    regionId: "029",
    hasTimeZones: true
}, _ir3m429 = {
    id: "PS",
    displayName: "Territorios Palestinos",
    regionId: "145",
    hasTimeZones: true
}, _ir3m430 = {
    id: "017",
    displayName: "África central",
    hasTimeZones: false,
    parentRegionId: "002"
}, _ir3m431 = {
    id: "034",
    displayName: "Asia meridional",
    hasTimeZones: false,
    parentRegionId: "142"
}, _ir3m432 = {
    id: "145",
    displayName: "Asia occidental",
    hasTimeZones: false,
    parentRegionId: "142"
}, _ir3m433 = {
    id: "151",
    displayName: "Europa oriental",
    hasTimeZones: false,
    parentRegionId: "150"
}, _ir3m434 = {
    id: "IO",
    displayName: "Territorio Británico del Océano Índico",
    hasTimeZones: true
}, _ir3m435 = {
    id: "014",
    displayName: "África oriental",
    hasTimeZones: false,
    parentRegionId: "002"
}, _ir3m436 = {
    d: "U MMM d, E – MMM d, E",
    M: "U MMM d, E – MMM d, E",
    y: "U MMM d, E – U MMM d, E"
}, _ir3m437 = {
    id: "MP",
    displayName: "Islas Marianas del Norte",
    regionId: "057",
    hasTimeZones: true
}, _ir3m438 = {
    id: "HK",
    displayName: "RAE de Hong Kong (China)",
    regionId: "030",
    hasTimeZones: true
}, _ir3m439 = {
    id: "CF",
    displayName: "República Centroafricana",
    regionId: "017",
    hasTimeZones: true
}, _ir3m440 = {
    id: "035",
    displayName: "Sudeste asiático",
    hasTimeZones: false,
    parentRegionId: "142"
}, _ir3m441 = {
    id: "039",
    displayName: "Europa meridional",
    hasTimeZones: false,
    parentRegionId: "150"
}, _ir3m442 = {
    id: "155",
    displayName: "Europa occidental",
    hasTimeZones: false,
    parentRegionId: "150"
}, _ir3m443 = {
    id: "GS",
    displayName: "Islas Georgia del Sur y Sandwich del Sur",
    hasTimeZones: true
}, _ir3m444 = {
    id: "VG",
    displayName: "Islas Vírgenes Británicas",
    regionId: "029",
    hasTimeZones: true
}, _ir3m445 = {
    id: "VI",
    displayName: "Islas Vírgenes de EE. UU.",
    regionId: "029",
    hasTimeZones: true
}, _ir3m446 = {
    id: "018",
    displayName: "África meridional",
    hasTimeZones: false,
    parentRegionId: "002"
}, _ir3m447 = {
    id: "011",
    displayName: "África occidental",
    hasTimeZones: false,
    parentRegionId: "002"
}, _ir3m448 = {
    relative: _ir3m382
}, _ir3m449 = {
    d: "y-MM-dd, E – y-MM-dd, E",
    M: "y-MM-dd, E – y-MM-dd, E",
    y: "y-MM-dd, E – y-MM-dd, E"
}, _ir3m450 = {
    id: "154",
    displayName: "Europa septentrional",
    hasTimeZones: false,
    parentRegionId: "150"
}, _ir3m451 = {
    id: "057",
    displayName: "Región de Micronesia",
    hasTimeZones: false,
    parentRegionId: "009"
}, _ir3m452 = {
    id: "VC",
    displayName: "San Vicente y las Granadinas",
    regionId: "029",
    hasTimeZones: true
}, _ir3m453 = {
    id: "015",
    displayName: "África septentrional",
    hasTimeZones: false,
    parentRegionId: "002"
}, _ir3m454 = [ "ene.", "feb.", "mar.", "abr.", "may.", "jun.", "jul.", "ago.", "sept.", "oct.", "nov.", "dic." ], _ir3m455 = {
    id: "CD",
    displayName: "República Democrática del Congo",
    regionId: "017",
    hasTimeZones: true
}, _ir3m456 = {
    future: _ir3m78,
    past: _ir3m53
}, _ir3m457 = {
    future: _ir3m79,
    past: _ir3m54
}, _ir3m458 = {
    future: _ir3m80,
    past: _ir3m55
}, _ir3m459 = {
    future: _ir3m81,
    past: _ir3m56
}, _ir3m460 = {
    d: "d–d 'de' MMM 'de' y G",
    M: "d 'de' MMM – d 'de' MMM y G",
    y: "d 'de' MMM 'de' y – d 'de' MMM 'de' y G"
}, _ir3m461 = [ "Muh.", "Saf.", "Rab. I", "Rab. II", "Jum. I", "Jum. II", "Raj.", "Sha.", "Ram.", "Shaw.", "Dhuʻl-Q.", "Dhuʻl-H." ], _ir3m462 = [ "Tishri", "Heshvan", "Kislev", "Tevet", "Shevat", "Adar I", "Adar", "Nisan", "Iyar", "Sivan", "Tamuz", "Av", "Elul" ], _ir3m463 = {
    future: _ir3m92,
    past: _ir3m68
}, _ir3m464 = {
    future: _ir3m103,
    past: _ir3m69
}, _ir3m465 = {
    future: _ir3m104,
    past: _ir3m70
}, _ir3m466 = [ "Farvardin", "Ordibehesht", "Khordad", "Tir", "Mordad", "Shahrivar", "Mehr", "Aban", "Azar", "Dey", "Bahman", "Esfand" ], _ir3m467 = {
    am: "a. m.",
    noon: "mediodía",
    pm: "p. m.",
    morning1: "madrugada",
    morning2: "mañana",
    evening1: "tarde",
    night1: "noche"
}, _ir3m468 = {
    future: _ir3m106,
    past: _ir3m71
}, _ir3m469 = {
    future: _ir3m107,
    past: _ir3m72
}, _ir3m470 = [ "Tout", "Baba", "Hator", "Kiahk", "Toba", "Amshir", "Baramhat", "Baramouda", "Bashans", "Paona", "Epep", "Mesra", "Nasie" ], _ir3m471 = {
    future: _ir3m113,
    past: _ir3m73
}, _ir3m472 = [ "enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre" ], _ir3m473 = {
    future: _ir3m117,
    past: _ir3m75
}, _ir3m474 = [ "Meskerem", "Tekemt", "Hedar", "Tahsas", "Ter", "Yekatit", "Megabit", "Miazia", "Genbot", "Sene", "Hamle", "Nehasse", "Pagumen" ], _ir3m475 = [ "Chaitra", "Vaisakha", "Jyaistha", "Asadha", "Sravana", "Bhadra", "Asvina", "Kartika", "Agrahayana", "Pausa", "Magha", "Phalguna" ], _ir3m476 = {
    future: _ir3m131,
    past: _ir3m82
}, _ir3m477 = {
    future: _ir3m132,
    past: _ir3m83
}, _ir3m478 = {
    future: _ir3m137,
    past: _ir3m90
}, _ir3m479 = {
    displayName: "h",
    relativeTime: _ir3m458
}, _ir3m480 = {
    displayName: "s",
    relativeTime: _ir3m459
}, _ir3m481 = [ "Muharram", "Safar", "Rabiʻ I", "Rabiʻ II", "Jumada I", "Jumada II", "Rajab", "Shaʻban", "Ramadan", "Shawwal", "Dhuʻl-Qiʻdah", "Dhuʻl-Hijjah" ], _ir3m482 = {
    abbreviated: _ir3m2,
    narrow: [ "1", "2", "3", "4" ],
    wide: _ir3m314
}, _ir3m483 = {
    future: _ir3m221,
    past: _ir3m111
}, _ir3m484 = {
    d: "E, d 'de' MMM – E, d 'de' MMM 'de' y G",
    M: "E, d 'de' MMM – E, d 'de' MMM 'de' y G",
    y: "E, d 'de' MMM 'de' y – E, d 'de' MMM 'de' y G"
}, _ir3m485 = {
    am: "a. m.",
    noon: "del mediodía",
    pm: "p. m.",
    morning1: "de la madrugada",
    morning2: "de la mañana",
    evening1: "de la tarde",
    night1: "de la noche"
}, _ir3m486 = {
    displayName: "min",
    relativeTime: _ir3m463
}, _ir3m487 = {
    displayName: "sem.",
    relativeTime: _ir3m469
}, _ir3m488 = {
    displayName: "hora",
    relativeTime: _ir3m471
}, _ir3m489 = {
    displayName: "trim.",
    relativeTime: _ir3m473
}, _ir3m490 = {
    displayName: "minuto",
    relativeTime: _ir3m477
}, _ir3m491 = {
    decimal: ",",
    group: ".",
    list: ";",
    percentSign: "%",
    plusSign: "+",
    minusSign: "-",
    exponential: "E",
    superscriptingExponent: "×",
    perMille: "‰",
    infinity: "∞",
    nan: "NaN",
    timeSeparator: ":"
}, _ir3m492 = {
    displayName: "segundo",
    relative: [ "ahora" ],
    relativeTime: _ir3m478
}, _ir3m493 = {
    symbols: _ir3m491
}, _ir3m494 = {
    format: _ir3m373,
    numeric: _ir3m3,
    standAlone: _ir3m373
}, _ir3m495 = {
    displayName: "a",
    relative: _ir3m110,
    relativeTime: _ir3m456
}, _ir3m496 = {
    displayName: "m",
    relative: _ir3m112,
    relativeTime: _ir3m457
}, _ir3m497 = {
    displayName: "año",
    relative: _ir3m110,
    relativeTime: _ir3m464
}, _ir3m498 = {
    displayName: "mes",
    relative: _ir3m112,
    relativeTime: _ir3m468
}, _ir3m499 = {
    symbols: _ir3m491,
    digits: "renderSpelloutCardinal"
}, _ir3m500 = {
    displayName: "d",
    relative: _ir3m291,
    relativeTime: _ir3m465
}, _ir3m501 = {
    displayName: "día",
    relative: _ir3m291,
    relativeTime: _ir3m465
}, _ir3m502 = {
    abbreviated: _ir3m89,
    narrow: _ir3m33,
    wide: _ir3m336,
    "short": _ir3m51
}, _ir3m503 = {
    symbols: _ir3m491,
    digits: "renderSpelloutCardinalFinancial"
}, _ir3m504 = {
    abbreviated: _ir3m391,
    narrow: _ir3m105,
    wide: _ir3m391
}, _ir3m505 = {
    displayName: "semana",
    relative: _ir3m184,
    relativeTime: _ir3m476
}, _ir3m506 = {
    displayName: "trimestre",
    relative: _ir3m116,
    relativeTime: _ir3m483
}, _ir3m507 = {
    abbreviated: _ir3m410,
    narrow: _ir3m410,
    wide: _ir3m410
}, _ir3m508 = {
    format: _ir3m507
}, _ir3m509 = {
    abbreviated: _ir3m454,
    narrow: _ir3m85,
    wide: _ir3m472
}, _ir3m510 = {
    format: _ir3m482,
    standAlone: _ir3m482
}, _ir3m511 = {
    fullDate: "EEEE, d-M-y",
    longDate: "d-M-y",
    mediumDate: "d-M-y",
    shortDate: "d-M-y",
    fullTime: "H:mm:ss (zzzz)",
    longTime: "H:mm:ss z",
    mediumTime: "H:mm:ss",
    shortTime: "H:mm",
    shortDateTime: "d-M-y H:mm",
    mediumDateTime: "d-M-y H:mm:ss",
    longDateTime: "d-M-y H:mm:ss z",
    fullDateTime: "EEEE, d-M-y H:mm:ss (zzzz)"
}, _ir3m512 = {
    abbreviated: _ir3m462,
    narrow: _ir3m129,
    wide: _ir3m462
}, _ir3m513 = {
    abbreviated: _ir3m466,
    narrow: _ir3m105,
    wide: _ir3m466
}, _ir3m514 = {
    abbreviated: _ir3m470,
    narrow: _ir3m129,
    wide: _ir3m470
}, _ir3m515 = {
    abbreviated: _ir3m461,
    narrow: _ir3m105,
    wide: _ir3m481
}, _ir3m516 = {
    abbreviated: _ir3m474,
    narrow: _ir3m129,
    wide: _ir3m474
}, _ir3m517 = {
    abbreviated: _ir3m475,
    narrow: _ir3m105,
    wide: _ir3m475
}, _ir3m518 = {
    abbreviated: _ir3m467,
    narrow: _ir3m467,
    wide: _ir3m467
}, _ir3m519 = {
    fullDate: "EEEE, d 'de' MMMM 'de' y G",
    longDate: "d 'de' MMMM 'de' y G",
    mediumDate: "d/M/y G",
    shortDate: "d/M/yy G",
    fullTime: "H:mm:ss (zzzz)",
    longTime: "H:mm:ss z",
    mediumTime: "H:mm:ss",
    shortTime: "H:mm",
    shortDateTime: "d/M/yy G H:mm",
    mediumDateTime: "d/M/y G H:mm:ss",
    longDateTime: "d 'de' MMMM 'de' y G, H:mm:ss z",
    fullDateTime: "EEEE, d 'de' MMMM 'de' y G, H:mm:ss (zzzz)"
}, _ir3m520 = {
    "1000": _ir3m4,
    "10000": _ir3m9,
    "100000": _ir3m16,
    "1000000": _ir3m5,
    "10000000": _ir3m10,
    "100000000": _ir3m17,
    "1000000000": _ir3m26,
    "10000000000": _ir3m27,
    "100000000000": _ir3m36,
    "1000000000000": _ir3m6,
    "10000000000000": _ir3m11,
    "100000000000000": _ir3m18
}, _ir3m521 = {
    "1000": _ir3m19,
    "10000": _ir3m28,
    "100000": _ir3m37,
    "1000000": _ir3m20,
    "10000000": _ir3m29,
    "100000000": _ir3m38,
    "1000000000": _ir3m43,
    "10000000000": _ir3m44,
    "100000000000": _ir3m50,
    "1000000000000": _ir3m21,
    "10000000000000": _ir3m30,
    "100000000000000": _ir3m39
}, _ir3m522 = {
    abbreviated: _ir3m485,
    narrow: _ir3m485,
    wide: _ir3m485
}, _ir3m523 = {
    format: _ir3m502,
    standAlone: _ir3m502
}, _ir3m524 = {
    d: "d",
    Ed: "E d",
    Gy: "y",
    GyMMM: "M-y",
    GyMMMd: "d-M-y",
    GyMMMEd: "E, d-M-y",
    h: "hh a",
    H: "HH",
    hm: "hh:mm a",
    Hm: "HH:mm",
    hms: "hh:mm:ss a",
    Hms: "HH:mm:ss",
    M: "L",
    Md: "d-M",
    MEd: "E, d-M",
    MMM: "L",
    MMMd: "d-M",
    MMMEd: "E d-M",
    ms: "mm:ss",
    y: "y",
    yyyy: "y",
    yyyyM: "M-y",
    yyyyMd: "d-M-y",
    yyyyMEd: "E, d-M-y",
    yyyyMMM: "M-y",
    yyyyMMMd: "d-M-y",
    yyyyMMMEd: "E, d-M-y",
    yyyyMMMM: "M-y",
    yyyyQQQ: "QQQ y",
    yyyyQQQQ: "QQQQ y",
    E: "ccc",
    MMMMd: "MMMM d",
    UM: "U MM",
    UMd: "U MM-d",
    UMMM: "U MMM",
    UMMMd: "U MMM d",
    yMd: "r-MM-dd"
}, _ir3m525 = {
    format: _ir3m504,
    standAlone: _ir3m504
}, _ir3m526 = {
    "1000": _ir3m15,
    "10000": _ir3m25,
    "100000": _ir3m35,
    "1000000": _ir3m48,
    "10000000": _ir3m60,
    "100000000": _ir3m64,
    "1000000000": _ir3m74,
    "10000000000": _ir3m77,
    "100000000000": _ir3m84,
    "1000000000000": _ir3m49,
    "10000000000000": _ir3m61,
    "100000000000000": _ir3m65
}, _ir3m527 = {
    currencyMatch: /[^\u0024+<->\u005E`\u007C~¢-¦¨©¬®-±´¸×÷˂-˅˒-˟˥-˫˭˯-˿͵΄΅϶҂֏؆-؈؋؎؏۞۩۽۾߶৲৳৺৻૱୰௳-௺౿൹฿༁-༃༓༕-༗༚-༟༴༶༸྾-࿅࿇-࿌࿎࿏࿕-࿘႞႟᎐-᎙៛᥀᧞-᧿᭡-᭪᭴-᭼᾽᾿-῁῍-῏῝-῟῭-`´῾⁄⁒⁺-⁼₊-₌₠-₹℀℁℃-℆℈℉℔№-℘℞-℣℥℧℩℮℺℻⅀-⅄⅊-⅍⅏←-⌨⌫-⏳␀-␦⑀-⑊⒜-ⓩ─-⛿✁-❧➔-⟄⟇-⟥⟰-⦂⦙-⧗⧜-⧻⧾-⭌⭐-⭙⳥-⳪⺀-⺙⺛-⻳⼀-⿕⿰-⿻〄〒〓〠〶〷〾〿゛゜㆐㆑㆖-㆟㇀-㇣㈀-㈞㈪-㉇㉐㉠-㉿㊊-㊰㋀-㋾㌀-㏿䷀-䷿꒐-꓆꜀-꜖꜠꜡꞉꞊꠨-꠫꠶-꠹꩷-꩹﬩﮲-﯁﷼﷽﹢﹤-﹦﹩＄＋＜-＞＾｀｜～￠-￦￨-￮￼�]/,
    surroundingMatch: /[0-9²³¹¼-¾٠-٩۰-۹߀-߉०-९০-৯৴-৹੦-੯૦-૯୦-୯୲-୷௦-௲౦-౯౸-౾೦-೯൦-൵๐-๙໐-໙༠-༳၀-၉႐-႙፩-፼ᛮ-ᛰ០-៩៰-៹᠐-᠙᥆-᥏᧐-᧚᪀-᪉᪐-᪙᭐-᭙᮰-᮹᱀-᱉᱐-᱙⁰⁴-⁹₀-₉⅐-ↂↅ-↉①-⒛⓪-⓿❶-➓⳽〇〡-〩〸-〺㆒-㆕㈠-㈩㉈-㉏㉑-㉟㊀-㊉㊱-㊿꘠-꘩ꛦ-ꛯ꠰-꠵꣐-꣙꤀-꤉꧐-꧙꩐-꩙꯰-꯹０-９]/,
    insertBetween: " "
}, _ir3m528 = {
    format: _ir3m509,
    standAlone: _ir3m509
}, _ir3m529 = [ undefined, "jia-zi", "yi-chou", "bing-yin", "ding-mao", "wu-chen", "ji-si", "geng-wu", "xin-wei", "ren-shen", "gui-you", "jia-xu", "yi-hai", "bing-zi", "ding-chou", "wu-yin", "ji-mao", "geng-chen", "xin-si", "ren-wu", "gui-wei", "jia-shen", "yi-you", "bing-xu", "ding-hai", "wu-zi", "ji-chou", "geng-yin", "xin-mao", "ren-chen", "gui-si", "jia-wu", "yi-wei", "bing-shen", "ding-you", "wu-xu", "ji-hai", "geng-zi", "xin-chou", "ren-yin", "gui-mao", "jia-chen", "yi-si", "bing-wu", "ding-wei", "wu-shen", "ji-you", "geng-xu", "xin-hai", "ren-zi", "gui-chou", "jia-yin", "yi-mao", "bing-chen", "ding-si", "wu-wu", "ji-wei", "geng-shen", "xin-you", "ren-xu" ], _ir3m530 = {
    format: _ir3m515,
    standAlone: _ir3m515
}, _ir3m531 = {
    d: "d",
    E: "ccc",
    Ed: "E d",
    Gy: "y G",
    GyMMM: "MMM y G",
    GyMMMd: "d MMM y G",
    GyMMMEd: "E, d MMM y G",
    GyMMMM: "MMMM 'de' y G",
    GyMMMMd: "d 'de' MMMM 'de' y G",
    GyMMMMEd: "E, d 'de' MMMM 'de' y G",
    h: "hh a",
    H: "HH",
    hm: "hh:mm a",
    Hm: "HH:mm",
    hms: "hh:mm:ss a",
    Hms: "HH:mm:ss",
    M: "L",
    Md: "d/M",
    MEd: "E, d/M",
    MMM: "LLL",
    MMMd: "d MMM",
    MMMEd: "E, d MMM",
    MMMMd: "d 'de' MMMM",
    MMMMEd: "E, d 'de' MMMM",
    ms: "mm:ss",
    y: "y G",
    yyyy: "y G",
    yyyyM: "M/y GGGGG",
    yyyyMd: "d/M/y GGGGG",
    yyyyMEd: "E, d/M/y GGGGG",
    yyyyMMM: "MMM y G",
    yyyyMMMd: "d MMM y G",
    yyyyMMMEd: "EEE, d MMM y G",
    yyyyMMMM: "MMMM 'de' y G",
    yyyyMMMMd: "d 'de' MMMM 'de' y G",
    yyyyMMMMEd: "EEE, d 'de' MMMM 'de' y G",
    yyyyQQQ: "QQQ y G",
    yyyyQQQQ: "QQQQ 'de' y G",
    Ehm: "E h:mm a",
    EHm: "E HH:mm",
    Ehms: "E h:mm:ss a",
    EHms: "E HH:mm:ss"
}, _ir3m532 = {
    basic: _ir3m511,
    cldr: _ir3m524
}, _ir3m533 = {
    format: _ir3m522,
    standAlone: _ir3m518
}, _ir3m534 = {
    "long": _ir3m526,
    "short": _ir3m520,
    "default": "#,##0.###"
}, _ir3m535 = {
    d: {
        d: "d–d"
    },
    h: _ir3m12,
    H: {
        H: "HH–HH"
    },
    hm: _ir3m108,
    Hm: _ir3m45,
    hmv: _ir3m135,
    Hmv: _ir3m57,
    hv: _ir3m31,
    Hv: {
        H: "HH–HH v"
    },
    M: {
        M: "MM–MM"
    },
    Md: _ir3m58,
    MEd: _ir3m86,
    MMM: {
        M: "LLL–LLL"
    },
    MMMd: _ir3m40,
    MMMEd: _ir3m87,
    y: {
        y: "U–U"
    },
    yM: _ir3m46,
    yMd: _ir3m315,
    yMEd: _ir3m449,
    yMMM: _ir3m47,
    yMMMd: _ir3m128,
    yMMMEd: _ir3m436,
    yMMMM: _ir3m59
}, _ir3m536 = {
    basic: _ir3m519,
    cldr: _ir3m531
}, _ir3m537 = {
    d: {
        d: "d–d"
    },
    h: _ir3m12,
    H: {
        H: "HH–HH"
    },
    hm: _ir3m120,
    Hm: _ir3m52,
    hmv: _ir3m183,
    Hmv: _ir3m66,
    hv: _ir3m31,
    Hv: {
        H: "HH–HH v"
    },
    M: {
        M: "M–M"
    },
    Md: _ir3m13,
    MEd: _ir3m67,
    MMM: {
        M: "MMM–MMM"
    },
    MMMd: _ir3m76,
    MMMEd: _ir3m355,
    y: {
        y: "y–y G"
    },
    yM: _ir3m32,
    yMd: _ir3m115,
    yMEd: _ir3m426,
    yMMM: _ir3m102,
    yMMMd: _ir3m460,
    yMMMEd: _ir3m484,
    yMMMM: _ir3m119
}, _ir3m538 = {
    beforeCurrency: _ir3m527,
    afterCurrency: _ir3m527
}, _ir3m539 = {
    "short": _ir3m521,
    "default": "#,##0.00 ¤",
    one: "{0} {1}",
    other: "{0} {1}",
    currencySpacing: _ir3m538
}, _ir3m540 = {
    abbreviated: _ir3m529,
    narrow: _ir3m529,
    wide: _ir3m529
}, _ir3m541 = {
    format: _ir3m540
}, _ir3m542 = {
    scientific: {
        "default": "#E0"
    },
    decimal: _ir3m534,
    currency: _ir3m539,
    percent: _ir3m1
}, _ir3m543 = [ "Taika (645–650)", "Hakuchi (650–671)", "Hakuhō (672–686)", "Shuchō (686–701)", "Taihō (701–704)", "Keiun (704–708)", "Wadō (708–715)", "Reiki (715–717)", "Yōrō (717–724)", "Jinki (724–729)", "Tenpyō (729–749)", "Tenpyō-kampō (749-749)", "Tenpyō-shōhō (749-757)", "Tenpyō-hōji (757-765)", "Tenpyō-jingo (765-767)", "Jingo-keiun (767-770)", "Hōki (770–780)", "Ten-ō (781-782)", "Enryaku (782–806)", "Daidō (806–810)", "Kōnin (810–824)", "Tenchō (824–834)", "Jōwa (834–848)", "Kajō (848–851)", "Ninju (851–854)", "Saikō (854–857)", "Ten-an (857-859)", "Jōgan (859–877)", "Gangyō (877–885)", "Ninna (885–889)", "Kanpyō (889–898)", "Shōtai (898–901)", "Engi (901–923)", "Enchō (923–931)", "Jōhei (931–938)", "Tengyō (938–947)", "Tenryaku (947–957)", "Tentoku (957–961)", "Ōwa (961–964)", "Kōhō (964–968)", "Anna (968–970)", "Tenroku (970–973)", "Ten’en (973–976)", "Jōgen (976–978)", "Tengen (978–983)", "Eikan (983–985)", "Kanna (985–987)", "Eien (987–989)", "Eiso (989–990)", "Shōryaku (990–995)", "Chōtoku (995–999)", "Chōhō (999–1004)", "Kankō (1004–1012)", "Chōwa (1012–1017)", "Kannin (1017–1021)", "Jian (1021–1024)", "Manju (1024–1028)", "Chōgen (1028–1037)", "Chōryaku (1037–1040)", "Chōkyū (1040–1044)", "Kantoku (1044–1046)", "Eishō (1046–1053)", "Tengi (1053–1058)", "Kōhei (1058–1065)", "Jiryaku (1065–1069)", "Enkyū (1069–1074)", "Shōho (1074–1077)", "Shōryaku (1077–1081)", "Eihō (1081–1084)", "Ōtoku (1084–1087)", "Kanji (1087–1094)", "Kahō (1094–1096)", "Eichō (1096–1097)", "Jōtoku (1097–1099)", "Kōwa (1099–1104)", "Chōji (1104–1106)", "Kashō (1106–1108)", "Tennin (1108–1110)", "Ten-ei (1110-1113)", "Eikyū (1113–1118)", "Gen’ei (1118–1120)", "Hōan (1120–1124)", "Tenji (1124–1126)", "Daiji (1126–1131)", "Tenshō (1131–1132)", "Chōshō (1132–1135)", "Hōen (1135–1141)", "Eiji (1141–1142)", "Kōji (1142–1144)", "Ten’yō (1144–1145)", "Kyūan (1145–1151)", "Ninpei (1151–1154)", "Kyūju (1154–1156)", "Hōgen (1156–1159)", "Heiji (1159–1160)", "Eiryaku (1160–1161)", "Ōho (1161–1163)", "Chōkan (1163–1165)", "Eiman (1165–1166)", "Nin’an (1166–1169)", "Kaō (1169–1171)", "Shōan (1171–1175)", "Angen (1175–1177)", "Jishō (1177–1181)", "Yōwa (1181–1182)", "Juei (1182–1184)", "Genryaku (1184–1185)", "Bunji (1185–1190)", "Kenkyū (1190–1199)", "Shōji (1199–1201)", "Kennin (1201–1204)", "Genkyū (1204–1206)", "Ken’ei (1206–1207)", "Jōgen (1207–1211)", "Kenryaku (1211–1213)", "Kenpō (1213–1219)", "Jōkyū (1219–1222)", "Jōō (1222–1224)", "Gennin (1224–1225)", "Karoku (1225–1227)", "Antei (1227–1229)", "Kanki (1229–1232)", "Jōei (1232–1233)", "Tenpuku (1233–1234)", "Bunryaku (1234–1235)", "Katei (1235–1238)", "Ryakunin (1238–1239)", "En’ō (1239–1240)", "Ninji (1240–1243)", "Kangen (1243–1247)", "Hōji (1247–1249)", "Kenchō (1249–1256)", "Kōgen (1256–1257)", "Shōka (1257–1259)", "Shōgen (1259–1260)", "Bun’ō (1260–1261)", "Kōchō (1261–1264)", "Bun’ei (1264–1275)", "Kenji (1275–1278)", "Kōan (1278–1288)", "Shōō (1288–1293)", "Einin (1293–1299)", "Shōan (1299–1302)", "Kengen (1302–1303)", "Kagen (1303–1306)", "Tokuji (1306–1308)", "Enkyō (1308–1311)", "Ōchō (1311–1312)", "Shōwa (1312–1317)", "Bunpō (1317–1319)", "Genō (1319–1321)", "Genkō (1321–1324)", "Shōchū (1324–1326)", "Karyaku (1326–1329)", "Gentoku (1329–1331)", "Genkō (1331–1334)", "Kenmu (1334–1336)", "Engen (1336–1340)", "Kōkoku (1340–1346)", "Shōhei (1346–1370)", "Kentoku (1370–1372)", "Bunchū (1372–1375)", "Tenju (1375–1379)", "Kōryaku (1379–1381)", "Kōwa (1381–1384)", "Genchū (1384–1392)", "Meitoku (1384–1387)", "Kakei (1387–1389)", "Kōō (1389–1390)", "Meitoku (1390–1394)", "Ōei (1394–1428)", "Shōchō (1428–1429)", "Eikyō (1429–1441)", "Kakitsu (1441–1444)", "Bun’an (1444–1449)", "Hōtoku (1449–1452)", "Kyōtoku (1452–1455)", "Kōshō (1455–1457)", "Chōroku (1457–1460)", "Kanshō (1460–1466)", "Bunshō (1466–1467)", "Ōnin (1467–1469)", "Bunmei (1469–1487)", "Chōkyō (1487–1489)", "Entoku (1489–1492)", "Meiō (1492–1501)", "Bunki (1501–1504)", "Eishō (1504–1521)", "Taiei (1521–1528)", "Kyōroku (1528–1532)", "Tenbun (1532–1555)", "Kōji (1555–1558)", "Eiroku (1558–1570)", "Genki (1570–1573)", "Tenshō (1573–1592)", "Bunroku (1592–1596)", "Keichō (1596–1615)", "Genna (1615–1624)", "Kan’ei (1624–1644)", "Shōho (1644–1648)", "Keian (1648–1652)", "Jōō (1652–1655)", "Meireki (1655–1658)", "Manji (1658–1661)", "Kanbun (1661–1673)", "Enpō (1673–1681)", "Tenna (1681–1684)", "Jōkyō (1684–1688)", "Genroku (1688–1704)", "Hōei (1704–1711)", "Shōtoku (1711–1716)", "Kyōhō (1716–1736)", "Genbun (1736–1741)", "Kanpō (1741–1744)", "Enkyō (1744–1748)", "Kan’en (1748–1751)", "Hōreki (1751–1764)", "Meiwa (1764–1772)", "An’ei (1772–1781)", "Tenmei (1781–1789)", "Kansei (1789–1801)", "Kyōwa (1801–1804)", "Bunka (1804–1818)", "Bunsei (1818–1830)", "Tenpō (1830–1844)", "Kōka (1844–1848)", "Kaei (1848–1854)", "Ansei (1854–1860)", "Man’en (1860–1861)", "Bunkyū (1861–1864)", "Genji (1864–1865)", "Keiō (1865–1868)", "Meiji", "Taishō", "Shōwa", "Heisei" ], _ir3m544 = {
    dayParts: _ir3m508,
    days: _ir3m541,
    months: _ir3m541,
    years: _ir3m541,
    zodiacs: _ir3m508
}, _ir3m545 = {
    era: {
        displayName: "era"
    },
    year: _ir3m497,
    "year-short": _ir3m495,
    "year-narrow": _ir3m495,
    quarter: _ir3m506,
    "quarter-short": _ir3m489,
    "quarter-narrow": _ir3m489,
    month: _ir3m498,
    "month-short": _ir3m496,
    "month-narrow": _ir3m496,
    week: _ir3m505,
    "week-short": _ir3m487,
    "week-narrow": _ir3m487,
    day: _ir3m501,
    "day-short": _ir3m500,
    "day-narrow": _ir3m500,
    weekday: _ir3m41,
    dayperiod: _ir3m22,
    hour: _ir3m488,
    "hour-short": _ir3m479,
    "hour-narrow": _ir3m479,
    minute: _ir3m490,
    "minute-short": _ir3m486,
    "minute-narrow": _ir3m486,
    second: _ir3m492,
    "second-short": _ir3m480,
    "second-narrow": _ir3m480,
    zone: _ir3m23,
    sun: _ir3m414,
    "sun-short": _ir3m337,
    "sun-narrow": _ir3m151,
    mon: _ir3m372,
    "mon-short": _ir3m338,
    "mon-narrow": _ir3m152,
    tue: _ir3m394,
    "tue-short": _ir3m339,
    "tue-narrow": _ir3m153,
    wed: _ir3m448,
    "wed-short": _ir3m340,
    "wed-narrow": _ir3m154,
    thu: _ir3m395,
    "thu-short": _ir3m341,
    "thu-narrow": _ir3m155,
    fri: _ir3m415,
    "fri-short": _ir3m342,
    "fri-narrow": _ir3m156,
    sat: _ir3m396,
    "sat-short": _ir3m343,
    "sat-narrow": _ir3m157
}, _ir3m546 = {
    dateFormats: {
        basic: {},
        cldr: {}
    },
    fields: _ir3m545
}, _ir3m547 = {
    dateFormats: _ir3m536,
    datePartsOrder: "dmy",
    dateIntervalFormats: _ir3m537,
    dateIntervalFallbackFormat: "{0}–{1}",
    dayNames: _ir3m523,
    dayPeriods: _ir3m533,
    monthNames: _ir3m530,
    eraNames: _ir3m42,
    quarterNames: _ir3m510,
    fields: _ir3m545
}, _ir3m548 = {
    dateFormats: _ir3m532,
    datePartsOrder: "dmy",
    dateIntervalFormats: _ir3m535,
    dateIntervalFallbackFormat: "{0} – {1}",
    dayNames: _ir3m523,
    dayPeriods: _ir3m533,
    cyclicNames: _ir3m544,
    monthNames: _ir3m525,
    monthPatterns: _ir3m494,
    quarterNames: _ir3m510,
    fields: _ir3m545
};

inter.id = "es";

inter.delimiters = {
    quotationStart: "«",
    quotationEnd: "»",
    alternateQuotationStart: "“",
    alternateQuotationEnd: "”"
};

inter.listPatterns = {
    "default": _ir3m290,
    unit: _ir3m290,
    unitNarrow: {
        "2": "{0} {1}",
        start: "{0} {1}",
        middle: "{0} {1}",
        end: "{0} {1}"
    },
    unitShort: {
        "2": "{0} y {1}",
        start: "{0}, {1}",
        middle: "{0}, {1}",
        end: "{0}, {1}"
    }
};

inter.unitPatterns = {
    "long": {
        unit: {
            accelerationGForce: {
                one: "{0} unidad de fuerza gravitacional",
                other: "{0} unidades de fuerza gravitacional"
            },
            accelerationMeterPerSecondSquared: {
                one: "{0} metro por segundo al cuadrado",
                other: "{0} metros por segundo al cuadrado"
            },
            angleRevolution: {
                one: "{0} revolución",
                other: "{0} revoluciones"
            },
            angleRadian: {
                one: "{0} radián",
                other: "{0} radianes"
            },
            angleDegree: {
                one: "{0} grado",
                other: "{0} grados"
            },
            angleArcMinute: {
                one: "{0} minuto de arco",
                other: "{0} minutos de arco"
            },
            angleArcSecond: {
                one: "{0} segundo de arco",
                other: "{0} segundos de arco"
            },
            areaSquareKilometer: {
                one: "{0} kilómetro cuadrado",
                other: "{0} kilómetros cuadrados"
            },
            areaHectare: {
                one: "{0} hectárea",
                other: "{0} hectáreas"
            },
            areaSquareMeter: {
                one: "{0} metro cuadrado",
                other: "{0} metros cuadrados"
            },
            areaSquareCentimeter: {
                one: "{0} centímetro cuadrado",
                other: "{0} centímetros cuadrados"
            },
            areaSquareMile: {
                one: "{0} milla cuadrada",
                other: "{0} millas cuadradas"
            },
            areaAcre: {
                one: "{0} acre",
                other: "{0} acres"
            },
            areaSquareYard: {
                one: "{0} yarda cuadrada",
                other: "{0} yardas cuadradas"
            },
            areaSquareFoot: {
                one: "{0} pie cuadrado",
                other: "{0} pies cuadrados"
            },
            areaSquareInch: {
                one: "{0} pulgada cuadrada",
                other: "{0} pulgadas cuadradas"
            },
            concentrKarat: _ir3m62,
            consumptionLiterPerKilometer: {
                one: "{0} litro por kilómetro",
                other: "{0} litros por kilómetro"
            },
            "consumptionLiterPer-100kilometers": {
                one: "{0} litro por 100 kilómetros",
                other: "{0} litros por 100 kilómetros"
            },
            consumptionMilePerGallon: {
                one: "{0} milla por galón",
                other: "{0} millas por galón"
            },
            digitalTerabyte: {
                one: "{0} terabyte",
                other: "{0} terabytes"
            },
            digitalTerabit: {
                one: "{0} terabit",
                other: "{0} terabits"
            },
            digitalGigabyte: {
                one: "{0} gigabyte",
                other: "{0} gigabytes"
            },
            digitalGigabit: {
                one: "{0} gigabit",
                other: "{0} gigabits"
            },
            digitalMegabyte: {
                one: "{0} megabyte",
                other: "{0} megabytes"
            },
            digitalMegabit: {
                one: "{0} megabit",
                other: "{0} megabits"
            },
            digitalKilobyte: {
                one: "{0} kilobyte",
                other: "{0} kilobytes"
            },
            digitalKilobit: {
                one: "{0} kilobit",
                other: "{0} kilobits"
            },
            digitalByte: {
                one: "{0} byte",
                other: "{0} bytes"
            },
            digitalBit: {
                one: "{0} bit",
                other: "{0} bits"
            },
            durationCentury: {
                one: "{0} siglo",
                other: "{0} siglos"
            },
            durationYear: {
                one: "{0} año",
                other: "{0} años"
            },
            durationMonth: {
                one: "{0} mes",
                other: "{0} meses"
            },
            durationWeek: {
                one: "{0} semana",
                other: "{0} semanas"
            },
            durationDay: {
                one: "{0} día",
                other: "{0} días"
            },
            durationHour: {
                one: "{0} hora",
                other: "{0} horas"
            },
            durationMinute: {
                one: "{0} minuto",
                other: "{0} minutos"
            },
            durationSecond: {
                one: "{0} segundo",
                other: "{0} segundos"
            },
            durationMillisecond: {
                one: "{0} milisegundo",
                other: "{0} milisegundos"
            },
            durationMicrosecond: {
                one: "{0} microsegundo",
                other: "{0} microsegundos"
            },
            durationNanosecond: {
                one: "{0} nanosegundo",
                other: "{0} nanosegundos"
            },
            electricAmpere: {
                one: "{0} amperio",
                other: "{0} amperios"
            },
            electricMilliampere: {
                one: "{0} miliamperio",
                other: "{0} miliamperios"
            },
            electricOhm: {
                one: "{0} ohmio",
                other: "{0} ohmios"
            },
            electricVolt: {
                one: "{0} voltio",
                other: "{0} voltios"
            },
            energyKilocalorie: {
                one: "{0} kilocaloría",
                other: "{0} kilocalorías"
            },
            energyCalorie: _ir3m63,
            energyFoodcalorie: _ir3m63,
            energyKilojoule: {
                one: "{0} kilojulio",
                other: "{0} kilojulios"
            },
            energyJoule: {
                one: "{0} julio",
                other: "{0} julios"
            },
            energyKilowattHour: {
                one: "{0} kilovatio-hora",
                other: "{0} kilovatios-hora"
            },
            frequencyGigahertz: {
                one: "{0} gigahercio",
                other: "{0} gigahercios"
            },
            frequencyMegahertz: {
                one: "{0} megahercio",
                other: "{0} megahercios"
            },
            frequencyKilohertz: {
                one: "{0} kilohercio",
                other: "{0} kilohercios"
            },
            frequencyHertz: {
                one: "{0} hercio",
                other: "{0} hercios"
            },
            lengthKilometer: {
                one: "{0} kilómetro",
                other: "{0} kilómetros"
            },
            lengthMeter: {
                one: "{0} metro",
                other: "{0} metros"
            },
            lengthDecimeter: {
                one: "{0} decímetro",
                other: "{0} decímetros"
            },
            lengthCentimeter: {
                one: "{0} centímetro",
                other: "{0} centímetros"
            },
            lengthMillimeter: {
                one: "{0} milímetro",
                other: "{0} milímetros"
            },
            lengthMicrometer: {
                one: "{0} micrómetro",
                other: "{0} micrómetros"
            },
            lengthNanometer: {
                one: "{0} nanómetro",
                other: "{0} nanómetros"
            },
            lengthPicometer: {
                one: "{0} picómetro",
                other: "{0} picómetros"
            },
            lengthMile: {
                one: "{0} milla",
                other: "{0} millas"
            },
            lengthYard: {
                one: "{0} yarda",
                other: "{0} yardas"
            },
            lengthFoot: {
                one: "{0} pie",
                other: "{0} pies"
            },
            lengthInch: {
                one: "{0} pulgada",
                other: "{0} pulgadas"
            },
            lengthParsec: {
                one: "{0} parsec",
                other: "{0} parsecs"
            },
            lengthLightYear: {
                one: "{0} año luz",
                other: "{0} años luz"
            },
            lengthAstronomicalUnit: {
                one: "{0} unidad astronómica",
                other: "{0} unidades astronómicas"
            },
            lengthNauticalMile: {
                one: "{0} milla náutica",
                other: "{0} millas náuticas"
            },
            lengthMileScandinavian: {
                one: "{0} milla escandinava",
                other: "{0} millas escandinavas"
            },
            lightLux: {
                one: "{0} lux",
                other: "{0} luxes"
            },
            massMetricTon: {
                one: "{0} tonelada métrica",
                other: "{0} toneladas métricas"
            },
            massKilogram: {
                one: "{0} kilogramo",
                other: "{0} kilogramos"
            },
            massGram: {
                one: "{0} gramo",
                other: "{0} gramos"
            },
            massMilligram: {
                one: "{0} miligramo",
                other: "{0} miligramos"
            },
            massMicrogram: {
                one: "{0} microgramo",
                other: "{0} microgramos"
            },
            massTon: {
                one: "{0} tonelada",
                other: "{0} toneladas"
            },
            massPound: {
                one: "{0} libra",
                other: "{0} libras"
            },
            massOunce: {
                one: "{0} onza",
                other: "{0} onzas"
            },
            massOunceTroy: {
                one: "{0} onza troy",
                other: "{0} onzas troy"
            },
            massCarat: _ir3m62,
            powerGigawatt: {
                one: "{0} gigavatio",
                other: "{0} gigavatios"
            },
            powerMegawatt: {
                one: "{0} megavatio",
                other: "{0} megavatios"
            },
            powerKilowatt: {
                one: "{0} kilovatio",
                other: "{0} kilovatios"
            },
            powerWatt: {
                one: "{0} vatio",
                other: "{0} vatios"
            },
            powerMilliwatt: {
                one: "{0} milivatio",
                other: "{0} milivatios"
            },
            powerHorsepower: {
                one: "{0} caballo de vapor",
                other: "{0} caballos de vapor"
            },
            pressureHectopascal: {
                one: "{0} hectopascal",
                other: "{0} hectopascales"
            },
            pressureMillimeterOfMercury: {
                one: "{0} milímetro de mercurio",
                other: "{0} milímetros de mercurio"
            },
            pressurePoundPerSquareInch: {
                one: "{0} libra por pulgada cuadrada",
                other: "{0} libras por pulgada cuadrada"
            },
            pressureInchHg: {
                one: "{0} pulgada de mercurio",
                other: "{0} pulgadas de mercurio"
            },
            pressureMillibar: {
                one: "{0} milibar",
                other: "{0} milibares"
            },
            speedKilometerPerHour: {
                one: "{0} kilómetro por hora",
                other: "{0} kilómetros por hora"
            },
            speedMeterPerSecond: {
                one: "{0} metro por segundo",
                other: "{0} metros por segundo"
            },
            speedMilePerHour: {
                one: "{0} milla por hora",
                other: "{0} millas por hora"
            },
            speedKnot: {
                one: "{0} nudo",
                other: "{0} nudos"
            },
            temperatureGeneric: _ir3m7,
            temperatureCelsius: {
                one: "{0} grado Celsius",
                other: "{0} grados Celsius"
            },
            temperatureFahrenheit: {
                one: "{0} grado Fahrenheit",
                other: "{0} grados Fahrenheit"
            },
            temperatureKelvin: {
                one: "{0} kelvin",
                other: "{0} kelvin"
            },
            volumeCubicKilometer: {
                one: "{0} kilómetro cúbico",
                other: "{0} kilómetros cúbicos"
            },
            volumeCubicMeter: {
                one: "{0} metro cúbico",
                other: "{0} metros cúbicos"
            },
            volumeCubicCentimeter: {
                one: "{0} centímetro cúbico",
                other: "{0} centímetros cúbicos"
            },
            volumeCubicMile: {
                one: "{0} milla cúbica",
                other: "{0} millas cúbicas"
            },
            volumeCubicYard: {
                one: "{0} yarda cúbica",
                other: "{0} yardas cúbicas"
            },
            volumeCubicFoot: {
                one: "{0} pie cúbico",
                other: "{0} pies cúbicos"
            },
            volumeCubicInch: {
                one: "{0} pulgada cúbica",
                other: "{0} pulgadas cúbicas"
            },
            volumeMegaliter: {
                one: "{0} megalitro",
                other: "{0} megalitros"
            },
            volumeHectoliter: {
                one: "{0} hectolitro",
                other: "{0} hectolitros"
            },
            volumeLiter: {
                one: "{0} litro",
                other: "{0} litros"
            },
            volumeDeciliter: {
                one: "{0} decilitro",
                other: "{0} decilitros"
            },
            volumeCentiliter: {
                one: "{0} centilitro",
                other: "{0} centilitros"
            },
            volumeMilliliter: {
                one: "{0} mililitro",
                other: "{0} mililitros"
            },
            volumePintMetric: {
                one: "{0} pinta métrica",
                other: "{0} pintas métricas"
            },
            volumeCupMetric: {
                one: "{0} taza métrica",
                other: "{0} tazas métricas"
            },
            volumeAcreFoot: {
                one: "{0} acre-pie",
                other: "{0} acres-pies"
            },
            volumeGallon: {
                one: "{0} galón",
                other: "{0} galones"
            },
            volumeQuart: {
                one: "{0} cuarto",
                other: "{0} cuartos"
            },
            volumePint: {
                one: "{0} pinta",
                other: "{0} pintas"
            },
            volumeCup: {
                one: "{0} taza",
                other: "{0} tazas"
            },
            volumeFluidOunce: {
                one: "{0} onza fluida",
                other: "{0} onzas fluidas"
            },
            volumeTablespoon: {
                one: "{0} cucharada",
                other: "{0} cucharadas"
            },
            volumeTeaspoon: {
                one: "{0} cucharadita",
                other: "{0} cucharaditas"
            }
        },
        compoundUnit: {
            per: "{0} por {1}"
        }
    },
    "short": {
        unit: {
            accelerationGForce: {
                one: "{0} Fg",
                other: "{0} Fg"
            },
            accelerationMeterPerSecondSquared: {
                one: "{0} m/s²",
                other: "{0} m/s²"
            },
            angleRevolution: {
                one: "{0} rev",
                other: "{0} rev"
            },
            angleRadian: {
                one: "{0} rad",
                other: "{0} rad"
            },
            angleDegree: _ir3m7,
            angleArcMinute: {
                one: "{0} arcmin",
                other: "{0} arcmin"
            },
            angleArcSecond: {
                one: "{0} arcsec",
                other: "{0} arcsec"
            },
            areaSquareKilometer: {
                one: "{0} km²",
                other: "{0} km²"
            },
            areaHectare: {
                one: "{0} ha",
                other: "{0} ha"
            },
            areaSquareMeter: {
                one: "{0} m²",
                other: "{0} m²"
            },
            areaSquareCentimeter: {
                one: "{0} cm²",
                other: "{0} cm²"
            },
            areaSquareMile: {
                one: "{0} mi²",
                other: "{0} mi²"
            },
            areaAcre: {
                one: "{0} ac",
                other: "{0} ac"
            },
            areaSquareYard: {
                one: "{0} yd²",
                other: "{0} yd²"
            },
            areaSquareFoot: {
                one: "{0} ft²",
                other: "{0} ft²"
            },
            areaSquareInch: {
                one: "{0} in²",
                other: "{0} in²"
            },
            concentrKarat: _ir3m14,
            consumptionLiterPerKilometer: {
                one: "{0} l/km",
                other: "{0} l/km"
            },
            "consumptionLiterPer-100kilometers": {
                one: "{0} l/100 km",
                other: "{0} l/100 km"
            },
            consumptionMilePerGallon: {
                one: "{0} mi/gal",
                other: "{0} mi/gal"
            },
            digitalTerabyte: {
                one: "{0} TB",
                other: "{0} TB"
            },
            digitalTerabit: {
                one: "{0} Tb",
                other: "{0} Tb"
            },
            digitalGigabyte: {
                one: "{0} GB",
                other: "{0} GB"
            },
            digitalGigabit: {
                one: "{0} Gb",
                other: "{0} Gb"
            },
            digitalMegabyte: {
                one: "{0} MB",
                other: "{0} MB"
            },
            digitalMegabit: {
                one: "{0} Mb",
                other: "{0} Mb"
            },
            digitalKilobyte: {
                one: "{0} kB",
                other: "{0} kB"
            },
            digitalKilobit: {
                one: "{0} kb",
                other: "{0} kb"
            },
            digitalByte: {
                one: "{0} B",
                other: "{0} B"
            },
            digitalBit: {
                one: "{0} b",
                other: "{0} b"
            },
            durationCentury: {
                one: "{0} sig.",
                other: "{0} sig."
            },
            durationYear: {
                one: "{0} a",
                other: "{0} a"
            },
            durationMonth: {
                one: "{0} m.",
                other: "{0} m."
            },
            durationWeek: {
                one: "{0} sem.",
                other: "{0} sem."
            },
            durationDay: {
                one: "{0} d",
                other: "{0} d"
            },
            durationHour: {
                one: "{0} h",
                other: "{0} h"
            },
            durationMinute: {
                one: "{0} min",
                other: "{0} min"
            },
            durationSecond: {
                one: "{0} s",
                other: "{0} s"
            },
            durationMillisecond: {
                one: "{0} ms",
                other: "{0} ms"
            },
            durationMicrosecond: {
                one: "{0} μs",
                other: "{0} μs"
            },
            durationNanosecond: {
                one: "{0} ns",
                other: "{0} ns"
            },
            electricAmpere: {
                one: "{0} A",
                other: "{0} A"
            },
            electricMilliampere: {
                one: "{0} mA",
                other: "{0} mA"
            },
            electricOhm: {
                one: "{0} Ω",
                other: "{0} Ω"
            },
            electricVolt: {
                one: "{0} V",
                other: "{0} V"
            },
            energyKilocalorie: {
                one: "{0} kcal",
                other: "{0} kcal"
            },
            energyCalorie: _ir3m34,
            energyFoodcalorie: _ir3m34,
            energyKilojoule: {
                one: "{0} kJ",
                other: "{0} kJ"
            },
            energyJoule: {
                one: "{0} J",
                other: "{0} J"
            },
            energyKilowattHour: {
                one: "{0} kWh",
                other: "{0} kWh"
            },
            frequencyGigahertz: {
                one: "{0} GHz",
                other: "{0} GHz"
            },
            frequencyMegahertz: {
                one: "{0} MHz",
                other: "{0} MHz"
            },
            frequencyKilohertz: {
                one: "{0} kHz",
                other: "{0} kHz"
            },
            frequencyHertz: {
                one: "{0} Hz",
                other: "{0} Hz"
            },
            lengthKilometer: {
                one: "{0} km",
                other: "{0} km"
            },
            lengthMeter: {
                one: "{0} m",
                other: "{0} m"
            },
            lengthDecimeter: {
                one: "{0} dm",
                other: "{0} dm"
            },
            lengthCentimeter: {
                one: "{0} cm",
                other: "{0} cm"
            },
            lengthMillimeter: {
                one: "{0} mm",
                other: "{0} mm"
            },
            lengthMicrometer: {
                one: "{0} µm",
                other: "{0} µm"
            },
            lengthNanometer: {
                one: "{0} nm",
                other: "{0} nm"
            },
            lengthPicometer: {
                one: "{0} pm",
                other: "{0} pm"
            },
            lengthMile: {
                one: "{0} mi",
                other: "{0} mi"
            },
            lengthYard: {
                one: "{0} yd",
                other: "{0} yd"
            },
            lengthFoot: {
                one: "{0} ft",
                other: "{0} ft"
            },
            lengthInch: {
                one: "{0} in",
                other: "{0} in"
            },
            lengthParsec: {
                one: "{0} pc",
                other: "{0} pc"
            },
            lengthLightYear: {
                one: "{0} a. l.",
                other: "{0} a. l."
            },
            lengthAstronomicalUnit: {
                one: "{0} au",
                other: "{0} au"
            },
            lengthNauticalMile: {
                one: "{0} M",
                other: "{0} M"
            },
            lengthMileScandinavian: {
                one: "{0} mi esc.",
                other: "{0} mi esc."
            },
            lightLux: {
                one: "{0} lx",
                other: "{0} lx"
            },
            massMetricTon: {
                one: "{0} t",
                other: "{0} t"
            },
            massKilogram: {
                one: "{0} kg",
                other: "{0} kg"
            },
            massGram: {
                one: "{0} g",
                other: "{0} g"
            },
            massMilligram: {
                one: "{0} mg",
                other: "{0} mg"
            },
            massMicrogram: {
                one: "{0} µg",
                other: "{0} µg"
            },
            massTon: {
                one: "{0} ton",
                other: "{0} ton"
            },
            massPound: {
                one: "{0} lb",
                other: "{0} lb"
            },
            massOunce: {
                one: "{0} oz",
                other: "{0} oz"
            },
            massOunceTroy: {
                one: "{0} oz t",
                other: "{0} oz t"
            },
            massCarat: _ir3m14,
            powerGigawatt: {
                one: "{0} GW",
                other: "{0} GW"
            },
            powerMegawatt: {
                one: "{0} MW",
                other: "{0} MW"
            },
            powerKilowatt: {
                one: "{0} kW",
                other: "{0} kW"
            },
            powerWatt: {
                one: "{0} W",
                other: "{0} W"
            },
            powerMilliwatt: {
                one: "{0} mW",
                other: "{0} mW"
            },
            powerHorsepower: {
                one: "{0} CV",
                other: "{0} CV"
            },
            pressureHectopascal: {
                one: "{0} hPa",
                other: "{0} hPa"
            },
            pressureMillimeterOfMercury: {
                one: "{0} mmHg",
                other: "{0} mmHg"
            },
            pressurePoundPerSquareInch: {
                one: "{0} psi",
                other: "{0} psi"
            },
            pressureInchHg: {
                one: "{0} inHg",
                other: "{0} inHg"
            },
            pressureMillibar: {
                one: "{0} mbar",
                other: "{0} mbar"
            },
            speedKilometerPerHour: {
                one: "{0} km/h",
                other: "{0} km/h"
            },
            speedMeterPerSecond: {
                one: "{0} m/s",
                other: "{0} m/s"
            },
            speedMilePerHour: {
                one: "{0} mi/h",
                other: "{0} mi/h"
            },
            speedKnot: {
                one: "{0} kn",
                other: "{0} kn"
            },
            temperatureGeneric: _ir3m7,
            temperatureCelsius: {
                one: "{0} °C",
                other: "{0} °C"
            },
            temperatureFahrenheit: {
                one: "{0} °F",
                other: "{0} °F"
            },
            temperatureKelvin: {
                one: "{0} K",
                other: "{0} K"
            },
            volumeCubicKilometer: {
                one: "{0} km³",
                other: "{0} km³"
            },
            volumeCubicMeter: {
                one: "{0} m³",
                other: "{0} m³"
            },
            volumeCubicCentimeter: {
                one: "{0} cm³",
                other: "{0} cm³"
            },
            volumeCubicMile: {
                one: "{0} mi³",
                other: "{0} mi³"
            },
            volumeCubicYard: {
                one: "{0} yd³",
                other: "{0} yd³"
            },
            volumeCubicFoot: {
                one: "{0} ft³",
                other: "{0} ft³"
            },
            volumeCubicInch: {
                one: "{0} in³",
                other: "{0} in³"
            },
            volumeMegaliter: {
                one: "{0} Ml",
                other: "{0} Ml"
            },
            volumeHectoliter: {
                one: "{0} hl",
                other: "{0} hl"
            },
            volumeLiter: {
                one: "{0} l",
                other: "{0} l"
            },
            volumeDeciliter: {
                one: "{0} dl",
                other: "{0} dl"
            },
            volumeCentiliter: {
                one: "{0} cl",
                other: "{0} cl"
            },
            volumeMilliliter: {
                one: "{0} ml",
                other: "{0} ml"
            },
            volumePintMetric: {
                one: "{0} mpt",
                other: "{0} mpt"
            },
            volumeCupMetric: {
                one: "{0} mc",
                other: "{0} mc"
            },
            volumeAcreFoot: {
                one: "{0} ac ft",
                other: "{0} ac ft"
            },
            volumeGallon: {
                one: "{0} gal",
                other: "{0} gal"
            },
            volumeQuart: {
                one: "{0} qt",
                other: "{0} qt"
            },
            volumePint: {
                one: "{0} pt",
                other: "{0} pt"
            },
            volumeCup: {
                one: "{0} tza.",
                other: "{0} tza."
            },
            volumeFluidOunce: {
                one: "{0} fl oz",
                other: "{0} fl oz"
            },
            volumeTablespoon: {
                one: "{0} cda",
                other: "{0} cda"
            },
            volumeTeaspoon: {
                one: "{0} cdta",
                other: "{0} cdta"
            },
            concentrMilligramPerDeciliter: {
                other: "{0} mg/dL"
            },
            concentrMillimolePerLiter: {
                other: "{0} mmol/L"
            },
            concentrPartPerMillion: {
                other: "{0} ppm"
            },
            consumptionMilePerGallonImperial: {
                other: "{0} mpg Imp."
            },
            lengthFurlong: {
                other: "{0} fur"
            },
            lengthFathom: {
                other: "{0} fm"
            },
            massStone: {
                other: "{0} st"
            },
            volumeBushel: {
                other: "{0} bu"
            },
            volumeGallonImperial: {
                other: "{0} gal Imp."
            }
        },
        compoundUnit: {
            per: "{0}/{1}"
        }
    },
    narrow: {
        unit: {
            accelerationGForce: {
                one: "{0}G",
                other: "{0}G"
            },
            angleDegree: _ir3m7,
            angleArcMinute: {
                one: "{0}'",
                other: "{0}'"
            },
            angleArcSecond: {
                one: '{0}"',
                other: '{0}"'
            },
            areaSquareKilometer: {
                one: "{0}km²",
                other: "{0}km²"
            },
            areaHectare: {
                one: "{0}ha",
                other: "{0}ha"
            },
            areaSquareMeter: {
                one: "{0}m²",
                other: "{0}m²"
            },
            areaSquareMile: {
                one: "{0}mi²",
                other: "{0}mi²"
            },
            areaAcre: {
                one: "{0}ac",
                other: "{0}ac"
            },
            areaSquareFoot: {
                one: "{0}ft²",
                other: "{0}ft²"
            },
            "consumptionLiterPer-100kilometers": {
                one: "{0}l/100km",
                other: "{0}l/100km"
            },
            durationYear: {
                one: "{0}a",
                other: "{0}a"
            },
            durationMonth: _ir3m8,
            durationWeek: {
                one: "{0}sem",
                other: "{0}sem"
            },
            durationDay: {
                one: "{0}d",
                other: "{0}d"
            },
            durationHour: {
                one: "{0}h",
                other: "{0}h"
            },
            durationMinute: {
                one: "{0}min",
                other: "{0}min"
            },
            durationSecond: {
                one: "{0}s",
                other: "{0}s"
            },
            durationMillisecond: {
                one: "{0}ms",
                other: "{0}ms"
            },
            lengthKilometer: {
                one: "{0}km",
                other: "{0}km"
            },
            lengthMeter: _ir3m8,
            lengthCentimeter: {
                one: "{0}cm",
                other: "{0}cm"
            },
            lengthMillimeter: {
                one: "{0}mm",
                other: "{0}mm"
            },
            lengthPicometer: {
                one: "{0}pm",
                other: "{0}pm"
            },
            lengthMile: {
                one: "{0}mi",
                other: "{0}mi"
            },
            lengthYard: {
                one: "{0}yd",
                other: "{0}yd"
            },
            lengthFoot: {
                one: "{0}ft",
                other: "{0}ft"
            },
            lengthInch: {
                one: "{0}in",
                other: "{0}in"
            },
            lengthLightYear: {
                one: "{0}a.l.",
                other: "{0}a.l."
            },
            massKilogram: {
                one: "{0}kg",
                other: "{0}kg"
            },
            massGram: {
                one: "{0}g",
                other: "{0}g"
            },
            massPound: {
                one: "{0}lb",
                other: "{0}lb"
            },
            massOunce: {
                one: "{0}oz",
                other: "{0}oz"
            },
            powerKilowatt: {
                one: "{0}kW",
                other: "{0}kW"
            },
            powerWatt: {
                one: "{0}W",
                other: "{0}W"
            },
            powerHorsepower: {
                one: "{0}hp",
                other: "{0}hp"
            },
            pressureHectopascal: {
                one: "{0}hPa",
                other: "{0}hPa"
            },
            pressureInchHg: {
                one: "{0}inHg",
                other: "{0}inHg"
            },
            pressureMillibar: {
                one: "{0}mbar",
                other: "{0}mbar"
            },
            speedKilometerPerHour: {
                one: "{0}km/h",
                other: "{0}km/h"
            },
            speedMeterPerSecond: {
                one: "{0}m/s",
                other: "{0}m/s"
            },
            speedMilePerHour: {
                one: "{0}mi/h",
                other: "{0}mi/h"
            },
            temperatureCelsius: {
                one: "{0}°C",
                other: "{0}°C"
            },
            temperatureFahrenheit: {
                one: "{0}°F",
                other: "{0}°F"
            },
            volumeCubicKilometer: {
                one: "{0}km³",
                other: "{0}km³"
            },
            volumeCubicMile: {
                one: "{0}mi³",
                other: "{0}mi³"
            },
            volumeLiter: {
                one: "{0}l",
                other: "{0}l"
            }
        },
        compoundUnit: {
            per: "{0}/{1}"
        }
    }
};

inter.timeZoneFormats = {
    hour: [ "+HH:mm", "-HH:mm" ],
    gmt: "GMT{0}",
    gmtZero: "GMT",
    region: "hora de {0}",
    fallback: "{1} ({0})",
    regions: {
        daylight: "horario de verano de {0}",
        standard: "horario estándar de {0}"
    }
};

inter.characters = {
    exemplar: {
        "default": [ "a", "á", "b", "c", "d", "e", "é", "f", "g", "h", "i", "í", "ï", "j", "k", "l", "m", "n", "ñ", "o", "ó", "p", "q", "r", "s", "t", "u", "ú", "ü", "v", "w", "x", "y", "ý", "z" ],
        auxiliary: [ "ª", "à", "ă", "â", "å", "ä", "ã", "ā", "æ", "ç", "è", "ĕ", "ê", "ë", "ē", "ì", "ĭ", "î", "ī", "º", "ò", "ŏ", "ô", "ö", "ø", "ō", "œ", "ù", "ŭ", "û", "ū", "ÿ" ],
        index: [ "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "Ñ", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z" ],
        punctuation: [ "\\-", "‐", "–", "—", ",", ";", "\\:", "!", "¡", "?", "¿", ".", "…", "'", "‘", "’", '"', "“", "”", "«", "»", "(", ")", "\\[", "\\]", "§", "@", "*", "/", "\\\\", "\\&", "#", "†", "‡", "′", "″" ]
    },
    ellipsis: {
        "final": "{0}…",
        initial: "… {0}",
        medial: "{0}… {1}",
        "word-final": "{0}…",
        "word-initial": "… {0}",
        "word-medial": "{0}… {1}"
    },
    moreInformation: "?"
};

inter.numbers = {
    ahom: {
        symbols: _ir3m491,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    arab: {
        symbols: P.numbers.ahom.symbols,
        formats: _ir3m542,
        digits: [ "٠", "١", "٢", "٣", "٤", "٥", "٦", "٧", "٨", "٩" ]
    },
    arabext: {
        symbols: {
            decimal: "٫",
            group: "٬",
            list: "؛",
            percentSign: "٪",
            plusSign: "‎+‎",
            minusSign: "‎-‎",
            exponential: "×۱۰^",
            superscriptingExponent: "×",
            perMille: "؉",
            infinity: "∞",
            nan: "NaN",
            timeSeparator: "٫"
        },
        formats: _ir3m542,
        digits: [ "۰", "۱", "۲", "۳", "۴", "۵", "۶", "۷", "۸", "۹" ]
    },
    armn: {
        symbols: _ir3m491,
        digits: "renderArmenianUpper"
    },
    armnlow: {
        symbols: _ir3m491,
        digits: "renderArmenianLower"
    },
    bali: {
        symbols: _ir3m491,
        formats: _ir3m542,
        digits: [ "᭐", "᭑", "᭒", "᭓", "᭔", "᭕", "᭖", "᭗", "᭘", "᭙" ]
    },
    beng: {
        symbols: _ir3m491,
        formats: _ir3m542,
        digits: [ "০", "১", "২", "৩", "৪", "৫", "৬", "৭", "৮", "৯" ]
    },
    brah: {
        symbols: _ir3m491,
        formats: _ir3m542,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    cakm: {
        symbols: _ir3m491,
        formats: _ir3m542,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    cham: {
        symbols: _ir3m491,
        formats: _ir3m542,
        digits: [ "꩐", "꩑", "꩒", "꩓", "꩔", "꩕", "꩖", "꩗", "꩘", "꩙" ]
    },
    cyrl: {
        symbols: _ir3m491,
        digits: "renderCyrillicLower"
    },
    deva: {
        symbols: _ir3m491,
        formats: _ir3m542,
        digits: [ "०", "१", "२", "३", "४", "५", "६", "७", "८", "९" ]
    },
    ethi: {
        symbols: _ir3m491,
        digits: "renderEthiopic"
    },
    finance: _ir3m493,
    fullwide: {
        symbols: _ir3m491,
        formats: _ir3m542,
        digits: [ "０", "１", "２", "３", "４", "５", "６", "７", "８", "９" ]
    },
    geor: {
        symbols: _ir3m491,
        digits: "renderGeorgian"
    },
    grek: {
        symbols: _ir3m491,
        digits: "renderGreekUpper"
    },
    greklow: {
        symbols: _ir3m491,
        digits: "renderGreekLower"
    },
    gujr: {
        symbols: _ir3m491,
        formats: _ir3m542,
        digits: [ "૦", "૧", "૨", "૩", "૪", "૫", "૬", "૭", "૮", "૯" ]
    },
    guru: {
        symbols: _ir3m491,
        formats: _ir3m542,
        digits: [ "੦", "੧", "੨", "੩", "੪", "੫", "੬", "੭", "੮", "੯" ]
    },
    hanidays: {
        symbols: _ir3m491,
        digits: "renderSpelloutNumberingDays"
    },
    hanidec: {
        symbols: _ir3m491,
        formats: _ir3m542,
        digits: [ "〇", "一", "二", "三", "四", "五", "六", "七", "八", "九" ]
    },
    hans: _ir3m499,
    hansfin: _ir3m503,
    hant: _ir3m499,
    hantfin: _ir3m503,
    hebr: {
        symbols: _ir3m491,
        digits: "renderHebrew"
    },
    hmng: {
        symbols: _ir3m491,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    java: {
        symbols: _ir3m491,
        formats: _ir3m542,
        digits: [ "꧐", "꧑", "꧒", "꧓", "꧔", "꧕", "꧖", "꧗", "꧘", "꧙" ]
    },
    jpan: _ir3m499,
    jpanfin: _ir3m503,
    kali: {
        symbols: _ir3m491,
        formats: _ir3m542,
        digits: [ "꤀", "꤁", "꤂", "꤃", "꤄", "꤅", "꤆", "꤇", "꤈", "꤉" ]
    },
    khmr: {
        symbols: _ir3m491,
        formats: _ir3m542,
        digits: [ "០", "១", "២", "៣", "៤", "៥", "៦", "៧", "៨", "៩" ]
    },
    knda: {
        symbols: _ir3m491,
        formats: _ir3m542,
        digits: [ "೦", "೧", "೨", "೩", "೪", "೫", "೬", "೭", "೮", "೯" ]
    },
    lana: {
        symbols: _ir3m491,
        formats: _ir3m542,
        digits: [ "᪀", "᪁", "᪂", "᪃", "᪄", "᪅", "᪆", "᪇", "᪈", "᪉" ]
    },
    lanatham: {
        symbols: _ir3m491,
        formats: _ir3m542,
        digits: [ "᪐", "᪑", "᪒", "᪓", "᪔", "᪕", "᪖", "᪗", "᪘", "᪙" ]
    },
    laoo: {
        symbols: _ir3m491,
        formats: _ir3m542,
        digits: [ "໐", "໑", "໒", "໓", "໔", "໕", "໖", "໗", "໘", "໙" ]
    },
    latn: {
        symbols: _ir3m491,
        formats: _ir3m542,
        digits: [ "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" ]
    },
    lepc: {
        symbols: _ir3m491,
        formats: _ir3m542,
        digits: [ "᱀", "᱁", "᱂", "᱃", "᱄", "᱅", "᱆", "᱇", "᱈", "᱉" ]
    },
    limb: {
        symbols: _ir3m491,
        formats: _ir3m542,
        digits: [ "᥆", "᥇", "᥈", "᥉", "᥊", "᥋", "᥌", "᥍", "᥎", "᥏" ]
    },
    mathbold: {
        symbols: _ir3m491,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathdbl: {
        symbols: _ir3m491,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathmono: {
        symbols: _ir3m491,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathsanb: {
        symbols: _ir3m491,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathsans: {
        symbols: _ir3m491,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mlym: {
        symbols: _ir3m491,
        formats: _ir3m542,
        digits: [ "൦", "൧", "൨", "൩", "൪", "൫", "൬", "൭", "൮", "൯" ]
    },
    modi: {
        symbols: _ir3m491,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mong: {
        symbols: _ir3m491,
        formats: _ir3m542,
        digits: [ "᠐", "᠑", "᠒", "᠓", "᠔", "᠕", "᠖", "᠗", "᠘", "᠙" ]
    },
    mroo: {
        symbols: _ir3m491,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mtei: {
        symbols: _ir3m491,
        formats: _ir3m542,
        digits: [ "꯰", "꯱", "꯲", "꯳", "꯴", "꯵", "꯶", "꯷", "꯸", "꯹" ]
    },
    mymr: {
        symbols: _ir3m491,
        formats: _ir3m542,
        digits: [ "၀", "၁", "၂", "၃", "၄", "၅", "၆", "၇", "၈", "၉" ]
    },
    mymrshan: {
        symbols: _ir3m491,
        formats: _ir3m542,
        digits: [ "႐", "႑", "႒", "႓", "႔", "႕", "႖", "႗", "႘", "႙" ]
    },
    mymrtlng: {
        symbols: _ir3m491,
        digits: [ "꧰", "꧱", "꧲", "꧳", "꧴", "꧵", "꧶", "꧷", "꧸", "꧹" ]
    },
    "native": _ir3m493,
    nkoo: {
        symbols: _ir3m491,
        formats: _ir3m542,
        digits: [ "߀", "߁", "߂", "߃", "߄", "߅", "߆", "߇", "߈", "߉" ]
    },
    olck: {
        symbols: _ir3m491,
        formats: _ir3m542,
        digits: [ "᱐", "᱑", "᱒", "᱓", "᱔", "᱕", "᱖", "᱗", "᱘", "᱙" ]
    },
    orya: {
        symbols: _ir3m491,
        formats: _ir3m542,
        digits: [ "୦", "୧", "୨", "୩", "୪", "୫", "୬", "୭", "୮", "୯" ]
    },
    osma: {
        symbols: _ir3m491,
        formats: _ir3m542,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    roman: {
        symbols: _ir3m491,
        digits: "renderRomanUpper"
    },
    romanlow: {
        symbols: _ir3m491,
        digits: "renderRomanLower"
    },
    saur: {
        symbols: _ir3m491,
        formats: _ir3m542,
        digits: [ "꣐", "꣑", "꣒", "꣓", "꣔", "꣕", "꣖", "꣗", "꣘", "꣙" ]
    },
    shrd: {
        symbols: _ir3m491,
        formats: _ir3m542,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    sind: {
        symbols: _ir3m491,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    sinh: {
        symbols: _ir3m491,
        digits: [ "෦", "෧", "෨", "෩", "෪", "෫", "෬", "෭", "෮", "෯" ]
    },
    sora: {
        symbols: _ir3m491,
        formats: _ir3m542,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    sund: {
        symbols: _ir3m491,
        formats: _ir3m542,
        digits: [ "᮰", "᮱", "᮲", "᮳", "᮴", "᮵", "᮶", "᮷", "᮸", "᮹" ]
    },
    takr: {
        symbols: _ir3m491,
        formats: _ir3m542,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    talu: {
        symbols: _ir3m491,
        formats: _ir3m542,
        digits: [ "᧐", "᧑", "᧒", "᧓", "᧔", "᧕", "᧖", "᧗", "᧘", "᧙" ]
    },
    taml: {
        symbols: _ir3m491,
        digits: "renderTamil"
    },
    tamldec: {
        symbols: _ir3m491,
        formats: _ir3m542,
        digits: [ "௦", "௧", "௨", "௩", "௪", "௫", "௬", "௭", "௮", "௯" ]
    },
    telu: {
        symbols: _ir3m491,
        formats: _ir3m542,
        digits: [ "౦", "౧", "౨", "౩", "౪", "౫", "౬", "౭", "౮", "౯" ]
    },
    thai: {
        symbols: _ir3m491,
        formats: _ir3m542,
        digits: [ "๐", "๑", "๒", "๓", "๔", "๕", "๖", "๗", "๘", "๙" ]
    },
    tirh: {
        symbols: _ir3m491,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    tibt: {
        symbols: _ir3m491,
        formats: _ir3m542,
        digits: [ "༠", "༡", "༢", "༣", "༤", "༥", "༦", "༧", "༨", "༩" ]
    },
    traditio: _ir3m493,
    vaii: {
        symbols: _ir3m491,
        formats: _ir3m542,
        digits: [ "꘠", "꘡", "꘢", "꘣", "꘤", "꘥", "꘦", "꘧", "꘨", "꘩" ]
    },
    wara: {
        symbols: _ir3m491,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    }
};

inter.calendars = {
    buddhist: {
        dateFormats: _ir3m536,
        datePartsOrder: "dmy",
        dateIntervalFormats: _ir3m537,
        dateIntervalFallbackFormat: "{0}–{1}",
        dayNames: _ir3m523,
        dayPeriods: _ir3m533,
        monthNames: _ir3m528,
        eraNames: {
            wide: [ "BE" ],
            abbreviated: [ "BE" ]
        },
        quarterNames: _ir3m510,
        fields: _ir3m545
    },
    chinese: _ir3m548,
    coptic: {
        dateFormats: _ir3m536,
        datePartsOrder: "dmy",
        dateIntervalFormats: _ir3m537,
        dateIntervalFallbackFormat: "{0}–{1}",
        dayNames: _ir3m523,
        dayPeriods: _ir3m533,
        monthNames: {
            format: _ir3m514,
            standAlone: _ir3m514
        },
        eraNames: _ir3m91,
        quarterNames: _ir3m510,
        fields: _ir3m545
    },
    dangi: _ir3m548,
    ethioaa: _ir3m546,
    ethiopic: {
        dateFormats: _ir3m536,
        datePartsOrder: "dmy",
        dateIntervalFormats: _ir3m537,
        dateIntervalFallbackFormat: "{0}–{1}",
        dayNames: _ir3m523,
        dayPeriods: _ir3m533,
        monthNames: {
            format: _ir3m516,
            standAlone: _ir3m516
        },
        eraNames: _ir3m91,
        quarterNames: _ir3m510,
        fields: _ir3m545
    },
    gregorian: {
        dateFormats: {
            basic: {
                fullDate: "EEEE, d 'de' MMMM 'de' y",
                longDate: "d 'de' MMMM 'de' y",
                mediumDate: "d MMM y",
                shortDate: "d/M/yy",
                fullTime: "H:mm:ss (zzzz)",
                longTime: "H:mm:ss z",
                mediumTime: "H:mm:ss",
                shortTime: "H:mm",
                shortDateTime: "d/M/yy H:mm",
                mediumDateTime: "d MMM y H:mm:ss",
                longDateTime: "d 'de' MMMM 'de' y, H:mm:ss z",
                fullDateTime: "EEEE, d 'de' MMMM 'de' y, H:mm:ss (zzzz)"
            },
            cldr: {
                d: "d",
                E: "ccc",
                Ed: "E d",
                Ehm: "E, h:mm a",
                EHm: "E, H:mm",
                Ehms: "E, h:mm:ss a",
                EHms: "E, H:mm:ss",
                Gy: "y G",
                GyMMM: "MMM y G",
                GyMMMd: "d MMM y G",
                GyMMMEd: "E, d MMM y G",
                GyMMMM: "MMMM 'de' y G",
                GyMMMMd: "d 'de' MMMM 'de' y G",
                GyMMMMEd: "E, d 'de' MMMM 'de' y G",
                h: "h a",
                H: "H",
                hm: "h:mm a",
                Hm: "H:mm",
                hms: "h:mm:ss a",
                Hms: "H:mm:ss",
                hmsv: "h:mm:ss a v",
                Hmsv: "H:mm:ss v",
                hmsvvvv: "h:mm:ss a (vvvv)",
                Hmsvvvv: "H:mm:ss (vvvv)",
                hmv: "h:mm a v",
                Hmv: "H:mm v",
                M: "L",
                Md: "d/M",
                MEd: "E, d/M",
                MMd: "d/M",
                MMdd: "d/M",
                MMM: "LLL",
                MMMd: "d MMM",
                MMMEd: "E, d MMM",
                MMMMd: "d 'de' MMMM",
                MMMMEd: "E, d 'de' MMMM",
                ms: "mm:ss",
                y: "y",
                yM: "M/y",
                yMd: "d/M/y",
                yMEd: "EEE, d/M/y",
                yMM: "M/y",
                yMMM: "MMM y",
                yMMMd: "d MMM y",
                yMMMEd: "EEE, d MMM y",
                yMMMM: "MMMM 'de' y",
                yMMMMd: "d 'de' MMMM 'de' y",
                yMMMMEd: "EEE, d 'de' MMMM 'de' y",
                yQQQ: "QQQ y",
                yQQQQ: "QQQQ 'de' y"
            }
        },
        datePartsOrder: "dmy",
        dateIntervalFormats: {
            d: {
                d: "d–d"
            },
            h: _ir3m12,
            H: {
                H: "H–H"
            },
            hm: _ir3m120,
            Hm: {
                H: "H:mm–H:mm",
                m: "H:mm–H:mm"
            },
            hmv: _ir3m135,
            Hmv: {
                H: "H:mm–H:mm v",
                m: "H:mm–H:mm v"
            },
            hv: _ir3m31,
            Hv: {
                H: "H–H v"
            },
            M: {
                M: "M–M"
            },
            Md: _ir3m13,
            MEd: _ir3m67,
            MMM: {
                M: "MMM–MMM"
            },
            MMMd: {
                d: "d–d MMM",
                M: "d MMM – d MMM"
            },
            MMMEd: {
                d: "E, d MMM – E, d MMM",
                M: "E, d MMM – E, d MMM"
            },
            MMMMd: {
                d: "d–d 'de' MMMM",
                M: "d 'de' MMMM–d 'de' MMMM"
            },
            MMMMEd: {
                d: "E, d 'de' MMMM–E, d 'de' MMMM",
                M: "E, d 'de' MMMM–E, d 'de' MMMM"
            },
            y: {
                y: "y–y"
            },
            yM: {
                M: "M/y–M/y",
                y: "M/y–M/y"
            },
            yMd: {
                d: "d/M/y–d/M/y",
                M: "d/M/y–d/M/y",
                y: "d/M/y–d/M/y"
            },
            yMEd: {
                d: "E, d/M/y – E, d/M/y",
                M: "E, d/M/y – E, d/M/y",
                y: "E, d/M/y – E, d/M/y"
            },
            yMMM: {
                M: "MMM–MMM y",
                y: "MMM y – MMM y"
            },
            yMMMd: {
                d: "d–d MMM y",
                M: "d MMM – d MMM y",
                y: "d MMM y – d MMM y"
            },
            yMMMEd: {
                d: "E, d MMM – E, d MMM y",
                M: "E, d MMM – E, d MMM y",
                y: "E, d MMM y – E, d MMM y"
            },
            yMMMM: {
                M: "MMMM–MMMM 'de' y",
                y: "MMMM 'de' y – MMMM 'de' y"
            },
            yMMMMd: {
                d: "d–d 'de' MMMM 'de' y",
                M: "d 'de' MMMM–d 'de' MMMM 'de' y",
                y: "d 'de' MMMM 'de' y–d 'de' MMMM 'de' y"
            },
            yMMMMEd: {
                d: "E, d 'de' MMMM–E, d 'de' MMMM 'de' y",
                M: "E, d 'de' MMMM–E, d 'de' MMMM 'de' y",
                y: "E, d 'de' MMMM 'de' y–E, d 'de' MMMM 'de' y"
            }
        },
        dateIntervalFallbackFormat: "{0}–{1}",
        dayNames: _ir3m523,
        dayPeriods: _ir3m533,
        monthNames: _ir3m528,
        eraNames: {
            wide: [ "antes de Cristo", "después de Cristo" ],
            abbreviated: [ "a. C.", "d. C." ]
        },
        quarterNames: _ir3m510,
        fields: _ir3m545
    },
    hebrew: {
        dateFormats: _ir3m536,
        datePartsOrder: "dmy",
        dateIntervalFormats: _ir3m537,
        dateIntervalFallbackFormat: "{0}–{1}",
        dayNames: _ir3m523,
        dayPeriods: _ir3m533,
        monthNames: {
            format: _ir3m512,
            standAlone: _ir3m512
        },
        eraNames: {
            wide: [ "AM" ],
            abbreviated: [ "AM" ]
        },
        quarterNames: _ir3m510,
        fields: _ir3m545
    },
    indian: {
        dateFormats: _ir3m536,
        datePartsOrder: "dmy",
        dateIntervalFormats: _ir3m537,
        dateIntervalFallbackFormat: "{0}–{1}",
        dayNames: _ir3m523,
        dayPeriods: _ir3m533,
        monthNames: {
            format: _ir3m517,
            standAlone: _ir3m517
        },
        eraNames: {
            wide: [ "Saka" ],
            abbreviated: [ "Saka" ]
        },
        quarterNames: _ir3m510,
        fields: _ir3m545
    },
    islamic: _ir3m547,
    "islamic-umalqura": _ir3m547,
    "islamic-tbla": _ir3m547,
    "islamic-civil": _ir3m547,
    "islamic-rgsa": _ir3m547,
    iso8601: _ir3m546,
    japanese: {
        dateFormats: {
            basic: {
                fullDate: "EEEE, d 'de' MMMM 'de' y G",
                longDate: "d 'de' MMMM 'de' y G",
                mediumDate: "dd/MM/y G",
                shortDate: "dd/MM/yy GGGGG",
                fullTime: "H:mm:ss (zzzz)",
                longTime: "H:mm:ss z",
                mediumTime: "H:mm:ss",
                shortTime: "H:mm",
                shortDateTime: "dd/MM/yy GGGGG H:mm",
                mediumDateTime: "dd/MM/y G H:mm:ss",
                longDateTime: "d 'de' MMMM 'de' y G, H:mm:ss z",
                fullDateTime: "EEEE, d 'de' MMMM 'de' y G, H:mm:ss (zzzz)"
            },
            cldr: _ir3m531
        },
        datePartsOrder: "dmy",
        dateIntervalFormats: _ir3m537,
        dateIntervalFallbackFormat: "{0}–{1}",
        dayNames: _ir3m523,
        dayPeriods: _ir3m533,
        monthNames: _ir3m528,
        eraNames: {
            wide: _ir3m543,
            abbreviated: _ir3m543
        },
        quarterNames: _ir3m510,
        fields: _ir3m545
    },
    persian: {
        dateFormats: _ir3m536,
        datePartsOrder: "dmy",
        dateIntervalFormats: _ir3m537,
        dateIntervalFallbackFormat: "{0}–{1}",
        dayNames: _ir3m523,
        dayPeriods: _ir3m533,
        monthNames: {
            format: _ir3m513,
            standAlone: _ir3m513
        },
        eraNames: {
            wide: [ "AP" ],
            abbreviated: [ "AP" ]
        },
        quarterNames: _ir3m510,
        fields: _ir3m545
    },
    roc: {
        dateFormats: _ir3m536,
        datePartsOrder: "dmy",
        dateIntervalFormats: _ir3m537,
        dateIntervalFallbackFormat: "{0}–{1}",
        dayNames: _ir3m523,
        dayPeriods: _ir3m533,
        monthNames: _ir3m528,
        eraNames: {
            wide: _ir3m24,
            abbreviated: _ir3m24
        },
        quarterNames: _ir3m510,
        fields: _ir3m545
    },
    islamicc: _ir3m546
};

inter.pluralRule = function(n) {
    if (typeof n === "string") n = parseInt(n, 10);
    if (n === 1) return "one";
    return "other";
};

inter.renderDigitsOrdinal = function(n) {
    if (n < 0) return "−" + this.renderDigitsOrdinal(-n);
    if (n >= 0) return this.renderDigitsOrdinalMasculine(n);
};

inter.renderSpelloutNumbering = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "menos " + this.renderSpelloutNumbering(-n);
    if (isFractional && n > 1) return this.renderSpelloutNumbering(Math.floor(n)) + " punto " + this.renderSpelloutNumbering(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 2e12) return this.renderSpelloutCardinalMasculine(Math.floor(n / 1e12)) + " billiones" + (n === 2e12 ? "" : " " + this.renderSpelloutNumbering(n % 1e12));
    if (n >= 1e12) return "un billón" + (n === 1e12 ? "" : " " + this.renderSpelloutNumbering(n % 1e12));
    if (n >= 2e6) return this.renderSpelloutCardinalMasculine(Math.floor(n / 1e6)) + " millones" + (n === 2e6 ? "" : " " + this.renderSpelloutNumbering(n % 1e6));
    if (n >= 1e6) return "un millón" + (n === 1e6 ? "" : " " + this.renderSpelloutNumbering(n % 1e6));
    if (n >= 2e3) return this.renderSpelloutCardinalMasculine(Math.floor(n / 1e3)) + " mil" + (n === 2e3 ? "" : " " + this.renderSpelloutNumbering(n % 1e3));
    if (n >= 1e3) return "mil" + (n === 1e3 ? "" : " " + this.renderSpelloutNumbering(n % 1e3));
    if (n >= 900) return "novecientos" + (n === 900 ? "" : " " + this.renderSpelloutNumbering(n % 100));
    if (n >= 800) return "ochocientos" + (n === 800 ? "" : " " + this.renderSpelloutNumbering(n % 100));
    if (n >= 700) return "setecientos" + (n === 700 ? "" : " " + this.renderSpelloutNumbering(n % 100));
    if (n >= 600) return "seiscientos" + (n === 600 ? "" : " " + this.renderSpelloutNumbering(n % 100));
    if (n >= 500) return "quinientos" + (n === 500 ? "" : " " + this.renderSpelloutNumbering(n % 100));
    if (n >= 400) return "cuatrocientos" + (n === 400 ? "" : " " + this.renderSpelloutNumbering(n % 100));
    if (n >= 300) return "trescientos" + (n === 300 ? "" : " " + this.renderSpelloutNumbering(n % 100));
    if (n >= 200) return "doscientos" + (n === 200 ? "" : " " + this.renderSpelloutNumbering(n % 100));
    if (n >= 101) return "ciento " + this.renderSpelloutNumbering(n % 100);
    if (n >= 100) return "cien";
    if (n >= 90) return "noventa" + (n === 90 ? "" : " y " + this.renderSpelloutNumbering(n % 10));
    if (n >= 80) return "ochenta" + (n === 80 ? "" : " y " + this.renderSpelloutNumbering(n % 10));
    if (n >= 70) return "setenta" + (n === 70 ? "" : " y " + this.renderSpelloutNumbering(n % 10));
    if (n >= 60) return "sesenta" + (n === 60 ? "" : " y " + this.renderSpelloutNumbering(n % 10));
    if (n >= 50) return "cincuenta" + (n === 50 ? "" : " y " + this.renderSpelloutNumbering(n % 10));
    if (n >= 40) return "cuarenta" + (n === 40 ? "" : " y " + this.renderSpelloutNumbering(n % 10));
    if (n >= 30) return "treinta" + (n === 30 ? "" : " y " + this.renderSpelloutNumbering(n % 10));
    if (n >= 27) return "veinti" + this.renderSpelloutNumbering(n % 10);
    if (n >= 26) return "veintiséis";
    if (n >= 25) return "veinticinco";
    if (n >= 24) return "veinticuatro";
    if (n >= 23) return "veintitrés";
    if (n >= 22) return "veintidós";
    if (n >= 21) return "veintiuno";
    if (n >= 20) return "veinte";
    if (n >= 17) return "dieci" + this.renderSpelloutNumbering(n % 10);
    if (n >= 16) return "dieciséis";
    if (n >= 15) return "quince";
    if (n >= 14) return "catorce";
    if (n >= 13) return "trece";
    if (n >= 12) return "doce";
    if (n >= 11) return "once";
    if (n >= 10) return "diez";
    if (n >= 9) return "nueve";
    if (n >= 8) return "ocho";
    if (n >= 7) return "siete";
    if (n >= 6) return "seis";
    if (n >= 5) return "cinco";
    if (n >= 4) return "cuatro";
    if (n >= 3) return "tres";
    if (n >= 2) return "dos";
    if (n >= 1) return "uno";
    if (n >= 0) return "cero";
};

inter.renderArmenianUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderArmenianUpper(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e4) return this.renderNumber(n, "#,##0");
    if (n >= 9e3) return "Ք" + (n === 9e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 8e3) return "Փ" + (n === 8e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 7e3) return "Ւ" + (n === 7e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 6e3) return "Ց" + (n === 6e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 5e3) return "Ր" + (n === 5e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 4e3) return "Տ" + (n === 4e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 3e3) return "Վ" + (n === 3e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 2e3) return "Ս" + (n === 2e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 1e3) return "Ռ" + (n === 1e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 900) return "Ջ" + (n === 900 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 800) return "Պ" + (n === 800 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 700) return "Չ" + (n === 700 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 600) return "Ո" + (n === 600 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 500) return "Շ" + (n === 500 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 400) return "Ն" + (n === 400 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 300) return "Յ" + (n === 300 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 200) return "Մ" + (n === 200 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 100) return "Ճ" + (n === 100 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 90) return "Ղ" + (n === 90 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 80) return "Ձ" + (n === 80 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 70) return "Հ" + (n === 70 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 60) return "Կ" + (n === 60 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 50) return "Ծ" + (n === 50 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 40) return "Խ" + (n === 40 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 30) return "Լ" + (n === 30 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 20) return "Ի" + (n === 20 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 10) return "Ժ" + (n === 10 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 9) return "Թ";
    if (n >= 8) return "Ը";
    if (n >= 7) return "Է";
    if (n >= 6) return "Զ";
    if (n >= 5) return "Ե";
    if (n >= 4) return "Դ";
    if (n >= 3) return "Գ";
    if (n >= 2) return "Բ";
    if (n >= 1) return "Ա";
    if (n >= 0) return "0";
};

inter.renderArmenianLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderArmenianLower(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e4) return this.renderNumber(n, "#,##0");
    if (n >= 9e3) return "ք" + (n === 9e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 8e3) return "փ" + (n === 8e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 7e3) return "ւ" + (n === 7e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 6e3) return "ց" + (n === 6e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 5e3) return "ր" + (n === 5e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 4e3) return "տ" + (n === 4e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 3e3) return "վ" + (n === 3e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 2e3) return "ս" + (n === 2e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 1e3) return "ռ" + (n === 1e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 900) return "ջ" + (n === 900 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 800) return "պ" + (n === 800 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 700) return "չ" + (n === 700 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 600) return "ո" + (n === 600 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 500) return "շ" + (n === 500 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 400) return "ն" + (n === 400 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 300) return "յ" + (n === 300 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 200) return "մ" + (n === 200 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 100) return "ճ" + (n === 100 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 90) return "ղ" + (n === 90 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 80) return "ձ" + (n === 80 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 70) return "հ" + (n === 70 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 60) return "կ" + (n === 60 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 50) return "ծ" + (n === 50 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 40) return "խ" + (n === 40 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 30) return "լ" + (n === 30 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 20) return "ի" + (n === 20 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 10) return "ժ" + (n === 10 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 9) return "թ";
    if (n >= 8) return "ը";
    if (n >= 7) return "է";
    if (n >= 6) return "զ";
    if (n >= 5) return "ե";
    if (n >= 4) return "դ";
    if (n >= 3) return "գ";
    if (n >= 2) return "բ";
    if (n >= 1) return "ա";
    if (n >= 0) return "0";
};

inter.renderCyrillicLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderCyrillicLower(-n);
    if (isFractional && n > 1) return this.renderCyrillicLower(Math.floor(n)) + "." + this.renderCyrillicLower(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e15) return "҂҂҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e15)) + (n === 1e15 ? "" : " " + this.renderCyrillicLower(n % 1e15));
    if (n >= 1e12) return "҂҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e12)) + (n === 1e12 ? "" : " " + this.renderCyrillicLower(n % 1e12));
    if (n >= 1e9) return "҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e9)) + (n === 1e9 ? "" : " " + this.renderCyrillicLower(n % 1e9));
    if (n >= 1e6) return "҂҂" + this.renderCyrillicLower(Math.floor(n / 1e6)) + (n === 1e6 ? "" : " " + this.renderCyrillicLower(n % 1e6));
    if (n >= 11e3) return this.renderCyrillicLowerThousands(Math.floor(n / 1e4)) + (n === 11e3 ? "" : " " + this.renderCyrillicLower(n % 1e4));
    if (n >= 1e4) return "҂" + this.renderCyrillicLower(Math.floor(n / 1e4)) + (n === 1e4 ? "" : " " + this.renderCyrillicLower(n % 1e4));
    if (n >= 1e3) return "҂" + this.renderCyrillicLower110(Math.floor(n / 1e3)) + this.renderCyrillicLowerPost(n % 1e3);
    if (n >= 900) return "ц" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 801) return "ѿ" + this.renderCyrillicLower(n % 100);
    if (n >= 800) return "ѿ҃";
    if (n >= 700) return "ѱ" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 600) return "х" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 500) return "ф" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 400) return "у" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 300) return "т" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 200) return "с" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 100) return "р" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 90) return "ч" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 80) return "п" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 70) return "ѻ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 60) return "ѯ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 50) return "н" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 40) return "м" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 30) return "л" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 20) return "к" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 19) return "ѳ҃і";
    if (n >= 18) return "и҃і";
    if (n >= 17) return "з҃і";
    if (n >= 16) return "ѕ҃і";
    if (n >= 15) return "є҃і";
    if (n >= 14) return "д҃і";
    if (n >= 13) return "г҃і";
    if (n >= 12) return "в҃і";
    if (n >= 11) return "а҃і";
    if (n >= 1) return this.renderCyrillicLower110(n) + "҃";
    if (n >= 0) return "0҃";
};

inter.renderEthiopic = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderEthiopic(-n);
    if (isFractional && n > 1) return this.renderEthiopic(Math.floor(n)) + "፡" + this.renderEthiopic(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,###0");
    if (n >= 2e16) return this.renderEthiopic(Math.floor(n / 1e16)) + "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 1e16) return "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 2e12) return this.renderEthiopic(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1e12) return "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 2e8) return this.renderEthiopic(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1e8) return "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 2e4) return this.renderEthiopic(Math.floor(n / 1e4)) + "፼" + (n === 2e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 1e4) return "፼" + (n === 1e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 200) return this.renderEthiopic(Math.floor(n / 100)) + "፻" + (n === 200 ? "" : this.renderEthiopic(n % 100));
    if (n >= 100) return "፻" + (n === 100 ? "" : this.renderEthiopic(n % 100));
    if (n >= 90) return "፺" + (n === 90 ? "" : this.renderEthiopic(n % 10));
    if (n >= 80) return "፹" + (n === 80 ? "" : this.renderEthiopic(n % 10));
    if (n >= 70) return "፸" + (n === 70 ? "" : this.renderEthiopic(n % 10));
    if (n >= 60) return "፷" + (n === 60 ? "" : this.renderEthiopic(n % 10));
    if (n >= 50) return "፶" + (n === 50 ? "" : this.renderEthiopic(n % 10));
    if (n >= 40) return "፵" + (n === 40 ? "" : this.renderEthiopic(n % 10));
    if (n >= 30) return "፴" + (n === 30 ? "" : this.renderEthiopic(n % 10));
    if (n >= 20) return "፳" + (n === 20 ? "" : this.renderEthiopic(n % 10));
    if (n >= 10) return "፲" + (n === 10 ? "" : this.renderEthiopic(n % 10));
    if (n >= 9) return "፱";
    if (n >= 8) return "፰";
    if (n >= 7) return "፯";
    if (n >= 6) return "፮";
    if (n >= 5) return "፭";
    if (n >= 4) return "፬";
    if (n >= 3) return "፫";
    if (n >= 2) return "፪";
    if (n >= 1) return "፩";
    if (n >= 0) return "ባዶ";
};

inter.renderGeorgian = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGeorgian(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 2e4) return this.renderNumber(n, "#,##0");
    if (n >= 1e4) return "ჯ" + (n === 1e4 ? "" : this.renderGeorgian(n % 1e4));
    if (n >= 9e3) return "ჵ" + (n === 9e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 8e3) return "ჴ" + (n === 8e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 7e3) return "ხ" + (n === 7e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 6e3) return "ჭ" + (n === 6e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 5e3) return "წ" + (n === 5e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 4e3) return "ძ" + (n === 4e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 3e3) return "ც" + (n === 3e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 2e3) return "ჩ" + (n === 2e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 1e3) return "შ" + (n === 1e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 900) return "ყ" + (n === 900 ? "" : this.renderGeorgian(n % 100));
    if (n >= 800) return "ღ" + (n === 800 ? "" : this.renderGeorgian(n % 100));
    if (n >= 700) return "ქ" + (n === 700 ? "" : this.renderGeorgian(n % 100));
    if (n >= 600) return "ფ" + (n === 600 ? "" : this.renderGeorgian(n % 100));
    if (n >= 500) return "ჳ" + (n === 500 ? "" : this.renderGeorgian(n % 100));
    if (n >= 400) return "უ" + (n === 400 ? "" : this.renderGeorgian(n % 100));
    if (n >= 300) return "ტ" + (n === 300 ? "" : this.renderGeorgian(n % 100));
    if (n >= 200) return "ს" + (n === 200 ? "" : this.renderGeorgian(n % 100));
    if (n >= 100) return "რ" + (n === 100 ? "" : this.renderGeorgian(n % 100));
    if (n >= 90) return "ჟ" + (n === 90 ? "" : this.renderGeorgian(n % 10));
    if (n >= 80) return "პ" + (n === 80 ? "" : this.renderGeorgian(n % 10));
    if (n >= 70) return "ო" + (n === 70 ? "" : this.renderGeorgian(n % 10));
    if (n >= 60) return "ჲ" + (n === 60 ? "" : this.renderGeorgian(n % 10));
    if (n >= 50) return "ნ" + (n === 50 ? "" : this.renderGeorgian(n % 10));
    if (n >= 40) return "მ" + (n === 40 ? "" : this.renderGeorgian(n % 10));
    if (n >= 30) return "ლ" + (n === 30 ? "" : this.renderGeorgian(n % 10));
    if (n >= 20) return "კ" + (n === 20 ? "" : this.renderGeorgian(n % 10));
    if (n >= 10) return "ი" + (n === 10 ? "" : this.renderGeorgian(n % 10));
    if (n >= 9) return "თ";
    if (n >= 8) return "ჱ";
    if (n >= 7) return "ზ";
    if (n >= 6) return "ვ";
    if (n >= 5) return "ე";
    if (n >= 4) return "დ";
    if (n >= 3) return "გ";
    if (n >= 2) return "ბ";
    if (n >= 1) return "ა";
    if (n >= 0) return this.renderNumber(n, "#,##0");
};

inter.renderGreekUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGreekUpper(-n);
    if (isFractional && n > 1) return this.renderGreekUpper(Math.floor(n)) + "." + this.renderGreekUpper(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 0) return this.renderGreekNumeralMajuscules(n) + "´";
};

inter.renderGreekLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGreekLower(-n);
    if (isFractional && n > 1) return this.renderGreekLower(Math.floor(n)) + "." + this.renderGreekLower(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 0) return this.renderGreekNumeralMinuscules(n) + "´";
};

inter.renderSpelloutCardinal = function(n) {
    if (n < 0) return "−" + this.renderSpelloutCardinal(-n);
    if (n >= 0) return this.renderNumber(n, "#,##0.#");
};

inter.renderHebrew = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderHebrew(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1000001) return this.renderNumber(n, "#,##0");
    if (n >= 1e6) return "אלף אלפים";
    if (n >= 3001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 3001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 3e3) return this.renderHebrew(Math.floor(n / 1e3)) + " אלפים";
    if (n >= 2001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 2001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 2e3) return "אלפיים";
    if (n >= 1001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 1001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 1e3) return "אלף";
    if (n >= 901) return "תתק" + this.renderHebrew099(n % 100);
    if (n >= 900) return "תת״ק";
    if (n >= 801) return "תת" + this.renderHebrew099(n % 100);
    if (n >= 800) return "ת״ת";
    if (n >= 745) return "תש" + this.renderHebrew099(n % 100);
    if (n >= 744) return "תשד״מ";
    if (n >= 701) return "תש" + this.renderHebrew099(n % 100);
    if (n >= 700) return "ת״ש";
    if (n >= 699) return "תר" + this.renderHebrew099(n % 100);
    if (n >= 698) return "תרח״צ";
    if (n >= 601) return "תר" + this.renderHebrew099(n % 100);
    if (n >= 600) return "ת״ר";
    if (n >= 501) return "תק" + this.renderHebrew099(n % 100);
    if (n >= 500) return "ת״ק";
    if (n >= 400) return "ת" + this.renderHebrew099(n % 100);
    if (n >= 345) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 344) return "שד״מ";
    if (n >= 305) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 304) return "ד״ש";
    if (n >= 300) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 299) return "ר" + this.renderHebrew099(n % 100);
    if (n >= 298) return "רח״צ";
    if (n >= 200) return "ר" + this.renderHebrew099(n % 100);
    if (n >= 100) return "ק" + this.renderHebrew099(n % 100);
    if (n >= 91) return "צ״" + this.renderHebrewItem(n % 10);
    if (n >= 90) return "צ׳";
    if (n >= 81) return "פ״" + this.renderHebrewItem(n % 10);
    if (n >= 80) return "פ׳";
    if (n >= 71) return "ע״" + this.renderHebrewItem(n % 10);
    if (n >= 70) return "ע׳";
    if (n >= 61) return "ס״" + this.renderHebrewItem(n % 10);
    if (n >= 60) return "ס׳";
    if (n >= 51) return "נ״" + this.renderHebrewItem(n % 10);
    if (n >= 50) return "נ׳";
    if (n >= 41) return "מ״" + this.renderHebrewItem(n % 10);
    if (n >= 40) return "מ׳";
    if (n >= 31) return "ל״" + this.renderHebrewItem(n % 10);
    if (n >= 30) return "ל׳";
    if (n >= 21) return "כ״" + this.renderHebrewItem(n % 10);
    if (n >= 20) return "כ׳";
    if (n >= 17) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "ט״ז";
    if (n >= 15) return "ט״ו";
    if (n >= 11) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 0) return this.renderHebrewItem(n) + "׳";
};

inter.renderRomanUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderRomanUpper(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 4e5) return this.renderNumber(n, "#,##0");
    if (n >= 3e5) return "ↈↈↈ" + (n === 3e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 2e5) return "ↈↈ" + (n === 2e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 1e5) return "ↈ" + (n === 1e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 9e4) return "ↂↈ" + (n === 9e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 8e4) return "ↇↂↂↂ" + (n === 8e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 7e4) return "ↇↂↂ" + (n === 7e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 6e4) return "ↇↂ" + (n === 6e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 5e4) return "ↇ" + (n === 5e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 4e4) return "ↂↇ" + (n === 4e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 3e4) return "ↂↂↂ" + (n === 3e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 2e4) return "ↂↂ" + (n === 2e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 1e4) return "ↂ" + (n === 1e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 9e3) return "Mↂ" + (n === 9e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 8e3) return "ↁMMM" + (n === 8e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 7e3) return "ↁMM" + (n === 7e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 6e3) return "ↁM" + (n === 6e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 5e3) return "ↁ" + (n === 5e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 4e3) return "Mↁ" + (n === 4e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 3e3) return "MMM" + (n === 3e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 2e3) return "MM" + (n === 2e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 1e3) return "M" + (n === 1e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 900) return "CM" + (n === 900 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 800) return "DCCC" + (n === 800 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 700) return "DCC" + (n === 700 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 600) return "DC" + (n === 600 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 500) return "D" + (n === 500 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 400) return "CD" + (n === 400 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 300) return "CCC" + (n === 300 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 200) return "CC" + (n === 200 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 100) return "C" + (n === 100 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 90) return "XC" + (n === 90 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 80) return "LXXX" + (n === 80 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 70) return "LXX" + (n === 70 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 60) return "LX" + (n === 60 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 50) return "L" + (n === 50 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 40) return "XL" + (n === 40 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 30) return "XXX" + (n === 30 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 20) return "XX" + (n === 20 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 10) return "X" + (n === 10 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 9) return "IX";
    if (n >= 8) return "VIII";
    if (n >= 7) return "VII";
    if (n >= 6) return "VI";
    if (n >= 5) return "V";
    if (n >= 4) return "IV";
    if (n >= 3) return "III";
    if (n >= 2) return "II";
    if (n >= 1) return "I";
    if (n >= 0) return "N";
};

inter.renderRomanLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderRomanLower(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 5e3) return this.renderNumber(n, "#,##0");
    if (n >= 4e3) return "mmmm" + (n === 4e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 3e3) return "mmm" + (n === 3e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 2e3) return "mm" + (n === 2e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 1e3) return "m" + (n === 1e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 900) return "cm" + (n === 900 ? "" : this.renderRomanLower(n % 100));
    if (n >= 800) return "dccc" + (n === 800 ? "" : this.renderRomanLower(n % 100));
    if (n >= 700) return "dcc" + (n === 700 ? "" : this.renderRomanLower(n % 100));
    if (n >= 600) return "dc" + (n === 600 ? "" : this.renderRomanLower(n % 100));
    if (n >= 500) return "d" + (n === 500 ? "" : this.renderRomanLower(n % 100));
    if (n >= 400) return "cd" + (n === 400 ? "" : this.renderRomanLower(n % 100));
    if (n >= 300) return "ccc" + (n === 300 ? "" : this.renderRomanLower(n % 100));
    if (n >= 200) return "cc" + (n === 200 ? "" : this.renderRomanLower(n % 100));
    if (n >= 100) return "c" + (n === 100 ? "" : this.renderRomanLower(n % 100));
    if (n >= 90) return "xc" + (n === 90 ? "" : this.renderRomanLower(n % 10));
    if (n >= 80) return "lxxx" + (n === 80 ? "" : this.renderRomanLower(n % 10));
    if (n >= 70) return "lxx" + (n === 70 ? "" : this.renderRomanLower(n % 10));
    if (n >= 60) return "lx" + (n === 60 ? "" : this.renderRomanLower(n % 10));
    if (n >= 50) return "l" + (n === 50 ? "" : this.renderRomanLower(n % 10));
    if (n >= 40) return "xl" + (n === 40 ? "" : this.renderRomanLower(n % 10));
    if (n >= 30) return "xxx" + (n === 30 ? "" : this.renderRomanLower(n % 10));
    if (n >= 20) return "xx" + (n === 20 ? "" : this.renderRomanLower(n % 10));
    if (n >= 10) return "x" + (n === 10 ? "" : this.renderRomanLower(n % 10));
    if (n >= 9) return "ix";
    if (n >= 8) return "viii";
    if (n >= 7) return "vii";
    if (n >= 6) return "vi";
    if (n >= 5) return "v";
    if (n >= 4) return "iv";
    if (n >= 3) return "iii";
    if (n >= 2) return "ii";
    if (n >= 1) return "i";
    if (n >= 0) return "n";
};

inter.renderTamil = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderTamil(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e8) return this.renderNumber(n, "#,##,##0");
    if (n >= 1e6) return this.renderTamil(Math.floor(n / 1e6)) + "௱௲" + (n === 1e6 ? "" : this.renderTamilThousands(n % 1e6));
    if (n >= 2e3) return this.renderTamil(Math.floor(n / 1e3)) + "௲" + (n === 2e3 ? "" : this.renderTamil(n % 1e3));
    if (n >= 1e3) return "௲" + (n === 1e3 ? "" : this.renderTamil(n % 1e3));
    if (n >= 200) return this.renderTamil(Math.floor(n / 100)) + "௱" + (n === 200 ? "" : this.renderTamil(n % 100));
    if (n >= 100) return "௱" + (n === 100 ? "" : this.renderTamil(n % 100));
    if (n >= 20) return this.renderTamil(Math.floor(n / 10)) + "௰" + (n === 20 ? "" : this.renderTamil(n % 10));
    if (n >= 10) return "௰" + (n === 10 ? "" : this.renderTamil(n % 10));
    if (n >= 9) return "௯";
    if (n >= 8) return "௮";
    if (n >= 7) return "௭";
    if (n >= 6) return "௬";
    if (n >= 5) return "௫";
    if (n >= 4) return "௪";
    if (n >= 3) return "௩";
    if (n >= 2) return "௨";
    if (n >= 1) return "௧";
    if (n >= 0) return "௦";
};

inter.renderDigitsOrdinalMasculine = function(n) {
    if (n < 0) return "−" + this.renderDigitsOrdinalMasculine(-n);
    if (n >= 0) return this.renderNumber(n, "#,##0") + ".º";
};

inter.renderSpelloutCardinalMasculine = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "menos " + this.renderSpelloutCardinalMasculine(-n);
    if (isFractional && n > 1) return this.renderSpelloutCardinalMasculine(Math.floor(n)) + " punto " + this.renderSpelloutCardinalMasculine(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 2e12) return this.renderSpelloutCardinalMasculine(Math.floor(n / 1e12)) + " billiones" + (n === 2e12 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e12));
    if (n >= 1e12) return "un billón" + (n === 1e12 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e12));
    if (n >= 2e6) return this.renderSpelloutCardinalMasculine(Math.floor(n / 1e6)) + " millones" + (n === 2e6 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e6));
    if (n >= 1e6) return "un millón" + (n === 1e6 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e6));
    if (n >= 2e3) return this.renderSpelloutCardinalMasculine(Math.floor(n / 1e3)) + " mil" + (n === 2e3 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e3));
    if (n >= 1e3) return "mil" + (n === 1e3 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 1e3));
    if (n >= 900) return "nove­cientos" + (n === 900 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 100));
    if (n >= 800) return "ocho­cientos" + (n === 800 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 100));
    if (n >= 700) return "sete­cientos" + (n === 700 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 100));
    if (n >= 600) return "seis­cientos" + (n === 600 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 100));
    if (n >= 500) return "quinientos" + (n === 500 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 100));
    if (n >= 400) return "cuatrocientos" + (n === 400 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 100));
    if (n >= 300) return "trescientos" + (n === 300 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 100));
    if (n >= 200) return "doscientos" + (n === 200 ? "" : " " + this.renderSpelloutCardinalMasculine(n % 100));
    if (n >= 101) return "ciento " + this.renderSpelloutCardinalMasculine(n % 100);
    if (n >= 100) return "cien";
    if (n >= 90) return "noventa" + (n === 90 ? "" : " y " + this.renderSpelloutCardinalMasculine(n % 10));
    if (n >= 80) return "ochenta" + (n === 80 ? "" : " y " + this.renderSpelloutCardinalMasculine(n % 10));
    if (n >= 70) return "setenta" + (n === 70 ? "" : " y " + this.renderSpelloutCardinalMasculine(n % 10));
    if (n >= 60) return "sesenta" + (n === 60 ? "" : " y " + this.renderSpelloutCardinalMasculine(n % 10));
    if (n >= 50) return "cincuenta" + (n === 50 ? "" : " y " + this.renderSpelloutCardinalMasculine(n % 10));
    if (n >= 40) return "cuarenta" + (n === 40 ? "" : " y " + this.renderSpelloutCardinalMasculine(n % 10));
    if (n >= 30) return "treinta" + (n === 30 ? "" : " y " + this.renderSpelloutCardinalMasculine(n % 10));
    if (n >= 22) return this.renderSpelloutNumbering(n);
    if (n >= 21) return "veintiún";
    if (n >= 2) return this.renderSpelloutNumbering(n);
    if (n >= 1) return "un";
    if (n >= 0) return "cero";
};

inter.renderCyrillicLowerThousands = function(n) {
    if (n >= 900) return "҂ц" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 800) return "҂ѿ" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 700) return "҂ѱ" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 600) return "҂х" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 500) return "҂ф" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 400) return "҂у" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 300) return "҂т" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 200) return "҂с" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 100) return "҂р" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 90) return "҂ч" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 80) return "҂п" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 70) return "҂ѻ" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 60) return "҂ѯ" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 50) return "҂н" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 40) return "҂м" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 30) return "҂л" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 20) return "҂к" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 19) return "҂ѳ҃҂і";
    if (n >= 18) return "҂и҃҂і";
    if (n >= 17) return "҂з҃҂і";
    if (n >= 16) return "҂ѕ҃҂і";
    if (n >= 15) return "҂є҃҂і";
    if (n >= 14) return "҂д҃҂і";
    if (n >= 13) return "҂г҃҂і";
    if (n >= 12) return "҂в҃҂і";
    if (n >= 11) return "҂а҃҂і";
    if (n >= 10) return "҃҂і";
    if (n >= 9) return "҃҂ѳ";
    if (n >= 8) return "҃҂и";
    if (n >= 7) return "҃҂з";
    if (n >= 6) return "҃҂ѕ";
    if (n >= 5) return "҃҂є";
    if (n >= 4) return "҃҂д";
    if (n >= 3) return "҃҂г";
    if (n >= 2) return "҃҂в";
    if (n >= 1) return "҃҂а";
    if (n >= 0) return "҃";
};

inter.renderCyrillicLower110 = function(n) {
    if (n >= 10) return "і";
    if (n >= 9) return "ѳ";
    if (n >= 8) return "и";
    if (n >= 7) return "з";
    if (n >= 6) return "ѕ";
    if (n >= 5) return "є";
    if (n >= 4) return "д";
    if (n >= 3) return "г";
    if (n >= 2) return "в";
    if (n >= 1) return "а";
};

inter.renderCyrillicLowerPost = function(n) {
    if (n >= 1) return this.renderCyrillicLower(n);
    if (n >= 0) return "҃";
};

inter.renderCyrillicLowerFinal = function(n) {
    if (n >= 91) return "ч" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 90) return "҃ч";
    if (n >= 81) return "п" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 80) return "҃п";
    if (n >= 71) return "ѻ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 70) return "҃ѻ";
    if (n >= 61) return "ѯ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 60) return "҃ѯ";
    if (n >= 51) return "н" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 50) return "҃н";
    if (n >= 41) return "м" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 40) return "҃м";
    if (n >= 31) return "л" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 30) return "҃л";
    if (n >= 21) return "к" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 20) return "҃к";
    if (n >= 19) return "ѳ҃і";
    if (n >= 18) return "и҃і";
    if (n >= 17) return "з҃і";
    if (n >= 16) return "ѕ҃і";
    if (n >= 15) return "є҃і";
    if (n >= 14) return "д҃і";
    if (n >= 13) return "г҃і";
    if (n >= 12) return "в҃і";
    if (n >= 11) return "а҃і";
    if (n >= 1) return "҃" + this.renderCyrillicLower110(n);
    if (n >= 0) return "҃";
};

inter.renderEthiopicP3 = function(n) {
    if (n >= 1e12) return this.renderEthiopic(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1) return "፼፼፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼፼፼";
};

inter.renderEthiopicP2 = function(n) {
    if (n >= 1e8) return this.renderEthiopic(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1) return "፼፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼፼";
};

inter.renderEthiopicP1 = function(n) {
    if (n >= 1e4) return this.renderEthiopic(Math.floor(n / 1e4)) + "፼" + (n === 1e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 1) return "፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼";
};

inter.renderGreekNumeralMajuscules = function(n) {
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e16) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e16)) + "ΜΜΜΜ" + (n === 1e16 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e16));
    if (n >= 1e12) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e12)) + "ΜΜΜ" + (n === 1e12 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e12));
    if (n >= 1e8) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e8)) + "ΜΜ" + (n === 1e8 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e8));
    if (n >= 1e4) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e4)) + "Μ" + (n === 1e4 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e4));
    if (n >= 1e3) return "͵" + this.renderGreekNumeralMajuscules(Math.floor(n / 1e3)) + (n === 1e3 ? "" : this.renderGreekNumeralMajuscules(n % 1e3));
    if (n >= 900) return "Ϡ" + (n === 900 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 800) return "Ω" + (n === 800 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 700) return "Ψ" + (n === 700 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 600) return "Χ" + (n === 600 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 500) return "Φ" + (n === 500 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 400) return "Υ" + (n === 400 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 300) return "Τ" + (n === 300 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 200) return "Σ" + (n === 200 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 100) return "Ρ" + (n === 100 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 90) return "Ϟ" + (n === 90 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 80) return "Π" + (n === 80 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 70) return "Ο" + (n === 70 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 60) return "Ξ" + (n === 60 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 50) return "Ν" + (n === 50 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 40) return "Μ" + (n === 40 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 30) return "Λ" + (n === 30 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 20) return "Κ" + (n === 20 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 10) return "Ι" + (n === 10 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 9) return "Θ";
    if (n >= 8) return "Η";
    if (n >= 7) return "Ζ";
    if (n >= 6) return "Ϝ";
    if (n >= 5) return "Ε";
    if (n >= 4) return "Δ";
    if (n >= 3) return "Γ";
    if (n >= 2) return "Β";
    if (n >= 1) return "Α";
    if (n >= 0) return "𐆊";
};

inter.renderGreekNumeralMinuscules = function(n) {
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e16) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e16)) + "μμμμ" + (n === 1e16 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e16));
    if (n >= 1e12) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e12)) + "μμμ" + (n === 1e12 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e12));
    if (n >= 1e8) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e8)) + "μμ" + (n === 1e8 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e8));
    if (n >= 1e4) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e4)) + "μ" + (n === 1e4 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e4));
    if (n >= 1e3) return "͵" + this.renderGreekNumeralMinuscules(Math.floor(n / 1e3)) + (n === 1e3 ? "" : this.renderGreekNumeralMinuscules(n % 1e3));
    if (n >= 900) return "ϡ" + (n === 900 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 800) return "ω" + (n === 800 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 700) return "ψ" + (n === 700 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 600) return "χ" + (n === 600 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 500) return "φ" + (n === 500 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 400) return "υ" + (n === 400 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 300) return "τ" + (n === 300 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 200) return "σ" + (n === 200 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 100) return "ρ" + (n === 100 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 90) return "ϟ" + (n === 90 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 80) return "π" + (n === 80 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 70) return "ο" + (n === 70 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 60) return "ξ" + (n === 60 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 50) return "ν" + (n === 50 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 40) return "μ" + (n === 40 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 30) return "λ" + (n === 30 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 20) return "κ" + (n === 20 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 10) return "ι" + (n === 10 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 9) return "θ";
    if (n >= 8) return "η";
    if (n >= 7) return "ζ";
    if (n >= 6) return "ϝ";
    if (n >= 5) return "ε";
    if (n >= 4) return "δ";
    if (n >= 3) return "γ";
    if (n >= 2) return "β";
    if (n >= 1) return "α";
    if (n >= 0) return "𐆊";
};

inter.renderHebrewThousands = function(n) {
    if (n >= 401) return this.renderHebrew(n) + "׳";
    if (n >= 100) return this.renderHebrew(n) + (n === 100 ? "" : "׳");
    if (n >= 10) return this.renderHebrew(n) + (n === 10 ? "" : "׳");
    if (n >= 0) return this.renderHebrew(n);
};

inter.renderHebrew099 = function(n) {
    if (n >= 91) return "צ״" + this.renderHebrewItem(n % 10);
    if (n >= 90) return "״צ";
    if (n >= 81) return "פ״" + this.renderHebrewItem(n % 10);
    if (n >= 80) return "״פ";
    if (n >= 71) return "ע״" + this.renderHebrewItem(n % 10);
    if (n >= 70) return "״ע";
    if (n >= 61) return "ס״" + this.renderHebrewItem(n % 10);
    if (n >= 60) return "״ס";
    if (n >= 51) return "נ״" + this.renderHebrewItem(n % 10);
    if (n >= 50) return "״נ";
    if (n >= 41) return "מ״" + this.renderHebrewItem(n % 10);
    if (n >= 40) return "״מ";
    if (n >= 31) return "ל״" + this.renderHebrewItem(n % 10);
    if (n >= 30) return "״ל";
    if (n >= 21) return "כ״" + this.renderHebrewItem(n % 10);
    if (n >= 20) return "״כ";
    if (n >= 17) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "ט״ז";
    if (n >= 15) return "ט״ו";
    if (n >= 11) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 1) return "״" + this.renderHebrewItem(n);
    if (n >= 0) return "׳";
};

inter.renderHebrewItem = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderHebrewItem(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 2100) return this.renderNumber(n, "#,##0");
    if (n >= 2e3) return "תתתתת" + (n === 2e3 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1900) return "תתתתש" + (n === 1900 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1800) return "תתתתר" + (n === 1800 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1700) return "תתתתק" + (n === 1700 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1600) return "תתתת" + (n === 1600 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1500) return "תתתש" + (n === 1500 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1400) return "תתתר" + (n === 1400 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1300) return "תתתק" + (n === 1300 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1200) return "תתת" + (n === 1200 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1100) return "תתש" + (n === 1100 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1e3) return "תתר" + (n === 1e3 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 900) return "תתק" + (n === 900 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 800) return "תת" + (n === 800 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 745) return "תש" + this.renderHebrewItem(n % 100);
    if (n >= 744) return "תשדמ";
    if (n >= 700) return "תש" + (n === 700 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 699) return "תר" + this.renderHebrewItem(n % 100);
    if (n >= 698) return "תרחצ";
    if (n >= 600) return "תר" + (n === 600 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 500) return "תק" + (n === 500 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 400) return "ת" + (n === 400 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 345) return "ש" + this.renderHebrewItem(n % 100);
    if (n >= 344) return "שדמ";
    if (n >= 305) return "ש" + this.renderHebrewItem(n % 100);
    if (n >= 304) return "דש";
    if (n >= 300) return "ש" + (n === 300 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 299) return "ר" + this.renderHebrewItem(n % 100);
    if (n >= 298) return "רחצ";
    if (n >= 200) return "ר" + (n === 200 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 100) return "ק" + (n === 100 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 90) return "צ" + (n === 90 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 80) return "פ" + (n === 80 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 70) return "ע" + (n === 70 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 60) return "ס" + (n === 60 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 50) return "נ" + (n === 50 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 40) return "מ" + (n === 40 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 30) return "ל" + (n === 30 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 20) return "כ" + (n === 20 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 17) return "י" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "טז";
    if (n >= 15) return "טו";
    if (n >= 10) return "י" + (n === 10 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 9) return "ט";
    if (n >= 8) return "ח";
    if (n >= 7) return "ז";
    if (n >= 6) return "ו";
    if (n >= 5) return "ה";
    if (n >= 4) return "ד";
    if (n >= 3) return "ג";
    if (n >= 2) return "ב";
    if (n >= 1) return "א";
    if (n >= 0) return "״";
};

inter.renderTamilThousands = function(n) {
    if (n >= 1e3) return this.renderTamilThousands(Math.floor(n / 1e3)) + "௲" + (n === 1e3 ? "" : this.renderTamilThousands(n % 1e3));
    if (n >= 0) return this.renderTamil(n);
};

inter.renderEthiopicP = function(n) {
    if (n >= 1e16) return this.renderEthiopicP(Math.floor(n / 1e16)) + "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 1e12) return this.renderEthiopicP(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1e8) return this.renderEthiopicP(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1e4) return this.renderEthiopicP(Math.floor(n / 1e4)) + "፼" + (n === 1e4 ? "" : this.renderEthiopicP(n % 1e4));
    if (n >= 1) return this.renderEthiopic(n);
};

inter.timeZones = [].concat(P.timeZones.slice(0, 4), {
    id: "Pacific/Honolulu",
    regionId: "021",
    utcStandardOffsetSeconds: -36e3,
    displayName: "Honolulú",
    countryId: "US"
}, P.timeZones[5], {
    id: "Pacific/Tahiti",
    regionId: "061",
    utcStandardOffsetSeconds: -36e3,
    displayName: "Tahití",
    countryId: "PF"
}, P.timeZones.slice(7, 15), {
    id: "America/Los_Angeles",
    regionId: "021",
    utcStandardOffsetSeconds: -28800,
    displayName: "Los Ángeles",
    countryId: "US"
}, P.timeZones.slice(16, 30), {
    id: "America/Mazatlan",
    regionId: "013",
    utcStandardOffsetSeconds: -25200,
    displayName: "Mazatlán",
    countryId: "MX"
}, P.timeZones.slice(31, 34), {
    id: "America/Bahia_Banderas",
    regionId: "013",
    utcStandardOffsetSeconds: -21600,
    displayName: "Bahía de Banderas",
    countryId: "MX"
}, {
    id: "America/Belize",
    regionId: "013",
    utcStandardOffsetSeconds: -21600,
    displayName: "Belice",
    countryId: "BZ"
}, {
    id: "America/North_Dakota/Beulah",
    regionId: "021",
    utcStandardOffsetSeconds: -21600,
    displayName: "Beulah, Dakota del Norte",
    countryId: "US"
}, {
    id: "America/North_Dakota/Center",
    regionId: "021",
    utcStandardOffsetSeconds: -21600,
    displayName: "Center, Dakota del Norte",
    countryId: "US"
}, P.timeZones.slice(38, 40), {
    id: "America/Mexico_City",
    regionId: "013",
    utcStandardOffsetSeconds: -21600,
    displayName: "Ciudad de México",
    countryId: "MX"
}, P.timeZones[40], P.timeZones[42], {
    id: "Pacific/Galapagos",
    regionId: "005",
    utcStandardOffsetSeconds: -21600,
    displayName: "Galápagos",
    countryId: "EC"
}, P.timeZones[44], {
    id: "Pacific/Easter",
    regionId: "005",
    utcStandardOffsetSeconds: -21600,
    displayName: "Isla de Pascua",
    countryId: "CL"
}, P.timeZones.slice(45, 49), P.timeZones[51], {
    id: "America/Merida",
    regionId: "013",
    utcStandardOffsetSeconds: -21600,
    displayName: "Mérida",
    countryId: "MX"
}, {
    id: "America/North_Dakota/New_Salem",
    regionId: "021",
    utcStandardOffsetSeconds: -21600,
    displayName: "New Salem, Dakota del Norte",
    countryId: "US"
}, P.timeZones.slice(53, 62), {
    id: "America/Bogota",
    regionId: "005",
    utcStandardOffsetSeconds: -18e3,
    displayName: "Bogotá",
    countryId: "CO"
}, {
    id: "America/Cayman",
    regionId: "029",
    utcStandardOffsetSeconds: -18e3,
    displayName: "Caimán",
    countryId: "KY"
}, {
    id: "America/Cancun",
    regionId: "013",
    utcStandardOffsetSeconds: -18e3,
    displayName: "Cancún",
    countryId: "MX"
}, P.timeZones[65], {
    id: "America/Eirunepe",
    regionId: "005",
    utcStandardOffsetSeconds: -18e3,
    displayName: "Eirunepé",
    countryId: "BR"
}, {
    id: "America/Grand_Turk",
    regionId: "029",
    utcStandardOffsetSeconds: -18e3,
    displayName: "Gran Turca",
    countryId: "TC"
}, P.timeZones[68], P.timeZones.slice(70, 73), {
    id: "America/Havana",
    regionId: "029",
    utcStandardOffsetSeconds: -18e3,
    displayName: "La Habana",
    countryId: "CU"
}, P.timeZones.slice(73, 78), {
    id: "America/New_York",
    regionId: "021",
    utcStandardOffsetSeconds: -18e3,
    displayName: "Nueva York",
    countryId: "US"
}, {
    id: "America/Panama",
    regionId: "013",
    utcStandardOffsetSeconds: -18e3,
    displayName: "Panamá",
    countryId: "PA"
}, P.timeZones[80], {
    id: "America/Port-au-Prince",
    regionId: "029",
    utcStandardOffsetSeconds: -18e3,
    displayName: "Puerto Príncipe",
    countryId: "HT"
}, {
    id: "America/Rio_Branco",
    regionId: "005",
    utcStandardOffsetSeconds: -18e3,
    displayName: "Río Branco",
    countryId: "BR"
}, P.timeZones.slice(83, 87), {
    id: "America/Anguilla",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "Anguila",
    countryId: "AI"
}, P.timeZones.slice(88, 90), {
    id: "America/Asuncion",
    regionId: "005",
    utcStandardOffsetSeconds: -14400,
    displayName: "Asunción",
    countryId: "PY"
}, P.timeZones[91], {
    id: "Atlantic/Bermuda",
    regionId: "021",
    utcStandardOffsetSeconds: -14400,
    displayName: "Bermudas",
    countryId: "BM"
}, P.timeZones.slice(93, 97), {
    id: "America/Cuiaba",
    regionId: "005",
    utcStandardOffsetSeconds: -14400,
    displayName: "Cuiabá",
    countryId: "BR"
}, {
    id: "America/Curacao",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "Curazao",
    countryId: "CW"
}, P.timeZones.slice(99, 102), {
    id: "America/Grenada",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "Granada",
    countryId: "GD"
}, {
    id: "America/Guadeloupe",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "Guadalupe",
    countryId: "GP"
}, P.timeZones.slice(104, 109), {
    id: "America/Manaus",
    regionId: "005",
    utcStandardOffsetSeconds: -14400,
    displayName: "Manaos",
    countryId: "BR"
}, P.timeZones[110], {
    id: "America/Martinique",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "Martinica",
    countryId: "MQ"
}, P.timeZones.slice(112, 114), P.timeZones[115], {
    id: "America/Port_of_Spain",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "Puerto España",
    countryId: "TT"
}, P.timeZones[116], {
    id: "America/St_Barthelemy",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "San Bartolomé",
    countryId: "BL"
}, {
    id: "America/St_Vincent",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "San Vicente",
    countryId: "VC"
}, {
    id: "America/St_Lucia",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "Santa Lucía",
    countryId: "LC"
}, P.timeZones.slice(117, 119), P.timeZones[120], P.timeZones[122], P.timeZones[124], {
    id: "America/Tortola",
    regionId: "029",
    utcStandardOffsetSeconds: -14400,
    displayName: "Tórtola",
    countryId: "VG"
}, P.timeZones[126], {
    id: "America/Araguaina",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "Araguaína",
    countryId: "BR"
}, {
    id: "America/Bahia",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "Bahía",
    countryId: "BR"
}, {
    id: "America/Belem",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "Belén",
    countryId: "BR"
}, P.timeZones.slice(130, 132), {
    id: "America/Cayenne",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "Cayena",
    countryId: "GF"
}, P.timeZones.slice(133, 137), {
    id: "America/Maceio",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "Maceió",
    countryId: "BR"
}, P.timeZones[138], {
    id: "America/Miquelon",
    regionId: "021",
    utcStandardOffsetSeconds: -10800,
    displayName: "Miquelón",
    countryId: "PM"
}, P.timeZones.slice(140, 145), P.timeZones[146], {
    id: "America/Argentina/Rio_Gallegos",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "Río Gallegos",
    countryId: "AR"
}, P.timeZones.slice(147, 150), {
    id: "America/Santarem",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "Santarém",
    countryId: "BR"
}, P.timeZones[152], {
    id: "America/Sao_Paulo",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "São Paulo",
    countryId: "BR"
}, {
    id: "America/Argentina/Tucuman",
    regionId: "005",
    utcStandardOffsetSeconds: -10800,
    displayName: "Tucumán",
    countryId: "AR"
}, P.timeZones[154], {
    id: "Atlantic/South_Georgia",
    utcStandardOffsetSeconds: -7200,
    displayName: "Georgia del Sur",
    countryId: "GS"
}, P.timeZones.slice(155, 157), P.timeZones[158], {
    id: "Atlantic/Cape_Verde",
    regionId: "011",
    utcStandardOffsetSeconds: -3600,
    displayName: "Cabo Verde",
    countryId: "CV"
}, P.timeZones[160], {
    id: "Africa/Abidjan",
    regionId: "011",
    utcStandardOffsetSeconds: 0,
    displayName: "Abiyán",
    countryId: "CI"
}, P.timeZones.slice(162, 165), {
    id: "Africa/Bissau",
    regionId: "011",
    utcStandardOffsetSeconds: 0,
    displayName: "Bisáu",
    countryId: "GW"
}, P.timeZones.slice(167, 170), {
    id: "Europe/Dublin",
    regionId: "154",
    utcStandardOffsetSeconds: 0,
    displayName: "Dublín",
    countryId: "IE"
}, P.timeZones.slice(171, 174), {
    id: "Europe/Isle_of_Man",
    regionId: "154",
    utcStandardOffsetSeconds: 0,
    displayName: "Isla de Man",
    countryId: "IM"
}, {
    id: "Atlantic/Canary",
    regionId: "039",
    utcStandardOffsetSeconds: 0,
    displayName: "Islas Canarias",
    countryId: "ES"
}, P.timeZones[175], {
    id: "Europe/Lisbon",
    regionId: "039",
    utcStandardOffsetSeconds: 0,
    displayName: "Lisboa",
    countryId: "PT"
}, {
    id: "Africa/Lome",
    regionId: "011",
    utcStandardOffsetSeconds: 0,
    displayName: "Lomé",
    countryId: "TG"
}, {
    id: "Europe/London",
    regionId: "154",
    utcStandardOffsetSeconds: 0,
    displayName: "Londres",
    countryId: "GB"
}, P.timeZones.slice(179, 181), {
    id: "Africa/Nouakchott",
    regionId: "011",
    utcStandardOffsetSeconds: 0,
    displayName: "Nuakchot",
    countryId: "MR"
}, {
    id: "Atlantic/Reykjavik",
    regionId: "154",
    utcStandardOffsetSeconds: 0,
    displayName: "Reikiavik",
    countryId: "IS"
}, {
    id: "Atlantic/St_Helena",
    regionId: "011",
    utcStandardOffsetSeconds: 0,
    displayName: "Santa Helena",
    countryId: "SH"
}, {
    id: "Africa/Sao_Tome",
    regionId: "017",
    utcStandardOffsetSeconds: 0,
    displayName: "Santo Tomé",
    countryId: "ST"
}, P.timeZones[186], {
    id: "Africa/Ouagadougou",
    regionId: "011",
    utcStandardOffsetSeconds: 0,
    displayName: "Uagadugú",
    countryId: "BF"
}, P.timeZones[189], {
    id: "Africa/Algiers",
    regionId: "015",
    utcStandardOffsetSeconds: 3600,
    displayName: "Argel",
    countryId: "DZ"
}, P.timeZones[190], {
    id: "Europe/Belgrade",
    regionId: "039",
    utcStandardOffsetSeconds: 3600,
    displayName: "Belgrado",
    countryId: "RS"
}, {
    id: "Europe/Berlin",
    regionId: "155",
    utcStandardOffsetSeconds: 3600,
    displayName: "Berlín",
    countryId: "DE"
}, P.timeZones.slice(193, 195), {
    id: "Europe/Brussels",
    regionId: "155",
    utcStandardOffsetSeconds: 3600,
    displayName: "Bruselas",
    countryId: "BE"
}, P.timeZones.slice(196, 200), {
    id: "Europe/Copenhagen",
    regionId: "154",
    utcStandardOffsetSeconds: 3600,
    displayName: "Copenhague",
    countryId: "DK"
}, {
    id: "Africa/Douala",
    regionId: "017",
    utcStandardOffsetSeconds: 3600,
    displayName: "Duala",
    countryId: "CM"
}, {
    id: "Africa/El_Aaiun",
    regionId: "015",
    utcStandardOffsetSeconds: 3600,
    displayName: "El Aaiún",
    countryId: "EH"
}, {
    id: "Europe/Vatican",
    regionId: "039",
    utcStandardOffsetSeconds: 3600,
    displayName: "El Vaticano",
    countryId: "VA"
}, {
    id: "Europe/Stockholm",
    regionId: "154",
    utcStandardOffsetSeconds: 3600,
    displayName: "Estocolmo",
    countryId: "SE"
}, P.timeZones.slice(203, 207), {
    id: "Europe/Ljubljana",
    regionId: "039",
    utcStandardOffsetSeconds: 3600,
    displayName: "Liubliana",
    countryId: "SI"
}, P.timeZones.slice(208, 210), {
    id: "Europe/Luxembourg",
    regionId: "155",
    utcStandardOffsetSeconds: 3600,
    displayName: "Luxemburgo",
    countryId: "LU"
}, P.timeZones.slice(211, 214), {
    id: "Europe/Monaco",
    regionId: "155",
    utcStandardOffsetSeconds: 3600,
    displayName: "Mónaco",
    countryId: "MC"
}, P.timeZones.slice(216, 218), {
    id: "Europe/Paris",
    regionId: "155",
    utcStandardOffsetSeconds: 3600,
    displayName: "París",
    countryId: "FR"
}, P.timeZones[219], {
    id: "Africa/Porto-Novo",
    regionId: "011",
    utcStandardOffsetSeconds: 3600,
    displayName: "Portonovo",
    countryId: "BJ"
}, {
    id: "Europe/Prague",
    regionId: "151",
    utcStandardOffsetSeconds: 3600,
    displayName: "Praga",
    countryId: "CZ"
}, {
    id: "Europe/Rome",
    regionId: "039",
    utcStandardOffsetSeconds: 3600,
    displayName: "Roma",
    countryId: "IT"
}, P.timeZones.slice(223, 225), {
    id: "Europe/Skopje",
    regionId: "039",
    utcStandardOffsetSeconds: 3600,
    displayName: "Skopie",
    countryId: "MK"
}, {
    id: "Europe/Tirane",
    regionId: "039",
    utcStandardOffsetSeconds: 3600,
    displayName: "Tirana",
    countryId: "AL"
}, {
    id: "Africa/Tunis",
    regionId: "015",
    utcStandardOffsetSeconds: 3600,
    displayName: "Túnez",
    countryId: "TN"
}, P.timeZones[229], {
    id: "Europe/Warsaw",
    regionId: "151",
    utcStandardOffsetSeconds: 3600,
    displayName: "Varsovia",
    countryId: "PL"
}, {
    id: "Europe/Vienna",
    regionId: "155",
    utcStandardOffsetSeconds: 3600,
    displayName: "Viena",
    countryId: "AT"
}, {
    id: "Africa/Ndjamena",
    regionId: "017",
    utcStandardOffsetSeconds: 3600,
    displayName: "Yamena",
    countryId: "TD"
}, P.timeZones[233], {
    id: "Europe/Zurich",
    regionId: "155",
    utcStandardOffsetSeconds: 3600,
    displayName: "Zúrich",
    countryId: "CH"
}, {
    id: "Europe/Amsterdam",
    regionId: "155",
    utcStandardOffsetSeconds: 3600,
    displayName: "Ámsterdam",
    countryId: "NL"
}, {
    id: "Europe/Athens",
    regionId: "039",
    utcStandardOffsetSeconds: 7200,
    displayName: "Atenas",
    countryId: "GR"
}, P.timeZones.slice(236, 238), {
    id: "Europe/Bucharest",
    regionId: "151",
    utcStandardOffsetSeconds: 7200,
    displayName: "Bucarest",
    countryId: "RO"
}, P.timeZones[239], P.timeZones[241], {
    id: "Africa/Cairo",
    regionId: "015",
    utcStandardOffsetSeconds: 7200,
    displayName: "El Cairo",
    countryId: "EG"
}, P.timeZones.slice(242, 246), {
    id: "Asia/Hebron",
    regionId: "145",
    utcStandardOffsetSeconds: 7200,
    displayName: "Hebrón",
    countryId: "PS"
}, P.timeZones[247], {
    id: "Africa/Khartoum",
    regionId: "015",
    utcStandardOffsetSeconds: 7200,
    displayName: "Jartún",
    countryId: "SD"
}, {
    id: "Asia/Jerusalem",
    regionId: "145",
    utcStandardOffsetSeconds: 7200,
    displayName: "Jerusalén",
    countryId: "IL"
}, {
    id: "Africa/Johannesburg",
    regionId: "018",
    utcStandardOffsetSeconds: 7200,
    displayName: "Johannesburgo",
    countryId: "ZA"
}, P.timeZones[250], {
    id: "Europe/Kaliningrad",
    regionId: "151",
    utcStandardOffsetSeconds: 7200,
    displayName: "Kaliningrado",
    countryId: "RU"
}, P.timeZones.slice(253, 263), {
    id: "Europe/Sofia",
    regionId: "151",
    utcStandardOffsetSeconds: 7200,
    displayName: "Sofía",
    countryId: "BG"
}, {
    id: "Europe/Tallinn",
    regionId: "154",
    utcStandardOffsetSeconds: 7200,
    displayName: "Tallin",
    countryId: "EE"
}, {
    id: "Africa/Tripoli",
    regionId: "015",
    utcStandardOffsetSeconds: 7200,
    displayName: "Trípoli",
    countryId: "LY"
}, {
    id: "Europe/Vilnius",
    regionId: "154",
    utcStandardOffsetSeconds: 7200,
    displayName: "Vilna",
    countryId: "LT"
}, P.timeZones[267], {
    id: "Africa/Addis_Ababa",
    regionId: "014",
    utcStandardOffsetSeconds: 10800,
    displayName: "Addis Abeba",
    countryId: "ET"
}, {
    id: "Asia/Aden",
    regionId: "145",
    utcStandardOffsetSeconds: 10800,
    displayName: "Adén",
    countryId: "YE"
}, {
    id: "Asia/Amman",
    regionId: "145",
    utcStandardOffsetSeconds: 10800,
    displayName: "Ammán",
    countryId: "JO"
}, P.timeZones.slice(271, 273), {
    id: "Asia/Baghdad",
    regionId: "145",
    utcStandardOffsetSeconds: 10800,
    displayName: "Bagdad",
    countryId: "IQ"
}, {
    id: "Asia/Bahrain",
    regionId: "145",
    utcStandardOffsetSeconds: 10800,
    displayName: "Baréin",
    countryId: "BH"
}, {
    id: "Asia/Qatar",
    regionId: "145",
    utcStandardOffsetSeconds: 10800,
    displayName: "Catar",
    countryId: "QA"
}, {
    id: "Indian/Comoro",
    regionId: "014",
    utcStandardOffsetSeconds: 10800,
    displayName: "Comoras",
    countryId: "KM"
}, {
    id: "Asia/Damascus",
    regionId: "145",
    utcStandardOffsetSeconds: 10800,
    displayName: "Damasco",
    countryId: "SY"
}, P.timeZones[277], {
    id: "Europe/Istanbul",
    regionId: "145",
    utcStandardOffsetSeconds: 10800,
    displayName: "Estambul",
    countryId: "TR"
}, P.timeZones.slice(280, 285), {
    id: "Africa/Mogadishu",
    regionId: "014",
    utcStandardOffsetSeconds: 10800,
    displayName: "Mogadiscio",
    countryId: "SO"
}, {
    id: "Europe/Moscow",
    regionId: "151",
    utcStandardOffsetSeconds: 10800,
    displayName: "Moscú",
    countryId: "RU"
}, P.timeZones[287], {
    id: "Asia/Riyadh",
    regionId: "145",
    utcStandardOffsetSeconds: 10800,
    displayName: "Riad",
    countryId: "SA"
}, P.timeZones.slice(290, 292), {
    id: "Europe/Volgograd",
    regionId: "151",
    utcStandardOffsetSeconds: 10800,
    displayName: "Volgogrado",
    countryId: "RU"
}, {
    id: "Africa/Djibouti",
    regionId: "014",
    utcStandardOffsetSeconds: 10800,
    displayName: "Yibuti",
    countryId: "DJ"
}, {
    id: "Asia/Tehran",
    regionId: "034",
    utcStandardOffsetSeconds: 12600,
    displayName: "Teherán",
    countryId: "IR"
}, P.timeZones[294], {
    id: "Asia/Baku",
    regionId: "145",
    utcStandardOffsetSeconds: 14400,
    displayName: "Bakú",
    countryId: "AZ"
}, {
    id: "Asia/Dubai",
    regionId: "145",
    utcStandardOffsetSeconds: 14400,
    displayName: "Dubái",
    countryId: "AE"
}, {
    id: "Asia/Yerevan",
    regionId: "145",
    utcStandardOffsetSeconds: 14400,
    displayName: "Ereván",
    countryId: "AM"
}, {
    id: "Indian/Mahe",
    regionId: "014",
    utcStandardOffsetSeconds: 14400,
    displayName: "Mahé",
    countryId: "SC"
}, {
    id: "Asia/Muscat",
    regionId: "145",
    utcStandardOffsetSeconds: 14400,
    displayName: "Mascate",
    countryId: "OM"
}, {
    id: "Indian/Mauritius",
    regionId: "014",
    utcStandardOffsetSeconds: 14400,
    displayName: "Mauricio",
    countryId: "MU"
}, {
    id: "Indian/Reunion",
    regionId: "014",
    utcStandardOffsetSeconds: 14400,
    displayName: "Reunión",
    countryId: "RE"
}, P.timeZones.slice(301, 303), {
    id: "Asia/Tbilisi",
    regionId: "145",
    utcStandardOffsetSeconds: 14400,
    displayName: "Tiflis",
    countryId: "GE"
}, P.timeZones[304], P.timeZones[306], {
    id: "Asia/Aqtau",
    regionId: "143",
    utcStandardOffsetSeconds: 18e3,
    displayName: "Aktau",
    countryId: "KZ"
}, {
    id: "Asia/Aqtobe",
    regionId: "143",
    utcStandardOffsetSeconds: 18e3,
    displayName: "Aktobe",
    countryId: "KZ"
}, {
    id: "Asia/Ashgabat",
    regionId: "143",
    utcStandardOffsetSeconds: 18e3,
    displayName: "Asjabad",
    countryId: "TM"
}, P.timeZones[310], {
    id: "Asia/Dushanbe",
    regionId: "143",
    utcStandardOffsetSeconds: 18e3,
    displayName: "Duchanbé",
    countryId: "TJ"
}, P.timeZones.slice(312, 314), {
    id: "Indian/Maldives",
    regionId: "034",
    utcStandardOffsetSeconds: 18e3,
    displayName: "Maldivas",
    countryId: "MV"
}, P.timeZones.slice(315, 318), {
    id: "Asia/Samarkand",
    regionId: "143",
    utcStandardOffsetSeconds: 18e3,
    displayName: "Samarcanda",
    countryId: "UZ"
}, P.timeZones[319], {
    id: "Asia/Yekaterinburg",
    regionId: "151",
    utcStandardOffsetSeconds: 18e3,
    displayName: "Yekaterinburgo",
    countryId: "RU"
}, P.timeZones.slice(321, 327), {
    id: "Asia/Dhaka",
    regionId: "034",
    utcStandardOffsetSeconds: 21600,
    displayName: "Dacca",
    countryId: "BD"
}, P.timeZones.slice(328, 330), {
    id: "Asia/Thimphu",
    regionId: "034",
    utcStandardOffsetSeconds: 21600,
    displayName: "Timbu",
    countryId: "BT"
}, P.timeZones[332], {
    id: "Asia/Urumqi",
    regionId: "030",
    utcStandardOffsetSeconds: 21600,
    displayName: "Ürümqi",
    countryId: "CN"
}, P.timeZones.slice(333, 341), P.timeZones.slice(342, 348), {
    id: "Asia/Vientiane",
    regionId: "035",
    utcStandardOffsetSeconds: 25200,
    displayName: "Vientián",
    countryId: "LA"
}, {
    id: "Asia/Jakarta",
    regionId: "035",
    utcStandardOffsetSeconds: 25200,
    displayName: "Yakarta",
    countryId: "ID"
}, {
    id: "Asia/Brunei",
    regionId: "035",
    utcStandardOffsetSeconds: 28800,
    displayName: "Brunéi",
    countryId: "BN"
}, P.timeZones.slice(350, 355), {
    id: "Asia/Macau",
    regionId: "030",
    utcStandardOffsetSeconds: 28800,
    displayName: "Macao",
    countryId: "MO"
}, {
    id: "Asia/Makassar",
    regionId: "035",
    utcStandardOffsetSeconds: 28800,
    displayName: "Makasar",
    countryId: "ID"
}, P.timeZones.slice(357, 359), {
    id: "Asia/Shanghai",
    regionId: "030",
    utcStandardOffsetSeconds: 28800,
    displayName: "Shanghái",
    countryId: "CN"
}, {
    id: "Asia/Singapore",
    regionId: "035",
    utcStandardOffsetSeconds: 28800,
    displayName: "Singapur",
    countryId: "SG"
}, {
    id: "Asia/Taipei",
    regionId: "030",
    utcStandardOffsetSeconds: 28800,
    displayName: "Taipéi",
    countryId: "TW"
}, {
    id: "Asia/Ulaanbaatar",
    regionId: "030",
    utcStandardOffsetSeconds: 28800,
    displayName: "Ulán Bator",
    countryId: "MN"
}, P.timeZones[363], {
    id: "Asia/Chita",
    regionId: "151",
    utcStandardOffsetSeconds: 32400,
    displayName: "Chitá",
    countryId: "RU"
}, P.timeZones.slice(365, 368), {
    id: "Pacific/Palau",
    regionId: "057",
    utcStandardOffsetSeconds: 32400,
    displayName: "Palaos",
    countryId: "PW"
}, P.timeZones[369], {
    id: "Asia/Seoul",
    regionId: "030",
    utcStandardOffsetSeconds: 32400,
    displayName: "Seúl",
    countryId: "KR"
}, {
    id: "Asia/Tokyo",
    regionId: "030",
    utcStandardOffsetSeconds: 32400,
    displayName: "Tokio",
    countryId: "JP"
}, P.timeZones[372], {
    id: "Australia/Adelaide",
    regionId: "053",
    utcStandardOffsetSeconds: 34200,
    displayName: "Adelaida",
    countryId: "AU"
}, P.timeZones.slice(374, 385), {
    id: "Pacific/Saipan",
    regionId: "057",
    utcStandardOffsetSeconds: 36e3,
    displayName: "Saipán",
    countryId: "MP"
}, {
    id: "Australia/Sydney",
    regionId: "053",
    utcStandardOffsetSeconds: 36e3,
    displayName: "Sídney",
    countryId: "AU"
}, P.timeZones.slice(387, 395), {
    id: "Asia/Magadan",
    regionId: "151",
    utcStandardOffsetSeconds: 39600,
    displayName: "Magadán",
    countryId: "RU"
}, P.timeZones[396], {
    id: "Pacific/Noumea",
    regionId: "054",
    utcStandardOffsetSeconds: 39600,
    displayName: "Numea",
    countryId: "NC"
}, P.timeZones[398], {
    id: "Asia/Sakhalin",
    regionId: "151",
    utcStandardOffsetSeconds: 39600,
    displayName: "Sajalín",
    countryId: "RU"
}, {
    id: "Asia/Srednekolymsk",
    regionId: "151",
    utcStandardOffsetSeconds: 39600,
    displayName: "Srednekolimsk",
    countryId: "RU"
}, P.timeZones.slice(401, 403), {
    id: "Pacific/Fiji",
    regionId: "054",
    utcStandardOffsetSeconds: 43200,
    displayName: "Fiyi",
    countryId: "FJ"
}, P.timeZones.slice(404, 419));

inter.territories = [ _ir3m316, _ir3m222, _ir3m267, _ir3m383, _ir3m223, _ir3m188, _ir3m224, _ir3m397, _ir3m100, _ir3m356, _ir3m225, _ir3m294, _ir3m226, _ir3m158, _ir3m357, _ir3m416, _ir3m431, _ir3m432, _ir3m422, _ir3m411, _ir3m295, _ir3m227, _ir3m317, _ir3m228, _ir3m296, _ir3m268, _ir3m189, _ir3m190, _ir3m159, _ir3m269, _ir3m344, _ir3m229, _ir3m404, _ir3m270, _ir3m191, _ir3m192, _ir3m271, _ir3m358, _ir3m230, _ir3m160, _ir3m231, _ir3m318, _ir3m232, _ir3m233, _ir3m193, _ir3m101, _ir3m374, _ir3m398, _ir3m161, _ir3m423, _ir3m133, _ir3m139, _ir3m162, _ir3m163, _ir3m194, _ir3m412, _ir3m272, _ir3m234, _ir3m384, _ir3m366, _ir3m319, _ir3m385, _ir3m235, _ir3m140, _ir3m236, _ir3m118, _ir3m297, _ir3m273, _ir3m237, _ir3m195, _ir3m345, _ir3m427, _ir3m238, _ir3m320, _ir3m298, _ir3m196, _ir3m375, _ir3m239, _ir3m240, _ir3m376, _ir3m441, _ir3m442, _ir3m433, _ir3m450, _ir3m299, _ir3m300, _ir3m141, _ir3m241, _ir3m164, _ir3m197, _ir3m242, _ir3m165, _ir3m301, _ir3m243, _ir3m198, _ir3m346, _ir3m302, _ir3m142, _ir3m303, _ir3m392, _ir3m304, _ir3m199, _ir3m399, _ir3m359, _ir3m200, _ir3m166, _ir3m274, _ir3m244, _ir3m167, _ir3m305, _ir3m143, _ir3m245, _ir3m144, _ir3m114, _ir3m134, _ir3m360, _ir3m347, _ir3m130, _ir3m201, _ir3m275, _ir3m361, _ir3m109, _ir3m321, _ir3m348, _ir3m443, _ir3m276, _ir3m377, _ir3m437, _ir3m378, _ir3m379, _ir3m367, _ir3m424, _ir3m444, _ir3m445, _ir3m405, _ir3m349, _ir3m202, _ir3m203, _ir3m246, _ir3m168, _ir3m204, _ir3m277, _ir3m322, _ir3m169, _ir3m323, _ir3m278, _ir3m247, _ir3m205, _ir3m145, _ir3m206, _ir3m248, _ir3m249, _ir3m170, _ir3m368, _ir3m279, _ir3m324, _ir3m207, _ir3m306, _ir3m325, _ir3m250, _ir3m208, _ir3m280, _ir3m146, _ir3m171, _ir3m307, _ir3m308, _ir3m281, _ir3m326, _ir3m251, _ir3m400, _ir3m327, _ir3m282, _ir3m283, _ir3m328, _ir3m329, _ir3m330, _ir3m88, _ir3m406, _ir3m209, _ir3m210, _ir3m252, _ir3m172, _ir3m173, _ir3m309, _ir3m253, _ir3m147, _ir3m417, _ir3m254, _ir3m386, _ir3m369, _ir3m174, _ir3m387, _ir3m148, _ir3m284, _ir3m211, _ir3m212, _ir3m407, _ir3m285, _ir3m362, _ir3m149, _ir3m401, _ir3m408, _ir3m255, _ir3m286, _ir3m350, _ir3m438, _ir3m418, _ir3m451, _ir3m351, _ir3m439, _ir3m388, _ir3m455, _ir3m419, _ir3m413, _ir3m256, _ir3m213, _ir3m257, _ir3m175, _ir3m176, _ir3m389, _ir3m370, _ir3m428, _ir3m331, _ir3m332, _ir3m420, _ir3m452, _ir3m352, _ir3m353, _ir3m425, _ir3m258, _ir3m214, _ir3m333, _ir3m363, _ir3m287, _ir3m364, _ir3m177, _ir3m259, _ir3m310, _ir3m354, _ir3m409, _ir3m440, _ir3m311, _ir3m178, _ir3m371, _ir3m215, _ir3m179, _ir3m260, _ir3m421, _ir3m402, _ir3m312, _ir3m216, _ir3m288, _ir3m334, _ir3m434, _ir3m393, _ir3m429, {
    id: "QO",
    displayName: "Territorios alejados de Oceanía",
    regionId: "009",
    hasTimeZones: false
}, _ir3m380, _ir3m150, _ir3m261, _ir3m180, _ir3m403, _ir3m136, _ir3m365, _ir3m262, _ir3m217, _ir3m181, _ir3m263, _ir3m218, _ir3m264, _ir3m335, _ir3m265, _ir3m313, _ir3m266, _ir3m390, _ir3m182, _ir3m219, _ir3m220, _ir3m289, _ir3m381, _ir3m430, _ir3m446, _ir3m447, _ir3m435, _ir3m453 ];

inter.regions = [ _ir3m383, _ir3m357, _ir3m416, _ir3m431, _ir3m432, _ir3m422, _ir3m411, _ir3m374, _ir3m423, _ir3m376, _ir3m441, _ir3m442, _ir3m433, _ir3m450, _ir3m400, _ir3m88, _ir3m417, _ir3m387, _ir3m401, _ir3m451, _ir3m409, _ir3m440, _ir3m381, _ir3m430, _ir3m446, _ir3m447, _ir3m435, _ir3m453 ];

inter.countries = [ _ir3m316, _ir3m222, _ir3m267, _ir3m223, _ir3m188, _ir3m224, _ir3m397, _ir3m100, _ir3m356, _ir3m225, _ir3m294, _ir3m226, _ir3m158, _ir3m295, _ir3m227, _ir3m317, _ir3m228, _ir3m296, _ir3m268, _ir3m189, _ir3m190, _ir3m159, _ir3m269, _ir3m344, _ir3m229, _ir3m404, _ir3m270, _ir3m191, _ir3m192, _ir3m271, _ir3m358, _ir3m230, _ir3m160, _ir3m231, _ir3m318, _ir3m232, _ir3m233, _ir3m193, _ir3m101, _ir3m398, _ir3m161, _ir3m133, _ir3m139, _ir3m162, _ir3m163, _ir3m194, _ir3m412, _ir3m272, _ir3m234, _ir3m384, _ir3m366, _ir3m319, _ir3m385, _ir3m235, _ir3m140, _ir3m236, _ir3m118, _ir3m297, _ir3m273, _ir3m237, _ir3m195, _ir3m345, _ir3m427, _ir3m238, _ir3m320, _ir3m298, _ir3m196, _ir3m375, _ir3m239, _ir3m240, _ir3m299, _ir3m300, _ir3m141, _ir3m241, _ir3m164, _ir3m197, _ir3m242, _ir3m165, _ir3m301, _ir3m243, _ir3m198, _ir3m346, _ir3m302, _ir3m142, _ir3m303, _ir3m392, _ir3m304, _ir3m199, _ir3m399, _ir3m359, _ir3m200, _ir3m166, _ir3m274, _ir3m244, _ir3m167, _ir3m305, _ir3m143, _ir3m245, _ir3m144, _ir3m114, _ir3m134, _ir3m360, _ir3m347, _ir3m130, _ir3m201, _ir3m275, _ir3m361, _ir3m109, _ir3m321, _ir3m348, _ir3m443, _ir3m276, _ir3m377, _ir3m437, _ir3m378, _ir3m379, _ir3m367, _ir3m424, _ir3m444, _ir3m445, _ir3m405, _ir3m349, _ir3m202, _ir3m203, _ir3m246, _ir3m168, _ir3m204, _ir3m277, _ir3m322, _ir3m169, _ir3m323, _ir3m278, _ir3m247, _ir3m205, _ir3m145, _ir3m206, _ir3m248, _ir3m249, _ir3m170, _ir3m368, _ir3m279, _ir3m324, _ir3m207, _ir3m306, _ir3m325, _ir3m250, _ir3m208, _ir3m280, _ir3m146, _ir3m171, _ir3m307, _ir3m308, _ir3m281, _ir3m326, _ir3m251, _ir3m327, _ir3m282, _ir3m283, _ir3m328, _ir3m329, _ir3m330, _ir3m406, _ir3m209, _ir3m210, _ir3m252, _ir3m172, _ir3m173, _ir3m309, _ir3m253, _ir3m147, _ir3m254, _ir3m386, _ir3m369, _ir3m174, _ir3m148, _ir3m284, _ir3m211, _ir3m212, _ir3m407, _ir3m285, _ir3m362, _ir3m149, _ir3m408, _ir3m255, _ir3m286, _ir3m350, _ir3m438, _ir3m418, _ir3m351, _ir3m439, _ir3m388, _ir3m455, _ir3m419, _ir3m413, _ir3m256, _ir3m213, _ir3m257, _ir3m175, _ir3m176, _ir3m389, _ir3m370, _ir3m428, _ir3m331, _ir3m332, _ir3m420, _ir3m452, _ir3m352, _ir3m353, _ir3m425, _ir3m258, _ir3m214, _ir3m333, _ir3m363, _ir3m287, _ir3m364, _ir3m177, _ir3m259, _ir3m310, _ir3m354, _ir3m311, _ir3m178, _ir3m371, _ir3m215, _ir3m179, _ir3m260, _ir3m421, _ir3m402, _ir3m312, _ir3m216, _ir3m288, _ir3m334, _ir3m434, _ir3m393, _ir3m429, _ir3m380, _ir3m150, _ir3m261, _ir3m180, _ir3m403, _ir3m136, _ir3m365, _ir3m262, _ir3m217, _ir3m181, _ir3m263, _ir3m218, _ir3m264, _ir3m335, _ir3m265, _ir3m313, _ir3m266, _ir3m390, _ir3m182, _ir3m219, _ir3m220, _ir3m289 ];

inter.languages = [ {
    id: "ab",
    displayName: "abjasio"
}, {
    id: "akk",
    displayName: "acadio"
}, {
    id: "ace",
    displayName: "acehnés"
}, {
    id: "ach",
    displayName: "acoli"
}, {
    id: "ada",
    displayName: "adangme"
}, {
    id: "ady",
    displayName: "adigeo"
}, {
    id: "aa",
    displayName: "afar"
}, {
    id: "afh",
    displayName: "afrihili"
}, {
    id: "af",
    displayName: "afrikáans",
    nativeDisplayName: "Afrikaans"
}, {
    id: "agq",
    displayName: "aghem",
    nativeDisplayName: "Aghem"
}, {
    id: "ay",
    displayName: "aimara"
}, {
    id: "ain",
    displayName: "ainu"
}, {
    id: "ak",
    displayName: "akan",
    nativeDisplayName: "Akan"
}, {
    id: "bss",
    displayName: "akoose"
}, {
    id: "goh",
    displayName: "alemán de la alta edad antigua"
}, {
    id: "gmh",
    displayName: "alemán de la alta edad media"
}, {
    id: "ale",
    displayName: "aleutiano"
}, {
    id: "alt",
    displayName: "altái meridional"
}, {
    id: "en_us",
    displayName: "inglés estadounidense",
    nativeDisplayName: "American English"
}, {
    id: "smn",
    displayName: "sami inari",
    nativeDisplayName: "anarâškielâ"
}, {
    id: "anp",
    displayName: "angika"
}, {
    id: "an",
    displayName: "aragonés"
}, {
    id: "arw",
    displayName: "arahuaco"
}, {
    id: "arc",
    displayName: "arameo"
}, {
    id: "sam",
    displayName: "arameo samaritano"
}, {
    id: "arp",
    displayName: "arapaho"
}, {
    id: "rup",
    displayName: "arrumano"
}, {
    id: "ast",
    displayName: "asturiano",
    nativeDisplayName: "asturianu"
}, {
    id: "cch",
    displayName: "atsam"
}, {
    id: "en_au",
    displayName: "inglés australiano",
    nativeDisplayName: "Australian English"
}, {
    id: "awa",
    displayName: "avadhi"
}, {
    id: "av",
    displayName: "avar"
}, {
    id: "ae",
    displayName: "avéstico"
}, {
    id: "az",
    displayName: "azerbaiyano",
    nativeDisplayName: "azərbaycan dili"
}, {
    id: "bfd",
    displayName: "bafut"
}, {
    id: "ms",
    displayName: "malayo",
    nativeDisplayName: "Bahasa Melayu"
}, {
    id: "nds",
    displayName: "bajo alemán"
}, {
    id: "ban",
    displayName: "balinés"
}, {
    id: "bal",
    displayName: "baluchi"
}, {
    id: "bgn",
    displayName: "baluchi occidental"
}, {
    id: "bm",
    displayName: "bambara",
    nativeDisplayName: "bamanakan"
}, {
    id: "bax",
    displayName: "bamun"
}, {
    id: "ba",
    displayName: "baskir"
}, {
    id: "bej",
    displayName: "beja"
}, {
    id: "bho",
    displayName: "bhojpuri"
}, {
    id: "bik",
    displayName: "bicol"
}, {
    id: "bin",
    displayName: "bini"
}, {
    id: "bi",
    displayName: "bislama"
}, {
    id: "byn",
    displayName: "blin"
}, {
    id: "bs",
    displayName: "bosnio",
    nativeDisplayName: "bosanski"
}, {
    id: "bra",
    displayName: "braj"
}, {
    id: "br",
    displayName: "bretón",
    nativeDisplayName: "brezhoneg"
}, {
    id: "en_gb",
    displayName: "inglés británico",
    nativeDisplayName: "British English"
}, {
    id: "bug",
    displayName: "buginés"
}, {
    id: "bum",
    displayName: "bulu"
}, {
    id: "bua",
    displayName: "buriat"
}, {
    id: "cad",
    displayName: "caddo"
}, {
    id: "en_ca",
    displayName: "inglés canadiense",
    nativeDisplayName: "Canadian English"
}, {
    id: "krl",
    displayName: "carelio"
}, {
    id: "car",
    displayName: "caribe"
}, {
    id: "csb",
    displayName: "casubio"
}, {
    id: "ca",
    displayName: "catalán",
    nativeDisplayName: "català"
}, {
    id: "cay",
    displayName: "cayuga"
}, {
    id: "ceb",
    displayName: "cebuano"
}, {
    id: "chg",
    displayName: "chagatái"
}, {
    id: "ch",
    displayName: "chamorro"
}, {
    id: "chy",
    displayName: "cheyene"
}, {
    id: "chb",
    displayName: "chibcha"
}, {
    id: "kde",
    displayName: "makonde",
    nativeDisplayName: "Chimakonde"
}, {
    id: "chp",
    displayName: "chipewyan"
}, {
    id: "sn",
    displayName: "shona",
    nativeDisplayName: "chiShona"
}, {
    id: "cho",
    displayName: "choctaw"
}, {
    id: "cv",
    displayName: "chuvasio"
}, {
    id: "swb",
    displayName: "comorense"
}, {
    id: "cop",
    displayName: "copto"
}, {
    id: "co",
    displayName: "corso"
}, {
    id: "cr",
    displayName: "cree"
}, {
    id: "mus",
    displayName: "creek"
}, {
    id: "cy",
    displayName: "galés",
    nativeDisplayName: "Cymraeg"
}, {
    id: "dak",
    displayName: "dakota"
}, {
    id: "da",
    displayName: "danés",
    nativeDisplayName: "dansk"
}, {
    id: "dar",
    displayName: "dargva"
}, {
    id: "se",
    displayName: "sami septentrional",
    nativeDisplayName: "davvisámegiella"
}, {
    id: "dzg",
    displayName: "dazaga"
}, {
    id: "del",
    displayName: "delaware"
}, {
    id: "de",
    displayName: "alemán",
    nativeDisplayName: "Deutsch"
}, {
    id: "luo",
    displayName: "luo",
    nativeDisplayName: "Dholuo"
}, {
    id: "din",
    displayName: "dinka"
}, {
    id: "dyu",
    displayName: "diula"
}, {
    id: "dv",
    displayName: "divehi"
}, {
    id: "doi",
    displayName: "dogri"
}, {
    id: "dgr",
    displayName: "dogrib"
}, {
    id: "dsb",
    displayName: "bajo sorbio",
    nativeDisplayName: "dolnoserbšćina"
}, {
    id: "dua",
    displayName: "duala",
    nativeDisplayName: "duálá"
}, {
    id: "et",
    displayName: "estonio",
    nativeDisplayName: "eesti"
}, {
    id: "efi",
    displayName: "efik"
}, {
    id: "egy",
    displayName: "egipcio antiguo"
}, {
    id: "eka",
    displayName: "ekajuk"
}, {
    id: "guz",
    displayName: "gusii",
    nativeDisplayName: "Ekegusii"
}, {
    id: "elx",
    displayName: "elamita"
}, {
    id: "en",
    displayName: "inglés",
    nativeDisplayName: "English"
}, {
    id: "myv",
    displayName: "erzya"
}, {
    id: "sco",
    displayName: "escocés"
}, {
    id: "es",
    displayName: "español",
    nativeDisplayName: "español"
}, {
    id: "es_es",
    displayName: "español de España",
    nativeDisplayName: "español de España"
}, {
    id: "es_mx",
    displayName: "español de México",
    nativeDisplayName: "español de México"
}, {
    id: "es_419",
    displayName: "español latinoamericano",
    nativeDisplayName: "español latinoamericano"
}, {
    id: "eo",
    displayName: "esperanto",
    nativeDisplayName: "esperanto"
}, {
    id: "eu",
    displayName: "euskera",
    nativeDisplayName: "euskara"
}, {
    id: "ewo",
    displayName: "ewondo",
    nativeDisplayName: "ewondo"
}, {
    id: "ee",
    displayName: "ewé",
    nativeDisplayName: "Eʋegbe"
}, {
    id: "fan",
    displayName: "fang"
}, {
    id: "fat",
    displayName: "fanti"
}, {
    id: "phn",
    displayName: "fenicio"
}, {
    id: "fil",
    displayName: "filipino",
    nativeDisplayName: "Filipino"
}, {
    id: "fj",
    displayName: "fiyiano"
}, {
    id: "fon",
    displayName: "fon"
}, {
    id: "fro",
    displayName: "francés antiguo"
}, {
    id: "frm",
    displayName: "francés medieval"
}, {
    id: "fr",
    displayName: "francés",
    nativeDisplayName: "français"
}, {
    id: "fr_ca",
    displayName: "francés canadiense",
    nativeDisplayName: "français canadien"
}, {
    id: "fr_ch",
    displayName: "francés suizo",
    nativeDisplayName: "français suisse"
}, {
    id: "frs",
    displayName: "frisón oriental"
}, {
    id: "frr",
    displayName: "frisón septentrional"
}, {
    id: "fur",
    displayName: "friulano",
    nativeDisplayName: "furlan"
}, {
    id: "fo",
    displayName: "feroés",
    nativeDisplayName: "føroyskt"
}, {
    id: "gaa",
    displayName: "ga"
}, {
    id: "ga",
    displayName: "irlandés",
    nativeDisplayName: "Gaeilge"
}, {
    id: "gv",
    displayName: "manés",
    nativeDisplayName: "Gaelg"
}, {
    id: "gag",
    displayName: "gagauzo"
}, {
    id: "gl",
    displayName: "gallego",
    nativeDisplayName: "galego"
}, {
    id: "gay",
    displayName: "gayo"
}, {
    id: "gba",
    displayName: "gbaya"
}, {
    id: "gez",
    displayName: "geez"
}, {
    id: "bbj",
    displayName: "ghomala"
}, {
    id: "ki",
    displayName: "kikuyu",
    nativeDisplayName: "Gikuyu"
}, {
    id: "gil",
    displayName: "gilbertés"
}, {
    id: "gon",
    displayName: "gondi"
}, {
    id: "gor",
    displayName: "gorontalo"
}, {
    id: "grb",
    displayName: "grebo"
}, {
    id: "grc",
    displayName: "griego antiguo"
}, {
    id: "gn",
    displayName: "guaraní"
}, {
    id: "gd",
    displayName: "gaélico escocés",
    nativeDisplayName: "Gàidhlig"
}, {
    id: "got",
    displayName: "gótico"
}, {
    id: "hai",
    displayName: "haida"
}, {
    id: "ht",
    displayName: "haitiano"
}, {
    id: "ha",
    displayName: "hausa",
    nativeDisplayName: "Hausa"
}, {
    id: "hz",
    displayName: "herero"
}, {
    id: "bez",
    displayName: "bena",
    nativeDisplayName: "Hibena"
}, {
    id: "hil",
    displayName: "hiligaynon"
}, {
    id: "ho",
    displayName: "hiri motu"
}, {
    id: "hit",
    displayName: "hitita"
}, {
    id: "hmn",
    displayName: "hmong"
}, {
    id: "hsb",
    displayName: "alto sorbio",
    nativeDisplayName: "hornjoserbšćina"
}, {
    id: "hr",
    displayName: "croata",
    nativeDisplayName: "hrvatski"
}, {
    id: "hup",
    displayName: "hupa"
}, {
    id: "iba",
    displayName: "iban"
}, {
    id: "ibb",
    displayName: "ibibio"
}, {
    id: "bem",
    displayName: "bemba",
    nativeDisplayName: "Ichibemba"
}, {
    id: "io",
    displayName: "ido"
}, {
    id: "ig",
    displayName: "igbo",
    nativeDisplayName: "Igbo"
}, {
    id: "rn",
    displayName: "kiroundi",
    nativeDisplayName: "Ikirundi"
}, {
    id: "ilo",
    displayName: "ilocano"
}, {
    id: "id",
    displayName: "indonesio",
    nativeDisplayName: "Indonesia"
}, {
    id: "ang",
    displayName: "inglés antiguo"
}, {
    id: "enm",
    displayName: "inglés medieval"
}, {
    id: "inh",
    displayName: "ingush"
}, {
    id: "ia",
    displayName: "interlingua"
}, {
    id: "ie",
    displayName: "interlingue"
}, {
    id: "iu",
    displayName: "inuktitut"
}, {
    id: "ik",
    displayName: "inupiaq"
}, {
    id: "sga",
    displayName: "irlandés antiguo"
}, {
    id: "mga",
    displayName: "irlandés medieval"
}, {
    id: "sbp",
    displayName: "sangu",
    nativeDisplayName: "Ishisangu"
}, {
    id: "nd",
    displayName: "ndebele septentrional",
    nativeDisplayName: "isiNdebele"
}, {
    id: "zu",
    displayName: "zulú",
    nativeDisplayName: "isiZulu"
}, {
    id: "it",
    displayName: "italiano",
    nativeDisplayName: "italiano"
}, {
    id: "jv",
    displayName: "javanés"
}, {
    id: "chn",
    displayName: "jerga chinuk"
}, {
    id: "kaj",
    displayName: "jju"
}, {
    id: "dyo",
    displayName: "jola-fonyi",
    nativeDisplayName: "joola"
}, {
    id: "jpr",
    displayName: "judeo-persa"
}, {
    id: "jrb",
    displayName: "judeo-árabe"
}, {
    id: "kbd",
    displayName: "kabardiano"
}, {
    id: "kea",
    displayName: "criollo caboverdiano",
    nativeDisplayName: "kabuverdianu"
}, {
    id: "kac",
    displayName: "kachin"
}, {
    id: "kkj",
    displayName: "kako",
    nativeDisplayName: "kakɔ"
}, {
    id: "kl",
    displayName: "groenlandés",
    nativeDisplayName: "kalaallisut"
}, {
    id: "kln",
    displayName: "kalenjin",
    nativeDisplayName: "Kalenjin"
}, {
    id: "xal",
    displayName: "kalmyk"
}, {
    id: "kbl",
    displayName: "kanembu"
}, {
    id: "kr",
    displayName: "kanuri"
}, {
    id: "krc",
    displayName: "karachay-balkar"
}, {
    id: "kaa",
    displayName: "karakalpako"
}, {
    id: "kaw",
    displayName: "kawi"
}, {
    id: "kw",
    displayName: "córnico",
    nativeDisplayName: "kernewek"
}, {
    id: "kha",
    displayName: "khasi"
}, {
    id: "naq",
    displayName: "nama",
    nativeDisplayName: "Khoekhoegowab"
}, {
    id: "rof",
    displayName: "rombo",
    nativeDisplayName: "Kihorombo"
}, {
    id: "kam",
    displayName: "kamba",
    nativeDisplayName: "Kikamba"
}, {
    id: "jmc",
    displayName: "machame",
    nativeDisplayName: "Kimachame"
}, {
    id: "kmb",
    displayName: "kimbundu"
}, {
    id: "rw",
    displayName: "kinyarwanda",
    nativeDisplayName: "Kinyarwanda"
}, {
    id: "asa",
    displayName: "asu",
    nativeDisplayName: "Kipare"
}, {
    id: "rwk",
    displayName: "rwa",
    nativeDisplayName: "Kiruwa"
}, {
    id: "saq",
    displayName: "samburu",
    nativeDisplayName: "Kisampur"
}, {
    id: "ksb",
    displayName: "shambala",
    nativeDisplayName: "Kishambaa"
}, {
    id: "sw",
    displayName: "suajili",
    nativeDisplayName: "Kiswahili"
}, {
    id: "sw_cd",
    displayName: "suajili del Congo",
    nativeDisplayName: "Kiswahili ya Kongo"
}, {
    id: "dav",
    displayName: "taita",
    nativeDisplayName: "Kitaita"
}, {
    id: "teo",
    displayName: "teso",
    nativeDisplayName: "Kiteso"
}, {
    id: "tlh",
    displayName: "klingon"
}, {
    id: "bkm",
    displayName: "kom"
}, {
    id: "kv",
    displayName: "komi"
}, {
    id: "koi",
    displayName: "komi permio"
}, {
    id: "kg",
    displayName: "kongo"
}, {
    id: "kfo",
    displayName: "koro"
}, {
    id: "kos",
    displayName: "kosraeano"
}, {
    id: "kho",
    displayName: "kotanés"
}, {
    id: "khq",
    displayName: "koyra chiini",
    nativeDisplayName: "Koyra ciini"
}, {
    id: "ses",
    displayName: "koyraboro senni",
    nativeDisplayName: "Koyraboro senni"
}, {
    id: "kpe",
    displayName: "kpelle"
}, {
    id: "mfe",
    displayName: "criollo mauriciano",
    nativeDisplayName: "kreol morisien"
}, {
    id: "kj",
    displayName: "kuanyama"
}, {
    id: "kum",
    displayName: "kumyk"
}, {
    id: "ku",
    displayName: "kurdo"
}, {
    id: "sdh",
    displayName: "kurdo meridional"
}, {
    id: "kru",
    displayName: "kurukh"
}, {
    id: "gwi",
    displayName: "kutchin"
}, {
    id: "kut",
    displayName: "kutenai"
}, {
    id: "nmg",
    displayName: "kwasio",
    nativeDisplayName: "Kwasio"
}, {
    id: "vun",
    displayName: "vunjo",
    nativeDisplayName: "Kyivunjo"
}, {
    id: "ksh",
    displayName: "kölsch",
    nativeDisplayName: "Kölsch"
}, {
    id: "ebu",
    displayName: "embu",
    nativeDisplayName: "Kĩembu"
}, {
    id: "mer",
    displayName: "meru",
    nativeDisplayName: "Kĩmĩrũ"
}, {
    id: "lag",
    displayName: "langi",
    nativeDisplayName: "Kɨlaangi"
}, {
    id: "lad",
    displayName: "ladino"
}, {
    id: "lah",
    displayName: "lahnda"
}, {
    id: "lkt",
    displayName: "lakota",
    nativeDisplayName: "Lakȟólʼiyapi"
}, {
    id: "lam",
    displayName: "lamba"
}, {
    id: "lv",
    displayName: "letón",
    nativeDisplayName: "latviešu"
}, {
    id: "la",
    displayName: "latín"
}, {
    id: "to",
    displayName: "tongano",
    nativeDisplayName: "lea fakatonga"
}, {
    id: "und",
    displayName: "lengua desconocida"
}, {
    id: "mul",
    displayName: "lenguas múltiples"
}, {
    id: "lez",
    displayName: "lezgiano"
}, {
    id: "lt",
    displayName: "lituano",
    nativeDisplayName: "lietuvių"
}, {
    id: "li",
    displayName: "limburgués"
}, {
    id: "ln",
    displayName: "lingala",
    nativeDisplayName: "lingála"
}, {
    id: "jbo",
    displayName: "lojban"
}, {
    id: "loz",
    displayName: "lozi"
}, {
    id: "lua",
    displayName: "luba-lulua"
}, {
    id: "lg",
    displayName: "ganda",
    nativeDisplayName: "Luganda"
}, {
    id: "lui",
    displayName: "luiseño"
}, {
    id: "luy",
    displayName: "luyia",
    nativeDisplayName: "Luluhia"
}, {
    id: "lun",
    displayName: "lunda"
}, {
    id: "lus",
    displayName: "lushai"
}, {
    id: "lb",
    displayName: "luxemburgués",
    nativeDisplayName: "Lëtzebuergesch"
}, {
    id: "mas",
    displayName: "masái",
    nativeDisplayName: "Maa"
}, {
    id: "mde",
    displayName: "maba"
}, {
    id: "mak",
    displayName: "macasar"
}, {
    id: "mad",
    displayName: "madurés"
}, {
    id: "maf",
    displayName: "mafa"
}, {
    id: "mag",
    displayName: "magahi"
}, {
    id: "hu",
    displayName: "húngaro",
    nativeDisplayName: "magyar"
}, {
    id: "mai",
    displayName: "maithili"
}, {
    id: "mgh",
    displayName: "makhuwa-meetto",
    nativeDisplayName: "Makua"
}, {
    id: "mg",
    displayName: "malgache",
    nativeDisplayName: "Malagasy"
}, {
    id: "mt",
    displayName: "maltés",
    nativeDisplayName: "Malti"
}, {
    id: "mnc",
    displayName: "manchú"
}, {
    id: "mdr",
    displayName: "mandar"
}, {
    id: "man",
    displayName: "mandingo"
}, {
    id: "mni",
    displayName: "manipuri"
}, {
    id: "mi",
    displayName: "maorí"
}, {
    id: "arn",
    displayName: "mapuche"
}, {
    id: "mh",
    displayName: "marshalés"
}, {
    id: "mwr",
    displayName: "marwari"
}, {
    id: "chm",
    displayName: "marí"
}, {
    id: "byv",
    displayName: "medumba"
}, {
    id: "men",
    displayName: "mende"
}, {
    id: "mgo",
    displayName: "meta’",
    nativeDisplayName: "metaʼ"
}, {
    id: "mic",
    displayName: "micmac"
}, {
    id: "min",
    displayName: "minangkabau"
}, {
    id: "mwl",
    displayName: "mirandés"
}, {
    id: "moh",
    displayName: "mohawk"
}, {
    id: "mdf",
    displayName: "moksha"
}, {
    id: "ro_md",
    displayName: "moldavo",
    nativeDisplayName: "moldovenească"
}, {
    id: "lol",
    displayName: "mongo"
}, {
    id: "mos",
    displayName: "mossi"
}, {
    id: "mua",
    displayName: "mundang",
    nativeDisplayName: "MUNDAŊ"
}, {
    id: "mye",
    displayName: "myene"
}, {
    id: "nap",
    displayName: "napolitano"
}, {
    id: "na",
    displayName: "nauruano"
}, {
    id: "nv",
    displayName: "navajo"
}, {
    id: "jgo",
    displayName: "ngomba",
    nativeDisplayName: "Ndaꞌa"
}, {
    id: "nr",
    displayName: "ndebele meridional"
}, {
    id: "ng",
    displayName: "ndonga"
}, {
    id: "nl",
    displayName: "neerlandés",
    nativeDisplayName: "Nederlands"
}, {
    id: "dum",
    displayName: "neerlandés medieval"
}, {
    id: "new",
    displayName: "newari"
}, {
    id: "nwc",
    displayName: "newari clásico"
}, {
    id: "sba",
    displayName: "ngambay"
}, {
    id: "nia",
    displayName: "nias"
}, {
    id: "niu",
    displayName: "niueano"
}, {
    id: "nog",
    displayName: "nogai"
}, {
    id: "nb",
    displayName: "noruego bokmal",
    nativeDisplayName: "norsk bokmål"
}, {
    id: "no",
    displayName: "noruego"
}, {
    id: "yav",
    displayName: "yangben",
    nativeDisplayName: "nuasue"
}, {
    id: "nym",
    displayName: "nyamwezi"
}, {
    id: "ny",
    displayName: "nyanja"
}, {
    id: "nn",
    displayName: "noruego nynorsk",
    nativeDisplayName: "nynorsk"
}, {
    id: "nyo",
    displayName: "nyoro"
}, {
    id: "nzi",
    displayName: "nzima"
}, {
    id: "non",
    displayName: "nórdico antiguo"
}, {
    id: "nqo",
    displayName: "n’ko"
}, {
    id: "oc",
    displayName: "occitano"
}, {
    id: "oj",
    displayName: "ojibwa"
}, {
    id: "xog",
    displayName: "soga",
    nativeDisplayName: "Olusoga"
}, {
    id: "om",
    displayName: "oromo",
    nativeDisplayName: "Oromoo"
}, {
    id: "osa",
    displayName: "osage"
}, {
    id: "uz",
    displayName: "uzbeko",
    nativeDisplayName: "o‘zbek"
}, {
    id: "pal",
    displayName: "pahlavi"
}, {
    id: "pau",
    displayName: "palauano"
}, {
    id: "pi",
    displayName: "pali"
}, {
    id: "pam",
    displayName: "pampanga"
}, {
    id: "pag",
    displayName: "pangasinán"
}, {
    id: "pap",
    displayName: "papiamento"
}, {
    id: "peo",
    displayName: "persa antiguo"
}, {
    id: "pon",
    displayName: "pohnpeiano"
}, {
    id: "pl",
    displayName: "polaco",
    nativeDisplayName: "polski"
}, {
    id: "pt",
    displayName: "portugués",
    nativeDisplayName: "português"
}, {
    id: "pt_br",
    displayName: "portugués de Brasil",
    nativeDisplayName: "português do Brasil"
}, {
    id: "pt_pt",
    displayName: "portugués de Portugal",
    nativeDisplayName: "português europeu"
}, {
    id: "pro",
    displayName: "provenzal antiguo"
}, {
    id: "ff",
    displayName: "fula",
    nativeDisplayName: "Pulaar"
}, {
    id: "quc",
    displayName: "quiché"
}, {
    id: "raj",
    displayName: "rajasthani"
}, {
    id: "rap",
    displayName: "rapanui"
}, {
    id: "rar",
    displayName: "rarotongano"
}, {
    id: "root",
    displayName: "raíz"
}, {
    id: "ksf",
    displayName: "bafia",
    nativeDisplayName: "rikpa"
}, {
    id: "rom",
    displayName: "romaní"
}, {
    id: "ro",
    displayName: "rumano",
    nativeDisplayName: "română"
}, {
    id: "cgg",
    displayName: "chiga",
    nativeDisplayName: "Rukiga"
}, {
    id: "rm",
    displayName: "retorrománico",
    nativeDisplayName: "rumantsch"
}, {
    id: "qu",
    displayName: "quechua",
    nativeDisplayName: "Runasimi"
}, {
    id: "nyn",
    displayName: "nyankole",
    nativeDisplayName: "Runyankore"
}, {
    id: "ssy",
    displayName: "saho"
}, {
    id: "smj",
    displayName: "sami lule"
}, {
    id: "sma",
    displayName: "sami meridional"
}, {
    id: "sms",
    displayName: "sami skolt"
}, {
    id: "sm",
    displayName: "samoano"
}, {
    id: "sad",
    displayName: "sandawe"
}, {
    id: "sat",
    displayName: "santali"
}, {
    id: "sc",
    displayName: "sardo"
}, {
    id: "sas",
    displayName: "sasak"
}, {
    id: "de_ch",
    displayName: "alto alemán suizo",
    nativeDisplayName: "Schweizer Hochdeutsch"
}, {
    id: "gsw",
    displayName: "alemán suizo",
    nativeDisplayName: "Schwiizertüütsch"
}, {
    id: "sel",
    displayName: "selkup"
}, {
    id: "seh",
    displayName: "sena",
    nativeDisplayName: "sena"
}, {
    id: "see",
    displayName: "seneca"
}, {
    id: "sh",
    displayName: "serbocroata"
}, {
    id: "srr",
    displayName: "serer"
}, {
    id: "st",
    displayName: "sesotho meridional"
}, {
    id: "tn",
    displayName: "setchwana"
}, {
    id: "shn",
    displayName: "shan"
}, {
    id: "sq",
    displayName: "albanés",
    nativeDisplayName: "shqip"
}, {
    id: "nnh",
    displayName: "ngiemboon",
    nativeDisplayName: "Shwóŋò ngiembɔɔn"
}, {
    id: "scn",
    displayName: "siciliano"
}, {
    id: "sid",
    displayName: "sidamo"
}, {
    id: "bla",
    displayName: "siksika"
}, {
    id: "zxx",
    displayName: "sin contenido lingüístico"
}, {
    id: "sd",
    displayName: "sindhi"
}, {
    id: "syr",
    displayName: "siriaco"
}, {
    id: "syc",
    displayName: "siríaco clásico"
}, {
    id: "ss",
    displayName: "siswati"
}, {
    id: "den",
    displayName: "slave"
}, {
    id: "sk",
    displayName: "eslovaco",
    nativeDisplayName: "slovenčina"
}, {
    id: "sl",
    displayName: "esloveno",
    nativeDisplayName: "slovenščina"
}, {
    id: "sog",
    displayName: "sogdiano"
}, {
    id: "snk",
    displayName: "soninké"
}, {
    id: "so",
    displayName: "somalí",
    nativeDisplayName: "Soomaali"
}, {
    id: "nso",
    displayName: "sotho septentrional"
}, {
    id: "srn",
    displayName: "sranan tongo"
}, {
    id: "suk",
    displayName: "sukuma"
}, {
    id: "sux",
    displayName: "sumerio"
}, {
    id: "su",
    displayName: "sundanés"
}, {
    id: "fi",
    displayName: "finés",
    nativeDisplayName: "suomi"
}, {
    id: "sus",
    displayName: "susu"
}, {
    id: "sv",
    displayName: "sueco",
    nativeDisplayName: "svenska"
}, {
    id: "sa",
    displayName: "sánscrito"
}, {
    id: "sg",
    displayName: "sango",
    nativeDisplayName: "Sängö"
}, {
    id: "zbl",
    displayName: "símbolos Bliss"
}, {
    id: "tl",
    displayName: "tagalo"
}, {
    id: "ty",
    displayName: "tahitiano"
}, {
    id: "tmh",
    displayName: "tamashek"
}, {
    id: "tzm",
    displayName: "tamazight del Marruecos Central",
    nativeDisplayName: "Tamaziɣt n laṭlaṣ"
}, {
    id: "kab",
    displayName: "cabila",
    nativeDisplayName: "Taqbaylit"
}, {
    id: "trv",
    displayName: "taroko"
}, {
    id: "twq",
    displayName: "tasawaq",
    nativeDisplayName: "Tasawaq senni"
}, {
    id: "tg",
    displayName: "tayiko"
}, {
    id: "tem",
    displayName: "temne"
}, {
    id: "ter",
    displayName: "tereno"
}, {
    id: "tet",
    displayName: "tetún"
}, {
    id: "nus",
    displayName: "nuer",
    nativeDisplayName: "Thok Nath"
}, {
    id: "tig",
    displayName: "tigré"
}, {
    id: "tiv",
    displayName: "tiv"
}, {
    id: "vi",
    displayName: "vietnamita",
    nativeDisplayName: "Tiếng Việt"
}, {
    id: "tli",
    displayName: "tlingit"
}, {
    id: "tpi",
    displayName: "tok pisin"
}, {
    id: "tkl",
    displayName: "tokelauano"
}, {
    id: "tog",
    displayName: "tonga del Nyasa"
}, {
    id: "chk",
    displayName: "trukés"
}, {
    id: "lu",
    displayName: "luba-katanga",
    nativeDisplayName: "Tshiluba"
}, {
    id: "tsi",
    displayName: "tsimshiano"
}, {
    id: "ts",
    displayName: "tsonga"
}, {
    id: "tum",
    displayName: "tumbuka"
}, {
    id: "ota",
    displayName: "turco otomano"
}, {
    id: "tvl",
    displayName: "tuvaluano"
}, {
    id: "tyv",
    displayName: "tuviniano"
}, {
    id: "tw",
    displayName: "twi"
}, {
    id: "kcg",
    displayName: "tyap"
}, {
    id: "tt",
    displayName: "tártaro"
}, {
    id: "crh",
    displayName: "tártaro de Crimea"
}, {
    id: "tk",
    displayName: "turcomano",
    nativeDisplayName: "türkmençe"
}, {
    id: "tr",
    displayName: "turco",
    nativeDisplayName: "Türkçe"
}, {
    id: "udm",
    displayName: "udmurt"
}, {
    id: "uga",
    displayName: "ugarítico"
}, {
    id: "umb",
    displayName: "umbundu"
}, {
    id: "wa",
    displayName: "valón"
}, {
    id: "ve",
    displayName: "venda"
}, {
    id: "nl_be",
    displayName: "flamenco",
    nativeDisplayName: "Vlaams"
}, {
    id: "vo",
    displayName: "volapük",
    nativeDisplayName: "Volapük"
}, {
    id: "vot",
    displayName: "vótico"
}, {
    id: "wal",
    displayName: "walamo"
}, {
    id: "wae",
    displayName: "walser",
    nativeDisplayName: "Walser"
}, {
    id: "war",
    displayName: "waray"
}, {
    id: "wbp",
    displayName: "warlpiri"
}, {
    id: "was",
    displayName: "washo"
}, {
    id: "fy",
    displayName: "frisón occidental",
    nativeDisplayName: "West-Frysk"
}, {
    id: "wo",
    displayName: "wolof"
}, {
    id: "xh",
    displayName: "xhosa"
}, {
    id: "yao",
    displayName: "yao"
}, {
    id: "yap",
    displayName: "yapés"
}, {
    id: "ybb",
    displayName: "yemba"
}, {
    id: "zap",
    displayName: "zapoteco"
}, {
    id: "dje",
    displayName: "zarma",
    nativeDisplayName: "Zarmaciine"
}, {
    id: "zza",
    displayName: "zazaki"
}, {
    id: "zen",
    displayName: "zenaga"
}, {
    id: "za",
    displayName: "zhuang"
}, {
    id: "zun",
    displayName: "zuni"
}, {
    id: "shu",
    displayName: "árabe chadiano"
}, {
    id: "yo",
    displayName: "yoruba",
    nativeDisplayName: "Èdè Yorùbá"
}, {
    id: "is",
    displayName: "islandés",
    nativeDisplayName: "íslenska"
}, {
    id: "de_at",
    displayName: "alemán austríaco",
    nativeDisplayName: "Österreichisches Deutsch"
}, {
    id: "cs",
    displayName: "checo",
    nativeDisplayName: "čeština"
}, {
    id: "bas",
    displayName: "basa",
    nativeDisplayName: "Ɓàsàa"
}, {
    id: "haw",
    displayName: "hawaiano",
    nativeDisplayName: "ʻŌlelo Hawaiʻi"
}, {
    id: "el",
    displayName: "griego",
    nativeDisplayName: "Ελληνικά"
}, {
    id: "be",
    displayName: "bielorruso",
    nativeDisplayName: "беларуская"
}, {
    id: "bg",
    displayName: "búlgaro",
    nativeDisplayName: "български"
}, {
    id: "os",
    displayName: "osético",
    nativeDisplayName: "ирон"
}, {
    id: "ky",
    displayName: "kirguís",
    nativeDisplayName: "кыргызча"
}, {
    id: "mk",
    displayName: "macedonio",
    nativeDisplayName: "македонски"
}, {
    id: "mn",
    displayName: "mongol",
    nativeDisplayName: "монгол"
}, {
    id: "ce",
    displayName: "checheno",
    nativeDisplayName: "нохчийн"
}, {
    id: "ru",
    displayName: "ruso",
    nativeDisplayName: "русский"
}, {
    id: "sah",
    displayName: "sakha",
    nativeDisplayName: "саха тыла"
}, {
    id: "sr",
    displayName: "serbio",
    nativeDisplayName: "српски"
}, {
    id: "uk",
    displayName: "ucraniano",
    nativeDisplayName: "українська"
}, {
    id: "cu",
    displayName: "eslavo eclesiástico",
    nativeDisplayName: "церковнослове́нскїй"
}, {
    id: "kk",
    displayName: "kazajo",
    nativeDisplayName: "қазақ тілі"
}, {
    id: "hy",
    displayName: "armenio",
    nativeDisplayName: "հայերեն"
}, {
    id: "yi",
    displayName: "yídish",
    nativeDisplayName: "ייִדיש"
}, {
    id: "he",
    displayName: "hebreo",
    nativeDisplayName: "עברית"
}, {
    id: "ug",
    displayName: "uigur",
    nativeDisplayName: "ئۇيغۇرچە"
}, {
    id: "ur",
    displayName: "urdu",
    nativeDisplayName: "اردو"
}, {
    id: "ar",
    displayName: "árabe",
    nativeDisplayName: "العربية"
}, {
    id: "ar_001",
    displayName: "árabe estándar moderno",
    nativeDisplayName: "العربية الرسمية الحديثة"
}, {
    id: "fa",
    displayName: "persa",
    nativeDisplayName: "فارسی"
}, {
    id: "lrc",
    displayName: "lorí septentrional",
    nativeDisplayName: "لۊری شومالی"
}, {
    id: "mzn",
    displayName: "mazandaraní",
    nativeDisplayName: "مازرونی"
}, {
    id: "ps",
    displayName: "pastún",
    nativeDisplayName: "پښتو"
}, {
    id: "ckb",
    displayName: "kurdo sorani",
    nativeDisplayName: "کوردیی ناوەندی"
}, {
    id: "ks",
    displayName: "cachemiro",
    nativeDisplayName: "کٲشُر"
}, {
    id: "kok",
    displayName: "konkaní",
    nativeDisplayName: "कोंकणी"
}, {
    id: "ne",
    displayName: "nepalí",
    nativeDisplayName: "नेपाली"
}, {
    id: "brx",
    displayName: "bodo",
    nativeDisplayName: "बड़ो"
}, {
    id: "mr",
    displayName: "maratí",
    nativeDisplayName: "मराठी"
}, {
    id: "hi",
    displayName: "hindi",
    nativeDisplayName: "हिन्दी"
}, {
    id: "as",
    displayName: "asamés",
    nativeDisplayName: "অসমীয়া"
}, {
    id: "bn",
    displayName: "bengalí",
    nativeDisplayName: "বাংলা"
}, {
    id: "pa",
    displayName: "panyabí",
    nativeDisplayName: "ਪੰਜਾਬੀ"
}, {
    id: "gu",
    displayName: "gujarati",
    nativeDisplayName: "ગુજરાતી"
}, {
    id: "or",
    displayName: "oriya",
    nativeDisplayName: "ଓଡ଼ିଆ"
}, {
    id: "ta",
    displayName: "tamil",
    nativeDisplayName: "தமிழ்"
}, {
    id: "te",
    displayName: "telugu",
    nativeDisplayName: "తెలుగు"
}, {
    id: "kn",
    displayName: "canarés",
    nativeDisplayName: "ಕನ್ನಡ"
}, {
    id: "ml",
    displayName: "malayalam",
    nativeDisplayName: "മലയാളം"
}, {
    id: "si",
    displayName: "cingalés",
    nativeDisplayName: "සිංහල"
}, {
    id: "th",
    displayName: "tailandés",
    nativeDisplayName: "ไทย"
}, {
    id: "lo",
    displayName: "laosiano",
    nativeDisplayName: "ລາວ"
}, {
    id: "bo",
    displayName: "tibetano",
    nativeDisplayName: "བོད་སྐད་"
}, {
    id: "dz",
    displayName: "dzongkha",
    nativeDisplayName: "རྫོང་ཁ"
}, {
    id: "my",
    displayName: "birmano",
    nativeDisplayName: "ဗမာ"
}, {
    id: "ka",
    displayName: "georgiano",
    nativeDisplayName: "ქართული"
}, {
    id: "ti",
    displayName: "tigriña",
    nativeDisplayName: "ትግርኛ"
}, {
    id: "am",
    displayName: "amárico",
    nativeDisplayName: "አማርኛ"
}, {
    id: "km",
    displayName: "jemer",
    nativeDisplayName: "ខ្មែរ"
}, {
    id: "zgh",
    displayName: "tamazight estándar marroquí",
    nativeDisplayName: "ⵜⴰⵎⴰⵣⵉⵖⵜ"
}, {
    id: "shi",
    displayName: "tashelhit",
    nativeDisplayName: "ⵜⴰⵛⵍⵃⵉⵜ"
}, {
    id: "zh",
    displayName: "chino",
    nativeDisplayName: "中文"
}, {
    id: "ja",
    displayName: "japonés",
    nativeDisplayName: "日本語"
}, {
    id: "zh_hans",
    displayName: "chino simplificado",
    nativeDisplayName: "简体中文"
}, {
    id: "yue",
    displayName: "cantonés",
    nativeDisplayName: "粵語"
}, {
    id: "zh_hant",
    displayName: "chino tradicional",
    nativeDisplayName: "繁體中文"
}, {
    id: "ii",
    displayName: "yi de Sichuán",
    nativeDisplayName: "ꆈꌠꉙ"
}, {
    id: "vai",
    displayName: "vai",
    nativeDisplayName: "ꕙꔤ"
}, {
    id: "chr",
    displayName: "cheroqui",
    nativeDisplayName: "ᏣᎳᎩ"
}, {
    id: "ko",
    displayName: "coreano",
    nativeDisplayName: "한국어"
} ];

inter.scripts = [ {
    id: "Inds",
    displayName: "Indio (harappan)"
}, {
    id: "Plrd",
    displayName: "Pollard Miao"
}, {
    id: "Sgnw",
    displayName: "SignWriting"
}, {
    id: "Zzzz",
    displayName: "alfabeto desconocido"
}, {
    id: "Ital",
    displayName: "antigua bastardilla"
}, {
    id: "Armn",
    displayName: "armenio"
}, {
    id: "Avst",
    displayName: "avéstico"
}, {
    id: "Bali",
    displayName: "balinés"
}, {
    id: "Batk",
    displayName: "batak"
}, {
    id: "Beng",
    displayName: "bengalí"
}, {
    id: "Mymr",
    displayName: "birmano"
}, {
    id: "Bopo",
    displayName: "bopomofo"
}, {
    id: "Brah",
    displayName: "brahmi"
}, {
    id: "Brai",
    displayName: "braille"
}, {
    id: "Bugi",
    displayName: "buginés"
}, {
    id: "Buhd",
    displayName: "buhid"
}, {
    id: "Knda",
    displayName: "canarés"
}, {
    id: "Cari",
    displayName: "cario"
}, {
    id: "Cham",
    displayName: "cham"
}, {
    id: "Cher",
    displayName: "cherokee"
}, {
    id: "Cprt",
    displayName: "chipriota"
}, {
    id: "Sinh",
    displayName: "cingalés"
}, {
    id: "Cirt",
    displayName: "cirth"
}, {
    id: "Cyrl",
    displayName: "cirílico"
}, {
    id: "Cyrs",
    displayName: "cirílico del antiguo eslavo eclesiástico"
}, {
    id: "Zyyy",
    displayName: "común"
}, {
    id: "Copt",
    displayName: "copto"
}, {
    id: "Kore",
    displayName: "coreano"
}, {
    id: "Xsux",
    displayName: "cuneiforme sumerio-acadio"
}, {
    id: "Dsrt",
    displayName: "deseret"
}, {
    id: "Deva",
    displayName: "devanagari"
}, {
    id: "Egyd",
    displayName: "egipcio demótico"
}, {
    id: "Egyh",
    displayName: "egipcio hierático"
}, {
    id: "Ethi",
    displayName: "etiópico"
}, {
    id: "Phnx",
    displayName: "fenicio"
}, {
    id: "Geor",
    displayName: "georgiano"
}, {
    id: "Geok",
    displayName: "georgiano eclesiástico"
}, {
    id: "Glag",
    displayName: "glagolítico"
}, {
    id: "Grek",
    displayName: "griego"
}, {
    id: "Gujr",
    displayName: "gujarati"
}, {
    id: "Guru",
    displayName: "gurmuji"
}, {
    id: "Goth",
    displayName: "gótico"
}, {
    id: "Hani",
    displayName: "han"
}, {
    id: "Hang",
    displayName: "hangul"
}, {
    id: "Hano",
    displayName: "hanunoo"
}, {
    id: "Hebr",
    displayName: "hebreo"
}, {
    id: "Zinh",
    displayName: "heredado"
}, {
    id: "Hira",
    displayName: "hiragana"
}, {
    id: "Hung",
    displayName: "húngaro antiguo"
}, {
    id: "Jpan",
    displayName: "japonés"
}, {
    id: "Java",
    displayName: "javanés"
}, {
    id: "Khmr",
    displayName: "jemer"
}, {
    id: "Egyp",
    displayName: "jeroglíficos egipcios"
}, {
    id: "Maya",
    displayName: "jeroglíficos mayas"
}, {
    id: "Kana",
    displayName: "katakana"
}, {
    id: "Hrkt",
    displayName: "katakana o hiragana"
}, {
    id: "Kali",
    displayName: "kayah li"
}, {
    id: "Khar",
    displayName: "kharosthi"
}, {
    id: "Lana",
    displayName: "lanna"
}, {
    id: "Laoo",
    displayName: "lao"
}, {
    id: "Latf",
    displayName: "latino fraktur"
}, {
    id: "Latg",
    displayName: "latino gaélico"
}, {
    id: "Latn",
    displayName: "latín"
}, {
    id: "Visp",
    displayName: "lenguaje visible"
}, {
    id: "Lepc",
    displayName: "lepcha"
}, {
    id: "Lyci",
    displayName: "licio"
}, {
    id: "Lydi",
    displayName: "lidio"
}, {
    id: "Limb",
    displayName: "limbu"
}, {
    id: "Lina",
    displayName: "lineal A"
}, {
    id: "Linb",
    displayName: "lineal B"
}, {
    id: "Mlym",
    displayName: "malayálam"
}, {
    id: "Mand",
    displayName: "mandeo"
}, {
    id: "Mtei",
    displayName: "manipuri"
}, {
    id: "Mero",
    displayName: "meroítico"
}, {
    id: "Mong",
    displayName: "mongol"
}, {
    id: "Moon",
    displayName: "moon"
}, {
    id: "Zxxx",
    displayName: "no escrito"
}, {
    id: "Talu",
    displayName: "nuevo tai lue"
}, {
    id: "Nkoo",
    displayName: "n’ko"
}, {
    id: "Ogam",
    displayName: "ogham"
}, {
    id: "Olck",
    displayName: "ol ciki"
}, {
    id: "Orya",
    displayName: "oriya"
}, {
    id: "Orkh",
    displayName: "orkhon"
}, {
    id: "Osma",
    displayName: "osmaniya"
}, {
    id: "Hmng",
    displayName: "pahawh hmong"
}, {
    id: "Perm",
    displayName: "permiano antiguo"
}, {
    id: "Xpeo",
    displayName: "persa antiguo"
}, {
    id: "Phag",
    displayName: "phags-pa"
}, {
    id: "Rjng",
    displayName: "rejang"
}, {
    id: "Roro",
    displayName: "rongo-rongo"
}, {
    id: "Runr",
    displayName: "rúnico"
}, {
    id: "Sara",
    displayName: "sarati"
}, {
    id: "Saur",
    displayName: "saurashtra"
}, {
    id: "Shaw",
    displayName: "shaviano"
}, {
    id: "Hans",
    displayName: "simplificado"
}, {
    id: "Syrc",
    displayName: "siriaco"
}, {
    id: "Syre",
    displayName: "siriaco estrangelo"
}, {
    id: "Syrj",
    displayName: "siriaco occidental"
}, {
    id: "Syrn",
    displayName: "siriaco oriental"
}, {
    id: "Sund",
    displayName: "sundanés"
}, {
    id: "Sylo",
    displayName: "syloti nagri"
}, {
    id: "Zsym",
    displayName: "símbolos"
}, {
    id: "Cans",
    displayName: "símbolos aborígenes canadienses unificados"
}, {
    id: "Blis",
    displayName: "símbolos blis"
}, {
    id: "Tglg",
    displayName: "tagalo"
}, {
    id: "Tagb",
    displayName: "tagbanúa"
}, {
    id: "Tale",
    displayName: "tai le"
}, {
    id: "Thai",
    displayName: "tailandés"
}, {
    id: "Taml",
    displayName: "tamil"
}, {
    id: "Telu",
    displayName: "telugu"
}, {
    id: "Teng",
    displayName: "tengwar"
}, {
    id: "Thaa",
    displayName: "thaana"
}, {
    id: "Tibt",
    displayName: "tibetano"
}, {
    id: "Tfng",
    displayName: "tifinagh"
}, {
    id: "Hant",
    displayName: "tradicional"
}, {
    id: "Ugar",
    displayName: "ugarítico"
}, {
    id: "Vaii",
    displayName: "vai"
}, {
    id: "Yiii",
    displayName: "yi"
}, {
    id: "Arab",
    displayName: "árabe"
} ];

inter.currencies = [ {
    id: "BOV",
    displayName: "MVDOL boliviano",
    one: "MVDOL boliviano",
    other: "MVDOL bolivianos"
}, {
    id: "AFN",
    displayName: "afgani",
    symbol: "AFN",
    one: "afgani",
    other: "afganis"
}, {
    id: "AFA",
    displayName: "afgani (1927–2002)"
}, {
    id: "CSD",
    displayName: "antiguo dinar serbio",
    one: "antiguo dinar serbio",
    other: "antiguos dinares serbios"
}, {
    id: "ROL",
    displayName: "antiguo leu rumano",
    one: "antiguo leu rumano",
    other: "antiguos lei rumanos"
}, {
    id: "MZM",
    displayName: "antiguo metical mozambiqueño"
}, {
    id: "MGA",
    displayName: "ariari",
    symbol: "MGA",
    one: "ariari",
    other: "ariaris"
}, {
    id: "ARA",
    displayName: "austral argentino",
    one: "austral argentino",
    other: "australes argentinos"
}, {
    id: "PAB",
    displayName: "balboa panameño",
    symbol: "PAB",
    one: "balboa panameño",
    other: "balboas panameños"
}, {
    id: "THB",
    displayName: "bat",
    symbol: "฿",
    one: "bat",
    other: "bats"
}, {
    id: "ETB",
    displayName: "bir",
    symbol: "ETB",
    one: "bir",
    other: "bires"
}, {
    id: "BOB",
    displayName: "boliviano",
    symbol: "BOB",
    one: "boliviano",
    other: "bolivianos"
}, {
    id: "VEF",
    displayName: "bolívar venezolano",
    symbol: "VEF",
    one: "bolívar venezolano",
    other: "bolívares venezolanos"
}, {
    id: "VEB",
    displayName: "bolívar venezolano (1871–2008)",
    one: "bolívar venezolano (1871–2008)",
    other: "bolívares venezolanos (1871–2008)"
}, {
    id: "GHS",
    displayName: "cedi",
    symbol: "GHS",
    one: "cedi",
    other: "cedis"
}, {
    id: "GHC",
    displayName: "cedi ghanés (1979–2007)"
}, {
    id: "ATS",
    displayName: "chelín austriaco",
    one: "chelín austriaco",
    other: "chelines austriacos"
}, {
    id: "KES",
    displayName: "chelín keniano",
    symbol: "KES",
    one: "chelín keniano",
    other: "chelines kenianos"
}, {
    id: "SOS",
    displayName: "chelín somalí",
    symbol: "SOS",
    one: "chelín somalí",
    other: "chelines somalíes"
}, {
    id: "TZS",
    displayName: "chelín tanzano",
    symbol: "TZS",
    one: "chelín tanzano",
    other: "chelines tanzanos"
}, {
    id: "UGX",
    displayName: "chelín ugandés",
    symbol: "UGX",
    one: "chelín ugandés",
    other: "chelines ugandeses"
}, {
    id: "UGS",
    displayName: "chelín ugandés (1966–1987)"
}, {
    id: "CRC",
    displayName: "colón costarricense",
    symbol: "CRC",
    one: "colón costarricense",
    other: "colones costarricenses"
}, {
    id: "SVC",
    displayName: "colón salvadoreño",
    one: "colón salvadoreño",
    other: "colones salvadoreños"
}, {
    id: "CZK",
    displayName: "corona checa",
    symbol: "CZK",
    one: "corona checa",
    other: "coronas checas"
}, {
    id: "DKK",
    displayName: "corona danesa",
    symbol: "DKK",
    one: "corona danesa",
    other: "coronas danesas"
}, {
    id: "SKK",
    displayName: "corona eslovaca",
    one: "corona eslovaca",
    other: "coronas eslovacas"
}, {
    id: "EEK",
    displayName: "corona estonia",
    one: "corona estonia",
    other: "coronas estonias"
}, {
    id: "CSK",
    displayName: "corona fuerte checoslovaca",
    one: "corona fuerte checoslovaca",
    other: "coronas fuertes checoslovacas"
}, {
    id: "ISK",
    displayName: "corona islandesa",
    symbol: "ISK",
    one: "corona islandesa",
    other: "coronas islandesas"
}, {
    id: "NOK",
    displayName: "corona noruega",
    symbol: "NOK",
    one: "corona noruega",
    other: "coronas noruegas"
}, {
    id: "SEK",
    displayName: "corona sueca",
    symbol: "SEK",
    one: "corona sueca",
    other: "coronas suecas"
}, {
    id: "BRR",
    displayName: "cruceiro brasileño",
    one: "cruceiro brasileño",
    other: "cruceiros brasileños"
}, {
    id: "BRE",
    displayName: "cruceiro brasileño (1990–1993)",
    one: "cruceiro brasileño (BRE)",
    other: "cruceiros brasileños (BRE)"
}, {
    id: "BRC",
    displayName: "cruzado brasileño",
    one: "cruzado brasileño",
    other: "cruzados brasileños"
}, {
    id: "XTS",
    displayName: "código reservado para pruebas"
}, {
    id: "NIO",
    displayName: "córdoba nicaragüense",
    symbol: "NIO",
    one: "córdoba nicaragüense",
    other: "córdobas nicaragüenses"
}, {
    id: "NIC",
    displayName: "córdoba nicaragüense (1988–1991)",
    one: "córdoba nicaragüense (1988–1991)",
    other: "córdobas nicaragüenses (1988–1991)"
}, {
    id: "GMD",
    displayName: "dalasi",
    symbol: "GMD",
    one: "dalasi",
    other: "dalasis"
}, {
    id: "XDR",
    displayName: "derechos especiales de giro"
}, {
    id: "DZD",
    displayName: "dinar argelino",
    symbol: "DZD",
    one: "dinar argelino",
    other: "dinares argelinos"
}, {
    id: "BHD",
    displayName: "dinar bahreiní",
    symbol: "BHD",
    one: "dinar bahreiní",
    other: "dinares bahreiníes"
}, {
    id: "BAD",
    displayName: "dinar bosnio",
    one: "dinar bosnio",
    other: "dinares bosnios"
}, {
    id: "YUN",
    displayName: "dinar convertible yugoslavo",
    one: "dinar convertible yugoslavo",
    other: "dinares convertibles yugoslavos"
}, {
    id: "HRD",
    displayName: "dinar croata",
    one: "dinar croata",
    other: "dinares croatas"
}, {
    id: "YUD",
    displayName: "dinar fuerte yugoslavo"
}, {
    id: "IQD",
    displayName: "dinar iraquí",
    symbol: "IQD",
    one: "dinar iraquí",
    other: "dinares iraquíes"
}, {
    id: "JOD",
    displayName: "dinar jordano",
    symbol: "JOD",
    one: "dinar jordano",
    other: "dinares jordanos"
}, {
    id: "KWD",
    displayName: "dinar kuwaití",
    symbol: "KWD",
    one: "dinar kuwaití",
    other: "dinares kuwaitíes"
}, {
    id: "LYD",
    displayName: "dinar libio",
    symbol: "LYD",
    one: "dinar libio",
    other: "dinares libios"
}, {
    id: "MKD",
    displayName: "dinar macedonio",
    symbol: "MKD",
    one: "dinar macedonio",
    other: "dinares macedonios"
}, {
    id: "RSD",
    displayName: "dinar serbio",
    symbol: "RSD",
    one: "dinar serbio",
    other: "dinares serbios"
}, {
    id: "SDD",
    displayName: "dinar sudanés",
    one: "dinar sudanés",
    other: "dinares sudaneses"
}, {
    id: "TND",
    displayName: "dinar tunecino",
    symbol: "TND",
    one: "dinar tunecino",
    other: "dinares tunecinos"
}, {
    id: "YDD",
    displayName: "dinar yemení"
}, {
    id: "STD",
    displayName: "dobra",
    symbol: "STD",
    one: "dobra",
    other: "dobras"
}, {
    id: "VND",
    displayName: "dong",
    symbol: "₫",
    one: "dong",
    other: "dongs"
}, {
    id: "GRD",
    displayName: "dracma griego",
    one: "dracma griego",
    other: "dracmas griegos"
}, {
    id: "AMD",
    displayName: "dram",
    symbol: "AMD",
    one: "dram",
    other: "drams"
}, {
    id: "AED",
    displayName: "dírham de los Emiratos Árabes Unidos",
    symbol: "AED",
    one: "dírham de los Emiratos Árabes Unidos",
    other: "dírhams de los Emiratos Árabes Unidos"
}, {
    id: "MAD",
    displayName: "dírham marroquí",
    symbol: "MAD",
    one: "dírham marroquí",
    other: "dírhams marroquíes"
}, {
    id: "AUD",
    displayName: "dólar australiano",
    symbol: "AUD",
    one: "dólar australiano",
    other: "dólares australianos"
}, {
    id: "BSD",
    displayName: "dólar bahameño",
    symbol: "BSD",
    one: "dólar bahameño",
    other: "dólares bahameños"
}, {
    id: "BBD",
    displayName: "dólar barbadense",
    symbol: "BBD",
    one: "dólar barbadense",
    other: "dólares barbadenses"
}, {
    id: "BZD",
    displayName: "dólar beliceño",
    symbol: "BZD",
    one: "dólar beliceño",
    other: "dólares beliceños"
}, {
    id: "BND",
    displayName: "dólar bruneano",
    symbol: "BND",
    one: "dólar bruneano",
    other: "dólares bruneanos"
}, {
    id: "CAD",
    displayName: "dólar canadiense",
    symbol: "CA$",
    one: "dólar canadiense",
    other: "dólares canadienses"
}, {
    id: "BMD",
    displayName: "dólar de Bermudas",
    symbol: "BMD",
    one: "dólar de Bermudas",
    other: "dólares de Bermudas"
}, {
    id: "TTD",
    displayName: "dólar de Trinidad y Tobago",
    symbol: "TTD",
    one: "dólar de Trinidad y Tobago",
    other: "dólares de Trinidad y Tobago"
}, {
    id: "ZWD",
    displayName: "dólar de Zimbabue"
}, {
    id: "KYD",
    displayName: "dólar de las Islas Caimán",
    symbol: "KYD",
    one: "dólar de las Islas Caimán",
    other: "dólares de las Islas Caimán"
}, {
    id: "XCD",
    displayName: "dólar del Caribe Oriental",
    symbol: "XCD",
    one: "dólar del Caribe Oriental",
    other: "dólares del Caribe Oriental"
}, {
    id: "USD",
    displayName: "dólar estadounidense",
    symbol: "$",
    one: "dólar estadounidense",
    other: "dólares estadounidenses"
}, {
    id: "USN",
    displayName: "dólar estadounidense (día siguiente)",
    one: "dólar estadounidense (día siguiente)",
    other: "dólares estadounidenses (día siguiente)"
}, {
    id: "USS",
    displayName: "dólar estadounidense (mismo día)",
    one: "dólar estadounidense (mismo día)",
    other: "dólares estadounidenses (mismo día)"
}, {
    id: "FJD",
    displayName: "dólar fiyiano",
    symbol: "FJD",
    one: "dólar fiyiano",
    other: "dólares fiyianos"
}, {
    id: "GYD",
    displayName: "dólar guyanés",
    symbol: "GYD",
    one: "dólar guyanés",
    other: "dólares guyaneses"
}, {
    id: "HKD",
    displayName: "dólar hongkonés",
    symbol: "HKD",
    one: "dólar hongkonés",
    other: "dólares hongkoneses"
}, {
    id: "JMD",
    displayName: "dólar jamaicano",
    symbol: "JMD",
    one: "dólar jamaicano",
    other: "dólares jamaicanos"
}, {
    id: "LRD",
    displayName: "dólar liberiano",
    symbol: "LRD",
    one: "dólar liberiano",
    other: "dólares liberianos"
}, {
    id: "NAD",
    displayName: "dólar namibio",
    symbol: "NAD",
    one: "dólar namibio",
    other: "dólares namibios"
}, {
    id: "NZD",
    displayName: "dólar neozelandés",
    symbol: "NZD",
    one: "dólar neozelandés",
    other: "dólares neozelandeses"
}, {
    id: "RHD",
    displayName: "dólar rodesiano"
}, {
    id: "SBD",
    displayName: "dólar salomonense",
    symbol: "SBD",
    one: "dólar salomonense",
    other: "dólares salomonenses"
}, {
    id: "SGD",
    displayName: "dólar singapurense",
    symbol: "SGD",
    one: "dólar singapurense",
    other: "dólares singapurenses"
}, {
    id: "SRD",
    displayName: "dólar surinamés",
    symbol: "SRD",
    one: "dólar surinamés",
    other: "dólares surinameses"
}, {
    id: "ZWL",
    displayName: "dólar zimbabuense"
}, {
    id: "GQE",
    displayName: "ekuele de Guinea Ecuatorial",
    one: "ekuele de Guinea Ecuatorial",
    other: "ekueles de Guinea Ecuatorial"
}, {
    id: "CVE",
    displayName: "escudo de Cabo Verde",
    symbol: "CVE",
    one: "escudo de Cabo Verde",
    other: "escudos de Cabo Verde"
}, {
    id: "GWE",
    displayName: "escudo de Guinea Portuguesa"
}, {
    id: "MZE",
    displayName: "escudo mozambiqueño",
    one: "escudo mozambiqueño",
    other: "escudos mozambiqueños"
}, {
    id: "PTE",
    displayName: "escudo portugués",
    one: "escudo portugués",
    other: "escudos portugueses"
}, {
    id: "TPE",
    displayName: "escudo timorense"
}, {
    id: "PLN",
    displayName: "esloti",
    symbol: "PLN",
    one: "esloti",
    other: "eslotis"
}, {
    id: "EUR",
    displayName: "euro",
    symbol: "€",
    one: "euro",
    other: "euros"
}, {
    id: "CHE",
    displayName: "euro WIR",
    one: "euro WIR",
    other: "euros WIR"
}, {
    id: "AWG",
    displayName: "florín arubeño",
    symbol: "AWG",
    one: "florín arubeño",
    other: "florines arubeños"
}, {
    id: "ANG",
    displayName: "florín de las Antillas Neerlandesas",
    symbol: "ANG",
    one: "florín de las Antillas Neerlandesas",
    other: "florines de las Antillas Neerlandesas"
}, {
    id: "NLG",
    displayName: "florín neerlandés",
    one: "florín neerlandés",
    other: "florines neerlandeses"
}, {
    id: "SRG",
    displayName: "florín surinamés"
}, {
    id: "XRE",
    displayName: "fondos RINET"
}, {
    id: "HUF",
    displayName: "forinto húngaro",
    symbol: "HUF",
    one: "forinto húngaro",
    other: "forintos húngaros"
}, {
    id: "XOF",
    displayName: "franco CFA BCEAO",
    symbol: "XOF",
    one: "franco CFA BCEAO",
    other: "francos CFA BCEAO"
}, {
    id: "XAF",
    displayName: "franco CFA BEAC",
    symbol: "XAF",
    one: "franco CFA BEAC",
    other: "francos CFA BEAC"
}, {
    id: "XPF",
    displayName: "franco CFP",
    symbol: "CFPF",
    one: "franco CFP",
    other: "francos CFP"
}, {
    id: "XFU",
    displayName: "franco UIC francés",
    one: "franco UIC francés",
    other: "francos UIC franceses"
}, {
    id: "CHW",
    displayName: "franco WIR",
    one: "franco WIR",
    other: "francos WIR"
}, {
    id: "BEF",
    displayName: "franco belga",
    one: "franco belga",
    other: "francos belgas"
}, {
    id: "BEC",
    displayName: "franco belga (convertible)",
    one: "franco belga (convertible)",
    other: "francos belgas (convertibles)"
}, {
    id: "BEL",
    displayName: "franco belga (financiero)",
    one: "franco belga (financiero)",
    other: "francos belgas (financieros)"
}, {
    id: "BIF",
    displayName: "franco burundés",
    symbol: "BIF",
    one: "franco burundés",
    other: "francos burundeses"
}, {
    id: "KMF",
    displayName: "franco comorense",
    symbol: "KMF",
    one: "franco comorense",
    other: "francos comorenses"
}, {
    id: "CDF",
    displayName: "franco congoleño",
    symbol: "CDF",
    one: "franco congoleño",
    other: "francos congoleños"
}, {
    id: "LUC",
    displayName: "franco convertible luxemburgués",
    one: "franco convertible luxemburgués",
    other: "francos convertibles luxemburgueses"
}, {
    id: "LUL",
    displayName: "franco financiero luxemburgués",
    one: "franco financiero luxemburgués",
    other: "francos financieros luxemburgueses"
}, {
    id: "FRF",
    displayName: "franco francés",
    one: "franco francés",
    other: "francos franceses"
}, {
    id: "GNF",
    displayName: "franco guineano",
    symbol: "GNF",
    one: "franco guineano",
    other: "francos guineanos"
}, {
    id: "LUF",
    displayName: "franco luxemburgués",
    one: "franco luxemburgués",
    other: "francos luxemburgueses"
}, {
    id: "MGF",
    displayName: "franco malgache"
}, {
    id: "MLF",
    displayName: "franco malí"
}, {
    id: "MAF",
    displayName: "franco marroquí",
    one: "franco marroquí",
    other: "francos marroquíes"
}, {
    id: "XFO",
    displayName: "franco oro francés",
    one: "franco oro francés",
    other: "francos oro franceses"
}, {
    id: "RWF",
    displayName: "franco ruandés",
    symbol: "RWF",
    one: "franco ruandés",
    other: "francos ruandeses"
}, {
    id: "CHF",
    displayName: "franco suizo",
    symbol: "CHF",
    one: "franco suizo",
    other: "francos suizos"
}, {
    id: "DJF",
    displayName: "franco yibutiano",
    symbol: "DJF",
    one: "franco yibutiano",
    other: "francos yibutianos"
}, {
    id: "HTG",
    displayName: "gourde haitiano",
    symbol: "HTG",
    one: "gourde haitiano",
    other: "gourdes haitianos"
}, {
    id: "UAH",
    displayName: "grivna",
    symbol: "UAH",
    one: "grivna",
    other: "grivnas"
}, {
    id: "PYG",
    displayName: "guaraní paraguayo",
    symbol: "PYG",
    one: "guaraní paraguayo",
    other: "guaraníes paraguayos"
}, {
    id: "BTN",
    displayName: "gultrum",
    symbol: "BTN",
    one: "gultrum",
    other: "gultrums"
}, {
    id: "PEI",
    displayName: "inti peruano",
    one: "inti peruano",
    other: "intis peruanos"
}, {
    id: "UAK",
    displayName: "karbovanet ucraniano",
    one: "karbovanet ucraniano",
    other: "karbovanets ucranianos"
}, {
    id: "MMK",
    displayName: "kiat",
    symbol: "MMK",
    one: "kiat",
    other: "kiats"
}, {
    id: "PGK",
    displayName: "kina",
    symbol: "PGK",
    one: "kina",
    other: "kinas"
}, {
    id: "LAK",
    displayName: "kip",
    symbol: "LAK",
    one: "kip",
    other: "kips"
}, {
    id: "ZMW",
    displayName: "kuacha zambiano",
    symbol: "ZMW",
    one: "kuacha zambiano",
    other: "kuachas zambianos"
}, {
    id: "AOA",
    displayName: "kuanza",
    symbol: "AOA",
    one: "kuanza",
    other: "kuanzas"
}, {
    id: "HRK",
    displayName: "kuna",
    symbol: "HRK",
    one: "kuna",
    other: "kunas"
}, {
    id: "GEK",
    displayName: "kupon larit georgiano"
}, {
    id: "MWK",
    displayName: "kwacha malauí",
    symbol: "MWK",
    one: "kwacha malauí",
    other: "kwachas malauís"
}, {
    id: "ZMK",
    displayName: "kwacha zambiano (1968–2012)",
    one: "kwacha zambiano (1968–2012)",
    other: "kwachas zambianos (1968–2012)"
}, {
    id: "AOK",
    displayName: "kwanza angoleño (1977–1990)"
}, {
    id: "AOR",
    displayName: "kwanza reajustado angoleño (1995–1999)"
}, {
    id: "BUK",
    displayName: "kyat birmano",
    one: "kyat birmano",
    other: "kyat birmanos"
}, {
    id: "GEL",
    displayName: "lari",
    symbol: "GEL",
    one: "lari",
    other: "laris"
}, {
    id: "LVL",
    displayName: "lats letón",
    symbol: "LVL",
    one: "lats letón",
    other: "lats letónes"
}, {
    id: "ALL",
    displayName: "lek",
    symbol: "ALL",
    one: "lek",
    other: "lekes"
}, {
    id: "HNL",
    displayName: "lempira hondureño",
    symbol: "HNL",
    one: "lempira hondureño",
    other: "lempiras hondureños"
}, {
    id: "SLL",
    displayName: "leona",
    symbol: "SLL",
    one: "leona",
    other: "leonas"
}, {
    id: "MDL",
    displayName: "leu moldavo",
    symbol: "MDL",
    one: "leu moldavo",
    other: "leus moldavos"
}, {
    id: "RON",
    displayName: "leu rumano",
    symbol: "RON",
    one: "leu rumano",
    other: "leus rumanos"
}, {
    id: "BGN",
    displayName: "lev búlgaro",
    symbol: "BGN",
    one: "lev búlgaro",
    other: "levas búlgaras"
}, {
    id: "BGL",
    displayName: "lev fuerte búlgaro",
    one: "lev fuerte búlgaro",
    other: "leva fuertes búlgaros"
}, {
    id: "GBP",
    displayName: "libra británica",
    symbol: "GBP",
    one: "libra británica",
    other: "libras británicas"
}, {
    id: "CYP",
    displayName: "libra chipriota",
    one: "libra chipriota",
    other: "libras chipriotas"
}, {
    id: "SHP",
    displayName: "libra de Santa Elena",
    symbol: "SHP",
    one: "libra de Santa Elena",
    other: "libras de Santa Elena"
}, {
    id: "EGP",
    displayName: "libra egipcia",
    symbol: "EGP",
    one: "libra egipcia",
    other: "libras egipcias"
}, {
    id: "GIP",
    displayName: "libra gibraltareña",
    symbol: "GIP",
    one: "libra gibraltareña",
    other: "libras gibraltareñas"
}, {
    id: "IEP",
    displayName: "libra irlandesa",
    one: "libra irlandesa",
    other: "libras irlandesas"
}, {
    id: "ILP",
    displayName: "libra israelí",
    one: "libra israelí",
    other: "libras israelíes"
}, {
    id: "LBP",
    displayName: "libra libanesa",
    symbol: "LBP",
    one: "libra libanesa",
    other: "libras libanesas"
}, {
    id: "MTP",
    displayName: "libra maltesa",
    one: "libra maltesa",
    other: "libras maltesas"
}, {
    id: "FKP",
    displayName: "libra malvinense",
    symbol: "FKP",
    one: "libra malvinense",
    other: "libras malvinenses"
}, {
    id: "SYP",
    displayName: "libra siria",
    symbol: "SYP",
    one: "libra siria",
    other: "libras sirias"
}, {
    id: "SDG",
    displayName: "libra sudanesa",
    symbol: "SDG",
    one: "libra sudanesa",
    other: "libras sudanesas"
}, {
    id: "SDP",
    displayName: "libra sudanesa antigua",
    one: "libra sudanesa antigua",
    other: "libras sudanesas antiguas"
}, {
    id: "SSP",
    displayName: "libra sursudanesa",
    symbol: "SSP",
    one: "libra sursudanesa",
    other: "libras sursudanesas"
}, {
    id: "SZL",
    displayName: "lilangeni",
    symbol: "SZL",
    one: "lilangeni",
    other: "lilangenis"
}, {
    id: "ITL",
    displayName: "lira italiana",
    one: "lira italiana",
    other: "liras italianas"
}, {
    id: "MTL",
    displayName: "lira maltesa",
    one: "lira maltesa",
    other: "liras maltesas"
}, {
    id: "TRY",
    displayName: "lira turca",
    symbol: "TRY",
    one: "lira turca",
    other: "liras turcas"
}, {
    id: "TRL",
    displayName: "lira turca (1922–2005)",
    one: "lira turca (1922–2005)",
    other: "liras turcas (1922–2005)"
}, {
    id: "LTL",
    displayName: "litas lituano",
    symbol: "LTL",
    one: "litas lituana",
    other: "litas lituanas"
}, {
    id: "LSL",
    displayName: "loti lesothense"
}, {
    id: "AZN",
    displayName: "manat azerí",
    symbol: "AZN",
    one: "manat azerí",
    other: "manat azeríes"
}, {
    id: "AZM",
    displayName: "manat azerí (1993–2006)"
}, {
    id: "TMT",
    displayName: "manat turcomano",
    symbol: "TMT",
    one: "manat turcomano",
    other: "manats turcomanos"
}, {
    id: "TMM",
    displayName: "manat turcomano (1993–2009)",
    one: "manat turcomano (1993–2009)",
    other: "manats turcomanos (1993–2009)"
}, {
    id: "DEM",
    displayName: "marco alemán",
    one: "marco alemán",
    other: "marcos alemanes"
}, {
    id: "BAM",
    displayName: "marco convertible de Bosnia-Herzegovina",
    symbol: "BAM",
    one: "marco convertible de Bosnia-Herzegovina",
    other: "marcos convertibles de Bosnia-Herzegovina"
}, {
    id: "FIM",
    displayName: "marco finlandés",
    one: "marco finlandés",
    other: "marcos finlandeses"
}, {
    id: "MZN",
    displayName: "metical",
    symbol: "MZN",
    one: "metical",
    other: "meticales"
}, {
    id: "XXX",
    displayName: "moneda desconocida",
    one: "(moneda desconocida)",
    other: "(moneda desconocida)"
}, {
    id: "NGN",
    displayName: "naira",
    symbol: "NGN",
    one: "naira",
    other: "nairas"
}, {
    id: "ERN",
    displayName: "nakfa",
    symbol: "ERN",
    one: "nakfa",
    other: "nakfas"
}, {
    id: "BRB",
    displayName: "nuevo cruceiro brasileño (1967–1986)",
    one: "nuevo cruzado brasileño (BRB)",
    other: "nuevos cruzados brasileños (BRB)"
}, {
    id: "BRN",
    displayName: "nuevo cruzado brasileño",
    one: "nuevo cruzado brasileño",
    other: "nuevos cruzados brasileños"
}, {
    id: "TWD",
    displayName: "nuevo dólar taiwanés",
    symbol: "TWD",
    one: "nuevo dólar taiwanés",
    other: "nuevos dólares taiwaneses"
}, {
    id: "AON",
    displayName: "nuevo kwanza angoleño (1990–2000)"
}, {
    id: "BYB",
    displayName: "nuevo rublo bielorruso (1994–1999)",
    one: "nuevo rublo bielorruso",
    other: "nuevos rublos bielorrusos"
}, {
    id: "PEN",
    displayName: "nuevo sol peruano",
    symbol: "PEN",
    one: "nuevo sol peruano",
    other: "nuevos soles peruanos"
}, {
    id: "ILS",
    displayName: "nuevo séquel israelí",
    symbol: "ILS",
    one: "nuevo séquel israelí",
    other: "nuevos séqueles israelíes"
}, {
    id: "ZRN",
    displayName: "nuevo zaire zaireño"
}, {
    id: "XAU",
    displayName: "oro",
    one: "oro",
    other: "oro"
}, {
    id: "DDM",
    displayName: "ostmark de Alemania del Este",
    one: "marco de la República Democrática Alemana",
    other: "marcos de la República Democrática Alemana"
}, {
    id: "TOP",
    displayName: "paanga",
    symbol: "TOP",
    one: "paanga",
    other: "paangas"
}, {
    id: "XPD",
    displayName: "paladio",
    one: "paladio",
    other: "paladio"
}, {
    id: "MOP",
    displayName: "pataca de Macao",
    symbol: "MOP",
    one: "pataca de Macao",
    other: "patacas de Macao"
}, {
    id: "ADP",
    displayName: "peseta andorrana",
    one: "peseta andorrana",
    other: "pesetas andorranas"
}, {
    id: "ESP",
    displayName: "peseta española",
    symbol: "₧",
    one: "peseta española",
    other: "pesetas españolas"
}, {
    id: "ESA",
    displayName: "peseta española (cuenta A)",
    one: "peseta española (cuenta A)",
    other: "pesetas españolas (cuenta A)"
}, {
    id: "ESB",
    displayName: "peseta española (cuenta convertible)",
    one: "peseta española (cuenta convertible)",
    other: "pesetas españolas (cuenta convertible)"
}, {
    id: "ARS",
    displayName: "peso argentino",
    symbol: "ARS",
    one: "peso argentino",
    other: "pesos argentinos"
}, {
    id: "ARP",
    displayName: "peso argentino (1983–1985)",
    one: "peso argentino (ARP)",
    other: "pesos argentinos (ARP)"
}, {
    id: "BOP",
    displayName: "peso boliviano",
    one: "peso boliviano",
    other: "pesos bolivianos"
}, {
    id: "CLP",
    displayName: "peso chileno",
    symbol: "CLP",
    one: "peso chileno",
    other: "pesos chilenos"
}, {
    id: "COP",
    displayName: "peso colombiano",
    symbol: "COP",
    one: "peso colombiano",
    other: "pesos colombianos"
}, {
    id: "CUP",
    displayName: "peso cubano",
    symbol: "CUP",
    one: "peso cubano",
    other: "pesos cubanos"
}, {
    id: "CUC",
    displayName: "peso cubano convertible",
    symbol: "CUC",
    one: "peso cubano convertible",
    other: "pesos cubanos convertibles"
}, {
    id: "GWP",
    displayName: "peso de Guinea-Bissáu"
}, {
    id: "MXP",
    displayName: "peso de plata mexicano (1861–1992)",
    one: "peso de plata mexicano (MXP)",
    other: "pesos de plata mexicanos (MXP)"
}, {
    id: "DOP",
    displayName: "peso dominicano",
    symbol: "DOP",
    one: "peso dominicano",
    other: "pesos dominicanos"
}, {
    id: "PHP",
    displayName: "peso filipino",
    symbol: "PHP",
    one: "peso filipino",
    other: "pesos filipinos"
}, {
    id: "MXN",
    displayName: "peso mexicano",
    symbol: "MXN",
    one: "peso mexicano",
    other: "pesos mexicanos"
}, {
    id: "UYU",
    displayName: "peso uruguayo",
    symbol: "UYU",
    one: "peso uruguayo",
    other: "pesos uruguayos"
}, {
    id: "UYP",
    displayName: "peso uruguayo (1975–1993)",
    one: "peso uruguayo (UYP)",
    other: "pesos uruguayos (UYP)"
}, {
    id: "UYI",
    displayName: "peso uruguayo en unidades indexadas",
    one: "peso uruguayo en unidades indexadas",
    other: "pesos uruguayos en unidades indexadas"
}, {
    id: "XAG",
    displayName: "plata",
    one: "plata",
    other: "plata"
}, {
    id: "XPT",
    displayName: "platino",
    one: "platino",
    other: "platino"
}, {
    id: "BWP",
    displayName: "pula",
    symbol: "BWP",
    one: "pula",
    other: "pulas"
}, {
    id: "GTQ",
    displayName: "quetzal guatemalteco",
    symbol: "GTQ",
    one: "quetzal guatemalteco",
    other: "quetzales guatemaltecos"
}, {
    id: "ZAR",
    displayName: "rand",
    symbol: "ZAR",
    one: "rand",
    other: "rands"
}, {
    id: "ZAL",
    displayName: "rand sudafricano (financiero)"
}, {
    id: "BRL",
    displayName: "real brasileño",
    symbol: "BRL",
    one: "real brasileño",
    other: "reales brasileños"
}, {
    id: "QAR",
    displayName: "rial catarí",
    symbol: "QAR",
    one: "rial catarí",
    other: "riales cataríes"
}, {
    id: "IRR",
    displayName: "rial iraní",
    symbol: "IRR",
    one: "rial iraní",
    other: "riales iraníes"
}, {
    id: "OMR",
    displayName: "rial omaní",
    symbol: "OMR",
    one: "rial omaní",
    other: "riales omaníes"
}, {
    id: "SAR",
    displayName: "rial saudí",
    symbol: "SAR",
    one: "rial saudí",
    other: "riales saudíes"
}, {
    id: "YER",
    displayName: "rial yemení",
    symbol: "YER",
    one: "rial yemení",
    other: "riales yemeníes"
}, {
    id: "KHR",
    displayName: "riel",
    symbol: "KHR",
    one: "riel",
    other: "rieles"
}, {
    id: "MYR",
    displayName: "ringit",
    symbol: "MYR",
    one: "ringit",
    other: "ringits"
}, {
    id: "BYR",
    displayName: "rublo bielorruso",
    symbol: "BYR",
    one: "rublo bielorruso",
    other: "rublos bielorrusos"
}, {
    id: "LVR",
    displayName: "rublo letón",
    one: "rublo letón",
    other: "rublos letones"
}, {
    id: "RUB",
    displayName: "rublo ruso",
    symbol: "RUB",
    one: "rublo ruso",
    other: "rublos rusos"
}, {
    id: "RUR",
    displayName: "rublo ruso (1991–1998)",
    symbol: "р.",
    one: "rublo ruso (RUR)",
    other: "rublos rusos (RUR)"
}, {
    id: "SUR",
    displayName: "rublo soviético",
    one: "rublo soviético",
    other: "rublos soviéticos"
}, {
    id: "TJR",
    displayName: "rublo tayiko"
}, {
    id: "MVR",
    displayName: "rufiya",
    symbol: "MVR",
    one: "rufiya",
    other: "rufiyas"
}, {
    id: "LKR",
    displayName: "rupia esrilanquesa",
    symbol: "LKR",
    one: "rupia esrilanquesa",
    other: "rupias esrilanquesas"
}, {
    id: "INR",
    displayName: "rupia india",
    symbol: "INR",
    one: "rupia india",
    other: "rupias indias"
}, {
    id: "IDR",
    displayName: "rupia indonesia",
    symbol: "IDR",
    one: "rupia indonesia",
    other: "rupias indonesias"
}, {
    id: "MUR",
    displayName: "rupia mauriciana",
    symbol: "MUR",
    one: "rupia mauriciana",
    other: "rupias mauricianas"
}, {
    id: "NPR",
    displayName: "rupia nepalí",
    symbol: "NPR",
    one: "rupia nepalí",
    other: "rupias nepalíes"
}, {
    id: "PKR",
    displayName: "rupia pakistaní",
    symbol: "PKR",
    one: "rupia pakistaní",
    other: "rupias pakistaníes"
}, {
    id: "SCR",
    displayName: "rupia seychellense",
    symbol: "SCR",
    one: "rupia seychellense",
    other: "rupias seychellenses"
}, {
    id: "PES",
    displayName: "sol peruano",
    one: "sol peruano",
    other: "soles peruanos"
}, {
    id: "KGS",
    displayName: "som",
    symbol: "KGS",
    one: "som",
    other: "soms"
}, {
    id: "TJS",
    displayName: "somoni tayiko",
    symbol: "TJS",
    one: "somoni tayiko",
    other: "somonis tayikos"
}, {
    id: "ECS",
    displayName: "sucre ecuatoriano",
    one: "sucre ecuatoriano",
    other: "sucres ecuatorianos"
}, {
    id: "UZS",
    displayName: "sum",
    symbol: "UZS",
    one: "sum",
    other: "sums"
}, {
    id: "YUM",
    displayName: "super dinar yugoslavo"
}, {
    id: "GNS",
    displayName: "syli guineano"
}, {
    id: "BDT",
    displayName: "taka",
    symbol: "BDT",
    one: "taka",
    other: "takas"
}, {
    id: "WST",
    displayName: "tala",
    symbol: "WST",
    one: "tala",
    other: "talas"
}, {
    id: "LTT",
    displayName: "talonas lituano",
    one: "talonas lituana",
    other: "talonas lituanas"
}, {
    id: "KZT",
    displayName: "tenge kazako",
    symbol: "KZT",
    one: "tenge kazako",
    other: "tenges kazakos"
}, {
    id: "MNT",
    displayName: "tugrik",
    symbol: "MNT",
    one: "tugrik",
    other: "tugriks"
}, {
    id: "SIT",
    displayName: "tólar esloveno",
    one: "tólar esloveno",
    other: "tólares eslovenos"
}, {
    id: "MRO",
    displayName: "uguiya",
    symbol: "MRO",
    one: "uguiya",
    other: "uguiyas"
}, {
    id: "XBA",
    displayName: "unidad compuesta europea",
    one: "unidad compuesta europea",
    other: "unidades compuestas europeas"
}, {
    id: "XBC",
    displayName: "unidad de cuenta europea (XBC)",
    one: "unidad de cuenta europea (XBC)",
    other: "unidades de cuenta europeas (XBC)"
}, {
    id: "XBD",
    displayName: "unidad de cuenta europea (XBD)",
    one: "unidad de cuenta europea (XBD)",
    other: "unidades de cuenta europeas (XBD)"
}, {
    id: "CLF",
    displayName: "unidad de fomento chilena",
    one: "unidad de fomento chilena",
    other: "unidades de fomento chilenas"
}, {
    id: "MXV",
    displayName: "unidad de inversión (UDI) mexicana",
    one: "unidad de inversión (UDI) mexicana",
    other: "unidades de inversión (UDI) mexicanas"
}, {
    id: "XEU",
    displayName: "unidad de moneda europea",
    one: "unidad de moneda europea",
    other: "unidades de moneda europeas"
}, {
    id: "ECV",
    displayName: "unidad de valor constante (UVC) ecuatoriana",
    one: "unidad de valor constante (UVC) ecuatoriana",
    other: "unidades de valor constante (UVC) ecuatorianas"
}, {
    id: "COU",
    displayName: "unidad de valor real colombiana",
    one: "unidad de valor real",
    other: "unidades de valor reales"
}, {
    id: "XBB",
    displayName: "unidad monetaria europea",
    one: "unidad monetaria europea",
    other: "unidades monetarias europeas"
}, {
    id: "VUV",
    displayName: "vatu",
    symbol: "VUV",
    one: "vatu",
    other: "vatus"
}, {
    id: "KPW",
    displayName: "won norcoreano",
    symbol: "KPW",
    one: "won norcoreano",
    other: "wons norcoreanos"
}, {
    id: "KRW",
    displayName: "won surcoreano",
    symbol: "KRW",
    one: "won surcoreano",
    other: "wons surcoreanos"
}, {
    id: "JPY",
    displayName: "yen",
    symbol: "JPY",
    one: "yen",
    other: "yenes"
}, {
    id: "CNY",
    displayName: "yuan",
    symbol: "CNY",
    one: "yuan",
    other: "yuanes"
}, {
    id: "ZRZ",
    displayName: "zaire zaireño"
}, {
    id: "PLZ",
    displayName: "zloty polaco (1950–1995)",
    one: "zloty polaco (PLZ)",
    other: "zlotys polacos (PLZ)"
} ];

module.exports = inter;