function defaults(targetObj) {
    for (var i = 1; i < arguments.length; i += 1) {
        if (arguments[i] && typeof arguments[i] === "object") {
            for (var propertyName in arguments[i]) {
                if (typeof targetObj[propertyName] === "undefined") {
                    targetObj[propertyName] = arguments[i][propertyName];
                }
            }
        }
    }
    return targetObj;
}

var P = require("./root.js"), inter = defaults({
    renderers: {}
}, P);

var _dp9t1 = {
    "default": "#,##0 %"
}, _dp9t2 = [ "а҃", "в҃", "г҃", "д҃" ], _dp9t3 = {
    displayName: "вѣ́къ"
}, _dp9t4 = {
    displayName: "мцⷭ҇ъ"
}, _dp9t5 = {
    displayName: "ДП/ПП"
}, _dp9t6 = {
    all: {
        leap: "{0}bis"
    }
}, _dp9t7 = {
    a: "h a – h a",
    h: "h–h a"
}, _dp9t8 = [ "Before R.O.C.", "R.O.C." ], _dp9t9 = [ "пре́дъ р. х.", "по р. х." ], _dp9t10 = {
    a: "h a – h a v",
    h: "h–h a v"
}, _dp9t11 = [ "Н", "П", "В", "С", "Ч", "П", "С" ], _dp9t12 = {
    displayName: "де́нь седми́цы"
}, _dp9t13 = {
    d: "MMM d–d",
    M: "MMM d – MMM d"
}, _dp9t14 = {
    displayName: "по́ѧсъ часовѡ́мъ"
}, _dp9t15 = {
    wide: [ "AH" ],
    abbreviated: [ "AH" ]
}, _dp9t16 = {
    H: "HH:mm–HH:mm",
    m: "HH:mm–HH:mm"
}, _dp9t17 = {
    M: "y-MM – y-MM",
    y: "y-MM – y-MM"
}, _dp9t18 = {
    M: "U MMM–MMM",
    y: "U MMM – U MMM"
}, _dp9t19 = {
    H: "HH:mm–HH:mm v",
    m: "HH:mm–HH:mm v"
}, _dp9t20 = {
    d: "MM-dd – MM-dd",
    M: "MM-dd – MM-dd"
}, _dp9t21 = {
    M: "G y MMM–MMM",
    y: "G y MMM – y MMM"
}, _dp9t22 = {
    M: "U MMMM–MMMM",
    y: "U MMMM – U MMMM"
}, _dp9t23 = {
    "0": "дне́сь",
    "1": "наꙋ́трїе",
    "-1": "вчера̀"
}, _dp9t24 = {
    M: "G y MMMM–MMMM",
    y: "G y MMMM – y MMMM"
}, _dp9t25 = {
    M: "GGGGG y-MM – y-MM",
    y: "GGGGG y-MM – y-MM"
}, _dp9t26 = {
    "0": "this year",
    "1": "next year",
    "-1": "last year"
}, _dp9t27 = {
    "0": "this week",
    "1": "next week",
    "-1": "last week"
}, _dp9t28 = {
    future: {
        other: "+{0} y"
    },
    past: {
        other: "-{0} y"
    }
}, _dp9t29 = {
    future: {
        other: "+{0} Q"
    },
    past: {
        other: "-{0} Q"
    }
}, _dp9t30 = {
    future: {
        other: "+{0} m"
    },
    past: {
        other: "-{0} m"
    }
}, _dp9t31 = {
    future: {
        other: "+{0} w"
    },
    past: {
        other: "-{0} w"
    }
}, _dp9t32 = {
    future: {
        other: "+{0} d"
    },
    past: {
        other: "-{0} d"
    }
}, _dp9t33 = {
    future: {
        other: "+{0} h"
    },
    past: {
        other: "-{0} h"
    }
}, _dp9t34 = {
    future: {
        other: "+{0} s"
    },
    past: {
        other: "-{0} s"
    }
}, _dp9t35 = {
    d: "MM-dd, E – MM-dd, E",
    M: "MM-dd, E – MM-dd, E"
}, _dp9t36 = {
    d: "MMM d, E – MMM d, E",
    M: "MMM d, E – MMM d, E"
}, _dp9t37 = [ "а҃-ѧ чеⷡ҇", "в҃-ѧ чеⷡ҇", "г҃-ѧ чеⷡ҇", "д҃-ѧ чеⷡ҇" ], _dp9t38 = {
    "0": "this month",
    "1": "next month",
    "-1": "last month"
}, _dp9t39 = {
    wide: [ "ERA0", "ERA1" ],
    abbreviated: [ "ERA0", "ERA1" ]
}, _dp9t40 = {
    future: {
        other: "+{0} min"
    },
    past: {
        other: "-{0} min"
    }
}, _dp9t41 = [ "ндⷧ҇ѧ", "пнⷣе", "втоⷬ҇", "срⷣе", "чеⷦ҇", "пѧⷦ҇", "сꙋⷠ҇" ], _dp9t42 = {
    "0": "this Sunday",
    "1": "next Sunday",
    "-1": "last Sunday"
}, _dp9t43 = {
    "0": "this Monday",
    "1": "next Monday",
    "-1": "last Monday"
}, _dp9t44 = {
    "0": "this Friday",
    "1": "next Friday",
    "-1": "last Friday"
}, _dp9t45 = [ "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" ], _dp9t46 = {
    a: "h:mm a – h:mm a",
    h: "h:mm–h:mm a",
    m: "h:mm–h:mm a"
}, _dp9t47 = [ "І҆", "Ф", "М", "А҆", "М", "І҆", "І҆", "А҆", "С", "Ѻ҆", "Н", "Д" ], _dp9t48 = {
    "0": "this quarter",
    "1": "next quarter",
    "-1": "last quarter"
}, _dp9t49 = {
    "0": "this Tuesday",
    "1": "next Tuesday",
    "-1": "last Tuesday"
}, _dp9t50 = {
    d: "U MMM d–d",
    M: "U MMM d – MMM d",
    y: "U MMM d – U MMM d"
}, _dp9t51 = [ "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13" ], _dp9t52 = {
    "0": "this Thursday",
    "1": "next Thursday",
    "-1": "last Thursday"
}, _dp9t53 = {
    "0": "this Saturday",
    "1": "next Saturday",
    "-1": "last Saturday"
}, _dp9t54 = {
    a: "h:mm a – h:mm a v",
    h: "h:mm–h:mm a v",
    m: "h:mm–h:mm a v"
}, _dp9t55 = {
    "0": "this Wednesday",
    "1": "next Wednesday",
    "-1": "last Wednesday"
}, _dp9t56 = {
    d: "G y MMM d–d",
    M: "G y MMM d – MMM d",
    y: "G y MMM d – y MMM d"
}, _dp9t57 = {
    relative: _dp9t42
}, _dp9t58 = {
    relative: _dp9t43
}, _dp9t59 = {
    relative: _dp9t44
}, _dp9t60 = {
    id: "DK",
    displayName: "Дані́ѧ",
    regionId: "154",
    hasTimeZones: true
}, _dp9t61 = {
    id: "CA",
    displayName: "Кана́да",
    regionId: "021",
    hasTimeZones: true
}, _dp9t62 = {
    id: "MX",
    displayName: "Ме́ѯїко",
    regionId: "013",
    hasTimeZones: true
}, _dp9t63 = {
    id: "FR",
    displayName: "га́ллїа",
    regionId: "155",
    hasTimeZones: true
}, _dp9t64 = {
    id: "RU",
    displayName: "рѡссі́а",
    regionId: "151",
    hasTimeZones: true
}, _dp9t65 = {
    id: "IN",
    displayName: "і҆́ндїа",
    regionId: "034",
    hasTimeZones: true
}, _dp9t66 = {
    id: "IT",
    displayName: "і҆та́лїа",
    regionId: "039",
    hasTimeZones: true
}, _dp9t67 = {
    id: "JP",
    displayName: "ꙗ҆пѡ́нїа",
    regionId: "030",
    hasTimeZones: true
}, _dp9t68 = {
    relative: _dp9t49
}, _dp9t69 = {
    id: "BR",
    displayName: "бразі́лїа",
    regionId: "005",
    hasTimeZones: true
}, _dp9t70 = {
    id: "DE",
    displayName: "герма́нїа",
    regionId: "155",
    hasTimeZones: true
}, _dp9t71 = {
    id: "KG",
    displayName: "кирги́зїа",
    regionId: "143",
    hasTimeZones: true
}, _dp9t72 = {
    d: "y-MM-dd – y-MM-dd",
    M: "y-MM-dd – y-MM-dd",
    y: "y-MM-dd – y-MM-dd"
}, _dp9t73 = {
    id: "UA",
    displayName: "ᲂу҆краи́на",
    regionId: "151",
    hasTimeZones: true
}, _dp9t74 = {
    id: "AU",
    displayName: "А҆ѵстралі́ѧ",
    regionId: "053",
    hasTimeZones: true
}, _dp9t75 = {
    id: "KZ",
    displayName: "казахста́нъ",
    regionId: "143",
    hasTimeZones: true
}, _dp9t76 = [ "а҃-ѧ че́тверть", "в҃-ѧ че́тверть", "г҃-ѧ че́тверть", "д҃-ѧ че́тверть" ], _dp9t77 = {
    relative: _dp9t52
}, _dp9t78 = {
    relative: _dp9t53
}, _dp9t79 = {
    id: "BY",
    displayName: "бѣ́лаѧ рꙋ́сь",
    regionId: "151",
    hasTimeZones: true
}, _dp9t80 = {
    abbreviated: {
        leap: "{0}bis"
    },
    narrow: {
        leap: "{0}b"
    },
    wide: {
        leap: "{0}bis"
    }
}, _dp9t81 = {
    relative: _dp9t55
}, _dp9t82 = [ "M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12" ], _dp9t83 = {
    id: "CN",
    displayName: "хи́нскаѧ страна̀",
    regionId: "030",
    hasTimeZones: true
}, _dp9t84 = {
    id: "GB",
    displayName: "Вели́каѧ брїта́нїа",
    regionId: "154",
    hasTimeZones: true
}, _dp9t85 = [ undefined, "zi", "chou", "yin", "mao", "chen", "si", "wu", "wei", "shen", "you", "xu" ], _dp9t86 = {
    abbreviated: {
        am: "ДП",
        pm: "ПП"
    },
    narrow: {
        am: "ДП",
        pm: "ПП"
    },
    wide: {
        am: "ДП",
        pm: "ПП"
    }
}, _dp9t87 = {
    d: "U MMM d, E – MMM d, E",
    M: "U MMM d, E – MMM d, E",
    y: "U MMM d, E – U MMM d, E"
}, _dp9t88 = {
    displayName: "ча́съ",
    relativeTime: _dp9t33
}, _dp9t89 = [ "недѣ́лѧ", "понедѣ́льникъ", "вто́рникъ", "среда̀", "четверто́къ", "пѧто́къ", "сꙋббѡ́та" ], _dp9t90 = {
    d: "GGGGG y-MM-dd – y-MM-dd",
    M: "GGGGG y-MM-dd – y-MM-dd",
    y: "GGGGG y-MM-dd – y-MM-dd"
}, _dp9t91 = {
    d: "y-MM-dd, E – y-MM-dd, E",
    M: "y-MM-dd, E – y-MM-dd, E",
    y: "y-MM-dd, E – y-MM-dd, E"
}, _dp9t92 = {
    d: "G y MMM d, E – MMM d, E",
    M: "G y MMM d, E – MMM d, E",
    y: "G y MMM d, E – y MMM d, E"
}, _dp9t93 = {
    displayName: "минꙋ́та",
    relativeTime: _dp9t40
}, _dp9t94 = [ "і҆аⷩ҇", "феⷡ҇", "маⷬ҇", "а҆пⷬ҇", "маꙵ", "і҆ꙋⷩ҇", "і҆ꙋⷧ҇", "а҆́ѵⷢ҇", "сеⷫ҇", "ѻ҆кⷮ", "ноеⷨ", "деⷦ҇" ], _dp9t95 = {
    id: "US",
    displayName: "а҆мерїка̑нскїѧ соедине̑нныѧ держа̑вы",
    regionId: "021",
    hasTimeZones: true
}, _dp9t96 = {
    displayName: "секꙋ́нда",
    relative: [ "now" ],
    relativeTime: _dp9t34
}, _dp9t97 = {
    d: "GGGGG y-MM-dd, E – y-MM-dd, E",
    M: "GGGGG y-MM-dd, E – y-MM-dd, E",
    y: "GGGGG y-MM-dd, E – y-MM-dd, E"
}, _dp9t98 = [ "Muh.", "Saf.", "Rab. I", "Rab. II", "Jum. I", "Jum. II", "Raj.", "Sha.", "Ram.", "Shaw.", "Dhuʻl-Q.", "Dhuʻl-H." ], _dp9t99 = [ "Tishri", "Heshvan", "Kislev", "Tevet", "Shevat", "Adar I", "Adar", "Nisan", "Iyar", "Sivan", "Tamuz", "Av", "Elul" ], _dp9t100 = [ "Farvardin", "Ordibehesht", "Khordad", "Tir", "Mordad", "Shahrivar", "Mehr", "Aban", "Azar", "Dey", "Bahman", "Esfand" ], _dp9t101 = [ "Tout", "Baba", "Hator", "Kiahk", "Toba", "Amshir", "Baramhat", "Baramouda", "Bashans", "Paona", "Epep", "Mesra", "Nasie" ], _dp9t102 = [ "Meskerem", "Tekemt", "Hedar", "Tahsas", "Ter", "Yekatit", "Megabit", "Miazia", "Genbot", "Sene", "Hamle", "Nehasse", "Pagumen" ], _dp9t103 = [ "Chaitra", "Vaisakha", "Jyaistha", "Asadha", "Sravana", "Bhadra", "Asvina", "Kartika", "Agrahayana", "Pausa", "Magha", "Phalguna" ], _dp9t104 = {
    displayName: "де́нь",
    relative: _dp9t23,
    relativeTime: _dp9t32
}, _dp9t105 = [ "Muharram", "Safar", "Rabiʻ I", "Rabiʻ II", "Jumada I", "Jumada II", "Rajab", "Shaʻban", "Ramadan", "Shawwal", "Dhuʻl-Qiʻdah", "Dhuʻl-Hijjah" ], _dp9t106 = {
    displayName: "лѣ́то",
    relative: _dp9t26,
    relativeTime: _dp9t28
}, _dp9t107 = {
    abbreviated: _dp9t2,
    narrow: _dp9t2,
    wide: _dp9t76
}, _dp9t108 = {
    displayName: "седми́ца",
    relative: _dp9t27,
    relativeTime: _dp9t31
}, _dp9t109 = [ "і҆аннꙋа́рїа", "феврꙋа́рїа", "ма́рта", "а҆прі́ллїа", "ма́їа", "і҆ꙋ́нїа", "і҆ꙋ́лїа", "а҆́ѵгꙋста", "септе́мврїа", "ѻ҆ктѡ́врїа", "ное́мврїа", "деке́мврїа" ], _dp9t110 = [ "і҆аннꙋа́рїй", "феврꙋа́рїй", "ма́ртъ", "а҆прі́ллїй", "ма́їй", "і҆ꙋ́нїй", "і҆ꙋ́лїй", "а҆́ѵгꙋстъ", "септе́мврїй", "ѻ҆ктѡ́врїй", "ное́мврїй", "деке́мврїй" ], _dp9t111 = {
    displayName: "мѣ́сѧцъ",
    relative: _dp9t38,
    relativeTime: _dp9t30
}, _dp9t112 = {
    displayName: "че́тверть",
    relative: _dp9t48,
    relativeTime: _dp9t29
}, _dp9t113 = {
    abbreviated: _dp9t37,
    narrow: _dp9t2,
    wide: _dp9t76
}, _dp9t114 = {
    decimal: ",",
    group: " ",
    percentSign: "%",
    plusSign: "+",
    minusSign: "-",
    infinity: "∞",
    list: ";",
    exponential: "E",
    superscriptingExponent: "×",
    perMille: "‰",
    nan: "NaN",
    timeSeparator: ":"
}, _dp9t115 = {
    decimal: ",",
    group: " ",
    percentSign: "%",
    plusSign: "+",
    minusSign: "-",
    infinity: "∞",
    list: "؛",
    exponential: "اس",
    superscriptingExponent: "×",
    perMille: "؉",
    nan: "NaN",
    timeSeparator: ":"
}, _dp9t116 = {
    format: _dp9t86,
    standAlone: _dp9t86
}, _dp9t117 = {
    symbols: _dp9t115
}, _dp9t118 = {
    format: _dp9t80,
    numeric: _dp9t6,
    standAlone: _dp9t80
}, _dp9t119 = {
    symbols: _dp9t115,
    digits: "renderSpelloutCardinal"
}, _dp9t120 = {
    "1000": {
        other: "0K"
    },
    "10000": {
        other: "00K"
    },
    "100000": {
        other: "000K"
    },
    "1000000": {
        other: "0M"
    },
    "10000000": {
        other: "00M"
    },
    "100000000": {
        other: "000M"
    },
    "1000000000": {
        other: "0G"
    },
    "10000000000": {
        other: "00G"
    },
    "100000000000": {
        other: "000G"
    },
    "1000000000000": {
        other: "0T"
    },
    "10000000000000": {
        other: "00T"
    },
    "100000000000000": {
        other: "000T"
    }
}, _dp9t121 = {
    symbols: _dp9t115,
    digits: "renderSpelloutCardinalFinancial"
}, _dp9t122 = {
    abbreviated: _dp9t82,
    narrow: _dp9t45,
    wide: _dp9t82
}, _dp9t123 = {
    "1000": {
        other: "¤ 0K"
    },
    "10000": {
        other: "¤ 00K"
    },
    "100000": {
        other: "¤ 000K"
    },
    "1000000": {
        other: "¤ 0M"
    },
    "10000000": {
        other: "¤ 00M"
    },
    "100000000": {
        other: "¤ 000M"
    },
    "1000000000": {
        other: "¤ 0G"
    },
    "10000000000": {
        other: "¤ 00G"
    },
    "100000000000": {
        other: "¤ 000G"
    },
    "1000000000000": {
        other: "¤ 0T"
    },
    "10000000000000": {
        other: "¤ 00T"
    },
    "100000000000000": {
        other: "¤ 000T"
    }
}, _dp9t124 = {
    abbreviated: _dp9t41,
    narrow: _dp9t11,
    wide: _dp9t89,
    "short": _dp9t41
}, _dp9t125 = {
    abbreviated: _dp9t85,
    narrow: _dp9t85,
    wide: _dp9t85
}, _dp9t126 = {
    format: _dp9t125
}, _dp9t127 = {
    abbreviated: _dp9t99,
    narrow: _dp9t51,
    wide: _dp9t99
}, _dp9t128 = {
    abbreviated: _dp9t100,
    narrow: _dp9t45,
    wide: _dp9t100
}, _dp9t129 = {
    abbreviated: _dp9t101,
    narrow: _dp9t51,
    wide: _dp9t101
}, _dp9t130 = {
    abbreviated: _dp9t94,
    narrow: _dp9t47,
    wide: _dp9t109
}, _dp9t131 = {
    abbreviated: _dp9t94,
    narrow: _dp9t47,
    wide: _dp9t110
}, _dp9t132 = {
    abbreviated: _dp9t98,
    narrow: _dp9t45,
    wide: _dp9t105
}, _dp9t133 = {
    abbreviated: _dp9t102,
    narrow: _dp9t51,
    wide: _dp9t102
}, _dp9t134 = {
    abbreviated: _dp9t103,
    narrow: _dp9t45,
    wide: _dp9t103
}, _dp9t135 = {
    format: _dp9t113,
    standAlone: _dp9t107
}, _dp9t136 = {
    fullDate: "r(U) MMMM d, EEEE",
    longDate: "r(U) MMMM d",
    mediumDate: "r MMM d",
    shortDate: "r-MM-dd",
    fullTime: "HH:mm:ss zzzz",
    longTime: "HH:mm:ss z",
    mediumTime: "HH:mm:ss",
    shortTime: "HH:mm",
    shortDateTime: "r-MM-dd HH:mm",
    mediumDateTime: "r MMM d HH:mm:ss",
    longDateTime: "r(U) MMMM d HH:mm:ss z",
    fullDateTime: "r(U) MMMM d, EEEE HH:mm:ss zzzz"
}, _dp9t137 = {
    format: _dp9t122,
    standAlone: _dp9t122
}, _dp9t138 = {
    "long": _dp9t120,
    "short": _dp9t120,
    "default": "#,##0.###"
}, _dp9t139 = {
    d: "d",
    E: "ccc",
    Ed: "d, E",
    Gy: "r U",
    GyMMM: "r(U) MMM",
    GyMMMd: "r MMM d",
    GyMMMEd: "r(U) MMM d, E",
    h: "h a",
    H: "HH",
    hm: "h:mm a",
    Hm: "HH:mm",
    hms: "h:mm:ss a",
    Hms: "HH:mm:ss",
    M: "L",
    Md: "MM-dd",
    MEd: "MM-dd, E",
    MMM: "LLL",
    MMMd: "MMM d",
    MMMEd: "MMM d, E",
    MMMMd: "MMMM d",
    ms: "mm:ss",
    UM: "U MM",
    UMd: "U MM-d",
    UMMM: "U MMM",
    UMMMd: "U MMM d",
    y: "r(U)",
    yMd: "r-MM-dd",
    yyyy: "r(U)",
    yyyyM: "r-MM",
    yyyyMd: "r-MM-dd",
    yyyyMEd: "r-MM-dd, E",
    yyyyMMM: "r(U) MMM",
    yyyyMMMd: "r MMM d",
    yyyyMMMEd: "r(U) MMM d, E",
    yyyyMMMM: "r(U) MMMM",
    yyyyQQQ: "r(U) QQQ",
    yyyyQQQQ: "r(U) QQQQ"
}, _dp9t140 = {
    format: _dp9t124,
    standAlone: _dp9t124
}, _dp9t141 = {
    currencyMatch: /[^\u0024+<->\u005E`\u007C~¢-¦¨©¬®-±´¸×÷˂-˅˒-˟˥-˫˭˯-˿͵΄΅϶҂֏؆-؈؋؎؏۞۩۽۾߶৲৳৺৻૱୰௳-௺౿൹฿༁-༃༓༕-༗༚-༟༴༶༸྾-࿅࿇-࿌࿎࿏࿕-࿘႞႟᎐-᎙៛᥀᧞-᧿᭡-᭪᭴-᭼᾽᾿-῁῍-῏῝-῟῭-`´῾⁄⁒⁺-⁼₊-₌₠-₹℀℁℃-℆℈℉℔№-℘℞-℣℥℧℩℮℺℻⅀-⅄⅊-⅍⅏←-⌨⌫-⏳␀-␦⑀-⑊⒜-ⓩ─-⛿✁-❧➔-⟄⟇-⟥⟰-⦂⦙-⧗⧜-⧻⧾-⭌⭐-⭙⳥-⳪⺀-⺙⺛-⻳⼀-⿕⿰-⿻〄〒〓〠〶〷〾〿゛゜㆐㆑㆖-㆟㇀-㇣㈀-㈞㈪-㉇㉐㉠-㉿㊊-㊰㋀-㋾㌀-㏿䷀-䷿꒐-꓆꜀-꜖꜠꜡꞉꞊꠨-꠫꠶-꠹꩷-꩹﬩﮲-﯁﷼﷽﹢﹤-﹦﹩＄＋＜-＞＾｀｜～￠-￦￨-￮￼�]/,
    surroundingMatch: /[0-9²³¹¼-¾٠-٩۰-۹߀-߉०-९০-৯৴-৹੦-੯૦-૯୦-୯୲-୷௦-௲౦-౯౸-౾೦-೯൦-൵๐-๙໐-໙༠-༳၀-၉႐-႙፩-፼ᛮ-ᛰ០-៩៰-៹᠐-᠙᥆-᥏᧐-᧚᪀-᪉᪐-᪙᭐-᭙᮰-᮹᱀-᱉᱐-᱙⁰⁴-⁹₀-₉⅐-ↂↅ-↉①-⒛⓪-⓿❶-➓⳽〇〡-〩〸-〺㆒-㆕㈠-㈩㉈-㉏㉑-㉟㊀-㊉㊱-㊿꘠-꘩ꛦ-ꛯ꠰-꠵꣐-꣙꤀-꤉꧐-꧙꩐-꩙꯰-꯹０-９]/,
    insertBetween: " "
}, _dp9t142 = [ undefined, "jia-zi", "yi-chou", "bing-yin", "ding-mao", "wu-chen", "ji-si", "geng-wu", "xin-wei", "ren-shen", "gui-you", "jia-xu", "yi-hai", "bing-zi", "ding-chou", "wu-yin", "ji-mao", "geng-chen", "xin-si", "ren-wu", "gui-wei", "jia-shen", "yi-you", "bing-xu", "ding-hai", "wu-zi", "ji-chou", "geng-yin", "xin-mao", "ren-chen", "gui-si", "jia-wu", "yi-wei", "bing-shen", "ding-you", "wu-xu", "ji-hai", "geng-zi", "xin-chou", "ren-yin", "gui-mao", "jia-chen", "yi-si", "bing-wu", "ding-wei", "wu-shen", "ji-you", "geng-xu", "xin-hai", "ren-zi", "gui-chou", "jia-yin", "yi-mao", "bing-chen", "ding-si", "wu-wu", "ji-wei", "geng-shen", "xin-you", "ren-xu" ], _dp9t143 = {
    format: _dp9t130,
    standAlone: _dp9t131
}, _dp9t144 = {
    format: _dp9t132,
    standAlone: _dp9t132
}, _dp9t145 = {
    basic: _dp9t136,
    cldr: _dp9t139
}, _dp9t146 = {
    d: {
        d: "d–d"
    },
    h: _dp9t7,
    H: {
        H: "HH–HH"
    },
    hm: _dp9t46,
    Hm: _dp9t16,
    hmv: _dp9t54,
    Hmv: _dp9t19,
    hv: _dp9t10,
    Hv: {
        H: "HH–HH v"
    },
    M: {
        M: "MM–MM"
    },
    Md: _dp9t20,
    MEd: _dp9t35,
    MMM: {
        M: "LLL–LLL"
    },
    MMMd: _dp9t13,
    MMMEd: _dp9t36,
    y: {
        y: "U–U"
    },
    yM: _dp9t17,
    yMd: _dp9t72,
    yMEd: _dp9t91,
    yMMM: _dp9t18,
    yMMMd: _dp9t50,
    yMMMEd: _dp9t87,
    yMMMM: _dp9t22
}, _dp9t147 = {
    d: {
        d: "d–d"
    },
    h: _dp9t7,
    H: {
        H: "HH–HH"
    },
    hm: _dp9t46,
    Hm: _dp9t16,
    hmv: _dp9t54,
    Hmv: _dp9t19,
    hv: _dp9t10,
    Hv: {
        H: "HH–HH v"
    },
    M: {
        M: "MM–MM"
    },
    Md: _dp9t20,
    MEd: _dp9t35,
    MMM: {
        M: "LLL–LLL"
    },
    MMMd: _dp9t13,
    MMMEd: _dp9t36,
    y: {
        y: "G y–y"
    },
    yM: _dp9t25,
    yMd: _dp9t90,
    yMEd: _dp9t97,
    yMMM: _dp9t21,
    yMMMd: _dp9t56,
    yMMMEd: _dp9t92,
    yMMMM: _dp9t24
}, _dp9t148 = {
    beforeCurrency: _dp9t141,
    afterCurrency: _dp9t141
}, _dp9t149 = [ _dp9t74, _dp9t84, _dp9t60, _dp9t61, _dp9t62, _dp9t95, _dp9t69, _dp9t79, _dp9t63, _dp9t70, _dp9t75, _dp9t71, _dp9t64, _dp9t83, _dp9t65, _dp9t66, _dp9t73, _dp9t67 ], _dp9t150 = {
    "short": _dp9t123,
    "default": "#,##0.00 ¤",
    other: "{0} {1}",
    currencySpacing: _dp9t148
}, _dp9t151 = {
    abbreviated: _dp9t142,
    narrow: _dp9t142,
    wide: _dp9t142
}, _dp9t152 = {
    format: _dp9t151
}, _dp9t153 = {
    scientific: {
        "default": "#E0"
    },
    decimal: _dp9t138,
    currency: _dp9t150,
    percent: _dp9t1
}, _dp9t154 = {
    era: _dp9t3,
    year: _dp9t106,
    "year-short": {
        displayName: "л."
    },
    "year-narrow": {
        displayName: "л."
    },
    quarter: _dp9t112,
    "quarter-short": {
        displayName: "чеⷡ҇"
    },
    "quarter-narrow": {
        displayName: "чеⷡ҇"
    },
    month: _dp9t111,
    "month-short": _dp9t4,
    "month-narrow": _dp9t4,
    week: _dp9t108,
    "week-short": {
        displayName: "сеⷣ"
    },
    "week-narrow": {
        displayName: "сеⷣ"
    },
    day: _dp9t104,
    "day-short": {
        displayName: "деⷩ҇"
    },
    "day-narrow": {
        displayName: "деⷩ҇"
    },
    weekday: _dp9t12,
    dayperiod: _dp9t5,
    hour: _dp9t88,
    "hour-short": {
        displayName: "чаⷭ҇"
    },
    "hour-narrow": {
        displayName: "чаⷭ҇"
    },
    minute: _dp9t93,
    "minute-short": {
        displayName: "миⷩ҇"
    },
    "minute-narrow": {
        displayName: "миⷩ҇"
    },
    second: _dp9t96,
    "second-short": {
        displayName: "сеⷦ҇"
    },
    "second-narrow": {
        displayName: "сеⷦ҇"
    },
    zone: _dp9t14,
    sun: _dp9t57,
    mon: _dp9t58,
    tue: _dp9t68,
    wed: _dp9t81,
    thu: _dp9t77,
    fri: _dp9t59,
    sat: _dp9t78
}, _dp9t155 = {
    dateFormats: {
        basic: {},
        cldr: {}
    },
    fields: _dp9t154
}, _dp9t156 = [ "Taika (645–650)", "Hakuchi (650–671)", "Hakuhō (672–686)", "Shuchō (686–701)", "Taihō (701–704)", "Keiun (704–708)", "Wadō (708–715)", "Reiki (715–717)", "Yōrō (717–724)", "Jinki (724–729)", "Tenpyō (729–749)", "Tenpyō-kampō (749-749)", "Tenpyō-shōhō (749-757)", "Tenpyō-hōji (757-765)", "Tenpyō-jingo (765-767)", "Jingo-keiun (767-770)", "Hōki (770–780)", "Ten-ō (781-782)", "Enryaku (782–806)", "Daidō (806–810)", "Kōnin (810–824)", "Tenchō (824–834)", "Jōwa (834–848)", "Kajō (848–851)", "Ninju (851–854)", "Saikō (854–857)", "Ten-an (857-859)", "Jōgan (859–877)", "Gangyō (877–885)", "Ninna (885–889)", "Kanpyō (889–898)", "Shōtai (898–901)", "Engi (901–923)", "Enchō (923–931)", "Jōhei (931–938)", "Tengyō (938–947)", "Tenryaku (947–957)", "Tentoku (957–961)", "Ōwa (961–964)", "Kōhō (964–968)", "Anna (968–970)", "Tenroku (970–973)", "Ten’en (973–976)", "Jōgen (976–978)", "Tengen (978–983)", "Eikan (983–985)", "Kanna (985–987)", "Eien (987–989)", "Eiso (989–990)", "Shōryaku (990–995)", "Chōtoku (995–999)", "Chōhō (999–1004)", "Kankō (1004–1012)", "Chōwa (1012–1017)", "Kannin (1017–1021)", "Jian (1021–1024)", "Manju (1024–1028)", "Chōgen (1028–1037)", "Chōryaku (1037–1040)", "Chōkyū (1040–1044)", "Kantoku (1044–1046)", "Eishō (1046–1053)", "Tengi (1053–1058)", "Kōhei (1058–1065)", "Jiryaku (1065–1069)", "Enkyū (1069–1074)", "Shōho (1074–1077)", "Shōryaku (1077–1081)", "Eihō (1081–1084)", "Ōtoku (1084–1087)", "Kanji (1087–1094)", "Kahō (1094–1096)", "Eichō (1096–1097)", "Jōtoku (1097–1099)", "Kōwa (1099–1104)", "Chōji (1104–1106)", "Kashō (1106–1108)", "Tennin (1108–1110)", "Ten-ei (1110-1113)", "Eikyū (1113–1118)", "Gen’ei (1118–1120)", "Hōan (1120–1124)", "Tenji (1124–1126)", "Daiji (1126–1131)", "Tenshō (1131–1132)", "Chōshō (1132–1135)", "Hōen (1135–1141)", "Eiji (1141–1142)", "Kōji (1142–1144)", "Ten’yō (1144–1145)", "Kyūan (1145–1151)", "Ninpei (1151–1154)", "Kyūju (1154–1156)", "Hōgen (1156–1159)", "Heiji (1159–1160)", "Eiryaku (1160–1161)", "Ōho (1161–1163)", "Chōkan (1163–1165)", "Eiman (1165–1166)", "Nin’an (1166–1169)", "Kaō (1169–1171)", "Shōan (1171–1175)", "Angen (1175–1177)", "Jishō (1177–1181)", "Yōwa (1181–1182)", "Juei (1182–1184)", "Genryaku (1184–1185)", "Bunji (1185–1190)", "Kenkyū (1190–1199)", "Shōji (1199–1201)", "Kennin (1201–1204)", "Genkyū (1204–1206)", "Ken’ei (1206–1207)", "Jōgen (1207–1211)", "Kenryaku (1211–1213)", "Kenpō (1213–1219)", "Jōkyū (1219–1222)", "Jōō (1222–1224)", "Gennin (1224–1225)", "Karoku (1225–1227)", "Antei (1227–1229)", "Kanki (1229–1232)", "Jōei (1232–1233)", "Tenpuku (1233–1234)", "Bunryaku (1234–1235)", "Katei (1235–1238)", "Ryakunin (1238–1239)", "En’ō (1239–1240)", "Ninji (1240–1243)", "Kangen (1243–1247)", "Hōji (1247–1249)", "Kenchō (1249–1256)", "Kōgen (1256–1257)", "Shōka (1257–1259)", "Shōgen (1259–1260)", "Bun’ō (1260–1261)", "Kōchō (1261–1264)", "Bun’ei (1264–1275)", "Kenji (1275–1278)", "Kōan (1278–1288)", "Shōō (1288–1293)", "Einin (1293–1299)", "Shōan (1299–1302)", "Kengen (1302–1303)", "Kagen (1303–1306)", "Tokuji (1306–1308)", "Enkyō (1308–1311)", "Ōchō (1311–1312)", "Shōwa (1312–1317)", "Bunpō (1317–1319)", "Genō (1319–1321)", "Genkō (1321–1324)", "Shōchū (1324–1326)", "Karyaku (1326–1329)", "Gentoku (1329–1331)", "Genkō (1331–1334)", "Kenmu (1334–1336)", "Engen (1336–1340)", "Kōkoku (1340–1346)", "Shōhei (1346–1370)", "Kentoku (1370–1372)", "Bunchū (1372–1375)", "Tenju (1375–1379)", "Kōryaku (1379–1381)", "Kōwa (1381–1384)", "Genchū (1384–1392)", "Meitoku (1384–1387)", "Kakei (1387–1389)", "Kōō (1389–1390)", "Meitoku (1390–1394)", "Ōei (1394–1428)", "Shōchō (1428–1429)", "Eikyō (1429–1441)", "Kakitsu (1441–1444)", "Bun’an (1444–1449)", "Hōtoku (1449–1452)", "Kyōtoku (1452–1455)", "Kōshō (1455–1457)", "Chōroku (1457–1460)", "Kanshō (1460–1466)", "Bunshō (1466–1467)", "Ōnin (1467–1469)", "Bunmei (1469–1487)", "Chōkyō (1487–1489)", "Entoku (1489–1492)", "Meiō (1492–1501)", "Bunki (1501–1504)", "Eishō (1504–1521)", "Taiei (1521–1528)", "Kyōroku (1528–1532)", "Tenbun (1532–1555)", "Kōji (1555–1558)", "Eiroku (1558–1570)", "Genki (1570–1573)", "Tenshō (1573–1592)", "Bunroku (1592–1596)", "Keichō (1596–1615)", "Genna (1615–1624)", "Kan’ei (1624–1644)", "Shōho (1644–1648)", "Keian (1648–1652)", "Jōō (1652–1655)", "Meireki (1655–1658)", "Manji (1658–1661)", "Kanbun (1661–1673)", "Enpō (1673–1681)", "Tenna (1681–1684)", "Jōkyō (1684–1688)", "Genroku (1688–1704)", "Hōei (1704–1711)", "Shōtoku (1711–1716)", "Kyōhō (1716–1736)", "Genbun (1736–1741)", "Kanpō (1741–1744)", "Enkyō (1744–1748)", "Kan’en (1748–1751)", "Hōreki (1751–1764)", "Meiwa (1764–1772)", "An’ei (1772–1781)", "Tenmei (1781–1789)", "Kansei (1789–1801)", "Kyōwa (1801–1804)", "Bunka (1804–1818)", "Bunsei (1818–1830)", "Tenpō (1830–1844)", "Kōka (1844–1848)", "Kaei (1848–1854)", "Ansei (1854–1860)", "Man’en (1860–1861)", "Bunkyū (1861–1864)", "Genji (1864–1865)", "Keiō (1865–1868)", "Meiji", "Taishō", "Shōwa", "Heisei" ], _dp9t157 = {
    dateFormats: P.calendars.buddhist.dateFormats,
    datePartsOrder: "ymd",
    dateIntervalFormats: _dp9t147,
    dateIntervalFallbackFormat: "{0} – {1}",
    dayNames: _dp9t140,
    dayPeriods: _dp9t116,
    monthNames: _dp9t144,
    eraNames: _dp9t15,
    quarterNames: _dp9t135,
    fields: _dp9t154
}, _dp9t158 = {
    dayParts: _dp9t126,
    days: _dp9t152,
    months: _dp9t152,
    years: _dp9t152,
    zodiacs: _dp9t126
}, _dp9t159 = {
    dateFormats: _dp9t145,
    datePartsOrder: "md",
    dateIntervalFormats: _dp9t146,
    dateIntervalFallbackFormat: "{0} – {1}",
    dayNames: _dp9t140,
    dayPeriods: _dp9t116,
    cyclicNames: _dp9t158,
    monthNames: _dp9t137,
    monthPatterns: _dp9t118,
    quarterNames: _dp9t135,
    fields: _dp9t154
};

inter.id = "cu";

inter.delimiters = {
    quotationStart: "«",
    quotationEnd: "»",
    alternateQuotationStart: "„",
    alternateQuotationEnd: "“"
};

inter.listPatterns = {
    "default": {
        "2": "{0} и҆ {1}",
        start: "{0}, {1}",
        middle: "{0}, {1}",
        end: "{0} и҆ {1}"
    },
    unit: P.listPatterns.default,
    unitNarrow: P.listPatterns.default,
    unitShort: P.listPatterns.default
};

inter.timeZoneFormats = {
    hour: [ "+HH:mm", "-HH:mm" ],
    gmt: "GMT{0}",
    gmtZero: "GMT",
    region: "{0} (вре́мѧ)",
    fallback: "{1} ({0})",
    regions: {
        daylight: "{0} (лѣ́тнее вре́мѧ)",
        standard: "{0} (зи́мнее вре́мѧ)"
    }
};

inter.characters = {
    exemplar: {
        "default": [ "\\u0487", "\\u0483", "\\u2DE0", "\\u2DE1", "\\u2DE2", "\\u2DE3", "\\u2DE4", "\\u2DE5", "\\u2DE6", "\\u2DE7", "\\u2DE8", "\\u2DE9", "\\u2DEA", "\\u2DEC", "\\u2DED", "\\u2DEF", "\\u2DF1", "ⸯ", "\\uA67D", "ꙿ", "\\u2DF4", "҂", "а", "б", "в", "г", "д", "е", "є", "ж", "ѕ", "з", "ꙁ", "и", "і", "ї", "й", "к", "л", "м", "н", "ѻ", "о", "ѡ", "ꙍ", "ѽ", "ѿ", "п", "р", "с", "т", "ꙋ", "у", "ф", "х", "ц", "ч", "ш", "щ", "ъ", "ы", "ь", "ѣ", "ю", "ꙗ", "ѧ", "ѫ", "ѯ", "ѱ", "ѳ", "ѵ", "ѷ" ],
        auxiliary: [ "\\u200C\\u200D\\uFE2F", "\\u2DF6", "\\u2DF7", "\\uA674", "\\uA675", "\\uA676", "\\uA67B", "\\u2DEB", "\\u2DF5", "\\u2DEE", "\\u2DF9", "\\uA677", "\\u2DF0", "\\u2DF2", "\\u2DF3", "\\uA678", "\\uA679", "\\uA67A", "\\u2DFA", "\\u2DFB", "\\u2DFC", "\\u2DFD", "\\u2DFE", "\\u2DFF", "\\u0488\\u0489\\uA670\\uA671\\uA672", "\\u0484", "\\uFE2E", "\\uA66F", "ꙣ", "ꙃ", "ꙅ", "ꙇ", "ꙉ", "\\u2DF8", "ꙥ", "ꙧ", "ҥ", "ꙩꙫꙭꙮꚙꚛ", "ҁ", "\\uA69E", "ꙡ", "џ", "ꙏ", "ꙑ", "ꙓ", "ꙕ", "ѥ", "\\uA69F", "ꙙ", "ꙛ", "ѩ", "ꙝ", "ѭ", "ꙟ" ],
        index: [ "А", "Б", "В", "Г", "Д", "Є", "Ж", "Ѕ", "З", "И", "І", "К", "Л", "М", "Н", "Ѻ", "О", "Ѡ", "Ѿ", "П", "Р", "С", "Т", "Ꙋ", "Ф", "Х", "Ц", "Ч", "Ш", "Щ", "Ъ", "Ы", "Ь", "Ѣ", "Ю", "Ꙗ", "Ѧ", "Ѫ", "Ѯ", "Ѱ", "Ѳ", "Ѵ" ],
        punctuation: [ "꙾", ",", "\\-", ".", "\\:", ";", "_", "–", "—", "꙳", "‐", "!", "?", "(", ")", "/" ]
    },
    ellipsis: {
        "final": "{0}…",
        initial: "…{0}",
        medial: "{0}…{1}",
        "word-final": "{0} …",
        "word-initial": "… {0}",
        "word-medial": "{0} … {1}"
    },
    moreInformation: "?"
};

inter.numbers = {
    ahom: {
        symbols: _dp9t115,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    arab: {
        symbols: P.numbers.ahom.symbols,
        formats: _dp9t153,
        digits: [ "٠", "١", "٢", "٣", "٤", "٥", "٦", "٧", "٨", "٩" ]
    },
    arabext: {
        symbols: {
            decimal: "٫",
            group: "٬",
            list: "؛",
            percentSign: "٪",
            plusSign: "‎+‎",
            minusSign: "‎-‎",
            exponential: "×۱۰^",
            superscriptingExponent: "×",
            perMille: "؉",
            infinity: "∞",
            nan: "NaN",
            timeSeparator: "٫"
        },
        formats: _dp9t153,
        digits: [ "۰", "۱", "۲", "۳", "۴", "۵", "۶", "۷", "۸", "۹" ]
    },
    armn: {
        symbols: _dp9t115,
        digits: "renderArmenianUpper"
    },
    armnlow: {
        symbols: _dp9t115,
        digits: "renderArmenianLower"
    },
    bali: {
        symbols: _dp9t114,
        formats: _dp9t153,
        digits: [ "᭐", "᭑", "᭒", "᭓", "᭔", "᭕", "᭖", "᭗", "᭘", "᭙" ]
    },
    beng: {
        symbols: _dp9t114,
        formats: _dp9t153,
        digits: [ "০", "১", "২", "৩", "৪", "৫", "৬", "৭", "৮", "৯" ]
    },
    brah: {
        symbols: _dp9t114,
        formats: _dp9t153,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    cakm: {
        symbols: _dp9t114,
        formats: _dp9t153,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    cham: {
        symbols: _dp9t114,
        formats: _dp9t153,
        digits: [ "꩐", "꩑", "꩒", "꩓", "꩔", "꩕", "꩖", "꩗", "꩘", "꩙" ]
    },
    cyrl: {
        symbols: _dp9t115,
        digits: "renderCyrillicLower"
    },
    deva: {
        symbols: _dp9t114,
        formats: _dp9t153,
        digits: [ "०", "१", "२", "३", "४", "५", "६", "७", "८", "९" ]
    },
    ethi: {
        symbols: _dp9t115,
        digits: "renderEthiopic"
    },
    finance: _dp9t117,
    fullwide: {
        symbols: _dp9t114,
        formats: _dp9t153,
        digits: [ "０", "１", "２", "３", "４", "５", "６", "７", "８", "９" ]
    },
    geor: {
        symbols: _dp9t115,
        digits: "renderGeorgian"
    },
    grek: {
        symbols: _dp9t115,
        digits: "renderGreekUpper"
    },
    greklow: {
        symbols: _dp9t115,
        digits: "renderGreekLower"
    },
    gujr: {
        symbols: _dp9t114,
        formats: _dp9t153,
        digits: [ "૦", "૧", "૨", "૩", "૪", "૫", "૬", "૭", "૮", "૯" ]
    },
    guru: {
        symbols: _dp9t114,
        formats: _dp9t153,
        digits: [ "੦", "੧", "੨", "੩", "੪", "੫", "੬", "੭", "੮", "੯" ]
    },
    hanidays: {
        symbols: _dp9t115,
        digits: "renderSpelloutNumberingDays"
    },
    hanidec: {
        symbols: _dp9t114,
        formats: _dp9t153,
        digits: [ "〇", "一", "二", "三", "四", "五", "六", "七", "八", "九" ]
    },
    hans: _dp9t119,
    hansfin: _dp9t121,
    hant: _dp9t119,
    hantfin: _dp9t121,
    hebr: {
        symbols: _dp9t115,
        digits: "renderHebrew"
    },
    hmng: {
        symbols: _dp9t115,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    java: {
        symbols: _dp9t114,
        formats: _dp9t153,
        digits: [ "꧐", "꧑", "꧒", "꧓", "꧔", "꧕", "꧖", "꧗", "꧘", "꧙" ]
    },
    jpan: _dp9t119,
    jpanfin: _dp9t121,
    kali: {
        symbols: _dp9t114,
        formats: _dp9t153,
        digits: [ "꤀", "꤁", "꤂", "꤃", "꤄", "꤅", "꤆", "꤇", "꤈", "꤉" ]
    },
    khmr: {
        symbols: _dp9t114,
        formats: _dp9t153,
        digits: [ "០", "១", "២", "៣", "៤", "៥", "៦", "៧", "៨", "៩" ]
    },
    knda: {
        symbols: _dp9t114,
        formats: _dp9t153,
        digits: [ "೦", "೧", "೨", "೩", "೪", "೫", "೬", "೭", "೮", "೯" ]
    },
    lana: {
        symbols: _dp9t114,
        formats: _dp9t153,
        digits: [ "᪀", "᪁", "᪂", "᪃", "᪄", "᪅", "᪆", "᪇", "᪈", "᪉" ]
    },
    lanatham: {
        symbols: _dp9t114,
        formats: _dp9t153,
        digits: [ "᪐", "᪑", "᪒", "᪓", "᪔", "᪕", "᪖", "᪗", "᪘", "᪙" ]
    },
    laoo: {
        symbols: _dp9t114,
        formats: _dp9t153,
        digits: [ "໐", "໑", "໒", "໓", "໔", "໕", "໖", "໗", "໘", "໙" ]
    },
    latn: {
        symbols: _dp9t114,
        formats: _dp9t153,
        digits: [ "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" ]
    },
    lepc: {
        symbols: _dp9t114,
        formats: _dp9t153,
        digits: [ "᱀", "᱁", "᱂", "᱃", "᱄", "᱅", "᱆", "᱇", "᱈", "᱉" ]
    },
    limb: {
        symbols: _dp9t114,
        formats: _dp9t153,
        digits: [ "᥆", "᥇", "᥈", "᥉", "᥊", "᥋", "᥌", "᥍", "᥎", "᥏" ]
    },
    mathbold: {
        symbols: _dp9t115,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathdbl: {
        symbols: _dp9t115,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathmono: {
        symbols: _dp9t115,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathsanb: {
        symbols: _dp9t115,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mathsans: {
        symbols: _dp9t115,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mlym: {
        symbols: _dp9t114,
        formats: _dp9t153,
        digits: [ "൦", "൧", "൨", "൩", "൪", "൫", "൬", "൭", "൮", "൯" ]
    },
    modi: {
        symbols: _dp9t115,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mong: {
        symbols: _dp9t114,
        formats: _dp9t153,
        digits: [ "᠐", "᠑", "᠒", "᠓", "᠔", "᠕", "᠖", "᠗", "᠘", "᠙" ]
    },
    mroo: {
        symbols: _dp9t115,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    mtei: {
        symbols: _dp9t114,
        formats: _dp9t153,
        digits: [ "꯰", "꯱", "꯲", "꯳", "꯴", "꯵", "꯶", "꯷", "꯸", "꯹" ]
    },
    mymr: {
        symbols: _dp9t114,
        formats: _dp9t153,
        digits: [ "၀", "၁", "၂", "၃", "၄", "၅", "၆", "၇", "၈", "၉" ]
    },
    mymrshan: {
        symbols: _dp9t114,
        formats: _dp9t153,
        digits: [ "႐", "႑", "႒", "႓", "႔", "႕", "႖", "႗", "႘", "႙" ]
    },
    mymrtlng: {
        symbols: _dp9t115,
        digits: [ "꧰", "꧱", "꧲", "꧳", "꧴", "꧵", "꧶", "꧷", "꧸", "꧹" ]
    },
    "native": _dp9t117,
    nkoo: {
        symbols: _dp9t114,
        formats: _dp9t153,
        digits: [ "߀", "߁", "߂", "߃", "߄", "߅", "߆", "߇", "߈", "߉" ]
    },
    olck: {
        symbols: _dp9t114,
        formats: _dp9t153,
        digits: [ "᱐", "᱑", "᱒", "᱓", "᱔", "᱕", "᱖", "᱗", "᱘", "᱙" ]
    },
    orya: {
        symbols: _dp9t114,
        formats: _dp9t153,
        digits: [ "୦", "୧", "୨", "୩", "୪", "୫", "୬", "୭", "୮", "୯" ]
    },
    osma: {
        symbols: _dp9t114,
        formats: _dp9t153,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    roman: {
        symbols: _dp9t115,
        digits: "renderRomanUpper"
    },
    romanlow: {
        symbols: _dp9t115,
        digits: "renderRomanLower"
    },
    saur: {
        symbols: _dp9t114,
        formats: _dp9t153,
        digits: [ "꣐", "꣑", "꣒", "꣓", "꣔", "꣕", "꣖", "꣗", "꣘", "꣙" ]
    },
    shrd: {
        symbols: _dp9t114,
        formats: _dp9t153,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    sind: {
        symbols: _dp9t115,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    sinh: {
        symbols: _dp9t115,
        digits: [ "෦", "෧", "෨", "෩", "෪", "෫", "෬", "෭", "෮", "෯" ]
    },
    sora: {
        symbols: _dp9t114,
        formats: _dp9t153,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    sund: {
        symbols: _dp9t114,
        formats: _dp9t153,
        digits: [ "᮰", "᮱", "᮲", "᮳", "᮴", "᮵", "᮶", "᮷", "᮸", "᮹" ]
    },
    takr: {
        symbols: _dp9t114,
        formats: _dp9t153,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    talu: {
        symbols: _dp9t114,
        formats: _dp9t153,
        digits: [ "᧐", "᧑", "᧒", "᧓", "᧔", "᧕", "᧖", "᧗", "᧘", "᧙" ]
    },
    taml: {
        symbols: _dp9t115,
        digits: "renderTamil"
    },
    tamldec: {
        symbols: _dp9t114,
        formats: _dp9t153,
        digits: [ "௦", "௧", "௨", "௩", "௪", "௫", "௬", "௭", "௮", "௯" ]
    },
    telu: {
        symbols: _dp9t114,
        formats: _dp9t153,
        digits: [ "౦", "౧", "౨", "౩", "౪", "౫", "౬", "౭", "౮", "౯" ]
    },
    thai: {
        symbols: _dp9t114,
        formats: _dp9t153,
        digits: [ "๐", "๑", "๒", "๓", "๔", "๕", "๖", "๗", "๘", "๙" ]
    },
    tirh: {
        symbols: _dp9t115,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    },
    tibt: {
        symbols: _dp9t114,
        formats: _dp9t153,
        digits: [ "༠", "༡", "༢", "༣", "༤", "༥", "༦", "༧", "༨", "༩" ]
    },
    traditio: _dp9t117,
    vaii: {
        symbols: _dp9t114,
        formats: _dp9t153,
        digits: [ "꘠", "꘡", "꘢", "꘣", "꘤", "꘥", "꘦", "꘧", "꘨", "꘩" ]
    },
    wara: {
        symbols: _dp9t115,
        digits: [ "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�", "�" ]
    }
};

inter.calendars = {
    buddhist: {
        dateFormats: P.calendars.buddhist.dateFormats,
        datePartsOrder: "ymd",
        dateIntervalFormats: _dp9t147,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _dp9t140,
        dayPeriods: _dp9t116,
        monthNames: _dp9t143,
        eraNames: {
            wide: [ "BE" ],
            abbreviated: [ "BE" ]
        },
        quarterNames: _dp9t135,
        fields: _dp9t154
    },
    chinese: _dp9t159,
    coptic: {
        dateFormats: P.calendars.buddhist.dateFormats,
        datePartsOrder: "ymd",
        dateIntervalFormats: _dp9t147,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _dp9t140,
        dayPeriods: _dp9t116,
        monthNames: {
            format: _dp9t129,
            standAlone: _dp9t129
        },
        eraNames: _dp9t39,
        quarterNames: _dp9t135,
        fields: _dp9t154
    },
    dangi: _dp9t159,
    ethioaa: _dp9t155,
    ethiopic: {
        dateFormats: P.calendars.buddhist.dateFormats,
        datePartsOrder: "ymd",
        dateIntervalFormats: _dp9t147,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _dp9t140,
        dayPeriods: _dp9t116,
        monthNames: {
            format: _dp9t133,
            standAlone: _dp9t133
        },
        eraNames: _dp9t39,
        quarterNames: _dp9t135,
        fields: _dp9t154
    },
    gregorian: {
        dateFormats: {
            basic: {
                fullDate: "EEEE, d MMMM 'л'. y.",
                longDate: "y MMMM d",
                mediumDate: "y MMM d",
                shortDate: "y.MM.dd",
                fullTime: "HH:mm:ss zzzz",
                longTime: "HH:mm:ss z",
                mediumTime: "HH:mm:ss",
                shortTime: "HH:mm",
                shortDateTime: "y.MM.dd HH:mm",
                mediumDateTime: "y MMM d HH:mm:ss",
                longDateTime: "y MMMM d HH:mm:ss z",
                fullDateTime: "EEEE, d MMMM 'л'. y. HH:mm:ss zzzz"
            },
            cldr: {
                d: "d",
                E: "ccc",
                Ed: "d, E",
                Ehm: "E h:mm a",
                EHm: "E HH:mm",
                Ehms: "E h:mm:ss a",
                EHms: "E HH:mm:ss",
                Gy: "G y",
                GyMMM: "G y MMM",
                GyMMMd: "G y MMM d",
                GyMMMEd: "G y MMM d, E",
                h: "h a",
                H: "HH",
                hm: "h:mm a",
                Hm: "HH:mm",
                hms: "h:mm:ss a",
                Hms: "HH:mm:ss",
                hmsv: "h:mm:ss a v",
                Hmsv: "HH:mm:ss v",
                hmv: "h:mm a v",
                Hmv: "HH:mm v",
                M: "L",
                Md: "MM-dd",
                MEd: "MM-dd, E",
                MMM: "LLL",
                MMMd: "MMM d",
                MMMEd: "MMM d, E",
                MMMMd: "MMMM d",
                ms: "mm:ss",
                y: "y",
                yM: "y-MM",
                yMd: "y-MM-dd",
                yMEd: "y-MM-dd, E",
                yMMM: "y MMM",
                yMMMd: "y MMM d",
                yMMMEd: "y MMM d, E",
                yMMMM: "y MMMM",
                yQQQ: "y QQQ",
                yQQQQ: "y QQQQ"
            }
        },
        datePartsOrder: "ymd",
        dateIntervalFormats: {
            d: {
                d: "d–d"
            },
            h: _dp9t7,
            H: {
                H: "HH–HH"
            },
            hm: _dp9t46,
            Hm: _dp9t16,
            hmv: _dp9t54,
            Hmv: _dp9t19,
            hv: _dp9t10,
            Hv: {
                H: "HH–HH v"
            },
            M: {
                M: "MM–MM"
            },
            Md: _dp9t20,
            MEd: _dp9t35,
            MMM: {
                M: "LLL–LLL"
            },
            MMMd: _dp9t13,
            MMMEd: _dp9t36,
            y: {
                y: "y–y"
            },
            yM: _dp9t17,
            yMd: _dp9t72,
            yMEd: _dp9t91,
            yMMM: {
                M: "y MMM–MMM",
                y: "y MMM – y MMM"
            },
            yMMMd: {
                d: "y MMM d–d",
                M: "y MMM d – MMM d",
                y: "y MMM d – y MMM d"
            },
            yMMMEd: {
                d: "y MMM d, E – MMM d, E",
                M: "y MMM d, E – MMM d, E",
                y: "y MMM d, E – y MMM d, E"
            },
            yMMMM: {
                M: "y MMMM–MMMM",
                y: "y MMMM – y MMMM"
            }
        },
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _dp9t140,
        dayPeriods: _dp9t116,
        monthNames: _dp9t143,
        eraNames: {
            wide: _dp9t9,
            abbreviated: _dp9t9
        },
        quarterNames: _dp9t135,
        fields: _dp9t154
    },
    hebrew: {
        dateFormats: P.calendars.buddhist.dateFormats,
        datePartsOrder: "ymd",
        dateIntervalFormats: _dp9t147,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _dp9t140,
        dayPeriods: _dp9t116,
        monthNames: {
            format: _dp9t127,
            standAlone: _dp9t127
        },
        eraNames: {
            wide: [ "AM" ],
            abbreviated: [ "AM" ]
        },
        quarterNames: _dp9t135,
        fields: _dp9t154
    },
    indian: {
        dateFormats: P.calendars.buddhist.dateFormats,
        datePartsOrder: "ymd",
        dateIntervalFormats: _dp9t147,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _dp9t140,
        dayPeriods: _dp9t116,
        monthNames: {
            format: _dp9t134,
            standAlone: _dp9t134
        },
        eraNames: {
            wide: [ "Saka" ],
            abbreviated: [ "Saka" ]
        },
        quarterNames: _dp9t135,
        fields: _dp9t154
    },
    islamic: _dp9t157,
    "islamic-umalqura": _dp9t157,
    "islamic-tbla": _dp9t157,
    "islamic-civil": _dp9t157,
    "islamic-rgsa": _dp9t157,
    iso8601: _dp9t155,
    japanese: {
        dateFormats: P.calendars.buddhist.dateFormats,
        datePartsOrder: "ymd",
        dateIntervalFormats: _dp9t147,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _dp9t140,
        dayPeriods: _dp9t116,
        monthNames: _dp9t143,
        eraNames: {
            wide: _dp9t156,
            abbreviated: _dp9t156
        },
        quarterNames: _dp9t135,
        fields: _dp9t154
    },
    persian: {
        dateFormats: P.calendars.buddhist.dateFormats,
        datePartsOrder: "ymd",
        dateIntervalFormats: _dp9t147,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _dp9t140,
        dayPeriods: _dp9t116,
        monthNames: {
            format: _dp9t128,
            standAlone: _dp9t128
        },
        eraNames: {
            wide: [ "AP" ],
            abbreviated: [ "AP" ]
        },
        quarterNames: _dp9t135,
        fields: _dp9t154
    },
    roc: {
        dateFormats: P.calendars.buddhist.dateFormats,
        datePartsOrder: "ymd",
        dateIntervalFormats: _dp9t147,
        dateIntervalFallbackFormat: "{0} – {1}",
        dayNames: _dp9t140,
        dayPeriods: _dp9t116,
        monthNames: _dp9t143,
        eraNames: {
            wide: _dp9t8,
            abbreviated: _dp9t8
        },
        quarterNames: _dp9t135,
        fields: _dp9t154
    },
    islamicc: _dp9t155
};

inter.pluralRule = function(n) {};

inter.renderDigitsOrdinal = function(n) {
    if (n < 0) return "−" + this.renderDigitsOrdinal(-n);
    if (n >= 0) return this.renderNumber(n, "#,##0") + ".";
};

inter.renderSpelloutNumbering = function(n) {
    if (n < 0) return "−" + this.renderSpelloutNumbering(-n);
    if (n >= 0) return this.renderNumber(n, "#,##0.#");
};

inter.renderArmenianUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderArmenianUpper(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e4) return this.renderNumber(n, "#,##0");
    if (n >= 9e3) return "Ք" + (n === 9e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 8e3) return "Փ" + (n === 8e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 7e3) return "Ւ" + (n === 7e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 6e3) return "Ց" + (n === 6e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 5e3) return "Ր" + (n === 5e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 4e3) return "Տ" + (n === 4e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 3e3) return "Վ" + (n === 3e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 2e3) return "Ս" + (n === 2e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 1e3) return "Ռ" + (n === 1e3 ? "" : this.renderArmenianUpper(n % 1e3));
    if (n >= 900) return "Ջ" + (n === 900 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 800) return "Պ" + (n === 800 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 700) return "Չ" + (n === 700 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 600) return "Ո" + (n === 600 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 500) return "Շ" + (n === 500 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 400) return "Ն" + (n === 400 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 300) return "Յ" + (n === 300 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 200) return "Մ" + (n === 200 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 100) return "Ճ" + (n === 100 ? "" : this.renderArmenianUpper(n % 100));
    if (n >= 90) return "Ղ" + (n === 90 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 80) return "Ձ" + (n === 80 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 70) return "Հ" + (n === 70 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 60) return "Կ" + (n === 60 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 50) return "Ծ" + (n === 50 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 40) return "Խ" + (n === 40 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 30) return "Լ" + (n === 30 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 20) return "Ի" + (n === 20 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 10) return "Ժ" + (n === 10 ? "" : this.renderArmenianUpper(n % 10));
    if (n >= 9) return "Թ";
    if (n >= 8) return "Ը";
    if (n >= 7) return "Է";
    if (n >= 6) return "Զ";
    if (n >= 5) return "Ե";
    if (n >= 4) return "Դ";
    if (n >= 3) return "Գ";
    if (n >= 2) return "Բ";
    if (n >= 1) return "Ա";
    if (n >= 0) return "0";
};

inter.renderArmenianLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderArmenianLower(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e4) return this.renderNumber(n, "#,##0");
    if (n >= 9e3) return "ք" + (n === 9e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 8e3) return "փ" + (n === 8e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 7e3) return "ւ" + (n === 7e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 6e3) return "ց" + (n === 6e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 5e3) return "ր" + (n === 5e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 4e3) return "տ" + (n === 4e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 3e3) return "վ" + (n === 3e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 2e3) return "ս" + (n === 2e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 1e3) return "ռ" + (n === 1e3 ? "" : this.renderArmenianLower(n % 1e3));
    if (n >= 900) return "ջ" + (n === 900 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 800) return "պ" + (n === 800 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 700) return "չ" + (n === 700 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 600) return "ո" + (n === 600 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 500) return "շ" + (n === 500 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 400) return "ն" + (n === 400 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 300) return "յ" + (n === 300 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 200) return "մ" + (n === 200 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 100) return "ճ" + (n === 100 ? "" : this.renderArmenianLower(n % 100));
    if (n >= 90) return "ղ" + (n === 90 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 80) return "ձ" + (n === 80 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 70) return "հ" + (n === 70 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 60) return "կ" + (n === 60 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 50) return "ծ" + (n === 50 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 40) return "խ" + (n === 40 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 30) return "լ" + (n === 30 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 20) return "ի" + (n === 20 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 10) return "ժ" + (n === 10 ? "" : this.renderArmenianLower(n % 10));
    if (n >= 9) return "թ";
    if (n >= 8) return "ը";
    if (n >= 7) return "է";
    if (n >= 6) return "զ";
    if (n >= 5) return "ե";
    if (n >= 4) return "դ";
    if (n >= 3) return "գ";
    if (n >= 2) return "բ";
    if (n >= 1) return "ա";
    if (n >= 0) return "0";
};

inter.renderCyrillicLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderCyrillicLower(-n);
    if (isFractional && n > 1) return this.renderCyrillicLower(Math.floor(n)) + "." + this.renderCyrillicLower(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e15) return "҂҂҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e15)) + (n === 1e15 ? "" : " " + this.renderCyrillicLower(n % 1e15));
    if (n >= 1e12) return "҂҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e12)) + (n === 1e12 ? "" : " " + this.renderCyrillicLower(n % 1e12));
    if (n >= 1e9) return "҂҂҂" + this.renderCyrillicLower(Math.floor(n / 1e9)) + (n === 1e9 ? "" : " " + this.renderCyrillicLower(n % 1e9));
    if (n >= 1e6) return "҂҂" + this.renderCyrillicLower(Math.floor(n / 1e6)) + (n === 1e6 ? "" : " " + this.renderCyrillicLower(n % 1e6));
    if (n >= 11e3) return this.renderCyrillicLowerThousands(Math.floor(n / 1e4)) + (n === 11e3 ? "" : " " + this.renderCyrillicLower(n % 1e4));
    if (n >= 1e4) return "҂" + this.renderCyrillicLower(Math.floor(n / 1e4)) + (n === 1e4 ? "" : " " + this.renderCyrillicLower(n % 1e4));
    if (n >= 1e3) return "҂" + this.renderCyrillicLower110(Math.floor(n / 1e3)) + this.renderCyrillicLowerPost(n % 1e3);
    if (n >= 900) return "ц" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 801) return "ѿ" + this.renderCyrillicLower(n % 100);
    if (n >= 800) return "ѿ҃";
    if (n >= 700) return "ѱ" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 600) return "х" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 500) return "ф" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 400) return "у" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 300) return "т" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 200) return "с" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 100) return "р" + this.renderCyrillicLowerFinal(n % 100);
    if (n >= 90) return "ч" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 80) return "п" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 70) return "ѻ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 60) return "ѯ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 50) return "н" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 40) return "м" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 30) return "л" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 20) return "к" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 19) return "ѳ҃і";
    if (n >= 18) return "и҃і";
    if (n >= 17) return "з҃і";
    if (n >= 16) return "ѕ҃і";
    if (n >= 15) return "є҃і";
    if (n >= 14) return "д҃і";
    if (n >= 13) return "г҃і";
    if (n >= 12) return "в҃і";
    if (n >= 11) return "а҃і";
    if (n >= 1) return this.renderCyrillicLower110(n) + "҃";
    if (n >= 0) return "0҃";
};

inter.renderEthiopic = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderEthiopic(-n);
    if (isFractional && n > 1) return this.renderEthiopic(Math.floor(n)) + "፡" + this.renderEthiopic(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 1e18) return this.renderNumber(n, "#,###0");
    if (n >= 2e16) return this.renderEthiopic(Math.floor(n / 1e16)) + "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 1e16) return "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 2e12) return this.renderEthiopic(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1e12) return "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 2e8) return this.renderEthiopic(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1e8) return "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 2e4) return this.renderEthiopic(Math.floor(n / 1e4)) + "፼" + (n === 2e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 1e4) return "፼" + (n === 1e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 200) return this.renderEthiopic(Math.floor(n / 100)) + "፻" + (n === 200 ? "" : this.renderEthiopic(n % 100));
    if (n >= 100) return "፻" + (n === 100 ? "" : this.renderEthiopic(n % 100));
    if (n >= 90) return "፺" + (n === 90 ? "" : this.renderEthiopic(n % 10));
    if (n >= 80) return "፹" + (n === 80 ? "" : this.renderEthiopic(n % 10));
    if (n >= 70) return "፸" + (n === 70 ? "" : this.renderEthiopic(n % 10));
    if (n >= 60) return "፷" + (n === 60 ? "" : this.renderEthiopic(n % 10));
    if (n >= 50) return "፶" + (n === 50 ? "" : this.renderEthiopic(n % 10));
    if (n >= 40) return "፵" + (n === 40 ? "" : this.renderEthiopic(n % 10));
    if (n >= 30) return "፴" + (n === 30 ? "" : this.renderEthiopic(n % 10));
    if (n >= 20) return "፳" + (n === 20 ? "" : this.renderEthiopic(n % 10));
    if (n >= 10) return "፲" + (n === 10 ? "" : this.renderEthiopic(n % 10));
    if (n >= 9) return "፱";
    if (n >= 8) return "፰";
    if (n >= 7) return "፯";
    if (n >= 6) return "፮";
    if (n >= 5) return "፭";
    if (n >= 4) return "፬";
    if (n >= 3) return "፫";
    if (n >= 2) return "፪";
    if (n >= 1) return "፩";
    if (n >= 0) return "ባዶ";
};

inter.renderGeorgian = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGeorgian(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 2e4) return this.renderNumber(n, "#,##0");
    if (n >= 1e4) return "ჯ" + (n === 1e4 ? "" : this.renderGeorgian(n % 1e4));
    if (n >= 9e3) return "ჵ" + (n === 9e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 8e3) return "ჴ" + (n === 8e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 7e3) return "ხ" + (n === 7e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 6e3) return "ჭ" + (n === 6e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 5e3) return "წ" + (n === 5e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 4e3) return "ძ" + (n === 4e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 3e3) return "ც" + (n === 3e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 2e3) return "ჩ" + (n === 2e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 1e3) return "შ" + (n === 1e3 ? "" : this.renderGeorgian(n % 1e3));
    if (n >= 900) return "ყ" + (n === 900 ? "" : this.renderGeorgian(n % 100));
    if (n >= 800) return "ღ" + (n === 800 ? "" : this.renderGeorgian(n % 100));
    if (n >= 700) return "ქ" + (n === 700 ? "" : this.renderGeorgian(n % 100));
    if (n >= 600) return "ფ" + (n === 600 ? "" : this.renderGeorgian(n % 100));
    if (n >= 500) return "ჳ" + (n === 500 ? "" : this.renderGeorgian(n % 100));
    if (n >= 400) return "უ" + (n === 400 ? "" : this.renderGeorgian(n % 100));
    if (n >= 300) return "ტ" + (n === 300 ? "" : this.renderGeorgian(n % 100));
    if (n >= 200) return "ს" + (n === 200 ? "" : this.renderGeorgian(n % 100));
    if (n >= 100) return "რ" + (n === 100 ? "" : this.renderGeorgian(n % 100));
    if (n >= 90) return "ჟ" + (n === 90 ? "" : this.renderGeorgian(n % 10));
    if (n >= 80) return "პ" + (n === 80 ? "" : this.renderGeorgian(n % 10));
    if (n >= 70) return "ო" + (n === 70 ? "" : this.renderGeorgian(n % 10));
    if (n >= 60) return "ჲ" + (n === 60 ? "" : this.renderGeorgian(n % 10));
    if (n >= 50) return "ნ" + (n === 50 ? "" : this.renderGeorgian(n % 10));
    if (n >= 40) return "მ" + (n === 40 ? "" : this.renderGeorgian(n % 10));
    if (n >= 30) return "ლ" + (n === 30 ? "" : this.renderGeorgian(n % 10));
    if (n >= 20) return "კ" + (n === 20 ? "" : this.renderGeorgian(n % 10));
    if (n >= 10) return "ი" + (n === 10 ? "" : this.renderGeorgian(n % 10));
    if (n >= 9) return "თ";
    if (n >= 8) return "ჱ";
    if (n >= 7) return "ზ";
    if (n >= 6) return "ვ";
    if (n >= 5) return "ე";
    if (n >= 4) return "დ";
    if (n >= 3) return "გ";
    if (n >= 2) return "ბ";
    if (n >= 1) return "ა";
    if (n >= 0) return this.renderNumber(n, "#,##0");
};

inter.renderGreekUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGreekUpper(-n);
    if (isFractional && n > 1) return this.renderGreekUpper(Math.floor(n)) + "." + this.renderGreekUpper(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 0) return this.renderGreekNumeralMajuscules(n) + "´";
};

inter.renderGreekLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderGreekLower(-n);
    if (isFractional && n > 1) return this.renderGreekLower(Math.floor(n)) + "." + this.renderGreekLower(parseInt(String(n).replace(/\d*\./, ""), 10));
    if (n >= 0) return this.renderGreekNumeralMinuscules(n) + "´";
};

inter.renderSpelloutCardinal = function(n) {
    if (n < 0) return "−" + this.renderSpelloutCardinal(-n);
    if (n >= 0) return this.renderNumber(n, "#,##0.#");
};

inter.renderHebrew = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderHebrew(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1000001) return this.renderNumber(n, "#,##0");
    if (n >= 1e6) return "אלף אלפים";
    if (n >= 3001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 3001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 3e3) return this.renderHebrew(Math.floor(n / 1e3)) + " אלפים";
    if (n >= 2001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 2001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 2e3) return "אלפיים";
    if (n >= 1001) return this.renderHebrewThousands(Math.floor(n / 1e3)) + (n === 1001 ? "" : this.renderHebrew(n % 1e3));
    if (n >= 1e3) return "אלף";
    if (n >= 901) return "תתק" + this.renderHebrew099(n % 100);
    if (n >= 900) return "תת״ק";
    if (n >= 801) return "תת" + this.renderHebrew099(n % 100);
    if (n >= 800) return "ת״ת";
    if (n >= 745) return "תש" + this.renderHebrew099(n % 100);
    if (n >= 744) return "תשד״מ";
    if (n >= 701) return "תש" + this.renderHebrew099(n % 100);
    if (n >= 700) return "ת״ש";
    if (n >= 699) return "תר" + this.renderHebrew099(n % 100);
    if (n >= 698) return "תרח״צ";
    if (n >= 601) return "תר" + this.renderHebrew099(n % 100);
    if (n >= 600) return "ת״ר";
    if (n >= 501) return "תק" + this.renderHebrew099(n % 100);
    if (n >= 500) return "ת״ק";
    if (n >= 400) return "ת" + this.renderHebrew099(n % 100);
    if (n >= 345) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 344) return "שד״מ";
    if (n >= 305) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 304) return "ד״ש";
    if (n >= 300) return "ש" + this.renderHebrew099(n % 100);
    if (n >= 299) return "ר" + this.renderHebrew099(n % 100);
    if (n >= 298) return "רח״צ";
    if (n >= 200) return "ר" + this.renderHebrew099(n % 100);
    if (n >= 100) return "ק" + this.renderHebrew099(n % 100);
    if (n >= 91) return "צ״" + this.renderHebrewItem(n % 10);
    if (n >= 90) return "צ׳";
    if (n >= 81) return "פ״" + this.renderHebrewItem(n % 10);
    if (n >= 80) return "פ׳";
    if (n >= 71) return "ע״" + this.renderHebrewItem(n % 10);
    if (n >= 70) return "ע׳";
    if (n >= 61) return "ס״" + this.renderHebrewItem(n % 10);
    if (n >= 60) return "ס׳";
    if (n >= 51) return "נ״" + this.renderHebrewItem(n % 10);
    if (n >= 50) return "נ׳";
    if (n >= 41) return "מ״" + this.renderHebrewItem(n % 10);
    if (n >= 40) return "מ׳";
    if (n >= 31) return "ל״" + this.renderHebrewItem(n % 10);
    if (n >= 30) return "ל׳";
    if (n >= 21) return "כ״" + this.renderHebrewItem(n % 10);
    if (n >= 20) return "כ׳";
    if (n >= 17) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "ט״ז";
    if (n >= 15) return "ט״ו";
    if (n >= 11) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 0) return this.renderHebrewItem(n) + "׳";
};

inter.renderRomanUpper = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderRomanUpper(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 4e5) return this.renderNumber(n, "#,##0");
    if (n >= 3e5) return "ↈↈↈ" + (n === 3e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 2e5) return "ↈↈ" + (n === 2e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 1e5) return "ↈ" + (n === 1e5 ? "" : this.renderRomanUpper(n % 1e5));
    if (n >= 9e4) return "ↂↈ" + (n === 9e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 8e4) return "ↇↂↂↂ" + (n === 8e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 7e4) return "ↇↂↂ" + (n === 7e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 6e4) return "ↇↂ" + (n === 6e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 5e4) return "ↇ" + (n === 5e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 4e4) return "ↂↇ" + (n === 4e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 3e4) return "ↂↂↂ" + (n === 3e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 2e4) return "ↂↂ" + (n === 2e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 1e4) return "ↂ" + (n === 1e4 ? "" : this.renderRomanUpper(n % 1e4));
    if (n >= 9e3) return "Mↂ" + (n === 9e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 8e3) return "ↁMMM" + (n === 8e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 7e3) return "ↁMM" + (n === 7e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 6e3) return "ↁM" + (n === 6e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 5e3) return "ↁ" + (n === 5e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 4e3) return "Mↁ" + (n === 4e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 3e3) return "MMM" + (n === 3e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 2e3) return "MM" + (n === 2e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 1e3) return "M" + (n === 1e3 ? "" : this.renderRomanUpper(n % 1e3));
    if (n >= 900) return "CM" + (n === 900 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 800) return "DCCC" + (n === 800 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 700) return "DCC" + (n === 700 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 600) return "DC" + (n === 600 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 500) return "D" + (n === 500 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 400) return "CD" + (n === 400 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 300) return "CCC" + (n === 300 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 200) return "CC" + (n === 200 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 100) return "C" + (n === 100 ? "" : this.renderRomanUpper(n % 100));
    if (n >= 90) return "XC" + (n === 90 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 80) return "LXXX" + (n === 80 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 70) return "LXX" + (n === 70 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 60) return "LX" + (n === 60 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 50) return "L" + (n === 50 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 40) return "XL" + (n === 40 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 30) return "XXX" + (n === 30 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 20) return "XX" + (n === 20 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 10) return "X" + (n === 10 ? "" : this.renderRomanUpper(n % 10));
    if (n >= 9) return "IX";
    if (n >= 8) return "VIII";
    if (n >= 7) return "VII";
    if (n >= 6) return "VI";
    if (n >= 5) return "V";
    if (n >= 4) return "IV";
    if (n >= 3) return "III";
    if (n >= 2) return "II";
    if (n >= 1) return "I";
    if (n >= 0) return "N";
};

inter.renderRomanLower = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderRomanLower(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 5e3) return this.renderNumber(n, "#,##0");
    if (n >= 4e3) return "mmmm" + (n === 4e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 3e3) return "mmm" + (n === 3e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 2e3) return "mm" + (n === 2e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 1e3) return "m" + (n === 1e3 ? "" : this.renderRomanLower(n % 1e3));
    if (n >= 900) return "cm" + (n === 900 ? "" : this.renderRomanLower(n % 100));
    if (n >= 800) return "dccc" + (n === 800 ? "" : this.renderRomanLower(n % 100));
    if (n >= 700) return "dcc" + (n === 700 ? "" : this.renderRomanLower(n % 100));
    if (n >= 600) return "dc" + (n === 600 ? "" : this.renderRomanLower(n % 100));
    if (n >= 500) return "d" + (n === 500 ? "" : this.renderRomanLower(n % 100));
    if (n >= 400) return "cd" + (n === 400 ? "" : this.renderRomanLower(n % 100));
    if (n >= 300) return "ccc" + (n === 300 ? "" : this.renderRomanLower(n % 100));
    if (n >= 200) return "cc" + (n === 200 ? "" : this.renderRomanLower(n % 100));
    if (n >= 100) return "c" + (n === 100 ? "" : this.renderRomanLower(n % 100));
    if (n >= 90) return "xc" + (n === 90 ? "" : this.renderRomanLower(n % 10));
    if (n >= 80) return "lxxx" + (n === 80 ? "" : this.renderRomanLower(n % 10));
    if (n >= 70) return "lxx" + (n === 70 ? "" : this.renderRomanLower(n % 10));
    if (n >= 60) return "lx" + (n === 60 ? "" : this.renderRomanLower(n % 10));
    if (n >= 50) return "l" + (n === 50 ? "" : this.renderRomanLower(n % 10));
    if (n >= 40) return "xl" + (n === 40 ? "" : this.renderRomanLower(n % 10));
    if (n >= 30) return "xxx" + (n === 30 ? "" : this.renderRomanLower(n % 10));
    if (n >= 20) return "xx" + (n === 20 ? "" : this.renderRomanLower(n % 10));
    if (n >= 10) return "x" + (n === 10 ? "" : this.renderRomanLower(n % 10));
    if (n >= 9) return "ix";
    if (n >= 8) return "viii";
    if (n >= 7) return "vii";
    if (n >= 6) return "vi";
    if (n >= 5) return "v";
    if (n >= 4) return "iv";
    if (n >= 3) return "iii";
    if (n >= 2) return "ii";
    if (n >= 1) return "i";
    if (n >= 0) return "n";
};

inter.renderTamil = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderTamil(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 1e8) return this.renderNumber(n, "#,##,##0");
    if (n >= 1e6) return this.renderTamil(Math.floor(n / 1e6)) + "௱௲" + (n === 1e6 ? "" : this.renderTamilThousands(n % 1e6));
    if (n >= 2e3) return this.renderTamil(Math.floor(n / 1e3)) + "௲" + (n === 2e3 ? "" : this.renderTamil(n % 1e3));
    if (n >= 1e3) return "௲" + (n === 1e3 ? "" : this.renderTamil(n % 1e3));
    if (n >= 200) return this.renderTamil(Math.floor(n / 100)) + "௱" + (n === 200 ? "" : this.renderTamil(n % 100));
    if (n >= 100) return "௱" + (n === 100 ? "" : this.renderTamil(n % 100));
    if (n >= 20) return this.renderTamil(Math.floor(n / 10)) + "௰" + (n === 20 ? "" : this.renderTamil(n % 10));
    if (n >= 10) return "௰" + (n === 10 ? "" : this.renderTamil(n % 10));
    if (n >= 9) return "௯";
    if (n >= 8) return "௮";
    if (n >= 7) return "௭";
    if (n >= 6) return "௬";
    if (n >= 5) return "௫";
    if (n >= 4) return "௪";
    if (n >= 3) return "௩";
    if (n >= 2) return "௨";
    if (n >= 1) return "௧";
    if (n >= 0) return "௦";
};

inter.renderCyrillicLowerThousands = function(n) {
    if (n >= 900) return "҂ц" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 800) return "҂ѿ" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 700) return "҂ѱ" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 600) return "҂х" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 500) return "҂ф" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 400) return "҂у" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 300) return "҂т" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 200) return "҂с" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 100) return "҂р" + this.renderCyrillicLowerThousands(n % 100);
    if (n >= 90) return "҂ч" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 80) return "҂п" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 70) return "҂ѻ" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 60) return "҂ѯ" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 50) return "҂н" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 40) return "҂м" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 30) return "҂л" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 20) return "҂к" + this.renderCyrillicLowerThousands(n % 10);
    if (n >= 19) return "҂ѳ҃҂і";
    if (n >= 18) return "҂и҃҂і";
    if (n >= 17) return "҂з҃҂і";
    if (n >= 16) return "҂ѕ҃҂і";
    if (n >= 15) return "҂є҃҂і";
    if (n >= 14) return "҂д҃҂і";
    if (n >= 13) return "҂г҃҂і";
    if (n >= 12) return "҂в҃҂і";
    if (n >= 11) return "҂а҃҂і";
    if (n >= 10) return "҃҂і";
    if (n >= 9) return "҃҂ѳ";
    if (n >= 8) return "҃҂и";
    if (n >= 7) return "҃҂з";
    if (n >= 6) return "҃҂ѕ";
    if (n >= 5) return "҃҂є";
    if (n >= 4) return "҃҂д";
    if (n >= 3) return "҃҂г";
    if (n >= 2) return "҃҂в";
    if (n >= 1) return "҃҂а";
    if (n >= 0) return "҃";
};

inter.renderCyrillicLower110 = function(n) {
    if (n >= 10) return "і";
    if (n >= 9) return "ѳ";
    if (n >= 8) return "и";
    if (n >= 7) return "з";
    if (n >= 6) return "ѕ";
    if (n >= 5) return "є";
    if (n >= 4) return "д";
    if (n >= 3) return "г";
    if (n >= 2) return "в";
    if (n >= 1) return "а";
};

inter.renderCyrillicLowerPost = function(n) {
    if (n >= 1) return this.renderCyrillicLower(n);
    if (n >= 0) return "҃";
};

inter.renderCyrillicLowerFinal = function(n) {
    if (n >= 91) return "ч" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 90) return "҃ч";
    if (n >= 81) return "п" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 80) return "҃п";
    if (n >= 71) return "ѻ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 70) return "҃ѻ";
    if (n >= 61) return "ѯ" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 60) return "҃ѯ";
    if (n >= 51) return "н" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 50) return "҃н";
    if (n >= 41) return "м" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 40) return "҃м";
    if (n >= 31) return "л" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 30) return "҃л";
    if (n >= 21) return "к" + this.renderCyrillicLowerFinal(n % 10);
    if (n >= 20) return "҃к";
    if (n >= 19) return "ѳ҃і";
    if (n >= 18) return "и҃і";
    if (n >= 17) return "з҃і";
    if (n >= 16) return "ѕ҃і";
    if (n >= 15) return "є҃і";
    if (n >= 14) return "д҃і";
    if (n >= 13) return "г҃і";
    if (n >= 12) return "в҃і";
    if (n >= 11) return "а҃і";
    if (n >= 1) return "҃" + this.renderCyrillicLower110(n);
    if (n >= 0) return "҃";
};

inter.renderEthiopicP3 = function(n) {
    if (n >= 1e12) return this.renderEthiopic(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1) return "፼፼፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼፼፼";
};

inter.renderEthiopicP2 = function(n) {
    if (n >= 1e8) return this.renderEthiopic(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1) return "፼፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼፼";
};

inter.renderEthiopicP1 = function(n) {
    if (n >= 1e4) return this.renderEthiopic(Math.floor(n / 1e4)) + "፼" + (n === 1e4 ? "" : this.renderEthiopic(n % 1e4));
    if (n >= 1) return "፼" + this.renderEthiopicP(n);
    if (n >= 0) return "፼";
};

inter.renderGreekNumeralMajuscules = function(n) {
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e16) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e16)) + "ΜΜΜΜ" + (n === 1e16 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e16));
    if (n >= 1e12) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e12)) + "ΜΜΜ" + (n === 1e12 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e12));
    if (n >= 1e8) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e8)) + "ΜΜ" + (n === 1e8 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e8));
    if (n >= 1e4) return this.renderGreekNumeralMajuscules(Math.floor(n / 1e4)) + "Μ" + (n === 1e4 ? "" : " " + this.renderGreekNumeralMajuscules(n % 1e4));
    if (n >= 1e3) return "͵" + this.renderGreekNumeralMajuscules(Math.floor(n / 1e3)) + (n === 1e3 ? "" : this.renderGreekNumeralMajuscules(n % 1e3));
    if (n >= 900) return "Ϡ" + (n === 900 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 800) return "Ω" + (n === 800 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 700) return "Ψ" + (n === 700 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 600) return "Χ" + (n === 600 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 500) return "Φ" + (n === 500 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 400) return "Υ" + (n === 400 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 300) return "Τ" + (n === 300 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 200) return "Σ" + (n === 200 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 100) return "Ρ" + (n === 100 ? "" : this.renderGreekNumeralMajuscules(n % 100));
    if (n >= 90) return "Ϟ" + (n === 90 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 80) return "Π" + (n === 80 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 70) return "Ο" + (n === 70 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 60) return "Ξ" + (n === 60 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 50) return "Ν" + (n === 50 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 40) return "Μ" + (n === 40 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 30) return "Λ" + (n === 30 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 20) return "Κ" + (n === 20 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 10) return "Ι" + (n === 10 ? "" : this.renderGreekNumeralMajuscules(n % 10));
    if (n >= 9) return "Θ";
    if (n >= 8) return "Η";
    if (n >= 7) return "Ζ";
    if (n >= 6) return "Ϝ";
    if (n >= 5) return "Ε";
    if (n >= 4) return "Δ";
    if (n >= 3) return "Γ";
    if (n >= 2) return "Β";
    if (n >= 1) return "Α";
    if (n >= 0) return "𐆊";
};

inter.renderGreekNumeralMinuscules = function(n) {
    if (n >= 1e18) return this.renderNumber(n, "#,##0");
    if (n >= 1e16) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e16)) + "μμμμ" + (n === 1e16 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e16));
    if (n >= 1e12) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e12)) + "μμμ" + (n === 1e12 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e12));
    if (n >= 1e8) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e8)) + "μμ" + (n === 1e8 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e8));
    if (n >= 1e4) return this.renderGreekNumeralMinuscules(Math.floor(n / 1e4)) + "μ" + (n === 1e4 ? "" : " " + this.renderGreekNumeralMinuscules(n % 1e4));
    if (n >= 1e3) return "͵" + this.renderGreekNumeralMinuscules(Math.floor(n / 1e3)) + (n === 1e3 ? "" : this.renderGreekNumeralMinuscules(n % 1e3));
    if (n >= 900) return "ϡ" + (n === 900 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 800) return "ω" + (n === 800 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 700) return "ψ" + (n === 700 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 600) return "χ" + (n === 600 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 500) return "φ" + (n === 500 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 400) return "υ" + (n === 400 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 300) return "τ" + (n === 300 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 200) return "σ" + (n === 200 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 100) return "ρ" + (n === 100 ? "" : this.renderGreekNumeralMinuscules(n % 100));
    if (n >= 90) return "ϟ" + (n === 90 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 80) return "π" + (n === 80 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 70) return "ο" + (n === 70 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 60) return "ξ" + (n === 60 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 50) return "ν" + (n === 50 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 40) return "μ" + (n === 40 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 30) return "λ" + (n === 30 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 20) return "κ" + (n === 20 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 10) return "ι" + (n === 10 ? "" : this.renderGreekNumeralMinuscules(n % 10));
    if (n >= 9) return "θ";
    if (n >= 8) return "η";
    if (n >= 7) return "ζ";
    if (n >= 6) return "ϝ";
    if (n >= 5) return "ε";
    if (n >= 4) return "δ";
    if (n >= 3) return "γ";
    if (n >= 2) return "β";
    if (n >= 1) return "α";
    if (n >= 0) return "𐆊";
};

inter.renderHebrewThousands = function(n) {
    if (n >= 401) return this.renderHebrew(n) + "׳";
    if (n >= 100) return this.renderHebrew(n) + (n === 100 ? "" : "׳");
    if (n >= 10) return this.renderHebrew(n) + (n === 10 ? "" : "׳");
    if (n >= 0) return this.renderHebrew(n);
};

inter.renderHebrew099 = function(n) {
    if (n >= 91) return "צ״" + this.renderHebrewItem(n % 10);
    if (n >= 90) return "״צ";
    if (n >= 81) return "פ״" + this.renderHebrewItem(n % 10);
    if (n >= 80) return "״פ";
    if (n >= 71) return "ע״" + this.renderHebrewItem(n % 10);
    if (n >= 70) return "״ע";
    if (n >= 61) return "ס״" + this.renderHebrewItem(n % 10);
    if (n >= 60) return "״ס";
    if (n >= 51) return "נ״" + this.renderHebrewItem(n % 10);
    if (n >= 50) return "״נ";
    if (n >= 41) return "מ״" + this.renderHebrewItem(n % 10);
    if (n >= 40) return "״מ";
    if (n >= 31) return "ל״" + this.renderHebrewItem(n % 10);
    if (n >= 30) return "״ל";
    if (n >= 21) return "כ״" + this.renderHebrewItem(n % 10);
    if (n >= 20) return "״כ";
    if (n >= 17) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "ט״ז";
    if (n >= 15) return "ט״ו";
    if (n >= 11) return "י״" + this.renderHebrewItem(n % 10);
    if (n >= 1) return "״" + this.renderHebrewItem(n);
    if (n >= 0) return "׳";
};

inter.renderHebrewItem = function(n) {
    var isFractional = n !== Math.floor(n);
    if (n < 0) return "−" + this.renderHebrewItem(-n);
    if (isFractional && n > 1) return this.renderNumber(n, "#,##0.00");
    if (n >= 2100) return this.renderNumber(n, "#,##0");
    if (n >= 2e3) return "תתתתת" + (n === 2e3 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1900) return "תתתתש" + (n === 1900 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1800) return "תתתתר" + (n === 1800 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1700) return "תתתתק" + (n === 1700 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1600) return "תתתת" + (n === 1600 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1500) return "תתתש" + (n === 1500 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1400) return "תתתר" + (n === 1400 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1300) return "תתתק" + (n === 1300 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1200) return "תתת" + (n === 1200 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1100) return "תתש" + (n === 1100 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 1e3) return "תתר" + (n === 1e3 ? "" : this.renderHebrewItem(n % 1e3));
    if (n >= 900) return "תתק" + (n === 900 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 800) return "תת" + (n === 800 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 745) return "תש" + this.renderHebrewItem(n % 100);
    if (n >= 744) return "תשדמ";
    if (n >= 700) return "תש" + (n === 700 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 699) return "תר" + this.renderHebrewItem(n % 100);
    if (n >= 698) return "תרחצ";
    if (n >= 600) return "תר" + (n === 600 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 500) return "תק" + (n === 500 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 400) return "ת" + (n === 400 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 345) return "ש" + this.renderHebrewItem(n % 100);
    if (n >= 344) return "שדמ";
    if (n >= 305) return "ש" + this.renderHebrewItem(n % 100);
    if (n >= 304) return "דש";
    if (n >= 300) return "ש" + (n === 300 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 299) return "ר" + this.renderHebrewItem(n % 100);
    if (n >= 298) return "רחצ";
    if (n >= 200) return "ר" + (n === 200 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 100) return "ק" + (n === 100 ? "" : this.renderHebrewItem(n % 100));
    if (n >= 90) return "צ" + (n === 90 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 80) return "פ" + (n === 80 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 70) return "ע" + (n === 70 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 60) return "ס" + (n === 60 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 50) return "נ" + (n === 50 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 40) return "מ" + (n === 40 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 30) return "ל" + (n === 30 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 20) return "כ" + (n === 20 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 17) return "י" + this.renderHebrewItem(n % 10);
    if (n >= 16) return "טז";
    if (n >= 15) return "טו";
    if (n >= 10) return "י" + (n === 10 ? "" : this.renderHebrewItem(n % 10));
    if (n >= 9) return "ט";
    if (n >= 8) return "ח";
    if (n >= 7) return "ז";
    if (n >= 6) return "ו";
    if (n >= 5) return "ה";
    if (n >= 4) return "ד";
    if (n >= 3) return "ג";
    if (n >= 2) return "ב";
    if (n >= 1) return "א";
    if (n >= 0) return "״";
};

inter.renderTamilThousands = function(n) {
    if (n >= 1e3) return this.renderTamilThousands(Math.floor(n / 1e3)) + "௲" + (n === 1e3 ? "" : this.renderTamilThousands(n % 1e3));
    if (n >= 0) return this.renderTamil(n);
};

inter.renderEthiopicP = function(n) {
    if (n >= 1e16) return this.renderEthiopicP(Math.floor(n / 1e16)) + "፼" + this.renderEthiopicP3(n % 1e16);
    if (n >= 1e12) return this.renderEthiopicP(Math.floor(n / 1e12)) + "፼" + this.renderEthiopicP2(n % 1e12);
    if (n >= 1e8) return this.renderEthiopicP(Math.floor(n / 1e8)) + "፼" + this.renderEthiopicP1(n % 1e8);
    if (n >= 1e4) return this.renderEthiopicP(Math.floor(n / 1e4)) + "፼" + (n === 1e4 ? "" : this.renderEthiopicP(n % 1e4));
    if (n >= 1) return this.renderEthiopic(n);
};

inter.timeZones = [].concat(P.timeZones.slice(0, 251), P.timeZones.slice(252, 268), {
    id: "Europe/Kaliningrad",
    regionId: "151",
    utcStandardOffsetSeconds: 7200,
    displayName: "калинингра́дъ",
    countryId: "RU"
}, P.timeZones.slice(268, 284), P.timeZones[285], P.timeZones.slice(287, 290), P.timeZones[291], {
    id: "Europe/Volgograd",
    regionId: "151",
    utcStandardOffsetSeconds: 10800,
    displayName: "волгогра́дъ",
    countryId: "RU"
}, {
    id: "Europe/Minsk",
    regionId: "151",
    utcStandardOffsetSeconds: 10800,
    displayName: "ми́нскъ",
    countryId: "BY"
}, {
    id: "Europe/Moscow",
    regionId: "151",
    utcStandardOffsetSeconds: 10800,
    displayName: "москва̀",
    countryId: "RU"
}, {
    id: "Europe/Simferopol",
    regionId: "151",
    utcStandardOffsetSeconds: 10800,
    displayName: "сѷмферꙋ́поль",
    countryId: "UA"
}, P.timeZones.slice(293, 301), P.timeZones.slice(302, 306), {
    id: "Europe/Samara",
    regionId: "151",
    utcStandardOffsetSeconds: 14400,
    displayName: "сама́ра",
    countryId: "RU"
}, P.timeZones[306], P.timeZones.slice(309, 316), P.timeZones.slice(318, 320), {
    id: "Asia/Aqtau",
    regionId: "143",
    utcStandardOffsetSeconds: 18e3,
    displayName: "а҆кта́ꙋ",
    countryId: "KZ"
}, {
    id: "Asia/Aqtobe",
    regionId: "143",
    utcStandardOffsetSeconds: 18e3,
    displayName: "а҆ктю́бинскъ",
    countryId: "KZ"
}, {
    id: "Asia/Qyzylorda",
    regionId: "143",
    utcStandardOffsetSeconds: 18e3,
    displayName: "кызылѻрда̀",
    countryId: "KZ"
}, {
    id: "Asia/Yekaterinburg",
    regionId: "151",
    utcStandardOffsetSeconds: 18e3,
    displayName: "є҆катерїнбꙋ́ргъ",
    countryId: "RU"
}, {
    id: "Asia/Oral",
    regionId: "143",
    utcStandardOffsetSeconds: 18e3,
    displayName: "ᲂу҆ра́льскъ",
    countryId: "KZ"
}, P.timeZones.slice(321, 324), P.timeZones.slice(326, 328), P.timeZones.slice(329, 333), {
    id: "Asia/Almaty",
    regionId: "143",
    utcStandardOffsetSeconds: 21600,
    displayName: "а҆лматы̀",
    countryId: "KZ"
}, {
    id: "Asia/Bishkek",
    regionId: "143",
    utcStandardOffsetSeconds: 21600,
    displayName: "бишке́къ",
    countryId: "KG"
}, {
    id: "Asia/Omsk",
    regionId: "151",
    utcStandardOffsetSeconds: 21600,
    displayName: "ѻ҆́мскъ",
    countryId: "RU"
}, P.timeZones.slice(333, 342), P.timeZones.slice(345, 349), {
    id: "Asia/Krasnoyarsk",
    regionId: "151",
    utcStandardOffsetSeconds: 25200,
    displayName: "красноѧ́рскъ",
    countryId: "RU"
}, {
    id: "Asia/Novokuznetsk",
    regionId: "151",
    utcStandardOffsetSeconds: 25200,
    displayName: "новокꙋзне́цкъ",
    countryId: "RU"
}, {
    id: "Asia/Novosibirsk",
    regionId: "151",
    utcStandardOffsetSeconds: 25200,
    displayName: "новосиби́рскъ",
    countryId: "RU"
}, P.timeZones.slice(349, 352), P.timeZones.slice(353, 363), {
    id: "Asia/Irkutsk",
    regionId: "151",
    utcStandardOffsetSeconds: 28800,
    displayName: "и҆ркꙋ́тскъ",
    countryId: "RU"
}, P.timeZones[363], P.timeZones.slice(365, 367), P.timeZones.slice(368, 372), {
    id: "Asia/Khandyga",
    regionId: "151",
    utcStandardOffsetSeconds: 32400,
    displayName: "ха́ндыга",
    countryId: "RU"
}, {
    id: "Asia/Chita",
    regionId: "151",
    utcStandardOffsetSeconds: 32400,
    displayName: "чита̀",
    countryId: "RU"
}, {
    id: "Asia/Yakutsk",
    regionId: "151",
    utcStandardOffsetSeconds: 32400,
    displayName: "ꙗ҆кꙋ́тскъ",
    countryId: "RU"
}, P.timeZones.slice(373, 387), {
    id: "Asia/Vladivostok",
    regionId: "151",
    utcStandardOffsetSeconds: 36e3,
    displayName: "владивосто́къ",
    countryId: "RU"
}, {
    id: "Asia/Ust-Nera",
    regionId: "151",
    utcStandardOffsetSeconds: 36e3,
    displayName: "ᲂу҆́сть_не́ра",
    countryId: "RU"
}, P.timeZones.slice(389, 395), P.timeZones.slice(396, 399), {
    id: "Asia/Magadan",
    regionId: "151",
    utcStandardOffsetSeconds: 39600,
    displayName: "магада́нъ",
    countryId: "RU"
}, {
    id: "Asia/Sakhalin",
    regionId: "151",
    utcStandardOffsetSeconds: 39600,
    displayName: "сахали́нъ",
    countryId: "RU"
}, {
    id: "Asia/Srednekolymsk",
    regionId: "151",
    utcStandardOffsetSeconds: 39600,
    displayName: "среднеколы́мскъ",
    countryId: "RU"
}, P.timeZones.slice(402, 405), P.timeZones.slice(406, 413), {
    id: "Asia/Anadyr",
    regionId: "151",
    utcStandardOffsetSeconds: 43200,
    displayName: "а҆на́дырь",
    countryId: "RU"
}, {
    id: "Asia/Kamchatka",
    regionId: "151",
    utcStandardOffsetSeconds: 43200,
    displayName: "петропа́ѵловскъ_камча́тскїй",
    countryId: "RU"
}, P.timeZones.slice(413, 419));

inter.territories = _dp9t149;

inter.countries = _dp9t149;

inter.languages = [ {
    id: "en_us",
    displayName: "а҆мерїка́нскїй а҆нглі́йскїй",
    nativeDisplayName: "American English"
}, {
    id: "en_au",
    displayName: "а҆ѵстралі́йскїй а҆нглі́йскїй",
    nativeDisplayName: "Australian English"
}, {
    id: "en_gb",
    displayName: "брїта́нскїй а҆нглі́йскїй",
    nativeDisplayName: "British English"
}, {
    id: "en_ca",
    displayName: "кана́дскїй а҆нглі́йскїй",
    nativeDisplayName: "Canadian English"
}, {
    id: "de",
    displayName: "нѣме́цкїй",
    nativeDisplayName: "Deutsch"
}, {
    id: "en",
    displayName: "а҆нглі́йскїй",
    nativeDisplayName: "English"
}, {
    id: "es",
    displayName: "і҆спа́нскїй",
    nativeDisplayName: "español"
}, {
    id: "es_es",
    displayName: "є҆ѵрѡпе́йскїй і҆спа́нскїй",
    nativeDisplayName: "español de España"
}, {
    id: "es_mx",
    displayName: "і҆спанскїй (ме́ѯїка)",
    nativeDisplayName: "español de México"
}, {
    id: "es_419",
    displayName: "латїноамерїка́нскїй і҆спа́нскїй",
    nativeDisplayName: "español latinoamericano"
}, {
    id: "fr",
    displayName: "францꙋ́зскїй",
    nativeDisplayName: "français"
}, {
    id: "fr_ca",
    displayName: "кана́дскїй францꙋ́зскїй",
    nativeDisplayName: "français canadien"
}, {
    id: "fr_ch",
    displayName: "є҆лветі́йскїй францꙋ́зскїй",
    nativeDisplayName: "français suisse"
}, {
    id: "it",
    displayName: "і҆талїа́нскїй",
    nativeDisplayName: "italiano"
}, {
    id: "ro_md",
    displayName: "молда́вскїй",
    nativeDisplayName: "moldovenească"
}, {
    id: "pt",
    displayName: "портога́льскїй",
    nativeDisplayName: "português"
}, {
    id: "pt_br",
    displayName: "бразі́льскїй портога́льскїй",
    nativeDisplayName: "português do Brasil"
}, {
    id: "pt_pt",
    displayName: "є҆ѵрѡпе́йскїй портога́льскїй",
    nativeDisplayName: "português europeu"
}, {
    id: "ro",
    displayName: "дакорꙋмы́нскїй",
    nativeDisplayName: "română"
}, {
    id: "de_ch",
    displayName: "є҆лветі́йскїй нѣме́цкїй",
    nativeDisplayName: "Schweizer Hochdeutsch"
}, {
    id: "de_at",
    displayName: "а҆ѵстрі́йскїй нѣме́цкїй",
    nativeDisplayName: "Österreichisches Deutsch"
}, {
    id: "be",
    displayName: "бѣлорꙋ́сскїй",
    nativeDisplayName: "беларуская"
}, {
    id: "und",
    displayName: "невѣ́домый ѧ҆зы́къ"
}, {
    id: "ru",
    displayName: "рꙋ́сскїй",
    nativeDisplayName: "русский"
}, {
    id: "uk",
    displayName: "ᲂу҆краи́нскїй",
    nativeDisplayName: "українська"
}, {
    id: "cu",
    displayName: "церковнослове́нскїй",
    nativeDisplayName: "церковнослове́нскїй"
}, {
    id: "kk",
    displayName: "каза́хскїй",
    nativeDisplayName: "қазақ тілі"
}, {
    id: "ar",
    displayName: "а҆ра́вскїй",
    nativeDisplayName: "العربية"
}, {
    id: "zh",
    displayName: "хи́нскїй",
    nativeDisplayName: "中文"
}, {
    id: "ja",
    displayName: "ꙗ҆пѡ́нскїй",
    nativeDisplayName: "日本語"
}, {
    id: "zh_hans",
    displayName: "ᲂу҆проще́нный хи́нскїй",
    nativeDisplayName: "简体中文"
}, {
    id: "zh_hant",
    displayName: "традїцїо́нный хи́нскїй",
    nativeDisplayName: "繁體中文"
} ];

inter.scripts = [ {
    id: "Arab",
    displayName: "а҆раві́йскаѧ"
}, {
    id: "Zxxx",
    displayName: "безпи́сьменный"
}, {
    id: "Glag",
    displayName: "глаго́лица"
}, {
    id: "Cyrl",
    displayName: "кѷри́ллица"
}, {
    id: "Latn",
    displayName: "латі́ница"
}, {
    id: "Zzzz",
    displayName: "невѣ̑домаѧ пи́сьмена"
}, {
    id: "Hant",
    displayName: "хи́нскаѧ традїцїо́ннаѧ"
}, {
    id: "Hans",
    displayName: "хи́нскаѧ ᲂу҆проще́ннаѧ"
} ];

inter.currencies = [ {
    id: "USD",
    displayName: "а҆мерїка́нскїй до́лларъ",
    symbol: "$",
    other: "а҆мерїка́нскагѡ до́ллара"
}, {
    id: "GBP",
    displayName: "а҆нглі́йскїй фꙋ́нтъ сте́рлингѡвъ",
    symbol: "£",
    other: "а҆нглі́йскагѡ фꙋ́нта сте́рлингѡвъ"
}, {
    id: "BRL",
    displayName: "бразі́льскїй реа́лъ",
    symbol: "R$",
    other: "бразі́льскагѡ реа́ла"
}, {
    id: "BYR",
    displayName: "бѣлорꙋ́сскїй рꙋ́бль",
    symbol: "BYR",
    other: "бѣлорꙋ́сскагѡ рꙋблѧ̀"
}, {
    id: "KZT",
    displayName: "каза́хскаѧ деньга̀",
    symbol: "₸",
    other: "каза́хскїѧ деньгѝ"
}, {
    id: "KGS",
    displayName: "кирги́зскїй сꙋ́мъ",
    symbol: "KGS",
    other: "кирги́зскагѡ сꙋ́ма"
}, {
    id: "XXX",
    displayName: "невѣ́домое пла́тное сре́дство",
    other: "невѣ́домагѡ пла́тнагѡ сре́дства"
}, {
    id: "RUB",
    displayName: "рѡссі́йскїй рꙋ́бль",
    symbol: "₽",
    other: "рѡссі́йскагѡ рꙋблѧ̀"
}, {
    id: "CNY",
    displayName: "хи́нскїй ю҆а́нь",
    symbol: "CN¥",
    other: "хи́нскагѡ ю҆а́нѧ"
}, {
    id: "EUR",
    displayName: "є҆́ѵрѡ",
    symbol: "€",
    other: "є҆́ѵра"
}, {
    id: "INR",
    displayName: "і҆нді́йскаѧ рꙋ́пїѧ",
    symbol: "₹",
    other: "і҆нді́йскїѧ рꙋ́пїи"
}, {
    id: "UAH",
    displayName: "ᲂу҆краи́нскаѧ гри́вна",
    symbol: "₴",
    other: "ᲂу҆краи́нскїѧ гри́вны"
}, {
    id: "JPY",
    displayName: "ꙗ҆пѡ́нскаѧ і҆е́на",
    symbol: "JP¥",
    other: "ꙗ҆пѡ́нскїѧ і҆е́ны"
} ];

module.exports = inter;